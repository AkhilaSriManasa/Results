/// <summary>
/// Defines whatewer each request shold be autorized via login 
/// </summary>
/// <summary>
/// The user name to be used for autorization 
/// </summary>
/// <summary>
/// The password to be used for autorization 
/// </summary>
/// <summary>
/// Specifies whether to use default credentials. 
/// </summary>
/// <summary>
/// Parser that uses AngleSharp https://github.com/AngleSharp/AngleSharp to parse page links
/// </summary>
//BloomFilter = null;
/// <summary>
/// Implementation that stores a numeric hash of the url instead of the url itself to use for lookups. This should save space when the crawled url list gets very long. 
/// </summary>
/// <inheritDoc />
/// <inheritDoc />
/// <inheritDoc />
/// <summary>
/// Determines what pages should be crawled, whether the raw content should be downloaded and if the links on a page should be crawled
/// </summary>
/// <summary>
/// Decides whether the page should be crawled
/// </summary>
/// <summary>
/// Decides whether the page's links should be crawled
/// </summary>
/// <summary>
/// Decides whether the page's content should be dowloaded
/// </summary>
/// <summary>
/// Decides whether the page should be re-crawled
/// </summary>
//TODO Do we want to ignore redirect chains (ie.. do not treat them as seperate page crawls)?
/// <summary>
/// Rate limits or throttles on a per domain basis
/// </summary>
/// <summary>
/// If the domain of the param has been flagged for rate limiting, it will be rate limited according to the configured minimum crawl delay
/// </summary>
/// <summary>
/// Add a domain entry so that domain may be rate limited according the the param minumum crawl delay
/// </summary>
/// <summary>
/// Add/Update a domain entry so that domain may be rate limited according the the param minumum crawl delay
/// </summary>
/// <summary>
/// Remove a domain entry so that it will no longer be rate limited
/// </summary>
//IRateLimiter is always a little under so adding a little more time
//just calling this method adds the new domain
/// <summary>
/// Parser that uses Html Agility Pack http://htmlagilitypack.codeplex.com/ to parse page links
/// </summary>
//a[@href]");
//area[@href]");
//link[@rel='canonical'][@href]");
//base");
//Must use node.InnerHtml instead of node.InnerText since "aaa<br />bbb" will be returned as "aaabbb"
//meta[translate(@name,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')='robots']");
/// <summary>
/// Handles parsing hyperlinks out of the raw html
/// </summary>
/// <summary>
/// Parses html to extract hyperlinks, converts each into an absolute url
/// </summary>
/// <summary>
/// Parses html to extract hyperlinks, converts each into an absolute url
/// </summary>
//Use the uri of the page that actually responded to the request instead of crawledPage.Uri (Issue 82).
//Using HttpWebRequest.Address instead of HttpWebResonse.ResponseUri since this is the best practice and mentioned on http://msdn.microsoft.com/en-us/library/system.net.httpwebresponse.responseuri.aspx
//If html base tag exists use it instead of page uri for relative links
//"))
// Remove the url fragment part of the url if needed.
// This is the part after the # and is often not useful.
//X-Robots-Tag http header
//Meta robots tag
/// <summary>
/// Make an http web request to the url and download its content
/// </summary>
/// <summary>
/// Make an http web request to the url and download its content based on the param func decision
/// </summary>
///// <summary>
///// Asynchronously make an http web request to the url and download its content based on the param func decision
///// </summary>
//Task<CrawledPage> MakeRequestAsync(Uri uri, Func<CrawledPage, CrawlDecision> shouldDownloadContent);
/// <summary>
/// Make an http web request to the url and download its content
/// </summary>
/// <summary>
/// Make an http web request to the url and download its content based on the param func decision
/// </summary>
//Should already be closed by _extractor but just being safe
/*";
//Added to handle redirects clearing auth headers which result in 401...
//https://stackoverflow.com/questions/13159589/how-to-handle-authenticatication-with-httpwebrequest-allowautoredirect
//" + uri.Host), "Basic", new NetworkCredential(_config.LoginUser, _config.LoginPassword));
//" + uri.Host), "Basic", new NetworkCredential(_config.LoginUser, _config.LoginPassword));
/// <summary>
/// Gets the number of seconds to delay between internal page crawls. Returns 0 by default.
/// </summary>
/// <summary>
/// Whether the spider is "allowed" to crawl the param link
/// </summary>
/// <summary>
/// Whether the user agent is "allowed" to crawl the root url
/// </summary>
/// <summary>
/// Instance of robot.txt object
/// </summary>
/// <summary>
/// Finds and builds the robots.txt file abstraction
/// </summary>
/// <summary>
/// Finds the robots.txt file using the rootUri. 
/// If rootUri is http://yahoo.com, it will look for robots at http://yahoo.com/robots.txt.
/// If rootUri is http://music.yahoo.com, it will look for robots at http://music.yahoo.com/robots.txt
/// </summary>
/// <param name="rootUri">The root domain</param>
/// <returns>Object representing the robots.txt file or returns null</returns>
/// <summary>
/// Handles managing the priority of what pages need to be crawled
/// </summary>
/// <summary>
/// Count of remaining items that are currently scheduled
/// </summary>
/// <summary>
/// Schedules the param to be crawled
/// </summary>
/// <summary>
/// Schedules the param to be crawled
/// </summary>
/// <summary>
/// Gets the next page to crawl
/// </summary>
/// <summary>
/// Clear all currently scheduled pages
/// </summary>
/// <summary>
/// Add the Url to the list of crawled Url without scheduling it to be crawled.
/// </summary>
/// <param name="uri"></param>
/// <summary>
/// Returns whether or not the specified Uri was already scheduled to be crawled or simply added to the
/// list of known Uris.
/// </summary>
// Do not wrap in closing statement to prevent closing of this stream.
//find expression from : http://stackoverflow.com/questions/3458217/how-to-use-regular-expression-to-match-the-charset-string-in-html
//TODO temporary hack, this needs to be a configurable value
//Russian, Bulgarian, Serbian cyrillic
// Nothing to do
/// <summary>
/// Polite web crawler
/// </summary>
/// <summary>
/// Event occur after robots txt is parsed asynchroniously
/// </summary>
/// <summary>
/// Event occur after robots txt is parsed synchroniously
/// </summary>
/// <summary>
/// Extends the WebCrawler class and added politeness features like crawl delays and respecting robots.txt files. 
/// </summary>
//Load robots.txt
//Use whichever value is greater between the actual crawl delay value found, the max allowed crawl delay value or the minimum crawl delay required for every domain
//https://github.com/sjdirect/abot/issues/96 Handle scenario where the root is allowed but all the paths below are disallowed like "disallow: /*"
/*"
/// <summary>
/// Event occur after robots txt is parsed asynchroniously
/// </summary>
/// <summary>
/// Event occur after robots txt is parsed synchroniously
/// </summary>
/// <summary>
/// Fire robots txt parsed completed async
/// </summary>
/// <param name="robots"></param>
//Fire each subscribers delegate async
/// <summary>
/// Fire robots txt parsed completed
/// </summary>
/// <param name="robots"></param>
/// <summary>
/// Class which hold robot txt data after successful parsing
/// </summary>
/// <summary>
/// robots.txt object
/// </summary>
/// <summary>
/// Contructor to be used to create an object which will path arugments when robots txt is parsed
/// </summary>
/// <param name="crawlContext"></param>
/// <param name="robots"></param>
/// <summary>
/// Synchronous event that is fired before a page is crawled.
/// </summary>
/// <summary>
/// Synchronous event that is fired when an individual page has been crawled.
/// </summary>
/// <summary>
/// Synchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawl impl returned false. This means the page or its links were not crawled.
/// </summary>
/// <summary>
/// Synchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawlLinks impl returned false. This means the page's links were not crawled.
/// </summary>
/// <summary>
/// Asynchronous event that is fired before a page is crawled.
/// </summary>
/// <summary>
/// Asynchronous event that is fired when an individual page has been crawled.
/// </summary>
/// <summary>
/// Asynchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawl impl returned false. This means the page or its links were not crawled.
/// </summary>
/// <summary>
/// Asynchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawlLinks impl returned false. This means the page's links were not crawled.
/// </summary>
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether a page should be crawled or not
/// </summary>
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether the page's content should be dowloaded
/// </summary>
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether a page's links should be crawled or not
/// </summary>
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether a cerain link on a page should be scheduled to be crawled
/// </summary>
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether a page should be recrawled
/// </summary>
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether the 1st uri param is considered an internal uri to the second uri param
/// </summary>
/// <param name="decisionMaker delegate"></param>
/// <summary>
/// Begins a crawl using the uri param
/// </summary>
/// <summary>
/// Begins a crawl using the uri param, and can be cancelled using the CancellationToken
/// </summary>
/// <summary>
/// Dynamic object that can hold any value that needs to be available in the crawl context
/// </summary>
/// <summary>
/// Dynamic object that can hold any value that needs to be available in the crawl context
/// </summary>
//This is a workaround for dealing with periods in urls (http://stackoverflow.com/questions/856885/httpwebrequest-to-url-with-dot-at-the-end)
//Will not be needed when this project is upgraded to 4.5
// Clear the CanonicalizeAsFilePath attribute
/// <summary>
/// Creates a crawler instance with the default settings and implementations.
/// </summary>
/// <summary>
/// Creates a crawler instance with custom settings or implementation. Passing in null for all params is the equivalent of the empty constructor.
/// </summary>
/// <param name="threadManager">Distributes http requests over multiple threads</param>
/// <param name="scheduler">Decides what link should be crawled next</param>
/// <param name="pageRequester">Makes the raw http requests</param>
/// <param name="hyperLinkParser">Parses a crawled page for it's hyperlinks</param>
/// <param name="crawlDecisionMaker">Decides whether or not to crawl a page or that page's links</param>
/// <param name="crawlConfiguration">Configurable crawl values</param>
/// <param name="memoryManager">Checks the memory usage of the host process</param>
/// <summary>
/// Begins a synchronous crawl using the uri param, subscribe to events to process data as it becomes available
/// </summary>
/// <summary>
/// Begins a synchronous crawl using the uri param, subscribe to events to process data as it becomes available
/// </summary>
/// <summary>
/// Synchronous event that is fired before a page is crawled.
/// </summary>
/// <summary>
/// Synchronous event that is fired when an individual page has been crawled.
/// </summary>
/// <summary>
/// Synchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawl impl returned false. This means the page or its links were not crawled.
/// </summary>
/// <summary>
/// Synchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawlLinks impl returned false. This means the page's links were not crawled.
/// </summary>
/// <summary>
/// Asynchronous event that is fired before a page is crawled.
/// </summary>
/// <summary>
/// Asynchronous event that is fired when an individual page has been crawled.
/// </summary>
/// <summary>
/// Asynchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawl impl returned false. This means the page or its links were not crawled.
/// </summary>
/// <summary>
/// Asynchronous event that is fired when the ICrawlDecisionMaker.ShouldCrawlLinks impl returned false. This means the page's links were not crawled.
/// </summary>
//Fire each subscribers delegate async
//Must be fired synchronously to avoid main thread exiting before completion of event handler for first or last page crawled
//Fire each subscribers delegate async
//Fire each subscribers delegate async
//Fire each subscribers delegate async
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether a page should be crawled or not
/// </summary>
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether the page's content should be dowloaded
/// </summary>
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether a page's links should be crawled or not
/// </summary>
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether a cerain link on a page should be scheduled to be crawled
/// </summary>
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether a page should be recrawled or not
/// </summary>
/// <summary>
/// Synchronous method that registers a delegate to be called to determine whether the 1st uri param is considered an internal uri to the second uri param
/// </summary>
/// <param name="decisionMaker delegate"></param>     
//to be sure nothing was scheduled since first call to clear()
//Set all events to null so no more events are fired
//protected virtual async Task ProcessPage(PageToCrawl pageToCrawl)
//CrawledPage crawledPage = await CrawlThePage(pageToCrawl);
// Validate the root uri in case of a redirection.
//TODO No unit tests cover these lines
// Look for the Retry-After header in the response.
// Try to convert to DateTime first, then in double.
//protected virtual async Task<CrawledPage> CrawlThePage(PageToCrawl pageToCrawl)
//CrawledPage crawledPage = await _pageRequester.MakeRequestAsync(pageToCrawl.Uri, ShouldDownloadPageContent);
// First validate that the link was not already visited or added to the list of pages to visit, so we don't
// make the same validation and fire the same events twice.
//Added due to a bug in the Uri class related to this (http://stackoverflow.com/questions/2814951/system-uriformatexception-invalid-uri-the-hostname-could-not-be-parsed)
// Add this link to the list of known Urls so validations are not duplicated in the future.
//TODO No unit tests cover these lines
// Use the time to wait provided by the server instead of the config, if any.
//TODO Cannot use RateLimiter since it currently cannot handle dynamic sleep times so using Thread.Sleep in the meantime
/// <summary>
/// Validate that the Root page was not redirected. If the root page is redirected, we assume that the root uri
/// should be changed to the uri where it was redirected.
/// </summary>
/// <summary>
/// Retrieve the URI where the specified crawled page was redirected.
/// </summary>
/// <remarks>
/// If HTTP auto redirections is disabled, this value is stored in the 'Location' header of the response.
/// If auto redirections is enabled, this value is stored in the response's ResponseUri property.
/// </remarks>
// For auto redirects, look for the response uri.
// For manual redirects, we need to look for the location header.
// Check if the location is absolute. If not, create an absolute uri.
/// <summary>
/// Max concurrent threads to use for http requests
/// </summary>
/// <summary>
/// Maximum number of pages to crawl. 
/// If zero, this setting has no effect
/// </summary>
/// <summary>
/// Maximum number of pages to crawl per domain
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// Maximum size of page. If the page size is above this value, it will not be downloaded or processed
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// The user agent string to use for http requests
/// </summary>
/// <summary>
/// The http protocol version number to use during http requests. Currently supporting values "1.1" and "1.0". 
/// </summary>
/// <summary>
/// Maximum seconds before the crawl times out and stops. 
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// Dictionary that stores additional key-value pairs that can be accessed through the crawl pipeline
/// </summary>
/// <summary>
/// Whether Uris should be crawled more than once. This is not common and should be false for most scenarios
/// </summary>
/// <summary>
/// Whether pages external to the root uri should be crawled
/// </summary>
/// <summary>
/// Whether pages external to the root uri should have their links crawled. NOTE: IsExternalPageCrawlEnabled must be true for this setting to have any effect
/// </summary>
/// <summary>
/// Whether or not url named anchors or hashbangs are considered part of the url. If false, they will be ignored. If true, they will be considered part of the url.
/// </summary>
/// <summary>
/// A comma seperated string that has content types that should have their page content downloaded. For each page, the content type is checked to see if it contains any of the values defined here.
/// </summary>
/// <summary>
/// Gets or sets the maximum number of concurrent connections allowed by a System.Net.ServicePoint. The system default is 2. This means that only 2 concurrent http connections can be open to the same host.
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// Gets or sets the time-out value in seconds for the System.Net.HttpWebRequest.GetResponse() and System.Net.HttpWebRequest.GetRequestStream() methods.
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// Gets or sets the maximum number of redirects that the request follows.
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// Gets or sets a value that indicates whether the request should follow redirection
/// </summary>
/// <summary>
/// Gets or sets a value that indicates gzip and deflate will be automatically accepted and decompressed
/// </summary>
/// <summary>
/// Whether the cookies should be set and resent with every request
/// </summary>
/// <summary>
/// Whether or not to validate the server SSL certificate. If true, the default validation will be made.
/// If false, the certificate validation is bypassed. This setting is useful to crawl sites with an
/// invalid or expired SSL certificate.
/// </summary>
/// <summary>
/// Uses closest multiple of 16 to the value set. If there is not at least this much memory available before starting a crawl, throws InsufficientMemoryException.
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// The max amount of memory to allow the process to use. If this limit is exceeded the crawler will stop prematurely.
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// The max amount of time before refreshing the value used to determine the amount of memory being used by the process that hosts the crawler instance.
/// This value has no effect if MaxMemoryUsageInMb is zero.
/// </summary>
/// <summary>
/// Maximum levels below root page to crawl. If value is 0, the homepage will be crawled but none of its links will be crawled. If the level is 1, the homepage and its links will be crawled but none of the links links will be crawled.
/// </summary>
/// <summary>
/// Maximum links to crawl per page.
/// If value is zero, this setting has no effect.
/// </summary>
/// <summary>
/// Gets or sets a value that indicates whether the crawler should parse the page's links even if a CrawlDecision (like CrawlDecisionMaker.ShouldCrawlPageLinks()) determines that those links will not be crawled.
/// </summary>
/// <summary>
/// The max number of retries for a url if a web exception is encountered. If the value is 0, no retries will be made
/// </summary>
/// <summary>
/// The minimum delay between a failed http request and the next retry
/// </summary>
/// <summary>
/// Whether the crawler should retrieve and respect the robots.txt file.
/// </summary>
/// <summary>
/// Whether the crawler should ignore links on pages that have a <meta name="robots" content="nofollow" /> tag
/// </summary>
/// <summary>
/// Whether the crawler should ignore links on pages that have an http X-Robots-Tag header of nofollow
/// </summary>
/// <summary>
/// Whether the crawler should ignore links that have a <a href="whatever" rel="nofollow"></a>...
/// </summary>
/// <summary>
/// If true, will ignore the robots.txt file if it disallows crawling the root uri.
/// </summary>
/// <summary>
/// The user agent string to use when checking robots.txt file for specific directives.  Some examples of other crawler's user agent values are "googlebot", "slurp" etc...
/// </summary>
/// <summary>
/// The number of milliseconds to wait in between http requests to the same domain.
/// </summary>
/// <summary>
/// The maximum numer of seconds to respect in the robots.txt "Crawl-delay: X" directive. 
/// IsRespectRobotsDotTextEnabled must be true for this value to be used.
/// If zero, will use whatever the robots.txt crawl delay requests no matter how high the value is.
/// </summary>
/// <summary>
/// Defines whether each request should be authorized via login
/// </summary>
/// <summary>
/// The user name to be used for authorization
/// </summary>
/// <summary>
/// The password to be used for authorization
/// </summary>
/// <summary>
/// Specifies whether to use default credentials.
/// </summary>
/// <summary>
/// The root of the crawl
/// </summary>
/// <summary>
/// The root of the crawl specified in the configuration. If the root URI was redirected to another URI,
/// it will be set in RootUri.
/// </summary>
/// <summary>
/// total number of pages that have been crawled
/// </summary>
/// <summary>
/// The datetime of the last unsuccessful http status (non 200) was requested
/// </summary>
/// <summary>
/// Threadsafe dictionary of domains and how many pages were crawled in that domain
/// </summary>
/// <summary>
/// Configuration values used to determine crawl settings
/// </summary>
/// <summary>
/// The scheduler that is being used
/// </summary>
/// <summary>
/// Random dynamic values
/// </summary>
/// <summary>
/// Whether a request to stop the crawl has happened. Will clear all scheduled pages but will allow any threads that are currently crawling to complete.
/// </summary>
/// <summary>
/// Whether a request to hard stop the crawl has happened. Will clear all scheduled pages and cancel any threads that are currently crawling.
/// </summary>
/// <summary>
/// The memory usage in mb at the start of the crawl
/// </summary>
/// <summary>
/// The memory usage in mb at the end of the crawl
/// </summary>
/// <summary>
/// Cancellation token used to hard stop the crawl. Will clear all scheduled pages and abort any threads that are currently crawling.
/// </summary>
/// <summary>
/// Whether to allow the crawl decision
/// </summary>
/// <summary>
/// The reason the crawl decision was NOT allowed
/// </summary>
/// <summary>
/// Whether the crawl should be stopped. Will clear all scheduled pages but will allow any threads that are currently crawling to complete.
/// </summary>
/// <summary>
/// Whether the crawl should be "hard stopped". Will clear all scheduled pages and cancel any threads that are currently crawling.
/// </summary>
/// <summary>
/// Lazy loaded Html Agility Pack (http://htmlagilitypack.codeplex.com/) document that can be used to retrieve/modify html elements on the crawled page.
/// </summary>
/// <summary>
/// Lazy loaded AngleSharp IHtmlDocument (https://github.com/AngleSharp/AngleSharp) that can be used to retrieve/modify html elements on the crawled page.
/// </summary>
/// <summary>
/// Web request sent to the server
/// </summary>
/// <summary>
/// Web response from the server. NOTE: The Close() method has been called before setting this property.
/// </summary>
/// <summary>
/// The web exception that occurred during the crawl
/// </summary>
/// <summary>
/// Links parsed from page. This value is set by the WebCrawler.SchedulePageLinks() method only If the "ShouldCrawlPageLinks" rules return true or if the IsForcedLinkParsingEnabled config value is set to true.
/// </summary>
/// <summary>
/// The content of page request
/// </summary>
/// <summary>
/// A datetime of when the http request started
/// </summary>
/// <summary>
/// A datetime of when the http request completed
/// </summary>
/// <summary>
/// A datetime of when the page content download started, this may be null if downloading the content was disallowed by the CrawlDecisionMaker or the inline delegate ShouldDownloadPageContent
/// </summary>
/// <summary>
/// A datetime of when the page content download completed, this may be null if downloading the content was disallowed by the CrawlDecisionMaker or the inline delegate ShouldDownloadPageContent
/// </summary>
/// <summary>
/// The page that this pagee was redirected to
/// </summary>
/// <summary>
/// Time it took from RequestStarted to RequestCompleted in milliseconds
/// </summary>
//did not make this an externally configurable property since it is really an internal issue to hap
/// <summary>
/// The root of the crawl
/// </summary>
/// <summary>
/// The amount of time that elapsed before the crawl completed
/// </summary>
/// <summary>
/// Whether or not an error occurred during the crawl that caused it to end prematurely
/// </summary>
/// <summary>
/// The exception that caused the crawl to end prematurely
/// </summary>
/// <summary>
/// The context of the crawl
/// </summary>
/// <summary>Result of crawling a page</summary>
/// <remarks>
/// We use this wrapper class to enable using responses obtained by methods different than executing an HttpWebRequest.
/// E.g. one may use a browser control embedded in the application to get a page content and construct an instance of this class
/// to pass it to Abot.
/// </remarks>
/// <summary>Constructs a response based on the received system http response.</summary>
/// <summary>Constructs a response based on custom parameters.</summary>
/// <remarks>Recieves parameters neccesarily set for Abot to work.</remarks>
/// <summary>Constructs an empty response to be filled later.</summary>
/// <summary>Status code returned by the server</summary>
/// <summary>Server designated type of content</summary>
/// <summary>Server designated length of content in bytes</summary>
/// <summary>Collection of headers in the response</summary>
/// <summary>Gets the character set of the response.</summary>
/// <summary>Gets the method that is used to encode the body of the response.</summary>
/// <summary>Gets or sets the cookies that are associated with this response.</summary>
/// <summary>Was the response generated from the local cache?</summary>
/// <summary>Gets a System.Boolean value that indicates whether both client and server were authenticated.</summary>
/// <summary>Gets the last date and time that the contents of the response were modified.</summary>
/// <summary>Gets the method that is used to return the response.</summary>
/// <summary>Gets the version of the HTTP protocol that is used in the response.</summary>
/// <summary>Gets the URI of the Internet resource that responded to the request.</summary>
/// <summary>Gets the name of the server that sent the response.</summary>
/// <summary>Gets the status description returned with the response.</summary>
/// <summary>Gets the actual response data.</summary>
/// <summary>Gets the header with the given name.</summary>
/// <summary>
/// The raw data bytes taken from the web response
/// </summary>
/// <summary>
/// String representation of the charset/encoding
/// </summary>
/// <summary>
/// The encoding of the web response
/// </summary>
/// <summary>
/// The raw text taken from the web response
/// </summary>
//Needed for serialization
/// <summary>
/// The uri of the page
/// </summary>
/// <summary>
/// The parent uri of the page
/// </summary>
/// <summary>
/// Whether http requests had to be retried more than once. This could be due to throttling or politeness.
/// </summary>
/// <summary>
/// The time in seconds that the server sent to wait before retrying.
/// </summary>
/// <summary>
/// The number of times the http request was be retried.
/// </summary>
/// <summary>
/// The datetime that the last http request was made. Will be null unless retries are enabled.
/// </summary>
/// <summary>
/// Whether the page is the root uri of the crawl
/// </summary>
/// <summary>
/// Whether the page is internal to the root uri of the crawl
/// </summary>
/// <summary>
/// The depth from the root of the crawl. If this page is the homepage this value will be zero, if this page was found on the homepage this value will be 1 and so on.
/// </summary>
/// <summary>
/// Can store values of any type. Useful for adding custom values to the CrawledPage dynamically from event subscriber code
/// </summary>
/// <summary>
/// The uri that this page was redirected from. If null then it was not part of the redirect chain
/// </summary>
/// <summary>
/// The position in the redirect chain. The first redirect is position 1, the next one is 2 and so on.
/// </summary>
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
/// <summary>
/// Bloom filter.
/// </summary>
/// <typeparam name="T">Item type </typeparam>
/// <summary>
/// Creates a new Bloom filter, specifying an error rate of 1/capacity, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
/// A secondary hash function will be provided for you if your type T is either string or int. Otherwise an exception will be thrown. If you are not using these types please use the overload that supports custom hash functions.
/// </summary>
/// <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
/// <summary>
/// Creates a new Bloom filter, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
/// A secondary hash function will be provided for you if your type T is either string or int. Otherwise an exception will be thrown. If you are not using these types please use the overload that supports custom hash functions.
/// </summary>
/// <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
/// <param name="errorRate">The accepable false-positive rate (e.g., 0.01F = 1%)</param>
/// <summary>
/// Creates a new Bloom filter, specifying an error rate of 1/capacity, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
/// </summary>
/// <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
/// <param name="hashFunction">The function to hash the input values. Do not use GetHashCode(). If it is null, and T is string or int a hash function will be provided for you.</param>
/// <summary>
/// Creates a new Bloom filter, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
/// </summary>
/// <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
/// <param name="errorRate">The accepable false-positive rate (e.g., 0.01F = 1%)</param>
/// <param name="hashFunction">The function to hash the input values. Do not use GetHashCode(). If it is null, and T is string or int a hash function will be provided for you.</param>
/// <summary>
/// Creates a new Bloom filter.
/// </summary>
/// <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
/// <param name="errorRate">The accepable false-positive rate (e.g., 0.01F = 1%)</param>
/// <param name="hashFunction">The function to hash the input values. Do not use GetHashCode(). If it is null, and T is string or int a hash function will be provided for you.</param>
/// <param name="m">The number of elements in the BitArray.</param>
/// <param name="k">The number of hash functions to use.</param>
// validate the params are in range
// from overflow in bestM calculation
// set the secondary hash function
/// <summary>
/// A function that can be used to hash input.
/// </summary>
/// <param name="input">The values to be hashed.</param>
/// <returns>The resulting hash code.</returns>
/// <summary>
/// The ratio of false to true bits in the filter. E.g., 1 true bit in a 10 bit filter means a truthiness of 0.1.
/// </summary>
/// <summary>
/// Adds a new item to the filter. It cannot be removed.
/// </summary>
/// <param name="item">The item.</param>
// start flipping bits for each hash of item
/// <summary>
/// Checks for the existance of the item in the filter for a given probability.
/// </summary>
/// <param name="item"> The item. </param>
/// <returns> The <see cref="bool"/>. </returns>
/// <summary>
/// The best k.
/// </summary>
/// <param name="capacity"> The capacity. </param>
/// <param name="errorRate"> The error rate. </param>
/// <returns> The <see cref="int"/>. </returns>
/// <summary>
/// The best m.
/// </summary>
/// <param name="capacity"> The capacity. </param>
/// <param name="errorRate"> The error rate. </param>
/// <returns> The <see cref="int"/>. </returns>
/// <summary>
/// The best error rate.
/// </summary>
/// <param name="capacity"> The capacity. </param>
/// <returns> The <see cref="float"/>. </returns>
// default
// http://www.cs.princeton.edu/courses/archive/spring02/cs493/lec7.pdf
/// <summary>
/// Hashes a 32-bit signed int using Thomas Wang's method v3.1 (http://www.concentric.net/~Ttwang/tech/inthash.htm).
/// Runtime is suggested to be 11 cycles. 
/// </summary>
/// <param name="input">The integer to hash.</param>
/// <returns>The hashed result.</returns>
// x = (x << 15) - x- 1, as (~x) + y is equivalent to y - x - 1 in two's complement representation
// x = (x + (x << 3)) + (x<< 11);
/// <summary>
/// Hashes a string using Bob Jenkin's "One At A Time" method from Dr. Dobbs (http://burtleburtle.net/bob/hash/doobs.html).
/// Runtime is suggested to be 9x+9, where x = input.Length. 
/// </summary>
/// <param name="input">The string to hash.</param>
/// <returns>The hashed result.</returns>
/// <summary>
/// The true bits.
/// </summary>
/// <returns> The <see cref="int"/>. </returns>
/// <summary>
/// Performs Dillinger and Manolios double hashing. 
/// </summary>
/// <param name="primaryHash"> The primary hash. </param>
/// <param name="secondaryHash"> The secondary hash. </param>
/// <param name="i"> The i. </param>
/// <returns> The <see cref="int"/>. </returns>
//do nothing
//http://msdn.microsoft.com/en-us/library/ee789351%28v=vs.110%29.aspx
// Provides a task scheduler that ensures a maximum concurrency level while  
// running on top of the thread pool. 
// Indicates whether the current thread is processing work items.
// The list of tasks to be executed  
// protected by lock(_tasks) 
// The maximum concurrency level allowed by this scheduler.  
// Indicates whether the scheduler is currently processing work items.  
// Creates a new instance with the specified degree of parallelism.  
// Queues a task to the scheduler.  
// Add the task to the list of tasks to be processed.  If there aren't enough  
// delegates currently queued or running to process tasks, schedule another.  
// Inform the ThreadPool that there's work to be executed for this scheduler.  
// Note that the current thread is now processing work items. 
// This is necessary to enable inlining of tasks into this thread.
// Process all available items in the queue. 
// When there are no more items to be processed, 
// note that we're done processing, and get out. 
// Get the next item from the queue
// Execute the task we pulled out of the queue 
// We're done processing items on the current thread 
// Attempts to execute the specified task on the current thread.  
// If this thread isn't already processing a task, we don't support inlining 
// If the task was previously queued, remove it from the queue 
// Try to run the task.  
// Attempt to remove a previously scheduled task from the scheduler.  
// Gets the maximum concurrency level supported by this scheduler.  
// Gets an enumerable of the tasks currently scheduled on this scheduler.  
/// <summary>
/// A ThreadManager implementation that will use real Threads to handle concurrency.
/// </summary>
/// <summary>
/// Handles memory monitoring/usage
/// </summary>
/// <summary>
/// Whether the current process that is hosting this instance is allocated/using above the param value of memory in mb
/// </summary>
/// <summary>
/// Whether there is at least the param value of available memory in mb
/// </summary>
//blog.teamleadnet.com/2012/08/murmurhash3-ultra-fast-hash-algorithm.html
// 128 bit output, 64 bit platform version
// if want to start with a seed, create a constructor
// avalanche bits
// read 128 bits, 16 bytes, 2 longs in eacy cycle
// if the input MOD 16 != 0
// little endian (x86) processing
// fall through
// fall through
// fall through
// fall through
// fall through
// fall through
// fall through
// fall through
// fall through
// fall through
// fall through
// fall through
// fall through
// fall through
// we only read aligned longs, so a simple casting is enough
//http://www.pennedobjects.com/2010/10/better-rate-limiting-with-dot-net/
/// <summary>
/// Used to control the rate of some occurrence per unit of time.
/// </summary>
/// <remarks>
///     <para>
///     To control the rate of an action using a <see cref="RateLimiter"/>, 
///     code should simply call <see cref="WaitToProceed()"/> prior to 
///     performing the action. <see cref="WaitToProceed()"/> will block
///     the current thread until the action is allowed based on the rate 
///     limit.
///     </para>
///     <para>
///     This class is thread safe. A single <see cref="RateLimiter"/> instance 
///     may be used to control the rate of an occurrence across multiple 
///     threads.
///     </para>
/// </remarks>
// Semaphore used to count and limit the number of occurrences per
// unit time.
// Times (in millisecond ticks) at which the semaphore should be exited.
// Timer used to trigger exiting the semaphore.
// Whether this instance is disposed.
/// <summary>
/// Number of occurrences allowed per unit of time.
/// </summary>
/// <summary>
/// The length of the time unit, in milliseconds.
/// </summary>
/// <summary>
/// Initializes a <see cref="RateLimiter"/> with a rate of <paramref name="occurrences"/> 
/// per <paramref name="timeUnit"/>.
/// </summary>
/// <param name="occurrences">Number of occurrences allowed per unit of time.</param>
/// <param name="timeUnit">Length of the time unit.</param>
/// <exception cref="ArgumentOutOfRangeException">
/// If <paramref name="occurrences"/> or <paramref name="timeUnit"/> is negative.
/// </exception>
// Check the arguments.
// Create the semaphore, with the number of occurrences as the maximum count.
// Create a queue to hold the semaphore exit times.
// Create a timer to exit the semaphore. Use the time unit as the original
// interval length because that's the earliest we will need to exit the semaphore.
/// <summary>
/// Blocks the current thread until allowed to proceed or until the
/// specified timeout elapses.
/// </summary>
/// <param name="millisecondsTimeout">Number of milliseconds to wait, or -1 to wait indefinitely.</param>
/// <returns>true if the thread is allowed to proceed, or false if timed out</returns>
// Check the arguments.
// Block until we can enter the semaphore or until the timeout expires.
// If we entered the semaphore, compute the corresponding exit time 
// and add it to the queue.
/// <summary>
/// Blocks the current thread until allowed to proceed or until the
/// specified timeout elapses.
/// </summary>
/// <param name="timeout"></param>
/// <returns>true if the thread is allowed to proceed, or false if timed out</returns>
/// <summary>
/// Blocks the current thread indefinitely until allowed to proceed.
/// </summary>
/// <summary>
/// Releases unmanaged resources held by an instance of this class.
/// </summary>
/// <summary>
/// Releases unmanaged resources held by an instance of this class.
/// </summary>
/// <param name="isDisposing">Whether this object is being disposed.</param>
// The semaphore and timer both implement IDisposable and 
// therefore must be disposed.
// Callback for the exit timer that exits the semaphore based on exit times 
// in the queue and then sets the timer for the nextexit time.
// While there are exit times that are passed due still in the queue,
// exit the semaphore and dequeue the exit time.
// we are already holding the next item from the queue, do not peek again
// although this exit time may have already pass by this stmt.
// Throws an ObjectDisposedException if this object is disposed.
/// <summary>
/// A ThreadManager implementation that will use tpl Tasks to handle concurrency.
/// </summary>
/// <summary>
/// This was added to resolve the issue described here
/// http://stackoverflow.com/questions/7883052/a-tasks-exceptions-were-not-observed-either-by-waiting-on-the-task-or-accessi
/// </summary>
//If the task was cancelled then this exception is expected happen and we dont care
//If the task was not cancelled then this is an error
/// <summary>
/// Handles the multithreading implementation details
/// </summary>
/// <summary>
/// Max number of threads to use.
/// </summary>
/// <summary>
/// Will perform the action asynchrously on a seperate thread
/// </summary>
/// <param name="action">The action to perform</param>
/// <summary>
/// Whether there are running threads
/// </summary>
/// <summary>
/// Abort all running threads
/// </summary>
/// <summary>
/// Max number of threads to use
/// </summary>
/// <summary>
/// Will perform the action asynchrously on a seperate thread
/// </summary>
/// <summary>
/// Runs the action on a seperate thread
/// </summary>
/*
//Uncomment only one of the following to see that instance in action
//crawler = GetManuallyConfiguredWebCrawler();
//crawler = GetCustomBehaviorUsingLambdaWebCrawler();
//Subscribe to any of these asynchronous events, there are also sychronous versions of each.
//This is where you process data about specific events of the crawl
//Start the crawl
//This is a synchronous call
//Now go view the log.txt file that is in the same directory as this executable. It has
//all the statements that you were trying to read in the console window :).
//Not enough data being logged? Change the app.config file's log4net log level from "INFO" TO "DEBUG"
//Create a config object manually
//Add you own values without modifying Abot's source code.
//These are accessible in CrawlContext.CrawlConfuration.ConfigurationException object throughout the crawl
//Initialize the crawler with custom configuration created above.
//This override the app.config file values
//Register a lambda expression that will make Abot not crawl any url that has the word "ghost" in it.
//For example http://a.com/ghost, would not get crawled if the link were found during the crawl.
//If you set the log4net log level to "DEBUG" you will see a log message when any page is not allowed to be crawled.
//NOTE: This is lambda is run after the regular ICrawlDecsionMaker.ShouldCrawlPage method is run.
//Register a lambda expression that will tell Abot to not download the page content for any page after 5th.
//Abot will still make the http request but will not read the raw content from the stream
//NOTE: This lambda is run after the regular ICrawlDecsionMaker.ShouldDownloadPageContent method is run
//Register a lambda expression that will tell Abot to not crawl links on any page that is not internal to the root uri.
//NOTE: This lambda is run after the regular ICrawlDecsionMaker.ShouldCrawlPageLinks method is run
//Process data
//Process data
//Process data
//Process data
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//localhost.fiddler:1111/"), 25)
//localhost.fiddler:1111/PageGenerator/ClearCounters"));
//localhost.fiddler:1111/PageGenerator/ClearCounters"));
//localhost.fiddler:1111/"));
//localhost.fiddler:1111/PageGenerator/ClearCounters"));
//localhost.fiddler:1111/"));
//localhost.fiddler:1111/PageGenerator/ClearCounters"));
//adding delay since it increases the chance of issues with abot crawling more than MaxPagesToCrawl.
//localhost.fiddler:1111/"));
//localhost.fiddler:1111/"));
//localhost.fiddler:1111/"), cancellationTokenSource);
//localhost.fiddler:1111/"), cancellationTokenSource));
//localhost.fiddler:1111/PageGenerator/ClearCounters"));
// 1 second * 2 pages = 2 (or more) seconds
//localhost.fiddler:1111/");
//localhost.fiddler:1111/PageGenerator/ClearCounters"));
//localhost.fiddler:1111/", HttpStatusCode = 200},
//localhost.fiddler:1111/PageGenerator/Generate?Status200Count=5&Status403Count=1&Status404Count=2&Status500Count=3&Status503Count=4&Page=1", HttpStatusCode = 200},
//localhost.fiddler:1111/PageGenerator/Generate?Status200Count=5&Status403Count=1&Status404Count=2&Status500Count=3&Status503Count=4&Page=3", HttpStatusCode = 200},
//localhost.fiddler:1111/PageGenerator/Generate?Status200Count=5&Status403Count=1&Status404Count=2&Status500Count=3&Status503Count=4&Page=2", HttpStatusCode = 200},
//localhost.fiddler:1111/PageGenerator/Generate?Status200Count=5&Status403Count=1&Status404Count=2&Status500Count=3&Status503Count=4&Page=4", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page1", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page3", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page2", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page4", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page5", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status403/Page1", HttpStatusCode = 403},
//localhost.fiddler:1111/HttpResponse/Status404/Page2", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status404/Page1", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status500/Page1", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status500/Page3", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status500/Page2", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status503/Page2", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page1", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status200/Page12", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page11", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status503/Page3", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page4", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status200/Page13", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page14", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page15", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status403/Page3", HttpStatusCode = 403},
//localhost.fiddler:1111/HttpResponse/Status404/Page5", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status404/Page6", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status500/Page7", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status500/Page8", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status200/Page6", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status503/Page9", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status500/Page9", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status200/Page7", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status503/Page12", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page10", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page11", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status200/Page8", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page9", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page10", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status403/Page2", HttpStatusCode = 403},
//localhost.fiddler:1111/HttpResponse/Status404/Page3", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status404/Page4", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status500/Page4", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status500/Page5", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status200/Page16", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status500/Page6", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status503/Page6", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page5", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status200/Page17", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page18", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page19", HttpStatusCode = 200},
//yahoo.com/", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status503/Page8", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status200/Page20", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status503/Page7", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status403/Page4", HttpStatusCode = 403},
//localhost.fiddler:1111/HttpResponse/Status404/Page7", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status500/Page11", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status500/Page10", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status404/Page8", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status503/Page13", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status500/Page12", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status503/Page14", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page15", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page16", HttpStatusCode = 503},
//zoogle.com/", HttpStatusCode = 200}
//wvtesting2.com/"), 30)
//wvtesting2.com/", HttpStatusCode = 200},
//wvtesting2.com/level2/InvlalidUrls-L2.html", HttpStatusCode = 200},
//wvtesting2.com/errtest/suspend-go-tests.html", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/jv-TopSEOCheckListMaster.htm", HttpStatusCode = 200},
//wvtesting2.com/level2/InvalidAnchorTags-L2.html", HttpStatusCode = 200},
//wvtesting2.com/redirects/redirect-tests.html", HttpStatusCode = 200},
//wvtesting2.com/analyze-content/AnalyzeContent-Master.htm", HttpStatusCode = 200},
//wvtesting2.com/bugs/url_with_aporstorphe_test.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/URIFormationResolvetoCommonURL_Test.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/qryStrLinkToSMFolder.aspx?partUrl=design/brand-identity.aspx&se=+&app_hdr=0&ci=13817", HttpStatusCode = 200},
//www.w3schools.com/TAGS/tryit.asp?filename=tryhtml_iframe", HttpStatusCode = 200},
//wvtesting2.com/bugs/spider-crash/spider-crash_testCases.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/escape-chars_testCases.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/special_urlFormation_Tests.html", HttpStatusCode = 200},
//www.microsoft.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/master-misc-bugs.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/Tidy_testCases.html", HttpStatusCode = 200},
//wvtesting2.com/errtest/captureTimeStamp503.aspx", HttpStatusCode = 200},
//wvtesting2.com/errtest/captureTimeStamp502.aspx", HttpStatusCode = 200},
//wvtesting2.com/bugs/misc-bugs/master.html", HttpStatusCode = 200},
//wvtesting2.com/errtest/captureTimeStamp403.aspx", HttpStatusCode = 200},
//wvtesting2.com/misc-tests/index.html", HttpStatusCode = 200},
//wvtesting2.com/INDEX.html", HttpStatusCode = 200},
//www.freewebtemplates.com/", HttpStatusCode = 200},
//wvtesting2.com/redirects/clientRedirectJavaScript-extpage.html", HttpStatusCode = 200},
//wvtesting2.com/errtest/captureTimeStamp504.aspx", HttpStatusCode = 200},
//wvtesting2.com/redirects/clientRedirectJavaScript-extpage-broken.html", HttpStatusCode = 200},
//wvtesting2.com/errtest/delayedmode-tests-bug-119066.html", HttpStatusCode = 200},
//wvtesting2.com/redirects/clientRedirectJavaScript.html", HttpStatusCode = 200},
//wvtesting2.com/redirects/clientRedirectMetaRefresh.html", HttpStatusCode = 200},
//wvtesting2.com/redirects/clientRedirectMetaRefresh-extpage-broken.html", HttpStatusCode = 200},
//wvtesting2.com/redirects/clientRedirectMetaRefresh-extpage.html", HttpStatusCode = 200},
//wvtesting2.com/redirects/serverRedirect301perm.aspx", HttpStatusCode = 200},
//www.sparkbb.com/", HttpStatusCode = 200},
//wvtesting2.com/redirects/serverRedirect301perm-extactive.aspx", HttpStatusCode = 200},
//wvtesting2.com/redirects/serverRedirect302temp.aspx", HttpStatusCode = 200},
//wvtesting2.com/redirects/serverRedirect301perm-extbroken.aspx", HttpStatusCode = 200},
//www.free-template-download.com/", HttpStatusCode = 200},
//wvtesting2.com/redirects/serverRedirect302temp-extactive.aspx", HttpStatusCode = 200},
//wvtesting2.com/analyze-content/AnalyzeContent-KWDensity-pass-pg2.html", HttpStatusCode = 200},
//wvtesting2.com/analyze-content/AnalyzeContent-KWDensity-pass-pg1-.html", HttpStatusCode = 200},
//wvtesting2.com/redirects/serverRedirect302temp-extbroken.aspx", HttpStatusCode = 200},
//wvtesting2.com/redirects/new_redirect_testing/metRefreshRedirectDelay_Start.aspx", HttpStatusCode = 404},
//wvtesting2.com/redirects/new_redirect_testing/metaRefreshRedirectLoop-a.html", HttpStatusCode = 404},
//wvtesting2.com/redirects/new_redirect_testing/302RedirectWithDelay_Start.aspx", HttpStatusCode = 404},
//wvtesting2.com/analyze-content/AnalyzeContent-KWDensity-Warn-pg4-.html", HttpStatusCode = 200},
//wvtesting2.com/redirects/new_redirect_testing/302Redirect_Loop_a.aspx", HttpStatusCode = 404},
//wvtesting2.com/redirects/new_redirect_testing/metaRefreshRedirectToSelf.html", HttpStatusCode = 404},
//wvtesting2.com/analyze-content/AnalyzeContent-KWDensity-Warn-pg3-.html", HttpStatusCode = 200},
//wvtesting2.com/redirects/new_redirect_testing/302RedirectToSelf.aspx", HttpStatusCode = 404},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Good%20Title.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Title%20with%20html.htm", HttpStatusCode = 200},
//wvtesting2.com/analyze-content/leafnode_added_4-3-12.html", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Missing%20Title.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Missing%20Keywords.htm", HttpStatusCode = 200},
//wvtesting2.com/analyze-content/AnalyzeContent-KWDensity-fail-pg6-.html", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Missing%20Description.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Good%20Everything.htm", HttpStatusCode = 200},
//wvtesting2.com/analyze-content/AnalyzeContent-KWDensity-Warn-exact-pg5-.html", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/html%20Encoded%20Chars%20in%20Title.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/html-decimal%20Encoded%20Chars%20in%20Title.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Blank%20Desc.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Duplicate%20Description.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Duplicate%20Keyword.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Blank%20Title.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Duplicate%20'content'%20for%20desc.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Duplicate%20'conten'%20for%20keywords.htm", HttpStatusCode = 404},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Duplicate%20Title.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Blank%20Keywords.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Duplicate%20'name'%20for%20desc.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Korean%20'decimal'%20Keywords.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Korean%20Desc.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Korean%20'hex'%20Desc.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Korean%20Title.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Korean%20'hex'%20Keywords.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Korean%20Keywords.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Korean%20'decimal'%20Title.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Missing%20title%20end-tag.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Duplicate%20'name'%20for%20keywords.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Korean%20'decimal'%20Desc.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Korean%20'hex'%20Title.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/shift-jis%20Keywords.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/shift-jis%20Description.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Title%20more%20than%2065.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/keyword%20count%20to%20big.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/keyword_wordcount_over1000.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Korean%20'http%20ex'%20Keywords.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Title%20with%20no%20primary%20keywordl.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Korean%20'http%20ex'%20Desc.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/shift-jis%20Title.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Title%20with%20stop%20words.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Good%20with%20keyword%20links.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-t!kdhli.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Description%20too%20long.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-t2kdhl.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-tkdl2.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-tk!dhli.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/keyword%20phrase%20count%20to%20big.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-tkdh.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/keyword%20phrase%20to%20big.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-tkd!hli.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-tkdh2.htm", HttpStatusCode = 200},
//wvtesting2.com/index.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/url_with_'%20aporstorphe.html", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-tkdl.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-tkdhli1.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-tkdhli.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-tkdhl.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-tkdh2l2.htm", HttpStatusCode = 200},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/rules-tkdhli2.htm", HttpStatusCode = 200},
//wvtesting2.com/level2/www.wvtesting.com", HttpStatusCode = 404},
//www.wvtesting.com/", HttpStatusCode = 200},
//wvtesting2.com/level2/=%22http://www.wvtesting.com%22", HttpStatusCode = 404},
//wvtesting2.com/level2/WWW.WvTEStING.COm", HttpStatusCode = 404},
//wvtesting2.com/level2/level3/L3-URI-Formations.html?qry1=0&qry2=-1&qry3=hello%20world's_ph", HttpStatusCode = 200},
//wvtesting2.com/level2/WWW.WVTESTING.COM", HttpStatusCode = 404},
//wvtesting2.com/level2/wvtesting.com/level2/leafnode-L2.xhtml", HttpStatusCode = 404},
//wvtesting2.com/level2/apple.com", HttpStatusCode = 404},
//wvtesting2.com/level2/www.msn.com", HttpStatusCode = 404},
//wvtesting2.com/level2/yahoo.com%3Eyahoo.com%3C/A%3E%3C/td%3E%0D%09%09%09%09%09%09%09%09%09%3C/tr%3E%0D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C/tbody%3E%3C/tablediv%3E%0D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class=", HttpStatusCode = 504},
//wvtesting2.com/level2/leafnode-L2.html", HttpStatusCode = 200},
//wvtesting2.com/leafnode-L1.html", HttpStatusCode = 200},
//www.malodedentro.com/xxx-invalidanchortags-L2", HttpStatusCode = 200},
//wvtesting2.com/level2/cnn.com'%3Ecnn.com'%3C/A%3E%3C/td%3E%0D%09%09%09%09%09%09%09%09%09%3C/tr%3E%0D%09%09%09%09%09%09%09%09%09%3Ctr%3E%0D%09%09%09%09%09%09%09%09%09%09%3Ctd%20align=", HttpStatusCode = 404},
//www.yahoo.com/", HttpStatusCode = 200},
//wvtesting2.com/level2/mercury.html", HttpStatusCode = 200},
//wvtesting2.com/level2/venus.html", HttpStatusCode = 200},
//google.com/", HttpStatusCode = 200},
//www.wvtesting2.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/spider-crash/bottres.com_search_keywords=women.htm", HttpStatusCode = 200},
//wvtesting2.com/bugs/spider-crash/toplisttits-com_Main.html", HttpStatusCode = 200},
//msdn.microsoft.com/en-us/default.aspx", HttpStatusCode = 200},
//apache.org/", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/bugtest-110772-toysformybrain-com_TAI-CHI-BALL-TCB.htm", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/bugtest-143539-InternationalCharsInHeadingTag1.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/bugtest-111937-1031x-com--news-swap_and_drop.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/bugtest-111937-printgreenga-com--default.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/me%20inc%20without_dot/url_fileName_WO_Xtn", HttpStatusCode = 200},
//wvtesting2.com/bugs/me%20inc%20without_dot/urlWith.%20Dot.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/me%20inc%20with_dot%20.in_middle/urlWithDot_inMiddleOfFolderName.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/bugtest-143539-InternationalCharsInHeadingTag3.html", HttpStatusCode = 200},
//ibm.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/me%20inc%20without_dot/.dot.In.Start.Of.%20FileName", HttpStatusCode = 200},
//www.addidas.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/bugtest-143539-InternationalCharsInHeadingTag2.html", HttpStatusCode = 200},
//wvtesting2.com/Index.html", HttpStatusCode = 404},
//wvtesting2.com/level2/level3/leafnode-L3.html", HttpStatusCode = 200},
//www./", HttpStatusCode = 502},
//wvtesting2.com/level2/wvtesting2.com", HttpStatusCode = 404},
//wvtesting2.com/level2/http//www.wvtesting2.com", HttpStatusCode = 404},
//wvtesting2.com/level2/www.wvtesting2.com", HttpStatusCode = 404},
//wvtesting2.com/level2-2/leafnode-L2.html", HttpStatusCode = 200},
//www.wvtesting/", HttpStatusCode = 200},
//www.wvtesting2.com./", HttpStatusCode = 200},
//www.wvtesting2.com/level2/level3/leafnode-L3.html/", HttpStatusCode = 404},
//wvtesting2.com/level2/noexist.html", HttpStatusCode = 404},
//www.wvtesting2.com//cataglog//index.html", HttpStatusCode = 404},
//www.wvtesting2.com/level2/leafnode-L2.html/", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/bugtest-107754.html", HttpStatusCode = 200},
//www.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/bugtest-107756.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/bugtest-107755.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/bugtest-107757.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/bugtest-107757-scenario2.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/bugtest-107756-sc1.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/bugtest-107757-scenario3.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/bugtest-107756-sc2.html", HttpStatusCode = 200},
//www.southwest.com/", HttpStatusCode = 200},
//www.southwestxxxsdgfsdfg.com/", HttpStatusCode = 200},
//www.asp.net/", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/legalreversal.com-ROBERT_L.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/oconnorplumbing.com-index.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/realtyreferrals.biz-about.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/web.mac.com-impactpak-Impact-Camps.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/realestatedefined.com-html-sample_terms-waste.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/www.marshallfields.net_home.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/WC0-floridabuildinginspector.com-Home.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/WC0-lakeservicesinc.info-HOME_PAGE.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/misc-bugs/quote-truncate-98964.html", HttpStatusCode = 200},
//wvtesting2.com/bugs/misc-bugs/quote-truncate-s-98964.html", HttpStatusCode = 200},
//email@wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Missing%20Title.htm", HttpStatusCode = 200},
//wvtesting2.com/bugs/misc-bugs/sitemap_leila-%E2%80%93-soul-ascension.html", HttpStatusCode = 200},
//wvtesting2.com/misc-tests/tests/TestVariousLinkCounts.html", HttpStatusCode = 200},
//wvtesting2.com/misc-tests/tests/anchorTag-Hash_tests.html", HttpStatusCode = 200},
//wvtesting2.com/misc-tests/tests/TestVariousLinkTypes.html", HttpStatusCode = 200},
//wvtesting2.com/misc-tests/tests/http%20codes%20tests.html", HttpStatusCode = 200},
//wvtesting2.com/misc-tests/tests/MPWCgtMPKWC.html", HttpStatusCode = 200},
//wvtesting2.com/misc-tests/tests/Bndry3.html", HttpStatusCode = 200},
//wvtesting2.com/errtest/", HttpStatusCode = 403},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/www.msn.com", HttpStatusCode = 404},
//wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/www.msn.com", HttpStatusCode = 404},
//www.gainsaver.com/?SID=cj&MEDIUM=CJAFFIL&CID=150", HttpStatusCode = 0},
//wvtesting2.com/level2/InvalidAnchorTags-L2.html?splChars=$-_.+!*'(%20),&", HttpStatusCode = 200},
//www.only-bigmelons.com/hosted/pictures/obmp070610/hosted.php?id=2156259", HttpStatusCode = 200},
//www.busty-britain.com/hosted/pictures/bbp070510/hosted.php?id=2156259", HttpStatusCode = 200},
//www.busty-britain.com/hosted/pictures/bbp030710/hosted.php?id=2156259", HttpStatusCode = 200},
//www.busty-britain.com/hosted/pictures/bbp091109/hosted.php?id=2156259", HttpStatusCode = 200},
//www.busty-britain.com/hosted/movies/bb072509/hosted.php?id=2156259", HttpStatusCode = 200},
//www.busty-britain.com/hosted/pictures/bbp070910/hosted.php?id=2156259", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra7146-1/p/entmoot/", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1691hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,4207=", HttpStatusCode = 200},
//www.big-titsparadise.com/hosted/pictures/btpp030710/hosted.php?id=2156259", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1682hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,4198", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1673hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,4443", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra7133-1/p/entmoot/", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra7106-1/p/entmoot/", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1764hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,4411", HttpStatusCode = 200},
//www.only-bigmelons.com/hosted/pictures/obmp070910/hosted.php?id=2156259", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra6759-1/p/entmoot/", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra7073-1/p/entmoot/", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra6947-1/p/entmoot/", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1619hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,4369", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1660hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,4119", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra6779-1/p/entmoot/", HttpStatusCode = 200},
//promo.plumperpass.com/content/vg/hsp/1700hsp_video_01/?nats=MTU3NjIzNDozODox,0,0,0,4332", HttpStatusCode = 200},
//www2.kellymadison.com/gallery/MTAwMzk1LjQuMS4xLjAuNjAwMDgxMC4wLjAu", HttpStatusCode = 200},
//www2.kellymadison.com/gallery/MTAwMzk1LjQuMS4xLjAuNjAwMDgwOS4wLjAuMA", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra6636-1/p/entmoot/", HttpStatusCode = 200},
//promo.plumperpass.com/content/fgh/pp/single/1687bgb_pp_video_03/?nats=MTU3NjIzNDozODoxNw,0,0,0,4436", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra5494-4/p/entmoot/", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1706hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,4258", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra6958-1/p/entmoot/", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/pp/1687bgb_pp_photo/?nats=MTU3NjIzNDozODoxNw,0,0,0,4434", HttpStatusCode = 200},
//www2.kellymadison.com/gallery/MTAwMzk1LjQuMS4xLjAuNjAwMDgxMS4wLjAuMA", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra6116-2/p/entmoot/", HttpStatusCode = 200},
//www2.kellymadison.com/gallery/MTAwMzk1LjQuMS4xLjAuNjAwMDgxMi4wLjAuMA", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1551hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,3745", HttpStatusCode = 200},
//www2.kellymadison.com/gallery/MTAwMzk1LjQuMS4xLjAuNjAwMDgxMy4wLjAuMA", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra6098-2/p/entmoot/", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuNjAwMDU4NS4wLjAuMA", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra6147-1/p/entmoot/", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuNjAwMDU4MC4wLjAuMA", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuNjAwMDU4Ny4wLjAuMA", HttpStatusCode = 200},
//promo.sensationalcash.com/GBcontent/pg/n_hsp/hsp_bianca01_092208/?nats=MTU3NjIzNDozODox,0,0,0,2005", HttpStatusCode = 200},
//promo.sensationalcash.com/GBcontent/pg/n_hsp/hsp_dolly_092208/?nats=MTU3NjIzNDozODox,0,0,0,2009", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra5898-2/p/entmoot/", HttpStatusCode = 200},
//promo.sensationalcash.com/GBcontent/pg/n_hsp/bunnydelacruz/01/?nats=MTU3NjIzNDozODox,0,0,0,1564", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuNjAwMDU4MS4wLjAuMA", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1234hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,2511", HttpStatusCode = 200},
//promo.sensationalcash.com/GBcontent/pg/n_hsp/eden38dd/01/?nats=MTU3NjIzNDozODox,0,0,0,1590", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra5267-1/p/entmoot/", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuNjAwMDU2My4wLjAuMA", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuNjAwMDU1My4wLjAuMA", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra4204-10/p/entmoot/", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra4006-3/p/entmoot/", HttpStatusCode = 200},
//promo.plumperpass.com/content/vg/hsp/1439hsp_video/?nats=MTU3NjIzNDozODox,0,0,0,3659", HttpStatusCode = 200},
//promo.sensationalcash.com/GBcontent/pg/n_ftf/divadd/01/?nats=MTU3NjIzNDozODo0Mg,0,0,0,1587", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuNjAwMDU1Mi4wLjAuMA", HttpStatusCode = 200},
//promo.sensationalcash.com/GBcontent/pg/n_hsp/delotta/01/?nats=MTU3NjIzNDozODox,0,0,0,1566", HttpStatusCode = 200},
//bigtitsroundasses.bangbros1.com/gal/3/p/entmoot/", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1522hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,3810", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuNjAwMDczNy4wLjAuMA", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra5333-2/p/entmoot/", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuNjAwMDU0Ny4wLjAuMA", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra5897-4/p/entmoot/", HttpStatusCode = 200},
//bigtitsroundasses.bangbros1.com/gal/btra4705-5/p/entmoot/", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra4724-2/p/entmoot/", HttpStatusCode = 200},
//bigtitsroundasses.bangbros1.com/gal/btra4670-5/p/entmoot/", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1546hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,3719", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/hsp/1743hsp_photo/?nats=MTU3NjIzNDozODox,0,0,0,4515", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuNjAwMDU0Ni4wLjAuMA", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/btra4405-2/p/entmoot/", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuOTQzLjAuMC4w", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjQuMy4zLjAuOTk5LjAuMC4w", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/pp/1525bgb_pp_photo/?nats=MTU3NjIzNDozODoxNw,0,0,0,3678", HttpStatusCode = 200},
//bigtitsroundasses.bangbros1.com/gal/9152/p/entmoot/", HttpStatusCode = 200},
//x-bigtitsroundasses.bangbros1.com/gal/90056/p/entmoot/", HttpStatusCode = 200},
//promo.plumperpass.com/content/pg/pp/1552hsp_pp_photo/?nats=MTU3NjIzNDozODoxNw,0,0,0,3766", HttpStatusCode = 200},
//wvtesting2.com/searchadvanced.sc", HttpStatusCode = 404},
//www2.kellymadison.com/gallery/MTAwMzk1LjYuMS4xLjAuNjAwMDUxMy4wLjAuMA", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjYuMy4zLjAuNjAwMDU4My4wLjAuMA", HttpStatusCode = 200},
//wvtesting2.com/viewcart.sc", HttpStatusCode = 404},
//wvtesting2.com/main.sc", HttpStatusCode = 404},
//wvtesting2.com/nav/about_us", HttpStatusCode = 404},
//www2.pornfidelity.com/gallery/MTAwMzk1LjYuMy4zLjAuNjAwMDU2OS4wLjAuMA", HttpStatusCode = 200},
//www2.pornfidelity.com/gallery/MTAwMzk1LjYuMy4zLjAuNjAwMDU3My4wLjAuMA", HttpStatusCode = 200},
//wvtesting2.com/nav/advanced_search", HttpStatusCode = 404},
//wvtesting2.com/nav/terms", HttpStatusCode = 404},
//wvtesting2.com/nav/faq", HttpStatusCode = 404},
//wvtesting2.com/nav/contact", HttpStatusCode = 404},
//www2.kellymadison.com/gallery/MTAwMzk1LjYuMS4xLjAuNjAwMDUwNy4wLjAuMA", HttpStatusCode = 200},
//wvtesting2.com/register.sc", HttpStatusCode = 404},
//wvtesting2.com/nav/sitemap", HttpStatusCode = 404},
//wvtesting2.com/login.sc", HttpStatusCode = 404},
//wvtesting2.com/PEDIATRIC-FITNESS-EXERCISE_c21.htm", HttpStatusCode = 404},
//wvtesting2.com/ACTIVITY-MATS-SOFT-PLAY-CLIMBERS_c2.htm", HttpStatusCode = 404},
//wvtesting2.com/contactus.sc", HttpStatusCode = 404},
//wvtesting2.com/DAILY-LIVING-LIFE-SKILLS_c9.htm", HttpStatusCode = 404},
//wvtesting2.com/DOWN-SYNDROME_c10.htm", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=women;boot", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=women", HttpStatusCode = 404},
//wvtesting2.com/DRAMATIC-PLAY_c11.htm", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=women;heel", HttpStatusCode = 404},
//promo.plumperpass.com/content/pg/pp/1514bgb_pp_photo/?nats=MTU3NjIzNDozODoxNw,0,0,0,3655", HttpStatusCode = 200},
//wvtesting2.com/search?kwords=women;flat", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=women;sandal;flip;flop", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=women;sneaker", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=women;slipper", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=women;vegan", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=women;work", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=women;fashion", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=women;bridal", HttpStatusCode = 404},
//www.bottres.com/", HttpStatusCode = 200},
//wvtesting2.com/search?kwords=women;wide", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=women;narrow", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men;sandal", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men;boot", HttpStatusCode = 404},
//wvtesting2.com/EASE-THERAPEUTIC-MUSIC-VIDEO-GAME-SYSTEMS_c13.htm", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men;oxford", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men;vegan", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men;slipper", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men;wide", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men;loafer", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men;work", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men;sneaker", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men;flat", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=kid", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=men;narrow", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=kid;toddlers", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=kid;infant", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=wide", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=kid:youth", HttpStatusCode = 404},
//wvtesting2.com/nav/brands", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=kid;boy", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=narrow", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=kid:girl", HttpStatusCode = 404},
//wvtesting2.com/search?kwords=boots", HttpStatusCode = 404},
//wvtesting2.com/EDUCATIONAL-ACTIVITY-CENTERS-FIDGET-CITY_c14.htm", HttpStatusCode = 404},
//wvtesting2.com/FIDGET-CITY_c47.htm", HttpStatusCode = 404},
//wvtesting2.com/GRIPABLE-CUTLERY-SILVERWARE_c15.htm", HttpStatusCode = 404},
//wvtesting2.com/MELISSA-AND-DOUG-EDUCATIONAL-PRODUCTS_c18.htm", HttpStatusCode = 404},
//wvtesting2.com/INFANT-PRESCHOOL_c17.htm", HttpStatusCode = 404},
//wvtesting2.com/nav/stores", HttpStatusCode = 404},
//wvtesting2.com/bugs/spider-crash/index.php?pg=search&kwords=women&page=2", HttpStatusCode = 404},
//wvtesting2.com/HANDWRITING_c16.htm", HttpStatusCode = 404},
//wvtesting2.com/bugs/spider-crash/index.php?pg=search&kwords=women&page=1", HttpStatusCode = 404},
//wvtesting2.com/bugs/spider-crash/index.php?pg=search&kwords=women&page=3", HttpStatusCode = 404},
//wvtesting2.com/bugs/spider-crash/index.php?pg=search&kwords=women&page=1304", HttpStatusCode = 404},
//wvtesting2.com/product/523-Washington_Mystics_Tank", HttpStatusCode = 404},
//wvtesting2.com/bugs/spider-crash/index.php?pg=search&kwords=women&page=1303", HttpStatusCode = 404},
//wvtesting2.com/bugs/spider-crash/index.php?pg=search&kwords=women&page=1302", HttpStatusCode = 404},
//wvtesting2.com/MOTOR-SKILLS_c19.htm", HttpStatusCode = 404},
//wvtesting2.com/product/1361-New_York_Liberty_Tank", HttpStatusCode = 404},
//wvtesting2.com/product/1362-Los_Angeles_Sparks", HttpStatusCode = 404},
//wvtesting2.com/product/1363-Connecticut_Sun_Tank", HttpStatusCode = 404},
//email@wvtesting2.com/jv-9.1%20Display%20Top%20SEO%20Checklist/Missing%20Title.htm", HttpStatusCode = 502},
//wvtesting2.com/product/1364-Houston_Comets_Tank", HttpStatusCode = 404},
//wvtesting2.com/product/1940-American_Soldier_Camo_Bear", HttpStatusCode = 404},
//wvtesting2.com/ORAL-MOTOR_c20.htm", HttpStatusCode = 404},
//wvtesting2.com/POSTURE-STABILITY_c23.htm", HttpStatusCode = 404},
//wvtesting2.com/SENSE-OF-TIME-TIMERS_c26.htm", HttpStatusCode = 404},
//wvtesting2.com/product/2243-Marine_Hero_Curly_Teddy", HttpStatusCode = 404},
//wvtesting2.com/PUZZLES_c24.htm", HttpStatusCode = 404},
//wvtesting2.com/RESPONSIBILITY-PLANTS_c25.htm", HttpStatusCode = 404},
//wvtesting2.com/SENSORY-INTEGRATION_c27.htm", HttpStatusCode = 404},
//wvtesting2.com/SKILL-BUILDING-GAMES_c30.htm", HttpStatusCode = 404},
//wvtesting2.com/SENSORY-SYSTEMS_c28.htm", HttpStatusCode = 404},
//wvtesting2.com/SENSORY-UNIVERSITY-LIBRARY_c29.htm", HttpStatusCode = 404},
//wvtesting2.com/product/8523-", HttpStatusCode = 404},
//wvtesting2.com/product/8525-", HttpStatusCode = 404},
//wvtesting2.com/product/8524-", HttpStatusCode = 404},
//wvtesting2.com/product/8522-", HttpStatusCode = 404},
//wvtesting2.com/THERAPY-COMBO-PACKS_c31.htm", HttpStatusCode = 404},
//wvtesting2.com/product/8526-", HttpStatusCode = 404},
//wvtesting2.com/THERAPY-SWINGS_c32.htm", HttpStatusCode = 404},
//wvtesting2.com/product/8528-", HttpStatusCode = 404},
//wvtesting2.com/WEIGHTED_c34.htm", HttpStatusCode = 404},
//wvtesting2.com/product/8529-", HttpStatusCode = 404},
//wvtesting2.com/product/8527-", HttpStatusCode = 404},
//wvtesting2.com/termsandconditions.sc", HttpStatusCode = 404},
//wvtesting2.com/aboutus.sc", HttpStatusCode = 404},
//wvtesting2.com/TOYS-FOR-AUTISM_c33.htm", HttpStatusCode = 404},
//wvtesting2.com/help.sc", HttpStatusCode = 404},
//wvtesting2.com/product/8530-", HttpStatusCode = 404},
//wvtesting2.com/sitemap.htm", HttpStatusCode = 404},
//wvtesting2.com/product/8531-", HttpStatusCode = 404},
//wvtesting2.com/product/8536-", HttpStatusCode = 404},
//wvtesting2.com/product/8535-", HttpStatusCode = 404},
//wvtesting2.com/product/8537-", HttpStatusCode = 404},
//wvtesting2.com/product/8538-", HttpStatusCode = 404},
//wvtesting2.com/product/8539-", HttpStatusCode = 404},
//wvtesting2.com/product/8533-", HttpStatusCode = 404},
//wvtesting2.com/product/8534-", HttpStatusCode = 404},
//wvtesting2.com/product/8532-", HttpStatusCode = 404},
//wvtesting2.com/product/8541-", HttpStatusCode = 404},
//wvtesting2.com/product/8540-", HttpStatusCode = 404},
//wvtesting2.com/product/8542-", HttpStatusCode = 404},
//wvtesting2.com/product/8543-", HttpStatusCode = 404},
//www.godaddy.com/gdshop/email/internet-fax.asp", HttpStatusCode = 200},
//wvtesting2.com/product/8547-Women's_Carolina_Work_Boot_CA421", HttpStatusCode = 404},
//wvtesting2.com/product/8546-Women's_Carolina_Work_Boot_CA11211__(Closeout_Sale)", HttpStatusCode = 404},
//wvtesting2.com/product/8544-Women's_Carolina_Oxford_Work_Shoes_CA423", HttpStatusCode = 404},
//wvtesting2.com/product/8548-", HttpStatusCode = 404},
//wvtesting2.com/product/8545-Women's_Carolina_Slip_Resistant_Work_Shoes_CA11210_(Closeout_Sale)", HttpStatusCode = 404},
//wvtesting2.com/product/8549-Women's_Caterpillar_Alaska_FX_Work_Boots_P71560", HttpStatusCode = 404},
//wvtesting2.com/product/8550-Women's_Caterpillar_Blackbriar_Work_Shoes_P73627", HttpStatusCode = 404},
//wvtesting2.com/product/8551-Women's_Caterpillar_Blackbriar_Work_Shoes_P73628", HttpStatusCode = 404},
//wvtesting2.com/product/8554-Women's_Caterpillar_Kitson_SRX_Work_Boots_P73667", HttpStatusCode = 404},
//wvtesting2.com/product/8557-", HttpStatusCode = 404},
//wvtesting2.com/product/8552-Women's_Caterpillar_Blackbriar_Work_Shoes_P73646", HttpStatusCode = 404},
//wvtesting2.com/product/8555-Women's_Caterpillar_Lander_Mid_Work_Boots_P73587", HttpStatusCode = 404},
//wvtesting2.com/product/8553-Women's_Caterpillar_Kison_SRX_Work_Boots_P73669", HttpStatusCode = 404},
//wvtesting2.com/product/8558-", HttpStatusCode = 404},
//wvtesting2.com/product/8556-", HttpStatusCode = 404},
//wvtesting2.com/product/8560-Women's_Converse_Athletic_Hi_Top_Work_Boots_C840", HttpStatusCode = 404},
//wvtesting2.com/product/8561-Women's_Converse_Athletic_Oxford_Work_Shoes_C110", HttpStatusCode = 404},
//wvtesting2.com/product/8565-Women's_Converse_Athletic_Slip_On_Work_Shoes_C111", HttpStatusCode = 404},
//wvtesting2.com/product/8563-Women's_Converse_Athletic_Oxford_Work_Shoes_C431", HttpStatusCode = 404},
//wvtesting2.com/product/8564-Women's_Converse_Athletic_Oxford_Work_Shoes_C865", HttpStatusCode = 404},
//wvtesting2.com/product/8559-", HttpStatusCode = 404},
//wvtesting2.com/product/8562-Women's_Converse_Athletic_Oxford_Work_Shoes_C117", HttpStatusCode = 404},
//wvtesting2.com/product/8567-Women's_Converse_Oxford_Work_Shoes_C112", HttpStatusCode = 404},
//wvtesting2.com/product/8568-Women's_Converse_Postal_Certified_Chukka_Work_Boots_CP850", HttpStatusCode = 404},
//wvtesting2.com/product/8566-Women's_Converse_Athletic_Slip_On_Work_Shoes_C118", HttpStatusCode = 404},
//wvtesting2.com/product/8569-", HttpStatusCode = 404},
//wvtesting2.com/product/8571-", HttpStatusCode = 404},
//wvtesting2.com/product/8576-Women's_Corcoran_Shoes_1911__Leather_&_Nylon_Athletic_Service_Oxford_Work_Shoes", HttpStatusCode = 404},
//wvtesting2.com/product/8574-", HttpStatusCode = 404},
//wvtesting2.com/product/8570-", HttpStatusCode = 404},
//wvtesting2.com/product/8575-", HttpStatusCode = 404},
//wvtesting2.com/product/8577-", HttpStatusCode = 404},
//wvtesting2.com/product/8579-", HttpStatusCode = 404},
//wvtesting2.com/product/8572-", HttpStatusCode = 404},
//wvtesting2.com/product/8578-", HttpStatusCode = 404},
//wvtesting2.com/product/8580-Women's_Double_H_Beauty_and_the_Buckaroo_Boots_DH5192", HttpStatusCode = 404},
//wvtesting2.com/product/8573-", HttpStatusCode = 404},
//wvtesting2.com/product/8583-Women's_Double_H_Cowboy_Boots_DH0020__Ashlee_Western_(Closeout_Sale)", HttpStatusCode = 404},
//wvtesting2.com/product/8586-Women's_Double_H_Cowboy_Boots_DH0320__Ashlee_Western_(Closeout_Sale)", HttpStatusCode = 404},
//wvtesting2.com/product/8582-Women's_Double_H_Cowboy_Boots_DH0019__Brown_(Closeout_Sale)", HttpStatusCode = 404},
//wvtesting2.com/product/8581-Women's_Double_H_Beauty_and_the_Buckaroo_Boots_DH5193", HttpStatusCode = 404},
//wvtesting2.com/product/8585-Women's_Double_H_Cowboy_Boots_DH0220__Ashlee_Western_(Closeout_Sale)", HttpStatusCode = 404},
//wvtesting2.com/product/8590-Women's_Double_H_Slouch_Work_Boots_DH5252", HttpStatusCode = 404},
//wvtesting2.com/product/8587-Women's_Double_H_Shoe_DH0212__Monarch_Snip_Toe_Mules_(Closeout_Sale)", HttpStatusCode = 404},
//wvtesting2.com/product/8588-Women's_Double_H_Shoes_DH0312__Monarch_Snip_Toe_Mule_(Closeout_Sale)", HttpStatusCode = 404},
//wvtesting2.com/product/8589-Women's_Double_H_Slouch_Work_Boots_DH5250", HttpStatusCode = 404},
//wvtesting2.com/product/8584-Women's_Double_H_Cowboy_Boots_DH0120__Ashlee_Western_(Closeout_Sale)", HttpStatusCode = 404},
//wvtesting2.com/product/8591-Women's_Double_H_Western_Boot_DH5197", HttpStatusCode = 404},
//wvtesting2.com/product/8592-Women's_Double_H_Western_Boot_DH5198", HttpStatusCode = 404},
//wvtesting2.com/product/8594-Women's_Double_H_Western_Boots_5008__Cowboy_Boots", HttpStatusCode = 404},
//wvtesting2.com/product/8595-Women's_Double_H_Western_Boots_DH058B__Cowboy_Boots", HttpStatusCode = 404},
//wvtesting2.com/product/8600-Women's_Double_H_Western_Work_Boots_DH5152__Cowboy_Boots", HttpStatusCode = 404},
//wvtesting2.com/product/8599-Women's_Double_H_Western_Work_Boots_9300__Cowboy_Boots", HttpStatusCode = 404},
//wvtesting2.com/product/8596-Women's_Double_H_Western_Boots_DH5153__Cowboy_Boots", HttpStatusCode = 404},
//wvtesting2.com/product/8598-Women's_Double_H_Western_Work_Boots_1088__Cowboy_Boots", HttpStatusCode = 404},
//wvtesting2.com/product/8597-Women's_Double_H_Western_Work_Boots_1086__Cowboy_Boots", HttpStatusCode = 404},
//wvtesting2.com/product/8593-Women's_Double_H_Western_Boot_DH5211", HttpStatusCode = 404},
//wvtesting2.com/product/8601-Women's_Double_H_Western_Work_Boots_DH5159__Cowboy_Boots", HttpStatusCode = 404},
//wvtesting2.com/product/8603-Women's_Double_H_Wide_Square_Roper_Work_Boots_DH5101", HttpStatusCode = 404},
//wvtesting2.com/product/8602-Women's_Double_H_Wide_Square_Roper_Boots_DH5102", HttpStatusCode = 404},
//wvtesting2.com/product/8604-Women's_Double_H_Wide_Square_Work_Boots_DH5195", HttpStatusCode = 404},
//wvtesting2.com/product/8607-Women's_Dr_Martens_1460_Boots__R11821002", HttpStatusCode = 404},
//wvtesting2.com/product/8606-Women's_Dr_Martens_0061_Oxford_Industrial_Work_Shoes_0061W5365", HttpStatusCode = 404},
//wvtesting2.com/product/8608-Women's_Dr_Martens_1460_Boots__R11821011", HttpStatusCode = 404},
//wvtesting2.com/product/8605-Women's_Dr_Martens_0061_Oxford_Industrial_Work_Shoes__0061W5661", HttpStatusCode = 404},
//wvtesting2.com/product/8610-Women's_Dr_Martens_1460_Boots__R11821312", HttpStatusCode = 404},
//wvtesting2.com/product/8609-Women's_Dr_Martens_1460_Boots__R11821104", HttpStatusCode = 404},
//wvtesting2.com/product/8611-Women's_Dr_Martens_1460_Boots__R11821313", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/index.cfm", HttpStatusCode = 404},
//www.1031x.com/tax_calculator.cfm", HttpStatusCode = 200},
//www.1031x.com/1031-exchange-reverse-replacement.cfm", HttpStatusCode = 200},
//www.1031x.com/simple_steps_to_follow.cfm", HttpStatusCode = 200},
//www.1031x.com/1031-construction-exchange.cfm", HttpStatusCode = 200},
//www.1031x.com/1031-exchange-reverse-relinquished.cfm", HttpStatusCode = 200},
//www.1031x.com/capital-gains-state-tax-rate.cfm", HttpStatusCode = 200},
//www.1031x.com/aircraft_equipment_livestock.cfm", HttpStatusCode = 200},
//www.1031x.com/1031exchange.cfm", HttpStatusCode = 200},
//www.1031x.com/", HttpStatusCode = 200},
//www.1031x.com/1031exchangeblog.cfm", HttpStatusCode = 200},
//www.1031x.com/newsletters.cfm", HttpStatusCode = 200},
//www.1031x.com/news-PartSalePartExchange.cfm", HttpStatusCode = 200},
//www.1031x.com/news-FailedExchanges.cfm", HttpStatusCode = 200},
//www.1031x.com/fees.cfm", HttpStatusCode = 200},
//www.1031x.com/news-OwnerFinancing.cfm", HttpStatusCode = 200},
//www.1031x.com/news-IRSandRefinance.cfm", HttpStatusCode = 200},
//www.1031x.com/about_us.cfm", HttpStatusCode = 200},
//www.1031x.com/news-EscrowFunds.cfm", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/1031-exchange-state-tax.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/summary.cfm", HttpStatusCode = 404},
//www.1031x.com/contact_us.cfm", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/1031exchange_history_guide.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/newsletters.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031exchangeblog.cfm", HttpStatusCode = 404},
//www.castleoilandgas.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/tax_calculator.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-PartSalePartExchange.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-OwnerFinancing.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/options.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-BoostIncome.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-FailedExchanges.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-EscrowFunds.cfm", HttpStatusCode = 404},
//www.castlecommercialmortgage.com/1031loan.php", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/news-IRSandRefinance.cfm", HttpStatusCode = 404},
//www.irsform8824.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/news-swap_and_drop.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-title.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-CoOwnership.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-CashBack.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-titlespouse.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-newrules.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-TICisHere.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/capital-gains-state-tax-rate.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-RelatedParties.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-RepairstoReplacement.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-ReverseRescue.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-Partnership.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-MultipleAndFractional.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-Oct22.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-LikeKind.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-PrimaryResidence.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-PrincipalVSInvestment.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-ForwardorReverse.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-ReverseSanction.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-ImproveAfterPurchase.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-ClientService.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-TaxRateChanges.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-ScopeOfLaw.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-DealerOrInvestor.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-ToBeBuilt.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-WhyRealEstate.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-TypeofExchanges.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-CallBeforeYouClose.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-ATrap.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-Cities.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-HowLongToHold.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-Example.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-Nutshell.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-GeneralQuestions.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-Overview.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-SpecializedKnowledge.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/faq.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/simple_steps_to_follow.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031-construction-exchange.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/about_us.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-NotificationOtherParty.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031-exchange-reverse-replacement.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031-exchange-reverse-relinquished.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/aircraft_equipment_livestock.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/fees.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/newsletter.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/contact_us.cfm", HttpStatusCode = 404},
//www.1031propertyswap.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/escape-chars/1031-exchange-principal-residence.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031-exchange-capital-gain-exclusion.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031-exchange-cashing-out.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031exchangeleaseoption.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031-exchange-capital-gains.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/dual-use-of-property.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031-exchange-depreciation.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/three-1031-exchange-tax-strategies.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/form-8824-help-for-1031-exchanges.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031-Exchange-And-Increasing-Basis.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031ExchangeTaxFreeCash.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031-exchange-basics.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/IRCsection121howoften.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/related-party-1031-exchange.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031exchangesubdividing.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/200PercentIdentificationRule.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/ups-store-exchange.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/extend-1031-exchange-deadlines.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031-exchange-and-spouses.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/news-swapdrop.pdf", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/1031-exchange-tax-estimate.cfm", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Product/Search.aspx?SearchType=Advance", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Security/SignIn.aspx", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Security/MyAccount.aspx", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=Toners", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=Pitney_Bowes", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=Contact+Us", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Security/SignUp.aspx", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=About+Us", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Security/OrderStatus.aspx", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=Drums", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=MICR+Toner", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=Fund+Raising", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=Print+Management", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=Warranty", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=Careers", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Shopping/Cart.aspx", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=SPCA", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=News", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Default.html?PageCode=Printer+Copier+Repair+Service", HttpStatusCode = 404},
//wvtesting2.com/bugs/escape-chars/Shopping/CheckOut.aspx", HttpStatusCode = 404},
//wvtesting2.com/Category/4c225963653f4534918ad6d62895e6aa/canon.html", HttpStatusCode = 404},
//wvtesting2.com/Category/a59b2d20aec345459d768d0df57abf01/brother.html", HttpStatusCode = 404},
//wvtesting2.com/Category/3c01245066894e5ea4b801979f0bbfdf/hp.html", HttpStatusCode = 404},
//wvtesting2.com/Category/d02e8118398143e2a1c2e8ae88c2c73d/epson.html", HttpStatusCode = 404},
//wvtesting2.com/Category/fc5a749aceed4c17ac77b9ba58e7747e/ink-toner-ribbon.html", HttpStatusCode = 404},
//wvtesting2.com/Category/b5cd367729a84d50880cc3bb7f8299a4/ibm.html", HttpStatusCode = 404},
//wvtesting2.com/Category/b90c91eaf8e5448b8c947277ed79abc3/samsung.html", HttpStatusCode = 404},
//wvtesting2.com/Category/06a405fbfa67423ca93cf7d80426c9fa/lexmark.html", HttpStatusCode = 404},
//wvtesting2.com/Product/cl-q2612a/hp-q2612a-compatible-black-toner-cartridge-hp-1010-hp-1012-hp-1015-hp-1018-hp-1020-hp-1022-hp-3015-hp-3020-hp-3030-hp-3050-hp-3052-hp-3055-hp-m1005-hp-m1319-.html", HttpStatusCode = 404},
//wvtesting2.com/Category/c618883e56a84d0390796cbdcc0b2651/okidata.html", HttpStatusCode = 404},
//wvtesting2.com/Category/282cd823ff54467caf3ed4499d7a5e32/dell.html", HttpStatusCode = 404},
//wvtesting2.com/Product/clhy-q2612x/hp-compatible-q2612x-hp-12x-laser-toner-cartridge-3-000-pages-black-hp-1010-hp-1012-hp-1015-hp-1018-hp-1020-hp-1022-hp-3015-hp-3020-hp-3030-hp-3050-hp-3052-hp-3055-hp-m1005-hp-m1319-.html", HttpStatusCode = 404},
//wvtesting2.com/Default.html?PageCode=Fellet+Management", HttpStatusCode = 404},
//wvtesting2.com/Category/22af8cb169534bbdae1b5d1353f91805/xerox.html", HttpStatusCode = 404},
//wvtesting2.com/Default.html?PageCode=Warranty", HttpStatusCode = 404},
//wvtesting2.com/Product/clhy-c4127x/hp-c4127x-compatible-high-yield-black-toner-cartridge.html", HttpStatusCode = 404},
//printgreenga.blogspot.com/2010/04/inkjet-and-toner-myths-explained.html", HttpStatusCode = 404},
//wvtesting2.com/Category/c0e7a457880146c29899336631533c72/pitney-bowes.html", HttpStatusCode = 404},
//wvtesting2.com/Default.html?PageCode=Toners", HttpStatusCode = 404},
//inkjets.4reviews.net/page-yield-cartridge.htm", HttpStatusCode = 200},
//wvtesting2.com/Default.html?PageCode=Drums", HttpStatusCode = 404},
//en.wikipedia.org/wiki/Lexmark", HttpStatusCode = 200},
//wvtesting2.com/Default.html?PageCode=Terms+%26+Conditions", HttpStatusCode = 404},
//wvtesting2.com/Default.html?PageCode=Privacy+Policy", HttpStatusCode = 404},
//en.wikipedia.org/wiki/Primary_color", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/DISCLAIMER.html", HttpStatusCode = 404},
//sociallist.org/submit.php?type=1&lang=en&url=refpage&title=refpage&tag=refpage&text=refpage", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/DWI_or_DUI.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Home_Page.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/DIVORCE.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/CHILD_CUSTODY.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/LANDLORD_TENANTS.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/IMMIGRATION.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/CHILD_SUPPORT.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/EMPLOYMENT_LAW.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/TRAFFIC_TICKETS.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/CONTRACT_LAW.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/WILL___TESTAMENT.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/CONSUMER_LAW.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/CORPORATE_LAW.html", HttpStatusCode = 404},
//www.printgreenga.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/CRIMINAL_LAW.html", HttpStatusCode = 404},
//www.greeningwinnett.org/", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/PERSONAL_INJURY.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/TAX_LAW.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/INSURANCE_LAW.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/BANKRUPTCY.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/PROPERTY_REAL_ESTATE.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Syama_Oconnor.htm", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Ron.htm", HttpStatusCode = 404},
//rthomaslaw.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/2010_Work_Order.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/", HttpStatusCode = 403},
//wvtesting2.com/bugs/tidy/PDF/Rinnai.Tankless.Water.Heater-Oconor.Plumbing.pdf", HttpStatusCode = 404},
//www.ocbusinessfinder.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/Home.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Schedule.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Dance.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Music.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Tour.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Pricing.html", HttpStatusCode = 404},
//home.html/", HttpStatusCode = 200},
//www.paoindustries.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/Register.html", HttpStatusCode = 404},
//www.rthomaslaw.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/Staff.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Camps.html", HttpStatusCode = 404},
//wvtesting2.com/about_encyclopedia.html", HttpStatusCode = 404},
//wvtesting2.com/index.php", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Contact.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Photos.html", HttpStatusCode = 404},
//wvtesting2.com/subscriptions.html", HttpStatusCode = 404},
//wvtesting2.com/contact_deltaalpha.html", HttpStatusCode = 404},
//wvtesting2.com/php/pdfs/User_Guide3.pdf", HttpStatusCode = 404},
//wvtesting2.com/disclaimer_realestatetermsdefined.html", HttpStatusCode = 404},
//wvtesting2.com/tandc.html", HttpStatusCode = 404},
//wvtesting2.com/sample_terms.html", HttpStatusCode = 404},
//www.rinnai.us/", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/HowItWorks.html", HttpStatusCode = 404},
//wvtesting2.com/privacy.html", HttpStatusCode = 404},
//www.blog.realestatedefinedonline.com/", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/Forms.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/about.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/About.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/ValuableLinks.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/DOCTORS.php", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/News.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Resources.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Guestbook.php", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/GOD_s_Page.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Representatives.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Donations.html", HttpStatusCode = 404},
//www.godaddy.com/hosting/web-hosting.aspx", HttpStatusCode = 200},
//wvtesting2.com/bugs/tidy/Services_Included.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Our_Qualifications.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/uploads/A_Sample_Complete_Inspection_Report.pdf", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Fee_Schedule.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Important_Links.php", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/HOME_PAGE.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/BOAT_DOCK.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/DOCK_RE-FLOAT.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/Boat_Lifts.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/GANGWAYS_STAIRS.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/LAKE_PUMP.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/DOCK_WATCH.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/TRAM_LIFTS.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/WELDING_FABRICATION.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/PROJECTS.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/SERVICES.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/DOCK_ANCHOR.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/ABOUT_US.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/CONTACT_US.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/tidy/BOAT_STORAGE.html", HttpStatusCode = 404},
//wvtesting2.com/misc-tests/tests/with&link.html", HttpStatusCode = 200},
//www.godaddy.com/hosting/virtual-dedicated-servers.aspx", HttpStatusCode = 200},
//wvtesting2.com/level2/leafnode-L2-broken.html", HttpStatusCode = 404},
//wvtesting2.com/level2/level3/leafnode-L3-broken.html", HttpStatusCode = 404},
//apache.org/broken.html", HttpStatusCode = 404},
//www.godaddy.com/", HttpStatusCode = 200},
//apache.org/broken2.html", HttpStatusCode = 404},
//sub2.wvtesting2.com/rd/301RD-intWrk.html", HttpStatusCode = 200},
//sub2.wvtesting2.com/rd/301RD-IntWrk.html", HttpStatusCode = 404},
//www.godaddy.com/search-engine/seo-services.aspx", HttpStatusCode = 200},
//sub2.wvtesting2.com/", HttpStatusCode = 200},
//wvtesting.com/analyze-content/analyzecontent-Master.htm", HttpStatusCode = 200},
//www.wvtesting2.com/misc-tests/", HttpStatusCode = 200},
//www.wvtesting2.com/misc-tests/tests/MPWCgtMPKWC.html", HttpStatusCode = 200},
//wvtesting.com/analyze-content/AnalyzeContent-Master.htm", HttpStatusCode = 200},
//www.wvtesting2.com/Misc-tests/", HttpStatusCode = 404},
//www.wvtesting2.com/misc-tests/blah.html", HttpStatusCode = 404},
//sub2.wvtesting2x.com/", HttpStatusCode = 200},
//wvtesting2.com/misc-tests/tests/http-codes/http_code-401.php", HttpStatusCode = 401},
//wvtesting2.com/misc-tests/tests/http-codes/http_code-403.php", HttpStatusCode = 403},
//wvtesting2.com/misc-tests/tests/http-codes/http_code-500.php", HttpStatusCode = 500},
//wvtesting2.com/misc-tests/tests/http-codes/http_code-404.php", HttpStatusCode = 404},
//www.inrainbows.com/Store/Quickindex.html", HttpStatusCode = 401},
//wvtesting2.com/misc-tests/tests/http-codes/http_code-502.php", HttpStatusCode = 502},
//wvtesting2.com/misc-tests/tests/http-codes/http_code-300.php", HttpStatusCode = 300},
//www.godaddy.com/", HttpStatusCode = 200},
//www.youtube.com/watch?v=qCWJrypcp10", HttpStatusCode = 404},
//wvtesting2.com/misc-tests/tests/http-codes/http_code-503.php", HttpStatusCode = 503},
//search.barnesandnoble.com/booksearch/isbnInquiry.asp?userid=tV42r3YDJ%0D9&isbn=1591840414&itm=1", HttpStatusCode = 0},
//wvtesting2.com/misc-tests/tests/http-codes/http_code-504.php", HttpStatusCode = 504},
//neednot2know.com/Bndry1.html", HttpStatusCode = 404},
//wvtesting2.com/bugs/me%20inc%20with_dot./urlWithDot_folderNameEnd.html", HttpStatusCode = 200},
//wvtesting2.com/level2/www.", HttpStatusCode = 404},
//wvtesting2.com/www.wvtesting2.com", HttpStatusCode = 404},
//wvtesting2.com/product/1335-WNBA_Uniform_2_pc.", HttpStatusCode = 404},
//wvtesting2.com/product/1707-Army_Officer_Uniform_3_pc.", HttpStatusCode = 404},
//wvtesting2.com/product/1690-Air_Service_Uniform_3_pc.", HttpStatusCode = 404},
//wvtesting2.com/bugs/me%20inc%20without_dot/urlReachableWith_FwdSlash.html", HttpStatusCode = 200}
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//a.com/")), null);
//a.com/"))
///C:/Users/")), _crawlContext);
//user@yourdomainname.com")), _crawlContext);
//a.com/b")) { IsInternal = true }, _crawlContext);
//a.com/b")) { IsInternal = true }, _crawlContext);
//a.com/")) { IsInternal = true }, crawlContext);
//a.com/"))
//a.com/"))
//a.com/"))
//a.com/"))
//a.com/");
//a.com/");
//a.com/"))
//a.com/"))
//a.com/"))
//Doesntmatter.com")),
//a.com/"))
//Doesntmatter.com")),
//a.com/"))
//Doesntmatter.com")),
//a.com/a.html"))
//a.com/"))
//a.com/"))
//a.com/"))
//b.com/a.html"))
//a.com/ "),
//b.com/a.html"))
//a.com/ "),
//b.com/a.html"))
//a.com/ "),
//b.com/a.html"))
//a.com/ "),
//b.com/a.html"))
//a.com/ "),
//localhost.fiddler:1111/");
//a.com/a.html")), null);
//b.com/a.html"))
//a.com/ ")
//localhost.fiddler:1111/HttpResponse/Status403");
//localhost.fiddler:1111/Content/themes/base/images/ui-bg_flat_0_aaaaaa_40x100.png");
//localhost.fiddler:1111/Content/themes/base/images/ui-bg_flat_0_aaaaaa_40x100.png");//Content type fo this link is image/png
//localhost.fiddler:1111/");//Content type fo this link is text/html
//localhost.fiddler:1111/");
//Assert.AreEqual("Page size of [1298] bytes is above the max allowable of [5] bytes", result.Reason); //This fluctuates depending on the .net version runtime installed
//localhost.fiddler:1111/");
//a.com/"))
//a.com/")), null);
//a.com/"))
//a.com/"))
//a.com/"))
//a.com");
//b.com");
//Add first time
// create input collection
// instantiate filter and populate it with the inputs
//If all were unique then they should all return "true" for Contains()
//If all were added successfully then they should all return "true" for Contains()
//" + Guid.NewGuid().ToString()));
//a.com/");
//a.com/");
//a.com/");
//b.com/");
//c.com/");
//d.com/");
//a.com/");
//b.com/");
//c.com/");
//d.com/");
//a.com"), 0));
//a.com"), -1));
//a.com/");
//a.com/a.html");
//a.com/b.html");
//a.com/");
//a.com/a.html");
//a.com/b.html");
//a.com");
//This should be ignored
//a.com"), 0));
//a.com"), -1));
//a.com/");
//a.com/a.html");
//a.com/b.html");
//a.com/");
//a.com/a.html");
//a.com/b.html");
//a.com");
//This should override the previous
//Arrange
//a.com");
//Act
//Assert
//a.com/");
//localhost.fiddler:1111/"));
//Make the real request above look like it came from the fake uri
//aaa.com/\" ></a><a href=\"/aaa/a.html\" /></a>"; 
//aaa.com/", result.ElementAt(0).AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(1).AbsoluteUri);
//bbb.com\" /><area href=\"bbb/b.html\" />";
//bbb.com/", result.ElementAt(0).AbsoluteUri);
//a.com/bbb/b.html", result.ElementAt(1).AbsoluteUri);
//aaa.com/\" ></A><A HREF=\"/aaa/a.html\" /></A>";
//aaa.com/", result.ElementAt(0).AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(1).AbsoluteUri);
//bbb.com\" /><AREA HREF=\"bbb/b.html\" />";
//bbb.com/", result.ElementAt(0).AbsoluteUri);
//a.com/bbb/b.html", result.ElementAt(1).AbsoluteUri);
//user@yourdomainname.com/\" /><a href=\"file:///C:/Users/\" />";
//user@yourdomainname.com/", result.ElementAt(3).AbsoluteUri);
///C:/Users/", result.ElementAt(4).AbsoluteUri);
//////\" />";
//a1.com' />
//a2.com' />
//b1.com' />
//b2.com' />
//a1.com' />
//a2.com' />
//b1.com' />
//b2.com' />
//a1.com' />
//a2.com' />
//b1.com' />
//b2.com' />
//a.com/aaa/a.html", result.ElementAt(0).AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(0).AbsoluteUri);
//a.com/aaa/a.html/", result.ElementAt(1).AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(0).AbsoluteUri);
//a.com/aaa/a.html#top", result.ElementAt(1).AbsoluteUri);
//a.com/aaa/a.html#bottom", result.ElementAt(2).AbsoluteUri);
//a.com/aaa/a.html/#someaction/someid", result.ElementAt(3).AbsoluteUri);
//bbb.com\"><a href=\"http://aaa.com/\" ></a><a href=\"/aaa/a.html\" /></a>";
//aaa.com/", result.ElementAt(0).AbsoluteUri);
//bbb.com/aaa/a.html", result.ElementAt(1).AbsoluteUri);
//aaa.com/\" ></a><a href=\"/aaa/a.html\" /></a>";
//aaa.com/", result.ElementAt(0).AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(1).AbsoluteUri);
//http:\"><a href=\"http://aaa.com/\" ></a><a href=\"/aaa/a.html\" /></a>";
//aaa.com/", result.ElementAt(0).AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(1).AbsoluteUri);
//aaa.com/");//http
//aaa.com\"><a href=\"/aaa/a.html\" ></a>";
//aaa.com/aaa/a.html", result.ElementAt(0).AbsoluteUri);
//aaa.com/");//https
//aaa.com\"><a href=\"/aaa/a.html\" ></a>";
//aaa.com/aaa/a.html", result.ElementAt(0).AbsoluteUri);
//This sets the Address properties backing field which does not have a public set method
//zzz.com/"));
//zzz.com/aaa/a.html", result.ElementAt(0).AbsoluteUri);
//zzz.com/bbb/b.html", result.ElementAt(1).AbsoluteUri);
//a.com/search?rls=en&amp;q=stack+overflow\" ></a>";
//This sets the Address properties backing field 
//a.com/search?rls=en&q=stack+overflow", result.ElementAt(0).AbsoluteUri);
//x.com/xxx/x.html", result.ElementAt(0).AbsoluteUri);
//x.com/yyy/y.html", result.ElementAt(1).AbsoluteUri);
//https://github.com/sjdirect/abot/issues/15
//www.gamespot.com/pc/rpg/numen/index.html?om_act=convert&om_clk=tabs&tag=tabs;summary\" ></a>";
//www.gamespot.com/pc/rpg/numen/index.html?om_act=convert&om_clk=tabs&tag=tabs;summary", result.ElementAt(0).AbsoluteUri);
//a.com/page1\" /></head><body><a href=\"http://a.com/page2\"></a></body></html>";
//a.com/page2", result.ElementAt(0).AbsoluteUri);
//a.com/page1", result.ElementAt(1).AbsoluteUri);
//localhost.fiddler:1111/");
//localhost.fiddler:1111/HttpResponse/Status403");
//localhost.fiddler:1111/HttpResponse/Status404");
//localhost.fiddler:1111/HttpResponse/Status500");
//www.lakkjfkasdfjhqlkfj.com");//non resolvable
//localhost.fiddler:1111/HttpResponse/Status503");
//localhost.fiddler:1111/HttpResponse/Redirect/?redirectHttpStatus=301&destinationHttpStatus=200");
//localhost.fiddler:1111/HttpResponse/Redirect/?redirectHttpStatus=301&destinationHttpStatus=404");
//Assert.IsNull(result.HttpWebResponse);
//Assert.IsTrue(string.IsNullOrWhiteSpace(result.Content.Text));
//a.com"));
//b.com"));
//abc/"));
//abcd/"));
//should be null
//This method is tested by most of the other methods in this class
//localhost.fiddler:1111/"));
//localhost.fiddler:1111/HttpResponse/Status404"));
//a.com/");
//a.com/robots.txt");
//aaa.a.com/");
//aaa.a.com/robots.txt");
//a.com/a/b/b.html");
//a.com/robots.txt");
//a.com");
//a.com/robots.txt");
//a.com/robots.txt");
//a.com/robots.txt");
//a.com/");
//a.com/robots.txt");
//www.spidertestsite1.com/");
//a.com/sitemap.xml
//b.com/sitemap.xml
//User agent "userAgentCrawlDelayIs1" doesn't specify anything to disallow so should allow all ("*" is not inherited)
//Allows all since "userAgentCrawlDelayIs1" does not specify allow or disallow
//Should use "*" user agent by default
//Disallows all for "badagent"
//Should use "*" user agent by default
//User agent "userAgentCrawlDelayIs1" doesn't specify anything to disallow so should allow all ("*" is not inherited)
//Allows all since "userAgentCrawlDelayIs1" does not specify allow or disallow
//yahoo.com/");
//User agent "userAgentCrawlDelayIs1" doesn't specify anything to disallow so should allow all ("*" is not inherited)
//Allows all since "userAgentCrawlDelayIs1" does not specify allow or disallow
//IF this test starts failing that is a good thing, it means the robots impl now supports querystrings
//a.com/") };
//a.com/") }, new PageToCrawl { Uri = new Uri("http://b.com/") } };
//[Test]
//public void Add_IEnumerableParam_IsUriRecrawlingIsFalse_DuplicateNotAdded()
//{
//    //_unitUnderTest = new FifoScheduler(false);//this is the default
//    //_unitUnderTest.Add(new List<PageToCrawl> { new PageToCrawl(new Uri("http://a.com/")), new PageToCrawl(new Uri("http://a.com/")), new PageToCrawl(new Uri("http://a.com/")) });
//    //Assert.AreEqual(1, _unitUnderTest.Count);
//}
//[Test]
//public void Add_IsUriRecrawlingIsTrue_DuplicateAdded()
//{
//    //_unitUnderTest = new FifoScheduler(true);
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://a.com/")));
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://a.com/")));
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://a.com/")));
//    //Assert.AreEqual(3, _unitUnderTest.Count);
//}
//[Test]
//public void Add_IEnumerableParam_IsUriRecrawlingIsTrue_DuplicateAdded()
//{
//    //_unitUnderTest = new FifoScheduler(true);//this is the default
//    //_unitUnderTest.Add(new List<PageToCrawl> { new PageToCrawl(new Uri("http://a.com/")), new PageToCrawl(new Uri("http://a.com/")), new PageToCrawl(new Uri("http://a.com/")) });
//    //Assert.AreEqual(3, _unitUnderTest.Count);
//}
//[Test]
//[ExpectedException(typeof(ArgumentNullException))]
//public void Add_NullPage()
//{
//    //PageToCrawl nullPage = null;
//    //_unitUnderTest.Add(nullPage);
//}
//[Test]
//[ExpectedException(typeof(ArgumentNullException))]
//public void Add_IEnumerableParam_NullPages()
//{
//    //IEnumerable<PageToCrawl> nullPages = null;
//    //_unitUnderTest.Add(nullPages);
//}
//[Test]
//public void GetNext()
//{
//    //Assert.AreEqual(0, _unitUnderTest.Count);
//    //PageToCrawl page1 = new PageToCrawl(new Uri("http://a.com/1"));
//    //PageToCrawl page2 = new PageToCrawl(new Uri("http://a.com/2"));
//    //PageToCrawl page3 = new PageToCrawl(new Uri("http://a.com/3"));
//    //_unitUnderTest.Add(page1);
//    //_unitUnderTest.Add(page2);
//    //_unitUnderTest.Add(page3);
//    //Assert.AreEqual(3, _unitUnderTest.Count);
//    //Assert.AreEqual(page1.Uri, _unitUnderTest.GetNext().Uri);
//    //Assert.AreEqual(page2.Uri, _unitUnderTest.GetNext().Uri);
//    //Assert.AreEqual(page3.Uri, _unitUnderTest.GetNext().Uri);
//    //Assert.AreEqual(0, _unitUnderTest.Count);
//}
//[Test]
//public void Clear_RemovesAllPrevious()
//{
//    //_unitUnderTest = new FifoScheduler();
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://a.com/")));
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://b.com/")));
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://c.com/")));
//    //_unitUnderTest.Clear();
//    //Assert.AreEqual(0, _unitUnderTest.Count);
//}
//localhost.fiddler:1111/");
//aaa.jp");
//aaa2.jp");
//aaa3.jp");
//aaa4.jp");
/// <summary>See <see cref="IWebRequestCreate.Create"/>.</summary>
/// <summary>Utility method for creating a TestWebRequest and setting 
/// it to be the next WebRequest to use.</summary>
/// <param name="response">The response the TestWebRequest will return.</param>
/// <summary>Initializes a new instance of <see cref="TestWebRequest"/> 
/// with the response to return.</summary>
/// <summary>Returns the request contents as a string.</summary>
/// <summary>See <see cref="WebRequest.GetRequestStream"/>.</summary>
/// <summary>See <see cref="WebRequest.GetResponse"/>.</summary>
/// <summary>Initializes a new instance of <see cref="TestWebReponse"/> 
/// with the response stream to return.</summary>
/// <summary>See <see cref="WebResponse.GetResponseStream"/>.</summary>
//aaa.com/"));
//aaa.com/"))));
//aaa.com/"));
//aaa.com/"));
//aaa.com/"));
//aaa.com/"));
//a.com/");
//BY HAVING A CRAWL DELAY ABOVE ZERO WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//BY HAVING A CRAWL DELAY ABOVE ZERO WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//BY HAVING A THIS EQUAL TO TRUE WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//BY HAVING A CRAWL DELAY ABOVE ZERO WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//this is more then the max configured crawl delay (should be ignored)
//BY HAVING A THIS EQUAL TO TRUE WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//This is less than the crawl delay (Should Be used)
//BY HAVING A CRAWL DELAY ABOVE ZERO WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//a.com/");
//should be fired sync
//should be fired sync
//should be fired sync
//should be fired sync since its the last page to be crawled
//sleep since the events are async and may not complete before returning
//sleep since the events are async and may not complete before returning
//sleep since the events are async and may not complete before returning
//sleep since the events are async and may not complete
//sleep since the events are async and may not complete
//_unitUnderTest.PageLinksCrawlDisallowed += new EventHandler<PageLinksCrawlDisallowedArgs>(ThrowExceptionWhen_PageLinksCrawlDisallowed);
//sleep since the events are async and may not complete, set to 2 seconds since this test was mysteriously failing only when run with code coverage
//should be fired async
//should be fired async
//should be fired async
//should be fired SYNC since its the last page to be crawled
//The root uri and last page should be fired synchronously but all other async
//Last page is run synchronously
//All but 1 should have been processed async
//Arrange
//a.com/a"), new Uri("http://a.com/b") });
//only return true on the first call to avoid an infinite loop
//Act
//Assert
//sleep since the events are async and may not complete before returning
//1 for _rootUri, 2 for the returned links
//Assert.IsTrue(shouldCrawlDownloadPageContentDelegateCalled);
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
//no need to clear the scheduler since the crawl was never started
//a.com/]. This is configurable through the minAvailableMemoryRequiredInMb in app.conf or CrawlConfiguration.MinAvailableMemoryRequiredInMb.", result.ErrorException.Message);
//a.com/]. This is configurable through the maxMemoryUsageInMb in app.conf or CrawlConfiguration.MaxMemoryUsageInMb.", result.ErrorException.Message);
//a.com/someUri");
//a.com/someOtherUri");
//a.com/anotherOne");
// All links are found in each pages.
// The links should be checked only one time, so ShouldCrawlPage should be called only 4 times.
// Setup a root page that was redirected.
//www.domain.com/");
// Setup a root page that was redirected.
//www.domain.com/");
//a.com/"));
//a.com/", unitUnderTest.Uri.AbsoluteUri);
//a.com/")) 
//a.com/")) 
//FYI this test will not fail, it will just throw an uncatchable stackoverflowexception that will kill the process that runs this test
//a.com/"))
//FYI this test will not fail, it will just throw an uncatchable stackoverflowexception that will kill the process that runs this test
//a.com/")) 
//a.com/"))
//a.com/"))
//a.com/"))
//a.com/"))
//localhost.fiddler:1111/", new CrawledPage(new Uri("http://localhost.fiddler:1111/")).ToString());
//TODO FIx this test
//localhost.fiddler:1111/[200]", new PageRequester(new CrawlConfiguration{ UserAgentString = "aaa" }).MakeRequest(new Uri("http://localhost.fiddler:1111/")).ToString());
//a.com"))
//a.com/"));
//a.com/", unitUnderTest.Uri.AbsoluteUri);
//a.com/"));
//localhost.fiddler:1111/", new PageToCrawl(new Uri("http://localhost.fiddler:1111/")).ToString());
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: log4net.Config.XmlConfigurator()]
//Functionality tested in BloomFilterCrawledUrlRepositoryTest.cs
//" + Guid.NewGuid().ToString()));
//this does nothing to stop/cancel threads on this thread manager
//will not wait for first call
//will not wait for first call
//No threads should be running
//Add word to be run on a thread
//Should have 1 running thread
//Wait for the 1 running thread to finish
//Should have 0 threads running since the thread should have completed by now
//was 20 but had to bump it up or the TaskThreadManager would fail, its way slower
//Assert.IsTrue(count < MAXTHREADS);//Manual has completed more then the thread count by the time it gets here
//was 20 but had to bump it up or the TaskThreadManager would fail, its way slower
/// <summary>
/// Parser that uses AngleSharp https://github.com/AngleSharp/AngleSharp to parse page links
/// </summary>
//BloomFilter = null;
/// <summary>
/// Implementation that stores a numeric hash of the url instead of the url itself to use for lookups. This should save space when the crawled url list gets very long. 
/// </summary>
/// <inheritDoc />
/// <inheritDoc />
/// <inheritDoc />
/// <summary>
/// Determines what pages should be crawled, whether the raw content should be downloaded and if the links on a page should be crawled
/// </summary>
/// <summary>
/// Decides whether the page should be crawled
/// </summary>
/// <summary>
/// Decides whether the page's links should be crawled
/// </summary>
/// <summary>
/// Decides whether the page's content should be dowloaded
/// </summary>
/// <summary>
/// Decides whether the page should be re-crawled
/// </summary>
//TODO Do we want to ignore redirect chains (ie.. do not treat them as separate page crawls)?
/// <summary>
/// Rate limits or throttles on a per domain basis
/// </summary>
/// <summary>
/// If the domain of the param has been flagged for rate limiting, it will be rate limited according to the configured minimum crawl delay
/// </summary>
/// <summary>
/// Add a domain entry so that domain may be rate limited according the the param minumum crawl delay
/// </summary>
/// <summary>
/// Add/Update a domain entry so that domain may be rate limited according the the param minumum crawl delay
/// </summary>
/// <summary>
/// Remove a domain entry so that it will no longer be rate limited
/// </summary>
//IRateLimiter is always a little under so adding a little more time
//just calling this method adds the new domain
/// <summary>
/// Handles parsing html out of the raw html
/// </summary>
/// <summary>
/// Parses html to extract hyperlinks, converts each into an absolute url representation.
/// </summary>
/// <summary>
/// Parses html to extract hyperlinks, converts each into an absolute url
/// </summary>
//Use the uri of the page that actually responded to the request instead of crawledPage.Uri (Issue 82).
//Using HttpWebRequest.Address instead of HttpWebResonse.ResponseUri since this is the best practice and mentioned on http://msdn.microsoft.com/en-us/library/system.net.httpwebresponse.responseuri.aspx
//If html base tag exists use it instead of page uri for relative links
//"))
// ignored
// Remove the url fragment part of the url if needed.
// This is the part after the # and is often not useful.
//X-Robots-Tag http header
//Meta robots tag
/// <summary>
/// Make an http web request to the url and download its content
/// </summary>
/// <summary>
/// Make an http web request to the url and download its content based on the param func decision
/// </summary>
/// <summary>
/// Make an http web request to the url and download its content
/// </summary>
/// <summary>
/// Make an http web request to the url and download its content based on the param func decision
/// </summary>
//https://stackoverflow.com/questions/10547895/how-can-i-tell-when-httpclient-has-timed-out
/*");
//Added to handle redirects clearing auth headers which result in 401...
//https://stackoverflow.com/questions/13159589/how-to-handle-authenticatication-with-httpwebrequest-allowautoredirect
//{rootUri.Host}"), "Basic", new NetworkCredential(_config.LoginUser, _config.LoginPassword));
//{rootUri.Host}"), "Basic", new NetworkCredential(_config.LoginUser, _config.LoginPassword));
/// <summary>
/// Gets the number of seconds to delay between internal page crawls. Returns 0 by default.
/// </summary>
/// <summary>
/// Whether the spider is "allowed" to crawl the param link
/// </summary>
/// <summary>
/// Whether the user agent is "allowed" to crawl the root url
/// </summary>
/// <summary>
/// Instance of robot.txt object
/// </summary>
/// <summary>
/// Finds and builds the robots.txt file abstraction
/// </summary>
/// <summary>
/// Finds the robots.txt file using the rootUri. 
/// If rootUri is http://yahoo.com, it will look for robots at http://yahoo.com/robots.txt.
/// If rootUri is http://music.yahoo.com, it will look for robots at http://music.yahoo.com/robots.txt
/// </summary>
/// <param name="rootUri">The root domain</param>
/// <returns>Object representing the robots.txt file or returns null</returns>
/// <summary>
/// Handles managing the priority of what pages need to be crawled
/// </summary>
/// <summary>
/// Count of remaining items that are currently scheduled
/// </summary>
/// <summary>
/// Schedules the param to be crawled
/// </summary>
/// <summary>
/// Schedules the param to be crawled
/// </summary>
/// <summary>
/// Gets the next page to crawl
/// </summary>
/// <summary>
/// Clear all currently scheduled pages
/// </summary>
/// <summary>
/// Add the Url to the list of crawled Url without scheduling it to be crawled.
/// </summary>
/// <param name="uri"></param>
/// <summary>
/// Returns whether or not the specified Uri was already scheduled to be crawled or simply added to the
/// list of known Uris.
/// </summary>
//find expression from : http://stackoverflow.com/questions/3458217/how-to-use-regular-expression-to-match-the-charset-string-in-html
//TODO temporary hack, this needs to be a configurable value
//Russian, Bulgarian, Serbian cyrillic
// Nothing to do
/// <summary>
/// Polite web crawler
/// </summary>
/// <summary>
/// Event occur after robots txt is parsed synchronously
/// </summary>
/// <summary>
/// Extends the WebCrawler class and added politeness features like crawl delays and respecting robots.txt files. 
/// </summary>
/// <inheritdoc />
//Load robots.txt
//Use whichever value is greater between the actual crawl delay value found, the max allowed crawl delay value or the minimum crawl delay required for every domain
/// <inheritdoc />
//https://github.com/sjdirect/abot/issues/96 Handle scenario where the root is allowed but all the paths below are disallowed like "disallow: /*"
/*"
/// <summary>
/// Class which hold robot txt data after successful parsing
/// </summary>
/// <summary>
/// robots.txt object
/// </summary>
/// <summary>
/// Contructor to be used to create an object which will path arugments when robots txt is parsed
/// </summary>
/// <summary>
/// Event that is fired before a page is crawled.
/// </summary>
/// <summary>
/// Event that is fired when an individual page has been crawled.
/// </summary>
/// <summary>
/// Event that is fired when the ICrawlDecisionMaker.ShouldCrawl impl returned false. This means the page or its links were not crawled.
/// </summary>
/// <summary>
/// Event that is fired when the ICrawlDecisionMaker.ShouldCrawlLinks impl returned false. This means the page's links were not crawled.
/// </summary>
/// <summary>
/// Delegate to be called to determine whether a page should be crawled or not
/// </summary>
/// <summary>
/// Delegate to be called to determine whether the page's content should be downloaded
/// </summary>
/// <summary>
/// Delegate to be called to determine whether a page's links should be crawled or not
/// </summary>
/// <summary>
/// Delegate to be called to determine whether a certain link on a page should be scheduled to be crawled
/// </summary>
/// <summary>
/// Delegate to be called to determine whether a page should be recrawled
/// </summary>
/// <summary>
/// Delegate to be called to determine whether the 1st uri param is considered an internal uri to the second uri param
/// </summary>
/// <summary>
/// Begins a crawl using the uri param
/// </summary>
/// <summary>
/// Begins a crawl using the uri param, and can be cancelled using the CancellationToken
/// </summary>
/// <summary>
/// Dynamic object that can hold any value that needs to be available in the crawl context
/// </summary>
/// <summary>
/// Dynamic object that can hold any value that needs to be available in the crawl context
/// </summary>
/// <inheritdoc />
/// <inheritdoc />
/// <inheritdoc />
/// <inheritdoc />
/// <inheritdoc />
/// <inheritdoc />
/// <summary>
/// Creates a crawler instance with the default settings and implementations.
/// </summary>
/// <summary>
/// Creates a crawler instance with custom settings or implementation. Passing in null for all params is the equivalent of the empty constructor.
/// </summary>
/// <param name="threadManager">Distributes http requests over multiple threads</param>
/// <param name="scheduler">Decides what link should be crawled next</param>
/// <param name="pageRequester">Makes the raw http requests</param>
/// <param name="htmlParser">Parses a crawled page for it's hyperlinks</param>
/// <param name="crawlDecisionMaker">Decides whether or not to crawl a page or that page's links</param>
/// <param name="crawlConfiguration">Configurable crawl values</param>
/// <param name="memoryManager">Checks the memory usage of the host process</param>
/// <inheritdoc />
/// <inheritdoc />
/// <inheritdoc />
/// <inheritdoc />
/// <inheritdoc />
/// <inheritdoc />
/// <inheritdoc />
//Ok that _processingPageCount could be a race condition, will be caught on the next loop iteration
//Beware of issues here... https://github.com/sjdirect/abot/issues/203
// Validate the root uri in case of a redirection.
//to be sure nothing was scheduled since first call to clear()
//Set all events to null so no more events are fired
//TODO No unit tests cover these lines
// Look for the Retry-After header in the response.
// Try to convert to DateTime first, then in double.
// First validate that the link was not already visited or added to the list of pages to visit, so we don't
// make the same validation and fire the same events twice.
//Added due to a bug in the Uri class related to this (http://stackoverflow.com/questions/2814951/system-uriformatexception-invalid-uri-the-hostname-could-not-be-parsed)
// Add this link to the list of known Urls so validations are not duplicated in the future.
//TODO No unit tests cover these lines
// Use the time to wait provided by the server instead of the config, if any.
//TODO Cannot use RateLimiter since it currently cannot handle dynamic sleep times so using Thread.Sleep in the meantime
/// <summary>
/// Validate that the Root page was not redirected. If the root page is redirected, we assume that the root uri
/// should be changed to the uri where it was redirected.
/// </summary>
/// <summary>
/// Retrieve the URI where the specified crawled page was redirected.
/// </summary>
/// <remarks>
/// If HTTP auto redirections is disabled, this value is stored in the 'Location' header of the response.
/// If auto redirections is enabled, this value is stored in the response's ResponseUri property.
/// </remarks>
// For auto redirects, look for the response uri.
// For manual redirects, we need to look for the location header.
// Check if the location is absolute. If not, create an absolute uri.
/// <summary>
/// Max concurrent threads to use for http requests
/// </summary>
/// <summary>
/// Maximum number of pages to crawl. 
/// If zero, this setting has no effect
/// </summary>
/// <summary>
/// Maximum number of pages to crawl per domain
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// Maximum size of page. If the page size is above this value, it will not be downloaded or processed
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// The user agent string to use for http requests
/// </summary>
/// <summary>
/// The http protocol version number to use during http requests. Currently supporting values "1.1" and "1.0". 
/// </summary>
/// <summary>
/// Maximum seconds before the crawl times out and stops. 
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// Dictionary that stores additional key-value pairs that can be accessed through the crawl pipeline
/// </summary>
/// <summary>
/// Whether Uris should be crawled more than once. This is not common and should be false for most scenarios
/// </summary>
/// <summary>
/// Whether pages external to the root uri should be crawled
/// </summary>
/// <summary>
/// Whether pages external to the root uri should have their links crawled. NOTE: IsExternalPageCrawlEnabled must be true for this setting to have any effect
/// </summary>
/// <summary>
/// Whether or not url named anchors or hashbangs are considered part of the url. If false, they will be ignored. If true, they will be considered part of the url.
/// </summary>
/// <summary>
/// A comma separated string that has content types that should have their page content downloaded. For each page, the content type is checked to see if it contains any of the values defined here.
/// </summary>
/// <summary>
/// Gets or sets the maximum number of concurrent connections allowed by a System.Net.ServicePoint. The system default is 2. This means that only 2 concurrent http connections can be open to the same host.
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// Gets or sets the time-out value in seconds for the System.Net.HttpWebRequest.GetResponse() and System.Net.HttpWebRequest.GetRequestStream() methods.
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// Gets or sets the maximum number of redirects that the request follows.
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// Gets or sets a value that indicates whether the request should follow redirection
/// </summary>
/// <summary>
/// Gets or sets a value that indicates gzip and deflate will be automatically accepted and decompressed
/// </summary>
/// <summary>
/// Whether the cookies should be set and resent with every request
/// </summary>
/// <summary>
/// Whether or not to validate the server SSL certificate. If true, the default validation will be made.
/// If false, the certificate validation is bypassed. This setting is useful to crawl sites with an
/// invalid or expired SSL certificate.
/// </summary>
/// <summary>
/// Uses closest multiple of 16 to the value set. If there is not at least this much memory available before starting a crawl, throws InsufficientMemoryException.
/// If zero, this setting has no effect.
/// </summary>
/// <exception cref="http://msdn.microsoft.com/en-us/library/system.insufficientmemoryexception.aspx">InsufficientMemoryException</exception>
/// <summary>
/// The max amount of memory to allow the process to use. If this limit is exceeded the crawler will stop prematurely.
/// If zero, this setting has no effect.
/// </summary>
/// <summary>
/// The max amount of time before refreshing the value used to determine the amount of memory being used by the process that hosts the crawler instance.
/// This value has no effect if MaxMemoryUsageInMb is zero.
/// </summary>
/// <summary>
/// Maximum levels below root page to crawl. If value is 0, the homepage will be crawled but none of its links will be crawled. If the level is 1, the homepage and its links will be crawled but none of the links links will be crawled.
/// </summary>
/// <summary>
/// Maximum links to crawl per page.
/// If value is zero, this setting has no effect.
/// </summary>
/// <summary>
/// Gets or sets a value that indicates whether the crawler should parse the page's links even if a CrawlDecision (like CrawlDecisionMaker.ShouldCrawlPageLinks()) determines that those links will not be crawled.
/// </summary>
/// <summary>
/// The max number of retries for a url if a web exception is encountered. If the value is 0, no retries will be made
/// </summary>
/// <summary>
/// The minimum delay between a failed http request and the next retry
/// </summary>
/// <summary>
/// Whether the crawler should retrieve and respect the robots.txt file.
/// </summary>
/// <summary>
/// Whether the crawler should ignore links on pages that have a <meta name="robots" content="nofollow" /> tag
/// </summary>
/// <summary>
/// Whether the crawler should ignore links on pages that have an http X-Robots-Tag header of nofollow
/// </summary>
/// <summary>
/// Whether the crawler should ignore links that have a <a href="whatever" rel="nofollow" />...
/// </summary>
/// <summary>
/// If true, will ignore the robots.txt file if it disallows crawling the root uri.
/// </summary>
/// <summary>
/// The user agent string to use when checking robots.txt file for specific directives.  Some examples of other crawler's user agent values are "googlebot", "slurp" etc...
/// </summary>
/// <summary>
/// The number of milliseconds to wait in between http requests to the same domain.
/// </summary>
/// <summary>
/// The maximum numer of seconds to respect in the robots.txt "Crawl-delay: X" directive. 
/// IsRespectRobotsDotTextEnabled must be true for this value to be used.
/// If zero, will use whatever the robots.txt crawl delay requests no matter how high the value is.
/// </summary>
/// <summary>
/// Defines whether each request should be authorized via login
/// </summary>
/// <summary>
/// The user name to be used for authorization
/// </summary>
/// <summary>
/// The password to be used for authorization
/// </summary>
/// <summary>
/// Specifies whether to use default credentials.
/// </summary>
/// <summary>
/// The root of the crawl
/// </summary>
/// <summary>
/// The root of the crawl specified in the configuration. If the root URI was redirected to another URI,
/// it will be set in RootUri.
/// </summary>
/// <summary>
/// total number of pages that have been crawled
/// </summary>
/// <summary>
/// The datetime of the last unsuccessful http status (non 200) was requested
/// </summary>
/// <summary>
/// Threadsafe dictionary of domains and how many pages were crawled in that domain
/// </summary>
/// <summary>
/// Configuration values used to determine crawl settings
/// </summary>
/// <summary>
/// The scheduler that is being used
/// </summary>
/// <summary>
/// Random dynamic values
/// </summary>
/// <summary>
/// Whether a request to stop the crawl has happened. Will clear all scheduled pages but will allow any threads that are currently crawling to complete.
/// </summary>
/// <summary>
/// Whether a request to hard stop the crawl has happened. Will clear all scheduled pages and cancel any threads that are currently crawling.
/// </summary>
/// <summary>
/// The memory usage in mb at the start of the crawl
/// </summary>
/// <summary>
/// The memory usage in mb at the end of the crawl
/// </summary>
/// <summary>
/// Cancellation token used to hard stop the crawl. Will clear all scheduled pages and abort any threads that are currently crawling.
/// </summary>
/// <summary>
/// Whether to allow the crawl decision
/// </summary>
/// <summary>
/// The reason the crawl decision was NOT allowed
/// </summary>
/// <summary>
/// Whether the crawl should be stopped. Will clear all scheduled pages but will allow any threads that are currently crawling to complete.
/// </summary>
/// <summary>
/// Whether the crawl should be "hard stopped". Will clear all scheduled pages and cancel any threads that are currently crawling.
/// </summary>
/// <summary>
/// Lazy loaded AngleSharp IHtmlDocument (https://github.com/AngleSharp/AngleSharp) that can be used to retrieve/modify html elements on the crawled page.
/// </summary>
/// <summary>
/// Web request sent to the server.
/// </summary>
/// <summary>
/// Web response from the server.
/// </summary>
/// <summary>
/// The request exception that occurred during the request
/// </summary>
/// <summary>
/// The HttpClientHandler that was used to make the request to server
/// </summary>
/// <summary>
/// Links parsed from page. This value is set by the WebCrawler.SchedulePageLinks() method only If the "ShouldCrawlPageLinks" rules return true or if the IsForcedLinkParsingEnabled config value is set to true.
/// </summary>
/// <summary>
/// The content of page request
/// </summary>
/// <summary>
/// A datetime of when the http request started
/// </summary>
/// <summary>
/// A datetime of when the http request completed
/// </summary>
/// <summary>
/// A datetime of when the page content download started, this may be null if downloading the content was disallowed by the CrawlDecisionMaker or the inline delegate ShouldDownloadPageContent
/// </summary>
/// <summary>
/// A datetime of when the page content download completed, this may be null if downloading the content was disallowed by the CrawlDecisionMaker or the inline delegate ShouldDownloadPageContent
/// </summary>
/// <summary>
/// The page that this pagee was redirected to
/// </summary>
/// <summary>
/// Time it took from RequestStarted to RequestCompleted in milliseconds
/// </summary>
/// <summary>
/// The root of the crawl
/// </summary>
/// <summary>
/// The amount of time that elapsed before the crawl completed
/// </summary>
/// <summary>
/// Whether or not an error occurred during the crawl that caused it to end prematurely
/// </summary>
/// <summary>
/// The exception that caused the crawl to end prematurely
/// </summary>
/// <summary>
/// The context of the crawl
/// </summary>
/// <summary>
/// The raw data bytes taken from the web response
/// </summary>
/// <summary>
/// String representation of the charset/encoding
/// </summary>
/// <summary>
/// The encoding of the web response
/// </summary>
/// <summary>
/// The raw text taken from the web response
/// </summary>
//Needed for serialization
/// <summary>
/// The uri of the page
/// </summary>
/// <summary>
/// The parent uri of the page
/// </summary>
/// <summary>
/// Whether http requests had to be retried more than once. This could be due to throttling or politeness.
/// </summary>
/// <summary>
/// The time in seconds that the server sent to wait before retrying.
/// </summary>
/// <summary>
/// The number of times the http request was be retried.
/// </summary>
/// <summary>
/// The datetime that the last http request was made. Will be null unless retries are enabled.
/// </summary>
/// <summary>
/// Whether the page is the root uri of the crawl
/// </summary>
/// <summary>
/// Whether the page is internal to the root uri of the crawl
/// </summary>
/// <summary>
/// The depth from the root of the crawl. If this page is the homepage this value will be zero, if this page was found on the homepage this value will be 1 and so on.
/// </summary>
/// <summary>
/// Can store values of any type. Useful for adding custom values to the CrawledPage dynamically from event subscriber code
/// </summary>
/// <summary>
/// The uri that this page was redirected from. If null then it was not part of the redirect chain
/// </summary>
/// <summary>
/// The position in the redirect chain. The first redirect is position 1, the next one is 2 and so on.
/// </summary>
/// <summary>
/// Bloom filter.
/// </summary>
/// <typeparam name="T">Item type </typeparam>
/// <summary>
/// Creates a new Bloom filter, specifying an error rate of 1/capacity, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
/// A secondary hash function will be provided for you if your type T is either string or int. Otherwise an exception will be thrown. If you are not using these types please use the overload that supports custom hash functions.
/// </summary>
/// <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
/// <summary>
/// Creates a new Bloom filter, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
/// A secondary hash function will be provided for you if your type T is either string or int. Otherwise an exception will be thrown. If you are not using these types please use the overload that supports custom hash functions.
/// </summary>
/// <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
/// <param name="errorRate">The accepable false-positive rate (e.g., 0.01F = 1%)</param>
/// <summary>
/// Creates a new Bloom filter, specifying an error rate of 1/capacity, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
/// </summary>
/// <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
/// <param name="hashFunction">The function to hash the input values. Do not use GetHashCode(). If it is null, and T is string or int a hash function will be provided for you.</param>
/// <summary>
/// Creates a new Bloom filter, using the optimal size for the underlying data structure based on the desired capacity and error rate, as well as the optimal number of hash functions.
/// </summary>
/// <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
/// <param name="errorRate">The accepable false-positive rate (e.g., 0.01F = 1%)</param>
/// <param name="hashFunction">The function to hash the input values. Do not use GetHashCode(). If it is null, and T is string or int a hash function will be provided for you.</param>
/// <summary>
/// Creates a new Bloom filter.
/// </summary>
/// <param name="capacity">The anticipated number of items to be added to the filter. More than this number of items can be added, but the error rate will exceed what is expected.</param>
/// <param name="errorRate">The accepable false-positive rate (e.g., 0.01F = 1%)</param>
/// <param name="hashFunction">The function to hash the input values. Do not use GetHashCode(). If it is null, and T is string or int a hash function will be provided for you.</param>
/// <param name="m">The number of elements in the BitArray.</param>
/// <param name="k">The number of hash functions to use.</param>
// validate the params are in range
// from overflow in bestM calculation
// set the secondary hash function
/// <summary>
/// A function that can be used to hash input.
/// </summary>
/// <param name="input">The values to be hashed.</param>
/// <returns>The resulting hash code.</returns>
/// <summary>
/// The ratio of false to true bits in the filter. E.g., 1 true bit in a 10 bit filter means a truthiness of 0.1.
/// </summary>
/// <summary>
/// Adds a new item to the filter. It cannot be removed.
/// </summary>
/// <param name="item">The item.</param>
// start flipping bits for each hash of item
/// <summary>
/// Checks for the existance of the item in the filter for a given probability.
/// </summary>
/// <param name="item"> The item. </param>
/// <returns> The <see cref="bool"/>. </returns>
/// <summary>
/// The best k.
/// </summary>
/// <param name="capacity"> The capacity. </param>
/// <param name="errorRate"> The error rate. </param>
/// <returns> The <see cref="int"/>. </returns>
/// <summary>
/// The best m.
/// </summary>
/// <param name="capacity"> The capacity. </param>
/// <param name="errorRate"> The error rate. </param>
/// <returns> The <see cref="int"/>. </returns>
/// <summary>
/// The best error rate.
/// </summary>
/// <param name="capacity"> The capacity. </param>
/// <returns> The <see cref="float"/>. </returns>
// default
// http://www.cs.princeton.edu/courses/archive/spring02/cs493/lec7.pdf
/// <summary>
/// Hashes a 32-bit signed int using Thomas Wang's method v3.1 (http://www.concentric.net/~Ttwang/tech/inthash.htm).
/// Runtime is suggested to be 11 cycles. 
/// </summary>
/// <param name="input">The integer to hash.</param>
/// <returns>The hashed result.</returns>
// x = (x << 15) - x- 1, as (~x) + y is equivalent to y - x - 1 in two's complement representation
// x = (x + (x << 3)) + (x<< 11);
/// <summary>
/// Hashes a string using Bob Jenkin's "One At A Time" method from Dr. Dobbs (http://burtleburtle.net/bob/hash/doobs.html).
/// Runtime is suggested to be 9x+9, where x = input.Length. 
/// </summary>
/// <param name="input">The string to hash.</param>
/// <returns>The hashed result.</returns>
/// <summary>
/// The true bits.
/// </summary>
/// <returns> The <see cref="int"/>. </returns>
/// <summary>
/// Performs Dillinger and Manolios double hashing. 
/// </summary>
/// <param name="primaryHash"> The primary hash. </param>
/// <param name="secondaryHash"> The secondary hash. </param>
/// <param name="i"> The i. </param>
/// <returns> The <see cref="int"/>. </returns>
//do nothing
// https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskscheduler?redirectedfrom=MSDN&view=netframework-4.8
// Provides a task scheduler that ensures a maximum concurrency level while 
// running on top of the thread pool.
// Indicates whether the current thread is processing work items.
// The list of tasks to be executed 
// protected by lock(_tasks)
// The maximum concurrency level allowed by this scheduler. 
// Indicates whether the scheduler is currently processing work items. 
// Creates a new instance with the specified degree of parallelism. 
// Queues a task to the scheduler. 
// Add the task to the list of tasks to be processed.  If there aren't enough 
// delegates currently queued or running to process tasks, schedule another. 
// Inform the ThreadPool that there's work to be executed for this scheduler. 
// Note that the current thread is now processing work items.
// This is necessary to enable inlining of tasks into this thread.
// Process all available items in the queue.
// When there are no more items to be processed,
// note that we're done processing, and get out.
// Get the next item from the queue
// Execute the task we pulled out of the queue
// We're done processing items on the current thread
// Attempts to execute the specified task on the current thread. 
// If this thread isn't already processing a task, we don't support inlining
// If the task was previously queued, remove it from the queue
// Try to run the task. 
// Attempt to remove a previously scheduled task from the scheduler. 
// Gets the maximum concurrency level supported by this scheduler. 
// Gets an enumerable of the tasks currently scheduled on this scheduler. 
// The following is a portion of the output from a single run of the example:
//    'T' in task t1-4 on thread 3   'U' in task t1-4 on thread 3   'V' in task t1-4 on thread 3   
//    'W' in task t1-4 on thread 3   'X' in task t1-4 on thread 3   'Y' in task t1-4 on thread 3   
//    'Z' in task t1-4 on thread 3   '[' in task t1-4 on thread 3   '\' in task t1-4 on thread 3   
//    ']' in task t1-4 on thread 3   '^' in task t1-4 on thread 3   '_' in task t1-4 on thread 3   
//    '`' in task t1-4 on thread 3   'a' in task t1-4 on thread 3   'b' in task t1-4 on thread 3   
//    'c' in task t1-4 on thread 3   'd' in task t1-4 on thread 3   'e' in task t1-4 on thread 3   
//    'f' in task t1-4 on thread 3   'g' in task t1-4 on thread 3   'h' in task t1-4 on thread 3   
//    'i' in task t1-4 on thread 3   'j' in task t1-4 on thread 3   'k' in task t1-4 on thread 3   
//    'l' in task t1-4 on thread 3   'm' in task t1-4 on thread 3   'n' in task t1-4 on thread 3   
//    'o' in task t1-4 on thread 3   'p' in task t1-4 on thread 3   ']' in task t1-2 on thread 4   
//    '^' in task t1-2 on thread 4   '_' in task t1-2 on thread 4   '`' in task t1-2 on thread 4   
//    'a' in task t1-2 on thread 4   'b' in task t1-2 on thread 4   'c' in task t1-2 on thread 4   
//    'd' in task t1-2 on thread 4   'e' in task t1-2 on thread 4   'f' in task t1-2 on thread 4   
//    'g' in task t1-2 on thread 4   'h' in task t1-2 on thread 4   'i' in task t1-2 on thread 4   
//    'j' in task t1-2 on thread 4   'k' in task t1-2 on thread 4   'l' in task t1-2 on thread 4   
//    'm' in task t1-2 on thread 4   'n' in task t1-2 on thread 4   'o' in task t1-2 on thread 4   
//    'p' in task t1-2 on thread 4   'q' in task t1-2 on thread 4   'r' in task t1-2 on thread 4   
//    's' in task t1-2 on thread 4   't' in task t1-2 on thread 4   'u' in task t1-2 on thread 4   
//    'v' in task t1-2 on thread 4   'w' in task t1-2 on thread 4   'x' in task t1-2 on thread 4   
//    'y' in task t1-2 on thread 4   'z' in task t1-2 on thread 4   '{' in task t1-2 on thread 4   
//    '|' in task t1-2 on thread 4   '}' in task t1-2 on thread 4   '~' in task t1-2 on thread 4   
//    'q' in task t1-4 on thread 3   'r' in task t1-4 on thread 3   's' in task t1-4 on thread 3   
//    't' in task t1-4 on thread 3   'u' in task t1-4 on thread 3   'v' in task t1-4 on thread 3   
//    'w' in task t1-4 on thread 3   'x' in task t1-4 on thread 3   'y' in task t1-4 on thread 3   
//    'z' in task t1-4 on thread 3   '{' in task t1-4 on thread 3   '|' in task t1-4 on thread 3  
/// <summary>
/// A ThreadManager implementation that will use real Threads to handle concurrency.
/// </summary>
/// <summary>
/// Handles memory monitoring/usage
/// </summary>
/// <summary>
/// Whether the current process that is hosting this instance is allocated/using above the param value of memory in mb
/// </summary>
/// <summary>
/// Whether there is at least the param value of available memory in mb
/// </summary>
//http://www.pennedobjects.com/2010/10/better-rate-limiting-with-dot-net/
/// <summary>
/// Used to control the rate of some occurrence per unit of time.
/// </summary>
/// <remarks>
///     <para>
///     To control the rate of an action using a <see cref="RateLimiter"/>, 
///     code should simply call <see cref="WaitToProceed()"/> prior to 
///     performing the action. <see cref="WaitToProceed()"/> will block
///     the current thread until the action is allowed based on the rate 
///     limit.
///     </para>
///     <para>
///     This class is thread safe. A single <see cref="RateLimiter"/> instance 
///     may be used to control the rate of an occurrence across multiple 
///     threads.
///     </para>
/// </remarks>
// Semaphore used to count and limit the number of occurrences per
// unit time.
// Times (in millisecond ticks) at which the semaphore should be exited.
// Timer used to trigger exiting the semaphore.
// Whether this instance is disposed.
/// <summary>
/// Number of occurrences allowed per unit of time.
/// </summary>
/// <summary>
/// The length of the time unit, in milliseconds.
/// </summary>
/// <summary>
/// Initializes a <see cref="RateLimiter"/> with a rate of <paramref name="occurrences"/> 
/// per <paramref name="timeUnit"/>.
/// </summary>
/// <param name="occurrences">Number of occurrences allowed per unit of time.</param>
/// <param name="timeUnit">Length of the time unit.</param>
/// <exception cref="ArgumentOutOfRangeException">
/// If <paramref name="occurrences"/> or <paramref name="timeUnit"/> is negative.
/// </exception>
// Check the arguments.
// Create the semaphore, with the number of occurrences as the maximum count.
// Create a queue to hold the semaphore exit times.
// Create a timer to exit the semaphore. Use the time unit as the original
// interval length because that's the earliest we will need to exit the semaphore.
/// <summary>
/// Blocks the current thread until allowed to proceed or until the
/// specified timeout elapses.
/// </summary>
/// <param name="millisecondsTimeout">Number of milliseconds to wait, or -1 to wait indefinitely.</param>
/// <returns>true if the thread is allowed to proceed, or false if timed out</returns>
// Check the arguments.
// Block until we can enter the semaphore or until the timeout expires.
// If we entered the semaphore, compute the corresponding exit time 
// and add it to the queue.
/// <summary>
/// Blocks the current thread until allowed to proceed or until the
/// specified timeout elapses.
/// </summary>
/// <param name="timeout"></param>
/// <returns>true if the thread is allowed to proceed, or false if timed out</returns>
/// <summary>
/// Blocks the current thread indefinitely until allowed to proceed.
/// </summary>
/// <summary>
/// Releases unmanaged resources held by an instance of this class.
/// </summary>
/// <summary>
/// Releases unmanaged resources held by an instance of this class.
/// </summary>
/// <param name="isDisposing">Whether this object is being disposed.</param>
// The semaphore and timer both implement IDisposable and 
// therefore must be disposed.
// Callback for the exit timer that exits the semaphore based on exit times 
// in the queue and then sets the timer for the nextexit time.
// While there are exit times that are passed due still in the queue,
// exit the semaphore and dequeue the exit time.
// we are already holding the next item from the queue, do not peek again
// although this exit time may have already pass by this stmt.
// Throws an ObjectDisposedException if this object is disposed.
/// <summary>
/// A ThreadManager implementation that will use tpl Tasks to handle concurrency.
/// </summary>
/// <summary>
/// This was added to resolve the issue described here
/// http://stackoverflow.com/questions/7883052/a-tasks-exceptions-were-not-observed-either-by-waiting-on-the-task-or-accessi
/// </summary>
//If the task was cancelled then this exception is expected happen and we dont care
//If the task was not cancelled then this is an error
/// <summary>
/// Handles the multithreading implementation details
/// </summary>
/// <summary>
/// Max number of threads to use.
/// </summary>
/// <summary>
/// Will perform the action in parallel on a separate thread
/// </summary>
/// <summary>
/// Whether there are running threads
/// </summary>
/// <summary>
/// Abort all running threads
/// </summary>
/// <summary>
/// Max number of threads to use
/// </summary>
/// <summary>
/// Will perform the action in parallel on a separate thread
/// </summary>
/// <summary>
/// Runs the action on a separate thread
/// </summary>
//await DemoPageRequester();
//wvtesting2.com"));
//var result = await pageRequester.MakeRequestAsync(new Uri("http://google.com"));
//wvtesting2.com"));
//localhost.fiddler:1111/"), 25)
//localhost.fiddler:1111/"));
//localhost.fiddler:1111/"));
//adding delay since it increases the chance of issues with abot crawling more than MaxPagesToCrawl.
//localhost.fiddler:1111/"));
//localhost.fiddler:1111/"));
//localhost.fiddler:1111/"), cancellationTokenSource);
//localhost.fiddler:1111/"), cancellationTokenSource).Result);
// 1 second * 2 pages = 2 (or more) seconds
//localhost.fiddler:1111/");
//zalahat.com"));
//gamble1x2.com"));
//casinosms.pl"));
//centrodeapostas.com"));
//localhost.fiddler:1111/", HttpStatusCode = 200},
//localhost.fiddler:1111/PageGenerator/Generate?Status200Count=5&Status403Count=1&Status404Count=2&Status500Count=3&Status503Count=4&Page=1", HttpStatusCode = 200},
//localhost.fiddler:1111/PageGenerator/Generate?Status200Count=5&Status403Count=1&Status404Count=2&Status500Count=3&Status503Count=4&Page=3", HttpStatusCode = 200},
//localhost.fiddler:1111/PageGenerator/Generate?Status200Count=5&Status403Count=1&Status404Count=2&Status500Count=3&Status503Count=4&Page=2", HttpStatusCode = 200},
//localhost.fiddler:1111/PageGenerator/Generate?Status200Count=5&Status403Count=1&Status404Count=2&Status500Count=3&Status503Count=4&Page=4", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page1", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page3", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page2", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page4", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page5", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status403/Page1", HttpStatusCode = 403},
//localhost.fiddler:1111/HttpResponse/Status404/Page2", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status404/Page1", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status500/Page1", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status500/Page3", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status500/Page2", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status503/Page2", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page1", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status200/Page12", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page11", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status503/Page3", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page4", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status200/Page13", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page14", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page15", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status403/Page3", HttpStatusCode = 403},
//localhost.fiddler:1111/HttpResponse/Status404/Page5", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status404/Page6", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status500/Page7", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status500/Page8", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status200/Page6", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status503/Page9", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status500/Page9", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status200/Page7", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status503/Page12", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page10", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page11", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status200/Page8", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page9", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page10", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status403/Page2", HttpStatusCode = 403},
//localhost.fiddler:1111/HttpResponse/Status404/Page3", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status404/Page4", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status500/Page4", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status500/Page5", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status200/Page16", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status500/Page6", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status503/Page6", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page5", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status200/Page17", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page18", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status200/Page19", HttpStatusCode = 200},
//yahoo.com/", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status503/Page8", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status200/Page20", HttpStatusCode = 200},
//localhost.fiddler:1111/HttpResponse/Status503/Page7", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status403/Page4", HttpStatusCode = 403},
//localhost.fiddler:1111/HttpResponse/Status404/Page7", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status500/Page11", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status500/Page10", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status404/Page8", HttpStatusCode = 404},
//localhost.fiddler:1111/HttpResponse/Status503/Page13", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status500/Page12", HttpStatusCode = 500},
//localhost.fiddler:1111/HttpResponse/Status503/Page14", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page15", HttpStatusCode = 503},
//localhost.fiddler:1111/HttpResponse/Status503/Page16", HttpStatusCode = 503},
//zoogle.com/", HttpStatusCode = 200}
//a.com/")), null);
//a.com/"))
///C:/Users/")), _crawlContext);
//user@yourdomainname.com")), _crawlContext);
//a.com/b")) { IsInternal = true }, _crawlContext);
//a.com/b")) { IsInternal = true }, _crawlContext);
//a.com/")) { IsInternal = true }, crawlContext);
//a.com/"))
//a.com/"))
//a.com/"))
//a.com/"))
//a.com/");
//a.com/");
//a.com/"))
//a.com/"))
//a.com/"))
//Doesntmatter.com")),
//a.com/"))
//Doesntmatter.com")),
//a.com/"))
//Doesntmatter.com")),
//a.com/"))
//a.com/"))
//a.com/"))
//b.com/a.html"))
//a.com/ "),
//b.com/a.html"))
//a.com/ "),
//b.com/a.html"))
//a.com/ "),
//b.com/a.html"))
//a.com/ "),
//b.com/a.html"))
//a.com/ "),
//a.com/a.html")), null);
//b.com/a.html"))
//a.com/ ")
//Assert.AreEqual("Page size of [1298] bytes is above the max allowable of [5] bytes", result.Reason); //This fluctuates depending on the .net version runtime installed
//a.com/")), null);
//localhost.fiddler:1111/");
//a.com");
//b.com");
//Add first time
// create input collection
// instantiate filter and populate it with the inputs
//If all were unique then they should all return "true" for Contains()
//If all were added successfully then they should all return "true" for Contains()
//" + Guid.NewGuid().ToString()));
//a.com/");
//a.com/");
//a.com/");
//b.com/");
//c.com/");
//d.com/");
//a.com/");
//b.com/");
//c.com/");
//d.com/");
//a.com"), 0);
//a.com"), -1);
//a.com/");
//a.com/a.html");
//a.com/b.html");
//a.com/");
//a.com/a.html");
//a.com/b.html");
//a.com");
//This should be ignored
//a.com"), 0);
//a.com"), -1);
//a.com/");
//a.com/a.html");
//a.com/b.html");
//a.com/");
//a.com/a.html");
//a.com/b.html");
//a.com");
//This should override the previous
//Arrange
//a.com");
//Act
//Assert
//a.com/");
//aaa.com/\" ></a><a href=\"/aaa/a.html\" /></a>";
//aaa.com/", result.ElementAt(0).HrefValue.AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(1).HrefValue.AbsoluteUri);
//bbb.com\" /><area href=\"bbb/b.html\" />";
//bbb.com/", result.ElementAt(0).HrefValue.AbsoluteUri);
//a.com/bbb/b.html", result.ElementAt(1).HrefValue.AbsoluteUri);
//aaa.com/\" ></A><A HREF=\"/aaa/a.html\" /></A>";
//aaa.com/", result.ElementAt(0).HrefValue.AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(1).HrefValue.AbsoluteUri);
//bbb.com\" /><AREA HREF=\"bbb/b.html\" />";
//bbb.com/", result.ElementAt(0).HrefValue.AbsoluteUri);
//a.com/bbb/b.html", result.ElementAt(1).HrefValue.AbsoluteUri);
//user@yourdomainname.com/\" /><a href=\"file:///C:/Users/\" />";
//user@yourdomainname.com/", result.ElementAt(3).HrefValue.AbsoluteUri);
///C:/Users/", result.ElementAt(4).HrefValue.AbsoluteUri);
//////\" />";
//a1.com' />
//a2.com' />
//b1.com' />
//b2.com' />
//a1.com' />
//a2.com' />
//b1.com' />
//b2.com' />
//a1.com' />
//a2.com' />
//b1.com' />
//b2.com' />
//a.com/aaa/a.html", result.ElementAt(0).HrefValue.AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(0).HrefValue.AbsoluteUri);
//a.com/aaa/a.html/", result.ElementAt(1).HrefValue.AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(0).HrefValue.AbsoluteUri);
//a.com/aaa/a.html#top", result.ElementAt(1).HrefValue.AbsoluteUri);
//a.com/aaa/a.html#bottom", result.ElementAt(2).HrefValue.AbsoluteUri);
//a.com/aaa/a.html/#someaction/someid", result.ElementAt(3).HrefValue.AbsoluteUri);
//bbb.com\"><a href=\"http://aaa.com/\" ></a><a href=\"/aaa/a.html\" /></a>";
//aaa.com/", result.ElementAt(0).HrefValue.AbsoluteUri);
//bbb.com/aaa/a.html", result.ElementAt(1).HrefValue.AbsoluteUri);
//aaa.com/\" ></a><a href=\"/aaa/a.html\" /></a>";
//aaa.com/", result.ElementAt(0).HrefValue.AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(1).HrefValue.AbsoluteUri);
//http:\"><a href=\"http://aaa.com/\" ></a><a href=\"/aaa/a.html\" /></a>";
//aaa.com/", result.ElementAt(0).HrefValue.AbsoluteUri);
//a.com/aaa/a.html", result.ElementAt(1).HrefValue.AbsoluteUri);
//aaa.com/");//http
//aaa.com\"><a href=\"/aaa/a.html\" ></a>";
//aaa.com/aaa/a.html", result.ElementAt(0).HrefValue.AbsoluteUri);
//aaa.com/");//https
//aaa.com\"><a href=\"/aaa/a.html\" ></a>";
//aaa.com/aaa/a.html", result.ElementAt(0).HrefValue.AbsoluteUri);
//This sets the Address properties backing field which does not have a public set method
//ValueHelper.SetFieldValue(_crawledPage.HttpWebRequest, "_Uri", new Uri("http://zzz.com/"));
//zzz.com/aaa/a.html", result.ElementAt(0).HrefValue.AbsoluteUri);
//zzz.com/bbb/b.html", result.ElementAt(1).HrefValue.AbsoluteUri);
//a.com/search?rls=en&amp;q=stack+overflow\" ></a>";
//This sets the Address properties backing field 
//a.com/search?rls=en&q=stack+overflow", result.ElementAt(0).HrefValue.AbsoluteUri);
//x.com/xxx/x.html", result.ElementAt(0).HrefValue.AbsoluteUri);
//x.com/yyy/y.html", result.ElementAt(1).HrefValue.AbsoluteUri);
//https://github.com/sjdirect/abot/issues/15
//www.gamespot.com/pc/rpg/numen/index.html?om_act=convert&om_clk=tabs&tag=tabs;summary\" ></a>";
//www.gamespot.com/pc/rpg/numen/index.html?om_act=convert&om_clk=tabs&tag=tabs;summary", result.ElementAt(0).HrefValue.AbsoluteUri);
//a.com/page1\" /></head><body><a href=\"http://a.com/page2\"></a></body></html>";
//a.com/page2", result.ElementAt(0).HrefValue.AbsoluteUri);
//a.com/page1", result.ElementAt(1).HrefValue.AbsoluteUri);
//aaa.com/");
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
//Arrange
//google.com/");
//Act
//Assert
//a.com"));
//b.com"));
//abc/"));
//abcd/"));
//should be null
//This method is tested by most of the other methods in this class
//google.com")){HttpResponseMessage = new HttpResponseMessage(HttpStatusCode.OK)});
//askjfdhakshdfkashdfkashdfkjah.com")) { HttpResponseMessage = new HttpResponseMessage(HttpStatusCode.NotFound) });
//a.com/");
//a.com/robots.txt");
//aaa.a.com/");
//aaa.a.com/robots.txt");
//a.com/a/b/b.html");
//a.com/robots.txt");
//a.com");
//a.com/robots.txt");
//a.com/robots.txt");
//a.com/robots.txt");
//a.com/");
//a.com/robots.txt");
//www.spidertestsite1.com/");
//a.com/sitemap.xml
//b.com/sitemap.xml
//User agent "userAgentCrawlDelayIs1" doesn't specify anything to disallow so should allow all ("*" is not inherited)
//Allows all since "userAgentCrawlDelayIs1" does not specify allow or disallow
//Should use "*" user agent by default
//Disallows all for "badagent"
//Should use "*" user agent by default
//User agent "userAgentCrawlDelayIs1" doesn't specify anything to disallow so should allow all ("*" is not inherited)
//Allows all since "userAgentCrawlDelayIs1" does not specify allow or disallow
//yahoo.com/");
//User agent "userAgentCrawlDelayIs1" doesn't specify anything to disallow so should allow all ("*" is not inherited)
//Allows all since "userAgentCrawlDelayIs1" does not specify allow or disallow
//IF this test starts failing that is a good thing, it means the robots impl now supports querystrings
//a.com/") };
//a.com/") }, new PageToCrawl { Uri = new Uri("http://b.com/") } };
//[TestMethod]
//public void Add_IEnumerableParam_IsUriRecrawlingIsFalse_DuplicateNotAdded()
//{
//    //_unitUnderTest = new FifoScheduler(false);//this is the default
//    //_unitUnderTest.Add(new List<PageToCrawl> { new PageToCrawl(new Uri("http://a.com/")), new PageToCrawl(new Uri("http://a.com/")), new PageToCrawl(new Uri("http://a.com/")) });
//    //Assert.AreEqual(1, _unitUnderTest.Count);
//}
//[TestMethod]
//public void Add_IsUriRecrawlingIsTrue_DuplicateAdded()
//{
//    //_unitUnderTest = new FifoScheduler(true);
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://a.com/")));
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://a.com/")));
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://a.com/")));
//    //Assert.AreEqual(3, _unitUnderTest.Count);
//}
//[TestMethod]
//public void Add_IEnumerableParam_IsUriRecrawlingIsTrue_DuplicateAdded()
//{
//    //_unitUnderTest = new FifoScheduler(true);//this is the default
//    //_unitUnderTest.Add(new List<PageToCrawl> { new PageToCrawl(new Uri("http://a.com/")), new PageToCrawl(new Uri("http://a.com/")), new PageToCrawl(new Uri("http://a.com/")) });
//    //Assert.AreEqual(3, _unitUnderTest.Count);
//}
//[TestMethod]
//[ExpectedException(typeof(ArgumentNullException))]
//public void Add_NullPage()
//{
//    //PageToCrawl nullPage = null;
//    //_unitUnderTest.Add(nullPage);
//}
//[TestMethod]
//[ExpectedException(typeof(ArgumentNullException))]
//public void Add_IEnumerableParam_NullPages()
//{
//    //IEnumerable<PageToCrawl> nullPages = null;
//    //_unitUnderTest.Add(nullPages);
//}
//[TestMethod]
//public void GetNext()
//{
//    //Assert.AreEqual(0, _unitUnderTest.Count);
//    //PageToCrawl page1 = new PageToCrawl(new Uri("http://a.com/1"));
//    //PageToCrawl page2 = new PageToCrawl(new Uri("http://a.com/2"));
//    //PageToCrawl page3 = new PageToCrawl(new Uri("http://a.com/3"));
//    //_unitUnderTest.Add(page1);
//    //_unitUnderTest.Add(page2);
//    //_unitUnderTest.Add(page3);
//    //Assert.AreEqual(3, _unitUnderTest.Count);
//    //Assert.AreEqual(page1.Uri, _unitUnderTest.GetNext().Uri);
//    //Assert.AreEqual(page2.Uri, _unitUnderTest.GetNext().Uri);
//    //Assert.AreEqual(page3.Uri, _unitUnderTest.GetNext().Uri);
//    //Assert.AreEqual(0, _unitUnderTest.Count);
//}
//[TestMethod]
//public void Clear_RemovesAllPrevious()
//{
//    //_unitUnderTest = new FifoScheduler();
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://a.com/")));
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://b.com/")));
//    //_unitUnderTest.Add(new PageToCrawl(new Uri("http://c.com/")));
//    //_unitUnderTest.Clear();
//    //Assert.AreEqual(0, _unitUnderTest.Count);
//}
//NOTICE UTF-16!!!
//This should be random japanese text since we are using unicode
// Different between local and build server... Expected:<System.Text.UTF8Encoding+UTF8EncodingSealed> (local machine). Actual:<System.Text.DBCSCodePageEncoding> (Build server)
//Assert.AreEqual(expectedEncodingString, result.Encoding.ToString());
//Assert.AreEqual(Encoding.UTF8, encoding ?? Encoding.UTF8);
//aaa.com/"));
//aaa.com/")));
//aaa.com/"));
//aaa.com/"));
//aaa.com/"));
//aaa.com/"));
//a.com/");
//BY HAVING A CRAWL DELAY ABOVE ZERO WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//BY HAVING A CRAWL DELAY ABOVE ZERO WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//BY HAVING A THIS EQUAL TO TRUE WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//BY HAVING A CRAWL DELAY ABOVE ZERO WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//this is more then the max configured crawl delay (should be ignored)
//BY HAVING A THIS EQUAL TO TRUE WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//This is less than the crawl delay (Should Be used)
//BY HAVING A CRAWL DELAY ABOVE ZERO WE EXPECT THE IDOMAINRATELIMITER TO BE CALLED
//a.com/");
//should be fired sync
//should be fired sync
//should be fired sync
//should be fired sync since its the last page to be crawled
//Arrange
//a.com/a") },
//a.com/b") }
//only return true on the first call to avoid an infinite loop
//Act
//Assert
//sleep since the events are async and may not complete before returning
//1 for _rootUri, 2 for the returned links
//Assert.IsTrue(shouldCrawlDownloadPageContentDelegateCalled);
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
//no need to clear the scheduler since the crawl was never started
//a.com/]. This is configurable through the minAvailableMemoryRequiredInMb in app.conf or CrawlConfiguration.MinAvailableMemoryRequiredInMb.", result.ErrorException.Message);
//a.com/]. This is configurable through the maxMemoryUsageInMb in app.conf or CrawlConfiguration.MaxMemoryUsageInMb.", result.ErrorException.Message);
//a.com/someUri");
//a.com/someOtherUri");
//a.com/anotherOne");
// All links are found in each pages.
// The links should be checked only one time, so ShouldCrawlPage should be called only 4 times.
//a.com")};
//a.com") };
// Setup a root page that was redirected.
//www.domain.com/");
//a.com/"));
//a.com/", unitUnderTest.Uri.AbsoluteUri);
//a.com/")) 
//a.com/")) 
//FYI this test will not fail, it will just throw an uncatchable stackoverflowexception that will kill the process that runs this test
//a.com/"))
//FYI this test will not fail, it will just throw an uncatchable stackoverflowexception that will kill the process that runs this test
//a.com/"))
//a.com/"))
//a.com/"))
//a.com/"))
//a.com/"))
//localhost.fiddler:1111/", new CrawledPage(new Uri("http://localhost.fiddler:1111/")).ToString());
//google.com/"));
//google.com/[200]", result.ToString());
//a.com"))
//var testFile = Path.GetFullPath(Path.Combine(TestContext.CurrentContext.TestDirectory, fileName));
//a.com/"));
//a.com/", unitUnderTest.Uri.AbsoluteUri);
//a.com/"));
//localhost.fiddler:1111/", new PageToCrawl(new Uri("http://localhost.fiddler:1111/")).ToString());
//Functionality tested in BloomFilterCrawledUrlRepositoryTest.cs
//this does nothing to stop/cancel threads on this thread manager
//will not wait for first call
//cancellationTokenSource.Cancel();
//No threads should be running
//Add word to be run on a thread
//Should have 1 running thread
//Wait for the 1 running thread to finish
//Should have 0 threads running since the thread should have completed by now
//was 20 but had to bump it up or the TaskThreadManager would fail, its way slower
//Assert.IsTrue(count < MAXTHREADS);//Manual has completed more then the thread count by the time it gets here
//was 20 but had to bump it up or the TaskThreadManager would fail, its way slower
