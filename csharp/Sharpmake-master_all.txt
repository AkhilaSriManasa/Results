// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
# Introduction

Sharpmake is a solution to generate mainly C++ and C# projects, file extensions like .vcxproj, .csproj, .sln, .bff (FastBuild).  It is using C# as a scripting language with the implementation in C# as well, meaning complete support in Visual Studio for debugging and Intellisense.  Sharpmake is easily usable by both C++ and C# programmers and is generating project files fast.  Using a complete programming language like C# is offering a lot of ways to scale better with big code bases.  Sharpmake has built-in support for FastBuild .bff files, easing using both FastBuild projects and normal VC++ projects.

# Fragments

One core and cool concept of Sharpmake are the fragments.  Fragments are defined with an enum like this one:

```csharp
[Fragment, Flags]
enum Optimization
{
    Debug = 0x1,
    Release = 0x2,
    Retail = 0x4
}
```

Notice that the enum is using different bits for every value.

# Targets

Fragments are used to define targets.  Targets are classes with a certain number of properties of different fragment types:

```csharp
class Target : Sharpmake.ITarget
{
    public BuildSystem BuildSystem;
    public Optimization Optimization;
    public DevEnv DevEnv;
    ...
}
```

The idea behind fragments is that they can multiply your number of targets.  You can combine the bits of fragment values to describre multiple targets easily:

```csharp
new Target(
    BuildSystem.MSBuild | BuildSystem.FastBuild, 
    Optimization.Debug | Optimization.Release | Optimization.Retail, 
    ...)
```

That target instance will represent a target list, something useful when calling AddTargets.

# Project

A project in Sharpmake is a class with a specific attribute:

```csharp
[Generate]
class MyProject : Project
{
    ...
}
```

Sharpmake supports 3 types of projects: Generate, Compile and Export.  Export is used for libraries already compiled while Generate is when the project file (.vcxproj, .csproj, etc.) will be generated.  Compile attribute is for marginal cases where a project generated outside of Sharpmake is reused in a solution (.sln) generated by Sharpmake.

That project class will be instantiated a single time.  In the constructor, you add all the targets for the project.  

```csharp
[Generate]
class MyProject : Project
{    
    public MyProject() : base(typeof(Target))
    {
        AddTargets(new Target(
            BuildSystem.MSBuild | BuildSystem.FastBuild,
            Optimization.Debug | Optimization.Release | Optimization.Retail,
            ...);
    }
}

```

If you ever wonder why these are not deduced from dependants, it is made that way to generate all projects in parallel, and result in much faster execution.  This is typically not an issue as you can add the targets in a base class.

# Configure

In the project, you have one or more Configure functions.  They take a Target, which is the input, and the Configuration, which is the output.  The function is executed for every Target added to that project.

```csharp
class MyProject : Project
{
    ...
    [Configure]
    public void Configure(Configuration conf, Target target)
    {
        if (target.Optimization == Optimation.Debug)
            conf.Defines.Add("UBI_DEBUG");
        ...
    }
```

Since the function is executed for every target, you can use simple code to choose how to configure like if/else, switch/case, functions, whatever you prefer.  This is normal C# code.

Since projects are classes, you can define a class hierarchy to represent your projects.  You can use virtual functions and overrides, can use static public functions in other classes, etc.

By default, a Configure function is for all targets, but you can limit a Configure function to a subset with specific fragment values:

```csharp
[Configure(Platform.win32 | Platform.win64)]
void ConfigureWindows(Target target, Configuration conf)
{
    ...
}
```

# Dependencies

Adding dependencies between projects is done in Configure functions.

```csharp
    [Configure]
    public void Configure(Configuration conf, Target target)
    {
        conf.AddPublicDependency<System>(target);
        conf.AddPublicDependency<Engine>(target);
        conf.AddPublicDependency<Havok>(target.ToHavokTarget());
    }
```

You call AddPublicDependency or AddPrivateDependency with the project type to depend on.  You also pass the target.  The target is typically the same, but it's possible for different projects to use different Target types.  

If the case, you call code to make the correspondence.  It can be a property, a function, whatever you prefer.

Sharpmake was designed initially for C++ needs, so it provides mechanisms to define include paths, library paths, preprocessor definitions for a project a single time.  

```csharp
    [Configure]
    public void Configure(Configuration conf, Target target)
    {
        conf.IncludePaths.Add(...);  // also for dependants
        conf.IncludePrivatePaths.Add(...);
        conf.ExportDefines.Add(...);  // for dependants
        conf.Defines.Add(...);
        ...
    }
```

There's a clear distinction in Configuration class between include paths and preprocessor definitions to compile the current project and the ones that are also necessary in dependent projects, with direct or indirect dependencies.

With distinction between public and private dependencies, it's also possible to limit if dependencies are propagated to dependants or not.


# Smart File Granularity

A project in Sharpmake doesn't mean necessarily a single project file on disk.  Files in Sharpmake are like any output and are handled automatically.

For example, if in a Configure function you have this line:

```csharp
    [Configure]
    public void Configure(Configuration conf, Target target)
    {
        conf.ProjectFileName = "[project.Name].[target.DevEnv]";
```
        

Here we can see that strings in Sharpmake supports to refer to some objects properties through reflection.  It's actually useful to use that rather than normal C# features since that way they are evaluated much later.

If this line is changed into this:

```csharp
    [Configure]
    public void Configure(Configuration conf, Target target)
    {
         conf.ProjectFileName = "[project.Name].[target.Platform].[target.DevEnv]";
```

Then Sharpmake will generate a file for each platform.  There is nothing more to do.


# Solutions

The configuration and generation of .sln files is done in a similar fashion to .vcxproj and .csproj files.  Instead of Project class, the Solution class is used:

```csharp
[Generate]
class MySolution : Solution
{    
    public MySolution() : base(typeof(Target))
    {
        AddTargets(new Target(
            BuildSystem.MSBuild | BuildSystem.FastBuild,
            Optimization.Debug | Optimization.Release | Optimization.Retail,
            ...);
    }
    [Configure]
    public void Configure(Configuration conf, Target target)
    {
        conf.AddProject<MyProject>(target);
    }
}
```

# Main

The entry point is the Main, a function called once and found in the main .sharpmake.cs file passed to Sharpmake.exe:

```csharp
static class Main
{
    [Sharpmake.Main]
    public static void SharpmakeMain(Sharpmake.Arguments arguments)
    {
        arguments.Generate<MySolution>();
    }
}
```

Sharpmake arguments can then be used to generate different things.  Sharpmake has built-in support for easy custom command line arguments as well:

```csharp
class MyArguments
{
    public bool SomeOption = false;

    [CommandLine.Option("someoption", @"Some option: ex: /someoption(<true|false>)")]
    public void CommandLineGenerateMapFile(bool value)
    {
        SomeOption = value;
    }
}

static class Main
{
    public static MyArguments Arguments = new MyArguments();

    [Sharpmake.Main]
    public static void SharpmakeMain(Sharpmake.Arguments arguments)
    {
        CommandLine.ExecuteOnObject(Arguments);
        ...
        if (Arguments.SomeOption) ...
    }
}
```
# Includes

From the main file and from any included file, you can include other Sharpmake files:

```csharp
[module: Sharpmake.Include("otherfile.sharpmake.cs")]
```

In any file it's also possible to refer to any dll:

```csharp
[module: Sharpmake.Reference("Sharpmake.ShellTools.dll")]
```

It concludes that quick overview of Sharpmake.

# Apache License

Version 2.0, January 2004

http://www.apache.org/licenses/

## TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

### 1. Definitions.

"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.

"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.

"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.

"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.

"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.

"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.

"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).

"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.

"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."

"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.

### 2. Grant of Copyright License.
Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.

### 3. Grant of Patent License.
Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.

### 4. Redistribution.
You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:

You must give any other recipients of the Work or Derivative Works a copy of this License; and
You must cause any modified files to carry prominent notices stating that You changed the files; and
You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and
If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. 

You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.

### 5. Submission of Contributions.
Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.

### 6. Trademarks.
This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.

### 7. Disclaimer of Warranty.
Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.

### 8. Limitation of Liability.
In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.

### 9. Accepting Warranty or Additional Liability.
While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
# Sharpmake

[![Build status](https://ci.appveyor.com/api/projects/status/5y9eug3x9j078x6i?svg=true)](https://ci.appveyor.com/project/belkiss/sharpmake-36817)

## Introduction
Sharpmake is a generator for Visual Studio projects and solutions. It is
similar to CMake and Premake, but it is designed for **speed** and
**scale**. Sharpmake has been used at Ubisoft to generate several thousands
of *vcxproj*, *csproj* and *sln* files in a matter of seconds, and each of
these projects can support a large number of Visual Studio configurations as
well.

That makes Sharpmake ideal for the development of multi-platform games, where
the number of platforms, the different levels of optimization, the multiple
rendering APIs on PC and the level editor can quickly multiply the number of
configurations a given code base must support. Sharpmake generates all those
configurations at once, very quickly. Thus, it becomes trivial to generate
and regenerate the entire project.

Sharpmake uses C# for scripting, hence the name. That means that you can edit
your scripts in Visual Studio (or Visual Studio Code) and have a complete
IntelliSense programming experience.

Sharpmake can also generate makefiles and Xcode projects, but it is currently
only available for Windows. With .NET Core and .NET Standard though, it is
our hope that it will eventually cross the platform barrier. In the
meanwhile, you may have luck using it with Mono.

Sharpmake was developed internally at Ubisoft for Assassin's Creed 3 in 2011.
After experimenting with the other existing tools, it became clear that none
of these solutions were performant enough to generate the number of
configurations needed (at least not in a trivial way) and that a custom
generator was needed.


## Documentation
The best place for the Sharpmake documentation is the
[wiki on GitHub](https://github.com/ubisoftinc/Sharpmake/wiki). The Sharpmake
source code also comes with samples that you can study.


## Building Sharpmake
Building Sharpmake is quite straightforward. Clone the repo on GitHub, open the
solution in Visual Studio and build the solution in *Release*. The binaries
will be found in the *Sharpmake.Application/bin/Release*. You can run the
*deploy_binaries.py* script to automatically fetch the binaries and copy them
in a *Binaries* folder.


## More Platforms
Sharpmake originally had support for game consoles, but Ubisoft pulled it out
because those could not be open sourced. Sharpmake now has an extension system
that allows support for these consoles to be added back at runtime.

If you need support for these platforms and are an authorized developer, you
can contact the SDK provider to get platform extension for Sharpmake.


## Contributing

### Tests
We will only accept merge requests that pass every tests. The unit tests are
written with NUnit and the regression tests are ran by comparing the samples'
output with a reference output. You can run the *regression_tests.py* script
after having built the solution in Visual Studio to run the regression tests.

Because the regression tests just do a direct comparison with the output, it is
possible to get a false negative after having done a good change. In that case,
please update the tests so they match the output after your change. You can run
the *UpdateSamplesOutput.bat* and *UpdateSharpmakeProjects.bat* batch files to
automatically overwrite the reference output files.

Naturally, we also recommend that you put your own tests after fixing a bug or
adding a feature to help us avoid regressions.

Functional tests are generating test projects and building them to test
functionality

used toolset for functional tests:

tools\FastBuild\FBuild.exe - v0.97. http://www.fastbuild.org



### Additional Platforms
If you want to add support for an additional platform, please make sure that
the platform is open and that you are not breaking your NDA. Ubisoft has not
published platform support for most video game consoles for that exact reason.
We will not accept merge requests for new platforms that are not completely
open for development.
# Sharpmake Guidelines

We get often asked what are the suggested guidelines to use Sharpmake.  Here a few guidelines that we suggest to follow.

## Understand the two possible approach with targets

There are 2 typical ways of defining targets in Sharpmake.  The first one is use different target types for different projects.  This is mostly useful for 3rd party libraries.  It implies to make a conversion between target types:

```csharp
namespace SomeLib
{
    class Target : ITarget { ... }
    class SomeLib : Project 
    {
        SomeLib() : Project(typeof(Target)) { ... }
        ...
    }
}
namespace MyNamespace
{
    class Target : ITarget
    {
        ...
        SomeLib.Target GetSomeLibTarget() { return ...; }
    }
    [Generate]
    class MyProject : Project
    {
        [Configure]
        void Configure(Configuration conf, Target target)
        {
            ...
            conf.AddPublicDependency<SomeLib.SomeLib>(target.GetSomeLibTarget());
        }
    }
}
```

The other approach is to simply use the same target type:

```csharp
namespace MyNamespace
{
    class SomeLib : Project 
    {
        SomeLib() : Project(typeof(Target)) { ... }
        ...
    }
    class Target : ITarget
    {
        ...
    }
    [Generate]
    class MyProject : Project
    {
        [Configure]
        void Configure(Configuration conf, Target target)
        {
            ...
            conf.AddPublicDependency<SomeLib>(target);
        }
    }
}
```

Which one is better?  It depends.  Different target types are providing mainly 2 advantages:
* It can make the library .sharpmake.cs file independent and reusable in other contexts.
* The number of targets added in the library can be smaller and minimal.

Using the same target type can however end up simpler, and we've seen projects at Ubisoft minimizing different target types to simplify code.  Different target types can end up tricky to do properly if you end up with diamond dependencies; Sharpmake supports them well, it's just that the conversion on both sides of the diamond must be coherent.

## Targets are compile-time tools

Whatever the solution you use, you don't want to give different meaning to the same Target type. Keep the target type as a compile-time tool, not run-time. It means you should **not** do the following:

```csharp
class Target
{
    ...
    Target GetSomeLibTarget() { return ...; }  // same target type; this is wrong
```

The problem with the previous example, is that the following would compile while what is wanted is to make a conversion:

```csharp
    [Generate]
    class MyProject : Project
    {
        [Configure]
        void Configure(Configuration conf, Target target)
        {
            ...
            conf.AddPublicDependency<SomeLib>(target);  // target.GetSomeLibTarget intended
        }
    }
```


## Write things once

Using C# in Sharpmake is offering multiple ways to write things a single time.

### Use a class hierarchy and virtual methods

It is strongly suggested to define a class hierarchy for projects to move common definition higher in hierarchy.  

Configure methods can be virtual and one possible approach is to do something like the following:

```csharp
    [Generate]
    class MyProject : Project
    {
        [Configure]
        virtual void Configure(Configuration conf, Target target)
        {
            ...
        }
    }
    [Generate]
    class MySubProject : MyProject
    {
        override void Configure(Configuration conf, Target target)
        {
            base.Configure(conf, target);
            ...
        }
    }
```

Another approach is to use other virtual methods to configure specific parts of a Configuration:

```csharp
    [Generate]
    class MyProject : Project
    {
        [Configure]
        void Configure(Configuration conf, Target target)
        {
            ConfigureOptimization(conf, target);
            ConfigureDefines(conf, target);
        }

        virtual void ConfigureOptimization(Configuration conf, Target target) { ... }
        virtual void ConfigureDefines(Configuration conf, Target target) { ... }
    }
    [Generate]
    class MySubProject : MyProject
    {
        override void Configure(Configuration conf, Target target)
        {
            base.Configure(conf, target);
            ...
        }
    }
```

The level of granularity of these virtual methods is up to you.  It can be very small:

```csharp
        [Configure]
        void Configure(Configuration conf, Target target)
        {
            ...
            ConfigureStringPooling(conf, target);
            ...
        }
        public virtual void ConfigureStringPooling(Configuration conf, Target target)
        {
            conf.Options.Add(Sharpmake.Options.Vc.Compiler.StringPooling.Disable);
        }
```

Multiple Configure functions can also be used, and Sharpmake is offering a feature to make them specific a to subset of the targets in the project:

```csharp
[Configure(Platform.win32 | Platform.win64)]
void ConfigurePs4(Configuration conf, Target target)
{
    ...
}

[Configure(Platform.ps4)]
void ConfigurePs4(Configuration conf, Target target)
{
    ...
}
 
[Configure(Platform.durango)]
void ConfigureDurango(Configuration conf, Target target)
{
    ...
}
```

If doing multiple Configure functions, it is strongly recommanded to avoid depending on Configure methods execution order.  If you do, the attribute ```[ConfigureOrder]``` can be used.  Sharpmake is using the order of declaration in the class as much as possible, but then changing a Configure method from virtual to override with code moved in a base class can change the execution order.  Many programmers are completely surprised when simply moving code around is changing the produced result.  For these reasons it is suggested that different Configure functions work on different and independent things.

### Dependency System

The dependency system is offering tools to write things about a library a single time, making sure dependent projects get all the required preprocessor definitions, includes, etc.  It is suggested to use the dependency system to write things only once.

For example, while Sharpmake allows you to do the following:

```csharp
conf.LibraryFiles.Add("Iphlpapi.lib");
```

It might be better to take the time to define everything for that library once:

```csharp
[Sharpmake.Export]
class IPHelperAPI
{
    void Configure(Configuration conf, Target target)
    {
        ...  // configure for target .lib, needed include path and define for dependents
    }
}
```

That project can then be added as a dependency.

### Public static functions

C# public static functions can offer an easy way to write code a single time.  Suppose you have the following:

```csharp
class MyBaseProject : Project
{
    public MyBaseProject : base(typeof(Target))
    {
        AddTargets(new Target(
            Platform.win32 | Platform.win64, 
            DevEnv.vs2015,
            ...));
    }
}
```

Even if you add targets in base class, in a big code base you might add targets in multiple classes.  And when you do, there's probably something common between all these, like DevEnv version or platforms.  You can choose to call functions dedicated to these:

```csharp
class MyBaseProject : Project
{
    public MyBaseProject : base(typeof(Target))
    {
        AddTargets(new Target(
            Settings.GetDefaultPlatforms(),
            Settings.GetDefaultDevEnvs(),
            ...));
    }
}
```

You can then in a single place configure these default values:

```csharp
static class Settings
{
    Platform GetDefaultPlatforms() { return Platform.win32 | Platform.win64; }
    DevEnv GetDefaultDevEnvs() { return DevEnv.vs2015; }
}
```

Here, in a transition between 2 DevEnv versions for example, you could generate 2 versions with a single line change:

```csharp
    DevEnv GetDefaultDevEnvs() { return DevEnv.vs2015 | DevEnv.vs2017; }
```

These can be also enriched to be configured by preference files per user, but that's another topic.

## Don't destroy base classes

We've seen in the past some programmers clear completely targets added in a base class to replace them completely:

```csharp
class Perforce : CommonProject
{
    Perforce()
    {
        ClearTargets();
        AddTargets(...);
    }
```

This is something to avoid, as more of a pain to maintain.  This is typically done because these programmers ignore that Sharpmake provides a feature to keep only a subset of the targets from the base class:

```csharp
class Perforce : CommonProject
{
    Perforce()
    {
        AddFragmentMask(Mode.Tool, Optimization.Debug | Optimization.Release);
    }
```

This is much better, even if the Is-A relationship is slightly incorrect.  At least this technique is easier to maintain.  It can be used for any combinaison of fragments and can be useful to minimize multiplying the number of base classes.  Another example:

```csharp
class MyBaseProject : Project
{
    public MyBaseProject : base(typeof(Target))
    {
        AddTargets(new Target(Platform.win32 | Platform.win64, ...));
    }
}
[Generate]
class MyProject : MyBaseProject
{
    public MyProject
    {
        AddFragmentMask(Platform.win64);  // don't need win32
    }    
}
```




## Consider switch/case with exception for big fragments

Here's the Optimization fragment from Rainbow Six Siege project:

```csharp
[Fragment, Flags]
public enum Optimization
{
    Debug = 0x01,
    AiDebug = 0x02,
    AiDebugEnc = 0x04,
    Release = 0x08,
    Profile = 0x10,
    MemTagFinal = 0x20,
    QCFinal = 0x40,
    Final = 0x80,
    FinalLTO = 0x100,
}
```

This is a big enum and some entries in it are driven by per-user preferences to avoid generating them uselessly.  Nevertheless, the .sharpmake.cs code files must support all entries, and using a switch/case in C# can provide the advantage of not forgetting any entry:

```csharp
switch (target.Optimization)
{
    case Optimization.Debug:
        conf.Defines.Add("_DEBUG");
        break;
    case Optimization.FinalLTO:
    case Optimization.Profile:
    case Optimization.MemTagFinal:
    case Optimization.QCFinal:
    case Otimization.Final:
        conf.Defines.Add("NDEBUG", "UBI_FINAL");
        break;
    case Optimization.AiDebug:
    case Optimization.AiDebugEnc:
    case Optimization.Release:
        conf.Defines.Add("NDEBUG");
        break;
    default:
        throw new Error("Bad optimization type in target. {0}", this);
}
```

## Use a C# IDE like Visual Studio

Using a C# IDE with auto-complete like Visual Studio is making it easier to use and learn Sharpmake.  Sharpmake is designed to provide all compiler and linker option through options discoverable through auto-complete/Intellisense.  Using an IDE is suggested.


# Sharpmake

*This documentation is far from complete and is a work in progress. Feel free
to improve it.*



## Table of Contents
-------------------------------------------------------------------------------
* [Sharpmake](#sharpmake)  
  * [Table of Contents](#table-of-contents)  
  * [About this repository](#about-this-repository)  
  * [Introduction](#introduction)  
    * [Quick Feature Overview](#quick-feature-overview)  
      * [Powerful Scripting](#powerful-scripting)  
      * [Accessible for Many Programmers](#accessible-for-many-programmers)  
      * [Exceptional Scalability and Modularity](#exceptional-scalability-and-modularity)  
      * [Generation from Sources](#generation-from-sources)  
      * [Generate Everything Quickly](#generate-everything-quickly)  
      * [Smart Granularity and Fragments](#smart-granularity-and-fragments)  
      * [Target and Configuration Independence](#target-and-configuration-independence)  
      * [Native Blobbing Support](#native-blobbing-support)  
      * [Dependency Management and Flexible Target System](#dependency-management-and-flexible-target-system)  
      * [NDA-Protected Platform Support](#nda-protected-platform-support)  
  * [Hello World](#hello-world)  
    * [Create a C++ Source File](#create-a-c-source-file)  
    * [Create a Sharpmake File](#create-a-sharpmake-file)  
    * [Launch Sharpmake](#launch-sharpmake)  
    * [Create a Debugging Environment](#create-a-debugging-environment)  
  * [More Detailed Documentation](#more-detailed-documentation)  
    * [Main Attribute](#main-attribute)  
    * [Custom Argument Type](#custom-argument-type)  
    * [Solution](#solution)  
    * [Project](#project)  
      * [Generate Attribute](#generate-attribute)  
      * [Compile Attribute](#compile-attribute)  
      * [Export Attribute](#export-attribute)  
      * [Preprocessor Define](#preprocessor-define)  
    * [Projects and File Mapping](#projects-and-file-mapping)  
    * [Fragments](#fragments)  
    * [Configure Attribute](#configure-attribute)  
      * [Configure Call Order](#configure-call-order)  
      * [Old Configure Order](#old-configure-order)  
      * [ConfigurePriority Attribute](#configurepriority-attribute)  
      * [Enforce no Dependencies on Configure Order](#enforce-no-dependencies-on-configure-order)  
    * [Targets and Configurations](#targets-and-configurations)  
    * [Sharpmake Strings](#sharpmake-strings)  
    * [Dependencies](#dependencies)  
    * [Compiler, Linker and Other Options](#compiler-linker-and-other-options)  
      * [Per-file Options](#per-file-options)  
    * [File Including](#file-including)  
    * [Blobbing Support](#blobbing-support)  
    * [File Inclusion and Exclusion](#file-inclusion-and-exclusion)  
    * [Ordering String Values](#ordering-string-values)  
    * [Filtering Targets Added in Base Class](#filtering-targets-added-in-base-class)  
    * [Limited Dependencies](#limited-dependencies)  
    * [Preferences](#preferences)  
  * [.NET Support](#net-support)  
    * [C++/CLI Support](#ccli-support)  
    * [C# Support](#c-support)  
      * [C# *Hello, World!*](#c-hello-world)  
      * [References](#references)  
        * [Project References](#project-references)  
        * [.NET References](#net-references)  
        * [External References](#external-references)  
    * [Copy Local](#copy-local)  
    * [Build Actions](#build-actions)  
      * [Resource](#resource)  
      * [Content](#content)  
      * [None](#none)  
    * [Namespace](#namespace)  
    * [Output File Name](#output-file-name)  
    * [WebReferenceUrls](#webreferenceurls)  



## About this repository
-------------------------------------------------------------------------------
This repository has branches mirroring the Sharpmake code used by many
projects.



## Introduction
-------------------------------------------------------------------------------
Sharpmake is an Ubisoft-developped solution to generate *.vcxproj*, *.vcproj*,
*.sln*, and *.csproj* files, as well as potentially more formats. Sharpmake
was developed to generate files very quickly and allow users to easily
generate multiple solutions and projects according to project and user
preferences. It was conceived to be easy to maintain and debug. It has native
support for blobbing unity builds) and has been developed to fulfill production
needs and provide flexible control over what is generated. As far as we know,
it is better than all available open source solutions.

Sharpmake was originally developed by Eric Thiffeault on Assassin's Creed 3 in
2011 and is used on multiple projects at Ubisoft.


### Quick Feature Overview
Here's an overview of some of the features that make Sharpmake stand out.

#### Powerful Scripting
As its name hints, Sharpmake is implemented in C#. But it's not only
implemented in C#, the scripts (they can be either *.sharpmake* or
*.sharpmake.cs* files, but the official extension is the latter) are also C#
files used in a scripting way with dynamic compilation. This makes Sharpmake
very easy to debug, in addition to being very quick. It also delivers a very
powerful language to use within the scripts. The scripts use the Sharpmake API
directly, facilitating the override and expansion of the API, which is
important for sharing Sharpmake across projects. The nature of C# makes it
very easy to write everything once. Sharpmake's "include" system is also very
scaleable.

#### Accessible for Many Programmers
The use of C#, including well-known concepts like C# attributes and C#
inheritance, make Sharpmake files less intimidating. The result might be
slightly more verbose than the likes of Jamfiles, makefiles, and so on, but
the results are definitely easier to follow and use paradigms programmers know
well. The usage of .NET directly in *.sharpmake.cs* files to manipulate
strings also makes these files more accessible.

#### Exceptional Scalability and Modularity
One of the biggest strength of Sharpmake might not be obvious at first
glance: Sharpmake clearly allows encapsulation in a single and independent
file of an external library. (External dependencies are a great example of
where it may be useful.) This definition can include everything for the include
path, the library paths, the source code for different platforms, and so on.

#### Generation from Sources
Projects and solutions don't need to be in source control to be used with
Sharpmake. Sharpmake will scan specified folders for sources and provides easy
control over this behavior. For huge productions it avoids the need to merge
these files and provides an easy way to transition between different Visual
Studio versions. It also facilitates the creation of solutions optimized for
specific programmers as well as allowing programmer preferences inside
configurations.

#### Generate Everything Quickly
Sharpmake is designed to rapidly generate all the files a programmer could
potentially need in a single pass.

#### Smart Granularity and Fragments
Simply changing a solution name can automatically affect the number of .sln
files Sharpmake will generate, because a name can contain target-dependent
variables. The number of generated project and solution files is handled
intelligently by Sharpmake, making the end results very easy to maintain.

Sharpmake also presents the concept of fragments, which is what targets are
made of. Fragments will automatically affect the possible granularity that
Sharpmake will evaluate.

#### Target and Configuration Independence
If you want to use custom configuration names, the Sharpmake target system
makes this very easy. This comes in very handy when using external projects.

#### Native Blobbing Support
Sharpmake has native support for blobbing (also known as unity builds),
allowing multiple strategies to reduce compilation and iteration time as much
as possible.

#### Dependency Management and Flexible Target System
Sharpmake has dependency management to allow easy propagation of include and
library paths. Private dependencies are provided to prevent propagation.
Combined with the target system which is also extremely scalable, it lets you
mix different target types together, providing great flexibility. For example,
a software provider could define their own target types, which a program could
use with its own target type. Dependencies are made with a single target type,
but it's trivial to make correspondences between different types. The end
result is something extremely flexible and able to support huge code bases,
similar to programming in general.



## Hello World
-------------------------------------------------------------------------------
Here's a quick example to help you dive into Sharpmake.


### Create a C++ Source File
First, let's a create a *src\main.cpp* file for our sample:

```cpp
// src\main.cpp
#include <iostream>
int main(int, char**)
{
    std::cout << "Hello, World!" << endl;
}
```


### Create a Sharpmake File
Then, let's create a *hello.sharpmake.cs* file for creating an .sln and
.vcxproj for that example:

```cs
// hello.sharpmake.cs
using Sharpmake;
 
namespace HelloWorld
{
    [Sharpmake.Generate]
    public class HelloWorldProject : Project
    {
        public HelloWorldProject()
        {
            Name = "HelloWorld";
 
            AddTargets(new Target(
                    Platform.win32 | Platform.win64,
                    DevEnv.vs2008 | DevEnv.vs2010,
                    Optimization.Debug | Optimization.Release
            ));
 
            SourceRootPath = @"[project.SharpmakeCsPath]\src";
        }
 
        [Configure()]
        public void ConfigureAll(Configuration conf, Target target)
        {
            conf.ProjectFileName = "[project.Name]_[target.DevEnv]_[target.Platform]";
            conf.ProjectPath = @"[project.SharpmakeCsPath]\generated";
 
            // if not set, no precompile option will be used.
            //conf.PrecompHeader = "stdafx.h";
            //conf.PrecompSource = "stdafx.cpp";
        }
    }
 
    [Sharpmake.Generate]
    public class HelloWorldSolution : Sharpmake.Solution
    {
        public HelloWorldSolution()
        {
            Name = "HelloWorld";
 
            AddTargets(new Target(
                    Platform.win32 | Platform.win64,
                    DevEnv.vs2008 | DevEnv.vs2010,
                    Optimization.Debug | Optimization.Release
            ));
        }
 
        [Configure()]
        public void ConfigureAll(Configuration conf, Target target)
        {
            conf.SolutionFileName = "[solution.Name]_[target.DevEnv]_[target.Platform]";
            conf.SolutionPath = @"[solution.SharpmakeCsPath]\generated";
            conf.AddProject<HelloWorldProject>(target);
        }
 
        [Sharpmake.Main]
        public static void SharpmakeMain(Sharpmake.Arguments arguments)
        {
            arguments.Generate<HelloWorldSolution>();
        }
    }
}
```


### Launch Sharpmake
Run the Sharpmake executable to generate the project and solution.

```bat
Sharpmake.Application.exe "/sources(@"hello.sharpmake.cs") /verbose"
```


### Create a Debugging Environment
One advantage of Sharpmake is its ability to be naturally debugged in Visual
Studio. Here is how you can generate your own Debug Solution:

1.  Run sharpmake with the argument parameter `/generateDebugSolution`
    ```bat
       Sharpmake.Application.exe "/sources(@"hello.sharpmake.cs") /verbose /generateDebugSolution"
    ```

2.  A debug solution, *sharpmake_debugsolution.sln*, is created next to your
    sources entry point. It contains all of your sharpmake files and already
    references the sharpmake package you used to generate it. Also, its Debug
    Options are all set up for debugging.

3. Press F5!

If you want the debugger to break as soon as an an exception is raised, you
can do the following:

* *Tools > Options > Debugging > Enable Just My Code*: Checked
* *Debug > Exceptions... > Common Language Runtime Exception > Thrown*: Checked



## More Detailed Documentation
-------------------------------------------------------------------------------


### Main Attribute
Multiple attributes are usd to dictate behavior to Sharpmake. The first one is
`[Sharpmake.Main]`, which is put on the static method that will be called at
Sharpmake's launch:

```cs
[Sharpmake.Main]
public static void SharpmakeMain(Sharpmake.Arguments arguments)
{
    arguments.Generate<HelloWorldSolution>();
}
```


### Custom Argument Type
It's possible to define your own class to handle custom arguments. For
example, this is such a class from Assassin's Creed:

```cs
// class that defines custom command lines arguments
public class GameEngineArguments
{
    public bool BuildSystemHelper = true;
    public Filter Filter = Filter.None;
    public Strings ChangelistSourceFilesFilters;
    public int ChangelistNumber;
 
 
    [CommandLine.Option(
        "buildsystemhelper",
        @"Generate BuildSystemHelper helper files: ex: /buildsystemhelper(<true|false>)")]
    public void CommandLineBuildSystemHelper(bool value)
    {
        BuildSystemHelper = value;
    }
 
    [CommandLine.Option(
        "changelist",
        @"Generate project and solution for a specific changelist: ex: /changelist( 1234 , ""files.txt"")")]
    public void CommandLineChangelist(int changelistNumber, string changelistFile)
    {
        Filter = Filter.Changelist;
        ChangelistNumber = changelistNumber;
        ChangelistSourceFilesFilters = new Strings();
 
        try
        {
            FileInfo changelistFileInfo = new FileInfo(changelistFile);
            using (StreamReader projectFileStream = changelistFileInfo.OpenText())
            {
                string line = projectFileStream.ReadLine();
                while (line != null)
                {
                    if (line != string.Empty)
                    {
                        string filePath = Util.PathMakeStandard(line);
 
                        if (File.Exists(filePath))
                        {
                            ChangelistSourceFilesFilters.Add(filePath);
                        }
                        else
                        {
                            // try to find it if relative
                            string relativePath = Path.Combine(changelistFileInfo.DirectoryName, filePath);
                            if ( File.Exists(relativePath) )
                                ChangelistSourceFilesFilters.Add(new FileInfo(relativePath).FullName);
                            else
                                throw new Error("File path not found '{0}' in changelist file '{1}'", filePath, changelistFileInfo.FullName);
                        }
                    }
                    line = projectFileStream.ReadLine();
                }
            }
        }
        catch ( Exception e )
        {
            if (e is Error)
                throw e;
            else
                throw new Error("Cannot read changelist input file: {0}", changelistFile, e);
        }
    }
}
```

Then in the main:

```cs
Arguments = new GameEngineArguments();
CommandLine.ExecuteOnObject(Arguments);
```

The `CommandLine.ExecuteOnObject` will automatically search for the
`CommandLine.Option` attribute and parse options according to the
correcponding method signature.

Of course, any C# code can be executed in the `Main`, not just solution
building.


### Solution
As seen in HelloWorld, solutions are defined using a C# class with
`Sharpmake.Generate` attribute.

```cs
[Sharpmake.Generate]
public class HelloWorldSolution : Sharpmake.Solution
{
    public HelloWorldSolution()
    {
        Name = "HelloWorld";
 
        AddTargets(new Target(
                Platform.win32 | Platform.win64,
                DevEnv.vs2008 | DevEnv.vs2010,
                Optimization.Debug | Optimization.Release
        ));
    }
 
    [Configure()]
    public void ConfigureAll(Configuration conf, Target target)
    {
        conf.SolutionFileName = "[solution.Name]_[target.DevEnv]_[target.Platform]";
        conf.SolutionPath = @"[solution.SharpmakeCsPath]\generated";
        conf.AddProject<HelloWorldProject>(target);
    }
}
```

The projects are added to the solution in the `Configure` function, defined
through the `Sharpmake.Configure` attribute, as described later in this page.


### Project
As with solutions, C++ projects are defined with classes, overriding, and
inheritance being natural features in C#. Only classes with special attributes
will be considered, so it's possible to define your own base classes:

```cs
namespace GameEngine
{
    public class CommonProject : Project
    {
        // Preference for all projects here
        ...
    }
 
    [Sharpmake.Generate]
    public class MyProject : CommonProject
    {
        // Define project here
        ...
    }
}
```

#### Generate Attribute
As shown in previous examples, the `[Sharpmake.Generate]` attribute is used on
solutions and projects to indicate that they are completely generated in
Sharpmake. The attribute does not interfere with C# inheritance. Other
attributes allow for different strategies, such as `[Sharpmake.Compile]` and
`[Sharpmake.Export]` attributes. Built solutions and their added projects must
have one of these attributes: `[Sharpmake.Generate]`, `[Sharpmake.Compile]` or
`[Sharpmake.Export]`.

#### Compile Attribute
The attribute `[Sharpmake.Compile]` can be used to define projects with a
*.vcxproj* file already available. It can be useful when converting your code
base to Sharpmake, because it can support your old projects to facilitate an
incremental conversion of your projects. When defining a `[Sharpmake.Compile]`
project, you must define what is necessary for the project, it's
configurations, and the output for each.

```cs
namespace GameEngine
{
    [Sharpmake.Compile]
    public class GameLib : BaseProject
    {
        public string BasePath = @"[project.ExternPath]\gamelib";
        public string ProjectName = @"GameLib";
 
        public GameLib()
        {
            PerforceRootPath = @"[project.ExternPath]\gamelib";
        }
 
        [Configure()]
        public void Configure(Configuration conf, Target target)
        {
            string platform = (target.Platform == Platform.Win32 || target.Platform == Platform.Win64) ? "PC" : "[target.Platform]";
            conf.Name = platform + " [target.Optimization]";
            if (target.Mode == Mode.Tool)
            {
                conf.Name = "Editor [target.Optimization]";
                if (target.OutputType == OutputType.Dll)
                    conf.Name = "Editor DLL Export [target.Optimization]";
            }
 
            conf.SolutionFolder = "Extern";
 
            conf.IncludePaths.Add(@"[project.BasePath]\Sources");
 
            conf.ProjectPath = @"[project.BasePath]\Make";
            conf.ProjectFileName = "GameLib.2008";
 
            conf.TargetPath = @"[project.BasePath]\lib\vc2008\Projects\[conf.Name]";
            conf.TargetFileName = ProjectName;
 
            conf.Output = target.OutputType == OutputType.Lib ? Configuration.OutputType.Lib : Configuration.OutputType.Dll;
        }
    }
}
```

#### Export Attribute
Sharpmake has a dependency system which accepts various dependencies, not just
generated projects. The Export project type can be used to link with projects
when only the .lib files are available. For example, this is code from
Assassin's Creed to use Passenger:

```cs
namespace GameEngine
{
    [Sharpmake.Export]
    public class ExternalLib : Sharpmake.Project
    {
        public string ExternPath = Extern.Extern.ExternPath;
        public string BasePath = @"[project.ExternPath]\include\externlib";
 
        public ExternalLib()
        {
            AddTargets(new Sharpmake.Target(
                Platform.win32 | Platform.win64,
                DevEnv.vs2008 | DevEnv.vs2010,
                Optimization.Debug | Optimization.Release,
                OutputType.Dll));
        }
 
        [Configure()]
        public void Configure(Configuration conf, Target target)
        {
            conf.IncludePaths.Add(@"[project.BasePath]\include\externlib");
            conf.TargetFileName = @"gamex";
            conf.Output = Configuration.OutputType.Dll;
        }
    }
}
```

#### Preprocessor Define
It's also possible to define preprocessor macros and symbols, in both C/C++
and .NET languages:

```cs
[Configure(DotNetFramework.v4)]
public void DefineDotNet4(Configuration conf, Target target)
{
    conf.Defines.Add("DOT_NET_4");
}
 
[Configure(DotNetFramework.v4_5)]
public void DefineDotNet45(Configuration conf, Target target)
{
    conf.Defines.Add("DOT_NET_45");
}
 
[Configure(DevEnv.vs2010)]
public void DefineDevEnv2010(Configuration conf, Target target)
{
    conf.Defines.Add("DEVENV_VS2010");
}
 
[Configure(DevEnv.vs2012)]
public void DefineDevEnv2012(Configuration conf, Target target)
{
    conf.Defines.Add("DEVENV_VS2012");
}
```


### Projects and File Mapping
Something great about Sharpmake is that the number of different generated
files for the same project is implicit. The properties used to define the file
paths of projects and solutions can use variable that are dependent on
targets, and Sharpmake will automatically generate the appropriate number of
files with the appropriate targets. For example, on Assassin's Creed, multiple
solutions are used for the game engine, depending on platform, DirectX, and so
on. The definition looks like this:

```cs
namespace GameEngine
{
    public class CommonSolution : Sharpmake.Solution
    {
        [Configure()]
        public virtual void Configure(Configuration conf, Target target)
        {
            conf.SolutionPath = @"[solution.RootPath]\projects\[target.Platform]";
 
            // vs2008 is default
            if ( target.DevEnv == DevEnv.vs2008 )
                conf.SolutionFileName = @"[solution.Name].[target.Mode].[target.Platform]" + gfxAPI;
            else
                conf.SolutionFileName = @"[solution.Name].[target.Mode].[target.Platform]" + gfxAPI + ".[target.DevEnv]";
            // ...
```

But on Rainbow Six Siege, a single solution is used for the game engine,
containing all platforms:

```cs
namespace GameEngine
{
    public class CommonSolution : Sharpmake.Solution
    {
        [Configure()]
        public virtual void Configure(Configuration conf, Target target)
        {
            conf.SolutionPath = @"[solution.RootPath]\temp\sharpmake\solutions";
            conf.SolutionFileName = @"[solution.Name].[target.DevEnv]";
            // ...
```

And that is the beauty of it. Nothing other than the paths from Assassin's
Creed were changed on Rainbow Six to change the solution's granularity. From
the requested solution targets, Sharpmake will automatically deduce how many
project and solution files are needed and how many targets each of them
contain.

The same principle could be used to support even both Assassin's Creed and
Rainbow Six approaches on the same project. Suppose the time to open a
solution is influenced by the number of targets in it, and is wanted to
support both approaches: one solution for all targets and one solution per
target or target type. A simple fragment could be added to achieve that:

```cs
[Fragment, Flags]
public enum SolutionGrouping
{
    OneToRuleThemAll = 0x01,
    OnePerConfig = 0x02,
}
```

Then, the fragment is added to the main target class and is examined to
influence `ProjectFileName` and `SolutionFileName`. The binding between
solutions and projects is done implicitly through the target. The requested
target will contain just `OneToRuleThemAll | OnePerConfig` to request both,
and that's it. Two sets of solutions and project groups will be generated.


### Fragments
One of the core features and biggest strengths of Sharpmake is the use of
fragments. Fragments are what targets are made of. Every project can override
its configuration for any specific fragment value. Some fragments are defined
directly in Sharpmake while others can be defined in *.sharpmake.cs* scripts.

```cs
[Fragment, Flags]
public enum Optimization
{
    Debug       = 0x01,
    AiDebug     = 0x02,
    AiDebugEnc  = 0x04,
    Release     = 0x08,
    Profile     = 0x10,
    QCFinal     = 0x20,
    Final       = 0x40,
}
 
[Fragment, Flags]
public enum GraphicAPI
{
    DirectX9 = 0x01,
    DirectX11 = 0x02,
}
```

The 2 built-in fragments `Platform` and `DevEnv` are mandatory if you create
custom target types. Custom target types must have 2 public fields for
`Platform` and `DevEnv` types.


### Configure Attribute
As previously stated, it's possible to verride the configuration for any
fragment value. The `[Sharpmake.Configure]` attribute is passed a list of
values where the associated method should be called. For example, this code is
in the project base class of our game engine:

```cs
[Configure(Mode.Engine, Platform.win32 | Platform.win64)]
public void ModeEngineWindows(Configuration conf, Target target)
{
    conf.Defines.Add("UBI_PLATFORM_PC");
}
```

It's possible to define multiple `Configure` methods, typically giving each
one different fragment values. The name of the method is not important,
because it's really the attribute that drives `Sharpmake`.

It is not mandatory to define multiple `Configure` methods. The preceding
example is the same thing as the following:

```cs
[Configure()]
public void Configure(Configuration conf, Target target)
{
    if (Mode == Mode.Engine && (Platform == Platform.win32 || Platform == Platform.win64)
        conf.Defines.Add("UBI_PLATFORM_PC");
}
```

According to preferences, code can be done in multiple ways, with
`switch/case` being another useful tool:

```cs
[Configure()]
public void Configure(Configuration conf, Target target)
{
    // ...
    switch (target.Optimization)
    {
        case Optimization.Profile:
        case Optimization.Retail:
            conf.Defines.Add("UBI_RETAIL");
            break;
        case Optimization.Debug:
            conf.Defines.Add("UBI_DEBUG");
            break;
        case Optimization.Release:
            conf.Defines.Add("UBI_RELEASE");
            break;
    }
    // ...
}
```

Having `using Sharpmake;` in the script files also gives access to extension
methods for some enum types:

```cs
[Configure()]
public void Configure(Configuration conf, Target target)
{
    // ...
    if (target.Platform.IsMicrosoft())
        conf.Defines.Add("_LIB");
 
    if (target.Platform.IsPC())
        conf.Defines.Add(
            "WIN95",
            "VISUAL",
            "USE_DBG_MODULE",
            "CAN_SET_OPTIONS",
            "DARE_PC_STATICLIB");
    // ...
}
```

It is important to note that only configuration should be modified in
`Configure` methods, not the `Project` itself. The `Project` should only be
modified in the constructor.

#### Configure Call Order
Sharpmake is calling `Configure` methods in the order they appear within the
project or solution class. It is however strongly advised to not depend on
that behavior. Adding multiple `Configure` methods to override specific
settings is much better:

```cs
public class BaseProject : Project
{
    // ...
    [Configure()]
    public virtual void ConfigureWarningAsError(Configuration conf, Target target)
    {
        conf.Options.Add(Sharpmake.Options.Vc.General.TreatWarningAsError.Enable);
    }
    // ...
}
```
```cs
[Sharpmake.Generate]
public class Bloomberg : BaseProject
{
    // ...
    public override void ConfigureWarningAsError(Configuration conf, Target target)
    {
        // Bloomberg, please fix your warnings
    }
    // ...
}
```

#### Old Configure Order
Old versions of Sharpmake were using another `Configure` order.  It was in the
order of declarations, but sub-classes overrides would affect that order.  The
problem was that sometimes empty overrides were kept just to have the same
`Configure` order. It's possible to ask for old `Configure` order:

```cs
[Sharpmake.Main]
public static void SharpmakeMain(Sharpmake.Arguments arguments)
{
    arguments.ConfigureOrder = ConfigureOrder.Old;
    // ...
}
```

#### ConfigurePriority Attribute
Again, it is not recommended to depend on `Configure` order. If necessary, by using `[ConfigurePriority]`, you ensure that the call order is respected even if the `Configure` methods are reordered. Sharpmake will sort them in ascending priority order. (-1 before 0, 0 before 1, etc.) Any `Configure` method without `[ConfigurePriority]` will have a default priority of 0.

Redefining priority is also supported across inheritance.

Here's an example of how `ConfigurePriority` can be used when using
inheritance:

* When `ParentProject` is generated, the sequence is: `Foo`, `Bar`
* When `ChildProject` is generated, the sequence is: `FooBar`, `Bar`, `Foo`
(`Foo` and `Bar` have been reordered)

```cs
[Sharpmake.Generate]
public class ParentProject : Project
{
    ...
    [Configure()]
    [ConfigurePriority(2)]
    public virtual void Bar(Configuration conf, Target target)
    {
        Debug.Assert(executedMethodFlags.Equals(ConfigureMethod.Foo),
            "ParentProject.Bar(...) assert failed",
            "ParentProject.Bar(...) should be the second configure to be invoked in this project");
 
        executedMethodFlags |= ConfigureMethod.Bar;
    }
 
    [Configure()]
    public virtual void Foo(Configuration conf, Target target)
    {
        Debug.Assert((int)executedMethodFlags == 0,
            "ParentProject.Foo(...) assert failed",
            "ParentProject.Foo(...) should be the first configure to be invoked in this project");
 
        executedMethodFlags |= ConfigureMethod.Foo;
    }
}
 
[Sharpmake.Generate]
public class ChildProject : ParentProject
{
    ...
    [ConfigurePriority(0)]
    public override void Bar(Configuration conf, Target target)
    {
        Debug.Assert(executedMethodFlags.Equals(ConfigureMethod.FooBar),
            "ChildProject.Bar(...) assert failed",
            "ChildProject.Bar(...) should be the second configure to be invoked in this project");
 
        executedMethodFlags |= ConfigureMethod.Bar;
    }
 
    [ConfigurePriority(1)]
    public override void Foo(Configuration conf, Target target)
    {
        Debug.Assert(executedMethodFlags.Equals(ConfigureMethod.FooBar | ConfigureMethod.Bar),
            "ChildProject.Foo(...) assert failed",
            "ChildProject.Foo(...) should be the third configure to be invoked in this project");
 
        executedMethodFlags |= ConfigureMethod.Foo;
    }
 
    [Configure()]
    [ConfigurePriority(-1)]
    public void FooBar(Configuration conf, Target target)
    {
        Debug.Assert((int)executedMethodFlags == 0,
            "ChildProject.FooBar(...) assert failed",
            "ChildProject.FooBar(...) should be the first configure to be invoked in this project");
 
        executedMethodFlags |= ConfigureMethod.FooBar;
    }
}
```

#### Enforce no Dependencies on Configure Order
As said more than once already, depending on `Configure` order is a bad idea. 
Once your code is clean regarding that, Sharpmake offers a feature to validate
it is ok, perfect for SubmitAssistant or build system validations. Just add
the argument `/test("QuickConfigure")` to the command-line arguments of
Sharpmake and the exit code will be non-zero if the `ConfigureOrder` cannot be
reversed. Note that the validation will still respect usages of
`ConfigurePriority` attributes, the reversing is done for `Configure` of the
same priority.


### Targets and Configurations
Sharpmake makes a clear distinction between *targets* and *configurations*.
The classes `Project.Configuration` and `Solution.Configuration` are used to
define the configurations in *.vcxproj* and *.sln* files. The targets bind
everything together. For example, the same target can use configurations with
different names depending on the project.

```cs
namespace GameEngine
{
    [Sharpmake.Compile]
    public class GameLib : Sharpmake.Project
    {
        public string ExternPath = Extern.Extern.ExternPath;
        public string BasePath = @"libs\GameLib";
        public string ProjectName = @"GameLib";
 
        public GameLib()
            : base(typeof(Target))
        {
            AddTargets(new Target(
                GameFolder.RainbowSix,
                Platform.win32 | Platform.win64 | Platform.ps3 | Platform.x360,
                DevEnv.vs2008,
                GameEngine.Optimization.Debug | GameEngine.Optimization.Release | GameEngine.Optimization.Profile | GameEngine.Optimization.Final,
                OutputType.Lib,
                Blob.NoBlob,
                GameEngine.Mode.Engine | GameEngine.Mode.Tool));
            PerforceRootPath = @"[project.ExternPath]\Library";
        }
 
        [Configure()]
        public void Configure(Configuration conf, Target target)
        {
            conf.Name = "[target.Platform] [target.Mode]";
            // ...
```

The virtual function will be called for Engine mode if the platform is Win32
or Win64. The name of the method is of no importance. Just make it unique, as
it's really the attribute that is examined. If the method is made virtual,
there is no need to specify the attribute in sub-classes.

We can also see in previous examples why fragments are defined as flags: the
C# "`|`" operator allows multiple fragments to be combined. A single `Target`
instance can be used to actually specify multiple targets.


### Sharpmake Strings
Every string in a Sharpmake solution, project, and configuration support uses
the `[obj.Property]` or `[Property]` format to insert values from properties
inside strings. The resolving is done as late as possible, making it possible
for more global properties to refer more local ones and vice-versa.

The following objects are supported:
* **target**: Property for the current target.
* **conf**: Property for the current configuration. It can be project or solution configuration, depending on which is being generated.
* **project**: Property of the current project.
* **solution**: Property of the current solution.

The built-in property `SharpmakeCsPath` has been already used in previous
examples. Provided as both `solution.SharpmakeCsPath` and
`project.SharpmakeCsPath`, it contains the path of the *.sharpmake.cs* file
where that solution or project was defined. This property is important: it can
be used for libraries to provide *.sharpmake.cs* files inside their library
packages, referring to the rest of the package with paths relative to
`SharpmakeCsPath`.

In addition, multiple properties are added by generators when generating (for
example) .sln or .vcxproj files, such as `solutionGuid`, `projectName`,
`projectFile`, `projectGuid`, `options.*`, and so on.

Note that static properties are supported at the moment.


### Dependencies
Sharpmake has built-in support for dependencies, making it easier to generate
solutions while ensuring they have everything needed. The dependency system
makes Sharpmake very scalable by allowing the definition of include paths,
library paths, library files and more in the definition of the appropriate
library. The dependency system will make these be appropriately inherited in
dependent projects. For example, dependencies in a solution will only be added
if necessary, that is if the target is not a static library. If the target is
a static library, the dependent executable will then have the dependencies.

For inherited properties such as include paths and library paths, Sharpmake
provides the option to choose between public and private dependencies. Private
dependencies are not propagated to dependent projects, so if a project needs
an include path to compile its own source files, but its headers don't need
it, a private include path can be included.

```cs
namespace Extern
{
    [Sharpmake.Export]
    public class SomeProject : MyExternProjectBase
    {
        public string BasePath = @"[project.ExternPath]\someproject";
 
        [Configure()]
        public void Configure(Configuration conf, Target target)
        {
            conf.IncludePaths.Add(@"[project.BasePath]\include");
            conf.PrivateIncludePaths.Add(@"[project.BasePath]\private\include");
            conf.LibraryPaths.Add(@"[project.BasePath]\lib");
            conf.LibraryFiles.Add(@"someproject");
        }
    }
}
```

Then, adding dependencies is as simple as calling `AddDependency` on a
project:
```cs
class MyProject : MyBaseProject
{
    [Configure()]
    public void Configure(Configuration conf, Target target)
    {
        conf.AddPublicDependency<SomeProject>(target);
    }
}
```

As seen in previous example, dependencies themselves can be completely public,
rely on their public/private definition, or be completely private.

Something important to note in the previous example is the target argument
passed to `AddPublicDependency`. This is target object binding the two
projects together. It might not be as simple as a target. For example, you
might to be able to control which third-party library is in debug in your
debug build, or even multiple debug builds. Another use case is something
Sharpmake specifically allows: defining reusable and shareable Sharpmake
script files for specific libraries.

Inherited elements from dependencies is not limited to include paths and
libraries. Files to be copied with the executable can be specified, which is
particularly useful with DLLs, when linking with an implib instead of a
complete static library:

```cs
[Configure()]
public void Configure(Configuration conf, Target target)
{
    conf.IncludePaths.Add(@"[project.BasePath]\include");
    if (target.Platform == Platform.win32)
        conf.LibraryFiles.Add("nvtt_win32");
    else if (target.Platform == Platform.win64)
        conf.LibraryFiles.Add("nvtt_win64");
    conf.LibraryPaths.Add(@"[project.BasePath]\lib");
    if (target.Platform == Platform.win32)
        conf.TargetCopyFiles.Add(@"[project.BasePath]\nvtt_win32.dll");
    else if (target.Platform == Platform.win64)
        conf.TargetCopyFiles.Add(@"[project.BasePath]\nvtt_x64.dll");
}
```


### Compiler, Linker and Other Options
Sharpmake supports a huge number of options when generating Visual C++ project
files and solutions, most them obviously being compiler and linker options. If
a given option is not supported, it's very easy to add support for a new one.
The availability of auto-completion in script files makes using new options
very easy:

```cs
[Configure()]
public void Configure(Configuration conf, Target target)
{
    base.Configure(conf, target);
    conf.Options.Add(new Sharpmake.Options.Vc.Compiler.DisableSpecificWarnings("4996", "4530"));
    conf.Options.Add(Sharpmake.Options.Vc.Compiler.Exceptions.EnableWithSEH);
}
```

All options are passed through `conf.Options`, and their types vary between
simple types and more complex types, as in the previous example. The
`Sharpmake.Options` static class contains all available options, classified
according to the tools and platforms. Setting an option for another platform
will simply have no effect as the underlying generator will not use it. For
this reason, the previous example would work with PS3 targets, but will have
no effect.

There's not much point in enumerating all the available options. Opening
*Options.cs* is simply enough and very easy to follow. This is what it looks
like:

```cs
namespace Sharpmake
{
    static public class Options
    {
        static public class Vc
        {
            static public class General
            {
                public enum CharacterSet
                {
                    Default,
                    Unicode,
                    [Default]
                    MultiByte
                }
 
                public enum WholeProgramOptimization
                {
                    [Default]
                    Disable,
                    LinkTime,
                    Instrument,
                    Optimize,
                    Update
                }
             // ...
```

The `Default` attribute is used to clearly set the default value and quickly
identify it when reading code.

#### Per-file Options
Sharpmake doesn't have precise per-file options to specify any compiler option
for any file. This could be added, but instead Sharpmake provides specific
features to be changed with file regular expressions, which is actually more
powerful and works well enough:

```cs
[Configure()]
public void Configure(Configuration conf, Target target)
{
    conf.PrecompSourceExclude.Add(
        @"\gameengine\audio\audioframework.cpp");
    if (target.Platform.IsPC())
    {
        conf.SourceFilesCompileAsCRegex.Add(@"oggvorbis\.bulk\.cpp$");
    }
    // ...
```


### File Including

```cs
[module: Sharpmake.Include("extern.sharpmake.cs")]
```

For better scalability, Sharpmake supports file including, as some previous
examples have demonstrated. Something to note is that the includes are
necessary for Sharpmake script files to be used outside the debugging
environment. They are not used in the debugging environment, where files are
instead compiled inside a DLL. Just remember to run generation with the
command line after making heavy changes inside the debugging environment.


### Blobbing Support
Blobbing support is native in Sharpmake. Sharmake has the following built-in
fragment:

```cs
[Fragment, Flags]
public enum Blob
{
    // Blob only project, another project references the source files
    Blob = 0x01,
 
    // Normal Visual Studio project without blobbing.
    // Can be combined with Blob inside same solution.
    NoBlob = 0x02,
}
```

The fragment does a single thing, non-blob projects will be present even in
blob configurations, so that all the source is present. The rest must be done
in Sharpmake script files by setting `conf.IsBlobbed` and similar options:

```cs
[Configure(Blob.Blob)]
public virtual void ConfigureBlob(Configuration conf, Target target)
{
    conf.IsBlobbed = true;
    conf.ProjectName += "_Blob";
    conf.SolutionFolder = "Blob";
    conf.ProjectFileName += ".blob";
    conf.IncludeBlobbedSourceFiles = false;
}
```

The following properties can be used to override blobbing default behavior:
* `project.SourceFilesBlobExclude`: Files to exclude from blobs.
* `project.SourceFilesBlobExcludeRegex`: Regex to exclude files from blobs.
* `project.SourceFilesBlobExtension`: Extension of files to be put in blobs.

Work blob numbers can be set in the constructor with `BlobWorkFileCount`. The
normal blob count is automatically provided by `BlobSize`. The property
`BlobSizeOverflow` is used as a threshold to exceed that size when files are
still in the same folder. This approach makes the blobs more stable.


### File Inclusion and Exclusion
Sharpmake provides several utilities to exclude and include files easily in
projects and blobs. The possibility of using C# also comes handy.

A project typically comes with three types of properties:
* `Excludes`: Used to exclude otherwise included files from the project.
* `Includes`: Used to include otherwise excluded files from the project.
* `Filters`: Used to specify exactly what can be included in a project, for the files already included in the project.

Here's a list of available properties in the `Project` class:
* `project.SourceRootPath`: Root to get source files from.
* `project.AdditionalSourceRootPaths`: Additional paths inspected to find source files.
* `project.SourceFiles`: Source files themselves.
* `project.SourceFilesExtension`: Extensions of source files to be added to the project.
* `project.SourceFilesCompileExtension`: Extensions of source files to be compiled in the project.
* `project.SourceFilesFilters`: If specified, only files in this list can be included.
* `project.SourceFilesExclude`: Files to exclude from the project.
* `project.SourceFilesIncludeRegex`: Files matching `SourceFilesIncludeRegex` and `SourceFilesExtension` from the source directory will make `SourceFiles`.
* `project.SourceFilesFiltersRegex`: If specified, only files matching the patterns can be included.
* `project.SourceFilesExcludeRegex`: Source files that match this regex will be excluded from the build.
* `project.SourceFilesBuildExclude`: Source files to exclude from the build from `SourceFiles`.
* `project.ResourceFiles`: Resource files themselves.
* `project.ResourceFilesExtension`: Extension to add resource files automatically from `SourceRootPath`.

Additionally the following are available in the configuration:
* `conf.SourceFilesBuildExclude`: Files to exclude from the project.
* `conf.SourceFilesBuildExcludeRegex`: Patterns to exclude files from the project.
* `conf.PrecompSourceExclude`: Files not using the precompiled header.
* `conf.PrecompSourceExcludeExtension`: Patterns to specify files not using the precompiled header.

Using C# can also provide interesting flexibility. For example, this is code
from the project base class on Osborn in `Configure()`, forcing suffixes like
*_win32.cpp* and folders like */xenon/somefile.cpp* to be excluded from some
configurations automatically:

```cs
var excludedFileSuffixes = new List<string>();
var excludedFolders = new List<string>();
if (target.Platform != Platform.X360)
{
    excludedFileSuffixes.Add("xenon");
    excludedFolders.Add("xenon");
}
if (target.Platform != Platform.Ps3)
{
    excludedFileSuffixes.Add("ps3");
    excludedFolders.Add("ps3");
}
if (target.Platform != Platform.win32)
{
    excludedFileSuffixes.Add("win32");
    excludedFolders.Add("win32");
}
if (target.Platform != Platform.win64)
{
    excludedFileSuffixes.Add("win64");
    excludedFolders.Add("win64");
}
conf.SourceFilesBuildExcludeRegex.Add(@"\.*_(" + string.Join("|", excludedFileSuffixes.ToArray()) + @")\.cpp$");
conf.SourceFilesBuildExcludeRegex.Add(@"\.*\\(" + string.Join("|", excludedFolders.ToArray()) + @")\\");
```


### Ordering String Values
Sharpmake sorts include paths, library paths and libraries, making things more
deterministic and readable, especially considering Sharpmake is fully
multi-threaded using a thread pool. However, it is likely to sometime need to
enforce some order for these things. To fulfill that needs, some Sharpmake
fields are using the `OrderableStrings` type instead of `Strings`, allowing to
optionally supply an integer prevalent in sorting. By default, the integer
value is 0. Negative values will be put first and positive values last. For
example the following can be specified to make these 2 include paths first
after the sort:

```cs
conf.IncludePaths.Add(@"[project.RootPath]\gameengine\audio", -2);
conf.IncludePaths.Add(@"[project.RootPath]\gameengine\renderer", -1);
```

Any integer value can used. For libraries, some are deduced from the
`TargetFilePath`:

```cs
[Sharpmake.Export]
public class SomeProject : Sharpmake.Project
{
    // ...

    [Configure()]
    public void Configure(Configuration conf, Target target)
    {

        // ...

        conf.TargetFileOrderNumber = 1000;  // Put the project last, it has compiled STL symbols that will clash with good ones from game engine.
    }

    // ...

}
```


### Filtering Targets Added in Base Class
It's common to make a base class for projects where targets are added. Instead
of calling the base class constructor differently, it is also possible to call
`AddFragmentMask` instead to filter the targets that should be used:

```cs
[Sharpmake.Generate]
public class LevelEditor : CommonProject
{

    // ...

    public LevelEditor()
    {
        // only in toolmode
        AddFragmentMask(Mode.Tool);

        // ...

    }

    // ...

}
```


### Limited Dependencies
By default, Sharpmake will make sure a project inherits from a dependency
everything needed to use it: other dependencies, used libraries, used include
paths, etc. In some extreme rare situations where this behavior is not wanted,
it is possible to specify exactly what to inherit from a dependency.

The `DependencySetting` enum contains flags for different use cases to specify
precisely what is wanted:

```cs
// InheritFromDependenciesDependencies to get all files to copy
conf.AddPrivateDependency<GameEngineDll>(target, DependencySetting.OnlyDependencyInSolution | DependencySetting.InheritFromDependenciesDependencies);
```

In the specific case of a static library with prebuild event that **must** be
executed before it's inclusion in subsequent project, use
`DependencySetting.ForcedDependencyInSolution`. Otherwise, it is recommended
to use the default option to optimize the compilation process:

```cs
conf.AddPublicDependency<StaticLibraryWithPrebuildEvent>(target, DependencySetting.ForcedDependencyInSolution);
```


### Preferences
Sharpmake has natural support for user preferences. Currently, a per-user
preference file, a *user.sharpmake.cs* file feature, has been developed for
Assassin's Creed, but the feature has been developed completely in
*.sharpmake.cs* files. In the future, we should investigate moving that
feature directly into to Sharpmake, at least as an option.

Already, features like Perforce integration are completely optional. Many
preferences turn out to be pipeline-specific. Like other solutions generating
everything offline and not submitting to Perforce, it allows user preferences
to affect the content of generated Visual C++ project files and solutions. In
the case of solutions, preferences are more likely to influence the number of
solutions generated, by creating solution files dedicated to programmer
targets. For projects, preferences are more likely to affect compiler
optimizations and Perforce integration.



## .NET Support
-------------------------------------------------------------------------------
In addition to generating C++ projects, Sharpmake also supports project
generation for C# and C++/CLI.


### C++/CLI Support
To use C++/CLI, instead of setting the `OutputType` to `Exe`, `Lib` or `Dll`,
use the .NET versions:

```cs
public override void ConfigureAll(Configuration conf, Target target)
{
    base.ConfigureAll(conf, target);
    conf.Output = Configuration.OutputType.DotNetConsoleApp;
}
```

The enumeration of all project types can be found in
*Project.Configuration.cs* in Sharpmake's source code, and looks like this:

```cs
public enum OutputType
{
    Exe,
    Lib,
    Dll,
    DotNetConsoleApp,
    DotNetClassLibrary,
    DotNetWindowsApp,
    None,
}
```


### C# Support
To use the C# version of Sharpmake, use the `CSharpProject` and
`CSharpSolution` base classes when writing your Sharpmake scripts.

> **Tip**: To help having the correct project folder structure, create a new `Project`
>          and then write your sharpmake file.

> **Warning**: To permit retro-compatibility, these classes are derived from
>              their C++ equivalent. That is the reason why `CSharpProject`s
>              have fields like `Blobs`, even though C# projects have no need
>              for blobbing.

#### C# *Hello, World!*

1. Create the *Hello, World!* project.

Create a C# source file with some "Hello, World!" code in it for our sample.

```cs
using System;
 
namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}
```

2. Create the Sharpmake script.

Create the project generation script. Let's call it *hello.sharpmake.cs*. It
will create the solution and the project for this example.

```cs
using Sharpmake;
 
namespace CSharpHelloWorld
{
    [Sharpmake.Generate]
    public class HelloWorld : CSharpProject
    {
        public HelloWorld()
        {
            RootPath = @"[project.SharpmakeCsPath]\codebase\";
 
            AddTargets(new Target(
            Platform.anycpu,
            DevEnv.vs2010,
            Optimization.Debug | Optimization.Release,
            OutputType.Dll,
            DotNetFramework.v4));
 
            // This Path will be used to get all SourceFiles in this Folder and all subFolders
            SourceRootPath = @"[project.RootPath]\[project.Name]\source";
        }
        [Configure()]
        public virtual void ConfigureAll(Configuration conf, Target target)
        {
            conf.ProjectFileName = "[project.Name].[target.DevEnv].[target.Framework]";
            conf.ProjectPath = @"[project.RootPath]\[project.Name]";
        }
    }
 
    [Sharpmake.Generate]
    public class HelloWorldSolution : CSharpSolution
    {
        public HelloWorldSolution()
        {
            AddTargets(new Target(
                Platform.anycpu,
                DevEnv.vs2010,
                Optimization.Debug | Optimization.Release,
                OutputType.Dll,
                DotNetFramework.v4));
        }
 
        [Configure()]
        public void ConfigureAll(Configuration conf, Target target)
        {
            conf.SolutionFileName = string.Format("{0}.{1}.{2}", Name, "[target.DevEnv]", "[target.Framework]");
 
            conf.SolutionPath = @"[solution.SharpmakeCsPath]\codebase\";
 
            conf.AddProject<HelloWorld>(target);
        }
 
        [Sharpmake.Main]
        public static void SharpmakeMain(Sharpmake.Arguments arguments)
        {
            arguments.Generate<HelloWorldSolution>();
        }
    }
}
```

3. [Launch Sharpmake](#launch-sharpmake) as you would normally do for a C++
   project.

#### References
##### Project References
Adding project references works just like it does with C++ projects, with the
`Configuration.AddPrivateDependency<...>(target)` and
`Configuration.AddPublicDependency<...>(target)` methods.

```cs
public override void ConfigureAll(Configuration conf, Target target)
{

    //...

    conf.AddPrivateDependency<Libraries.Ubisoft_Core>(target);

    //...

}
```

##### .NET References
.NET references refers to any reference that you would add with the
*Project->Add Reference* command in Visual Studio, using the .NET tab.

![Visual Studio's Add .NET Reference Dialog](docs/img/AddDotNetRef.png)

```cs
public override void ConfigureAll(Configuration conf, Target target)
{

    //...

    conf.ReferencesByName.AddRange(new Strings(
        "System",
        "System.Core",
        "System.Xml.Linq",
        "System.Data.DataSetExtensions",
        "System.Data",
        "System.Xml"));

    //...

}
```

> **Careful**: In Visual Studio, new projects come with default references:
>    * System
>    * System.Core
>    * System.Data
>    * System.Data.DataSetExtensions
>    * System.Xml
>    * System.Xml.Linq
>
> On the other hand, when Sharpmake generates a .NET project, it will *not*
> put these references unless you tell it to, so you must specify those
> references if you need them.

##### External References
![Visual Studio's Add External Reference Dialog](/docs/img/AddExternalReference.png)

When there is a need for an external reference, use the
`configuration.AddReferenceByPath(@"path")` method.

```cs
[Configure()]
public override void ConfigureAll(Configuration conf, Target target)
{

    //...

    conf.ReferencesByPath.Add(@"[project.RootPath]\external\Divelements\SandDock for WPF\Divelements.SandDock.dll");

    //...

}
```


### Copy Local
`CopyLocal` can be defined per Reference Type using the
`Project.DependenciesCopyLocal` field.

The field represents the combination of `Project.DependenciesCopyLocalTypes`
flags.

```cs
[Flags]
public enum DependenciesCopyLocalTypes
{
    None = 0x00,
    ProjectReferences = 0x01,
    DotNetReferences = 0x02,
    ExternalReferences = 0x04,
}
```

The default settings for each type of reference are as follows:

| Reference Type      | Default value |
|---------------------|---------------|
| Project references  | `true`        |
| .NET references     | `false`       |
| External references | `true`        |

Example:

```cs
public AppsProject()
{
    //Making sure we have ProjectReferences and Externals for apps to run in outputFolder
    DependenciesCopyLocal = DependenciesCopyLocal |
        (DependenciesCopyLocalTypes.ProjectReferences | DependenciesCopyLocalTypes.ExternalReferences);
}
```


### Build Actions
![Visual Studio File Properties](/docs/img/ResourceBuildAction.png)
In Sharpmake most of the Action Builds are generated by the extension and the
path of files. For example, source files will have Compile Build Action, XAML
files will have *Page Build Action*.

Some Build Actions can't be determined only with those parameters, build
actions such as [Resource](#resource), [Content](#content) and [None](#none)
need either a path or extension match to identify the right file association.

#### Resource
Files with this build action will end in the assembly or executable.

By default, files in `"[project.RootPath]\Resources\"` are associated with
this build action. Use the `CSharpProject.ResourcesPath` field to change the
ResourcesRoot folder.

```cs
public class ProjectName : CSharpProject
{
     public ProjectName()
     {

         //...

         ResourcesPath = @"[project.RootPath]\images\";

         //...

     }
}
```

In addition to the resources folder it is also possible to use the file
extension as in C++ with the Project
([File Inclusion and Exclusion](#file-inclusion-and-exclusion)).

> **Warning**: Files embedded in the *.resx* file must not be added to
>              resource file list since it will create a copy in the output
>              assembly.

#### Content
Files with this build action will end in the output folder.

By default, files in `"[project.RootPath]\Content\"` have this build
action. Use the `CSharpProject.ContentPath` field to change the `ContentRoot`
folder.

```cs
public class ProjectName : CSharpProject
{
     public ProjectName()
     {

         //...

         ContentPath = @"[project.RootPath]\HtmlReferences\";

         //...

     }
}
```

It is also possible to add additional content files, with or without the
*Always Copy*, by using the `CSharpProject.AdditionalContent` and
`CSharpProject.AdditionalContentAlwaysCopy` properties. For example:

```cs
[Sharpmake.Generate]
class ExampleAdditionalContent : LibrariesProject
{
    public ExampleAdditionalContent()
    {

        // ...

        AdditionalContent.Add("additional-content-default-copy.txt");
        AdditionalContentAlwaysCopy.Add("additional-content-always-copy.txt");

        // ...

    }

    // ...

}
```

#### None
Files with this build action will not be copied to the output folder. Files
using the extensions listed below have this build action by default.

| Extension     | File type                                 |
|---------------|-------------------------------------------|
| *.config*     | C# project XML configuration files.       |
| *.settings*   | .NET setting definition file.             |
| *.map*        | Debugging maps.                           |
| *.wsdl*       | Web service description language.         |
| *.datasource* | WCF service reference file.               |
| *.cd*         | Microsoft Visual Studio class diagram.    |
| *.doc*        | Microsoft Word document. (Legacy format.) |
| *.docx*       | Microsoft Word document.                  |

You can associate new file extensions to the *None* build action using the
`CSharpProject.NoneExtension`.

```cs
public class ProjectName : CSharpProject
{
     public ProjectName()
     {

         //...

         NoneExtension.Add(".xlsx"); //adding Excel files to the project for developers

         //...

     }

     // ...

}
```


### Namespace
In case the project's name does not match the desired default namespace, you
can assign the correct one with the `CSharpProject.RootNamespace`.

```cs
[Sharpmake.Generate]
class Ubisoft_Core : ExternalProject
{
    public Ubisoft_Core()
    {
        Name = "Ubisoft.Core";
        RootNamespace = "Ubisoft";

        //...

    }

    // ...

}
```


### Output File Name
In case where the project name isn't the same as the output file name wanted,
change the value of `CSharpProject.AssemblyName`.

```cs
[Sharpmake.Generate]
class Ubisoft_Core_Interop : ExternalProject
{
    public Ubisoft_Core_Interop()
    {

        //...

        Name = "Ubisoft.Core";
        AssemblyName = "Ubisoft.Core.Interop";

        //...

    }

    // ...

}
```


### WebReferenceUrls
![Visual Studio Web References](/docs/img/WebReferences.png)

To add a Web reference to the project, create a new
`Sharpmake.WebReferenceUrl` instance and add it to the
`CSharpProject.WebReferenceUrls` list.

```cs
[Sharpmake.Generate]
class Ubisoft_Confluence : LibrariesProject
{
    public Ubisoft_Confluence()
    {
        Name = "Ubisoft.Confluence";
 
        WebReferenceUrls.Add(
            new WebReferenceUrl
            {
                Name = @"...an-url...",
                UrlBehavior = "Dynamic",
                RelPath = @"Web References\atlassian.confluence\",
                UpdateFromURL = @"...an-url...",
                CachedAppSettingsObjectName = "Settings",
                CachedSettingsPropName = "prop_map"
            });
    }

    //...

}
```
# Why Sharpmake?

In 2011, after evaluation of different solutions like Premake and CMake, the team of Assassin's Creed 3 decided to develop Sharpmake, a solution to generate .vcproj and .sln files.  Here's the list of needs from 2011:

> Needs:
> * Easy to add a new lib, should take no more than 5 min. We planned to split engine in many pieces so this point is the very important.
> * Way to define only once project options and reuse it.
> * Include file from directory, no need to merge project anymore
> * Only one tool for all platforms
> * Solution generation support
> * Custom target generation: to minimize project file size, assassin2.vcprog is 311000 line long... probably making VS to lag. Ex: AI programmers should be able to generate only project they work on (win tool release, x360 engine release) that’s it.
> * Separate settings file for all projects including third party. Ex: havoc setting contains export include, lib, path, etc.
> * Easy to debug
> * Easy to edit, no needs to know the knots of the system to change it.
> * Vs2010 support
> * Have common share section for general settings.
> 
> Nice to have:
> * Generate blob projects as well. Chisel will only need to move edit file to work blob.
> * Support many platform in the same project ( x32, x64, x360 and ps3 )
> * Support for C# solutions (and projects?)
> * Generate project for a sub set of files to use from SubmitAssistant.

After an evaluation of Premake and CMake (remember it was in their state in 2011), the conclusion was that developping Sharpmake was worth it on Assassin's Creed.

Premake and CMake have been used for years at Ubisoft and over the years different productions and products inside Ubisoft switched from them to Sharpmake.  This is typically not imposed at all, since Ubisoft is extremely bottom-up; it's even the opposite, for a lot of projects, using something external can be considered better (since maintained by more people).  For productions, Sharpmake became the natural choice for multiple reasons:
* Support for consoles, even those unannounced to public.
* Support to generate FastBuild .bff files.
* Most libraries already have .sharpmake.cs files made on another project.
* Fast generation.
* C# .csproj support.  Support for mixing with .vcxproj in same generated .sln.
* Both C++ and C# programmers are confortable editing .sharpmake.cs files.
* Intellisence and debugging for .sharpmake.cs files.

At the beginning of 2017, serious discussions were made inside Ubisoft to finally make Sharpmake open-source.  While legal discussions were made, a few developers improved Sharpmake to isolate platform implementation in single .dll files, easing isolation of platforms under NDA.  On September 22th 2017, Sharpmake was finally pushed on Github.

The reason we made Sharpmake open-source is because we still believe it is superior for our needs than any other open-source alternative.  That may not be always the case in the future, so we decided it would be better to let Sharpmake compete with alternatives outside Ubisoft.  The same way FastBuild was adopted outside Ubisoft after being mentionned at CppCon 2014, we think Sharpmake could be interesting outside Ubisoft as well, so it was presented in a lightning talk at CppCon 2017.

Sharpmake is shining with big C++ code bases that may be using C# and FastBuild and may be targetting video game consoles.  This is the context for many projects inside the game industry and we are curious to see how interesting it will make it outside Ubisoft.
========================================================================
    DYNAMIC LINK LIBRARY : CLRCPPProj Project Overview
========================================================================

AppWizard has created this CLRCPPProj DLL for you.  

This file contains a summary of what you will find in each of the files that
make up your CLRCPPProj application.

CLRCPPProj.vcxproj
    This is the main project file for VC++ projects generated using an Application Wizard. 
    It contains information about the version of Visual C++ that generated the file, and 
    information about the platforms, configurations, and project features selected with the
    Application Wizard.

CLRCPPProj.vcxproj.filters
    This is the filters file for VC++ projects generated using an Application Wizard. 
    It contains information about the association between the files in your project 
    and the filters. This association is used in the IDE to show grouping of files with
    similar extensions under a specific node (for e.g. ".cpp" files are associated with the
    "Source Files" filter).

CLRCPPProj.cpp
    This is the main DLL source file.

CLRCPPProj.h
    This file contains a class declaration.

AssemblyInfo.cpp
	Contains custom attributes for modifying assembly metadata.

/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.

/////////////////////////////////////////////////////////////////////////////
Platforms
=========


Open Platforms
--------------
Sharpmake ships with the platform extension *Sharpmake.CommonPlatforms.dll*.
This is a .NET class library that contains everything you need to generate
Visual Studio solutions for C++, C#, and C++/CLI code for Windows. Sharpmake
also has support for generating Xcode and GNU Make-based projects for Mac and
Linux.


NDA Platforms
-------------
Sharpmake was originally designed with built-in support for generating
solutions for video game consoles, which are platforms under strict NDA and
private SDKs. In order release Sharpmake to the open-source community, we had
to strip support for those NDA platforms out of the code base and create an
extension mechanism that allows Ubisoft developers to plug these platforms
back in to compile code that depend on it.

We have pulled the code out simply to comply with our NDA. If you are an
authorized developper outside of Ubisoft and would like to try Sharpmake to
generate projects for one of the platforms listed below, please contact one of
the Sharpmake maintainers on the GitHub repository at
https://github.com/UbisoftInc/Sharpmake

* Sony PlayStation 3
* Sony PlayStation 4
* Microsoft Xbox 360
* Microsoft Xbox One
* Nintendo Wii
* Nintendo WiiU
* Nintendo Switch
* nVidia Shield


Platform References
-------------------
Platforms are shipped as ordinary .NET class libraries that are referenced into
Sharpmake script. Because scripts are standalone though, there is no csproj to
add that reference to. Instead, you specify a platform reference with the
`Sharpmake.Reference` module attribute:
```cs
    [module: Reference("<path-of-your-platform>.dll")]
```

Sharpmake will look for DLL files in the executable's directory, although a
relative path from the executable should work.

Please note that *Sharpmake.CommonPlatforms.dll* is always referenced, so
putting `[module: Reference("Sharpmake.CommonPlatforms.dll")]` in your scripts
is redundant.

There is no problem referencing platforms directly from scripts. The platform
system is designed to isolate Sharpmake itself from the platforms, not the
scripts.
//
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the value or you can default the Revision and Build Numbers
// by using the '*' as shown below:
// This is the main DLL file.
// Updates the UI field (in degrees) from the reference value (a cosine).
// Updates the reference value (a cosine) from the UI field (in degrees).
/* = 0 */) : QWidget(parent), chilren(nullptr)
#!/usr/bin/env python
# Python script that grabs all the binaries produced when building the
# Sharpmake solution and copies them in a directory. (By default, in a
# directory named /deploy.) Without that script, you need to manually copy
# and paste the binaries of every platform implementation assembly you have
# built.
#
# You typically use it like this:
#     py deploy-binaries.py --config <Release or Debug> --target-dir=<Where to copy the binaries>
#
# Please use the -h or --help options for more info about the command line
# arguments that this script accepts.
#
# This script supports Python 3.
# Parses the command line options.
# Validate the configuration.
# Check if there are actual DLLs to copy, otherwise it must be compiled in VS.
# If the directory exists, make sure that it is empty.
################################################################################
# Simple wrapper class that represents an output folder,
# ie: bin/Release or bin/Debug
# Copy the DLL.
# Copy the executable.
# Copy the program debug database and mdb files.
# Copy the XML API doc if it exists.
# The list of files to copy. We omit the extension because we want to try to
# copy more files than just the DLL.
# Add the Extensions to the list of files to copy.
# Add the platforms to the list of files to copy.
# Finally, do the copying.
# Also copy the interop allowing the detection of visual studio
#!/usr/bin/env python
# Script that runs the functional tests on the Sharpmake. It does not take any argument.
#
# This script supports Python 3.
# Detects the path of the Sharpmake executable
# Builds the command line argument list.
# Those are not cross-platform!
# ms
# Change directory to the path of this.
# Run each test. Break and exit on error.
#!/usr/bin/env python
# Script that runs the regression tests on the output of Sharpmake. It does not
# take any argument.
#
# This script supports Python 3.
# same name as the directory for now
# Detects the path of the Sharpmake executable
# Builds the command line argument list.
# Those are not cross-platform!
# ms
# Change directory to the path of this.
# Run each test. Break and exit on error.
// W1: CS1570: XML comment on 'construct' has badly formed XML — 'reason
// W4: CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
// Platforms, Extensions and Samples
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This sample shows how to order the configure call within a project or a solution.
/// <summary>
/// Used to keep a track of executed configure methods
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This Path will be used to get all SourceFiles in this Folder and all subFolders
// if set to true, dependencies that the project uses will be copied to the output directory
// Set to null if you don't want to use Perforce
// Files put in this directory will be added to the project as resources (linked) build Action
// Files put in this directory will be added to the project as Content build Action
//Specify if we want the project file to be LowerCase
//-----------------OutputPath----------------------//
// Path where the binaries will be stored
// Visual Studio Default:
//conf.TargetPath = string.Format(@"[conf.ProjectPath]\{0}", OutputPathName);
// Choose between WindowsApplication ConsoleApplication or ClassLibraries
// Sets the ProjectFileName for project where ProjectFileName isn't modified by configurations
// Visual Studio Default:
// public static string DefaultProjectFileName = "[project.Name]";
// Sets where the project file (csproj) will be saved
//----------------IntermediatePath-----------------//
// Usually the obj folder created to link files
// Note: Due to a Visual Studio known Bug
// The obj folder might still be created, but should be empty at the end of the build, if removed the rebuild project fonction won't work
// Visual Studio Default:
//public static string IntermediatePath = string.Format(@"[conf.ProjectPath]\{0}", IntermediatePathName);
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This Path will be used to get all SourceFiles in this Folder and all subFolders
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This Path will be used to get all SourceFiles in this Folder and all subFolders
// if set to true, dependencies that the project uses will be copied to the output directory
// Set to null if you don't want to use Perforce
// Files put in this directory will be added to the project as resources (linked) build Action
// Files put in this directory will be added to the project as Content build Action
//Specify if we want the project file to be LowerCase
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This Path will be used to get all SourceFiles in this Folder and all subFolders
//Interops
//------------------------------------------------------------------------------
// <copyright file="HelloWorldCommand.cs" company="Company">
//     Copyright (c) Company.  All rights reserved.
// </copyright>
//------------------------------------------------------------------------------
/// <summary>
/// Command handler
/// </summary>
/// <summary>
/// Command ID.
/// </summary>
/// <summary>
/// Command menu group (command set GUID).
/// </summary>
/// <summary>
/// VS Package that provides this command, not null.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HelloWorldCommand"/> class.
/// Adds our command handlers for menu (commands must exist in the command table file)
/// </summary>
/// <param name="package">Owner package, not null.</param>
/// <summary>
/// Gets the instance of the command.
/// </summary>
/// <summary>
/// Gets the service provider from the owner package.
/// </summary>
/// <summary>
/// Initializes the singleton instance of the command.
/// </summary>
/// <param name="package">Owner package, not null.</param>
/// <summary>
/// This function is the callback used to execute the command when the menu item is clicked.
/// See the constructor to see how the menu item is associated with this function using
/// OleMenuCommandService service and MenuCommand class.
/// </summary>
/// <param name="sender">Event sender.</param>
/// <param name="e">Event args.</param>
// Show a message box to prove we were here
//------------------------------------------------------------------------------
// <copyright file="HelloWorldCommandPackage.cs" company="Company">
//     Copyright (c) Company.  All rights reserved.
// </copyright>
//------------------------------------------------------------------------------
/// <summary>
/// This is the class that implements the package exposed by this assembly.
/// </summary>
/// <remarks>
/// <para>
/// The minimum requirement for a class to be considered a valid package for Visual Studio
/// is to implement the IVsPackage interface and register itself with the shell.
/// This package uses the helper classes defined inside the Managed Package Framework (MPF)
/// to do it: it derives from the Package class that provides the implementation of the
/// IVsPackage interface and uses the registration attributes defined in the framework to
/// register itself and its components with the shell. These attributes tell the pkgdef creation
/// utility what data to put into .pkgdef file.
/// </para>
/// <para>
/// To get loaded into VS, the package must be referred by &lt;Asset Type="Microsoft.VisualStudio.VsPackage" ...&gt; in .vsixmanifest file.
/// </para>
/// </remarks>
// Info on this package for Help/About
/// <summary>
/// HelloWorldCommandPackage GUID string.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HelloWorldCommand"/> class.
/// </summary>
// Inside this method you can place any initialization code that does not require
// any Visual Studio service because at this point the package object is created but
// not sited yet inside Visual Studio environment. The place to do all the other
// initialization is the Initialize method.
/// <summary>
/// Initialization of the package; this method is called right after the package is sited, so this is the place
/// where you can put all the initialization code that rely on services provided by VisualStudio.
/// </summary>
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This Path will be used to get all SourceFiles in this Folder and all subFolders
// if set to true, dependencies that the project uses will be copied to the output directory
// Set to null if you don't want to use Perforce
// Files put in this directory will be added to the project as resources (linked) build Action
// Files put in this directory will be added to the project as Content build Action
//Specify if we want the project file to be LowerCase
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//schemas.datacontract.org/2004/07/CSharpWCFApp")]
//tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
//tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
//tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
//tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
// NOTE: You can use the "Rename" command on the "Refactor" menu to change the interface name "IService1" in both code and config file together.
// TODO: Add your service operations here
// Use a data contract as illustrated in the sample below to add composite types to service operations.
// NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Service1" in code, svc and config file together.
// NOTE: In order to launch WCF Test Client for testing this service, please select Service1.svc or Service1.svc.cs at the Solution Explorer and start debugging.
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// | Optimization.Release
// if not set, no precompile option will be used.
// | Optimization.Release
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This Path will be used to get all SourceFiles in this Folder and all subFolders
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Mapping of target name to all the files that should generate a moc call.
// Mapping of target name to all the files that should generate a rcc call.
// Mapping of target name to all the files that should generate a uic call.
// Files that should be moc'd but should not be compiled alone (they will be included in another cpp file).
// Files that should not be moc'd, skip scanning them.   They may have a Q_OBJECT, but it's fake.
// A way to give defines to moc.
// Stores the source file and target file of a moc operation.
// The true input file.
// Intermediate file used for a custom build step to produce the output from the input when the input is a source file.
// True if source file, false if header file.
// List of includes to use.
// List of force-includes
// Defines
// Put this one up one level, as it's just a boot strap file.
// BFF only.
// Makes a Vcxproj rule from a BFFOnly rule.
// Input is the intermediate file.
// We also depend on the actual input file.
// We get built too late to handle the initial resolve (as we need the files built afterwards), but we get the other two events.
// These are command line relative.
// These should be compiler relative instead of command line relative, but generally they're the same.
// Needed for vcx when the input is a source file, we need to specify a different rule based on an intermediate file.
// MocSourceAndTargetFile already setups up this data, we just need a non-bff rule.
// Stores the source file and target file of a rcc operation
// Stores the source file and target file of a uic operation
// If we partially matched the previous block, see if we match the rest.
// Call this from Project::ExcludeOutputFiles() to find the list of files we need to moc.
// This is after resolving files, but before filtering them, and before they get mapped to
// configurations, so this is a good spot to add additional files.
// Filter all the files by the filters we've already specified, so we don't moc a file that's excluded from the solution.
// Async load all the source files and look for Q_OBJECT that we want to keep.
// Compile a list of qrc and ui files.
// Wait for the moc files.
// These are the files we want to moc.
// Compile a list of files where we don't want to compile the moc output.
// Setup exclusions.
// We make the current output folder included directly so you can use the same #include directive to get the correct cpp file.
// We need to exclude the generation files folder from the build on all targets except our own.
// Build a list of all files to moc in this configuration.
// Add all the new source files to the project file.
// Create the intermediate file if it doesn't already exist.   Visual studio seems to ignore the custom build step unless the file already exists.
// Sharing violation is fine, it means we're about to create the file on another thread.
// Build a set of custom build steps from the source-target pairs.
// Copy the defines and add -D in front of them.
// Combine all the different includes into a single string pool.
// Quote the include strings, if need be.
// Build the string we need to pass to moc for all calls.
// If we have a precompiled header, we need the new cpp file to include this also.
// Technically we don't need to do this if the file is in ExcludeMocFromCompileRegex
// Apply these settings to all Moc targets.
// Call this in Project::PostLink().   We will build a list of custom build steps based on the resolved includes and defines.
// At this point all of our includes and defines have been resolved, so now we can compute the arguments to moc.
// Compute all the define and include parameters for this configuration.
// Tool for generation moc commands.
// Path the qt executables
// Path for generated QT files that don't depend on compiler parameters.
// Path to QT
// At this point all of our includes and defines have been resolved, so now we can compute the arguments to moc.
// Fast build fails regression tests because it embeds system and user paths, which aren't
// the same on each user's machine.
//AddTargets(new Target(
//        Platform.win64,
//        DevEnv.vs2017,
//        Optimization.Debug | Optimization.Release | Optimization.Retail,
//        OutputType.Dll,
//        Blob.FastBuildUnitys,
//        BuildSystem.FastBuild
//));
// if not set, no precompile option will be used.
// Fast build fails regression tests because it embeds system and user paths, which aren't
// the same on each user's machine.
//AddTargets(new Target(
//        Platform.win64,
//        DevEnv.vs2017,
//        Optimization.Debug | Optimization.Release | Optimization.Retail,
//        OutputType.Dll,
//        Blob.FastBuildUnitys,
//        BuildSystem.FastBuild
//));
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Extra user directory to load assembly from using statement detection
/// </summary>
/// <summary>
/// Extra user assembly to use while compiling
/// </summary>
/// <summary>
/// Extra user assembly file name to use while compiling
/// </summary>
/// <summary>
/// Source attribute parser to use to add configuration based on source code
/// </summary>
/// <summary>
/// Parsing flow parsers to use to add configuration based on source code
/// </summary>
// Alway compile to a physic dll to be able to debug
// bind the method
// Fix : Bug with -> Path.GetTempFileName
// http://msdn.microsoft.com/en-ca/library/windows/desktop/aa364991(v=vs.85).aspx
// Limit of 65535 limit on files when generating the temp file. New temp file will use
// a new Guid as filename and Sharpmake will clean the temporary files when done by aggregating
// the temp files and deleting them.
// eg. "C:\\fastbuild-work\\85f7d472c25d494ca09f2ea7fe282d50"
//string sourceTmpFile = Path.GetTempFileName();
// add using namespace...
// namespace name
// write method signature
// write method body
// build in memory
// Try to delete tmp file to prevent polution, but usefull while debugging
//if (!System.Diagnostics.Debugger.IsAttached)
// Scan assembly to find our tmp class
// get out method to bind into the delegate
// bind the method
// Generate an library
// Set the level at which the compiler
// should start displaying warnings.
// Set whether to treat all warnings as errors.
// Set compiler argument to optimize output.
// TODO : figure out why it does not work when uncommenting the following line
// cp.CompilerOptions = "/optimize";
// If any defines are specified, pass them to the CSC.
// Specify the assembly file name to generate
// Notes:
// Avoid getting spoiled by environment variables. 
// C# will give compilation errors if a LIB variable contains non-existing directories.
// Invoke compilation of the source file.
// Copy, as it may be modified when parsing other files
// Get all using namespace from sourceFiles
// Get parsers discovered while parsing these files
// We need to reparse all files currently in the list (partiallyParsedCount) again with the new parsers only,
// and all files discovered after this with all the parsers.
// First, update the parsing flow with the current line
// We only want to parse the lines inside valid blocks
// try to re use the same file name to not pollute tmp directory
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// backtrace one level in the path
// Try with the full path
// Try relative from the sharpmake file
// Try next to the Sharpmake binary
// In some cases, the main module is not the current binary, so try it if so
// Try in the current working directory
// Try using .net framework locations
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Only define settings for other project that depends on the current project ( include, lib, define, ... )
// Often used for 3rd party library
/// <summary>
/// This method attribute is used to specify the execution order of Configure(...) within
/// a project or a solution generation
/// 
/// If this attribute is not set a default value a 0 is used
/// 
/// The configure methods using this property are sorted ascendingly.
/// ex: ... -1 before 0 before 1 ...
/// 
/// See Configure method attribute and Configurable class for more details
/// </summary>
/// <summary>
/// Priority level of the configure method
/// </summary>
/// <summary>
/// Priority attribute of a configure method
/// </summary>
/// <param name="priority">Priority level of the configure method</param>
/// <summary>
/// Marks elements of fragments that should not be considered individual fragments.
/// </summary>
/// <remarks>
/// When an enumeration is marked with <see cref="Fragment"/>, Sharpmake normally ensure that
/// each element sets 1 and only 1 bit. However, it is often useful in a bit enum to combine
/// multiple bits together to create sets that go well together. To prevent Sharpmake from
/// considering those errors, you must decorate these enum members with
/// <see cref="CompositeFragmentAttribute"/>.
/// </remarks>
// Default, search the included file from the directory of the file doing the inclusion
// Search the included file from the directory of the file doing the inclusion and go back in directory structure until a match is found, use the farthest match
// Search the included file from the directory of the file doing the inclusion and go back in directory structure until a match is found, use the nearest match
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Output events
// Configure events
// Link events
// Generate events
// Keep all instances of manually built (and loaded) assemblies, as they may be needed by other assemblies on load (command line).
// Assembly Full Path -> Assembly
// Keep track of assemblies explicitly referenced with [module: Sharpmake.Reference("...")] in compiled files
// get references from the assembly, if any
// Add sharpmake assembly
// Add generators assembly to be able to reference them from .sharpmake.cs files
// Add attribute parsers
// Keep track of assemblies explicitly referenced by compiled files
// Expect a list of existing files with their full path
// Check if this is a built assembly of .sharpmake.cs files that is requested to be loaded
// Check if this is an assembly that if referenced by [module: Sharpmake.Reference("...")], is so, explicitly load it with its fullPath
// Create the project instance
// Pre event
// Create and Configure all possibles configurations.
// Post event
// Resolve [*]
// Would be more optimal to not generate the blobs, but simpler that way
// Create the project instance
// Pre event
// Create and Configure all possible configurations.
// Post event
// Resolve [*]
// Pre event
// Post event
// Pre event
// Post event
// start with huge projects to balance end of tasks
// start with huge solutions to balance end of tasks
// if this becomes too slow, we can move the creation of the list to the tasks per solution, and group them after
// Append generated projects, if any
// Pre event
// start with huge solutions to balance task with small one at the end.
// start with huge projects to balance task with small one at the end.
// Post events
// generate the project if it was explicitely queried by the user-code
// Load extensions if they were passed as references (platforms,
// entry point execution to add new ISourceAttributeParser...)
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Put this attribute on a static method that match the name and signature of an Event in the Builder class, and it will be called automatically.
/// </summary>
// Set an assembly event that can register generator's extension types on assembly load
// Check all already loaded assemblies for generator's extension types
/// <summary>
/// Scans a Sharpmake extension assembly for builder's event extension, and then hook them to the builder's events.
/// </summary>
/// <param name="extensionAssembly">The <see cref="Assembly"/> to scan.</param>
// Ignores if the assembly does not declare itself as a Sharpmake extension.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// No arguments except for executable
// use to not call more than one for method with parameter overloading...
// tell to use all loaded assembly
// in case of scripted c#, associated assembly may not be loaded in the current application domain.
// LC TODO : simplify this
// skip white space
// read parameter name
// skip white space
// read parameter value
// skip white space
// check is parameters have value
// skip '('
// skip ')'
// skip white space
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Default options is used to select an options if not set, default may be debug or release setting
/// see Sharpmake.Options class to know associated default setting to debug or release.
/// </summary>
// Solution Targets
// Type of Configuration object, must derive from TConfiguration
// Clear current configurations
// SMARTLINE TODO: Should be method line
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Orders the configure methods by the first definition of the configure.
/// With default order given by reflection:
/// http://pierrerebours.com/blog/order-returned-getmethods
/// The order can't be predicted.
/// </summary>
/// <summary>
/// Orders the configure methods by the first definition of the configure and the MetadataToken of the method.
/// e.g. 
/// class A     { virtual  void foo() { }   void bar() { } }
/// class B : A { override void foo() { }   void buz() { } }
/// Assuming foo(), bar() and buz() are marked as configure methods,
/// if A is generated, foo() will be called then bar() will be called
/// if B is generated, the call sequence will be foo(), bar(), buz()
/// </summary>
// Get the first declaring type
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// The DebugBreaks are used to help with debugging, allowing conditional breakpoints that are
/// built-in in code.  Feel free to add more as you need them while debugging Sharpmake. 
/// </summary>
// Context is used to enable or disable specific breaks.
// Feel free to add more in code for better granularity.
// Complete project path to break on; not case-sensitive
// Complete source path to break on; not case-sensitive
// Copyright (c) 2017 Ubisoft Entertainment
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Generates debug projects and solutions
/// </summary>
/// <summary>
/// Generates debug projects and solutions
/// </summary>
/// <param name="sources"></param>
/// <param name="arguments"></param>
/// <param name="startArguments"></param>
// Add sources
// Add references
// define class type
// add attribute [Sharpmake.Generate]
/// <summary>
/// Add references to Sharpmake to given configuration.
/// </summary>
/// <param name="conf"></param>
// debug solution generated from local build
// When running within Mono, s_sharpmakeApplicationExePath will at this point wrongly refer to the
// mono (or mono-sgen) executable. Fix it so that it points to Sharpmake.Application.exe.
/// <summary>
/// Set up debug configuration in user file
/// </summary>
/// <param name="conf"></param>
/// <param name="startArguments"></param>
// When running in Mono, we must escape "
// set paths
// add selected source files
// ensure that no file will be automagically added
// set up custom configuration only to setup project
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Open the stream and read it back.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Provides a static utility object of methods and properties to interact
/// with enumerated types.
/// </summary>
/// <summary>
/// Sets a flag bit to 0 or 1
/// </summary>
/// <summary>
/// Adds a flag to an enum
/// </summary>
/// <summary>
/// Removes a flag from an enum
/// </summary>
/// <summary>
/// Toggles a flag in an enum
/// </summary>
/// <summary>
/// Enumerates all flags set in the enum
/// </summary>
/// <summary>
/// Aggregates an enumerable of enum flags into one
/// </summary>
/// <summary>
/// Casts an generic Enum to a specific one
/// </summary>
/// <summary>
/// Casts an generic Enum to a specific one
/// </summary>
/// <summary>
/// Tries parsing a string as an enum type
/// </summary>
/// <summary>
/// Parses a string as an enum type. Returns the default value if it fails.
/// </summary>
/// <summary>
/// Enumerates the values of an enum
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Helper for loading Sharpmake extensions.
/// </summary>
/// <remarks>
/// Normally, this should be done using reflection-only load, but the problem is that you have
/// to resolve the dependencies yourself. Turns out that it's simpler to actually let the CLR
/// do a full load in a temporary <see cref="AppDomain"/> that we can trash later.
/// </remarks>
// If the assembly has already been loaded, check if it is.
// This is either a native C/C++ assembly, or there is a x86/x64 mismatch
// that prevents it to load. Sharpmake platforms have no reason to not be
// AnyCPU so just assume that it's not a Sharpmake extension.
/// <summary>
/// Releases the remote <see cref="AppDomain"/> if one was created.
/// </summary>
/// <summary>
/// Gets whether an assembly is a Sharpmake extension.
/// </summary>
/// <param name="assemblyPath">The path of the assembly to check whether it's an extension.</param>
/// <returns>`true` if it is an extension, `false` otherwise.</returns>
/// <remarks>
/// This method will instanciate a remote <see cref="AppDomain"/> if none was created.
/// </remarks>
// If it's this assembly, ignore of course.
/// <summary>
/// Loads a Sharpmake extension assembly.
/// </summary>
/// <param name="assemblyPath">The path of the assembly that contains the Sharpmake extension.</param>
/// <param name="fastLoad">Whether this method should load the assembly remotely first. See remarks.</param>
/// <returns>The loaded extension's <see cref="Assembly"/>.</returns>
/// <remarks>
/// Because loading an extension in a remote assembly for validation is expensive, this
/// method provides the <paramref name="fastLoad"/> argument which, when `false`, will load
/// the extension in the current <see cref="AppDomain"/> instead of doing so in a remote
/// <see cref="AppDomain"/>, testing whether it contains
/// <see cref="SharpmakeExtensionAttribute"/>, and then loading it again in
/// <see cref="AppDomain.CurrentDomain"/>. However, because it is impossible to unload a
/// loaded assembly from the CLR, if this method fail you have essentially polluted the
/// process' address space with an assembly that you may not need.
/// </remarks>
/// <summary>
/// Loads all Sharpmake extensions in a directory.
/// </summary>
/// <param name="directory">The path to the directory to scan for assemblies.</param>
/// <returns>A <see cref="IEnumerable{T}"/> that contains the loaded <see cref="Assembly"/>.</returns>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// TODO: Replace Tuple with ValueTuple once we support C# 8 because ValueTuple is
//       allocated on the stack. That should be faster here.
// First check if the visual studio path is overriden from default value.
// default fallback
// First, try WindowsSdkVerBinPath
// If it didn't contain rc.exe, fallback to WindowsSdkBinPath
// $(UM_IncludePath)
// $(KIT_SHARED_IncludePath)
// $(WinRT_IncludePath)
// $(UniversalCRT_IncludePath)
//
// Version 10.0.10240.0 and below only contain the UCRT libraries
// and headers, not the usual Win32 stuff. So if we are using
// version 10240 or older, also include the Windows 8.1 paths so we
// have a complete Win32 support.
//
// $(UniversalCRT_LibraryPath_x86) or $(UniversalCRT_LibraryPath_x64)
// $(WindowsSDK_LibraryPath_x86) or $(WindowsSDK_LibraryPath_x64)
/// <summary>
/// Gets whether a <see cref="DevEnv"/> is a Visual Studio version.
/// </summary>
/// <param name="devEnv">The <see cref="DevEnv"/> to check.</param>
/// <returns>`true` if <paramref name="devEnv"/> is a Visual Studio version, `false` otherwise.</returns>
/// <summary>
/// Gets whether two <see cref="DevEnv"/> values generate ABI-compatible binaries with
/// their respective C++ compiler.
/// </summary>
/// <param name="devEnv">The <see cref="DevEnv"/> to check for ABI-compatibility.</param>
/// <param name="other">The other <see cref="DevEnv"/> to check for ABI-compatibility with.</param>
/// <returns>`true` if ABI-compatible, `false` otherwise.</returns>
/// <exception cref="ArgumentException"><paramref name="devEnv"/> is not a Visual Studio version.</exception>
/// <remarks>
/// Only works for Visual Studio versions because other DevEnvs (such as Eclipse) are not
/// shipped with a compiler version.
/// </remarks>
// a VS version is obviously compatible with itself (identity check)
// VS2017 and VS2019 are guaranteed by Microsoft to be ABI-compatible with VS2015 for C++.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Determine if root directory exist in the fake tree
// Iterate over the provided path and validate that each part exist in the fake tree
// Setup filter if any
// Gather file items depending of filter and search option
// - TopDirectoryOnly (early exit)
// - AllDirectories
// Determine if root directory exist in the fake tree
// Iterate over the provided path and validate that each part exist in the fake tree
// Setup filter if any
// Gather file items depending of filter and search option
// - TopDirectoryOnly (early exit)
// - AllDirectories
// Iterate over folders' part
// Handle last item of the wildcard part, that is a file
// Cleanup path
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Full path to the %WINDIR% directory.
/// Usually equals to `C:\WINDOWS`.
/// </summary>
/// <summary>
/// Full path to the system dll folder where the ucrtbase.dll and api-ms-win-*.dll can be found.
/// If left null, dlls will be searched in the Redist\ucrt\DLLs\x64 subfolder of the WinSDK10 indicated in the KitsRootPaths.
/// </summary>
/// <summary>
/// Cache path can be
/// - a local path
/// - a network path
/// - an url if using the Ubisoft asset store plugin dll. In that case, the CachePluginDLLFilePath must
/// also be set to the filepath of the plugin dll. 
/// Url is the form
/// http://<address>|<project code>
/// Ex: http://assetstore/assetstoreservice/v0.3/assetstoreservice.svc|ACE_FB
/// </summary>
/// <summary>
/// Path to the fastbuild plugin dll if any. This typically will be the path to the Ubisoft asset store plugin DLL but could be any other compatible implementation.
/// CachePath must also be set to an appropriate url.
/// </summary>
// Cache configuration types
// Cache is disabled
// Cache is in read-only mode
// Cache is in write-only mode
// Cache is in read-write mode
/// <summary>
/// Cache configuration type for targets allowing the cache
/// </summary>
/// <summary>
/// Allows retention of build state across BFF changes. Requires v0.97
/// </summary>
// Limit of distributed workers. In FastBuild code the default is 15
// Configuration Files Generation Settings
/// <summary>
/// Include the IDE version in master bff filename
/// </summary>
/// <summary>
/// Separate the Master bff content per platform
/// </summary>
/// <summary>
/// The path of the master BFF is the folder relative to the source tree root.
/// ex: "projects"
/// </summary>
// PLEASE OVERRIDE this in your Sharpmake main
/// <summary>
/// The path to the executable used to start a fastbuild compilation. This path is relative to the source tree root.
/// ex: @"tools\FastBuild\start-fbuild.bat"
/// </summary>
// PLEASE OVERRIDE this in your Sharpmake main
/// <summary>
/// Can be set to false to override all FastBuild settings and disable it
/// </summary>
/// <summary>
/// Include the .bff files in the visual studio project files. Some programmer don't like that as when they do finds in Visual Studio, this
/// adds useless results to their finds whenever the string they are searching matches the name of a .cpp file.
/// </summary>
/// <summary>
/// If true, activate PDB Support for FastLink. Instead of having a single .pdb file for a whole project, split in many smaller .pdb files.
/// This is incompatible with FastBuildSettings.EnablePrecompiledHeaders.
/// </summary>
/// <summary>
/// Adds an alias to the Master Bff containing all the configs
/// This section is used for example in the submit assistant on AC
/// </summary>
/// <summary>
/// link.exe on win64 executes rc.exe by itself on some occasions
/// if it doesn't find it, link errors can occur, like:
/// fatal error LNK1158: cannot run rc.exe!
/// 
/// Setting this to true will have sharpmake detect if a rc.exe can
/// be found in the same folder as link.exe, and if not add the path
/// to one in the global settings Environment section, in the PATH variable
/// </summary>
/// <summary>
/// This is used to activate a workaround in fastbuild for the VS2012 preprocessor enum bug. 
/// 
/// Notes: Only win64 is affected by this bug it seems.
/// </summary>
/// <remarks>
/// VS 2012 sometimes generates corrupted code when preprocessing an already preprocessed file when it encounters
/// enum definitions.
/// Exemple:
///enum dateorder
///{
///    no_order, dmy, mdy, ymd, ydm
///};
/// Become :
///enummdateorder
///{
///    no_order, dmy, mdy, ymd, ydm
///};
/// And then compilation fails.
/// 
/// It seems that by adding a space between the enum keyword and the name it avoids that problem that looks like memory corruption in the compiler.
/// Also it seems that this doesn't occurs with VS2013.
/// </remarks>
// activate workaround for VS2012 enum bug(corrupted preprocessor output).
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Implementation of <see cref="IEqualityComparer{T}"/> that switches between case-sensitive
/// to case-insensitive based on the operating system.
/// </summary>
/// <remarks>
/// This class is a simple wrapper around either <see cref="StringComparer.Ordinal"/> (if the
/// host operating system is Linux or Max OSX) or
/// <see cref="StringComparer.OrdinalIgnoreCase"/> (on Windows operating systems.) You should
/// use an instance of this class as the comparer when creating collections indexed on with
/// file names.
/// </remarks>
// Using System::Object as the type because this can be both IComparer or IEqualityComparer.
/// <summary>
/// Creates a new <see cref="FileSystemStringComparer"/> instance whose case sensitivity is
/// the same as the case sensitivity of the host operating system's file system.
/// </summary>
/// <summary>
/// Creates a new <see cref="FileSystemStringComparer"/>.
/// </summary>
/// <param name="caseSensitive">The case-sensitivity mode to use in file name comparisons.</param>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Interface for objects that expose additional command line interfaces for a given platform.
/// This allows platforms to extend the command line interface of Sharpmake.
/// </summary>
/// <summary>
/// Validates that the command line arguments are valid.
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Interface for objects that describe the general properties of a platform.
/// </summary>
/// <summary>
/// Gets a simple string that describes the platform.
/// </summary>
/// <summary>
/// Gets whether this is a proprietary platform owned by Microsoft Corporation.
/// </summary>
/// <summary>
/// Gets whether this is a PC platform. (Mac, Windows, etc.)
/// </summary>
/// <summary>
/// Gets whether this platform supports Clang.
/// </summary>
/// <summary>
/// Gets whether this is a .NET platform.
/// </summary>
/// <summary>
/// Gets whether that platform supports shared libraries. (aka: dynamic link libraries.)
/// </summary>
/// <summary>
/// Gets whether precompiled headers are supported for that platform.
/// </summary>
/// <summary>
/// Gets an environment variable resolver suited for this platform.
/// </summary>
/// <param name="variables">A list of <see cref="VariableAssignment"/> that describe the environment variables to resolve.</param>
/// <returns>An <see cref="EnvironmentVariableResolver"/> instance suited for the platform.</returns>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Delegate template resolving to an external class (using an existing resolver)
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// TODO: It looks like this belongs to Sharpmake.Generators.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Note: .Net 4.5.2 lacks a NETFX tools release, so we use the previous version
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// This class contains some global msbuild settings
/// </summary>
/// <summary>
/// Allows overwriting the MSBuild platform folder used for a given platform and Visual Studio version. 
/// This is typically used if you want to put VS files in source control such as Perforce or nuget.
/// </summary>
/// <param name="devEnv">Visual studio version affected</param>
/// <param name="platform">Platform affected</param>
/// <param name="value">The location of the MSBuild platform folder. Warning: this *must* end with a trailing separator</param>
/// <returns></returns>
/// <summary>
/// Get the overwritten MSBuild platform folder used for a given platform and Visual studio version.
/// This is typically used if you want to put your VS files in source control such as Perforce or nuget.
/// </summary>
/// <param name="devEnv">Visual studio version affected</param>
/// <param name="platform">Platform affected</param>
/// <returns>the registered msbuild foldervalue for the requested pair. null if not found</returns>
// No override found
// Copyright (c) 2017 Ubisoft Entertainment
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This is applicable for arm architecture only
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Used to hold an option that's a path, either to a file or directory, that's gonna be resolved
/// </summary>
// Get the type of current options and make sure they are all off the same type
// find the latest added option of this type
// find the default options
// no found, return the default
// for class type , default value is NULL;
// find the default options
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Suppressed specific warnings in a C# project.
/// </summary>
/// <remarks>
/// This option generates a `NoWarn` element in the C# project XML.
/// </remarks>
/// <summary>
/// Creates a new <see cref="SuppressWarning"/> instance from a list of warning
/// code labels.
/// </summary>
/// <param name="warnings">The list of warning code labels to suppress. See remarks.</param>
/// <remarks>
/// If <paramref name="warnings"/> contains elements that are not C# compiler
/// warnings, those warning numbers *must* include the 2-letter prefix. For
/// example, NuGet warnings must be prefixed by `NU`. (ie: `NU1603`)
/// </remarks>
// Disable warning MSB3270 when disabled
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// same as Visual Studio version
// Visual Studio 2010
// Visual Studio 2012
// Visual Studio 2012 - Windows XP
// Visual Studio 2013
// Visual Studio 2013 - Windows XP
// Visual Studio 2015
// Visual Studio 2015 - Windows XP
// Visual Studio 2017
// Visual Studio 2017 - Windows XP
// Visual Studio 2019
// LLVM from Visual Studio 2012
// LLVM from Visual Studio 2015
// LLVM from Visual Studio 2017
// RTM (even if never named like that officially)
// November 2015 Update
// 2016 Anniversary Update
// 2017 Creators Update
// 2017 Fall Creators Update
// 1803, April 2018 Update
// 1809, October 2018 Update
// 1903, May 2019 Update
// default, only show the line number
// line + column
// context + caret
// clr
// clr:pure
// clr:safe
// clr:oldSyntax
// set as debug default because good enough for debug builds and much faster.
// The actual default for VS is Yes, but this will not work for old VS versions.
// false for a project dependency (only build order), true for a project reference
/// <summary>
/// Enable will write /DEBUG, and let MS linker decide to use FastLink or Full PDBs
///   If you want to force DEBUG:FULL, set both GenerateDebugInformation
///   and GenerateFullProgramDatabaseFile to Enable
/// </summary>
/// <summary>
/// Use clang-cl for compiling.  If this option is disabled, the Microsoft compiler (cl.exe) will be used instead.
/// </summary>
/// <summary>
/// Use lld-link for linking.  If this option is disabled, the Microsoft linker (link.exe) will be used instead.
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Optimization
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// NuGet package reference
// https://docs.microsoft.com/fr-fr/nuget/consume-packages/package-references-in-project-files
// <PackageReference> is new in VS2017 but in VS2015 you can use project.json (which comes from .NET Core toolchain)
// For VS2012 you can use packages.config and references
// to add dependencies for .NET Framework applications
// The first letter of assets values are in lower case (example: 'contentFiles')
// check package unicity
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <remarks>
/// See : https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets
/// </remarks>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Marks a concrete class as an implementation of given interfaces for given platforms. This
/// class must have a default constructor. Obviously, it also needs to actually implement the
/// interface it pretends to!
/// </summary>
/// <summary>
/// Gets the list of platforms that the object implements.
/// </summary>
/// <remarks>
/// As <see cref="Platform"/> is a bitfield, it is possible to specify multiple supported
/// platforms.
/// </remarks>
/// <summary>
/// Gets a collection of the <see cref="Type"/> of the interfaces that the object
/// implements and exposes.
/// </summary>
/// <summary>
/// Creates a new <see cref="PlatformImplementationAttribute"/> instance.
/// </summary>
/// <param name="platform">The implemented platform.</param>
/// <param name="ifaceTypes">An array that lists the <see cref="Type"/> of the interfaces that the object implements.</param>
/// <summary>
/// Marks a concrete class as a default implementation of given interfaces. This class must
/// have a default constructor. Obviously, it also needs to actually implement the interface it
/// pretends to!
/// </summary>
//
// Default implementations may not be super useful since you can just use base classes.
// Consider if we really need this, so we can remove it before we open-source Sharpmake.
//
/// <summary>
/// Gets the <see cref="Type"/> of the implemented interface.
/// </summary>
/// <summary>
/// Creates a new <see cref="PlatformImplementationAttribute"/> instance.
/// </summary>
/// <param name="ifaceTypes">An array that lists the <see cref="Type"/> of the interfaces that the object implements.</param>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Exception thrown by <see cref="PlatformRegistry.Get{TInterface}(Platform)"/> when
/// requesting an interface for an interface implementation that is not implemented for the
/// requested platform and has no default implementation either.
/// </summary>
/// <summary>
/// Exception thrown when <see cref="PlatformRegistry"/> finds two or more implementation of an
/// interface for a given platform.
/// </summary>
/// <summary>
/// Exception thrown when <see cref="PlatformRegistry"/> is unable to instanciate an interface
/// implementation object. This is usually because the type has no constructor, or the
/// constructor threw an exception.
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Global registry that maps platform-specific implementations of interfaces with a concrete
/// implementation. This facility allows to add and remove platform-specific generators without
/// having to break any code.
/// </summary>
/// <remarks>
/// This class searches for implementations using .NET reflection when the
/// type is loaded by looking for types marked with <see cref="PlatformImplementationAttribute"/>
/// in assemblies marked with <see cref="SharpmakeExtensionAttribute"/>. It may
/// also store default implementations to fall-back to when it does not find any implementation
/// for a requested platform and interface. Default implementations must be marked with
/// <see cref="DefaultPlatformImplementationAttribute"/>.
/// </remarks>
// Set an assembly resolver that can link to the loaded extensions.
// Query all loaded assemblies for types that are platform-specific implementations.
// Restrict to assemblies decorated with attribute ContainsPlatformImplementations so
// it doesn't search uselessly through the standard .NET class libraries.
/// <summary>
/// Occurs when an extension assembly containing platform implementations is loaded.
/// </summary>
/// <summary>
/// Scans a Sharpmake extension assembly for the platform implementations, and then
/// register those implementations.
/// </summary>
/// <param name="extensionAssembly">The <see cref="Assembly"/> to scan.</param>
/// <exception cref="ArgumentNullException"><paramref name="extensionAssembly"/> is `null`.</exception>
/// <exception cref="InvalidOperationException"><paramref name="extensionAssembly"/> was loaded in reflection-only.</exception>
/// <exception cref="NotSupportedException"><paramref name="extensionAssembly"/> is a dynamically compiled assembly.</exception>
// Don't support loading dynamically compiled assemblies
// Ignores if the assembly does not declare itself as a Sharpmake extension.
// Don't support loading dynamically compiled assemblies because we need the location
// to verify that we are not loading the same dll twice.
// Has that assembly already been checked for platform stuff?
// Go through all the types declared in the Sharpmake extension assembly and look
// up for platform implementations.
// Make sure that our platform implementations are unique.
// Go through all types again and this time get the default implementations.
// TODO: Check if the attribute is given to different types and throw an
//       error if it does, just like for the platform implementations do
//       by calling EnsureUniquePlatformImplementations(typeInfo). That's
//       assuming that we don't scrap the concept of a default
//       implementation though.
/// <summary>
/// Registers a platform implementation given an implementation class.
/// </summary>
/// <param name="implType">The <see cref="Type"/> of the implementation class.</param>
/// <exception cref="ArgumentNullException"><paramref name="implType"/> is `null`.</exception>
/// <exception cref="ArgumentException"><paramref name="implType"/> does not have a default constructor, or is an abstract class or an interface.</exception>
/// <remarks>
/// This method will search through the <see cref="PlatformImplementationAttribute"/> on
/// <paramref name="implType"/> to find what platform/interface pairs to register.
/// </remarks>
/// <summary>
/// Registers a platform and an interface to a given implementation class.
/// </summary>
/// <param name="platform">The <see cref="Platform"/> to register to.</param>
/// <param name="ifaceType">The interface to register to.</param>
/// <param name="implType">The <see cref="Type"/> of the implementing class. See remarks.</param>
/// <exception cref="ArgumentNullException"><paramref name="ifaceType"/> or <paramref name="implType"/> are `null`.</exception>
/// <exception cref="ArgumentException"><paramref name="implType"/> does not implement <paramref name="ifaceType"/>, or <paramref name="implType"/> does not have a default constructor, or <paramref name="implType"/> is an abstract class or an interface.</exception>
/// <remarks>
/// <para>
/// This method ignores the attributes on <paramref name="implType"/> and registers it for
/// <paramref name="platform"/> and <paramref name="ifaceType"/>.
/// </para>
/// <para>
/// <paramref name="implType"/> must have a default constructor because this method will
/// attempt to create an instance.
/// </para>
/// </remarks>
/// <summary>
/// Registers a platform and an interface to an object that implements the interface.
/// </summary>
/// <param name="platform">The <see cref="Platform"/> to register to.</param>
/// <param name="ifaceType">The interface to register to.</param>
/// <param name="implementation">An <see cref="Object"/> that implements <paramref name="ifaceType"/>.</param>
/// <exception cref="ArgumentNullException"><paramref name="ifaceType"/> or <paramref name="implementation"/> are `null`.</exception>
/// <exception cref="ArgumentException"><paramref name="implementation"/> does not implement <paramref name="ifaceType"/>.</exception>
/// <remarks>
/// This method ignores the attributes on <paramref name="implementation"/>'s
/// <see cref="Type"/> and registers it for <paramref name="platform"/> and
/// <paramref name="ifaceType"/>.
/// </remarks>
/// <summary>
/// Registers a platform implementation given an implementation class.
/// </summary>
/// <typeparam name="TImplementation">The type of the implementation class.</typeparam>
/// <remarks>
/// This method will search through the <see cref="PlatformImplementationAttribute"/> on
/// <typeparamref name="TImplementation"/> to find what platform/interface pairs to register.
/// </remarks>
/// <summary>
/// Registers a platform and an interface to a given implementation class.
/// </summary>
/// <typeparam name="TInterface">The interface to register to.</typeparam>
/// <typeparam name="TImplementation">The type of the implementing class.</typeparam>
/// <param name="platform">The <see cref="Platform"/> to register to.</param>
/// <remarks>
/// This method ignores the attributes on <typeparamref name="TImplementation"/> and
/// registers it for <paramref name="platform"/> and <typeparamref name="TInterface"/>.
/// </remarks>
/// <summary>
/// Registers a platform and an interface to an object that implements the interface.
/// </summary>
/// <typeparam name="TInterface">The interface to register to.</typeparam>
/// <param name="platform">The <see cref="Platform"/> to register to.</param>
/// <param name="implementation">A <typeparamref name="TInterface"/> that provides the implementation.</param>
/// <exception cref="ArgumentNullException"><paramref name="implementation"/> is `null`.</exception>
/// <remarks>
/// This method ignores the attributes on <paramref name="implementation"/>'s
/// <see cref="Type"/> and registers it for <paramref name="platform"/> and
/// <typeparamref name="TInterface"/>.
/// </remarks>
/// <summary>
/// Checks if the registry contains an implementation of a given interface for a given
/// platform.
/// </summary>
/// <typeparam name="TInterface">The type of the interface needed.</typeparam>
/// <param name="platform">The platform for which the interface must be implemented.</param>
/// <returns>`true` if the interface is there, `false` otherwise.</returns>
/// <summary>
/// Gets the default implementation of a given interface. This is what is returned if an
/// interface is not implemented for any platform.
/// </summary>
/// <typeparam name="TInterface">The type of the interface to get.</typeparam>
/// <returns>The default interface, as a <typeparamref name="TInterface"/> instance.</returns>
/// <exception cref="PlatformNotSupportedException">There is no default implementation of <typeparamref name="TInterface"/>.</exception>
/// <summary>
/// Gets the default implementation of a given interface if it has one. Does not throw if
/// there is no default implementation.
/// </summary>
/// <typeparam name="TInterface">The type of the interface to get.</typeparam>
/// <returns>The default interface, as a <typeparamref name="TInterface"/> instance, if such an interface exists. Returns `null` if there is no default interface.</returns>
/// <summary>
/// Gets the implementation of a given interface for a given platform. If no implementation
/// was defined for that platform, returns the default implementation instead, if one was
/// defined.
/// </summary>
/// <typeparam name="TInterface">The type of the interface to get.</typeparam>
/// <param name="platform">The platform whose implementation is requested.</param>
/// <returns>The implementation of <typeparamref name="TInterface"/> for a given platform.</returns>
/// <exception cref="PlatformNotSupportedException">There is neither an implementation nor a default implementation of <typeparamref name="TInterface"/> for that platform.</exception>
/// <summary>
/// Gets the implementation of a given interface for a given platform. If no implementation
/// was defined for that platform, returns the default implementation instead, if one was
/// defined. Does not throw an exception if no platform implementation is found.
/// </summary>
/// <typeparam name="TInterface">The type of the interface to get.</typeparam>
/// <param name="platform">The platform whose implementation is requested.</param>
/// <returns>The implementation of <typeparamref name="TInterface"/> for a given platform, or `null` if no such implementation or default implementation exists for that platform.</returns>
/// <summary>
/// Gets the list of platforms for which a given interface is available.
/// </summary>
/// <typeparam name="TInterface">The type of the interface to check availability for.</typeparam>
/// <returns>The collection of available platforms.</returns>
// If it's a duplicate of something we already have registered and the
// implementation has the exact type we desire, ignore.
// Checks for duplicates in the list of implementations to add.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// IParsingFlowParser classes must also implement ISourceParser.
/// Given the lines of a file, they can decide whether the other parsers should parse the current line or not. 
/// </summary>
/// <summary>
/// Returns true if the line should be parsed by the other source parsers.
/// </summary>
/// <summary>
/// Called when a file is being parsed
/// </summary>
/// <summary>
/// Called when a file is done being parsed
/// </summary>
/// <summary>
/// The parsing flow parser that parses the #if, #elif, #else inside the Sharpmake files
/// Depending if the current block is defined (lets say #if SYMBOL, where SYMBOL has been passed in the application's parameters)
/// This parser is used to prevent parsing Includes and References from blocks are not defined.
/// </summary>
// These regexes DO NOT support complex expressions like #if (A || !B)
// It is possible that the parser might be called from different threads, the state of the parser must be per thread so that we don't mix files.
// Are we in a #if block ?
// Are we in a #elif block ?
// Are we in a #else block ?
// Are we in a #endif block ?
// If one branch of the 'if' has been resolved, than don't evaluate other branches
// The current line being parsed is defined if all nested 'if' blocks are defined.
// The current line being parsed is defined if all nested 'if' blocks are defined or if we are not in any 'if' block.
// No logic here yet
// Basic validations so that we can catch early malformed Sharpmake files
/// <summary>
/// All nested condition blocks parsed so far (#if inside #if)
/// </summary>
/// <summary>
/// The current code block is defined if we are currently parsing a line that is inside a block where all nested conditions are defined.
/// </summary>
/// <summary>
/// Did at least one branch of the (if, elif, else) branches has been resolved (did we entered one of the block) ?
/// </summary>
/// <summary>
/// Is the current block of code being defined (condition evaluated as true) ?
/// </summary>
/// <summary>
/// Name of the define being tested.
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Options to specify the properties of the dependencies between projects. This is used with
/// <see cref="Project.Configuration.AddPublicDependency"/> and
/// <see cref="Project.Configuration.AddPrivateDependency"/>.
/// </summary>
/// <summary>
/// The dependent project must be built after the dependency.
///  Otherwise the two files have no dependencies.
/// </summary>
/// <summary>
/// The dependent project inherits the library files of the dependency.
/// </summary>
/// <summary>
/// The dependent project inherits the library paths of the dependency.
/// Valid only when the project is not a C or a C++ project.
/// </summary>
/// <summary>
/// The dependent project inherits the include paths of the dependency.
/// Valid only when the project is not a C or a C++ project.
/// </summary>
/// <summary>
/// The dependent project inherits the defined symbols of the dependency.
/// Valid only when the project is not a C or a C++ project.
/// </summary>
/// <summary>
/// The dependant project inherits the `using` paths of the dependency.
/// Valid only if the project is a C# project and uses Microsoft C++/CX extensions .
/// </summary>
/// <summary>
/// Specifies that the dependant project inherits the dependency's library files, library
/// paths, include paths and defined symbols.
/// </summary>
/// <summary>
/// Specifies that the dependant project inherits the dependency's include paths and
/// defined symbols, but not it's library files or library paths. Use this for header-only
/// C++ libraries.
/// </summary>
////////////////////////////////////////////////////////////////////////
// OLD AND DEPRECATED FLAGS
/// <summary>
/// Visibility types for inter-project dependency relationships. This setting is
/// usually only meaningful in cases where a library depends on another library because
/// one of its executables has an end-point in the other's dependency graph.
/// </summary>
/// <summary>
/// Specifies that the dependency relationship is private. The dependent project will not
/// expose the dependency's exported properties, such as it's include paths.
/// </summary>
/// <remarks>
/// A library that has a private dependency relationship with another library will use that
/// library internally when compiled but will not expose the private dependency's
/// exported properties (library paths, include paths, etc.) when other projects link to
/// it. For example, if library B has a private dependency on C and A wants to link to B,
/// A will not inherit any of C's include paths, library paths, etc.
/// </remarks>
/// <summary>
/// Specifies that the dependency relationship is public. The dependent project will expose
/// the dependency's exported properties as it's own.
/// </summary>
/// <remarks>
/// A library that has a public dependency relationship with another library will expose
/// that dependency's include paths, library paths, etc. to any project that has a public
/// dependency on it. For example, if library B has a public dependency on C and A wants to
/// link to B, A will inherit all of C's include paths, library paths, etc.
/// </remarks>
/// <summary>
/// Holds the properties of an individual project's configuration. This holds all the
/// properties and settings needed to generate the configuration.
/// </summary>
/// <remarks>
/// This class is at the core of Sharpmake's generation engine. Methods marked with
/// <see cref="Generate"/> are passed an instance of this class and set its properties
/// accordingly in order to generate the configuration. Please refer to the (Sharpmake
/// documentation and tutorials)[https://github.com/ubisoftinc/Sharpmake/wiki] for a
/// full explanation.
/// <para>
/// Unless specified otherwise, all string properties can contain tokens that are resolved
/// after the configuration phase, during the generation. Those tokens are inserted
/// using square brackets. For example, you can write the following to refer to the
/// project's */src/code.cpp* file in it's root.
/// <c>
///     conf.Property = "[project.SourceRootPath]/src/code.cpp";
/// </c>
/// This is very useful for paths because they often need to combine path elements, and
/// this is much less verbose than <c>Path.Combine</c>. This is also useful because Sharpmake
/// currently doesn't support string interpolation (it uses Roslyn to compile the scripts).
/// Note, however, these tokens don't understand the scope in which they're used and
/// only support the following source objects:
///     * `project`
///     * `solution`
///     * `conf`
/// </para>
/// <note>
/// There is one important caveat for C++ projects in relation to exceptions. Because
/// Sharpmake was originally designed as an internal tool to build engines for interactive
/// games at Ubisoft, **C++ exceptions are disabled by default**. If your project uses
/// exceptions, they currently must be manually re-enabled by adding the correct exception
/// setting. For Visual Studio projects, add the correct value of
/// <see cref="Options.Vc.Compiler.Exceptions"/> to the
/// <see cref="Sharpmake.Configuration.Options"/> property, as in the example below.
/// <code language=cs>
///     conf.Options.Add(Sharpmake.Options.Vc.Compiler.Exceptions.Enable);
/// </code>
/// </note>
/// <note>
/// In addition, you can selectively enable and disable exceptions on source files on a
/// file-by-file basis using <see cref="SourceFilesExceptionsEnabled"/>,
/// <see cref="SourceFilesExceptionsEnabledWithExternC"/> or
/// <see cref="SourceFilesExceptionsEnabledWithSEH"/>.
/// </note>
/// <note>
/// Finally, source files compiled in a context that requires C++ exceptions
/// (such as source files compiled with the WinRT extensions)
/// are implicitly added to <see cref="SourceFilesExceptionsEnabled"/>.
/// </note>
/// </remarks>
/// <summary>
/// Interface for classes that implement platform-specific tasks for generating
/// configurations. An implementation of this interface is required when generating
/// for a platform.
/// </summary>
/// <remarks>
/// Implementations can assume that they will only be called by Sharpmake, and that the
/// arguments are sane (ex: <see cref="SetupStaticLibraryPaths"/> is passed valid (non-null)
/// configurations).
/// </remarks>
/// <summary>
/// Sets up the library paths when adding a dependency on a dynamic library.
/// </summary>
/// <param name="configuration">The <see cref="Configuration"/> instance on which
///        to set the paths.</param>
/// <param name="dependencySetting">The <see cref="DependencySetting"/> bitflags
///        that specify the properties of the dependency relationship.</param>
/// <param name="dependency">The <see cref="Configuration"/> instance of the dependency.</param>
/// <summary>
/// Sets up the library paths when adding a dependency on a static library.
/// </summary>
/// <param name="configuration">The <see cref="Configuration"/> instance on which to 
///        set the paths.</param>
/// <param name="dependencySetting">The <see cref="DependencySetting"/> bitflags
///        that specify the properties of the dependency relationship.</param>
/// <param name="dependency">The <see cref="Configuration"/> instance of the dependency.</param>
/// <summary>
/// Gets the default file extension for a given output type.
/// </summary>
/// <param name="outputType">The <see cref="OutputType"/> whose default file extension we are seeking.</param>
/// <returns>A string, containing the file extension (not including the dot (.) prefix).</returns>
/// <summary>
/// Gets the library paths native to the specified configuration's platform.
/// </summary>
/// <param name="configuration">The <see cref="Configuration"/> to get the paths for.</param>
/// <returns>A list of library paths for the specified configuration and platform.</returns>
/// <summary>
/// Gets the number of generated <see cref="Configuration"/> instances.
/// </summary>
/// <summary>
/// Maps the .NET <see cref="OutputType"/> into its native counterpart.
/// </summary>
/// <param name="type">Specifies the <see cref="OutputType"/> to map.</param>
/// <returns> Returns the mapped <see cref="OutputType"/> value.</returns>
/// <remarks>
/// This method maps values of <see cref="OutputType"/> in the following way:
///     * <see cref="OutputType.DotNetConsoleApp"/> and <see cref="OutputType.DotNetWindowsApp"/> are mapped to <see cref="OutputType.Exe"/>.
///     * <see cref="OutputType.DotNetClassLibrary"/> is mapped to <see cref="OutputType.Dll"/>.
///     * Other values are mapped to themselves.
/// </remarks>
/// <summary>
/// Output types for the <see cref="Configuration"/>.
/// </summary>
/// <summary>
/// Output is an executable/>.
/// </summary>
/// <summary>
/// Output is a static library/>.
/// </summary>
/// <summary>
/// Output is a DLL(Dynamic Link library)/>.
/// </summary>
/// <summary>
/// The project does not produce any code. It is either a header-only library, or a
/// utility project that is used as part of the build system but does not produce
/// any code.
/// </summary>
/// <summary>
/// The output is an executable .NET program that opens a console window on
/// startup. The extension is always <c>.exe</c>.
/// </summary>
/// <summary>
/// The output is a .NET class library that can be added as a reference. The
/// extension is always <c>.dll</c>.
/// </summary>
/// <summary>
/// The output is an executable .NET program that does not display a console window
/// on startup. The extension is always <c>.exe</c>.
/// </summary>
/// <summary>
/// The output is an iOS app.
/// </summary>
/// <summary>
/// The output is an iOS test bundle.
/// </summary>
/// <summary>
/// Specifies no output. Do not use this.
/// </summary>
/// <summary>
/// Methods to list source files.
/// </summary>
/// <remarks>
/// This is only used for FASTBuild generation.
/// </remarks>
/// <summary>
/// Explicitly refer to files in FASTBuild configuration files using file lists.
/// </summary>
/// <summary>
/// Implicitly refer to files in FASTBuild configuration files using paths and
/// exclusion file lists.
/// </summary>
/// <summary>
/// FASTBuild deoptimization strategies for writable files.
/// </summary>
/// <summary>
/// No deoptimization. This is the default.
/// </summary>
// default
/// <summary>
/// Deoptimize all files with a writable flag on the file system.
/// </summary>
/// <remarks>
/// This is useful when using Perforce, since files that have not been modified are
/// typically read-only. That is, this option enables automatic deoptimization of modified files.
/// </remarks>
/// <summary>
/// When the <c>FASTBUILD_DEOPTIMIZE_OBJECT</c> token is specified,
/// deoptimize files with writable status. 
/// </summary>
/// <remarks>
/// This is useful when using Perforce, since files that have not been modified are
/// typically read-only. That is, this enables automatic deoptimization of modified files.
/// </remarks>
//
// Probably want to support deoptimiztion for other SSCs, ie: files that are changed or staged on Git.
//
/// <summary>
/// When the output is an executable program, this lists the levels of privileges that
/// it can require upon execution, using Windows' User Account Control (UAC.)
/// </summary>
/// <summary>
/// Use the same privileges as the process that created the program.
/// </summary>
/// <summary>
/// Use the highest privileges available to the current user.
/// </summary>
/// <summary>
/// Always run with administrator privileges. This will usually open a UAC dialog
/// box for the user.
/// </summary>
// None is default if Export
/// <summary>
/// Gets or sets the output type of the current configuration, exe, lib or dll.
/// </summary>
/// <summary>
/// Gets or sets the project's output extension (ie: .dll, .self, .exe, .dlu).
/// </summary>
/// <summary>
/// Gets or sets whether to copy output files to the output directory.
/// </summary>
/// <remarks>
/// This setting is provided for libraries, because they are usually intermediate
/// artifacts during the compilation process and do not need to be in the final output
/// directory unless it's necessary. 
/// <para>
/// The default is <c>false</c>. Setting this to <c>true</c> will force the generators
/// to copy the library artifacts.
/// </para>
/// <para>
/// If <see cref="Output"/> is set to a value that corresponds to an executable program
/// (ie: <see cref="OutputType.Exe"/>), the generators disregard this property and
/// always copy the results.
/// </para>
/// </remarks>
/// <summary>
/// Gets or sets whether dependent projects will copy their debugging database to the
/// target path of their dependency projects. The default value is <c>true</c>.
/// </summary>
// Xcopy parameters
// /d           Copy file only if the source time is newer than the destination time.
// /F           Displays full source and destination file names while copying.
// /R           Overwrites read-only files.
// /H           Copies hidden and system files.
// /V           Verifies the size of each new file.
// /Y           Suppresses prompting to confirm whether you want to overwrite an existing destination file or not.
/// <summary>
/// Command to execute <see cref="TargetCopyFiles"/>.
/// </summary>
/// <param name="relativeSourcePath">The relative path to the files.</param>
/// <param name="relativeTargetPath">The relative path to the target directory.</param>
/// <param name="workingPath">The path to the working directory.</param>
/// <returns>The mapped <see cref="OutputType"/> value as a string.</returns>
/// <summary>
/// Setting this boolean to true forces Sharpmake to fill in the AD fields in the current static
/// library project.
/// </summary>
/// <remarks>
/// Since Sharpmake handles all dependencies, using an <c>AdditionalDependencies</c> field in
/// your project is typically useless for static libraries. However, when dependents aren't
/// generated by Sharpmake, (that is, when a .sln contains Sharpmake generated projects as static
/// libraries as well as manually maintained dependent projects) this feature can be useful.
/// <para>
/// The default is <c>false</c>. Set this boolean to <c>true</c> to make Sharpmake fill in the fields
/// for the current static library project.
/// </para>
/// </remarks>
/// <summary>
/// Gets or sets the name of the project, as viewed by the configuration.
/// </summary>
/// <remarks>
/// Under normal circumstances, you should not need to edit this property. The name of
/// the project is set in <see cref="Name"/> and this is the default value.
/// </remarks>
/// <summary>
/// Gets or sets the file name for the generated project, without any file extension.
/// (ex: `"MyProject"`)
/// </summary>
/// <summary>
/// Gets or sets the directory in which the project will be generated.
/// </summary>
/// <remarks>
/// By default, this is set to the same directory that this Sharpmake script is running in.
/// </remarks>
/// <summary>
/// Gets or sets the name of the generated .NET assembly.
/// </summary>
/// <remarks>
/// Ignored in projects that are not built on the .NET framework.
/// </remarks>
/// <summary>
/// Gets the full path of the project file, including the directory and the
/// file name. This doesn't include the file extension which depends on
/// the generator.
/// </summary>
/// <summary>
/// Gets or sets the solution folder that will hold the Visual Studio solution for this project.
/// </summary>
/// <remarks>
/// Ignored unless building a Visual Studio project.
/// <para>
/// To place the project in a sub-directory, use a `/` as a directory separator.
/// </para>
/// </remarks>
/// <summary>
/// Gets or sets the suffix to use in <see cref="LinkerPdbSuffix"/>.
/// If unset, the pdb file names will be the target name with a suffix and the .pdb extension.
/// </summary>
/// <remarks>
/// Always put a separate pdb for the compiler in the intermediate path to avoid
/// conflicts with the one from the linker.
/// This helps the following things:
/// 1. Makes the linker go faster
/// 2. Avoid pdbs for dlls and .exe(s) growing and growing at each link
/// 3. Makes incremental linking work better.
/// </remarks>
/// <summary>
/// Gets or sets the directory and file name of the Visual Studio *linker* PDB file,
/// including the file extension.
/// </summary>
/// <remarks>
/// Used only when generating a Visual Studio project.
/// <para>
/// The default value is:
/// <c>[conf.TargetPath]/[conf.TargetFileFullName][conf.LinkerPdbSuffix].pdb</c>.
/// </para>
/// <para>
/// Always put a separate PDB for the compiler in the intermediate path to avoid
/// conflicts with the one from the linker.
/// </para>
/// </remarks>
/// <summary>
/// Gets or sets the suffix to use in <see cref="CompilerPdbFilePath"/>.
/// </summary>
/// <remarks>
/// Provided only as a convenience as it is only used in the default
/// value of <see cref="CompilerPdbFilePath"/> to assign a suffix to the PDB. If you
/// change <see cref="CompilerPdbFilePath"/> so that it doesn't use this property,
/// then it isn't used.
/// </remarks>
/// <summary>
/// Gets or sets the directory and file name of the Visual Studio <i>compiler</i> PDB file,
/// including the file extension.
/// </summary>
/// <remarks>
/// Used only when generating a Visual Studio project.
/// <para>
/// The default value is
/// <c>[conf.IntermediatePath]/[conf.TargetFileFullName][conf.CompilerPdbSuffix].pdb</c>.
/// </para>
/// <para>
/// The default file name in <see cref="CompilerPdbFilePath"/> in Sharpmake does not
/// match its default file name in Visual Studio for compiler PDB, which is <c>VCx0.pdb</c>.
/// See <externalLink>
/// <linkText> /Fd (Program Database File Name)</linkText>
/// <linkUri>https://msdn.microsoft.com/en-us/library/9wst99a9.aspx</linkUri>
/// </externalLink>.
/// If you mean to use Visual Studio's default value, you must set this property to <c>null</c>.
/// </para>
/// <para>
/// Always put a separate PDB for the compiler in the intermediate path to avoid
/// conflicts with the one from the linker.
/// </para>
/// </remarks>
/// <summary>
/// Gets or sets whether <see cref="CompilerPdbFilePath"/> and
/// <see cref="LinkerPdbFilePath"/> are relative.
/// </summary>
/// <summary>
/// Gets or sets the suffix of the manifests when building a project that uses
/// Microsoft's C++/CX with the build option *Embed Manifest*.
/// </summary>
/// <summary>
/// Prefix for compiled embedded resource files
/// </summary>
/// <summary>
/// Gets or sets the directory where the compiler will place the intermediate files.
/// </summary>
/// <remarks>
/// This corresponds to the <i>Intermediate</i> directory in the Visual Studio project
/// configuration.
/// <para>
/// The default value is <c>[conf.ProjectPath]/obj/[target.Platform]</c>.
/// </para>
/// </remarks>
/// <summary>
/// Base Intermediate devEnv directory. Only used in csproj
/// </summary>
/// <summary>
/// Gets the list of defined symbols to use when compiling the project.
/// </summary>
/// <remarks>
/// Generators are allowed to add new symbols to this list when needed. For example,
/// you don't need to explicitly add <c>_WIN32</c> to the list when building for Windows.
/// <para>
/// These symbols are defined during the compilation, not when the project is used as a library.
/// The symbols that need to be defined when this project is being consumed as a
/// library, must be added to <seealso cref="ExportDefines"/> instead.
/// </para>
/// </remarks>
/// <summary>
/// Gets the list of symbols that are exported when the project is being used as a
/// library.
/// </summary>
/// <remarks>
/// Not used if the project is not a library.
/// <para>
/// The symbols defined in this list are not defined when building the library. You
/// must define them in <seealso cref="Defines"/>.
/// </para>
/// </remarks>
/// <summary>
/// Excludes the specified files from the build. Removes the files in this list from
/// project.SourceFiles and matches project.SourceFilesRegex.
/// </summary>
/// <summary>
/// Gets a list of regular expressions that are used to filter matching source files
/// out of the build.
/// </summary>
/// <summary>
/// Gets a list of regular expressions that are used to filter matching source files
/// into the build.
/// </summary>
/// <summary>
/// Source files that match this regex will be compiled as C Files.
/// </summary>
/// <summary>
/// Source files that match this regex will be compiled as CPP Files.
/// </summary>
/// <summary>
/// Source files that match this regex will be compiled as CLR Files.
/// </summary>
/// <summary>
/// Source files that match this regex will be excluded from the CLR Files list.
/// Used on C++ projects rather than C++/CLI projects.
/// </summary>
/// <summary>
/// Source files that match this regex will be explicitly not compiled as CLR files.
/// Used on C++/CLI projects to force certain files to be compiled without the <c>/clr</c> switch.
/// </summary>
/// <summary>
/// Gets a list of include paths for compiling C and C++ projects.
/// </summary>
/// <remarks>
/// If the project is a library, the include paths are imported in dependent
/// projects. Use <see cref="IncludePrivatePaths"/> if you need to use include paths
/// that are only used to compile the library.
/// </remarks>
/// <summary>
/// Gets a list of include paths for compiling C and C++ libraries that are not
/// shared with dependant projects.
/// </summary>
/// <summary>
/// Include paths for resource compilation.
/// These paths will propagate via the IncludePaths DependencySetting, use ResourceIncludePrivatePaths if you want to avoid this
/// </summary>
/// <summary>
/// Include paths for resource compilation.
/// These paths are received from dependencies via the IncludePaths DependencySetting.
/// </summary>
/// <summary>
/// Include paths for resource compilation.
/// These paths will never propagate.
/// </summary>
/// <summary>
/// Gets a list of compiler options to send when calling the compiler.
/// </summary>
/// <remarks>
/// Generators are allowed to transform the textual representation of the options added
/// here so that they work with the shell of the operating system or with the makefile
/// format.
/// <list type="bullet">
/// <item>The values in this list are simply concatenated, separated with spaces, sanitized
/// for the shell, and then appended directly to the command that calls the compiler.
/// </item>
/// <item>
/// They are not translated from one compiler to the other. When you
/// use this property, you need to know which C++ compiler you're using.
/// </item>
/// </list>
/// <para>
/// This property is for the compiler. Its counterpart for the linker is
/// <see cref="AdditionalLinkerOptions"/>.
/// </para>
/// </remarks>
/// <summary>
/// Gets a list of file extensions that are added to a Visual Studio project with the
/// <b>None</b> build action.
/// </summary>
/// <remarks>
/// Used only by the Visual Studio generators.
/// </remarks>
/// <summary>
/// Gets or sets the name of the source file for the precompiled header in C and C++
/// projects, ie: <c>stdafx.cpp</c>. This property must be <c>null</c> for projects that don't
/// have a precompiled header.
/// </summary>
/// <remarks>
/// Both <see cref="PrecompHeader"/> and <see cref="PrecompSource"/> must be <c>null</c> if
/// the project doesn't have precompiled headers.
/// <para>
/// Sharpmake assumes that a relative path here is relative to <see cref="Project.SourceRootPath"/>.
/// If that isn't correct, you must use an absolute path.
/// </para>
/// </remarks>
/// <summary>
/// Gets or sets the name of the precompiled header in C and C++ projects,
/// ie: <c>stdafx.h</c>. This property must be <c>null</c> for projects that do not have a
/// precompiled header.
/// </summary>
/// <remarks>
/// Both <see cref="PrecompHeader"/> and <see cref="PrecompSource"/> must be <c>null</c> if
/// the project doesn't have precompiled headers.
/// <para>
/// Sharpmake assumes that any relative path entered here is relative to
/// <see cref="Project.SourceRootPath"/>. If that isn't correct, you must use an absolute path.
/// </para>
/// <note>
/// The source files must manually include this header or you will have
/// compiler errors. Sharpmake merely tells the compiler to expect a precompiled
/// header. The compiler doesn't implicitly include the header.
/// </note>
/// </remarks>
/// <summary>
/// Gets or sets the output directory for the precompiled header's binary file in C and C++
/// projects.
/// </summary>
/// <remarks>
/// If this property is set to <c>null</c>, Sharpmake will simply write the binary file to
/// <see cref="IntermediatePath"/>, the same as the object file.
/// <para>
/// If defined, precompiled headers are written to this directory instead of the intermediate directory.
/// </para>
/// </remarks>
/// <summary>
/// Gets a list of files that don't use the precompiled headers.
/// </summary>
/// <summary>
/// Gets a list of file extensions that don't use the precompiled headers.
/// </summary>
/// <summary>
/// Gets the list of directories that contain source files that don't use the
/// precompiled headers.
/// </summary>
/// <summary>
/// List of headers passed to the preprocessor to be parsed.
/// </summary>
/// <summary>
/// List of files that are built to consume WinRT Extensions.
/// </summary>
/// <summary>
/// Regex-based list of files that are built to consume WinRT Extensions.
/// </summary>
/// <summary>
/// List of files that are excluded from being built to consume WinRT Extensions.
/// </summary>
/// <summary>
/// Regex-based list of files that are excluded from being built to consume WinRT Extensions.
/// </summary>
/// <summary>
/// Gets a list of files that must be compiled using the compiler's default exception settings
/// and with exceptions enabled.
/// </summary>
/// <remarks>
/// If the source file is compiled with WinRT extensions, it is implicitly added to
/// this list.
/// </remarks>
/// <summary>
/// Gets a list of files that must be compiled with <c>extern C</c> exceptions enabled.
/// </summary>
/// <summary>
/// Gets a list of files that must be compiled with SEH exceptions enabled.
/// </summary>
// The .ruleset file to use for code analysis
/// <summary>
/// Enables (true) or disables (false) a dump of the dependency graph for this configuration.
/// </summary>
/// <summary>
/// Adds a C or C++ source file with a specific exception setting.
/// </summary>
/// <param name="filename">The path of the source file.</param>
/// <param name="exceptionSetting">The C++ exception setting.</param>
/// <exception cref="ArgumentNullException"><paramref name="filename"/> is <c>null</c>.</exception>
/// <exception cref="ArgumentException"><paramref name="exceptionSetting"/> is not a known value.</exception>
/// <exception cref="Error"><paramref name="filename"/> has already been added with a different exception mode.</exception>
/// <remarks>
/// This is a utility method for selecting either
/// <see cref="SourceFilesExceptionsEnabled"/>,
/// <see cref="SourceFilesExceptionsEnabledWithExternC"/> or
/// <see cref="SourceFilesExceptionsEnabledWithSEH"/> and for making sure that the file has
/// not already been included with another exception setting.
/// </remarks>
/// <summary>
/// Gets which exception setting has been set for a given file in a C or C++ project.
/// </summary>
/// <param name="filename">The path of the file to examine.</param>
/// <returns>A value from the <see cref="Options.Vc.Compiler.Exceptions"/> enumerated type that specifies which exception mode is used for the specified file.</returns>
/// <exception cref="ArgumentNullException"><paramref name="filename"/> is <c>null</c>.</exception>
// If consuming WinRT, file must be compiled with exceptions enabled
/// <summary>
/// Gets a list of the search directories for static libraries.
/// </summary>
/// <summary>
/// Gets a list of the static libraries to link to.
/// </summary>
/// <remarks>
/// This should only be used for third party libaries that are not part of the compiled
/// source code. Libraries that are part of the compiled source code should be included
/// by calling either
/// <see cref="AddPublicDependency{TPROJECT}(ITarget, DependencySetting, string, int)"/>
/// or <see cref="AddPrivateDependency{TPROJECT}(ITarget, DependencySetting, string, int)"/>.
/// This makes things much easier because Sharpmake will automatically take care
/// of setting the library paths, library files, include paths, and build order
/// according to the dependency graph.
/// <para>
/// Unless your library name contains a <c>.</c>(dot) in its file name, you don't need to add
/// the file extension of any library you add here. If you do, Sharpmake will
/// automatically remove it.
/// </para>
/// </remarks>
/// <summary>
/// Gets a list of "using" directories for compiling WinRT C++ extensions.
/// </summary>
/// <remarks>
/// As WinRT is a Microsoft extension, this property is only used by the Visual Studio
/// generators.
/// </remarks>
/// <summary>
/// Gets the list of public dependencies for .NET projects.
/// </summary>
/// <remarks>
/// You should use
/// <see cref="AddPublicDependency{TPROJECT}(ITarget, DependencySetting, string, int)"/>
/// instead of adding elements directly into this list.
/// </remarks>
/// <summary>
/// Gets the list of private dependencies for .NET projects.
/// </summary>
/// <remarks>
/// You should use
/// <see cref="AddPrivateDependency{TPROJECT}(ITarget, DependencySetting, string, int)"/>
/// instead of adding elements directly to this list.
/// </remarks>
/// <summary>
/// Gets a list of linker options to send when calling the compiler.
/// </summary>
/// <remarks>
/// Generators are allowed to transform the textual representation of the options added
/// here so that they work with the operating system's shell or with the makefile
/// format.
/// <para>
/// The values in this list are simply concatenated, separated with spaces, sanitized
/// for the shell, and then appended directly to the command that calls the linker.
/// </para>
/// <para>
/// The options added here are not translated from one linker to the other. When you
/// use this property, you need to know which C++ compiler you're using.
/// </para>
/// <para>
/// This property is for the linker. Its counterpart for the compiler is
/// <see cref="AdditionalCompilerOptions"/>.
/// </para>
/// </remarks>
/// <summary>
/// Target path, where the output files will be compiled, ex: exe, dll, self, xex
/// </summary>
/// <summary>
/// Gets or sets whether a .NET class library generates an import library instead of a
/// managed assembly (DLL).
/// </summary>
/// <remark>
/// This property has no effect unless <see cref="Configuration.OutputType"/> is set to
/// <see cref="OutputType.DotNetClassLibrary"/>.
/// </remark>
/// <summary>
/// Gets or sets whether to skip generating a Visual Studio filter file for this project.
/// </summary>
/// <summary>
/// Gets or sets the path of the module definition file to be passed to the linker.
/// </summary>
/// <remarks>
/// This is only used by the Visual Studio generators.
/// </remarks>
/// <summary>
/// Gets or sets the path where the blob files will be generated.
/// </summary>
/// <remarks>
/// <note>
/// FASTBuild supports blobbing via it's "unity" files and the FASTBuild
/// generators use <see cref="FastBuildUnityPath"/> to determine where to put the unity files.
/// </note>
/// </remarks>
/// <summary>
/// How many static blob files would this configuration generate
/// </summary>
/// <summary>
/// Gets or sets the path of the unity files generated by the FASTBuild build system.
/// </summary>
/// <remarks>
/// This property is only used when generating FASTBuild makefiles. When using the
/// usual compiler, use <see cref="BlobPath"/> to set the location of the blob files.
/// </remarks>
/// <summary>
/// If specified, overrides <c>Project.DefaultBlobWorkFileHeader</c>.
/// </summary>
/// <summary>
/// If specified, overrides <c>Project.DefaultBlobWorkFileFooter</c>.
/// </summary>
/// <summary>
/// If specified, overrides Project.BlobSize .
/// </summary>
/// <summary>
/// Gets or sets the number of "unity" files to generate when using FASTBuild.
/// </summary>
/// <summary>
/// Gets or sets whether to include blobs in the project.
/// </summary>
// Build writable files individually
// Disable isolation when many files are writable
/// <summary>
/// Custom Actions to do before invoking FastBuildExecutable.
/// </summary>
/// <summary>
/// Gets or sets the name of the FASTBuild BFF file.
/// </summary>
/// <summary>
/// Gets the full file path of the FASTBuild BFF file. This includes the directory and
/// file name.
/// </summary>
/// <summary>
/// Gets or sets whether to generate a FASTBuild (.bff) file when using FASTBuild.
/// </summary>
/// <remarks>
/// For projects merging multiple targets, sometimes what is wanted is to not generate FastBuild
///  .bff files but, instead, include any existing .bff files from the appropriate targets.
/// </remarks>
// container for executable
/// <summary>
/// Represents a build step that invokes an executable on the file system.
/// </summary>
/// <summary>
/// Creates a new <see cref="BuildStepExecutable"/> instance.
/// </summary>
/// <param name="executableFile">The executable file.</param>
/// <param name="executableInputFileArgumentOption">The command line option that specifies the input file.</param>
/// <param name="executableOutputFileArgumentOption">The command line option that specifies the output file.</param>
/// <param name="executableOtherArguments">Any other command line arguments to pass to the executable.</param>
/// <param name="executableWorkingDirectory">The working directory of the executable.</param>
/// <param name="isNameSpecific">???</param>
/// <param name="useStdOutAsOutput">If `true`, the output is to *stdout*.</param>
/// <summary>
/// Gets or sets the name of the executable file.
/// </summary>
/// <summary>
/// Gets or sets the command line option that specifies the input file.
/// </summary>
/// <summary>
/// Gets or sets the command line option that specifies the output file.
/// </summary>
/// <summary>
/// Gets or sets any other command line option to pass to the executable.
/// </summary>
/// <summary>
/// Gets or sets the working directory to use when calling the executable.
/// </summary>
/// <summary>
/// Gets or sets whether the output is to *stdout*.
/// </summary>
// container for copy
// file selection options
// /XO :: eXclude Older files.
// logging options
// /NS :: No Size - don't log file sizes.
// /NC :: No Class - don't log file classes.
// /NP :: No Progress - don't display percentage copied.
// /NJH :: No Job Header.
// /NJS :: No Job Summary.
// /NDL :: No Directory List - don't log directory names.
// /NFL :: No File List - don't log file names.
// parameters
// direct all remaining stdout to nul
// Error handling: any value greater than 7 indicates that there was at least one failure during the copy operation.
// The type nul is used to clear the errorlevel to 0
// see https://ss64.com/nt/robocopy-exit.html for more info
// TODO: that test is very dodgy. Please remove this, and have the user set the property instead, or even create a new BuildStepCopyDir type
// Override this to control the order of BuildStep execution in Build Events
/// <summary>
/// Settings for NMake projects with custom execution
/// </summary>
/// <summary>
/// If specified, every obj will be output to intermediate directories corresponding to the source hierarchy.
/// </summary>
/// <remarks>
/// <note type="warning">
/// This will slow down your project's compile time!
/// <externalLink>
/// <linkText>See a discussion of this in StackOverflow</linkText>
/// <linkUri>http://stackoverflow.com/a/1999344</linkUri>
/// </externalLink>.
/// </note>
/// </remarks>
/// <summary>
/// Gets or sets the name of the current configuration.
/// </summary>
/// <remarks>
/// In Visual Studio, the name of the configuration is displayed in the drop-down list.
/// </remarks>
/// <summary>
/// Gets or sets the base file name of the target.
/// </summary>
/// <remarks>
/// Despite the name of the property, this is actually the base name. You can prepend
/// and append suffixes using <see cref="TargetFilePrefix"/> and
/// <see cref="TargetFileSuffix"/>.
/// <para>
/// The default value is the name of the project.
/// </para>
/// </remarks>
// "system"
/// <summary>
/// Gets or sets the suffix to append to the target name.
/// </summary>
// "_rt"
/// <summary>
/// Gets or sets the prefix to prepend to the target name.
/// </summary>
/// <summary>
/// Gets or sets the full file name of the target, without the path but with the suffix
/// and the prefix.
/// </summary>
/// <summary>
/// Gets or sets the ordering index of the target when added as a library to another
/// project.
/// </summary>
/// <summary>
/// Gets or sets the ordering index of the library paths when added as a library to
/// another project.
/// </summary>
/// <summary>
/// Gets or sets the list of files to copy to the output directory.
/// </summary>
/// <summary>
/// Gets or sets the list of files that the target depends on.
/// </summary>
/// <summary>
/// Gets or sets whether this configuration is included in or excluded from the build.
/// </summary>
/// <summary>
/// Gets or sets a custom <see cref="FileCustomBuild"/> that is used to copy
/// dependencies after a build.
/// </summary>
/// <remarks>
/// This can be used to add a custom build tool on a dummy file to copy the
/// dependencies' DLLs and PDBs. Works better than a PostBuildStep.
/// </remarks>
/// <summary>
/// Gets or sets a list of shell commands to add as a prebuild script.
/// </summary>
/// <summary>
/// Gets or sets the name of the prebuild script (that is written to the build
/// output).
/// </summary>
/// <summary>
/// Gets or sets whether the prebuild is excluded from the build.
/// </summary>
/// <summary>
/// Gets or sets a list of <see cref="BuildStepBase"/> instances that call executables
/// at prebuild.
/// </summary>
/// <summary>
/// Gets or sets a list of <see cref="BuildStepBase"/> instances that call executables
/// at prebuild.
/// </summary>
/// <summary>
/// Gets or sets a list of shell commands to execute before linking a C or C++ project.
/// </summary>
/// <summary>
/// Gets or sets a description to write to the build output before linking a C or C++
/// project.
/// </summary>
/// <summary>
/// Gets or sets whether the pre-link is excluded from the build.
/// </summary>
/// <summary>
/// Gets or sets a list of shell commands to execute after linking to a C or C++
/// project.
/// </summary>
/// <summary>
/// Gets or sets a description to write to the build output after linking to a C or C++
/// project.
/// </summary>
/// <summary>
/// Gets or sets whether the post-link is excluded from the build.
/// </summary>
/// <summary>
/// Gets or sets a list of shell commands to execute after building the project.
/// </summary>
/// <summary>
/// Gets or sets a description to write to the build output after building the
/// project.
/// </summary>
/// <summary>
/// Gets or sets whether the post-build is excluded from the build.
/// </summary>
// <path to file, destination directory>
// should be a bool
/// <summary>
/// This is all the data specific to a custom build step.
/// The ones stored in the project configuration use absolute paths
/// but we need relative paths when we're ready to export a specific
/// project file.
/// </summary>
/// <summary>
/// This lets us filter which type of project files should have this custom build step.
/// This is specifically used to deal with the limitations of different build systems.
/// </summary>
/// <remarks>
/// Visual studio only supports one build action per file, so if you need both compilation and
/// some other build steps such as QT or Documentation generation on the same file, you need to put the rule
/// on a different input file that also depends on the real input file.
/// <para>
/// FASTBuild is key based, not file based. So it can have two different operations on the same file.
/// If you need support for FASTBuild, you can make two different custom build rules with one specific to BFF 
/// and the other excluding BFF.
/// </para>
/// </remarks>
/// <summary>
/// The custom build step is used for both project file and FASTBuild generation.
/// </summary>
/// <summary>
/// The custom build step excludes BFF.
/// </summary>
/// <summary>
/// The custom build step is specific to BFF 
/// </summary>
/// <summary>
/// File custom builds are bound to a specific existing file. They run when the file is changed.
/// </summary>
/// <summary>
/// This is the executable for the custom build step.
/// </summary>
/// <summary>
/// These are the arguments to pass to the executable.
/// </summary>
/// <remarks>
/// We support [input] and [output] tags in the executable arguments that will auto-resolve to the relative
/// paths to <see cref="KeyInput"/> and <see cref="Output"/>.
/// </remarks>
/// <summary>
/// This is what will appear in the project file under "description". It's also the key used
/// for FASTBuild, so it should be unique per build step if you want to use FASTBuild.
/// </summary>
/// <summary>
/// For FASTBuild compatibility, we can only have one input and one output per custom command.
/// This is what we tell the build system we're going to produce.
/// </summary>
/// <summary>
/// Not supported by FASTBuild.
/// Additional files that will cause a re-run of this custom build step can be be specified here.
/// </summary>
/// <summary>
/// Specifies whether this step should run in builds for project files or FASTBuild or both.
/// </summary>
// Initial resolve pass, in-place.
// We don't resolve arguments yet as we need the relative directly first.
// Pre-save make-relative pass, to set all fields relative to project path.
// This WILL get called multiple times, so it needs to write to different fields than
// the original input.
/// <summary>
/// Specifies a list of custom build steps that will be executed when this configuration is active.
/// </summary>
// Only used by csproj
/// <summary>
/// Gets or sets the working directory when a C# project is started from Visual Studio.
/// </summary>
/// <summary>
/// Defines where the compiler will generate an XML documentation file at compile time.
/// </summary>
///
/// The compiler generated XML file can be distributed alongside your .NET assembly so that
/// Visual Studio and other IDEs can use IntelliSense to show quick information about types
/// or members.
/// Additionally, the XML file can be run through tools like DocFX and Sandcastle
/// to generate API reference websites
///
/// The following will output an XML file in the target directory with the same root filename as the assembly
///
///     conf.XmlDocumentationFile = @"[conf.TargetPath]\[project.AssemblyName].xml";
///
/// <remarks>C# only</remarks>
/// <summary>
/// Gets the <see cref="Project"/> that this <see cref="Project.Configuration"/>
/// belongs to.
/// </summary>
/// <remarks>
/// If this is a C# project, <see cref="Project"/> can be safely cast to
/// <see cref="CSharpProject"/>.
/// </remarks>
/// <summary>
/// Gets or sets whether this project is deployed.
/// </summary>
/// <remarks>
/// This property only applies to Visual Studio projects.
/// </remarks>
/// <summary>
/// Gets or sets whether blobbing is enabled for this configuration.
/// </summary>
/// <remarks>
/// Blobbing is only used for C and C++ projects. FASTBuild uses it's own blobbing
/// strategy (called unity files), which is enabled by setting FASTBuild properties.
/// </remarks>
/// <summary>
/// Gets or sets the defined symbol that tells a C++ project that it is being built
/// using a blobbing strategy.
/// </summary>
/// <remarks>
/// Blobbing is only used for C and C++ projects. FASTBuild uses it's own blobbing
/// strategy (called unity files), which is enabled by setting FASTBuild properties.
/// </remarks>
/// <summary>
/// Gets or sets the Windows UAC permissions required to run the program.
/// </summary>
/// <summary>
/// Gets or sets the defined symbol that can be used from C and C++ projects to detect
/// that a Windows resource file (.rc) is being used.
/// </summary>
/// <summary>
/// Gets the file extension for executables.
/// </summary>
/// <summary>
/// Gets the file extension for compressed executables, such as bundles, game packages
/// for consoles, etc.
/// </summary>
/// <summary>
/// Gets the file extension for shared libraries.
/// </summary>
// TODO: Deprecate this and create a SharedLibraryExtension property instead.
/// <summary>
/// Gets the file extension for program debug databases.
/// </summary>
// FastBuild configuration
/// <summary>
/// Gets or sets whether FASTBuild will be used to build the project.
/// </summary>
/// <summary>
/// Gets or sets whether FASTBuild blobs (unities) will be used in the build.
/// </summary>
/// <summary>
/// Gets or sets whether FASTBuild tasks will be distributed on the network.
/// </summary>
// Is that it? (brousseau)
/// <summary>
/// Gets or sets whether FASTBuild will use cached results to accelerate the build.
/// </summary>
/// <remarks>
/// If caching is allowed, FASTBuild will use the value specified in
/// <see cref="FastBuildSettings.CacheType"/>.
/// </remarks>
/// <summary>
/// Gets or sets the strategy to use to select files that are blobbed.
/// </summary>
/// <summary>
/// Gets or sets the strategy to use to select files that are not blobbed.
/// </summary>
/// <summary>
/// Gets or sets the generic criteria by which files are deoptimized (compiled individually)
/// by FASTBuild.
/// </summary>
/// <summary>
/// Gets or sets custom command line arguments to pass to FASTBuild when building the
/// project with this configuration.
/// </summary>
// These dependencies will not be propagated to other projects that depend on us
// These dependencies will be propagated to other dependent projects, but not across dll dependencies.
// These dependencies are always propagated to other dependent projects.
/// <summary>
/// Gets the list of resolved files to copy.
/// </summary>
/// <summary>
/// Gets the list of resolved dependency files.
/// </summary>
/// <summary>
/// Gets the list of resolved pre-build executables.
/// </summary>
/// <summary>
/// Gets the list of resolved post-build executables.
/// </summary>
/// <summary>
/// Gets or sets the GUID of the Visual Studio project.
/// </summary>
/// <remarks>
/// This is only relevant to Visual Studio generators.
/// <para>
/// This property coerces any value set to it to use an uppercase
/// `00000000-0000-0000-0000-000000000000` format for the GUID.
/// </para>
/// </remarks>
// Makes sure that the GUID is formatted correctly.
/// <summary>
/// Gets or sets the full file name of the project.
/// </summary>
// Change Output default for Export
// TODO : Is it OK to comment this or is it a hack ?
//if (PrecompHeader != null && PrecompSource == null)
//    throw new Error("Incoherent settings for {0} : PrecompSource is null but PrecompHeader is not", ToString());
// workaround for export projects: they do not generate pdb, so no need to resolve their paths
// Reset to the default if the script set it to an empty string.
//LCTODO remove when the deprecated dependency settings are removed
// These dependencies are always propagated to other dependent projects.
// These dependencies will be propagated to other dependent projects, but not across dll dependencies.
// These dependencies will never be propagated to other projects that depend on us
// These dependencies will only be added to solutions for build ordering
/// <summary>
/// Gets the dependency settings configuration for the given project type of this configuration.
/// </summary>
/// <param name="projectType"> The project type.</param>
/// <returns>The specified project's dependency settings with related flags activated.
/// </returns>
// vs2010+ .props files
// vs2010+ .targets files
// NuGet packages (only C# for now)
//return l.Target.CompareTo(r.Target);
// Overflow is fine, just wrap
// Check if we need to add dependencies on libs that we compile (in the current solution)
// create a tree of dependency from this configuration
// propagate the parent setting by masking it
// only children of root are immediate
// Is there a case where we want the defines but *not* the include paths?
// If our no-output project is just a build-order dependency, update the build order accordingly
// check if that case is valid: dll with additional libs
// If using OnlyBuildOrder, ExecuteTargetCopy must be set to enable the copy.
// Add PDBs only if the dependency is not an [export] project
// Will include to the project:
//  - lib,dll: include paths
//  - lib,dll: library paths and files
//  - dll: copy dll to the output executable directory
// Will include to the project to act as a project bridge:
//  - lib: add Library paths and files to be able to link the executable
//  - dll: Copy dll to the ouput path
// sort base on DependenciesOrder
// if we already know that configuration, just reattach its children to the current node
// Get the dependency settings from the owner of the dependency.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Project Name
// Makes the ProjectName ToLower or not
// Makes the ProjectName ToLower or not
// Project Class Name, ex: "MyProject"
// Full class name with is namespace, ex: "Sharpmake.Sample.MyProject"
// File name of the c# project configuration, ex: "MyProject.sharpmake"
// Path of the CsFileName, ex: "c:\dev\MyProject"
// TODO LC: check what is expected
// Root path of source file for this project, ex: "c:\dev\MyProject\src"
// RootPath used as key to generate ProjectGuid and as a path helper for finding source files
//used primarely for the .Net Framework
// More source directories to parse for files in addition to SourceRootPath
// Files in the project, may be full path of partial path from SourceRootPath
// Files in the project before we applied fitlering, may be full path of partial path from SourceRootPath
// All files under SourceRootPath are evaluated, if match found, it will be added to SourceFiles
// File that match this regex compile
// if !=  null, include only file in this filter
// Excluded files from the project, removed from SourceFiles
// files that match SourceFilesIncludeRegex and SourceFilesExtension from source directory will make SourceFiles
// Filters SourceFiles list
// Sources file that match this regex will be excluded from build
// Sources file to exclude from build from SourceFiles
// Sources file that match this regex will be compiled as C Files
// Sources file that match this regex will be compiled as CPP Files
// Sources file that match this regex will be compiled as CLR Files
// Sources files that match this regex will not be compiled as CLR Files
// Sources files that match this regex will specifically be compiled with the CLR flag set to false.
// Sources file that match this regex will be compiled as WinRT Files
// Sources file that match this regex will be excluded from compilation as WinRT Files
// List of paths excluded from blobs. This maps cleanly to UnityInputExcludePath but is also supported in msbuild.
// vs2010+ .props files
// vs2010+ .targets files
// Library paths where we want to ignore the path doesn't exist warning
// Include paths where we want to ignore the path doesn't exist warning
// extension -> tool name
// custom properties are added to the project xml as <Key>Value</Key>
/// maps relative source directory to a custom filter path for vcxproj.filter files
// Some projects don't support changelist filter. and will generate build errors when trying to compile the resulting projects.
// Dependencies order is used to link project together in a specified order, something is used especially for the link where
// symbols need to be near of each other for some libs. so project will link it's dependency starting form smallest DependenciesOrder.
// For projects that output both dll and lib depending on the configuration (often the case in TG projects)
// Setting this to true will force dependencies regardless of different output types.
/// <summary>
/// This property controls the casing of includes within the generated blob files.
/// If true, the case will be fixed. Default is false.
/// </summary>
// If true, remove the source files from a FastBuild project's associated vcxproj file.
/// <summary>
/// Special constructor for utility projects generated internally,
/// since these projects must handle paths differently
/// </summary>
/// <param name="targetType"></param>
/// <param name="configurationType"></param>
/// <param name="isInternal">Indicates if the class is defined within Sharpmake</param>
// ref added just to ease reading code, files is modified
// Support composite extensions(such as .sharpmake.cs)
// ref added just to ease reading code, files is modified
// Remove .. occurences from middle of the absolute path.
// TODO: remove from sourceFilesRelative if match
// ref added just to ease reading code, files is modified
// BlobPath defines the folder where blobs files are; since BlobPath can
// be different between configurations, this class keeps the information
// for the same BlobPath, which can be for all configurations, one or some.
// [project.Name]_xyz.blob.cpp
// all source include by [project.Name]_xyz.blob.cpp
// excluded in all configurations
// excluded only in some configurations
// should be excluded
// BlobPath -> BlobPathContent
// NoBlobbed files are not specific to a BlobPathContent, which might look weird at first.
// NoBlobbed files are the sum of all the NoBlobbed resulting from all the BlobPaths in every
// configurations.  The idea is that once a file cannot be in some blobs because it is
// excluded from some of its configurations, then it must be excluded from all blobs in
// all BlobPathContent, since multiple BlobPathContent can end up in the same project.
// It could be implemented to look exactly which project files are using which BlobPaths, but
// it's a complication not worth it, since typically BlobPaths should be tweaked to have
// everything blobbed anyway.
// all source excluded from by [project.Name]_xyz.blob.cpp
// Remove blob files ?
// full path
// partial path
// Add all precomp files
// Go through all different BlobPath values to know partial exclusions and total exclusions
// Only unblob files that are excluded in some configs but not all
// Only scan directory for files if needed
// Query all files in source directory
// Additional source directories if any
// Apply Filters 
// keep precomp
// Add source files
//Exclude files in IntermediatePath and OutputPath
// Remove file that match SourceFilesExcludeRegex
// Remove exclude file
// check if we need to blob the project
// add SourceFilesBuildExclude from the project
// Resolve files that will be built as C Files 
// Resolve files that will be built as CPP Files 
// Resolve files that will be built as CLR Files 
// Remove file that match SourceFilesCompileAsCLRExcludeRegex
// Resolve non-CLR files.
// Resolve files that will be built as WinRT Files 
// Resolve files that will not be built as WinRT Files 
// Generator will use ResolvedSourceFiles and Configuration.ResolvedSourceFilesExclude, 
// allow us to handle the blob here instead than in each generator
// Don't blob precomp source file
// Exclude from blob all files that match any SourceFilesBlobExcludeRegex.
// Set blob files from other blob paths
// Exclude blob files in other blob paths
// generated by sharpmake" + Environment.NewLine + Environment.NewLine);
// include precomp if needed
// Visual Studio will append the relative include path to the blob file path and will not resolve it before it is searching
// for the included file in the file system. If that search path is longer than 256 characters it will fail to find it.
// If the relative include file path that Visual Studio will use internally is too long use the absolute file path
// If the file path is too long the include will fail
// Write the blob file
// Blob per directory, this make blob file more stable so it's change less 
// when adding new sources files -> will save compile time :)
// Deactivate work blobs if too much files
//  to flush content of work blobs
// index of nb of blob created
// make the number of blobs a conf generates available to generators
// Capping the number of blob work to the number of blobs. It makes no sense to have more work blobs than blobs.
// Write blobs
// write work blob size
/// <summary>
/// Called before configuration
/// </summary>
// below checks are very very very costly, may take up to about 20 sec for huge codebase.
// check if the files marked as excluded from build still exist
// check if the inclusion paths exist
// check if the library paths exist, and if the libs can be found in them
// now check every library files, and remove them from the total array if it exists on disk
// everything that remains is a missing library file
// valid work blob parameters, set BlobWorkEnabled to false if 0 work blob specified
// Resolve full paths
// Resolve Configuration
/// <summary>
/// Validate that a configuration output type is supported by the current project type.
/// </summary>
/// <param name="outputType">The configuration output type to validate.</param>
/// <returns>Returns true if the current project type supports the specified output type, otherwise false.</returns>
// Build ProjectFilesMapping
// remove all file container
// use as cache because Util.GetProperFilePathCapitalization is slow
// Disable automatic source files discovery
// If true, recreate the relative folder hierarchy for content files instead of grouping them up.
// -1 : Omit from csproj. Version 3 is needed for VS2017. See https://github.com/Microsoft/visualstudio-docs/blob/master/docs/extensibility/faq-2017.md#can-i-build-a-vsix-v3-with-visual-studio-2015
// this is used mainly for WinForms, for WPF applications use Resources for embedded and Content for linked
// Wcf Auto-Start service when debugging
// writes Pre/Post BuildEvents per configuration instead of one for all, this will make editing events in Visual Studio impossible
// Determines the type of NuGet references generated for this project
// this is used mainly for WinForms, for WPF applications use Resources for embedded and Content for linked
//assures that embeddedResources will be contained in the Resources
//Default Excludes
//Getting CorrectCaseVersion
// Remove the root, if it exists.
// This will only happen if file is rooted *and* doesn't share the same root as SourceRootPath.
// If the relative path is elsewhere, we leave the file in the root.
// .dll and .exe are put in the root of the output folder.
/// <summary>
/// A package project for deployment on Android device.
/// </summary>
/// <summary>
/// The project type to lookup in the dependencies of the package to be used as the application library.
/// This library is the first to be loaded when the package is started.
/// </summary>
/// <remarks>
/// It is an error if the specified type can't be found in the configuration dependencies.
/// </remarks>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Define a mapping between an enum value and a project reference.
/// Project reference can be either 
///     * Type Reference (public or private)
///     * Path(s) reference (any list of path with root 'ReferenceAliasManager<T>.BaseFilePath'
///     * Nuget reference (Name + Version)
///     * CustomAction (let the client decide how to add reference)
/// </summary>
/// <typeparam name="T">Enum type</typeparam>
/// <summary>
/// Enum value on attribute used to define reference alias
/// </summary>
/// <summary>
/// Enum type attribute used to automatically initialize ReferenceAliasManager<T>
/// </summary>
/// <summary>
/// Method attribute used to with ReferenceAliasInit attribute to initialize ReferenceAliasManager<T>
/// </summary>
/// <summary>
/// Manager keeping a dictionary<T, ReferenceAlias> with all defined mapping from an enum to a reference alias
/// It automatically initialized itself by getting attribute values on the given enum
/// </summary>
/// <typeparam name="T">Enum type</typeparam>
// Load all default ReferenceAlias
// Execute enum custom initialization if defined
/// <summary>
/// Main AddReference method called by extensions. 
/// This one is using aliasValue and call the proper add reference for sharpmake projet
/// </summary>
/// <param name="aliasValue"></param>
/// <param name="conf"></param>
/// <param name="target"></param>
/// <param name="project"></param>
// If aliasValue not defined and we have a FallbackAction, call it !
/// <summary>
/// Helper ReferenceAliasManager that allow to forward AddReference from one enum type to another, based on enum value name matching
/// This is used to match a publicly exposed enum to a private enum definition for example.
/// </summary>
/// <typeparam name="T">Source enum type</typeparam>
/// <typeparam name="TDest">Destionation enum type</typeparam>
/// <summary>
/// Those extensions will let you use AddReference on conf object in your Configure
/// ex : 
///     conf.AddReferences(MyEnum.Lib1, MyEnum.Lib2);
///     conf.AddReference(MyEnum.Lib3, target, project);
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// CachedRegex is used where the same strings are likely to evaluate
// multiple times.
// The RegexCache is used where the same regex expression is likely to be compiled
// multiple times.  It comes also with the advantages of CachedRegex.
/* MIT License
//www.jetbrains.com
// ReSharper disable UnusedMember.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
// ReSharper disable IntroduceOptionalParameters.Global
// ReSharper disable MemberCanBeProtected.Global
// ReSharper disable InconsistentNaming
/// <summary>
/// Indicates that the value of the marked element could be <c>null</c> sometimes,
/// so the check for <c>null</c> is necessary before its usage.
/// </summary>
/// <example><code>
/// [CanBeNull] object Test() => null;
/// 
/// void UseTest() {
///   var p = Test();
///   var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
/// }
/// </code></example>
/// <summary>
/// Indicates that the value of the marked element could never be <c>null</c>.
/// </summary>
/// <example><code>
/// [NotNull] object Foo() {
///   return null; // Warning: Possible 'null' assignment
/// }
/// </code></example>
/// <summary>
/// Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
/// and Lazy classes to indicate that the value of a collection item, of the Task.Result property
/// or of the Lazy.Value property can never be null.
/// </summary>
/// <summary>
/// Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
/// and Lazy classes to indicate that the value of a collection item, of the Task.Result property
/// or of the Lazy.Value property can be null.
/// </summary>
/// <summary>
/// Indicates that the marked method builds string by format pattern and (optional) arguments.
/// Parameter, which contains format string, should be given in constructor. The format string
/// should be in <see cref="string.Format(IFormatProvider,string,object[])"/>-like form.
/// </summary>
/// <example><code>
/// [StringFormatMethod("message")]
/// void ShowError(string message, params object[] args) { /* do something */ }
/* do something */ }
/// 
/// void Foo() {
///   ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
/// }
/// </code></example>
/// <param name="formatParameterName">
/// Specifies which parameter of an annotated method should be treated as format-string
/// </param>
/// <summary>
/// For a parameter that is expected to be one of the limited set of values.
/// Specify fields of which type should be used as values for this parameter.
/// </summary>
/// <summary>
/// Indicates that the function argument should be string literal and match one
/// of the parameters of the caller function. For example, ReSharper annotates
/// the parameter of <see cref="System.ArgumentNullException"/>.
/// </summary>
/// <example><code>
/// void Foo(string param) {
///   if (param == null)
///     throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
/// }
/// </code></example>
/// <summary>
/// Indicates that the method is contained in a type that implements
/// <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
/// is used to notify that some property value changed.
/// </summary>
/// <remarks>
/// The method should be non-static and conform to one of the supported signatures:
/// <list>
/// <item><c>NotifyChanged(string)</c></item>
/// <item><c>NotifyChanged(params string[])</c></item>
/// <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
/// <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
/// <item><c>SetProperty{T}(ref T, T, string)</c></item>
/// </list>
/// </remarks>
/// <example><code>
/// public class Foo : INotifyPropertyChanged {
///   public event PropertyChangedEventHandler PropertyChanged;
/// 
///   [NotifyPropertyChangedInvocator]
///   protected virtual void NotifyChanged(string propertyName) { ... }
///
///   string _name;
/// 
///   public string Name {
///     get { return _name; }
///     set { _name = value; NotifyChanged("LastName"); /* Warning */ }
/* Warning */ }
///   }
/// }
/// </code>
/// Examples of generated notifications:
/// <list>
/// <item><c>NotifyChanged("Property")</c></item>
/// <item><c>NotifyChanged(() =&gt; Property)</c></item>
/// <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
/// <item><c>SetProperty(ref myField, value, "Property")</c></item>
/// </list>
/// </example>
/// <summary>
/// Describes dependency between method input and output.
/// </summary>
/// <syntax>
/// <p>Function Definition Table syntax:</p>
/// <list>
/// <item>FDT      ::= FDTRow [;FDTRow]*</item>
/// <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
/// <item>Input    ::= ParameterName: Value [, Input]*</item>
/// <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
/// <item>Value    ::= true | false | null | notnull | canbenull</item>
/// </list>
/// If method has single input parameter, it's name could be omitted.<br/>
/// Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
/// means that the methos doesn't return normally (throws or terminates the process).<br/>
/// Value <c>canbenull</c> is only applicable for output parameters.<br/>
/// You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
/// with rows separated by semicolon. There is no notion of order rows, all rows are checked
/// for applicability and applied per each program state tracked by R# analysis.<br/>
/// </syntax>
/// <examples><list>
/// <item><code>
/// [ContractAnnotation("=&gt; halt")]
/// public void TerminationMethod()
/// </code></item>
/// <item><code>
/// [ContractAnnotation("halt &lt;= condition: false")]
/// public void Assert(bool condition, string text) // regular assertion method
/// </code></item>
/// <item><code>
/// [ContractAnnotation("s:null =&gt; true")]
/// public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
/// </code></item>
/// <item><code>
/// // A method that returns null if the parameter is null,
/// // and not null if the parameter is not null
/// [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
/// public object Transform(object data) 
/// </code></item>
/// <item><code>
/// [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
/// public bool TryParse(string s, out Person result)
/// </code></item>
/// </list></examples>
/// <summary>
/// Indicates that marked element should be localized or not.
/// </summary>
/// <example><code>
/// [LocalizationRequiredAttribute(true)]
/// class Foo {
///   string str = "my string"; // Warning: Localizable string
/// }
/// </code></example>
/// <summary>
/// Indicates that the value of the marked type (or its derivatives)
/// cannot be compared using '==' or '!=' operators and <c>Equals()</c>
/// should be used instead. However, using '==' or '!=' for comparison
/// with <c>null</c> is always permitted.
/// </summary>
/// <example><code>
/// [CannotApplyEqualityOperator]
/// class NoEquality { }
/// 
/// class UsesNoEquality {
///   void Test() {
///     var ca1 = new NoEquality();
///     var ca2 = new NoEquality();
///     if (ca1 != null) { // OK
///       bool condition = ca1 == ca2; // Warning
///     }
///   }
/// }
/// </code></example>
/// <summary>
/// When applied to a target attribute, specifies a requirement for any type marked
/// with the target attribute to implement or inherit specific type or types.
/// </summary>
/// <example><code>
/// [BaseTypeRequired(typeof(IComponent)] // Specify requirement
/// class ComponentAttribute : Attribute { }
/// 
/// [Component] // ComponentAttribute requires implementing IComponent interface
/// class MyComponent : IComponent { }
/// </code></example>
/// <summary>
/// Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
/// so this symbol will not be marked as unused (as well as by other usage inspections).
/// </summary>
/// <summary>
/// Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
/// as unused (as well as by other usage inspections)
/// </summary>
/// <summary>Only entity marked with attribute considered used.</summary>
/// <summary>Indicates implicit assignment to a member.</summary>
/// <summary>
/// Indicates implicit instantiation of a type with fixed constructor signature.
/// That means any unused constructor parameters won't be reported as such.
/// </summary>
/// <summary>Indicates implicit instantiation of a type.</summary>
/// <summary>
/// Specify what is considered used implicitly when marked
/// with <see cref="MeansImplicitUseAttribute"/> or <see cref="UsedImplicitlyAttribute"/>.
/// </summary>
/// <summary>Members of entity marked with attribute are considered used.</summary>
/// <summary>Entity marked with attribute and all its members considered used.</summary>
/// <summary>
/// This attribute is intended to mark publicly available API
/// which should not be removed and so is treated as used.
/// </summary>
/// <summary>
/// Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
/// If the parameter is a delegate, indicates that delegate is executed while the method is executed.
/// If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
/// </summary>
/// <summary>
/// Indicates that a method does not make any observable state changes.
/// The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
/// </summary>
/// <example><code>
/// [Pure] int Multiply(int x, int y) => x * y;
/// 
/// void M() {
///   Multiply(123, 42); // Waring: Return value of pure method is not used
/// }
/// </code></example>
/// <summary>
/// Indicates that the return value of method invocation must be used.
/// </summary>
/// <summary>
/// Indicates the type member or parameter of some type, that should be used instead of all other ways
/// to get the value that type. This annotation is useful when you have some "context" value evaluated
/// and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
/// </summary>
/// <example><code>
/// class Foo {
///   [ProvidesContext] IBarService _barService = ...;
/// 
///   void ProcessNode(INode node) {
///     DoSomething(node, node.GetGlobalServices().Bar);
///     //              ^ Warning: use value of '_barService' field
///   }
/// }
/// </code></example>
/// <summary>
/// Indicates that a parameter is a path to a file or a folder within a web project.
/// Path can be relative or absolute, starting from web root (~).
/// </summary>
/// <summary>
/// An extension method marked with this attribute is processed by ReSharper code completion
/// as a 'Source Template'. When extension method is completed over some expression, it's source code
/// is automatically expanded like a template at call site.
/// </summary>
/// <remarks>
/// Template method body can contain valid source code and/or special comments starting with '$'.
/// Text inside these comments is added as source code when the template is applied. Template parameters
/// can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
/// Use the <see cref="MacroAttribute"/> attribute to specify macros for parameters.
/// </remarks>
/// <example>
/// In this example, the 'forEach' method is a source template available over all values
/// of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
/// <code>
/// [SourceTemplate]
/// public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
///   foreach (var x in xs) {
///      //$ $END$
///   }
/// }
/// </code>
/// </example>
/// <summary>
/// Allows specifying a macro for a parameter of a <see cref="SourceTemplateAttribute">source template</see>.
/// </summary>
/// <remarks>
/// You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
/// is defined in the <see cref="MacroAttribute.Expression"/> property. When applied on a method, the target
/// template parameter is defined in the <see cref="MacroAttribute.Target"/> property. To apply the macro silently
/// for the parameter, set the <see cref="MacroAttribute.Editable"/> property value = -1.
/// </remarks>
/// <example>
/// Applying the attribute on a source template method:
/// <code>
/// [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
/// public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
///   foreach (var item in collection) {
///     //$ $END$
///   }
/// }
/// </code>
/// Applying the attribute on a template method parameter:
/// <code>
/// [SourceTemplate]
/// public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
///   /*$ var $x$Id = "$newguid$" + x.ToString();
/*$ var $x$Id = "$newguid$" + x.ToString();
/// }
/// </code>
/// </example>
/// <summary>
/// Allows specifying a macro that will be executed for a <see cref="SourceTemplateAttribute">source template</see>
/// parameter when the template is expanded.
/// </summary>
/// <summary>
/// Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
/// </summary>
/// <remarks>
/// If the target parameter is used several times in the template, only one occurrence becomes editable;
/// other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
/// use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
/// </remarks>>
/// <summary>
/// Identifies the target parameter of a <see cref="SourceTemplateAttribute">source template</see> if the
/// <see cref="MacroAttribute"/> is applied on a template method.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
/// is an MVC action. If applied to a method, the MVC action name is calculated
/// implicitly from the context. Use this attribute for custom wrappers similar to
/// <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
/// Use this attribute for custom wrappers similar to
/// <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
/// an MVC controller. If applied to a method, the MVC controller name is calculated
/// implicitly from the context. Use this attribute for custom wrappers similar to
/// <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
/// for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
/// for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
/// partial view. If applied to a method, the MVC partial view name is calculated implicitly
/// from the context. Use this attribute for custom wrappers similar to
/// <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
/// Use this attribute for custom wrappers similar to 
/// <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
/// Use this attribute for custom wrappers similar to
/// <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
/// Use this attribute for custom wrappers similar to
/// <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
/// is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
/// from the context. Use this attribute for custom wrappers similar to
/// <c>System.Web.Mvc.Controller.View(Object)</c>.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
/// is an MVC view component name.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
/// is an MVC view component view. If applied to a method, the MVC view component view name is default.
/// </summary>
/// <summary>
/// ASP.NET MVC attribute. When applied to a parameter of an attribute,
/// indicates that this parameter is an MVC action name.
/// </summary>
/// <example><code>
/// [ActionName("Foo")]
/// public ActionResult Login(string returnUrl) {
///   ViewBag.ReturnUrl = Url.Action("Foo"); // OK
///   return RedirectToAction("Bar"); // Error: Cannot resolve action
/// }
/// </code></example>
/// <summary>
/// Razor attribute. Indicates that a parameter or a method is a Razor section.
/// Use this attribute for custom wrappers similar to 
/// <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
/// </summary>
/// <summary>
/// Indicates how method, constructor invocation or property access
/// over collection type affects content of the collection.
/// </summary>
/// <summary>Method does not use or modify content of the collection.</summary>
/// <summary>Method only reads content of the collection but does not modify it.</summary>
/// <summary>Method can change content of the collection but does not add new elements.</summary>
/// <summary>Method can add new elements to the collection.</summary>
/// <summary>
/// Indicates that the marked method is assertion method, i.e. it halts control flow if
/// one of the conditions is satisfied. To set the condition, mark one of the parameters with 
/// <see cref="AssertionConditionAttribute"/> attribute.
/// </summary>
/// <summary>
/// Indicates the condition parameter of the assertion method. The method itself should be
/// marked by <see cref="AssertionMethodAttribute"/> attribute. The mandatory argument of
/// the attribute is the assertion type.
/// </summary>
/// <summary>
/// Specifies assertion type. If the assertion method argument satisfies the condition,
/// then the execution continues. Otherwise, execution is assumed to be halted.
/// </summary>
/// <summary>Marked parameter should be evaluated to true.</summary>
/// <summary>Marked parameter should be evaluated to false.</summary>
/// <summary>Marked parameter should be evaluated to null value.</summary>
/// <summary>Marked parameter should be evaluated to not null value.</summary>
/// <summary>
/// Indicates that the marked method unconditionally terminates control flow execution.
/// For example, it could unconditionally throw exception.
/// </summary>
/// <summary>
/// Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
/// .Where). This annotation allows inference of [InstantHandle] annotation for parameters
/// of delegate type by analyzing LINQ method chains.
/// </summary>
/// <summary>
/// Indicates that IEnumerable, passed as parameter, is not enumerated.
/// </summary>
/// <summary>
/// Indicates that parameter is regular expression pattern.
/// </summary>
/// <summary>
/// Prevents the Member Reordering feature from tossing members of the marked class.
/// </summary>
/// <remarks>
/// The attribute must be mentioned in your member reordering patterns
/// </remarks>
/// <summary>
/// XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
/// as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
/// </summary>
/// <summary>
/// XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
/// is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
/// enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
/// </summary>
/// <remarks>
/// Property should have the tree ancestor of the <c>ItemsControl</c> type or
/// marked with the <see cref="XamlItemsControlAttribute"/> attribute.
/// </remarks>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Resolver
/// 
/// Resolver is a search and replace engine of property and member, it's actually may
/// resolve Object, List<string> and string. To be resolved, an object must have [Resolvable] attribute.
/// Supported type of parameters is: Object and Map
/// 
/// ex:
///     class Foo
///     {
///         public int Value = 1;
///     }
///      
///     void Test()
///     {
///         Foo foo = new Foo();
///         string str = "foo.Value = [foo.Value]";
///
///         Resolver resolver = new Resolver();
///         resolver.SetParameter("foo", foo);
///
///         Console.WriteLine(resolver.Resolve(str));
///         
///         // Output: "foo.Value = 1"
///     }
///     
/// Object must have [Resolvable] attribute to be resolved, ex:
/// 
///     [Resolvable]
///     class C1
///     {
///         public string Str = "c2.Int = [c2.Int]";
///     }
///
///     class C2
///     {
///         public int Int = 2;
///     }
///
///     static void Test()
///     {
///         C1 c1 = new C1();
///         C2 c2 = new C2();
///
///         Resolver resolver = new Resolver();
///         resolver.SetParameter("c2", c2);
///
///         resolver.Resolve(c1);
///
///         Console.WriteLine(c1.Str);
///         // Output: "c2.Int = 2"
///     }
/// 
/// Example of Dictionary<string, T>
/// 
///     [Resolvable]
///     class C1
///     {
///         public string Str = "map.Value1 = [map.Value1], map.Value2 = [map.Value2]";
///     }
///
///     static void Test()
///     {
///         C1 c1 = new C1();
///
///         Dictionary<string, string> map = new Dictionary<string, string>();
///         map["Value1"] = "aaa";
///         map["Value2"] = "bbb";
///
///         Resolver resolver = new Resolver();
///         resolver.SetParameter("map", map);
///
///         resolver.Resolve(c1);
///
///         Console.WriteLine(c1.Str);
///         // Output: "map.Value1 = aaa, map.Value2 = bbb"
///     }
///
/// </summary>
// Note: The method doesn't use regex as this was slower with regexes(mainly due to MT contention)
// Early out
// Support escape char for MemberPath
// [[MyString]] will convert to [MyString]
// Find match range.
// Note that specifying StringComparison.Ordinal saves ~30% of the time passed in IndexOf.
// Append what's before the match
// A string is escaped if the _PathBeginStrings/_PathEndStrings char is doubled (ie [[ ]])
// Also make sure that matchTypeIndex is a char, not a string
// Resolve failed.
// Now that we have done all replace, convert all escaped char.
// build a unique name
// get the paramters...
// IDictionary support 
// prevent object resolve recursion
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Marks a .NET assembly as a host of Sharpmake extension types (platform implementations for Sharpmake generators, builder...).
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Gets the number of <see cref="Configuration"/> instances created so far during
/// Sharpmake's execution.
/// </summary>
/// <summary>
/// Creates a new <see cref="Configuration"/> instance.
/// </summary>
/// <summary>
/// Gets the <see cref="Solution"/> instance that owns this configuration.
/// </summary>
/// <summary>
/// Name of this solution configuration.
/// </summary>
/// <remarks>
/// This name will be displayed in Visual Studio's configuration drop down list. (Or
/// other development tools that support multiple configuration per workspace.)
/// </remarks>
/// <summary>
/// File name (without extension) of the solution that this
/// configuration must be written into.
/// </summary>
/// <summary>
/// Directory of the solution that this configuration must be written into.
/// </summary>
/// <summary>
/// Gets the file name (without extension) of the solution that this configuration must
/// be written info.
/// </summary>
/// <summary>
/// File name (without extension) of the master BFF for this solution configuration.
/// </summary>
/// <summary>
/// Directory of the master BFF for this solution configuration.
/// </summary>
/// <summary>
/// Gets the file path (without extension) of the master BFF for this solution
/// configuration.
/// </summary>
// Can be set to customize solution platform name
// Type of the project, need this to resolve Project instance
// Project
// Project associated configuration
// Target of the project, need to resolve the Configuration
/// <summary>
/// The solution folder to use for the project in this solution. It overrides <see cref="Sharpmake.Project.Configuration.SolutionFolder"/>
/// </summary>
// either or not to compile this project in the solution
// if false; project is added to the solution but not compiled (not included in the project dependencies).
// resolved state, whether this project configuration is built in the solution
//Holds the reference to the startup project. When the project will be resolved, 
//his full name path will be resolved too which allows us to point to the right project.
/// <summary>
/// Holds the path references to projects that should be added in the solution
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Solution Name
// Solution Class Name, ex: "MySolution"
// File name of the c# project configuration, ex: "MyProject.cs"
// Path of the CsFileName, ex: "c:\dev\MyProject"
// FastBuild specific
// the fastbuild all project will be named after the solution, but the suffix can be custom. Warning: this cannot be empty!
// set to null to add to the root
// Warning: this one cannot be null, VS doesn't accept floating files at the root of the solution!
// Experimental! Create solution dependencies from the FastBuild projects outputting Exe to the FastBuildAll project, to fix "F5" behavior in visual studio http://www.fastbuild.org/docs/functions/vssolution.html
/// <summary>
/// For adding additional files/folders to the solution
/// Keys are names of the directories in the virtual solution hierarchy, values are paths
/// </summary>
// Associated project
// Default target use when a project is excluded from build, some generator need to specify a 'dummy' target
// Project file name
// Resolved Project dependencies
// User data, may be use by generator to attach user data
// Folder must all be the same for all config, else will be emptied.
// This will hold MSBuild -> Fastbuild refs
// Build SolutionFilesMapping
// solutionConfiguration.IncludedProjectInfos will be appended
// while iterating, but with projects that we already have resolved,
// so no need to parse them again
// TODO: Slow LINQ? May be better to create this list as part of GetRecursiveDependencies
// if that project was not explicitely added to the solution configuration, add it ourselves, as it is needed
// inherit from the parent: no reason to mark dependencies for build if parent is inactive
// if the project we found in the solutionConfiguration is inactive, and the current is not, replace its settings
// if the current project is inactive, ignore
// If we're finding a fastbuild dependency of an MSBuild project, we know that it'll need re-linking
// if there's only one project to build, no need for the FastBuildAll
// Use the target type from the first solution configuration, as they all should have the same anyway
// Use the target type from the current solution configuration, as they all should have the same anyway
// validate the assumption made above
// we need to iterate again after invoking the configure of all the projects so we can tweak their conf
// Re-link projects to the new All project
// TODO: We should do something to detect and avoid any circular references that this project can now theoretically create.
// output the project in the same folder as the solution, and the same name
// the project doesn't output anything
// get some settings that are usually global from the first project
// we could expose those, if we need to set them specifically for FastBuildAllProject
// add all the projects to build as private dependencies, and OnlyBuildOrder
// update the ToBuild, as now it is built through the "FastBuildAll" dependency
// Relink any build-order dependencies
// add the newly generated project to the solution config
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// ISourceParser classes are tasked with parsing lines in a file.
/// They can add Sharpmake references through the AssemblerContext.
/// </summary>
/// <summary>
/// Parse the current line of the file and update the context if necessary. Parsers MUST NOT assume that the lines will be parsed sequentially.
/// </summary>
/// <summary>
/// A parser that parses C# Attributes, eg [Sharpmake.Include(...)]
/// </summary>
// Discardable Part, we use dp to make it small in the following lines
// Handle namespaces being optional
// First we open groups for every namespace
// Then we write a namespace, close the group, mark it as optional
// For {"Sharpmake", "MyNs"}, the result, ignoring spaces, will be (?:(?:Sharpmake\.)?MyNs\.)?
// This means we accept either no prefix, MyNs. prefix, or Sharpmake.MyNs. prefix, but not the Sharpmake. prefix.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Same as Strings but support to specify additionally an order number for every entry.
/// Every entry has by default the value 0.  Putting negative values will result in the entries
/// to be first after a sort, putting positive will result in the entries to be last after a
/// sort.  Order numbers are kept when copying container to another OrderableStrings.
/// It is forbidden to specify 2 different non-zero order numbers for the exact same string
/// in 2 merged together OrderableStrings.
/// </summary>
// IList<string> for resolver
// Make sure to have same number
// make sure to have orderNumber
/// <param name="collection">The collection to intersect with</param>
/// <param name="rest">Contains elements in both containers that are did not intersect</param>
// Idiot to loop, but this is a ridiculous edge case
// Assuming this is called to update same value
// When doing a for loop to change all values, like resolving them, it's
// possible to end up with duplicates after resolve.  This function can
// be called to set value at index, remove it if already there and return
// index ready to be incremented.
// Assuming this is called to update same value
// Already there, remove
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// The development environments supported by Sharpmake generators.
/// </summary>
/// <remarks>
/// This fragment is mandatory in every target.
/// </remarks>
/// <summary>
/// Visual Studio 2010.
/// </summary>
/// <summary>
/// Visual Studio 2012
/// </summary>
/// <summary>
/// Visual Studio 2013
/// </summary>
/// <summary>
/// Visual Studio 2015
/// </summary>
/// <summary>
/// Visual Studio 2017
/// </summary>
/// <summary>
/// Visual Studio 2019
/// </summary>
/// <summary>
/// iOS project with Xcode.
/// </summary>
/// <summary>
/// Eclipse.
/// </summary>
/// <summary>
/// GNU Makefiles.
/// </summary>
/// <summary>
/// All supported Visual Studio versions.
/// </summary>
// Mandatory
// Optional
// Blob only project, another project reference the source files
// Normal Visual Studio project without blobbing.
// Can be combined with Blob inside same solution.
// Default Target, user may define its own if needed
//possible to override this to make the associations with custom platforms and Sharpmake's
//possible to override this to make the associations with custom platforms and Sharpmake's
// Type of target object, must derive from Target
// Target possibilities contains target with fragments bitfield,
// will be expose for every possibles combinations of unique target value
// Contain all possible unique value of target
// GetFields() does not gurantee order; filter out the enum's special name field
// combinations of fragments are not actual fragments so skip them
// TODO: check if only one bit flag value
// make sure same value is not there twice
// GetFields() does not gurantee order; filter out the enum's special name field
// Validate mandatory fragments
// this type is not masked, accept it
// Filtered out by the _fragmentMasks
//int[] masks;
//BuildFragmentsMasks(fragments, out masks);
// GetFields() does not gurantee order; filter out the enum's special name field
// IsFragmentValueValid() is probably masking all enum values of fragments[j].FieldType?
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Very simple task scheduler, 
//  support:
//      - adding task from inside another task
//      - Wait(), wait for all tasks
//      - Stop(), wait for all tasks and stop
// keep the first exception
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// output type might be defined in inherited target class (this is the case for some extern project). Try to find it through reflection.
// http://www.graphviz.org/doc/info/colors.html
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Same as Strings with configurable type
/// </summary>
/// <typeparam name="T"></typeparam>
// key is the string
// Sorted keys are sorted on demand.
// Does _values needs to be reconstructed ?
// Does _values is sorted ?
// it is important to avoid using the .Add function on the UniqueList<T> rest because we want to preserve the original callerInfo in the dictionary
/// <param name="otherList">the other container to intersect with</param>
/// <param name="rest">Contains elements in both containers that are did not intersect</param>
// If the sorted values is up to date, get the keys from there.
// Sort the items
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// A better type name (for generic classes)
/// <summary>
/// Finds the first occurence of directive and returns the 
/// requested param value. Ex:
/// GetTextTemplateDirectiveParam(ttPath, "output", "extension")
/// will match:
///  <#@ output extension=".txt" #>
/// and return ".txt"
/// </summary>
// cleanup the path by replacing the other separator by the correct one for this OS
// then trim every trailing separators
// return the path passed in with only one trailing separator
// Array of stack members.
// This method is called when we find a .. in the path.
// Truncate the path.
// Skipping consecutive backslashes.
// Important note: Must imcrement _bufferLength at the same time as writing into it as otherwise if
// you are stepping in the debugger and ToString() is implicitely called by the debugger this could truncate the string
// before the increment takes place
// Append a substring path component to the 
// Important note: Must imcrement _bufferLength at the same time as writing into it as otherwise if
// you are stepping in the debugger and ToString() is implicitely called by the debugger this could truncate the string
// before the increment takes place
// First construct a path helper to help with the conversion
// Path starts a path of the format .\
// Path contains a path of the format ..\
// Path contains a path of the format \..\
// Note: This method assumes that SimplifyPath has been called for the argument.
// Find out common path length.
//StringComparison comparison = ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal;
// Handle environment variables and string that contains more than 1 path
/// <summary>
/// Gets the absolute path up to the intersection of two specified absolute paths.
/// </summary>
/// <param name="absPathA">First absolute path.</param>
/// <param name="absPathB">Second absolute path.</param>
/// <returns>Returns an absolute path up to the intersection of both specified paths.</returns>
// Make root drive always uppercase
// Note: Avoid double directory separator when at the root.
// Don't touch paths starting with ..
// skip end of line for comparison
// Note: We don't need the value but the ConcurrentBag interface is bad and is allowing duplicate keys and is more intended to be
// like an unordered queue.
// make sure target directory exist
// write the file
// The alternates db suffixes using by other context
// Current auto-cleanup suffix for the database.
// Read database - This is simply a simple binary file containing the list of file and a version number.
// Validate version number
// Read the list of files.
// File is likely corrupted.
// This is no big deal except that cleanup won't occur.
/// <summary>
/// This method is used to execute files auto-cleanup. Which means deleting files that are no longer saved.
/// When auto-cleanup is active, Sharpmake will save file paths of saved files into a simple database and then when we re-execute sharpmake
/// it will delete old files(files that are in the database but not written in the current process).
/// </summary>
///
/// <remarks>
/// - Auto cleanup is disabled by default and must be enabled explicitly.
/// - You can have many auto cleanup database by setting the AutoCleanupDBSuffix to a string that identify your sharpmake running context.
/// This is useful when you execute sharpmake with more than one setup configuration. For example on ACE, we have two setups:
/// - Engine and Tools and both are running different scripts but have the same .sharpmake file entry point. In that case we would
/// set the suffix with different value depending on the context we are running sharpmake with.
/// - Generally you should also disable the cleanup when running with changelist filters(used typically by Submit Assistant).
/// </remarks>
///
/// <example>
/// This is the way the auto-cleanup is configured on ACE. This code is in our main.
/// Util.AutoCleanupDBPath = sharpmakeFileDirectory;
/// Util.FilesAutoCleanupActive = Arguments.Filter != Filter.Changelist && arguments.Builder.BlobOnly == false;
/// if (Arguments.GenerateTools)
///    Util.AutoCleanupDBSuffix = "_tools";
/// </example>
// Auto cleanup not active. Nothing to do.
// Note: We must take into account all databases when doing the cleanup otherwise we might end up deleting files still used in other contexts.
// Deleting all files that are no longer used.
// Failed to delete the file... Keep it for now... Maybe later we will be able to delete it!
// Check alternateDatabases files
// Another database still uses the file. Simply remove the file from the current database and don't attempt to delete this file.
// Failed to delete the file... Keep it for now... Maybe later we will be able to delete it!
// Write database if needed
// Write version number
// Write the list of files.
// If DbPath is not specify, do not save C# subtypes information
// If the sought StackFrame was found, don't return it if its associated file name is unknown.
// This could happen in Mono when Sharpmake is invoked with /generateDebugSolution. In that case,
// sharpmake_sharpmake's ctor would be looked up and found in the call stack, but the StackFrame would
// refer to a null file name. On Windows, however, sharpmake_sharpmake's ctor simply does not appear in
// the call stack (as though its call is implicit or omitted)...
// Class does not declare a constructor, so impossible to guess file name
// Due to compiler optimizations, sometimes the constructor can be inlined... To avoid crashes in that
// case we search for the base class instead
/// <summary>
///  Search the call stack and return the info about the topmost frame from a file that is edited by the user (.sharpmake or .sharpmake.cs)
/// </summary>
/// <returns> Caller info in a format clickable in the output console if a .sharpmake frame is found. Otherwise return an empty string. </returns>
/// <summary>
///  Lookup the callstack and return the info about the 2nd topmost frame (topmost being where this method is called from) .
/// </summary>
/// <returns> Caller info in a format clickable in the output console.</returns>
/// <summary>
/// Build a fake Guid from input string value.
/// </summary>
/// <param name="value">String value to generate guid from.</param>
/// <returns></returns>
// Both sequences finished
// Only the first sequence has finished
// Only the second sequence has finished
// Both are still going, compare current elements
// If elements are non-equal, we're done
// Visual Studio only escapes what it absolutely has to for XML to be valid.
// escape the < and >
// any & that is not part of an escape needs to be escaped with &amp;
/**
// Must escape " / \ and control characters.
// The website : http://json.org/
// The rfc : https://tools.ietf.org/html/rfc8259#section-7
// Control characters range from 0x0000 to 0x001F (0x0020 is ' '/space)
// The \n \t above also fall into that range, but json accepts them in the friendlier \\n \\t form.
// Others are 'escaped' by printing their code point in hex.
// The Json format specifies 4 digit hex : \uXXXX
// String is IEnumerable, avoid serializing it as an array!
// IDictionary is IEnumerable, avoid serializing it as an array!
// This *should* be safe without Escaping
// IDictionary returns different enumerators depending on which interface GetEnumerator called from.
// IDictionary.GetEnumerator enumerates DictionaryEntry 
// IEnumerable.GetEnumerator enumerates KeyValuePair<>
// Write each element on its own line
// Extra newline after the last element, puts the closing delimiter on its own line
// In case the file is marked as readonly
// If the file has one reparse point, we assume it is a symlink
// null to get default
/// <summary>
/// The full list of products can be found here: https://docs.microsoft.com/en-us/visualstudio/install/workload-and-component-ids
/// </summary>
/// <summary>
/// This can be used to check and limit by specific installed workloads.
/// 
/// What is a Workload?
/// In the VS installer, a 'Workload' is a section that you see in the UI such as 'Desktop development with C++' or '.NET desktop development'.
/// 
/// The full list of products is here: https://docs.microsoft.com/en-us/visualstudio/install/workload-and-component-ids
/// 
/// For each product, clicking it will bring up a page of all of the possible Workloads.
/// For example: https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-professional
/// </summary>
/// <summary>
/// This can be used to check and limit by specific installed components.
/// What is a Component?
/// In the Visual Studio Installer, the 'Components' are individual components associated with each Workload (and some just on the side), 
/// that you can see in the Summary on the right.
/// Each workflow contains a number of mandatory components, but also a list of optional ones.
/// An example would be: 'NuGet package manager' or 'C++/CLI support'.
/// 
/// The full list of products is here: https://docs.microsoft.com/en-us/visualstudio/install/workload-and-component-ids
/// 
/// For each product, clicking it will bring up a page of all of the possible Workloads.
/// For example: https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-professional
/// </summary>
// Ignore
/// <summary>
/// The supported visual studio products, in order by priority in which Sharpmake will choose them.
/// We want to block products like the standalone Team Explorer, which is in the Visual Studio
/// family yet isn't a variant of Visual Studio proper.
/// 
/// The list of Product IDs can be found here: https://docs.microsoft.com/en-us/visualstudio/install/workload-and-component-ids
/// </summary>
// Order by Product ID priority (the order they appear in s_supportedVisualStudioProducts).
// If they have the same Product ID, then compare their versions and return the highest one.
// Swap x and y so that the comparison is inversed (higher values first).
// Fetch all installed products
// Limit to our major version + the supported products, and order by priority.
/// <summary>
/// Generate a pseudo Guid base on relative path from the Project GuidReference path to the generated files
/// Need to do it that way because many vcproj may be generated from the same Project.
/// </summary>
//"Both Visual Studio 2010 and Visual Studio 2012 use a ToolsVersion of 4.0" ref:http://msdn.microsoft.com/en-us/LIbrary/bb383796%28v=vs.110%29.aspx
/// <summary>
/// Extension GetValueOrAdd gets the value at the given key or adds at the given key the value provided
/// </summary>
/// <typeparam name="Key">Type of the key</typeparam>
/// <typeparam name="Value">Type of the value</typeparam>
/// <param name="dictionary">dictionary in which to search</param>
/// <param name="key">key of the value</param>
/// <param name="addValue">value created</param>
/// <returns>the value at the given key (created or not in this call)</returns>
// From Alexandrie
/// <summary>
/// Look up 2 callerInfo string.
/// </summary>
/// <param name="callerInfo1"></param>
/// <param name="callerInfo2"></param>
/// <returns>
/// 1.if they are both refering to file edited by sharpmake user (.sharpmake): concatenation of both separated by a line return
/// 2.if only callerInfo2 refer to file edited by sharpmake user (.sharpmake): callerInfo2
/// 3.otherwise: callerInfo1
/// </returns>
//
// TODO: This method should be deprecated and/or removed.
//       Use FileGenerator or a derived class to build your output files, and call its
//       RemoveTaggedLines method.
//
// remove all line that contain RemoveLineTag
// removes the end of line from the last WriteLine to be consistent with VS project
// output; this will stop the pointless "Do you want to refresh?" prompts because of a
// new line.
/// <summary>
/// The input path got its beginning of path matching the inputHeadPath replaced by the replacementHeadPath.
/// 
/// Throws if the fullInputPath doesn't start with inputHeadPath.
/// 
/// Function is case insensitive but preserves path casing.
/// </summary>
/// <param name="fullInputPath">The path to be modified.</param>
/// <param name="inputHeadPath">The subpath in the head of fullInputPath to replace.</param>
/// <param name="replacementHeadPath">The subpath that will replace the inputHeadPath</param>
/// <returns></returns>
// Normalize paths before comparing and combining them, to prevent false mismatch between '\\' and '/'.
// http://www.mono-project.com/docs/faq/technical/#how-can-i-detect-if-am-running-in-mono
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Simple class that wraps a variable name and it's assigned value.
/// </summary>
/// <summary>
/// Gets the name of the variable or parameter to assign the value to.
/// </summary>
/// <summary>
/// Gets the value to assign.
/// </summary>
/// <summary>
/// Creates a new <see cref="VariableAssignment"/> instance.
/// </summary>
/// <param name="identifier">The name of the variable or parameter to assign.</param>
/// <param name="value">The value to assign to <paramref name="identifier"/>.</param>
/// <exception cref="ArgumentNullException"><paramref name="identifier"/> is `null`.</exception>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Contains methods for specific analysis on a sharpmake DLL
/// </summary>
/// <summary>
/// Analyzes configure methods to find all the Configure() dependent on the call order within the same priority 
/// </summary>
/// <param name="builderFactory">a Functor creator of builder</param>
/// <param name="stopOnFirstError"></param>
/// <returns>a collection of the method dependent on any other methods</returns>
/// <summary>
/// Typical wrapper for a Configure MethodInfo
/// Allows to keep a track of the dependency and the dependents of a configure method
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Creates and enumerable of Configure(...) method info based on the given type.
/// Useful to have different sorts to support old Sharpmake versions or to analyze
/// dependencies between Configure functions.
/// </summary>
/// <param name="type">type on which to get the configure methods</param>
/// <returns>an ordered enumeration of method info</returns>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Tests a specific method to find it's closest dependency.
/// Doesn't find all dependencies.
/// </summary>
/// <summary>
/// Creates method test cases based on the information given
/// </summary>
/// <param name="type">Type of the project or solution to analyze</param>
/// <param name="priority">Priority group of the methods</param>
/// <param name="methods">Methods to analyze</param>
/// <returns>The test cases to execute</returns>
/// <summary>
/// Creates method test cases based on the information given
/// Should be call if you know that the methods contains an error.
/// </summary>
/// <param name="type">Type of the project or solution to analyze</param>
/// <param name="priority">Priority group of the methods</param>
/// <param name="methods">Methods to analyze</param>
/// <param name="suspectedMethods">[out] The methods suspected before processing if any</param>
/// <returns>The test cases to execute</returns>
/// <summary>
/// Tests a specific priority if either is contains dependent methods or not.
/// </summary>
/// <summary>
/// Creates tests case for all given priority of needed.
/// </summary>
/// <param name="type">Source Type of the priorities and methods</param>
/// <param name="priorities">Priorities to analyze</param>
/// <returns>a list of test case to execute</returns>
/// <summary>
/// Creates the tests case to analyze a list of priority.
/// Must be used only if you are sure the type have dependent methods
/// </summary>
/// <param name="type">Type to analyze</param>
/// <param name="priorities">Priorities to analyze</param>
/// <param name="suspectedMethods">[out] the methods suspected before the first iteration</param>
/// <returns>a list of test case to execute</returns>
// if there is more than one priority we can't suspect anything
/// <summary>
/// Tests a specific type if either is contains dependent methods or not.
/// </summary>
/// <summary>
/// First pass of the whole analysis. Builds and array of all the content to be analyzed
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// If a secondary path was specified to the commandline, also write a file under that folder with
// full path hierarchy.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// intentionally do nothing... it is the one intended case
// delete the ouput directory subfolders and files so all files are generated files
// recreate it just in case it makes something crash... we never know
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is  for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Detect "Everything" file format
// Skip the first line, which is the legend:
// Filename,Size,Date Modified, Date Created,Attributes
// Get the folder prefix of everything on the second line
// 16 is directory
// Validated in the main for priority
// Validated in the main for priority
// Will check the presence of the given files and return the list with their full path
// Will check that the given compilation defines are valid
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This GC gives a little bit better results than the other ones. "LowLatency" is giving really bad results(twice slower than the other ones).
// display help if wanted and quit
// Log warnings and errors from builder
// CommonPlatforms.dll is always loaded by default because those are shipped with
// the Sharpmake package.
// If any platform declares its own command line options, execute and validate
// them as well.
// Allow custom mutex name suffix. Useful to debug concurrently multiple sharpmake running from different branches
// This occurs if another sharpmake is killed in the debugger
// output redirect mode
// Log error message
// Then log details
// Use this to catch right away if an exception throw
// returning exit code and error count separately because they can result in an exit code of 0 if they are added together.
// because the debug solution generation runs before the user code,
// we need to do some cleanup so we don't pollute the subsequent generation
// Analyze .sharpmake code
// Allow message log from builder.
// Generate debug solution
// Load user input (either files or pre-built assemblies)
// Call all configuration's methods and resolve project/solution member's values
// poor way to test the OS...
// -i, --ignore-case               ignore case differences in file contents
// -u, -U NUM, --unified[=NUM]   output NUM (default 3) lines of unified context
// -w, --ignore-all-space          ignore all white space
// only whitespace or casing changes");
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Probably write a better description.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
//[module: Sharpmake.Include("*/*FunctionalTest.sharpmake.cs")]
/*FunctionalTest.sharpmake.cs")]
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// workaround necessity of rc.exe
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// TODO: Remove the public setter.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// TODO: Remove usage of MemoryStream in APIs and refactor this to use StreamBuilder
//       instead.
// I assume they go to the trouble of doing all that to read a line for a reason. May
// help to know what it is though.
// I assume they go to the trouble of doing all that to read a line for a reason. May
// help to know what it is though.
// I assume they go to the trouble of doing all that to read a line for a reason. May
// help to know what it is though.
// I assume they go to the trouble of doing all that to read a line for a reason. May
// help to know what it is though.
// Logically the writer should be reusable on a modified stream after flushing it's
// buffer but the API does not guarantee that buffered writers after modifying a stream.
// So create a new string.
// TODO: Remove this since callers can call Seek and break the writer. Calling code should
//       just use ToString.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Utilities for file generation.
/// </summary>
/// <summary>
/// A string that, when put on a line of a file during generation, will cause the line to
/// be removed from the generated files.
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Solution generators
// Project generators
// singleton
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Interface that exposes facilities for generating text-based files.
/// </summary>
/// <summary>
/// Gets the <see cref="Sharpmake.Resolver"/> instance that the generator uses to resolve
/// the symbols between square brackets `[...]` when <see cref="Write(string)"/> and
/// <see cref="WriteLine(string)"/> are called.
/// </summary>
/// <summary>
/// Writes text to the file being generated, resolving the symbols between square brackets
/// `[...]` along the way.
/// </summary>
/// <param name="text">The text to write into the file.</param>
/// <summary>
/// Writes text to the file being generated, resolving the symbols between square brackets
/// `[...]` along and way. Uses a default value when the resolve process fails.
/// </summary>
/// <param name="text">The text to write into the file.</param>
/// <param name="fallbackValue">A <see cref="string"/> to use when the resolve fails</param>
/// <summary>
/// Writes a line of text to the file being generated, resolving the symbols between square
/// brackets `[...]` along the way.
/// </summary>
/// <param name="text">The line of text to write into the file.</param>
/// <summary>
/// Writes a line of text to the file being generated, resolving the symbols between square
/// brackets `[...]` along the way. Uses a default value when the resolve process fails.
/// </summary>
/// <param name="text"></param>
/// <param name="fallbackValue"></param>
/// <summary>
/// Writes text to the file being generated as-is, without resolving anything.
/// </summary>
/// <param name="text">The text to write into the file.</param>
/// <summary>
/// Writes a line of text to the file being generated as-is, without resolving anything.
/// </summary>
/// <param name="text">The text to write into the file.</param>
/// <summary>
/// Declares one or several variables to be replaced while resolving.
/// </summary>
/// <param name="variables">An array of <see cref="VariableAssignment"/> instances that designate the variables to replace when resolving.</param>
/// <returns>An object that implements <see cref="IDisposable"/> and will automatically undefine the variable when it's <see cref="IDisposable.Dispose"/> method is invoked.</returns>
/// <exception cref="ArgumentNullException"><paramref name="variables"/> is null.</exception>
/// <summary>
/// Resolves environment variables in the generated file.
/// </summary>
/// <param name="platform">The platform whose <see cref="EnvironmentVariableResolver"/> is going to be used by the implementation.</param>
/// <param name="variables">An array of <see cref="VariableAssignment"/> containing the variables to resolve.</param>
/// <exception cref="ArgumentNullException"><paramref name="variables"/> is null.</exception>
/// <summary>
/// Provides extension methods for <see cref="IFileGenerator"/>.
/// </summary>
/// <summary>
/// Declares one or several variables to be replaced while resolving.
/// </summary>
/// <param name="fileGenerator">The <see cref="IFileGenerator"/> instance to use.</param>
/// <param name="identifier">The symbol's identifier name.</param>
/// <param name="value">The value of the symbol when resolving.</param>
/// <returns>An object that implements <see cref="IDisposable"/> and will automatically undefine the variable when it's <see cref="IDisposable.Dispose"/> method is invoked.</returns>
/// <exception cref="ArgumentNullException"><paramref name="fileGenerator"/> or <paramref name="identifier"/> is null.</exception>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// The setter on those two should not be there.
// If the output should not contain any variables (they should be resolved)
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//Source files that are potentially removable. Need to check if they are excluded from build in all configs.
// Unit Test Variables
// Create the target folder (solutions and projects are folders in XCode).
// Header.
// Footer.
// Remove all line that contain RemoveLineTag
// Write the solution file
// Create the target folder (solutions and projects are folders in XCode).
// Setup resolvers
// Build testable elements
// Write the scheme file
// Remove all line that contain RemoveLineTag
// Write the solution file
//TODO: add support for multiple targets with the same outputtype. Would need a mechanism to define a default configuration per target and associate it with non-default conf with different optimization.
//At the moment it only supports target with different output type (e.g:lib, app, test bundle)
//Directory structure
//Generate options for each configuration
//Loop on default configs for each target
//Generate BuildConfigurations
// Generate dependencies for unit test targets.
// Excluded from build in all configs: remove them from the solution.
//This loop will find the register to the sets _projectItems  and configurationsForProject the first configuration for each optimization type that is contained in the configurations.
//Project options can only be set according to optimization types e.g: Debug, Release, Retail.
//Find Project.Configuration of the bundle loading app that matches the unit test target, if it exists.
//Should have OutputType IosApp assuming targets with different output type.
//Key is the default config of a Native Target, Value is the list of configs per native target with different optimization (Debug, Release,...)
// Headers not matching file restrictions : remove them from the solution.
// Search in existing roots.
// Not found in existing root, create a new root for this item.
//string fileName = fullPath.Substring(parentDirectoryPath.Length + 1);
//Previous Default value in the template
// Release
// Mac executable
// Only for Uid computation.
// Only for Uid computation.
// Lookup for the app in the unit test dependencies.
// Each ProjectNativeTarget have a list of ProjectBuildConfiguration that wrap a Project.Configuration. 
// Here we look for the Project.Configuration in the ProjectBuildConfiguration list of the test host target (app) 
// that match the unit tests bundle ProjectBuildConfiguration.
//ProjectMain mainItem = (ProjectMain)item;
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// !$*UTF8*$!
/* Project object */;
/* Begin [item.SectionString] section */
/* End [item.SectionString] section */
/* [item.Identifier] */,
/* Products */;
/* [project.Name] */;
/* [item.Identifier] */ =
/* [item.File.Name] in [item.File.Type] */ =
/* [item.File.Name] */;
/* PBXContainerItemProxy */ =
/* [item.Name] */ =
/* Frameworks */ =
/* [item.Identifier] */ =
/* [item.Identifier] */ =
/* Build configuration list for PBXNativeTarget ""[item.Identifier]"" */;
/* Resources */,
/* Sources */,
/* Frameworks */,
/* [item.OutputFile.Name] */;
/* Project object */ =
/* Build configuration list for PBXProject ""[item.Identifier]"" */;
/* [item.MainGroup.Name] */;
/* [item.OutputFile.Name] */ =
/* [item.Proxy.Identifier] */;
/* Resources */ =
/* Sources */ =
/* PBXTargetDependency */ =
/* [item.Optimization] */ =
/* [item.Optimization] */ =
/* [item.Optimization] */ =
/* Build configuration list for [item.ConfigurationType] ""[item.RelatedItem.Identifier]"" */ =
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Solution _Solution;
// Create the target folder (solutions and projects are folders in XCode).
// Main solution file.
// Ensure all projects are always in the same order to avoid random shuffles
// Move the first executable project on top.
// Write the solution file
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// fastbuild arguments for a specific configuration
// ===================================================================================
// BFF Generation
// ===================================================================================
//To make sure that all the projects are fastbuild
// TODO: bff file name could be different per conf, hence we would generate more than one file
// Generate all configuration options onces...
// Validation of unsupported cases
// Start writing Bff
// TODO: really not ideal, refactor and move the properties we need from it someplace else
// We will need as many "sub"-libraries as subConfigs to generate the final library
// For now, this will do.
// TODO: implement
// removes the extension
// post-build steps on the last subconfig
// use the global root for alias computation, as the project has not idea in which master bff it has been included
// pre-build steps on the first config
// the pre-steps are written in the master bff, we only need to refer their aliases
// filter to only get the configurations of projects that were explicitely added, not the dependencies
// post-build steps on the last subconfig
// Do not take cpp Language conformance into account while compiling in C
// Compiler option to indicate that its a C file
// only ref by path supported
// <!-- Set the value of _MSC_VER to claim for compatibility -->
// <!-- Set the value of _MSC_VER to claim for compatibility -->
// <!-- Set the value of _MSC_VER to claim for compatibility -->
// TODO: figure out what version number to put there
// maybe use the DevEnv value
// -m$(PlatformArchitecture)
// c1xx: warning C4199: two-phase name lookup is not supported for C++/CLI, C++/CX, or OpenMP; use /Zc:twoPhase-
// Adding the folders excluded from unity to the folders to build without unity(building each file individually)
// Converting the excluded filenames to relative path to the input path so that this
// can work properly with subst usage when running with fastbuild caching active.
//
// Also exclusion checks in fastbuild assume that the exclusion filenames are
// relative to the .UnityInputPath and checks that paths are ending with the specified
// path which means that any filename starting with a .. will never be excluded by fastbuild.
//
// Note: Ideally fastbuild should expect relative paths to the bff file path instead of the .UnityInputPath but
// well I guess we are stuck with this.
// It is useless to have an input pattern defined if there is no input path
// Only declare the compiler here to avoid potential exceptions caused by GetFragment in targets without a .Net framework
// Exe and DLL will always add an extra objectlist
// only last subconfig will generate objectlist
//  CLANG Specific
// TODO: This checks twice if the platform supports Clang -- fix?
// CLANG Specific
// TODO: This checks twice if the platform supports Clang -- fix?
// TODO: Add BFF generation for Win64 on Windows/Mac/Linux?
// in the case the lib has the flag force to be an objectlist, change the template
// in the case the lib has the flag force to be an objectlist, change the template
// TODO: This checks twice if the platform supports Clang -- fix?
// These are all pre-build steps, at least in principle, so insert them before the other build steps.
// Write Target Alias
// Write Target Alias
// Write all unity sections together at the beginning of the .bff just after the header.
// Now combine all the streams.
// remove all line that contain RemoveLineTag
// Write bff file
// if the include is below the global root, we compute the relative path,
// otherwise it's probably a system include for which we keep the full path
// TODO: really not ideal, refactor and move the properties we need from it someplace else
// Fill include dirs
// Fill resource include dirs
// with LLVM as toolchain, we are still using the default resource compiler, so we need the default include prefix
// TODO: this is not great, ideally we would need the prefix to be per "compiler", and a platform can have many
// Fill using dirs
// TODO: really not ideal, refactor and move the properties we need from it someplace else
//AdditionalLibraryDirectories
//                                            AdditionalLibraryDirectories="dir1;dir2"    /LIBPATH:"dir1" /LIBPATH:"dir2"
//AdditionalDependencies
//                                            AdditionalDependencies="lib1;lib2"      "lib1;lib2" 
////IgnoreSpecificLibraryNames
////                                            IgnoreDefaultLibraryNames=[lib]         /NODEFAULTLIB:[lib]
// TODO: really not ideal, refactor and move the properties we need from it someplace else
// TODO: really not ideal, refactor and move the properties we need from it someplace else
// convert all root paths to be relative to the project folder
// if the path is below the global root, we compute the relative path, otherwise we keep the full path
// If not a path, we've got two kinds of way of listing a library:
// - With a filename without extension we must add the potential prefix and potential extension.
//      Ex:  On clang we add -l (supposedly because the exact file is named lib<library>.a)
// - With a filename with a static or shared lib extension (eg. .a/.lib/.so), we shouldn't touch it as it's already set by the script.
// here we could also verify that the path is rooted
// LCTODO: this might be broken, clarify the rules for which this is supposed to work
// Joins the list of dependencies with a ; and then re-split them after a resolve.
// We have to do it that way because a token can be resolved into a
// semicolon -separated list of dependencies.
/// <summary>
/// Method that allows to determine for a specified dependency if it's a library or an object list. if a dep is within
/// the list, the second condition check if objects is present which means that the current dependency is considered to be
/// a force objectlist.
/// </summary>
/// <param name="dependencies">all the dependencies of a specific project configuration</param>
/// <param name="dep">additional dependency clear of additional suffix</param>
/// <returns>return boolean value of presence of a dep within the containing dependencies list</returns>
// Only add unity build to non blobbed projects -> which they will be blobbed by FBuild
// stop here in case we are in exclude mode, as we only need to verify that the unity section has some files
// Conditional statement depending on the blobbing strategy
// Fastbuild will process as unity all files contained in source Root folder and all additional roots.
// check if there's some static blobs lying around to exclude
// Remove any excluded paths(exclusion has priority)
// Converting the excluded filenames to relative path to the input path so that this
// can work properly with subst usage when running with fastbuild caching active.
//
// Also exclusion checks in fastbuild assume that the exclusion filenames are
// relative to the .UnityInputPath and checks that paths are ending with the specified
// path which means that any filename starting with a .. will never be excluded by fastbuild.
//
// Note: Ideally fastbuild should expect relative paths to the bff file path instead of the .UnityInputPath but
// well I guess we are stuck with this.
// completely drop the subconfig in case it was only a unity tuple, without any files
// no input path nor files => no unity
// only write UnityInputPattern if it's not FastBuild's default value of .cpp
// Note that the UnityName and UnityOutputPattern are intentionally left empty: they will be set in the Resolve
// _unities being a dictionary, a new entry will be created only
// if the combination of options forming that unity was never seen before
// add the current conf in the list that this unity serves
// For now, this will do.
// Write all selected items.
// Add source files
// Check if we need to add a compatible config for unity build - For now this is limited to C++ files compiled with no special options.... 
// For now, this will do.
// Convert each of file paths to each of the input paths and try to
// find the first one not starting from ..(ie the file is in the tested input path)
// Copyright (c) 2017 Ubisoft Entertainment
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=================================================================================================================
// [fastBuildProjectName] FASTBuild config file
//=================================================================================================================
//=================================================================================================================
// FASTBuild custom section
//=================================================================================================================
//=================================================================================================================
// [fastBuildProjectName] .bff includes
//=================================================================================================================
//=================================================================================================================
// Global Configuration include
//=================================================================================================================
//=================================================================================================================
// Global Settings
//=================================================================================================================
//=================================================================================================================
// [fastbuildCompilerName]
//=================================================================================================================
// General
// ---------------------------
// Input
// ---------------------------
// Input files
// ---------------------------
// Manifest
// ---------------------------
// Debugging
// ---------------------------
// System
// ---------------------------
// Optimization
// ---------------------------
// Embedded IDL
// ---------------------------
// Windows Metadata
// ---------------------------
// Advanced
// ---------------------------
// Additional linker options
//--------------------------
// Precompiled Headers options
// ---------------------------
// Precompiled Header options for Clang
// --------------------------
// Resource Compiler options
// -------------------------
// Resource Compiler options
// -------------------------
// Compiler options
// ----------------
// Compiler options
// ----------------
// Compiler options
// ----------------
// General options
// ---------------------------
// Preprocessor options
// ---------------------------
// General options
// ---------------------------
// Multi-threaded build is already handled by FASTBuild
// + ' [cmdLineOptions.MultiProcessorCompilation]'
// Preprocessor options
// ---------------------------
// Code Generation options
// ---------------------------
// Language options
// ---------------------------
// Output Files options
// ---------------------------
// Advanced options
// ---------------------------
// Character Set
// ---------------------------
// Additional compiler options
//--------------------------
// Optimizations options
// ---------------------
////////////////////////////////////////////////////////////////////////////////
// PLATFORM SPECIFIC SECTION
// [fastBuildDefine]
////////////////////////////////////////////////////////////////////////////////
//=================================================================================================================
// LIB [fastBuildOutputFileShortName]_[fastBuildOutputType] [fastBuildPartialLibInfo]
//=================================================================================================================
//=================================================================================================================
// Alias [fastBuildOutputFileShortName]
//=================================================================================================================
//=================================================================================================================
// Copy file [fastBuildCopySource] to [fastBuildCopyDest]
//=================================================================================================================
//=================================================================================================================
// [fastBuildOutputType] [fastBuildOutputFileShortName]_[fastBuildOutputType]
//=================================================================================================================
//=================================================================================================================
// ObjectList [fastBuildOutputFileShortName]_resources
//=================================================================================================================
//=================================================================================================================
// ObjectList [fastBuildOutputFileShortName]_embedded
//=================================================================================================================
//=================================================================================================================
// ObjectList [fastBuildOutputFileShortName]_objects
//=================================================================================================================
//=================================================================================================================
// Exec [fastBuildPreBuildName]
//=================================================================================================================
//=================================================================================================================
// Test [fastBuildTest]
//=================================================================================================================
//=================================================================================================================
// Master .bff Unity/Blob files (shared across configs)
//=================================================================================================================
// All config sections. For now this section is used for submit assistant(when there is a source file filter)
//=================================================================================================================
// All Configs Alias
//=================================================================================================================
//=================================================================================================================
// Entry BFF for [solutionFileName]
//=================================================================================================================
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Name of unity
// Path to output generated Unity files
// (optional) Path (or paths) to find files
// (optional) Path (or paths) in which to ignore files
// (optional) Wildcard pattern(s) of files/folders to exclude
// (optional) Pattern(s) of files to find (default *cpp)
// (optional) Recurse when searching for files (default true)
// (optional) Explicit list of files to include
// (optional) Explicit list of excluded files (partial, root-relative of full path)
// (optional) ObjectList(s) to use as input
// (optional) Build writable files individually (default false)
// (optional) Disable isolation when many files are writable (default 0)
// (optional) Pattern of output Unity file names (default Unity*cpp)
// (optional) Number of Unity files to generate (default 1)
// (optional) Precompiled Header file to add to generated Unity files
// Overflow is fine, just wrap
// This makefile command generator is for supporting legacy code without any client code change.
// $(ProjectDir) has a trailing slash
// we need to compute the missing member values in the Unity objects:
// UnityName and UnityOutputPattern
// first we merge the fragment values of all configurations sharing a unity
// get the fragment info from the first configuration target,
// which works as they all share the same Target type
// then, figure out which fragments are different *across* unities
// finally, create a unity name that only contains the varying fragments
// if not a differentiating fragment, skip
// Convert from int to the fragment enum type, so we can ToString() them.
// Fragments are enums by contract, so Enum.ToObject works
// Select items.
//
// Write all selected items.
//
// This is normally the project directory.
// keep the full path for the source if outside of the global root
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Augments the <see cref="IPlatformBff"/> interface to provide services for platforms that
/// are based on Clang.
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Augments the <see cref="IPlatformBff"/> interface to provide services for Microsoft's
/// proprietary platforms.
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// TODO: Streamline this with the Vcxproj interfaces. There is no reason why BFF and VCXPROJ
//       generation need to specify twice the platform defines, why both have to specify
//       whether it takes a lib- prefix before libraries, etc. Furthermore, these interfaces
//       should be about providing the information required to generate the files, and less
//       about participating in the generation.
//
/// <summary>
/// Interface that exposes the required methods and properties to generate a .bff file for
/// FastBuild using Sharpmake.
/// </summary>
/// <summary>
/// Gets the main `#define` symbol for that platform in the BFF file.
/// </summary>
/// <remarks>
/// Note that this is *NOT* the C or C++ define symbol. The BFF scripts support the
/// `#define` instruction, and this property returns a symbol that tells the scripts
/// whether we're dealing with a given platform.
/// </remarks>
/// <summary>
/// Gets a configuration name for that platform in the .bff file for the code files that
/// are written in native C code.
/// </summary>
/// <summary>
/// Gets a configuration name for that platform in the .bff file for the code files that
/// are written in native C++ code.
/// </summary>
/// <summary>
/// Gets whether a library prefix (usually `lib`) is required on that platform when
/// building libraries.
/// </summary>
/// <param name="conf">The <see cref="Configuration"/> under which the check is requested.</param>
/// <returns>`true` if a prefix is required, `false` otherwise.</returns>
/// <summary>
/// Setups extra linker settings for linking with that platform.
/// </summary>
/// <param name="fileGenerator">A <see cref="IFileGenerator"/> for writing the file.</param>
/// <param name="configuration">The project configuration</param>
/// <param name="fastBuildOutputFile">The file name of the build output.</param>
/// <summary>
/// Get the extra list of build steps to execute for this platform.
/// </summary>
/// <param name="configuration">The project configuration</param>
/// <param name="fastBuildOutputFile">The file name of the build output.</param>
/// <returns>The list of post build step to execute.</returns>
/// <summary>
/// Get the linker output name for this platform.
/// </summary>
/// <param name="outputType">The project output type</param>
/// <param name="fastBuildOutputFile">The original file name of the build output.</param>
/// <returns>The final file name of the build output.</returns>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Dependency dictionary based on the include string (many projects might be in one .bff or a single project might generate many
// All Configs section when running with a source file filter
// Export projects do not have any bff
// When the project has a source file filter, only keep it if the file list is not empty
//
// In every case, we need a BFF with the name of the generated solution to start a
// build from Visual Studio with the generated projects. If the name of the BFF to
// generate for that solution happens to be the same as the solution's name, we
// generate everything in that file. Otherwise, we generate the content of the BFF in
// the appropriate file and we generate an *additional* BFF with the same name as the
// solution which simply includes the "real" bff.
//
// The reason we have to do it like that is to enable building a specific project in
// Visual Studio. A project can be included in several solutions, and can be built
// differently depending on the solution. This means we can't generate a specific
// master BFF name in the project's make command because which BFF is needed depends on
// the solution, not the project. So instead, when VS builds a project, we use
// $(SolutionName).bff as the BFF make command.
//
// So, if you want a shared master BFF instead of doing it per-solution or change the
// name, that's great, but we *need* $(SolutionName).bff for things to work in Visual
// Studio, even if all it does is include the real BFF.
//
// First collect all solutions and sort them by master BFF, then once we have all of
// them, the post-generation event handler will actually generate the BFF.
// Global configuration file is in the same directory as the master bff but filename suffix added to its filename.
// We are running in filter mode for submit assistant and all projects were filtered out. 
// We need to skip generation and delete any existing master bff file.
// Start writing Bff
// section that is not ordered
// Export projects do not have any bff
// When the project has a source file filter, only keep it if the file list is not empty
// use the global root for alias computation, as the project has not idea in which master bff it has been included
// kind of cheating to use that cache instead of the masterBffInfo.CompilerSettings, but it works :)
// remove all line that contain RemoveLineTag
// Write master .bff file
// remove all line that contain RemoveLineTag
// Write master bff global settings file
// !FIX FOR LINK : fatal error LNK1158: cannot run rc.exe!
//
// link.exe on win64 executes rc.exe by itself on some occasions
// if it doesn't find it, link errors can occur
//
// link.exe will first search rc.exe next to it, and if it fails
// it will look for it in the folders listed by the PATH
// environment variable, so we'll try to replicate that process
// in sharpmake:
//
//       1) Get the linker path
//       2) Look for rc.exe near it
//       3) If found, exit
//       4) If not, add a PATH environment variable pointing to the rc.exe folder
// check if the configuration has a linker
// if so, try to find a rc.exe near it
// if not found, get the folder of the custom
// rc.exe or the default one to add it to PATH
// Only keep used projects in filter mode. TODO: Make this cleaner.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Precomp arguments flags are actually written by the bff generator (see bff.template.cs)
// Therefore, the CommandLineOptions entries only contain the pch name and file.
// AdditionalCompilerOptions are referenced from Options in the bff template.
// Required to avoid errors in VC headers.
// if the include is below the global root, we compute the relative path,
// otherwise it's probably a system include for which we keep the full path
// TODO: really not ideal, refactor and move the properties we need from it someplace else
// Fill include dirs
// TODO: move back up, just below the creation of the dirs list
// Fill resource include dirs
// with LLVM as toolchain, we are still using the default resource compiler, so we need the default include prefix
// TODO: this is not great, ideally we would need the prefix to be per "compiler", and a platform can have many
// Fill using dirs
// ProjectOptionsGenerator will generate format some arguments
// (includes, defines, manifests...) specifically for the bff template.
// The string is split on multiple lines and concatenated ('foo'\r\n + 'bar')
// TODO: Consider sub-configurations (file specific)
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Create the target folder.
// Main solution file. 
// Write the makefile in a file in memory as to not overwrite if no changes detected.
// Write the solution file
// Create the target folder.
// Main solution file. 
// Write the makefile in a file in memory as to not overwrite if no changes detected.
// Write the solution file
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// TODO: Pre and post build commands.
// TODO: Precompiled header support.
// TODO: Dynamic library support.
/// <summary>
///
/// </summary>
// TODO: Yet another ProjectFile! Would be a good idea to move this into a common class.
// LC TODO can it really return null ???
// Ensure all projects are always in the same order to avoid random shuffles
// Erase solution file if solution has no projects.
// Write it all in memory to not overwrite if no changes detected.
// Projects rules
// Clean rule
// Help rule
// Optimizations enumeration rely on the fact that all projects share the same targets as the solution.
// Write the solution file
/// <summary>
/// Validate that all solution configurations meet the requirements of the generator.
/// </summary>
/// <exception cref="Error">The solution contains an invalid configuration.</exception>
// Validate that all solution configuration name are unique for a given platform.
// This is a requirement for the generated project makefile.
// Need to sort by name and platform
// Build source files list.
// Generate options.
// Configurations variables.
// Objects variables
// Excluded source files are written to the makefile but are commented out.
// This support the use case where you have a huge unit tests suite that take too long to compile.
// In this case, you just exclude all unit tests from the build and manually uncomment only the unit tests you want to build.
// General rules
// Source file rules
// Since we write excluded source files commented. Here we write rules for all files
// in case one of the commented out object file is manually uncomment.
// Write the project file
/// <summary>
/// Validate that all project configurations meet the requirements of the generator.
/// </summary>
/// <exception cref="Error">The project contains an invalid configuration.</exception>
// All configurations must share the same project name.
// Validate that 2 conf name in the same project and for a given platform don't have the same name.
// set generator information
// CompilerToUse
// IntermediateDirectory
// OutputDirectory
// Defines
// Includes
// CFLAGS
// ExtraWarnings
// GenerateDebugInformation
// OptimizationLevel
// Warnings
// WarningsAsErrors
// AdditionalCompilerOptions
// CXXFLAGS
// CppLanguageStandard
// Exceptions
// RTTI
// OutputFile
// DependenciesLibraryFiles
// LibraryFiles
// LibraryPaths
// Dependencies
// LinkCommand
// this is supported in both gcc and clang
// Add source files
// type -> files
// Ignored.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//Strings compilerExportedFlagsDebug = Options.GetStrings<Options.AndroidMakefile.CompilerExportedFlags>(configurationDebug);
//Strings compilerExportedFlagsRelease = Options.GetStrings<Options.AndroidMakefile.CompilerExportedFlags>(configurationRelease);
//Strings compilerExportedFlagsFinal = Options.GetStrings<Options.AndroidMakefile.CompilerExportedFlags>(configurationRetail);
// Overflow is fine, just wrap
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// Copyright (c) 2017 Ubisoft Entertainment
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//private string _ProjectSourceCapitalized;
// Need to sort by name and platform
// validate that 2 conf name in the same project don't have the same name
// set generator information
//_ProjectSourceCapitalized = Util.GetCapitalizedPath(project.SourceRootPath);
// xml begin header
// xml header contain description of each target
// xml end header
// generate all configuration options once...
// configuration general
// .props files
// configuration ItemDefinitionGroup
// .targets
// Write the project file
// remove all line that contain RemoveLineTag
// Add source files
// type -> files
// if (projectFile.FileExtension == "h")
// Write header files
// The lib name to first load from an AndroidActivity must be a dynamic library.
//Options.Vc.General.UseDebugLibraries.
//    Disable                                 WarnAsError="false"
//    Enable                                  WarnAsError="true"                              /WX
//OutputDirectory
//    The debugger need a rooted path to work properly.
//    So we root the relative output directory to $(ProjectDir) to work around this limitation.
//    Hopefully in a futur version of the cross platform tools will be able to remove this hack.
//IntermediateDirectory
// Copyright (c) 2017 Ubisoft Entertainment
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//schemas.microsoft.com/developer/msbuild/2003"">
// The output directory is converted to a rooted path by prefixing it with $(ProjectDir) to work around
// an issue with VS Android build scripts. When a project dependency has its project folder not at the
// same folder level as the AndroidPackageProject, VS can't locate its output properly using its relative path.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//Available field which could be supported
//https://msdn.microsoft.com/en-us/library/ms164294.aspx
// Fix indentation here...
// Need to sort by name and platform
// valid that 2 conf name in the same project don't have the same name
//set the default outputType
// set generator information
// source control
//shouldn't be a problem since you can't have 2 different target frameworks or ToolsVersion in the same projectFile
// xml begin header
// generate all configuration options onces...
// user file
// configuration general
// If dependency project is marked as [Compile], read the GUID from the project file
// FIXME : MsBuild does not seem to properly detect ReferenceOutputAssembly setting. 
// It may try to recompile the project if the output file of the dependency is missing. 
// To counter this, the CopyLocal field is forced to false for build-only dependencies. 
// Includes debug symbols of private (i.e. copy local) referenced projects in the VSIX.
// This WILL override default values of <IncludeOutputGroupsInVSIX> and <IncludeOutputGroupsInVSIXLocalOnly> from Microsoft.VsSDK.targets,
// so if the VSIXs stop working, this may be the cause...
// We need to know if there is any WCFMetadataStorage detected before generating <WCFMetadata>
// TODO tjn move this outside ! we are generating .csproj, we shouldn't fill Import here
// Add an extra tag to setup VSIX on VS2017, which is generated on Visual Studio
// 2017. (This is likely a Microsoft hack to plug 2017 on the 2015 toolset.)
// Copy in new list to avoid concurrent access
// Write the project file
//Add the None files from the configuration
// None file exclusions
// Extract all potential generated classes generated for model from .edmx definition
//schemas.microsoft.com/ado/2009/11/edmx";
//schemas.microsoft.com/ado/2009/11/edm";
//tt files
//Add the generated file if its in the remaining files.
//Remove generated file wherever it is.
//xaml files
//tolist to enable removal in the foreach
//single XamlFile
// Removing from remainingSourceFiles because sometimes the file is in both list. Could happen for example if
// NoneExtensions contains .sharpmake.cs and SourceFilesExtensions contains .cs
// If we don't remove the file, it will be duplicated in the csproj in a <Compile> section and in a <None> section.
//resources
// Have also as Resource for WPF
// Only use the project propagation flag is not explicit value was provided and if the project propagation flag is set.
// package reference: Default in vs2017+
// project.json: Default in vs2015
// packages.config: Default in vs2013, vs2012, and vs2010
/// <summary>
/// Add the template file and the generated file to the project
/// when requested by addGeneratedFile.
/// .cs, .xaml and other are threated as different items.
/// </summary>
//TODO Give some kind of additional TT directive to specify the build action directly?
//For now everything is none but cs and xaml.
// Exit out early if the file is not a relative path.
// SHARPMAKE GENERATED CSPROJ SUBTYPE : <SubType>([A-Za-z]*)</SubType>");
// Skip .designer.cs files as we know they are not Windows Form files.
// Skip missing files
// Malformed Xml (could happen because of a multithreading issue)
// Default defines...
// Release
//Output
//IntermediateDirectory
//BaseIntermediateOutputPath
// Options.CSharp.OriginatorKeyFile
// concat defines, don't add options.Defines since they are automatically added by VS
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//schemas.microsoft.com/developer/msbuild/2003"">
//schemas.microsoft.com/developer/msbuild/2003"">
// END of public static class Project
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// IncludePaths should contain only the project's own includes, and PlatformIncludePaths
// are the platform's include paths.
// Should take IVcxprojGenerationContext but this is called by BaseUserFile which should not know that interface.
// TODO: Merge with the above function and edit the reference projects.
// TODO: Refactor this.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// The packages.config file maintains a list of packages used in a project.
// It is superseded by project.json with NuGet 3.0+, but the latter discards certain functionality.
// This code should be used primarily for getting old projects to work.
// https://docs.microsoft.com/en-us/nuget/schema/project-json
// No NuGet references and no trace of a previous packages.config
// Do not delete packages.config submitted in P4
// dependencies
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// The project.json file maintains a list of packages used in a project, known as a package reference format.
// It supersedes packages.config but is in turn superseded by PackageReference with NuGet 4.0+.
// https://docs.microsoft.com/en-us/nuget/schema/project-json
// No NuGet references and no trace of a previous project.json
// Do not delete project.json submitted in P4
// frameworks
// runtimes
// dependencies
// Check for private assets
// Check for a custom type
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <remarks>
/// See : https://github.com/NuGet/Home/wiki/%5BSpec%5D-Managing-dependency-package-assets#suppress-parent
/// </remarks>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Default defines, includes, libraries...
// Set whatever VS needs to delete when you run the Clean command.
// Release
//Output
//    Application                             Project.ProjectConfiguration.ConfigurationType="1"
//    Dll                                     Project.ProjectConfiguration.ConfigurationType="2"             /D "_WINDLL"                            /DLL
//    Lib                                     Project.ProjectConfiguration.ConfigurationType="4"
//IntermediateDirectory
// This should normally be set with the KitsRootPaths class, but this allows the coder to force a platform version.
// support of PCH requires them to be set as ForceIncludes with ClangCl
// save the vanilla value without the LLVM workaround for reuse later
//Options.Vc.General.CharacterSet.
//    NotSet                                  CharacterSet="0"
//    UseUnicodeCharaterSet                   Project.ProjectConfiguration.CharacterSet="1"                  /D "_UNICODE" /D "UNICODE"
//    UseMultiByteCharaterSet                 Project.ProjectConfiguration.CharacterSet="2"                  /D "_MBCS"
//Options.Vc.Compiler.CppLanguageStandard.
//    CPP98                                   LanguageStandard=""
//    CPP11                                   LanguageStandard=""
//    CPP14                                   LanguageStandard="stdcpp14"                                    /std:c++14
//    CPP17                                   LanguageStandard="stdcpp17"                                    /std:c++17
//    GNU98                                   LanguageStandard=""
//    GNU11                                   LanguageStandard=""
//    GNU14                                   LanguageStandard="stdcpp14"                                    /std:c++14
//    GNU17                                   LanguageStandard="stdcpp17"                                    /std:c++17
//    Latest                                  LanguageStandard="stdcpplatest"                                /std:c++latest
// Compiler section
//Options.Vc.General.CommonLanguageRuntimeSupport.
//Options.Vc.General.WholeProgramOptimization.
//    NoWholeProgramOptimization              WholeProgramOptimization="0"
//    UseLinkTimeCodeGeneration               WholeProgramOptimization="1"                    /GL                                 /LTCG
//    ProfileGuidedOptimizationInstrument     WholeProgramOptimization="2"                    /GL                                 /LTCG:PGINSTRUMENT
//    ProfileGuidedOptimizationOptimize       WholeProgramOptimization="3"                    /GL                                 /LTCG:PGOPTIMIZE /PGD:"f:\coding\helloworld\helloworld\Debug\hellochange.pgd"
//    ProfileGuidedOptimizationUpdate         WholeProgramOptimization="3"                    /GL                                 /LTCG:PGUPDATE /PGD:"f:\coding\helloworld\helloworld\Debug\hellochange.pgd"
// Options.Vc.Compiler.AdditionalUsingDirectories
//Resource Compiler ShowProgress
//    No                                      ShowProgress="false"
//    Yes                                     ShowProgress="true"
// Options.Vc.ResourceCompiler.PreprocessorDefinitions
//Options.Vc.General.DebugInformation.
//    Disabled                                Project.ProjectConfiguration.Tool.DebugInformationFormat="0"
//    C7Compatible                            Project.ProjectConfiguration.Tool.DebugInformationFormat="1"   /Z7
//    ProgramDatabase                         Project.ProjectConfiguration.Tool.DebugInformationFormat="3"   /Zi
//    ProgramDatabaseForEditAndContinue       Project.ProjectConfiguration.Tool.DebugInformationFormat="4"   /ZI
//Options.Vc.General.UseDebugLibraries.
//    Disable                                 WarnAsError="false"
//    Enable                                  WarnAsError="true"                              /WX
//Options.Vc.General.WarningLevel.
//    Level0                                  Project.ProjectConfiguration.Tool.WarningLevel="0"             /W0
//    Level1                                  Project.ProjectConfiguration.Tool.WarningLevel="1"             /W1
//    Level2                                  Project.ProjectConfiguration.Tool.WarningLevel="2"             /W2
//    Level3                                  Project.ProjectConfiguration.Tool.WarningLevel="3"             /W3
//    Level4                                  Project.ProjectConfiguration.Tool.WarningLevel="4"             /W4
//Options.Vc.General.TreatWarnigAsError.
//    Disable                                 WarnAsError="false"
//    Enable                                  WarnAsError="true"                              /WX
// Compiler.SuppressStartupBanner
//Options.Vc.Compiler.MultiProcessorCompilation.
//Options.Vc.Compiler.Optimization.
//    Disable                                 Project.ProjectConfiguration.Tool.Optimization="0"             /Od
//    MinimizeSize                            Project.ProjectConfiguration.Tool.Optimization="1"             /O1
//    MaximizeSpeed                           Project.ProjectConfiguration.Tool.Optimization="2"             /O2
//    FullOptimization                        Project.ProjectConfiguration.Tool.Optimization="3"             /Ox
//Options.Vc.Compiler.Inline.
//    Default                                 InlineFunctionExpansion="0"
//    OnlyInline                              InlineFunctionExpansion="1"                     /Ob1
//    AnySuitable                             InlineFunctionExpansion="2"                     /Ob2
//    Disable                                 InlineFunctionExpansion="3"                     /Ob0
//Options.Vc.Compiler.Intrinsic.
//    Disable                                 EnableIntrinsicFunctions="false"
//    Enable                                  EnableIntrinsicFunctions="true"                 /Oi
//Compiler.Optimization.FavorSizeOrSpeed
//    Neither                                 FavorSizeOrSpeed="0"
//    FavorFastCode                           FavorSizeOrSpeed="1"                            /Ot
//    FavorSmallCode                          FavorSizeOrSpeed="2"                            /Os
//Compiler.Optimization.OmitFramePointers
//    Disable                                 OmitFramePointers="false"
//    Enable                                  OmitFramePointers="true"                        /Oy
//Compiler.Optimization.FiberSafe
//    Disable                                 EnableFiberSafeOptimizations="false"
//    Enable                                  EnableFiberSafeOptimizations="true"             /GT
//Compiler.IgnoreStandardIncludePath.
//    Disable                                 IgnoreStandardIncludePath="false"
//    Enable                                  IgnoreStandardIncludePath="true"                /X
//Compiler.Proprocessor.GenerateProcessorFile
//    Disable                                 GeneratePreprocessedFile="0"
//    WithLineNumbers                         GeneratePreprocessedFile="1"                    /P
//    WithoutLineNumbers                      GeneratePreprocessedFile="2"                    /EP /P
//Options.Vc.Compiler.KeepComment.
//    Disable                                 KeepComments="false"
//    Enable                                  KeepComments="true"                             /C
//Options.Vc.Compiler.StringPooling.
//    Disable                                 StringPooling="false"
//    Enable                                  StringPooling="true"                            /GF
//Options.Vc.Compiler.Exceptions.
//    Disable                                 ExceptionHandling="false"
//    Enable                                  ExceptionHandling="Sync"                        /EHsc
//    EnableWithExternC                       ExceptionHandling="SyncCThrow"                  /EHs
//    EnableWithSEH                           ExceptionHandling="Async"                       /EHa
//Options.Vc.Compiler.CompileAsWinRT.     
//    Disable                                 CompileAsWinRT="false"
//    Enable                                  CompileAsWinRT="true"
//Options.Vc.Compiler.TypeChecks.
//    Disable                                 SmallerTypeCheck="true"                         /RTCc
//Options.Vc.Compiler.RuntimeChecks.
//    Default                                 BasicRuntimeChecks="0"
//    StackFrames                             BasicRuntimeChecks="1"                          /RTCs
//    UninitializedVariables                  BasicRuntimeChecks="2"                          /RTCu
//    Both                                    BasicRuntimeChecks="3"                          /RTC1
//Options.Vc.Compiler.RuntimeLibrary.
//    MultiThreaded                           RuntimeLibrary="0"                              /MT
//    MultiThreadedDebug                      RuntimeLibrary="1"                              /MTd
//    MultiThreadedDLL                        RuntimeLibrary="2"                              /MD
//    MultiThreadedDebugDLL                   RuntimeLibrary="3"                              /MDd
// Gm is deprecated starting with vs2019
//Options.Vc.Compiler.MinimalRebuild.
//    Disable                                 MinimalRebuild="false"
//    Enable                                  MinimalRebuild="true"                           /Gm
//Options.Vc.Compiler.RTTI.
//    Disable                                 RuntimeTypeInfo="false"                         /GR-
//    Enable                                  RuntimeTypeInfo="true"
//Options.Vc.Compiler.StructAlignment.
//    Default                                 StructMemberAlignment="0"
//    Alignment1                              StructMemberAlignment="1"                       /Zp1
//    Alignment2                              StructMemberAlignment="2"                       /Zp2
//    Alignment4                              StructMemberAlignment="3"                       /Zp4
//    Alignment8                              StructMemberAlignment="4"                       /Zp8
//    Alignment16                             StructMemberAlignment="5"                       /Zp16
//Options.Vc.Compiler.BufferSecurityCheck.
//    Enable                                  BufferSecurityCheck="true"
//    Disable                                 BufferSecurityCheck="false"                     /GS-
//Options.Vc.Compiler.OptimizeGlobalData.
//    Disable                                 /Gw- in AdditionalOptions
//    Enable                                  /Gw in AdditionalOptions
/* do nothing */
//Options.Vc.Compiler.FunctionLevelLinking.
//    Disable                                 EnableFunctionLevelLinking="false"
//    Enable                                  EnableFunctionLevelLinking="true"               /Gy
//Options.Vc.Compiler.EnhancedInstructionSet.
//    Disable                                 EnableEnhancedInstructionSet
//    SIMD                                    EnableEnhancedInstructionSet                /arch:SSE
//    SIMD2                                   EnableEnhancedInstructionSet                /arch:SSE2
//    AdvancedVectorExtensions                EnableEnhancedInstructionSet                /arch:AVX
//    NoEnhancedInstructions                  EnableEnhancedInstructionSet                /arch:IA32
//Options.Vc.Compiler.FloatingPointModel.
//    Precise                                 FloatingPointModel="0"                          /fp:precise
//    Strict                                  FloatingPointModel="1"                          /fp:strict
//    Fast                                    FloatingPointModel="2"                          /fp:fast
//Options.Vc.Compiler.FloatingPointExceptions.
//    Disable                                 FloatingPointExceptions="false"
//    Enable                                  FloatingPointExceptions="true"                  /fp:except
// CreateHotpatchableImage = "false"
// CreateHotpatchableImage = "true"     /hotpatch
//Options.Vc.Compiler.CreateHotPatchableCode.
//    Disable                                 CreateHotPatchableCode="false"
//    Enable                                  CreateHotPatchableCode="true"                  /hotpatch
//Options.Vc.Compiler.DisableLanguageExtensions.    
//    Disable                                 DisableLanguageExtensions="false"               
//    Enable                                  DisableLanguageExtensions="true"                /Za
//Options.Vc.Compiler.BuiltInWChartType.
//    Disable                                 TreatWChar_tAsBuiltInType="false"               /Zc:wchar_t-
//    Enable                                  TreatWChar_tAsBuiltInType="true"                /Zc:wchar_t
//    Disable                                 RemoveUnreferencedCodeData="false"
//    Enable                                  RemoveUnreferencedCodeData="true"                /Zc:inline
//Options.Vc.Compiler.ForceLoopScope.
//    Disable                                 ForceConformanceInForLoopScope="false"          /Zc:forScope-
//    Enable                                  ForceConformanceInForLoopScope="true"           /Zc:forScope
//Options.Vc.Compiler.OpenMP.   
//    Disable                                 OpenMP="false"                                  /openmp-
//    Enable                                  OpenMP="true"                                   /openmp
//Options.Vc.Compiler.GenerateXMLDocumentation.   
//    Disable                                 GenerateXMLDocumentation="false"                                  
//    Enable                                  GenerateXMLDocumentation="true"                                   /openmp
//Options.Vc.Compiler.PrecompiledHeader
//      NotUsingPrecompiledHeaders          UsePrecompiledHeader="0"
//      CreatePrecompiledHeader             UsePrecompiledHeader="1"                            /Yc
//      UsePrecompiledHeader                UsePrecompiledHeader="2"                            /Yu
//Options.Vc.Compiler.CallingConvention.
//    cdecl                                   CallingConvention="0"                           /Gd
//    fastcall                                CallingConvention="1"                           /Gr
//    stdcall                                 CallingConvention="2"                           /Gz
//Options.Vc.Compiler.ShowIncludes.
//    Disable                               ShowIncludes="false"
//    Enable                                ShowIncludes="true"                           /showIncludes
//Options.Vc.Compiler.SupportJustMyCode.
//    Yes                                   SupportJustMyCode="true"                          /JMC
//    No
//Options.Vc.Compiler.DefineCPlusPlus. See: https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/
//    Disable                                 /Zc:__cplusplus-
//    Enable                                  /Zc:__cplusplus
// Options.Vc.Compiler.DisableSpecificWarnings
// Options.Vc.Compiler.UndefinePreprocessorDefinitions
// concat defines, don't add options.Defines since they are automatically added by VS
// UndefineAllPreprocessorDefinitions
// Default defines...
// Options.Vc.Compiler.AdditionalOptions
// discard if the source is already in the destination folder
// keep the full path for the source if outside of the global root
// win64 don't support /ZI which is the default one, forward it to /Zi
// Falling back to <_IsNativeEnvironment> that has same effect
//ShowProgress
//    NotSet                                  ShowProgress="0"
//    DisplayAllProgressMessages              ShowProgress="1"                            /VERBOSE
//    DisplaysSomeProgressMessages            ShowProgress="2"                            /VERBOSE:LIB
//Incremental
//    Default                                 LinkIncremental="0"
//    Disable                                 LinkIncremental="1"                         /INCREMENTAL:NO
//    Enable                                  LinkIncremental="2"                         /INCREMENTAL
//EmbedManifest
//    Yes                                 EmbedManifest="true"
//    No                                  EmbedManifest="false"
//SuppressStartupBanner
//    Disable                                 SuppressStartupBanner="false"
//    Enable                                  SuppressStartupBanner="true"                /NOLOGO
//LinkLibraryDependencies
//    Enable                                  LinkLibraryDependencies="true"
//    Disable                                 LinkLibraryDependencies="false"
//ReferenceOutputAssembly
//    Enable                                  ReferenceOutputAssembly="true"
//    Disable                                 ReferenceOutputAssembly="false"
//CopyLocalSatelliteAssemblies
//    Enable                                  CopyLocalSatelliteAssemblies="true"
//    Disable                                 CopyLocalSatelliteAssemblies="false"
//IgnoreImportLibrary
//    Enable                                  IgnoreImportLibrary="true"
//    Disable                                 IgnoreImportLibrary="false"
//RunCodeAnalysis
//    Enable                                  RunCodeAnalysis="true"
//    Disable                                 RunCodeAnalysis="false"
//UseLibraryDependencyInputs
//    Enable                                  UseLibraryDependencyInputs="true"
//    Disable                                 UseLibraryDependencyInputs="false"
//DisableFastUpToDateCheck
//    Enable                                  DisableFastUpToDateCheck="true"
//    Disable                                 DisableFastUpToDateCheck="false"
//EnableManagedIncrementalBuild
//RandomizedBaseAddress
// Delay Loaded DLLs
// Set module definition
//IgnoreAllDefaultLibraries
//    Enable                                  IgnoreAllDefaultLibraries="true"        /NODEFAULTLIB
//    Disable                                 IgnoreAllDefaultLibraries="false"
//GenerateManifest
//    Enable                                  GenerateManifest="true"                 /MANIFEST
//    Disable                                 GenerateManifest="false"
// GenerateMapFile
//MapExports
//    Enable                                  MapExports="true"                       /MAPINFO:EXPORTS
//    Disable                                 MapExports="false"
//AssemblyDebug
//    NoDebuggableAttributeEmitted            AssemblyDebug="0"
//    RuntimeTrackingAndDisableOptimizations  AssemblyDebug="1"                       /ASSEMBLYDEBUG
//    NoRuntimeTrackingAndEnableOptimizations  AssemblyDebug="2"                       /ASSEMBLYDEBUG:DISABLE
//SubSystem
//    Console                                 SubSystem="1"                           /SUBSYSTEM:CONSOLE
//    Windows                                 SubSystem="2"                           /SUBSYSTEM:WINDOWS
//    Native                                  SubSystem="3"                           /SUBSYSTEM:NATIVE
//HeapSize
//HeapReserveSize
//                                            HeapReserveSize="0"                     /HEAP:reserve
//HeapCommitSize
//                                            HeapCommitSize="0"                      /HEAP:reserve,commit
//StackSize
//StackReserveSize
//                                            StackReserveSize="0"                    /STACK:reserve
//StackCommitSize
//                                            StackCommitSize="0"                     /STACK:reserve,commit
//AllowIsolation
//    Disabled                                AllowIsolation=false                    /ALLOWISOLATION:NO
//    Enable                                  AllowIsolation=true                     /ALLOWISOLATION
//LargeAddress
//    Default                                 LargeAddressAware="0"
//    NotSupportLargerThan2Gb                 LargeAddressAware="1"                   /LARGEADDRESSAWARE:NO
//    SupportLargerThan2Gb                    LargeAddressAware="2"                   /LARGEADDRESSAWARE
//Reference
//    Default                                 OptimizeReferences="0"
//    KeepUnreferencedData                    OptimizeReferences="1"                  /OPT:NOREF
//    EliminateUnreferencedData               OptimizeReferences="2"                  /OPT:REF
//EnableCOMDATFolding
//    Default                                 EnableCOMDATFolding="0"
//    DoNotRemoveRedundantCOMDATs             EnableCOMDATFolding="1"                 /OPT:NOICF
//    RemoveRedundantCOMDATs                  EnableCOMDATFolding="2"                 /OPT:ICF
//FixedBaseAddress
//    Default                                 FixedBaseAddress="0"
//    Enable                                  FixedBaseAddress="1"                  /FIXED
//    Disable                                 FixedBaseAddress="2"                  /FIXED:NO
//GenerateWindowsMetadata
//    Default                                 GenerateWindowsMetadata="0"
//    Enable                                  GenerateWindowsMetadata="1"                  /WINMD
//    Disable                                 GenerateWindowsMetadata="2"                  /WINMD:NO
//LinkTimeCodeGeneration
//    Default                                 LinkTimeCodeGeneration="0"
//    UseLinkTimeCodeGeneration               LinkTimeCodeGeneration="1"              /ltcg
//    ProfileGuidedOptimizationInstrument     LinkTimeCodeGeneration="2"              /ltcg:pginstrument
//    ProfileGuidedOptimizationOptimize       LinkTimeCodeGeneration="3"              /ltcg:pgoptimize
//    ProfileGuidedOptimizationUpdate         LinkTimeCodeGeneration="4"              /ltcg:pgupdate
// FunctionOrder
// FunctionOrder="@..\path_to\order.txt"             /ORDER:"@..\path_to\order.txt"
// ForceFileOutput
//CreateHotPatchableImage
//    Disable
//    Enable                                  CreateHotPatchableImage="Enabled"         /FUNCTIONPADMIN
//    X86Image                                CreateHotPatchableImage="X86Image"        /FUNCTIONPADMIN:5
//    X64Image                                CreateHotPatchableImage="X64Image"        /FUNCTIONPADMIN:6
//    ItaniumImage                            CreateHotPatchableImage="ItaniumImage"    /FUNCTIONPADMIN:16
// Target Machine
// Options.Vc.Linker.AdditionalOptions
// Treat Options.Vc.Linker.DisableSpecificWarnings here because
// it does not have a specific line in the vcxproj
//EnableDpiAwareness
// First, execute tests
// NO, first, execute stamp !
//GenerateDebugInformation="false"
//    VS2012-VS2013
//    GenerateDebugInformation.Enable         GenerateDebugInformation="true"           /DEBUG
//    GenerateDebugInformation.Disable        GenerateDebugInformation="false"
//    (GenerateFullProgramDatabaseFile is ignored, there can only be full pdb files)
//
//    VS2015
//    GenerateDebugInformation.Enable         GenerateDebugInformation="true"           /DEBUG
//    GenerateDebugInformation.EnableFastLink GenerateDebugInformation="DebugFastLink"  /DEBUG:FASTLINK
//    Disable                                 GenerateDebugInformation="No"
//
//    VS2017-VS2019
//    Enable                                  GenerateDebugInformation="true"           /DEBUG
//    EnableFastLink                          GenerateDebugInformation="DebugFastLink"  /DEBUG:FASTLINK
//    Disable                                 GenerateDebugInformation="No"
// %2 is converted by FastBuild
// Output name of object being compiled, as specified by CompilerOutputPath and the name of discovered objects depending on the Compiler input options (extension is also replace with CompilerOutputExtension).
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Need to sort by name and platform
// xml begin header
// Verify if the interpreter exists in the register.
// Set the default interpreter
// configuration general
// Write the project file
// remove all line that contain RemoveLineTag
// Add source files
// Add source files
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//schemas.microsoft.com/developer/msbuild/2003"">
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Based on http://www.codeproject.com/Reference/720512/List-of-Visual-Studio-Project-Type-GUIDs
// Combined project type
// sort configurations because that's the way they are sorted in a solution
// TODO: We should keep the GUIDS generated by sharpmake to avoid reading vcxproj files!
// reset current solution state
// write solution header
// Write all needed folders before the projects to make sure the proper startup project is selected.
// Ensure folders are always in the same order to avoid random shuffles
// This always needs to be created so make sure it's there.
// Write extra solution items
// TODO: What happens if we define an existing folder?
// Write source code control informations
//SccProjectUniqueName7 = ..\\..\\extern\\techgroup\\framework\\gear\\private\\compilers\\win32\\vc9\\gear_win32_compile.vcproj
//SccProjectTopLevelParentUniqueName7 = guildlib.sln
// sln to perforce file
//SccLocalPath7 = ..\\..\\extern\\techgroup\\framework\\gear
//SccProjectFilePathRelativizedFromConnection7 = private\\compilers\\win32\\vc9\\
// write solution configurations
// set the compile command line 
// write all project target and match then to a solution target
// try to find the target in the project that is the closest match from the solution one
// last resort: if we didn't find a good enough match, fallback to TargetDefault
// nothing is built in python solutions
// for fastbuild, only build the projects that cannot be built through dependency chain
// Write nested folders
// Write the solution file
// Set the default startup project.
// Find all executable projects
// If there is more than one, set the one with the same name as the solution
// If none, try to find a project that the name is at the beginning of the solution name
// (It can happen that a project "Application" is in a solution named "ApplicationSolution")
// Ensure all projects are always in the same order to avoid random shuffles
// Validate and handle startup project.
//put the startup project at the top of the project list. Visual Studio will put it as the default startup project.
// Read project Guid and append project extension
// solution's referenced projects
// user's projects references
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Base class for generating VS user files.
/// </summary>
/// <param name="projectFilePath">
/// Path to the project file. The suffix ".user" will be appended to the file name.
/// </param>
// Generate the user file. The base class is reponsible for generating the file header and footer.
// Actual user content is generated by the specialized user file class.
// remove all line that contain RemoveLineTag
//Skip overwritting user file if it exists already so he can keep his setup
// unless the UserProjSettings specifies to overwrite
//schemas.microsoft.com/developer/msbuild/2003"">";
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Disables "unreacheable code" warning
// Disables "variable is never used" warning
// Disables "variable assigned but it's value is never used" warning
// dev option for now, this will disable visual studio registry lookups
// use with care!
// Need to sort by name and platform
// validate that 2 conf name in the same project don't have the same name
// Vcxproj only allows one file command per input file, so we collapse
// the commands into a single command per file.
// Map from relative input file to command to run on that file, for this configuration.
// Build the command.
// This needs to be project relative to work.
// Add separators.
/// <summary>
/// Generate a pseudo Guid base on relative path from the Project CsPath to the generated files
/// Need to do it that way because many vcproj may be generated from the same Project.
/// </summary>
// there's no need to write the properties with older versions of vs, as we override
// completely the VC++ directories entries in the vcxproj
// 8.1 is the default value for vs2015 and vs2017, so only specify a different platformVersion if we need to
// this variable is found in Windows Kits\10\DesignTime\CommonConfiguration\Neutral\uCRT.props
// it is always read from the registry unless overriden, so we need to explicitely set it
// vs2015 specific, we need to set the UniversalCRTSdkDir to $(UniversalCRTSdkDir_10) because it is not done in the .props
// set generator information
// Get the name of the project by reading configurations. Make sure that all
// configurations use the same name!
// source control
// xml begin header
// xml header contain description of each target
// write all combinations to avoid "Incomplete Configuration" VS warning
//checking only the first one, having one with CLR support and others without would be an error
// xml end header
// generate all configuration options onces...
// just a safety, not necessary to clean up
// user file
// configuration general
// .props files
// configuration .props files
// configuration general2
// Configuring cache mode if that configuration is allowed to use caching
// Setting the appropriate cache type commandline for that target.
// Make the commandline written in the bff available, except the master bff -config
// configuration ItemDefinitionGroup
// For all projects configurations that are fastbuild only, do not add the cpp
// source file requires to be remove from the projects, so that not 2 same cpp file be in 2 different project.
// TODO: make a better check
// Import platform makefiles.
// configuration .targets files
// in case we are using fast build we do not want to write most dependencies
// in the vcxproj because they are handled internally in the bff.
// Nevertheless, non-fastbuild dependencies (such as C# projects) must be written.
// Environment variables
// Generate vcxproj configuration to run after a deployment from the PC
// remove all line that contain RemoveLineTag
// Fill include dirs
// Fill resource include dirs
// Fill using dirs
//AdditionalLibraryDirectories
//                                            AdditionalLibraryDirectories="dir1;dir2"    /LIBPATH:"dir1" /LIBPATH:"dir2"
//AdditionalDependencies
//                                            AdditionalDependencies="lib1;lib2"      "lib1;lib2" 
////IgnoreSpecificLibraryNames
////                                            IgnoreDefaultLibraryNames=[lib]         /NODEFAULTLIB:[lib]
// put the built library files before any other
// convert all root paths to be relative to the project folder
// We've got two kinds of way of listing a library:
// - With a filename without extension we must add the potential prefix and potential extension.
//      Ex:  On clang we add -l (supposedly because the exact file is named lib<library>.a)
// - With a filename with a static or shared lib extension (eg. .a/.lib/.so), we shouldn't touch it as it's already set by the script.
// check consistency
//ToString().ToLower() as told by msdn for booleans in xml files
// Write dotNet dependencies references
// The behavior should be the same than for csproj...
// The check for the blobbed is so we add references to blobed projects over non blobed projects.
// Don't add any Fastbuild deps to fastbuild projects, that's already handled
// Can't generate a project dependency for export projects(the project doesn't exist!!).
// If dependency project is marked as [Compile], read the GUID from the project file
// avoid linking with .lib from a dependency that doesn't create a lib
// The check for the blobbed is so we add references to blobbed projects over non blobbed projects.
// Ignore projects marked as Export
// Ignore exe and utility outputs
// Ignore FastBuild projects if this is already a FastBuild project.
// If dependency project is marked as [Compile], read the GUID from the project file
// Work around ms-build bug 
// Obj files generated in referenced projects by MASM are not linked automatically when "Use Library Dependency Inputs" is set to true
// https://connect.microsoft.com/VisualStudio/feedback/details/679267/obj-files-generated-in-referenced-projects-by-masm-are-not-linked-automatically-when-use-library-dependency-inputs-is-set-to-true
// not needed it seems
// TODO: check the conditions for a reference to be private
// Add FastBuild bff file to Project
// write [].vcxproj.filters
// write include...
// write filters...
// generate all possible parent filters
// sort filters
// Write the project file
// Add source files
// Gather files with custom build steps.
// type -> files
// if (projectFile.FileExtension == "h")
// Write header files
// Write custom build steps
// Write natvis files
// Write PRI files
// Write None files
// Validation map
// Write source files
// in case we are using the LLVM toolchain, the PCH was added
// as force include globally for the conf, so we need
// to use the forced include vanilla list that we prepared
// Note: faster to test that the options array has the
// vanilla list, as we only add it in case we use LLVM,
// but we could also have tested
// Options.GetObject<Options.Vc.General.PlatformToolset>(conf).IsLLVMToolchain()
// Write files built with custom tools
// copies handled in bff
// Write the "copy dependencies" build step (as a custom build tool on a dummy file, to make sure the copy is always done when needed)
// borrowing resolver
// Also write the dependencies in the generated "runtimedependencies" file, for convenience
// Validation
// done!
// for the configuration that are fastbuild but external and requires to add the bff files
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//schemas.microsoft.com/developer/msbuild/2003"">
//<ImportGroup Label=""PropertySheets"" Condition=""'$(Configuration)|$(Platform)'=='[conf.Name]|[platformName]'"">
//  <Import Project=""$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props"" Condition=""exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')"" Label=""LocalAppDataPlatform"" />
//</ImportGroup>
//schemas.microsoft.com/developer/msbuild/2003"">
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// TODO: EnvironmentVariableResolver is not an actual environment variable resolver,
//       and doesn't care about environment variables, just those passed to it in the
//       argument. This causes it to attempt to resolve environment variable that were
//       not passed to it, and throw an exception for it.
//
//return new EnvironmentVariableResolver(assignments);
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Notes: 
// Clean:
// Visual Studio automatically cleans most files from the intermediate directory as soon as the clean command is active. However, it doesn't
// clean them all, so we manually delete everything!
// Also, it doesn't erase the target file and its related file extensions. We now clean them manually. Feel free to add more extensions if some were forgotten.
// Removing unity blobs is useful if the number of blobs changes this will erase the ones that are no longer used.
// Implementation note:
// del *.* doesn't work and Visual studio seems to have a protection against this so we must delete explicit files or extensions...
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Not used because this is not the default platform for IPlatformDescriptor. (Not listed
// in attributes.)
// Those don't matter: this is only the default for IPlatformBff, not for IPlatformVcxproj.
// Those just complete the class so it's not abstract.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Not tested. We may need to root the path like we do in SetupStaticLibraryPaths.
// Clang and GCC have trouble finding "Additional Dependencies" through "Additional Library Directories" when compiling
// for Android under VS. As a work around, we use rooted path for dependencies library files.
// Clang and GCC have trouble finding "Additional Dependencies" through "Additional Library Directories" when compiling
// for Android under VS. As a work around, we use rooted path for dependencies library files.
// Although we add options to cmdLineOptions, FastBuild isn't supported yet for Android projects.
// Copyright (c) 2017 Ubisoft Entertainment
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// The output directory is converted to a rooted path by prefixing it with $(ProjectDir) to work around
// an issue with VS Android build scripts. When a project dependency has its project folder not at the
// same folder level as the AndroidPackageProject, VS can't locate its output properly using its relative path.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// maybe? (.NET Core)
// Using the Unix extensions since Darwin is a Unix implementation and the
// executables Mac users interact with are actually bundles. If this causes
// issues, see if using .app for executables and .dylib/.framework for
// libraries work better. iOS is Darwin/Cocoa so assuming that the same goes
// for it.
// .NET remains the same on all platforms. (Mono loads .exe and .dll regardless
// of platforms, and I assume the same about .NET Core.)
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// No way!
// Maybe now? Traditionally GCC but only the GNU project is backing it now.
// Technically false with .NET Core and Mono.
// Was not specified in sharpmake (probably because it was not implemented), but this is obviously wrong.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// vs2012 and vs2013 do not support overriding windows kits using the underlying variables
// so we need to change the VC++ directories path.
// We need to override the executable path for vs2015 because WindowsKit UAP.props does not
// correctly set the WindowsSDK_ExecutablePath to the bin folder of its current version.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// arbitrary
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This SDK is deprecated. Don't warn if variable is not defined.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// could also been retrieved from conf.Target.GetPlatform(), if we want
// Use default platformToolset to get MS compiler instead of Clang, when ClanCl is disabled
// when using clang-cl, mark MSVC includes, so they are properly recognized
// _PlatformFolder require the path to end with a "\"
// trailing separator will be added by LLVM.Cpp.Common.props
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Nothing to validate.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// needed?
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// could also been retrieved from conf.Target.GetPlatform(), if we want
// TODO: make cleaner
// Use default platformToolset to get MS compiler instead of Clang, when ClanCl is disabled
// TODO: check if we need to override the paths in case of FastBuild?
// only use the full path to includes and libs if we have a
// sideByside XDK installed, but we compile using an old one.
// That is done because msbuild concatenates an XdkEdition in the $(Console*) variables without any way of removing it...
//Options.Vc.General.DeployMode.
//    Push                                  DeployMode="Push"
//    Pull                                  DeployMode="Pull"
//    External                              DeployMode="External"
// Write SDKReferences on durango if needed
// TODO: add a consistency check between configurations
// adding the durango resw file, if they were not in PRIFiles
// adding the durango img file
// WARNING: THIS IS A PATCH TO ADD THE XMANIFEST FILE IN THE FILE LIST
//          This is not a clean way to do but it is the only way we found so far
// trailing separator will be added by LLVM.Cpp.Common.props
// Set only if the machine has a SideBySide XDK installed, but we don't generate for one
// Use the tasks of the system
// _PlatformFolder require the path to end with a "\"
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// get the XboxOneExtensionSDKLatest, which looks like
// C:\Program Files (x86)\Microsoft SDKs\Durango.160300\v8.0\
// we just want the path to Microsoft SDKs, the version number is irrelevant
// maybe should throw a warning
/// <summary>
/// Ignore when the path for the XdkTargetEdition is missing.
/// In the TG we do a SDK Switch (which creates a symlink to the SDK needed) before building
/// but after generation so it's possible that the path does not exist during generation
/// </summary>
/// <summary>
/// Xdk Edition Target
/// Build project against a specific XDK Edition.
/// Do not set to build against the XDK with the highest version
/// </summary>
/// <summary>
/// EnableLegacyXdkHeaders to use VS2015 include and libraries on VS2017.
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
////////////////////////////////////////////////////////////////////////
/// Those methods apply to what's *installed* on the machine
/// Warning: those are not necessarily the ones used by your projects
// this key appeared with November 2015 XDK, the first to allow Side by Side
////////////////////////////////////////////////////////////////////////
/// Those methods will check the XDK in use
// if the XDK is a Side by Side (November 2015 or more recent),
// we will find folders named after the edition number,
// following this pattern: YYMMQQ: 6 digit numbers divided into 3 two digit parts.
// The first two digits represent the calendar year in which the XDK was released,
// the second two digits represent the month, and the final two digits are a release, or QFE, number.
// With Nov2015 XDK, the Durango Extensions folder changed, but the variable will point to the correct folder
// the folder was renamed from Extensions, to ExtensionSDKs
// Copy Microsoft.Xbox.*.dll/.pdb files
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// NvShieldOptions.Linker.AndroidSystemLibraries
// TO DO implement for cmd
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General
// Optimization
// Code Generation
// Language
// General
// Input
// Advanced
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/// <summary>
/// Xbox360 Image Conversion > Configuration File
/// </summary>
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//X360Options.Compiler.CallAttributedProfiling
//    disable                               CallAttributedProfiling="0"
//    fastcap                               CallAttributedProfiling="1"                           /fastcap
//    callcap                               CallAttributedProfiling="2"                           /callcap
//X360Options.Compiler.PreschedulingOptimization
//    disable                               Prescheduling="false"
//    enable                                Prescheduling="true"                /Ou
// X360Options.Linker.SetChecksum
//    enable                                "true"
//    disable                               "false"
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// CSharpProjectA has private dependency to CSharpInheritOnePrivateDependencyProject
// CSharpInheritOnePrivateDependencyProject has private dependency to CSharpOnePublicDependencyProject
// CSharpOnePublicDependencyProject has public dependency to CSharpNoDependencyProject1
// CSharpProjectA should have 1 private dependency.
// CSharpProjectB has a private dependency on CSharpOnePublicDependencyProject
// CSharpOnePublicDependencyProject has a public dependency on CSharpNoDependencyProject1
// CSharpProjectD has a public dependency on CSharpInheritPublicFromPrivateDependencyProject
// CSharpInheritPublicFromPrivateDependencyProject has a public dependency on CSharpOnePrivateDependencyProject
// CSharpOnePrivateDependencyProject has a private dependency on CSharpNoDependencyProject1
// CSharpProjectDuplicateInDeepInheritance
//
//     + --- CSharpInheritOnePublicDependencyProject (Public)
//               + --- CSharpOnePublicDependencyProject (Public)
//                         + --- CSharpNoDependencyProject1 (Public)
//
//     + --- CSharpInheritOnePrivateDependencyProject (Public)
//               + --- CSharpOnePublicDependencyProject (Private)
//                         + --- CSharpNoDependencyProject1 (Public)
//
//     + --- CSharpTwoPrivateDependenciesProject (Public)
//               + --- CSharpNoDependencyProject1 (Private)
//               + --- CSharpNoDependencyProject2 (Private)
//
//     + --- CSharpOnePublicDependencyProject (Public)
//               + --- CSharpNoDependencyProject1 (Public)
// CSharpProjectReferenceOutputAssemblyInheritance
//     + --- CSharpInheritOnePublicDependencyProject (Public)
//               + --- CSharpOnePublicDependencyProject (Public)
//                         + --- CSharpNoDependencyProject1 (Public)
//     + --- CSharpOnlyBuildOrderDependency (Public)
//               + --- CSharpNoDependencyProject2 (Public|OnlyBuildOrder)
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Force the test to load and register CommonPlatforms.dll as a Sharpmake extension
// because sometimes you get the "no implementation of XX for platform YY."
// Allow message log from builder.
////////////////////////////////////////////////////////////////////
// Register projects to generate here
// Also create some random source files
////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// HACK: Explicitely reference something from CommonPlatforms to get
// visual studio to load the assembly
// Allow message log from builder.
////////////////////////////////////////////////////////////////////
// Register projects to generate here
// Also create some random source files
////////////////////////////////////////////////////////////////////
// The dependency chain is Public all the way, and "Default", so
// both NoDependencyProject1 and OnePublicDependencyProject 
// include and library path should be in the arrays
// The dependency chain is PRIVATE from the base project to OnePublic,
// *but* is Public from OnePublic to NoDependency, so it should be able to access NoDependency
// Both NoDependencyProject1 and OnePublicDependencyProject include and library path should be in the array
// ProjectA and ProjectB share the same dependencies settings, as the only change
// is the type of the immediate dependency to InheritOnePrivateDependencyProject
// ProjectA and ProjectB share the same settings, as the only change
// is the type of the immediate dependency to InheritOnePrivateDependencyProject
// this is where ProjectA and ProjectB differ
// ProjectA and ProjectB share the same settings, as the only change
// is the type of the immediate dependency to InheritOnePrivateDependencyProject
// this is where ProjectA and ProjectB differ
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Must pass a new object. Resolver doesn't resolve same objects twice.
// Property Test
// Map Test
// Please note that the list is sorted before being printed
// We replace previous list
// NUnit
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// asdmvie  aas */ asd [module: Sharpmake.Include(@""folder/sub1/nottoinclude.sharpmake.cs"")]";
/*:Sharpmake.Include(@""folder/sub1/nottoinclude.sharpmake.cs"")]/**/: Sharpmake/*.Reference*/.Include(/*asda(@"" /*dsa*/@""folder*/sub*/*file*.cs"")]// asdmvie  aas */ asd [module: Sharpmake.Include(@""folder/sub1/nottoinclude.sharpmake.cs"")]";
// asdmvie aas */ [module: Sharpmake.Include(@""folder/sub1/nottoinclude.sharpmake.cs"")]";
/**/[module: Sharpmake.Include(@""folder*/sub*/*file*.cs"")] // asdmvie aas */ [module: Sharpmake.Include(@""folder/sub1/nottoinclude.sharpmake.cs"")]";
//**/[module: Sharpmake.Include(@""folder*/sub*/*file*.cs"")] // asdmvie aas */ [module: Sharpmake.Include(@""folder/sub1/nottoinclude.sharpmake.cs"")]";
/**/[module: Sharpmake.Include(@""folder*/sub*/*file*.cs"")] // asdmvie aas */ [module: Sharpmake.Include(@""folder/sub1/nottoinclude.sharpmake.cs"")]";
/*sub*/file*.cs"")]";
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Verify order is the expected one
// Verify order is the expected one
// Copyright (c) 2017 Ubisoft Entertainment
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//t.cpp"),
// Check that we do not change dot and dot dot
// Repetition is to ensure Shutdown() is restoring the global context
// and not adding each time the Setup() is done
// Last file doesn't exist in test folder
// No folder with only one character exist
// No file with only one character exist
