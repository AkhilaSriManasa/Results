________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\AssemblyInfo.cs
// <auto-generated>
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\autogenerated_comment.cs
// this is in no way <auto-generated
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\autogenerated_comment2.cs
// this is <autogenerated
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\autogenerated_comment3.cs
// Generated by the protocol buffer compiler. DO NOT EDIT!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\autogenerated_comment4.cs
/*
//github.com/swagger-api/swagger-codegen.git
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\class.designer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\class.g.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\class.g.something.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\class.generated.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\class_generated.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\compiler_generated.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\compiler_generated_attr.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\debugger_non_user_code.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\debugger_non_user_code_attr.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\generated_code_attr.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\generated_code_attr2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\generated_region.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\generated_region_2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\AutoGeneratedFiles\TEMPORARYGENERATEDFILE_class.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\CasingApp\CasingApp\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\CasingApp\CasingApp\SRC\Class1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\CoverageTest\CSLib\Class1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\CoverageTest\CSLib\Properties\AssemblyInfo.cs
// Les informations générales relatives à un assembly dépendent de 
// l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
// associées à un assembly.
// L'affectation de la valeur false à ComVisible rend les types invisibles dans cet assembly 
// aux composants COM.  Si vous devez accéder à un type dans cet assembly à partir de 
// COM, affectez la valeur true à l'attribut ComVisible sur ce type.
// Le GUID suivant est pour l'ID de la typelib si ce projet est exposé à COM
// Les informations de version pour un assembly se composent des quatre valeurs suivantes :
//
//      Version principale
//      Version secondaire 
//      Numéro de build
//      Révision
//
// Vous pouvez spécifier toutes les valeurs ou indiquer les numéros de build et de révision par défaut 
// en utilisant '*', comme indiqué ci-dessous :
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\CSharpVBNetCoverage\CSharpConsoleApp\Program.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\CSharpVBNetCoverage\CSharpConsoleApp\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\CSharpVBNetCoverage\CSharpConsoleApp.Test\UnitTest1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\DoNotAnalyzeTestFilesTest\MyLib.Tests\UnitTest1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\DoNotAnalyzeTestFilesTest\MyLib.Tests\Properties\AssemblyInfo.cs
// Les informations générales relatives à un assembly dépendent de 
// l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
// associées à un assembly.
// L'affectation de la valeur false à ComVisible rend les types invisibles dans cet assembly 
// aux composants COM.  Si vous devez accéder à un type dans cet assembly à partir de 
// COM, affectez la valeur true à l'attribut ComVisible sur ce type.
// Le GUID suivant est pour l'ID de la typelib si ce projet est exposé à COM
// Les informations de version pour un assembly se composent des quatre valeurs suivantes :
//
//      Version principale
//      Version secondaire 
//      Numéro de build
//      Révision
//
// Vous pouvez spécifier toutes les valeurs ou vous pouvez définir par défaut les numéros de build et de révision 
// en utilisant '*', comme indiqué ci-dessous :
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\MetricsTest\bar\Class1.cs
// This is a comment!
/// <summary>
/// Documented public API
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\MetricsTest\foo\Class1.cs
/**
// This is a comment!
/// <summary>
/// Documented public API
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\MetricsTest\foo\Class1_copy.cs
// This is a comment!
/// <summary>
/// Documented public API
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\MultiTargetConsoleApp\MultiTargetConsoleApp\Program.cs
// FIXME: .Net Core 2
// FIXME: .Net fwk 4.6
// FIXME: Other
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\NoCoverageOnTests\MyLib\Class1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\NoCoverageOnTests\MyLib\Properties\AssemblyInfo.cs
// Les informations générales relatives à un assembly dépendent de 
// l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
// associées à un assembly.
// L'affectation de la valeur false à ComVisible rend les types invisibles dans cet assembly 
// aux composants COM.  Si vous devez accéder à un type dans cet assembly à partir de 
// COM, affectez la valeur true à l'attribut ComVisible sur ce type.
// Le GUID suivant est pour l'ID de la typelib si ce projet est exposé à COM
// Les informations de version pour un assembly se composent des quatre valeurs suivantes :
//
//      Version principale
//      Version secondaire 
//      Numéro de build
//      Révision
//
// Vous pouvez spécifier toutes les valeurs ou indiquer les numéros de build et de révision par défaut 
// en utilisant '*', comme indiqué ci-dessous :
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\NoCoverageOnTests\MyLib.Tests\UnitTest1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\NoCoverageOnTests\MyLib.Tests\Properties\AssemblyInfo.cs
// Les informations générales relatives à un assembly dépendent de 
// l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
// associées à un assembly.
// L'affectation de la valeur false à ComVisible rend les types invisibles dans cet assembly 
// aux composants COM.  Si vous devez accéder à un type dans cet assembly à partir de 
// COM, affectez la valeur true à l'attribut ComVisible sur ce type.
// Le GUID suivant est pour l'ID de la typelib si ce projet est exposé à COM
// Les informations de version pour un assembly se composent des quatre valeurs suivantes :
//
//      Version principale
//      Version secondaire 
//      Numéro de build
//      Révision
//
// Vous pouvez spécifier toutes les valeurs ou vous pouvez définir par défaut les numéros de build et de révision 
// en utilisant '*', comme indiqué ci-dessous :
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\NoSonarTest\Class1.cs
// NOSONAR
// NOSONAR
// NOSONAR
// NOSONAR
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\NotAutoGeneratedFiles\AssemblyInfo.cs
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\NotAutoGeneratedFiles\Class.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\SharedFilesTest\Class1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\SharedFilesTest\ConsoleApp1\Program1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\SharedFilesTest\ConsoleApp2\Program.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\projects\UnitTestResultsTest\Class1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\csharp\AutoGeneratedTest.java
/*
// no files are reported to SQ
// an alternative to using the SQ API is passing the setting directly to the Scanner for MSBuild (S4MSB),
// however the S4MSB is not reading correctly the input parameters (SonarSource/sonar-scanner-msbuild#699)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\csharp\CasingAppTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\csharp\CoverageTest.java
/*
// Only main files are counted
/*.nccov");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\csharp\DoNotAnalyzeTestFilesTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\csharp\MetricsIncludeHeaderCommentTest.java
/*
/**
// Scanner for MSBuild caches the analyzer, so running the test twice in a row means the old binary is used.
// This code deletes the cache, but there should be a way to run without cache.
// Ticket: https://jira.sonarsource.com/browse/SONARMSBRU-346
// Without that, the MetricsTest project is considered as a Test project :)
/* Lines - must be the same */
/* Lines of code - must be the same */
/* Comment lines - these are actually modified */
/* Helper methods */
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\csharp\MetricsTest.java
/*
// Scanner for MSBuild caches the analyzer, so running the test twice in a row means the old binary is used.
// This code deletes the cache, but there should be a way to run without cache.
// Ticket: https://jira.sonarsource.com/browse/SONARMSBRU-346
// Without that, the MetricsTest project is considered as a Test project :)
/* Files */
/* Statements */
/* Complexity */
/* Cognitive Complexity */
/* Lines */
/* Lines of code */
/* Comment lines */
/* Functions */
/* Classes */
// No other line
/* Executable lines */
// No other lines
/* Helper methods */
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\csharp\MultiTargetAppTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\csharp\NoSonarTest.java
/*
// Without that, the NoSonarTest project is considered as a Test project :)
/* Helper methods */
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\csharp\SharedFilesTest.java
/*
// shared file in the solution should have measures and issues
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\csharp\Tests.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\csharp\UnitTestResultsTest.java
/*
/*.trx");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\shared\TestUtils.java
/*
// C# and VB.Net versions are the same
// use the plugin that was built on local machine
// QA environment downloads the plugin built by the CI job
// We need to set the fallback version to run from inside the IDE when the property isn't set
// In order to be able to run tests on Azure pipelines, the AGENT_BUILDDIRECTORY environment variable
// needs to be set to the analyzed project directory.
// This is necessary because the scanner for MsBuild will use this variable to set the correct work directory.
// Versions of SonarQube and plugins support aliases:
// - "DEV" for the latest build of master that passed QA
// - "DEV[1.0]" for the latest build that passed QA of series 1.0.x
// - "LATEST_RELEASE" for the latest release
// - "LATEST_RELEASE[1.0]" for latest release of series 1.0.x
// The SonarQube alias "LTS" has been dropped. An alternative is "LATEST_RELEASE[6.7]".
// The term "latest" refers to the highest version number, not the most recently published version.
// This method has been taken from SonarSource/sonar-scanner-msbuild
// If the test is being run under VSTS then the Scanner will
// expect the project to be under the VSTS sources directory
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\shared\VstsUtils.java
/*
// This class has been taken from SonarSource/sonar-scanner-msbuild
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\vbnet\AutoGeneratedTest.java
/*
// only MyModule.vb is scanned
// an alternative to using the SQ API is passing the setting directly to the Scanner for MSBuild (S4MSB),
// however the S4MSB is not reading correctly the input parameters (SonarSource/sonar-scanner-msbuild#699)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\vbnet\CoverageTest.java
/*
// Only main files are counted
/*.nccov");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\vbnet\DoNotAnalyzeTestFilesTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\vbnet\MetricsTest.java
/*
// Without that, the MetricsTest project is considered as a Test project :)
/* Files */
/* Statements */
/* Complexity */
/* Cognitive Complexity */
/* Lines */
/* Lines of code */
/* Comment lines */
/* Functions */
/* Classes */
/* Public API */
// No other line
// No other lines
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\vbnet\NoSonarTest.java
/*
// Without that, the NoSonarTest project is considered as a Test project :)
/* Helper methods */
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\vbnet\Tests.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\its\src\test\java\com\sonar\it\vbnet\UnitTestResultsTest.java
/*
/*.trx");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\scripts\rspec\rspec-templates\CommonBaseClassTemplate.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\scripts\rspec\rspec-templates\CSharpRuleTemplate.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\scripts\rspec\rspec-templates\CSharpTestCaseTemplate.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\scripts\rspec\rspec-templates\CSharpTestTemplate.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\scripts\rspec\rspec-templates\VbNetRuleTemplate.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\scripts\rspec\rspec-templates\VbNetTestSnippet.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\scripts\rspec\rspec-templates\VbNetTestTemplate.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\main\java\org\sonar\plugins\csharp\CSharp.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\main\java\org\sonar\plugins\csharp\CSharpGlobalProtobufFileProcessor.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\main\java\org\sonar\plugins\csharp\CSharpPlugin.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\main\java\org\sonar\plugins\csharp\CSharpProjectConfiguration.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\main\java\org\sonar\plugins\csharp\CSharpPropertyDefinitions.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\main\java\org\sonar\plugins\csharp\CSharpSolutionConfiguration.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\main\java\org\sonar\plugins\csharp\CSharpSonarRulesDefinition.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\main\java\org\sonar\plugins\csharp\CSharpSonarWayProfile.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\main\java\org\sonar\plugins\csharp\package-info.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\main\java\org\sonar\plugins\csharp\SonarLintFakeProfileImporter.java
/*
/**
// SONARCS-558 workaround for SONAR-6969
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\test\java\com\sonar\plugins\security\api\CsRules.java
/*
// cleanup for the next execution
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\test\java\org\sonar\plugins\csharp\CSharpPluginTest.java
/*
// CSharpSonarWayProfile
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\test\java\org\sonar\plugins\csharp\CSharpSonarRulesDefinitionTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\test\java\org\sonar\plugins\csharp\CSharpSonarWayProfileTest.java
/*
// we could still fail if we are using a SQ >= 7.4 and old version of SonarSecurity (returning some keys)
// case in which IllegalStateException will be thrown
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\test\java\org\sonar\plugins\csharp\CSharpTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\test\java\org\sonar\plugins\csharp\SonarLintFakeProfileImporterTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\test\java\org\sonar\plugins\csharp\SonarVersion.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-csharp-plugin\src\test\resources\Program.cs
//-----------------------------------------------------------------------
// <copyright file="ArgumentValidation.cs" company="SonarSource SA and Microsoft Corporation">
//   Copyright (c) SonarSource SA and Microsoft Corporation.  All rights reserved.
//   Licensed under the MIT License. See License.txt in the project root for license information.
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Static methods that implement aspects of the NUnit framework that cut
/// across individual test types, extensions, etc. Some of these use the
/// methods of the Reflect class to implement operations specific to the
/// NUnit Framework.
/// </summary>
// NOSONAR
// Noncompliant; <T>is ignored
// Noncompliant; <T> is ignored
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\Coverage.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\CoverageAggregator.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\CoverageCache.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\CoverageConfiguration.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\CoverageParser.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\CoverageReportImportSensor.java
/*
/**
// Do not log for test files to avoid pointless noise
//docs.sonarqube.org/x/CoBh");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\DotCoverReportParser.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\DotCoverReportsAggregator.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\NCover3ReportParser.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\NUnitTestResultsFileParser.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\OpenCoverReportParser.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\package-info.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\ParseErrorException.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\UnitTestConfiguration.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\UnitTestResults.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\UnitTestResultsAggregator.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\UnitTestResultsImportSensor.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\UnitTestResultsParser.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\VisualStudioCoverageXmlReportParser.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\VisualStudioTestResultsFileParser.java
/*
// IgnoreAttribute and Assert.Inconclusive do not appear in the trx (xml attributes are always 0).
// There is no official documentation but it seems like the only way to get skipped tests is to do the following
// maths.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\WildcardPatternFileProvider.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\XmlParserHelper.java
/*
// if the next() method throws exception before moving XML pointer forward, we fail here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonar\plugins\dotnet\tests\XUnitTestResultsFileParser.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\AbstractFakeProfileImporter.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\AbstractGlobalProtobufFileProcessor.java
/*
/**
// fallback to old property
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\AbstractProjectConfiguration.java
/*
/**
/**
/**
/**
// fallback to old property
// we don't generate sonar.cs.analyzer.projectOutPaths for test projects on purpose
// fallback to old property
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\AbstractPropertyDefinitions.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\AbstractRulesDefinition.java
/*
// for deserialization purposes
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\AbstractSolutionConfiguration.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\AbstractSonarLintProfileExporter.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\AbstractSonarWayProfile.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\CodeCoverageProvider.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\DotNetPluginMetadata.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\DotNetSensor.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\EncodingPerFile.java
/*
// When there is no entry for a file, it means it was not processed by Roslyn. So we consider encoding to be ok.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\GeneratedFileFilter.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\package-info.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\PropertiesSensor.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\ProtobufDataImporter.java
/*
// Note: the no-sonar "measure" must be imported before issues, otherwise the affected issues won't get excluded!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\RealPathProvider.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\ReportPathCollector.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\RoslynDataImporter.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\RoslynProfileExporter.java
/*
/**
//github.com/SonarSource/sonar-scanner-msbuild/blob/4.6.1.2049/src/SonarScanner.MSBuild.PreProcessor/Roslyn/RoslynAnalyzerProvider.cs#L150
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\RoslynReport.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\SarifParserCallbackImpl.java
/*
/**
// De-duplicate issues
// De-duplicate issues
// De-duplicate issues
// First, we try to report the issue with the precise location...
// Our rules should fail if they report on an invalid location
// Precise location failed, now try the line...
// Line location failed so let's report at file level (we are sure the file exists).
// As the file was already registered previously, there is nothing to do here.
// This is not an external rule
// note that comparison of absolute path is done using Path.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\SensorContextUtils.java
/*
// utility class, forbidden constructor
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\SonarLintProfileExporter.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\UnitTestResultsProvider.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\WrongEncodingFileFilter.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\protobuf\CPDTokensImporter.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\protobuf\EncodingImporter.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\protobuf\FileMetadataImporter.java
/*
/**
// For testing
// stream collector can't handle null values
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\protobuf\HighlightImporter.java
/*
/**
// we aggregate all highlighting information, no need to process only the first protobuf file
// Note:
// TypeOfText.ANNOTATION -> like a type in C#, so received as DECLARATION_NAME
// TypeOfText.STRUCTURED_COMMENT -> not colored differently in C#, so received as COMMENT
// TypeOfText.PREPROCESS_DIRECTIVE -> received as KEYWORD
// generated by protobuf
// do not color
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\protobuf\MetricsImporter.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\protobuf\package-info.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\protobuf\ProtobufImporter.java
/*
/**
// file may be null because it's not within the project base dir
// process each protobuf file only once but allow overriding
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\protobuf\ProtobufImporters.java
/*
// utility class
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\protobuf\RawProtobufImporter.java
/*
/**
// only highlight importer is using this method for now but we should expand to other importers
// when we start merging other protobuf data
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\plugins\protobuf\SymbolRefsImporter.java
/*
/**
// we aggregate all symbol reference information, no need to process only the first protobuf file
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\sarif\Location.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\sarif\package-info.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\sarif\SarifParser.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\sarif\SarifParser01And04.java
/*
///";
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\sarif\SarifParser10.java
/*
// Process rules first
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\sarif\SarifParserCallback.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\main\java\org\sonarsource\dotnet\shared\sarif\SarifParserFactory.java
/*
// private
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\CoverageAggregatorTest.java
/*
// Arrange
// Act
// Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\CoverageCacheTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\CoverageReportImportSensorTest.java
/*
//docs.sonarqube.org/x/CoBh");
//docs.sonarqube.org/x/CoBh");
// This method has been taken from SonarSource/sonar-scanner-msbuild
// If the test is being run under VSTS then the Scanner will
// expect the project to be under the VSTS sources directory
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\CoverageTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\DotCoverReportParserTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\DotCoverReportsAggregatorTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\NCover3ReportParserTest.java
/*
// use "one_file.nccov" to easily check the logs (it has only one coverage entry)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\NUnitTestResultsFileParserTest.java
/*
// 4 + 3 + 2
// 4 + 3 + 2
// 1 + 3
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\OpenCoverReportParserTest.java
/*
// to easily check the logs (it has only one coverage entry)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\UnitTestResultsAggregatorTest.java
/*
// Visual Studio test results only
// NUnit test results only
// XUnit test results only
// All configured
// None configured
// Multiple files configured
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\UnitTestResultsImportSensorTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\VisualStudioCoverageXmlReportParserTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\VisualStudioTestResultsFileParserTest.java
/*
// 43 - 31
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\VstsUtils.java
/*
// This class has been taken from SonarSource/sonar-scanner-msbuild
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\WildcardPatternFileProviderTest.java
/*
// we don't know the order of logging, so we're just doing a sanity check
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\XmlParserHelperTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonar\plugins\dotnet\tests\XUnitTestResultsFileParserTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\AbstractGlobalProtobufFileProcessorTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\AbstractProjectConfigurationTest.java
/*
// Test projects have sonar.tests property set, main projects don't
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\AbstractRulesDefinitionTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\AbstractSolutionConfigurationTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\AbstractSonarLintProfileExporterTest.java
/*
// S1000 has parameters and is enabled
// S1001 is a SonarLint rule and disabled -> should be disabled in exported rule set
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\CodeCoverageProviderTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\DotNetSensorTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\EncodingPerFileTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\GeneratedFileFilterTest.java
/*
// by default, analyzeGeneratedCode is set to false
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\PropertiesSensorTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\ProtobufDataImporterTest.java
/*
// create metrics.pb
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\RealPathProviderTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\ReportPathCollectorTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\RoslynDataImporterTest.java
/*
// copy test reports to work dir
// replace file path in the roslyn report to point to real cs file in the resources
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\RoslynProfileExporterTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\SensorContextUtilsTest.java
/*
// note: the .getCanonicalFile() is a precaution for filename-shortening on windows
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\UnitTestResultsProviderTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\WrongEncodingFileFilterTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\protobuf\CPDTokensImporterTest.java
/*
// see src/test/resources/ProtobufImporterTest/README.md for explanation
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\protobuf\FileMetadataImporterTest.java
/*
// see src/test/resources/ProtobufImporterTest/README.md for explanation
// Act
// Assert
// No consume calls means that the protobuf contained no messages
// Act
// Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\protobuf\HighlightImporterTest.java
/*
// see src/test/resources/ProtobufImporterTest/README.md for explanation
// using System;
// [SuppressMessage("Maintainability", "S2326:Unused type parameters should be removed")]
// if (op1 == 0)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\protobuf\MetricsImporterTest.java
/*
// see src/test/resources/ProtobufImporterTest/README.md for explanation
// TODO change test data so that all metrics have different expected values
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\protobuf\SymbolRefsImporterTest.java
/*
// see src/test/resources/ProtobufImporterTest/README.md for explanation
// a symbol is defined at this location, and referenced at 3 other locations
// ... other similar examples ...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\plugins\testutils\ProtobufFilterTool.java
/*
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\sarif\SarifParser01And04Test.java
/*
// VS 2015 Update 1
// VS 2015 Update 2
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\sarif\SarifParser10Test.java
/*
// VS 2015 Update 3
// #934
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\sarif\SarifParserCallbackImplTest.java
/*
// file needs to have a few lines so that the issue is within it's range
// sonar rule, ignored
// sonar rule, ignored
// We try to report an issue that contains an invalid startColumn (bigger than the line length) but with a valid start line
// So we expect the issue to be reported on the start line.
// We try to report an issue that contains an invalid startLine (bigger than the file length)
// So we expect the issue to be reported on the file.
// We try to report an issue that contains an invalid startLine (bigger than the file length)
// So we expect the issue to be reported on the file.
// does not start with single S
// too long
// too long
// sonar rule
// sonar rule
// too short
// does not have only digits after S
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\java\org\sonarsource\dotnet\shared\sarif\SarifParserFactoryTest.java
/*
//json.schemastore.org/sarif-1.1.0\",\"version\": \"1.1.0\"}".getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\resources\Program.cs
//-----------------------------------------------------------------------
// <copyright file="ArgumentValidation.cs" company="SonarSource SA and Microsoft Corporation">
//   Copyright (c) SonarSource SA and Microsoft Corporation.  All rights reserved.
//   Licensed under the MIT License. See License.txt in the project root for license information.
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Static methods that implement aspects of the NUnit framework that cut
/// across individual test types, extensions, etc. Some of these use the
/// methods of the Reflect class to implement operations specific to the
/// NUnit Framework.
/// </summary>
// NOSONAR
// Noncompliant; <T>is ignored
// Noncompliant; <T> is ignored
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-dotnet-shared-library\src\test\resources\ProtobufImporterTest\Program.cs
//-----------------------------------------------------------------------
// <copyright file="ArgumentValidation.cs" company="SonarSource SA and Microsoft Corporation">
//   Copyright (c) SonarSource SA and Microsoft Corporation.  All rights reserved.
//   Licensed under the MIT License. See License.txt in the project root for license information.
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Static methods that implement aspects of the NUnit framework that cut
/// across individual test types, extensions, etc. Some of these use the
/// methods of the Reflect class to implement operations specific to the
/// NUnit Framework.
/// </summary>
// NOSONAR
// Noncompliant; <T>is ignored
// Noncompliant; <T> is ignored
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\main\java\org\sonar\plugins\vbnet\package-info.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\main\java\org\sonar\plugins\vbnet\SonarLintFakeProfileImporter.java
/*
// SONARCS-558 workaround for SONAR-6969
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\main\java\org\sonar\plugins\vbnet\VbNet.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\main\java\org\sonar\plugins\vbnet\VbNetGlobalProtobufFileProcessor.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\main\java\org\sonar\plugins\vbnet\VbNetPlugin.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\main\java\org\sonar\plugins\vbnet\VbNetProjectConfiguration.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\main\java\org\sonar\plugins\vbnet\VbNetPropertyDefinitions.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\main\java\org\sonar\plugins\vbnet\VbNetSolutionConfiguration.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\main\java\org\sonar\plugins\vbnet\VbNetSonarRulesDefinition.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\main\java\org\sonar\plugins\vbnet\VbNetSonarWayProfile.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\test\java\org\sonar\plugins\vbnet\SonarLintFakeProfileImporterTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\test\java\org\sonar\plugins\vbnet\SonarVersion.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\test\java\org\sonar\plugins\vbnet\VbNetPluginTest.java
/*
// VbNetSonarWayProfile
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\test\java\org\sonar\plugins\vbnet\VbNetSonarRulesDefinitionTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\test\java\org\sonar\plugins\vbnet\VbNetSonarWayProfileTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\test\java\org\sonar\plugins\vbnet\VbNetTest.java
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonar-vbnet-plugin\src\test\resources\Program.cs
//-----------------------------------------------------------------------
// <copyright file="ArgumentValidation.cs" company="SonarSource SA and Microsoft Corporation">
//   Copyright (c) SonarSource SA and Microsoft Corporation.  All rights reserved.
//   Licensed under the MIT License. See License.txt in the project root for license information.
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Static methods that implement aspects of the NUnit framework that cut
/// across individual test types, extensions, etc. Some of these use the
/// methods of the Reflect class to implement operations specific to the
/// NUnit Framework.
/// </summary>
// NOSONAR
// Noncompliant; <T>is ignored
// Noncompliant; <T> is ignored
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\ReviewDiffs\Program.cs
/*
// The files are not in correct JSon format
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\SharedAssemblyInfo.cs
// <auto-generated/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\benchmark\PersistenceBenchmark\Messages.cs
//-----------------------------------------------------------------------
// <copyright file="Messages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\benchmark\PersistenceBenchmark\PerformanceActors.cs
//-----------------------------------------------------------------------
// <copyright file="PerformanceActors.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\benchmark\PersistenceBenchmark\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// if you want to benchmark your persistent storage provides, paste the configuration in string below
// by default we're checking against in-memory journal
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\benchmark\PersistenceBenchmark\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\benchmark\PingPong\ClientActorBase.cs
//-----------------------------------------------------------------------
// <copyright file="ClientActorBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//       Console.WriteLine("done {0}", Self.Path);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\benchmark\PingPong\ClientAsyncActor.cs
//-----------------------------------------------------------------------
// <copyright file="ClientReceiveActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//async method lacks an await
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\benchmark\PingPong\ClientReceiveActor.cs
//-----------------------------------------------------------------------
// <copyright file="ClientReceiveActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\benchmark\PingPong\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Warm up
//times 2 since the client and the destination both send messages
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\benchmark\PingPong\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSharding.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Marker trait for remote messages and persistent events/snapshots with special serializer.
/// </summary>
/// <summary>
/// Convenience implementation of <see cref="IMessageExtractor"/> that 
/// construct ShardId based on the <see cref="object.GetHashCode"/> of the EntityId. 
/// The number of unique shards is limited by the given MaxNumberOfShards.
/// </summary>
/// <summary>
/// <para>
/// This extension provides sharding functionality of actors in a cluster. 
/// The typical use case is when you have many stateful actors that together consume
/// more resources (e.g. memory) than fit on one machine. You need to distribute them across
/// several nodes in the cluster and you want to be able to interact with them using their
/// logical identifier, but without having to care about their physical location in the cluster,
/// which might also change over time. It could for example be actors representing Aggregate Roots in
/// Domain-Driven Design terminology. Here we call these actors "entries". These actors
/// typically have persistent (durable) state, but this feature is not limited to
/// actors with persistent state.
/// </para>
/// <para>
/// In this context sharding means that actors with an identifier, so called entries,
/// can be automatically distributed across multiple nodes in the cluster. Each entity
/// actor runs only at one place, and messages can be sent to the entity without requiring
/// the sender to know the location of the destination actor. This is achieved by sending
/// the messages via a <see cref="Sharding.ShardRegion"/> actor provided by this extension, which knows how
/// to route the message with the entity id to the final destination.
/// </para>
/// <para>
/// This extension is supposed to be used by first, typically at system startup on each node
/// in the cluster, registering the supported entity types with the <see cref="ClusterShardingGuardian.Start"/>
/// method and then the <see cref="Sharding.ShardRegion"/> actor for a named entity type can be retrieved with
/// <see cref="ClusterSharding.ShardRegion"/>. Messages to the entries are always sent via the local
/// <see cref="Sharding.ShardRegion"/>. Some settings can be configured as described in the `akka.contrib.cluster.sharding`
/// section of the `reference.conf`.
/// </para>
/// <para>
/// The <see cref="Sharding.ShardRegion"/> actor is started on each node in the cluster, or group of nodes
/// tagged with a specific role. The <see cref="Sharding.ShardRegion"/> is created with two application specific
/// functions to extract the entity identifier and the shard identifier from incoming messages.
/// A shard is a group of entries that will be managed together. For the first message in a
/// specific shard the <see cref="Sharding.ShardRegion"/> request the location of the shard from a central coordinator,
/// the <see cref="PersistentShardCoordinator"/>. The <see cref="PersistentShardCoordinator"/> decides which <see cref="Sharding.ShardRegion"/> that
/// owns the shard. The <see cref="Sharding.ShardRegion"/> receives the decided home of the shard
/// and if that is the <see cref="Sharding.ShardRegion"/> instance itself it will create a local child
/// actor representing the entity and direct all messages for that entity to it.
/// If the shard home is another <see cref="Sharding.ShardRegion"/> instance messages will be forwarded
/// to that <see cref="Sharding.ShardRegion"/> instance instead. While resolving the location of a
/// shard incoming messages for that shard are buffered and later delivered when the
/// shard home is known. Subsequent messages to the resolved shard can be delivered
/// to the target destination immediately without involving the <see cref="PersistentShardCoordinator"/>.
/// </para>
/// <para>
/// To make sure that at most one instance of a specific entity actor is running somewhere
/// in the cluster it is important that all nodes have the same view of where the shards
/// are located. Therefore the shard allocation decisions are taken by the central
/// <see cref="PersistentShardCoordinator"/>, which is running as a cluster singleton, i.e. one instance on
/// the oldest member among all cluster nodes or a group of nodes tagged with a specific
/// role. The oldest member can be determined by <see cref="Member.IsOlderThan"/>.
/// </para>
/// <para>
/// The logic that decides where a shard is to be located is defined in a pluggable shard
/// allocation strategy. The default implementation <see cref="LeastShardAllocationStrategy"/>
/// allocates new shards to the <see cref="Sharding.ShardRegion"/> with least number of previously allocated shards.
/// This strategy can be replaced by an application specific implementation.
/// </para>
/// <para>
/// To be able to use newly added members in the cluster the coordinator facilitates rebalancing
/// of shards, i.e. migrate entries from one node to another. In the rebalance process the
/// coordinator first notifies all <see cref="Sharding.ShardRegion"/> actors that a handoff for a shard has started.
/// That means they will start buffering incoming messages for that shard, in the same way as if the
/// shard location is unknown. During the rebalance process the coordinator will not answer any
/// requests for the location of shards that are being rebalanced, i.e. local buffering will
/// continue until the handoff is completed. The <see cref="Sharding.ShardRegion"/> responsible for the rebalanced shard
/// will stop all entries in that shard by sending `PoisonPill` to them. When all entries have
/// been terminated the <see cref="Sharding.ShardRegion"/> owning the entries will acknowledge the handoff as completed
/// to the coordinator. Thereafter the coordinator will reply to requests for the location of
/// the shard and thereby allocate a new home for the shard and then buffered messages in the
/// <see cref="Sharding.ShardRegion"/> actors are delivered to the new location. This means that the state of the entries
/// are not transferred or migrated. If the state of the entries are of importance it should be
/// persistent (durable), e.g. with `Akka.Persistence`, so that it can be recovered at the new
/// location.
/// </para>
/// <para>
/// The logic that decides which shards to rebalance is defined in a pluggable shard
/// allocation strategy. The default implementation <see cref="LeastShardAllocationStrategy"/>
/// picks shards for handoff from the <see cref="Sharding.ShardRegion"/> with most number of previously allocated shards.
/// They will then be allocated to the <see cref="Sharding.ShardRegion"/> with least number of previously allocated shards,
/// i.e. new members in the cluster. There is a configurable threshold of how large the difference
/// must be to begin the rebalancing. This strategy can be replaced by an application specific
/// implementation.
/// </para>
/// <para>
/// The state of shard locations in the <see cref="PersistentShardCoordinator"/> is persistent (durable) with
/// `Akka.Persistence` to survive failures. Since it is running in a cluster `Akka.Persistence`
/// must be configured with a distributed journal. When a crashed or unreachable coordinator
/// node has been removed (via down) from the cluster a new <see cref="PersistentShardCoordinator"/> singleton
/// actor will take over and the state is recovered. During such a failure period shards
/// with known location are still available, while messages for new (unknown) shards
/// are buffered until the new <see cref="PersistentShardCoordinator"/> becomes available.
/// </para>
/// <para>
/// As long as a sender uses the same <see cref="Sharding.ShardRegion"/> actor to deliver messages to an entity
/// actor the order of the messages is preserved. As long as the buffer limit is not reached
/// messages are delivered on a best effort basis, with at-most once delivery semantics,
/// in the same way as ordinary message sending. Reliable end-to-end messaging, with
/// at-least-once semantics can be added by using <see cref="Persistence.AtLeastOnceDeliveryActor"/> in `Akka.Persistence`.
/// </para>
/// Some additional latency is introduced for messages targeted to new or previously
/// unused shards due to the round-trip to the coordinator. Rebalancing of shards may
/// also add latency. This should be considered when designing the application specific
/// shard resolution, e.g. to avoid too fine grained shards.
/// <para>
/// The <see cref="Sharding.ShardRegion"/> actor can also be started in proxy only mode, i.e. it will not
/// host any entries itself, but knows how to delegate messages to the right location.
/// A <see cref="Sharding.ShardRegion"/> starts in proxy only mode if the roles of the node does not include
/// the node role specified in `akka.contrib.cluster.sharding.role` config property
/// or if the specified `EntityProps` is `null`.
/// </para>
/// <para>
/// If the state of the entries are persistent you may stop entries that are not used to
/// reduce memory consumption. This is done by the application specific implementation of
/// the entity actors for example by defining receive timeout (<see cref="IActorContext.SetReceiveTimeout"/>).
/// If a message is already enqueued to the entity when it stops itself the enqueued message
/// in the mailbox will be dropped. To support graceful passivation without loosing such
/// messages the entity actor can send <see cref="Passivate"/> to its parent <see cref="Sharding.ShardRegion"/>.
/// The specified wrapped message in <see cref="Passivate"/> will be sent back to the entity, which is
/// then supposed to stop itself. Incoming messages will be buffered by the <see cref="Sharding.ShardRegion"/>
/// between reception of <see cref="Passivate"/> and termination of the entity. Such buffered messages
/// are thereafter delivered to a new incarnation of the entity.
/// </para>
/// </summary>
/// <summary>
/// Register a named entity type by defining the <see cref="Actor.Props"/> of the entity actor and 
/// functions to extract entity and shard identifier from messages. The <see cref="Sharding.ShardRegion"/> 
/// actor for this type can later be retrieved with the <see cref="ShardRegion"/> method.
/// </summary>
/// <param name="typeName">The name of the entity type</param>
/// <param name="entityProps">
/// The <see cref="Actor.Props"/> of the entity actors that will be created by the <see cref="Sharding.ShardRegion"/> 
/// </param>
/// <param name="settings">Configuration settings, see <see cref="ClusterShardingSettings"/></param>
/// <param name="idExtractor">
/// Partial function to extract the entity id and the message to send to the entity from the incoming message, 
/// if the partial function does not match the message will be `unhandled`, 
/// i.e.posted as `Unhandled` messages on the event stream
/// </param>
/// <param name="shardResolver">
/// Function to determine the shard id for an incoming message, only messages that passed the `extractEntityId` will be used
/// </param>
/// <param name="allocationStrategy">Possibility to use a custom shard allocation and rebalancing logic</param>
/// <param name="handOffStopMessage">
/// The message that will be sent to entities when they are to be stopped for a rebalance or 
/// graceful shutdown of a <see cref="Sharding.ShardRegion"/>, e.g. <see cref="PoisonPill"/>.
/// </param>
/// <returns>The actor ref of the <see cref="Sharding.ShardRegion"/> that is to be responsible for the shard.</returns>
//TODO: change type name to type instance?
/// <summary>
/// Register a named entity type by defining the <see cref="Actor.Props"/> of the entity actor and 
/// functions to extract entity and shard identifier from messages. The <see cref="Sharding.ShardRegion"/> 
/// actor for this type can later be retrieved with the <see cref="ShardRegion"/> method.
/// </summary>
/// <param name="typeName">The name of the entity type</param>
/// <param name="entityProps">
/// The <see cref="Actor.Props"/> of the entity actors that will be created by the <see cref="Sharding.ShardRegion"/> 
/// </param>
/// <param name="settings">Configuration settings, see <see cref="ClusterShardingSettings"/></param>
/// <param name="idExtractor">
/// Partial function to extract the entity id and the message to send to the entity from the incoming message, 
/// if the partial function does not match the message will be `unhandled`, 
/// i.e.posted as `Unhandled` messages on the event stream
/// </param>
/// <param name="shardResolver">
/// Function to determine the shard id for an incoming message, only messages that passed the `extractEntityId` will be used
/// </param>
/// <returns>The actor ref of the <see cref="Sharding.ShardRegion"/> that is to be responsible for the shard.</returns>
//TODO: change type name to type instance?
/// <summary>
/// Register a named entity type by defining the <see cref="Actor.Props"/> of the entity actor and 
/// functions to extract entity and shard identifier from messages. The <see cref="Sharding.ShardRegion"/> 
/// actor for this type can later be retrieved with the <see cref="ShardRegion"/> method.
/// </summary>
/// <param name="typeName">The name of the entity type</param>
/// <param name="entityProps">
/// The <see cref="Actor.Props"/> of the entity actors that will be created by the <see cref="Sharding.ShardRegion"/> 
/// </param>
/// <param name="settings">Configuration settings, see <see cref="ClusterShardingSettings"/></param>
/// <param name="messageExtractor">
/// Functions to extract the entity id, shard id, and the message to send to the entity from the incoming message.
/// </param>
/// <param name="allocationStrategy">Possibility to use a custom shard allocation and rebalancing logic</param>
/// <param name="handOffMessage">
/// The message that will be sent to entities when they are to be stopped for a rebalance or 
/// graceful shutdown of a <see cref="Sharding.ShardRegion"/>, e.g. <see cref="PoisonPill"/>.
/// </param>
/// <returns>The actor ref of the <see cref="Sharding.ShardRegion"/> that is to be responsible for the shard.</returns>
/// <summary>
/// Register a named entity type by defining the <see cref="Actor.Props"/> of the entity actor and 
/// functions to extract entity and shard identifier from messages. The <see cref="Sharding.ShardRegion"/> 
/// actor for this type can later be retrieved with the <see cref="ShardRegion"/> method.
/// </summary>
/// <param name="typeName">The name of the entity type</param>
/// <param name="entityProps">
/// The <see cref="Actor.Props"/> of the entity actors that will be created by the <see cref="Sharding.ShardRegion"/> 
/// </param>
/// <param name="settings">Configuration settings, see <see cref="ClusterShardingSettings"/></param>
/// <param name="messageExtractor">
/// Functions to extract the entity id, shard id, and the message to send to the entity from the incoming message.
/// </param>
/// <returns>The actor ref of the <see cref="Sharding.ShardRegion"/> that is to be responsible for the shard.</returns>
/// <summary>
/// Register a named entity type `ShardRegion` on this node that will run in proxy only mode, i.e.it will 
/// delegate messages to other `ShardRegion` actors on other nodes, but not host any entity actors itself.
/// The <see cref="Sharding.ShardRegion"/>  actor for this type can later be retrieved with the 
/// <see cref="ShardRegion"/>  method.
/// </summary>
/// <param name="typeName">The name of the entity type.</param>
/// <param name="role">
/// Specifies that this entity type is located on cluster nodes with a specific role. 
/// If the role is not specified all nodes in the cluster are used.
/// </param>
/// <param name="idExtractor">
/// Partial function to extract the entity id and the message to send to the  entity from the incoming message, 
/// if the partial function does not match the message will  be `unhandled`, i.e.posted as `Unhandled` messages 
/// on the event stream
/// </param>
/// <param name="shardResolver">
/// Function to determine the shard id for an incoming message, only messages that passed the `extractEntityId` will be used
/// </param>
/// <returns>The actor ref of the <see cref="Sharding.ShardRegion"/> that is to be responsible for the shard.</returns>
/// <summary>
/// Register a named entity type `ShardRegion` on this node that will run in proxy only mode, i.e.it will 
/// delegate messages to other `ShardRegion` actors on other nodes, but not host any entity actors itself.
/// The <see cref="Sharding.ShardRegion"/>  actor for this type can later be retrieved with the 
/// <see cref="ShardRegion"/>  method.
/// </summary>
/// <param name="typeName">The name of the entity type.</param>
/// <param name="role">
/// Specifies that this entity type is located on cluster nodes with a specific role. 
/// If the role is not specified all nodes in the cluster are used.
/// </param>
/// <param name="messageExtractor">
/// Functions to extract the entity id, shard id, and the message to send to the entity from the incoming message.
/// </param>
/// <returns>The actor ref of the <see cref="Sharding.ShardRegion"/> that is to be responsible for the shard.</returns>
/// <summary>
/// Retrieve the actor reference of the <see cref="Sharding.ShardRegion"/> actor responsible for the named entity type.
/// The entity type must be registered with the <see cref="ClusterShardingGuardian.Start"/> method before it can be used here.
/// Messages to the entity is always sent via the <see cref="Sharding.ShardRegion"/>.
/// </summary>
/// <summary>
/// Interface of the function used by the <see cref="ShardRegion"/> to
/// extract the shard id from an incoming message.
/// Only messages that passed the <see cref="IdExtractor"/> will be used
/// as input to this function.
/// </summary>
/// <summary>
/// Interface of the partial function used by the <see cref="ShardRegion"/> to
/// extract the entity id and the message to send to the entity from an
/// incoming message. The implementation is application specific.
/// If the partial function does not match the message will be
/// `unhandled`, i.e. posted as `Unhandled` messages on the event stream.
/// Note that the extracted  message does not have to be the same as the incoming
/// message to support wrapping in message envelope that is unwrapped before
/// sending to the entity actor.
/// </summary>
/// <summary>
/// Interface of functions to extract entity id,  shard id, and the message to send 
/// to the entity from an incoming message.
/// </summary>
/// <summary>
/// Extract the entity id from an incoming <paramref name="message"/>. 
/// If `null` is returned the message will be `unhandled`, i.e. posted as `Unhandled`
///  messages on the event stream
/// </summary>
/// <summary>
/// Extract the message to send to the entity from an incoming <paramref name="message"/>.
/// Note that the extracted message does not have to be the same as the incoming
/// message to support wrapping in message envelope that is unwrapped before
/// sending to the entity actor.
/// </summary>
/// <summary>
/// Extract the entity id from an incoming <paramref name="message"/>. Only messages that 
/// passed the <see cref="EntityId"/> method will be used as input to this method.
/// </summary>
//TODO: should we really use tuples?
/// <summary>
/// Periodic message to trigger rebalance.
/// </summary>
/// <summary>
/// End of rebalance process performed by <see cref="RebalanceWorker"/>.
/// </summary>
/// <summary>
/// INTERNAL API. Rebalancing process is performed by this actor. It sends 
/// <see cref="PersistentShardCoordinator.BeginHandOff"/> to all <see cref="ShardRegion"/> actors followed 
/// by <see cref="PersistentShardCoordinator.HandOff"/> to the <see cref="ShardRegion"/> responsible for 
/// the shard. When the handoff is completed it sends <see cref="RebalanceDone"/> to its parent 
/// <see cref="PersistentShardCoordinator"/>. If the process takes longer than the `handOffTimeout` it 
/// also sends <see cref="RebalanceDone"/>.
/// </summary>
/// <summary>
/// Check if we've received a shard start request.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingGuardian.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterShardingGuardian.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API: <see cref="ShardRegion"/> and <see cref="PersistentShardCoordinator"/> actors are createad as children of this actor.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterShardingSettings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Specifies that this entity type requires cluster nodes with a specific role.
/// If the role is not specified all nodes in the cluster are used.
/// </summary>
/// <summary>
/// True if active entity actors shall be automatically restarted upon <see cref="Shard"/> restart.i.e. 
/// if the <see cref="Shard"/> is started on a different <see cref="ShardRegion"/> due to rebalance or crash.
/// </summary>
/// <summary>
/// Absolute path to the journal plugin configuration entity that is to be used for the internal 
/// persistence of ClusterSharding.If not defined the default journal plugin is used. Note that 
/// this is not related to persistence used by the entity actors.
/// </summary>
/// <summary>
/// Absolute path to the snapshot plugin configuration entity that is to be used for the internal persistence 
/// of ClusterSharding. If not defined the default snapshot plugin is used.Note that this is not related 
/// to persistence used by the entity actors.
/// </summary>
/// <summary>
/// Create settings from the default configuration `akka.cluster.sharding`.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs
/// <summary>
/// This actor creates children entity actors on demand that it is told to be 
/// responsible for. It is used when `rememberEntities` is enabled.
/// </summary>
// Note; because we're not persisting the EntityStopped, we don't need
// to persist the EntityStarted either.
// Note; we only do this if remembering, otherwise the buffer is an overhead
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs
//-----------------------------------------------------------------------
// <copyright file="ShardCoordinator.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Singleton coordinator that decides where shards should be allocated.
/// </summary>
/// <summary>
/// Persistent state of the event sourced PersistentShardCoordinator.
/// </summary>
/// <summary>
/// Region for each shard.
/// </summary>
/// <summary>
/// Shards for each region.
/// </summary>
/// <summary>
/// Factory method for the <see cref="Actor.Props"/> of the <see cref="PersistentShardCoordinator"/> actor.
/// </summary>
// regions that have requested handoff, for graceful shutdown
// On rebalance, we send ourselves a GetShardHome message to reallocate a
// shard. This recieve handles the "response" from that message. i.e. Ingores it.
// can't stop because supervisor will start it again,
// it will soon be stopped when singleton is stopped
/* ignore */
// Optimization:
// Consider regions that don't belong to the current cluster to be terminated.
// This is an optimization that makes it operational faster and reduces the
// amount of lost messages during startup.
// not part of the cluster
// not part of the cluster
// Let the quick (those not involving failure detection) Terminated messages
// be processed before starting to reply to GetShardHome.
// This is an optimization that makes it operational faster and reduces the
// amount of lost messages during startup.
// The shard could have been removed by ShardRegionTerminated
// rebalance not completed, graceful shutdown will be retried
// if task completed immediately, just continue
// ignore all
// Old versions of the state object may not have unallocatedShard set,
// thus it will be null.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.Messages.cs
//-----------------------------------------------------------------------
// <copyright file="PersistentShardCoordinator.Messages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Messages sent to the coordinator.
/// </summary>
/// <summary>
/// Messages sent from the coordinator.
/// </summary>
/// <summary>
/// <see cref="Sharding.ShardRegion"/> registers to <see cref="PersistentShardCoordinator"/>, until it receives <see cref="RegisterAck"/>.
/// </summary>
/// <summary>
/// <see cref="ShardRegion"/> in proxy only mode registers to <see cref="PersistentShardCoordinator"/>, until it receives <see cref="RegisterAck"/>.
/// </summary>
/// <summary>
/// Acknowledgement from <see cref="PersistentShardCoordinator"/> that <see cref="Register"/> or <see cref="RegisterProxy"/> was sucessful.
/// </summary>
/// <summary>
/// <see cref="ShardRegion"/> requests the location of a shard by sending this message
/// to the <see cref="PersistentShardCoordinator"/>.
/// </summary>
/// <summary>
/// <see cref="PersistentShardCoordinator"/> replies with this message for <see cref="GetShardHome"/> requests.
/// </summary>
/// <summary>
/// <see cref="PersistentShardCoordinator"/> informs a <see cref="ShardRegion"/> that it is hosting this shard
/// </summary>
/// <summary>
/// <see cref="ShardRegion"/> replies with this message for <see cref="HostShard"/> requests which lead to it hosting the shard
/// </summary>
/// <summary>
/// <see cref="PersistentShardCoordinator"/> initiates rebalancing process by sending this message
/// to all registered <see cref="ShardRegion"/> actors (including proxy only). They are
/// supposed to discard their known location of the shard, i.e. start buffering
/// incoming messages for the shard. They reply with <see cref="BeginHandOffAck"/>.
/// When all have replied the <see cref="PersistentShardCoordinator"/> continues by sending
/// <see cref="HandOff"/> to the <see cref="ShardRegion"/> responsible for the shard.
/// </summary>
/// <summary>
/// Acknowledgement of <see cref="BeginHandOff"/>
/// </summary>
/// <summary>
/// When all <see cref="ShardRegion"/> actors have acknoledged the <see cref="BeginHandOff"/> the
/// <see cref="PersistentShardCoordinator"/> sends this message to the <see cref="ShardRegion"/> responsible for the
/// shard. The <see cref="ShardRegion"/> is supposed to stop all entries in that shard and when
/// all entries have terminated reply with <see cref="ShardStopped"/> to the <see cref="PersistentShardCoordinator"/>.
/// </summary>
/// <summary>
/// Reply to <see cref="HandOff"/> when all entries in the shard have been terminated.
/// </summary>
/// <summary>
/// Result of <see cref="PersistentShardCoordinator.AllocateShard"/> is piped to self with this message.
/// </summary>
// option
/// <summary>
/// Result of `rebalance` is piped to self with this message.
/// </summary>
/// <summary>
/// <see cref="Sharding.ShardRegion"/> requests full handoff to be able to shutdown gracefully.
/// </summary>
/// <summary>
/// DomainEvents for the persistent state of the event sourced PersistentShardCoordinator
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs
//-----------------------------------------------------------------------
// <copyright file="Shard.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: figure out how not to derive from persistent actor for the sake of alternative ddata based impl
/// <summary>
/// When a <see cref="StateChange"/> fails to write to the journal, we will retry it after a back off.
/// </summary>
/// <summary>
/// The Snapshot tick for the shards.
/// </summary>
/// <summary>
/// When an remembering entries and the entity stops without issuing a <see cref="Passivate"/>, 
/// we restart it after a back off using this message.
/// </summary>
/// <summary>
/// <see cref="ShardState"/> change for starting an entity in this `Shard`
/// </summary>
/// <summary>
/// <see cref="ShardState"/> change for an entity which has terminated.
/// </summary>
/// <summary>
/// Persistent state of the Shard.
/// </summary>
//  handOffStopper = Some(context.watch(context.actorOf(
//      handOffStopperProps(shardId, replyTo, idByRef.keySet, handOffStopMessage))))
//During hand off we only care about watching for termination of the hand off stopper
// Get the buffered messages and remove the buffer
// Now there is no deliveryBuffer we can try to redeliver
// and as the child exists, the message will be directly forwarded
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardAllocationStrategy.cs
//-----------------------------------------------------------------------
// <copyright file="ShardAllocationStrategy.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Interface of the pluggable shard allocation and rebalancing logic used by the <see cref="PersistentShardCoordinator"/>.
/// </summary>
/// <summary>
/// Invoked when the location of a new shard is to be decided.
/// </summary>
/// <param name="requester">
/// Actor reference to the <see cref="ShardRegion"/> that requested the location of the shard, can be returned 
/// if preference should be given to the node where the shard was first accessed.
/// </param>
/// <param name="shardId">The id of the shard to allocate.</param>
/// <param name="currentShardAllocations">
/// All actor refs to <see cref="ShardRegion"/> and their current allocated shards, in the order they were allocated
/// </param>
/// <returns>
/// <see cref="Task"/> of the actor ref of the <see cref="ShardRegion"/> that is to be responsible for the shard,
/// must be one of the references included in the <paramref name="currentShardAllocations"/> parameter.
/// </returns>
/// <summary>
/// Invoked periodically to decide which shards to rebalance to another location.
/// </summary>
/// <param name="currentShardAllocations">
/// All actor refs to <see cref="ShardRegion"/> and their current allocated shards, in the order they were allocated.
/// </param>
/// <param name="rebalanceInProgress">
/// Set of shards that are currently being rebalanced, i.e. you should not include these in the returned set.
/// </param>
/// <returns><see cref="Task"/> of the shards to be migrated, may be empty to skip rebalance in this round. </returns>
/// <summary>
/// The default implementation of <see cref="Akka.Cluster.Sharding.LeastShardAllocationStrategy"/> allocates new shards 
/// to the <see cref="ShardRegion"/> with least number of previously allocated shards. It picks shards 
/// for rebalancing handoff from the <see cref="ShardRegion"/> with most number of previously allocated shards.
/// They will then be allocated to the <see cref="ShardRegion"/> with least number of previously allocated shards,
/// i.e. new members in the cluster. There is a configurable threshold of how large the difference
/// must be to begin the rebalancing. The number of ongoing rebalancing processes can be limited.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs
//-----------------------------------------------------------------------
// <copyright file="ShardRegion.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This actor creates children entity actors on demand for the shards that it is told to be
/// responsible for. It delegates messages targeted to other shards to the responsible
/// <see cref="ShardRegion"/> actor on other nodes.
/// </summary>
/// <summary>
/// If the state of the entries are persistent you may stop entries that are not used to
/// reduce memory consumption. This is done by the application specific implementation of
/// the entity actors for example by defining receive timeout (<see cref="IActorContext.SetReceiveTimeout"/>).
/// If a message is already enqueued to the entity when it stops itself the enqueued message
/// in the mailbox will be dropped. To support graceful passivation without loosing such
/// messages the entity actor can send this <see cref="Passivate"/> message to its parent <see cref="ShardRegion"/>.
/// The specified wrapped <see cref="StopMessage"/> will be sent back to the entity, which is
/// then supposed to stop itself. Incoming messages will be buffered by the `ShardRegion`
/// between reception of <see cref="Passivate"/> and termination of the entity. Such buffered messages
/// are thereafter delivered to a new incarnation of the entity.
/// 
/// <see cref="PoisonPill"/> is a perfectly fine <see cref="StopMessage"/>.
/// </summary>
/// <summary>
/// Send this message to the <see cref="ShardRegion"/> actor to handoff all shards that are hosted by
/// the <see cref="ShardRegion"/> and then the <see cref="ShardRegion"/> actor will be stopped. You can <see cref="ICanWatch.Watch"/>
/// it to know when it is completed.
/// </summary>
/// <summary>
/// We must be sure that a shard is initialized before to start send messages to it.
/// Shard could be terminated during initialization.
/// </summary>
/// <summary>
/// Send this message to the <see cref="ShardRegion"/> actor to request for <see cref="CurrentRegions"/>,
/// which contains the addresses of all registered regions.
/// Intended for testing purpose to see when cluster sharding is "ready".
/// </summary>
/// <summary>
/// Reply to <see cref="GetCurrentRegions"/>.
/// </summary>
/// <summary>
/// Send this message to the <see cref="ShardRegion"/> actor to request for <see cref="ClusterShardingStats"/>,
/// which contains statistics about the currently running sharded entities in the
/// entire cluster. If the `timeout` is reached without answers from all shard regions
/// the reply will contain an empty map of regions.
/// 
/// Intended for testing purpose to see when cluster sharding is "ready" or to monitor
/// the state of the shard regions.
/// </summary>
/// <summary>
/// Reply to <see cref="GetClusterShardingStats"/>, contains statistics about all the sharding regions in the cluster.
/// </summary>
/// <summary>
/// Send this message to the `ShardRegion` actor to request for <see cref="ShardRegionStats"/>,
/// which contains statistics about the currently running sharded entities in the
/// entire region.
/// Intended for testing purpose to see when cluster sharding is "ready" or to monitor
/// the state of the shard regions.
/// 
/// For the statistics for the entire cluster, see <see cref="GetClusterShardingStats$"/>.
/// </summary>
/// <summary>
/// Send this message to a <see cref="ShardRegion"/> actor instance to request a
/// <see cref="CurrentShardRegionState"/> which describes the current state of the region.
/// The state contains information about what shards are running in this region
/// and what entities are running on each of those shards.
/// </summary>
/// <summary>
/// Reply to <see cref="GetShardRegionState"/> If gathering the shard information times out the set of shards will be empty.
/// </summary>
/// <summary>
/// When an remembering entities and the shard stops unexpected (e.g. persist failure), we
/// restart it after a back off using this message.
/// </summary>
/// <summary>
/// INTERNAL API. Sends stopMessage (e.g. <see cref="PoisonPill"/>) to the entities and when all of them have terminated it replies with `ShardStopped`.
/// </summary>
/// <summary>
/// Factory method for the <see cref="Actor.Props"/> of the <see cref="ShardRegion"/> actor.
/// </summary>
/// <summary>
/// Factory method for the <see cref="Actor.Props"/> of the <see cref="ShardRegion"/> actor when used in proxy only mode.
/// </summary>
// sort by age, oldest first
//TODO: how to apply custom comparer different way?
// Since now messages to a shard is buffered then those messages must be in right order
// log some insight to how buffers are filled up every 10% of the buffer capacity
// all shards have been rebalanced, complete graceful shutdown
// Start the shard, if already started this does nothing
// should not happen, inconsistency between ShardRegion and PersistentShardCoordinator
// must drop requests that came in between the BeginHandOff and now,
// because they might be forwarded from other regions and there
// is a risk or message re-ordering otherwise
//TODO: change on ConcurrentDictionary.GetOrAdd?
//val name = URLEncoder.encode(id, "utf-8")
//Are we meant to be handing off, or is this a unknown stop?
// if persist fails it will stop
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.cs
// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterShardingFailureSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// start the Persistence extension
//TODO: SharedLeveldbJournal.setStore(sharedStore, system)
// try with a new shard, will not reply until journal is available again
//Test the PersistentShardCoordinator allocating shards during a journal failure
//Test the Shard starting entities and persisting during a journal failure
//Test the Shard passivate works during a journal failure
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingGracefulShutdownSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterShardingGracefulShutdownSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//_cluster.RegisterOnMemberRemoved(() => Context.System.Shutdown());
// start the Persistence extension
//TODO: SharedLeveldbJournal.setStore(sharedStore, system)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingLeavingSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterShardingLeavingSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// start the Persistence extension
//SharedLeveldbJournal.setStore(sharedStore, system)
// should not move
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterShardingSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Simulate that the passivation takes some time, to verify passivation buffering
// start the Persistence extension
//SharedLeveldbJournal.setStore(sharedStore, system)
// local on first
//TODO: shouldn't we tell increment 3x first?
// let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages
// mute logging of deadLetters during shutdown of systems
//#counter-start
//#counter-start
//#counter-usage
//#counter-usage
// sixth is a frontend node, i.e. proxy only
//Create an increment counter 1
//Shut down the shard and confirm it's dead
// stop shard
//Get the path to where the shard now resides
//Check that counter 1 is now alive again, even though we have
// not sent a message to it via the ShardRegion
//Check a second region does not share the same persistent shards
//Create a separate 13 counter
//Check that no counter "1" exists in this shard
//create and increment counter 1
//create and increment counter 13
//Send the shard the passivate message from the counter
// watch for the Terminated message
// check counter 1 is dead
// stop shard cleanly
// force shard backup
// check counter 1 is still dead
// check counter 13 is alive again
//create and increment counter 1
//Start only one region, and force an entity onto that region
//Start another region and test it talks to node 3
// kill region 3
// Wait for migration to happen
//Test the shard, thus counter was moved onto node 4 and started.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\LeastShardAllocationStrategySpec.cs
//-----------------------------------------------------------------------
// <copyright file="LeastShardAllocationStrategy.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// so far regionB has 2 shards and regionC has 0 shards, but the diff is less than rebalanceThreshold
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClient.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterClient.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <para>
/// This actor is intended to be used on an external node that is not member
/// of the cluster. It acts like a gateway for sending messages to actors
/// somewhere in the cluster. From the initial contact points it will establish
/// a connection to a <see cref="ClusterReceptionist"/> somewhere in the cluster. It will
/// monitor the connection to the receptionist and establish a new connection if
/// the link goes down. When looking for a new receptionist it uses fresh contact
/// points retrieved from previous establishment, or periodically refreshed
/// contacts, i.e. not necessarily the initial contact points.
/// </para>
/// <para>
/// You can send messages via the `ClusterClient` to any actor in the cluster
/// that is registered in the <see cref="ClusterReceptionist"/>.
/// Messages are wrapped in <see cref="ClusterClient.Send"/>, <see cref="ClusterClient.SendToAll"/>
/// or <see cref="ClusterClient.Publish"/>.
/// </para>
/// <para>
/// 1. <see cref="ClusterClient.Send"/> -
/// The message will be delivered to one recipient with a matching path, if any such
/// exists. If several entries match the path the message will be delivered
/// to one random destination. The sender of the message can specify that local
/// affinity is preferred, i.e. the message is sent to an actor in the same local actor
/// system as the used receptionist actor, if any such exists, otherwise random to any other
/// matching entry.
/// </para>
/// <para>
/// 2. <see cref="ClusterClient.SendToAll"/> -
/// The message will be delivered to all recipients with a matching path.
/// </para>
/// <para>
/// 3. <see cref="ClusterClient.Publish"/> -
/// The message will be delivered to all recipients Actors that have been registered as subscribers to
/// to the named topic.
/// </para>
/// <para>
/// Use the factory method <see cref="ClusterClient.Props"/> to create the <see cref="Akka.Actor.Props"/> for the actor.
/// </para>
/// </summary>
/// <summary>
/// Factory method for <see cref="ClusterClient"/> <see cref="Actor.Props"/>.
/// </summary>
/* ok, from previous establish, already handled */ })
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientReceptionist.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterClientReceptionist.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Extension that starts <see cref="ClusterReceptionist"/> and accompanying <see cref="DistributedPubSubMediator"/>
/// with settings defined in config section "akka.cluster.client.receptionist".
/// The <see cref="DistributedPubSubMediator"/> is started by the <see cref="DistributedPubSub"/> extension.
/// </summary>
/// <summary>
/// Returns true if this member is not tagged with the role configured for the receptionist.
/// </summary>
/// <summary>
/// Register the actors that should be reachable for the clients in this <see cref="DistributedPubSubMediator"/>.
/// </summary>
/// <summary>
/// Register an actor that should be reachable for the clients. The clients can send messages to this actor with
/// <see cref="Distributed.Send"/> or <see cref="Distributed.SendToAll"/> using the path elements 
/// of the <see cref="IActorRef"/>, e.g. "/user/myservice".
/// </summary>
/// <summary>
/// A registered actor will be automatically unregistered when terminated, 
/// but it can also be explicitly unregistered before termination.
/// </summary>
/// <summary>
/// Register an actor that should be reachable for the clients to a named topic.
/// Several actors can be registered to the same topic name, and all will receive
/// published messages.
/// The client can publish messages to this topic with <see cref="Distributed.Publish"/>.
/// </summary>
/// <summary>
/// A registered subscriber will be automatically unregistered when terminated, 
/// but it can also be explicitly unregistered before termination.
/// </summary>
// important to use val mediator here to activate it outside of ClusterReceptionist constructor
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterClientSettings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Actor paths of the <see cref="ClusterReceptionist"/> actors on the servers (cluster nodes) that the client will try to contact initially.
/// </summary>
/// <summary>
/// Interval at which the client retries to establish contact with one of ClusterReceptionist on the servers (cluster nodes)
/// </summary>
/// <summary>
/// Interval at which the client will ask the <see cref="ClusterReceptionist"/> for new contact points to be used for next reconnect.
/// </summary>
/// <summary>
/// How often failure detection heartbeat messages for detection of failed connections should be sent.
/// </summary>
/// <summary>
/// Number of potentially lost/delayed heartbeats that will be accepted before considering it to be an anomaly. 
/// The ClusterClient is using the <see cref="DeadlineFailureDetector"/>, which will trigger if there are 
/// no heartbeats within the duration <see cref="HeartbeatInterval"/> + <see cref="AcceptableHeartbeatPause"/>.
/// </summary>
/// <summary>
/// If connection to the receptionist is not established the client will buffer this number of messages and deliver 
/// them the connection is established. When the buffer is full old messages will be dropped when new messages are sent via the client. 
/// Use 0 to disable buffering, i.e. messages will be dropped immediately if the location of the receptionist is unavailable.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionist.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterReceptionist.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <para>
/// <see cref="ClusterClient"/> connects to this actor to retrieve. The `ClusterReceptionist` is
/// supposed to be started on all nodes, or all nodes with specified role, in the cluster.
/// The receptionist can be started with the <see cref="ClusterClientReceptionist"/> or as an
/// ordinary actor (use the factory method <see cref="ClusterReceptionist.Props"/>).
/// </para>
/// <para>
/// The receptionist forwards messages from the client to the associated <see cref="DistributedPubSubMediator"/>,
/// i.e. the client can send messages to any actor in the cluster that is registered in the
/// `DistributedPubSubMediator`. Messages from the client are wrapped in
/// <see cref="Distributed.Send"/>, <see cref="Distributed.SendToAll"/>
/// or <see cref="Distributed.Publish"/> with the semantics described in
/// <see cref="Distributed"/>.
/// </para>
/// <para>
/// Response messages from the destination actor are tunneled via the receptionist
/// to avoid inbound connections from other cluster nodes to the client, i.e.
/// the <see cref="Sender"/>, as seen by the destination actor, is not the client itself.
/// The <see cref="Sender"/> of the response messages, as seen by the client, is preserved
/// as the original sender, so the client can choose to send subsequent messages
/// directly to the actor in the cluster.
/// </para>
/// </summary>
// cluster node identifier is the host and port of the address; protocol and system is assumed to be the same
/// <summary>
/// Factory method for <see cref="ClusterReceptionist"/> <see cref="Actor.Props"/>.
/// </summary>
// Consistent hashing is used to ensure that the reply to GetContacts
// is the same from all nodes (most of the time) and it also
// load balances the client connections among the nodes in the cluster.
// using toStringWithAddress in case the client is local, normally it is not, and
// toStringWithAddress will use the remote address of the client
//TODO: this should be changed to some kind of _nodes.GetGreaterThan(addr)
/* ignore */
/// <summary>
/// Replies are tunneled via this actor, child of the receptionist, to avoid inbound connections from other cluster nodes to the client.
/// </summary>
/* ignore */ }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionistSettings.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterReceptionistSettings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Create settings from the default configuration "akka.cluster.client.receptionist".
/// </summary>
/// <summary>
/// Create settings from a configuration with the same layout as the default configuration "akka.cluster.client.receptionist".
/// </summary>
/// <summary>
/// Start the receptionist on members tagged with this role. All members are used if undefined.
/// </summary>
/// <summary>
/// The receptionist will send this number of contact points to the client.
/// </summary>
/// <summary>
/// The actor that tunnel response messages to the client will be stopped after this time of inactivity.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\Serialization\ClusterClientMessageSerializer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\Serialization\Proto\ClusterClientMessages.cs
// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs
//-----------------------------------------------------------------------
// <copyright file="DistributedMessages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSub.cs
//-----------------------------------------------------------------------
// <copyright file="DistributedPubSub.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Marker trait for remote messages with special serializer.
/// </summary>
/// <summary>
/// Extension that starts a <see cref="DistributedPubSubMediator"/> actor with settings 
/// defined in config section `akka.cluster.pub-sub`.
/// </summary>
/// <summary>
/// Returns true if this member is not tagged with the role configured for the mediator.
/// </summary>
/// <summary>
/// The <see cref="DistributedPubSubMediator"/> actor reference.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubMediator.cs
//-----------------------------------------------------------------------
// <copyright file="DistributedPubSubMediator.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <para>
/// This actor manages a registry of actor references and replicates
/// the entries to peer actors among all cluster nodes or a group of nodes
/// tagged with a specific role.
/// </para>
/// <para>
/// The <see cref="DistributedPubSubMediator"/> is supposed to be started on all nodes,
/// or all nodes with specified role, in the cluster. The mediator can be
/// started with the <see cref="DistributedPubSub"/> extension or as an ordinary actor.
/// </para>
/// <para>
/// Changes are only performed in the own part of the registry and those changes
/// are versioned. Deltas are disseminated in a scalable way to other nodes with
/// a gossip protocol. The registry is eventually consistent, i.e. changes are not
/// immediately visible at other nodes, but typically they will be fully replicated
/// to all other nodes after a few seconds.
/// </para>
/// <para>
/// You can send messages via the mediator on any node to registered actors on
/// any other node. There is three modes of message delivery.
/// </para>
/// <para>
/// 1. <see cref="Distributed.Send"/> -
/// The message will be delivered to one recipient with a matching path, if any such
/// exists in the registry. If several entries match the path the message will be sent
/// via the supplied `routingLogic` (default random) to one destination. The sender of the
/// message can specify that local affinity is preferred, i.e. the message is sent to an actor
/// in the same local actor system as the used mediator actor, if any such exists, otherwise
/// route to any other matching entry. A typical usage of this mode is private chat to one
/// other user in an instant messaging application. It can also be used for distributing
/// tasks to registered workers, like a cluster aware router where the routees dynamically
/// can register themselves.
/// </para>
/// <para>
/// 2. <see cref="Distributed.SendToAll"/> -
/// The message will be delivered to all recipients with a matching path. Actors with
/// the same path, without address information, can be registered on different nodes.
/// On each node there can only be one such actor, since the path is unique within one
/// local actor system. Typical usage of this mode is to broadcast messages to all replicas
/// with the same path, e.g. 3 actors on different nodes that all perform the same actions,
/// for redundancy.
/// </para>
/// <para>
/// 3. <see cref="Distributed.Publish"/> -
/// Actors may be registered to a named topic instead of path. This enables many subscribers
/// on each node. The message will be delivered to all subscribers of the topic. For
/// efficiency the message is sent over the wire only once per node (that has a matching topic),
/// and then delivered to all subscribers of the local topic representation. This is the
/// true pub/sub mode. A typical usage of this mode is a chat room in an instant messaging
/// application.
/// </para>
/// <para>
/// 4. <see cref="Distributed.Publish"/> with sendOneMessageToEachGroup -
/// Actors may be subscribed to a named topic with an optional property `group`.
/// If subscribing with a group name, each message published to a topic with the
/// `sendOneMessageToEachGroup` flag is delivered via the supplied `routingLogic`
/// (default random) to one actor within each subscribing group.
/// If all the subscribed actors have the same group name, then this works just like
/// <see cref="Distributed.Send"/> and all messages are delivered to one subscribe.
/// If all the subscribed actors have different group names, then this works like normal
/// <see cref="Distributed.Publish"/> and all messages are broadcast to all subscribers.
/// </para>
/// <para>
/// You register actors to the local mediator with <see cref="Distributed.Put"/> or
/// <see cref="Distributed.Subscribe"/>. `Put` is used together with `Send` and
/// `SendToAll` message delivery modes. The `ActorRef` in `Put` must belong to the same
/// local actor system as the mediator. `Subscribe` is used together with `Publish`.
/// Actors are automatically removed from the registry when they are terminated, or you
/// can explicitly remove entries with <see cref="Distributed.Remove"/> or
/// <see cref="Distributed.Unsubscribe"/>.
/// </para>
/// <para>
/// Successful `Subscribe` and `Unsubscribe` is acknowledged with
/// <see cref="Distributed.SubscribeAck"/> and <see cref="Distributed.UnsubscribeAck"/>
/// replies.
/// </para>
/// </summary>
//Start periodic gossip to random nodes in cluster
// each topic is managed by a child actor with the same name as the topic
// gossip chat starts with a Status message, containing the bucket versions of the other node
// reply from Status message in the gossip chat
// the Delta contains potential updates (newer versions) from the other node
// only accept deltas/buckets from known nodes, otherwise there is a risk of
// adding back entries when nodes are removed
// remove
/* ignore */ });
// missing entries are represented by version 0
// exceeded the maxDeltaElements, pick the elements with lowest versions
// '0' is the next char of '/'
//TODO: optimize into tree-aware key range [prefix, lastKey]
// the version is a timestamp because it is also used when pruning removed entries
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubSettings.cs
//-----------------------------------------------------------------------
// <copyright file="DistributedPubSubSettings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Creates cluster publish/subscribe settings from the default configuration `akka.cluster.pub-sub`.
/// </summary>
/// <summary>
/// Creates cluster publish subscribe settings from provided configuration with the same layout as `akka.cluster.pub-sub`.
/// </summary>
/// <summary>
/// The mediator starts on members tagged with this role. Uses all if undefined.
/// </summary>
/// <summary>
/// The routing logic to use for <see cref="DistributedPubSubMediator.Send"/>.
/// </summary>
/// <summary>
/// How often the <see cref="DistributedPubSubMediator"/> should send out gossip information
/// </summary>
/// <summary>
/// Removed entries are pruned after this duration.
/// </summary>
/// <summary>
/// Maximum number of elements to transfer in one message when synchronizing the registries. 
/// Next chunk will be transferred in next round of gossip.
/// </summary>
/// <summary>
/// Creates a new instance of the <see cref="DistributedPubSubSettings"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\TopicMessages.cs
//-----------------------------------------------------------------------
// <copyright file="TopicMessages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Only for testing purposes, to poll/await replication
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\Topics.cs
//-----------------------------------------------------------------------
// <copyright file="Topics.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <para>
/// Mediator uses <see cref="Router"/> to send messages to multiple destinations, Router in general
/// unwraps messages from <see cref="RouterEnvelope"/> and sends the contents to <see cref="Routee"/>s.
/// </para>
/// <para>
/// Using mediator services should not have an undesired effect of unwrapping messages
/// out of <see cref="RouterEnvelope"/>. For this reason user messages are wrapped in
/// <see cref="MediatorRouterEnvelope"/> which will be unwrapped by the <see cref="Router"/> leaving original
/// user message.
/// </para>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\DistributedPubSubMessageSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="DistributedPubSubMessageSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs
// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSingletonManager.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Thrown when a consistent state can't be determined within the defined retry limits.
/// Eventually it will reach a stable state and can continue, and that is simplified 
/// by starting over with a clean state. Parent supervisor should typically restart the actor, i.e. default decision.
/// </summary>
/// <summary>
/// <para>
/// Manages singleton actor instance among all cluster nodes or a group of nodes tagged with a specific role.
/// At most one singleton instance is running at any point in time.
/// </para>
/// <para>
/// The ClusterSingletonManager is supposed to be started on all nodes, or all nodes with specified role, 
/// in the cluster with <see cref="ActorSystem.ActorOf"/>. The actual singleton is started on the oldest node 
/// by creating a child actor from the supplied `singletonProps`.
/// </para>
/// <para>
/// The singleton actor is always running on the oldest member with specified role. The oldest member is determined 
/// by <see cref="Member.IsOlderThan"/>. This can change when removing members. A graceful hand over can normally  
/// be performed when current oldest node is leaving the cluster. Be aware that there is a short time period when 
/// there is no active singleton during the hand-over process.
/// </para>
/// <para>
/// The cluster failure detector will notice when oldest node becomes unreachable due to things like CLR crash, 
/// hard shut down, or network failure. When the crashed node has been removed (via down) from the cluster then 
/// a new oldest node will take over and a new singleton actor is created.For these failure scenarios there 
/// will not be a graceful hand-over, but more than one active singletons is prevented by all reasonable means.
/// Some corner cases are eventually resolved by configurable timeouts.
/// </para>
/// <para>
/// You access the singleton actor with <see cref="ClusterSingletonProxy"/>. Alternatively the singleton actor may 
/// broadcast its existence when it is started.
/// </para>
/// <para>
/// Use factory method <see cref="ClusterSingletonManager.Props"/> to create the <see cref="Actor.Props"/> for the actor.
/// </para>
/// </summary>
/// <summary>
/// Returns default HOCON configuration for the cluster singleton.
/// </summary>
/// <summary>
/// Creates props for the current cluster singleton manager using <see cref="PoisonPill"/> 
/// as the default termination message.
/// </summary>
/// <param name="singletonProps"><see cref="Actor.Props"/> of the singleton actor instance.</param>
/// <param name="settings">Cluster singleton manager settings.</param>
/// <returns></returns>
/// <summary>
/// Creates props for the current cluster singleton manager.
/// </summary>
/// <param name="singletonProps"><see cref="Actor.Props"/> of the singleton actor instance.</param>
/// <param name="terminationMessage">
/// When handing over to a new oldest node this <paramref name="terminationMessage"/> is sent to the singleton actor 
/// to tell it to finish its work, close resources, and stop. The hand-over to the new oldest node 
/// is completed when the singleton actor is terminated. Note that <see cref="PoisonPill"/> is a 
/// perfectly fine <paramref name="terminationMessage"/> if you only need to stop the actor.
/// </param>
/// <param name="settings">Cluster singleton manager settings.</param>
// Previous GetNext request delivered event and new GetNext is to be sent
// started when when self member is Up
// keep track of previously removed members
// subscribe to cluster changes, re-subscribe when restart
// defer subscription to avoid some jitter when
// starting/joining several nodes at the same time
// transition when OldestChanged
// confirmation that the hand-over process has started
// can't send HandOverToMe, previousOldest unknown for new node (or restart)
// previous oldest might be down or removed, so no TakeOverFromMe message is received
// send TakeOver request in case the new oldest doesn't know previous oldest
// new oldest will initiate the hand-over
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManagerSettings.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSingletonManagerSettings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Creates a new instance of the <see cref="ClusterSingletonManagerSettings"/>.
/// </summary>
/// <param name="singletonName">The actor name of the child singleton actor.</param>
/// <param name="role">
/// Singleton among the nodes tagged with specified role. If the role is not specified 
/// it's a singleton among all nodes in the cluster.
/// </param>
/// <param name="removalMargin">
/// Margin until the singleton instance that belonged to a downed/removed partition is 
/// created in surviving partition. The purpose of  this margin is that in case of 
/// a network partition the singleton actors  in the non-surviving partitions must 
/// be stopped before corresponding actors are started somewhere else. 
/// This is especially important for persistent actors.
/// </param>
/// <param name="handOverRetryInterval">
/// When a node is becoming oldest it sends hand-over
/// request to previous oldest, that might be leaving the cluster. This is
/// retried with this interval until the previous oldest confirms that the hand
/// over has started or the previous oldest member is removed from the cluster
/// (+ <paramref name="removalMargin"/>).
/// </param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxy.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSingletonProxy.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <para>
/// The <see cref="ClusterSingletonProxy"/> works together with the <see cref="ClusterSingletonManager"/> to provide a
/// distributed proxy to the singleton actor.
/// </para>
/// <para>
/// The proxy can be started on every node where the singleton needs to be reached and used as if it were the singleton
/// itself. It will then act as a router to the currently running singleton instance. If the singleton is not currently
/// available, e.g., during hand off or startup, the proxy will buffer the messages sent to the singleton and then deliver
/// them when the singleton is finally available. The size of the buffer is configurable and it can be disabled by using
/// a buffer size of 0. When the buffer is full old messages will be dropped when new messages are sent via the proxy.
/// </para>
/// <para>
/// The proxy works by keeping track of the oldest cluster member. When a new oldest member is identified, e.g. because
/// the older one left the cluster, or at startup, the proxy will try to identify the singleton on the oldest member by
/// periodically sending an <see cref="Identify"/> message until the singleton responds with its <see cref="ActorIdentity"/>.
/// </para>
/// <remarks>
/// Note that this is a best effort implementation: messages can always be lost due to the distributed nature of the actors involved.
/// </remarks>
/// </summary>
/// <summary>
/// Returns default HOCON configuration for the cluster singleton.
/// </summary>
/// <summary>
/// Faactory method for <see cref="ClusterSingletonProxy"/> <see cref="Actor.Props"/>.
/// </summary>
/// <param name="singletonManagerPath">
/// The logical path of the singleton manager, e.g. `/user/singletonManager`, 
/// which ends with the name you defined in `actorOf` when creating the <see cref="ClusterSingletonManager"/>.
/// </param>
/// <param name="settings">Cluster singleton proxy settings.</param>
// queue seems to fit better
// if the new singleton is defined, deliver all buffered messages
// buffering mode, identification of new will start when old node is removed
//TODO: this should be TimeSpan.Zero
// if the head has changed, I need to find the new singleton
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxySettings.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSingletonProxySettings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Creates new instance of the <see cref="ClusterSingletonProxySettings"/>.
/// </summary>
/// <param name="singletonName">The actor name of the singleton actor that is started by the <see cref="ClusterSingletonManager"/>.</param>
/// <param name="role">The role of the cluster nodes where the singleton can be deployed. If None, then any node will do.</param>
/// <param name="singletonIdentificationInterval">Interval at which the proxy will try to resolve the singleton instance.</param>
/// <param name="bufferSize">
/// If the location of the singleton is unknown the proxy will buffer this number of messages and deliver them
/// when the singleton is identified.When the buffer is full old messages will be droppedwhen new messages 
/// are sent viea the proxy.Use 0 to disable buffering, i.e.messages will be dropped immediately if the location 
/// of the singleton is unknown.
/// </param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\MemberAgeOrdering.cs
//-----------------------------------------------------------------------
// <copyright file="MemberAgeOrdering.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\OldestChangedBuffer.cs
//-----------------------------------------------------------------------
// <copyright file="OldestChangedBuffer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Notifications of member events that track oldest member is tunneled
/// via this actor (child of ClusterSingletonManager) to be able to deliver
/// one change at a time. Avoiding simultaneous changes simplifies
/// the process in ClusterSingletonManager. ClusterSingletonManager requests
/// next event with <see cref="GetNext"/> when it is ready for it. Only one outstanding
/// <see cref="GetNext"/> request is allowed. Incoming events are buffered and delivered
/// upon <see cref="GetNext"/> request.
/// </summary>
// todo: fix neq comparison
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\Serialization\ClusterSingletonMessageSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSingletonMessageSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests\ClusterClient\ClusterClientSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterClientSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//[MultiNodeFact(Skip = "TODO")]
//[MultiNodeFact(Skip = "TODO")]
//[MultiNodeFact(Skip = "TODO")]
// note that "hi" was sent to 2 "serviceB"
// strange, barriers fail without this sleep
//[MultiNodeFact(Skip = "TODO")]
// shutdown all but the one that the client is connected to
// network partition between client and server
// if we would use remote watch the failure detector would trigger and
// connection quarantined
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests\PublishSubscribe\DistributedPubSubMediatorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="DistributedPubSubMediatorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//[MultiNodeFact(Skip = "TODO")]
//[MultiNodeFact(Skip = "TODO")]
// send to actor at the same node
// send to an actor on another node
//[MultiNodeFact(Skip = "TODO")]
//[MultiNodeFact(Skip = "TODO")]
//[MultiNodeFact(Skip = "TODO")]
//[MultiNodeFact(Skip = "TODO")]
//[MultiNodeFact(Skip = "TODO")]
// one topic on two nodes
//[MultiNodeFact(Skip = "TODO")]
// after a while the subscriptions are replicated
//[MultiNodeFact(Skip = "TODO")]
//[MultiNodeFact(Skip = "TODO")]
// each group receive only one message
//[MultiNodeFact(Skip = "TODO")]
// this test is configured with max-delta-elements = 500
//[MultiNodeFact(Skip = "TODO")]
// third had 2 entries u5 and u11, and those should be removed everywhere
//[MultiNodeFact(Skip = "TODO")]
// topics will eventually be replicated
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests\Singleton\ClusterSingletonManagerChaosSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSingletonManagerChaosSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//[MultiNodeFact(Skip = "TODO")]
// mute logging of deadLetters during shutdown of systems
/**
/*controller*/);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests\Singleton\ClusterSingletonManagerLeaveSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSingletonManagerLeaveSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests\Singleton\ClusterSingletonManagerSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSingletonManagerSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/**
// this is used from inside actor construction, i.e. other thread, and must therefore not call `node(controller`
// send message to the proxy
// make sure that the proxy has received membership changes
// and points to the current singleton
// send a real message
// expect a message on the oldest node
// make sure it's not terminated, which would be wrong
//[MultiNodeFact()]
// watch that it is not terminated, which would indicate misbehaviour
// join the observer node as well, which should not influence since it doesn't have the "worker" role
//[MultiNodeFact(Skip = "TODO")]
//[MultiNodeFact(Skip = "TODO")]
//[MultiNodeFact(Skip = "TODO")]
// mute logging of deadLetters during shutdown of systems
//[MultiNodeFact(Skip = "TODO")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests\Singleton\ClusterSingletonManagerStartupSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSingletonManagerStartupSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// the singleton instance is expected to start "instantly"
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.AutoFac\AutoFacDependencyResolver.cs
//-----------------------------------------------------------------------
// <copyright file="AutoFacDependencyResolver.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Provides services to the <see cref="ActorSystem "/> extension system
/// used to create actors using the AutoFac IoC container.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AutoFacDependencyResolver"/> class.
/// </summary>
/// <param name="container">The container used to resolve references</param>
/// <param name="system">The actor system to plug into</param>
/// <exception cref="ArgumentNullException">
/// Either the <paramref name="container"/> or the <paramref name="system"/> was null.
/// </exception>
/// <summary>
/// Retrieves an actor's type with the specified name
/// </summary>
/// <param name="actorName">The name of the actor to retrieve</param>
/// <returns>The type with the specified actor name</returns>
/// <summary>
/// Creates a delegate factory used to create actors based on their type
/// </summary>
/// <param name="actorType">The type of actor that the factory builds</param>
/// <returns>A delegate factory used to create actors</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <typeparamref name="TActor"/>
/// </summary>
/// <typeparam name="TActor">The type of actor the configuration is based</typeparam>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <paramref name="actorType"/> 
/// </summary>
/// <param name="actorType">The <see cref="Type"/> of actor the configuration is based</param>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Signals the container to release it's reference to the actor.
/// </summary>
/// <param name="actor">The actor to remove from the container</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.AutoFac\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.AutoFac.Tests\AutoFacDependencyResolverSpecs.cs
//-----------------------------------------------------------------------
// <copyright file="AutoFacDependencyResolverSpecs.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.AutoFac.Tests\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.CastleWindsor\WindsorDependencyResolver.cs
//-----------------------------------------------------------------------
// <copyright file="WindsorDependencyResolver.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Provides services to the <see cref="ActorSystem "/> extension system
/// used to create actors using the CastleWindsor IoC container.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="WindsorDependencyResolver"/> class.
/// </summary>
/// <param name="container">The container used to resolve references</param>
/// <param name="system">The actor system to plug into</param>
/// <exception cref="ArgumentNullException">
/// Either the <paramref name="container"/> or the <paramref name="system"/> was null.
/// </exception>
/// <summary>
/// Retrieves an actor's type with the specified name
/// </summary>
/// <param name="actorName">The name of the actor to retrieve</param>
/// <returns>The type with the specified actor name</returns>
/// <summary>
/// Creates a delegate factory used to create actors based on their type
/// </summary>
/// <param name="actorType">The type of actor that the factory builds</param>
/// <returns>A delegate factory used to create actors</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <typeparamref name="TActor"/>
/// </summary>
/// <typeparam name="TActor">The type of actor the configuration is based</typeparam>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <paramref name="actorType"/> 
/// </summary>
/// <param name="actorType">The <see cref="Type"/> of actor the configuration is based</param>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Signals the container to release it's reference to the actor.
/// </summary>
/// <param name="actor">The actor to remove from the container</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.CastleWindsor\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.CastleWindsor.Tests\CastleWindsorResolverSpec.cs
//-----------------------------------------------------------------------
// <copyright file="CastleWindsorResolverSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.CastleWindsor.Tests\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Core\DIActorContextAdapter.cs
//-----------------------------------------------------------------------
// <copyright file="DIActorContextAdapter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Core\DIActorProducer.cs
//-----------------------------------------------------------------------
// <copyright file="DIActorProducer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Dependency Injection Backed IndirectActorProducer
/// </summary>
/// <summary>
/// The System.Type of the Actor specified in the constructor parameter actorName
/// </summary>
/// <summary>
/// Creates an instance of the Actor based on the Type specified in the constructor parameter actorName
/// </summary>
/// <returns></returns>
/// <summary>
/// This method is used to signal the container that it can release it's reference to the actor.
/// </summary>
/// <param name="actor">The actor to remove from the container</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Core\DIActorSystemAdapter.cs
//-----------------------------------------------------------------------
// <copyright file="DIActorSystemAdapter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Core\DIExt.cs
//-----------------------------------------------------------------------
// <copyright file="DIExt.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Dependency Injection Extension used by the Actor System to Create the Prop configuration of DIActorProducer
/// </summary>
/// <summary>
/// Used to initialize the DIExtensionProvider
/// </summary>
/// <param name="dependencyResolver"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Core\DIExtension.cs
//-----------------------------------------------------------------------
// <copyright file="DIExtension.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// ExtensionIdProvider for the DIExt. Used to Create an instance of DIExt which implements IExtension
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Core\Extensions.cs
//-----------------------------------------------------------------------
// <copyright file="Extensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Extension methods used to simplify working with the Akka.DI.Core
/// </summary>
/// <summary>
/// Method used to register the IDependencyResolver to the ActorSystem
/// </summary>
/// <param name="system">Instance of the ActorSystem</param>
/// <param name="dependencyResolver">Concrete Instance of IDependencyResolver i.e. Akka.DI.AutoFac.AutoFacDependencyResolver</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Core\IDependencyResolver.cs
//-----------------------------------------------------------------------
// <copyright file="IDependencyResolver.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Defines services used by the <see cref="ActorSystem "/> extension system to create actors
/// </summary>
/// <summary>
/// Retrieves an actor's type with the specified name
/// </summary>
/// <param name="actorName">The name of the actor to retrieve</param>
/// <returns>The type with the specified actor name</returns>
/// <summary>
/// Creates a delegate factory used to create actors based on their type
/// </summary>
/// <param name="actorType">The type of actor that the factory builds</param>
/// <returns>A delegate factory used to create actors</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <typeparamref name="TActor"/>
/// </summary>
/// <typeparam name="TActor">The type of actor the configuration is based</typeparam>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <paramref name="actorType"/> 
/// </summary>
/// <param name="actorType">The <see cref="Type"/> of actor the configuration is based</param>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Signals the container to release it's reference to the actor.
/// </summary>
/// <param name="actor">The actor to remove from the container</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Core\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Ninject\NinjectDependencyResolver.cs
//-----------------------------------------------------------------------
// <copyright file="NinjectDependencyResolver.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Provides services to the <see cref="ActorSystem "/> extension system
/// used to create actors using the Ninject IoC container.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NinjectDependencyResolver"/> class.
/// </summary>
/// <param name="container">The container used to resolve references</param>
/// <param name="system">The actor system to plug into</param>
/// <exception cref="ArgumentNullException">
/// Either the <paramref name="container"/> or the <paramref name="system"/> was null.
/// </exception>
/// <summary>
/// Retrieves an actor's type with the specified name
/// </summary>
/// <param name="actorName">The name of the actor to retrieve</param>
/// <returns>The type with the specified actor name</returns>
/// <summary>
/// Creates a delegate factory used to create actors based on their type
/// </summary>
/// <param name="actorType">The type of actor that the factory builds</param>
/// <returns>A delegate factory used to create actors</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <typeparamref name="TActor"/>
/// </summary>
/// <typeparam name="TActor">The type of actor the configuration is based</typeparam>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <paramref name="actorType"/> 
/// </summary>
/// <param name="actorType">The <see cref="Type"/> of actor the configuration is based</param>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Signals the container to release it's reference to the actor.
/// </summary>
/// <param name="actor">The actor to remove from the container</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Ninject\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Ninject.Tests\NinjectDiSpec.cs
//-----------------------------------------------------------------------
// <copyright file="NinjectDiSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Ninject.Tests\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.StructureMap\StructureMapDependencyResolver.cs
//-----------------------------------------------------------------------
// <copyright file="StructureMapDependencyResolver.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Provides services to the <see cref="ActorSystem "/> extension system
/// used to create actors using the StructureMap IoC container.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="StructureMapDependencyResolver"/> class.
/// </summary>
/// <param name="container">The container used to resolve references</param>
/// <param name="system">The actor system to plug into</param>
/// <exception cref="ArgumentNullException">
/// Either the <paramref name="container"/> or the <paramref name="system"/> was null.
/// </exception>
/// <summary>
/// Retrieves an actor's type with the specified name
/// </summary>
/// <param name="actorName">The name of the actor to retrieve</param>
/// <returns>The type with the specified actor name</returns>
/// <summary>
/// Creates a delegate factory used to create actors based on their type
/// </summary>
/// <param name="actorType">The type of actor that the factory builds</param>
/// <returns>A delegate factory used to create actors</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <typeparam name="TActor"/>
/// </summary>
/// <typeparam name="TActor">The type of actor the configuration is based</typeparam>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <paramref name="actorType"/> 
/// </summary>
/// <param name="actorType">The <see cref="Type"/> of actor the configuration is based</param>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Signals the container to release it's reference to the actor.
/// </summary>
/// <param name="actor">The actor to remove from the container</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.StructureMap\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.StructureMap.Tests\StructureMapResolverSpec.cs
//-----------------------------------------------------------------------
// <copyright file="StructureMapResolverSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.StructureMap.Tests\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.TestKit\DiResolverSpec.cs
//-----------------------------------------------------------------------
// <copyright file="DiResolverSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once DoNotCallOverridableMethodsInConstructor
/// <summary>
/// Creates and configures a brand new <see cref="IDependencyResolver"/>.
/// </summary>
/// <returns>A new <see cref="IDependencyResolver"/> configured using the provided DI generator.</returns>
/// <summary>
/// Create a new instance of the Dependency Injection container that we're creating.
/// </summary>
/// <returns>A new DI container instance.</returns>
/// <summary>
/// Create a new <see cref="IDependencyResolver"/> instance that we're going to use
/// in the context of all of our tests.
/// </summary>
/// <returns>An <see cref="IDependencyResolver"/> instance.</returns>
/// <summary>
/// Create a binding for type <typeparam name="T"/> on the provided DI container.
/// </summary>
/// <typeparam name="T">The type we're binding onto the DI container.</typeparam>
/// <param name="diContainer">The DI container.</param>
/// <param name="generator">A generator function that yields new objects of type <typeparam name="T"/>.</param>
/// <summary>
/// Create a binding for type <typeparam name="T"/> on the provided DI container.
/// 
/// Used for DI frameworks that require the DI target to be registered as well
/// as the injected components.
/// </summary>
/// <typeparam name="T">The type we're binding onto the DI container.</typeparam>
/// <param name="diContainer">The DI container.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.TestKit\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Unity\UnityDependencyResolver.cs
//-----------------------------------------------------------------------
// <copyright file="UnityDependencyResolver.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Provides services to the <see cref="ActorSystem "/> extension system
/// used to create actors using the Unity IoC container.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="UnityDependencyResolver"/> class.
/// </summary>
/// <param name="container">The container used to resolve references</param>
/// <param name="system">The actor system to plug into</param>
/// <exception cref="ArgumentNullException">
/// Either the <paramref name="container"/> or the <paramref name="system"/> was null.
/// </exception>
/// <summary>
/// Retrieves an actor's type with the specified name
/// </summary>
/// <param name="actorName">The name of the actor to retrieve</param>
/// <returns>The type with the specified actor name</returns>
/// <summary>
/// Creates a delegate factory used to create actors based on their type
/// </summary>
/// <param name="actorType">The type of actor that the factory builds</param>
/// <returns>A delegate factory used to create actors</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <typeparam name="TActor"/>
/// </summary>
/// <typeparam name="TActor">The type of actor the configuration is based</typeparam>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Used to register the configuration for an actor of the specified type <paramref name="actorType"/> 
/// </summary>
/// <param name="actorType">The <see cref="Type"/> of actor the configuration is based</param>
/// <returns>The configuration object for the given actor type</returns>
/// <summary>
/// Signals the container to release it's reference to the actor.
/// </summary>
/// <param name="actor">The actor to remove from the container</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Unity\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Unity.Tests\UnityDependencyResolverSpec.cs
//-----------------------------------------------------------------------
// <copyright file="UnityDependencyResolverSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\dependencyInjection\Akka.DI.Unity.Tests\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\loggers\Akka.Logger.log4net\Log4NetLogger.cs
//-----------------------------------------------------------------------
// <copyright file="Log4NetLogger.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class is used to receive log events and sends them to
/// the configured log4net logger. The following log events are
/// recognized: <see cref="Debug"/>, <see cref="Info"/>,
/// <see cref="Warning"/> and <see cref="Error"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Log4NetLogger"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\loggers\Akka.Logger.log4net\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\loggers\Akka.Logger.NLog\NLogLogger.cs
//-----------------------------------------------------------------------
// <copyright file="NLogLogger.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class is used to receive log events and sends them to
/// the configured NLog logger. The following log events are
/// recognized: <see cref="Debug"/>, <see cref="Info"/>,
/// <see cref="Warning"/> and <see cref="Error"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NLogLogger"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\loggers\Akka.Logger.NLog\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\loggers\Akka.Logger.Serilog\MessageTemplateCache.cs
//-----------------------------------------------------------------------
// <copyright file="MessageTemplateCache.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Taken directly from Serilog as the cache was internal.
/// https://github.com/serilog/serilog/blob/master/src/Serilog/Core/Pipeline/MessageTemplateCache.cs
/// </summary>
// Exceeding MaxCacheItems is *not* the sunny day scenario; all we're doing here is preventing out-of-memory
// conditions when the library is used incorrectly. Correct use (templates, rather than
// direct message strings) should barely, if ever, overflow this cache.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\loggers\Akka.Logger.Serilog\SerilogLogger.cs
//-----------------------------------------------------------------------
// <copyright file="SerilogLogger.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class is used to receive log events and sends them to
/// the configured Serilog logger. The following log events are
/// recognized: <see cref="Debug"/>, <see cref="Info"/>,
/// <see cref="Warning"/> and <see cref="Error"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="SerilogLogger"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\loggers\Akka.Logger.Serilog\SerilogLogMessageFormatter.cs
//-----------------------------------------------------------------------
// <copyright file="SerilogLogMessageFormatter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains methods used to convert Serilog templated messages
/// into normal text messages.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="SerilogLogMessageFormatter"/> class.
/// </summary>
/// <summary>
/// Converts the specified template string to a text string using the specified
/// token array to match replacements.
/// </summary>
/// <param name="format">The template string used in the conversion.</param>
/// <param name="args">The array that contains values to replace in the template.</param>
/// <returns>
/// A text string where the template placeholders have been replaced with
/// their corresponding values.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\loggers\Akka.Logger.Serilog\Event\Serilog\SerilogLogMessageFormatter.cs
//-----------------------------------------------------------------------
// <copyright file="SerilogLogMessageFormatter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once CheckNamespace
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\loggers\Akka.Logger.Serilog\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\loggers\Akka.Logger.slf4net\Slf4NetLogger.cs
//-----------------------------------------------------------------------
// <copyright file="Slf4jLogger.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class is used to receive log events and sends them to
/// the configured slf4net logger. The following log events are
/// recognized: <see cref="Debug"/>, <see cref="Info"/>,
/// <see cref="Warning"/> and <see cref="Error"/>.
/// </summary>
/// <summary>
/// Receives an event and logs it to the slf4net logger.
/// </summary>
/// <param name="message">The event sent to the logger.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\loggers\Akka.Logger.slf4net\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\InternalExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="InternalExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Settings.cs
//-----------------------------------------------------------------------
// <copyright file="Settings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Configuration settings representation targeting Sql Server journal actor.
/// </summary>
/// <summary>
/// Connection string used to access a persistent SQL Server instance.
/// </summary>
/// <summary>
/// Name of the connection string stored in &lt;connectionStrings&gt; section of *.config file.
/// </summary>
/// <summary>
/// Connection timeout for SQL Server related operations.
/// </summary>
/// <summary>
/// Schema name, where table corresponding to event journal is placed.
/// </summary>
/// <summary>
/// Name of the table corresponding to event journal.
/// </summary>
/// <summary>
/// Fully qualified type name for <see cref="ITimestampProvider"/> used to generate journal timestamps.
/// </summary>
/// <summary>
/// Configuration settings representation targeting Sql Server snapshot store actor.
/// </summary>
/// <summary>
/// Connection string used to access a persistent SQL Server instance.
/// </summary>
/// <summary>
/// Name of the connection string stored in &lt;connectionStrings&gt; section of *.config file.
/// </summary>
/// <summary>
/// Connection timeout for SQL Server related operations.
/// </summary>
/// <summary>
/// Schema name, where table corresponding to snapshot store is placed.
/// </summary>
/// <summary>
/// Name of the table corresponding to snapshot store.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Journal\ITimestampProvider.cs
//-----------------------------------------------------------------------
// <copyright file="ITimestampProvider.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Interface responsible for generation of timestamps for persisted messages in SQL-based journals.
/// </summary>
/// <summary>
/// Generates timestamp for provided <see cref="IPersistentRepresentation"/> message.
/// </summary>
/// <summary>
/// Default implementation of timestamp provider. Returns <see cref="DateTime.UtcNow"/> for any message.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Journal\JournalDbEngine.cs
//-----------------------------------------------------------------------
// <copyright file="JournalDbEngine.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Class used for storing intermediate result of the <see cref="IPersistentRepresentation"/>
/// in form which is ready to be stored directly in the SQL table.
/// </summary>
/// <summary>
/// Class used to abstract SQL persistence capabilities for concrete implementation of actor journal.
/// </summary>
/// <summary>
/// Settings applied to journal mapped from HOCON config file.
/// </summary>
/// <summary>
/// Timestamp provider used for generation of timestamps for incoming persistent messages.
/// </summary>
/// <summary>
/// Returns a HOCON config path to associated journal.
/// </summary>
/// <summary>
/// System logger.
/// </summary>
/// <summary>
/// Initializes a database connection.
/// </summary>
/// <summary>
/// Copies values from entities to database command.
/// </summary>
/// <param name="sqlCommand"></param>
/// <param name="entry"></param>
/// <summary>
/// Used for generating SQL commands for journal-related database operations.
/// </summary>
/// <summary>
/// Used for mapping results returned from database into <see cref="IPersistentRepresentation"/> objects.
/// </summary>
/// <summary>
/// Closes database connection if exists.
/// </summary>
/// <summary>
/// Performs
/// </summary>
/// <summary>
/// Asynchronously replays all requested messages related to provided <paramref name="persistenceId"/>,
/// using provided sequence ranges (inclusive) with <paramref name="max"/> number of messages replayed
/// (counting from the beginning). Replay callback is invoked for each replayed message.
/// </summary>
/// <param name="persistenceId">Identifier of persistent messages stream to be replayed.</param>
/// <param name="fromSequenceNr">Lower inclusive sequence number bound. Unbound by default.</param>
/// <param name="toSequenceNr">Upper inclusive sequence number bound. Unbound by default.</param>
/// <param name="max">Maximum number of messages to be replayed. Unbound by default.</param>
/// <param name="replayCallback">Action invoked for each replayed message.</param>
/// <summary>
/// Asynchronously reads a highest sequence number of the event stream related with provided <paramref name="persistenceId"/>.
/// </summary>
/// <summary>
/// Asynchronously writes all persistent <paramref name="messages"/> inside SQL Server database.
/// 
/// Specific table used for message persistence may be defined through configuration within 
/// 'akka.persistence.journal.sql-server' scope with 'schema-name' and 'table-name' keys.
/// </summary>
/// <summary>
/// Asynchronously deletes all persisted messages identified by provided <paramref name="persistenceId"/>
/// up to provided message sequence number (inclusive). If <paramref name="isPermanent"/> flag is cleared,
/// messages will still reside inside database, but will be logically counted as deleted.
/// </summary>
/// <summary>
/// Returns connection string from either HOCON configuration or &lt;connectionStrings&gt; section of app.config.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Journal\QueryBuilder.cs
//-----------------------------------------------------------------------
// <copyright file="QueryBuilder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// SQL query builder used for generating queries required to perform journal's tasks.
/// </summary>
/// <summary>
/// Returns query which should return events filtered accordingly to provided set of <paramref name="hints"/>.
/// </summary>
/// <summary>
/// Returns query which should return a frame of messages filtered accordingly to provided parameters.
/// </summary>
/// <summary>
/// Returns query returning single number considered as the highest sequence number in current journal.
/// </summary>
/// <summary>
/// Returns a non-query command used to insert collection of <paramref name="messages"/> in journal table.
/// </summary>
/// <summary>
/// Depending on <paramref name="permanent"/> flag this method may return either UPDATE or DELETE statement
/// used to alter IsDeleted field or delete rows permanently.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Journal\QueryMapper.cs
//-----------------------------------------------------------------------
// <copyright file="QueryMapper.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Mapper used for generating persistent representations based on SQL query results.
/// </summary>
/// <summary>
/// Takes a current row from the SQL data reader and produces a persistent representation object in result.
/// It's not supposed to move reader's cursor in any way.
/// </summary>
/// <summary>
/// Default implementation of <see cref="IJournalQueryMapper"/> used for mapping data 
/// returned from ADO.NET data readers back to <see cref="IPersistentRepresentation"/> messages.
/// </summary>
// timestamp is SQL-journal specific field, it's not a part of casual Persistent instance  
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Journal\SqlJournal.cs
//-----------------------------------------------------------------------
// <copyright file="SqlJournal.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Queries\Hints.cs
//-----------------------------------------------------------------------
// <copyright file="Hints.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Returns a hint that expects a reply with events with matching manifest.
/// </summary>
/// <summary>
/// Returns a hint that expects a reply with events from provided set of persistence ids.
/// </summary>
/// <summary>
/// Returns a hint that expects a reply with events, that have timestamp value before provided date.
/// </summary>
/// <summary>
/// Returns a hint that expects a reply with events, that have timestamp value after or equal provided date.
/// </summary>
/// <summary>
/// Returns a hint that expects a reply with events, that have timestamp from between provided range of values (left side inclusive).
/// </summary>
/// <summary>
/// Hint for the SQL journal used to filter journal entries returned in the response based on the manifest.
/// </summary>
/// <summary>
/// Hint for the SQL journal used to filter journal entries returned in the response based on set of perisistence ids provided.
/// </summary>
/// <summary>
/// Hint for the SQL journal used to filter journal entries returned in the response based on their timestamp range.
/// Desired behavior of timestamp range is &lt;from, to) - left side inclusive, right side exclusive.
/// Timestamp is generated by <see cref="JournalDbEngine.GenerateTimestamp"/> method, which may be overloaded.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Queries\Query.cs
//-----------------------------------------------------------------------
// <copyright file="Query.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Message send to particular SQL-based journal <see cref="IActorRef"/>. It may be parametrized 
/// using set of hints. SQL-based journal will respond with collection of <see cref="QueryResponse"/> 
/// messages followed by <see cref="QuerySuccess"/> when  request succeed or the 
/// <see cref="QueryFailure"/> message when request has failed for some reason.
/// 
/// Since SQL journals can store events in linearized fashion, they are able to provide deterministic 
/// set of events not based on any partition key. Therefore query request don't need to contain 
/// partition id of the persistent actor.
/// </summary>
/// <summary>
/// Message send back from SQL-based journal to <see cref="Query"/> sender, 
/// when the query execution has been completed and result is returned.
/// </summary>
/// <summary>
/// Message send back from SQL-based journal, when <see cref="Query"/> has been successfully responded.
/// </summary>
/// <summary>
/// Message send back from SQL-based journal to <see cref="Query"/> sender, when the query execution has failed.
/// </summary>
/// <summary>
/// Identifier of the correlated <see cref="Query"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Snapshot\QueryBuilder.cs
//-----------------------------------------------------------------------
// <copyright file="QueryBuilder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Flattened and serialized snapshot object used as intermediate representation 
/// before saving snapshot with metadata inside SQL Server database.
/// </summary>
/// <summary>
/// Persistence identifier of persistent actor, current snapshot relates to.
/// </summary>
/// <summary>
/// Sequence number used to identify snapshot in it's persistent actor scope.
/// </summary>
/// <summary>
/// Timestamp used to specify date, when the snapshot has been made.
/// </summary>
/// <summary>
/// Stringified fully qualified CLR type name of the serialized object.
/// </summary>
/// <summary>
/// Serialized object data.
/// </summary>
/// <summary>
/// Query builder used for prepare SQL commands used for snapshot store persistence operations.
/// </summary>
/// <summary>
/// Deletes a single snapshot identified by it's persistent actor's <paramref name="persistenceId"/>, 
/// <paramref name="sequenceNr"/> and <paramref name="timestamp"/>.
/// </summary>
/// <summary>
/// Deletes all snapshot matching persistent actor's <paramref name="persistenceId"/> as well as 
/// upper (inclusive) bounds of the both <paramref name="maxSequenceNr"/> and <paramref name="maxTimestamp"/>.
/// </summary>
/// <summary>
/// Inserts a single snapshot represented by provided <see cref="SnapshotEntry"/> instance.
/// </summary>
/// <summary>
/// Selects a single snapshot identified by persistent actor's <paramref name="persistenceId"/>,
/// matching upper (inclusive) bounds of both <paramref name="maxSequenceNr"/> and <paramref name="maxTimestamp"/>.
/// In case, when more than one snapshot matches specified criteria, one with the highest sequence number will be selected.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Snapshot\QueryMapper.cs
//-----------------------------------------------------------------------
// <copyright file="QueryMapper.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Mapper used to map results of snapshot SELECT queries into valid snapshot objects.
/// </summary>
/// <summary>
/// Map data found under current cursor pointed by SQL data reader into <see cref="SelectedSnapshot"/> instance.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common\Snapshot\SqlSnapshotStore.cs
//-----------------------------------------------------------------------
// <copyright file="SqlSnapshotStore.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Abstract snapshot store implementation, customized to work with SQL-based persistence providers.
/// </summary>
/// <summary>
/// List of cancellation tokens for all pending asynchronous database operations.
/// </summary>
/// <summary>
/// Returns a new instance of database connection.
/// </summary>
/// <summary>
/// Returns a new instance of database connection.
/// </summary>
/// <summary>
/// Gets settings for the current snapshot store.
/// </summary>
/// <summary>
/// Query builder used to convert snapshot store related operations into corresponding SQL queries.
/// </summary>
/// <summary>
/// Query mapper used to map SQL query results into snapshots.
/// </summary>
// stop all operations executed in the background
/// <summary>
/// Asynchronously loads snapshot with the highest sequence number for a persistent actor/view matching specified criteria.
/// </summary>
/// <summary>
/// Asynchronously stores a snapshot with metadata as record in SQL table.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common.TestKit\SqlJournalQuerySpec.cs
//-----------------------------------------------------------------------
// <copyright file="SqlJournalQuerySpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sql.Common.TestKit\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite\ConnectionContext.cs
//-----------------------------------------------------------------------
// <copyright file="ConnectionContext.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class has been made to make memory connections safe. In SQLite shared memory database exists as long, as there exists at least one opened connection to it.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite\DbHelper.cs
//-----------------------------------------------------------------------
// <copyright file="DbHelper.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite\Extension.cs
//-----------------------------------------------------------------------
// <copyright file="Extension.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Flag determining in in case of event journal table missing, it should be automatically initialized.
/// </summary>
/// <summary>
/// Flag determining in in case of snapshot store table missing, it should be automatically initialized.
/// </summary>
/// <summary>
/// Returns a default configuration for akka persistence SQLite-based journals and snapshot stores.
/// </summary>
/// <returns></returns>
/// <summary>
/// Journal-related settings loaded from HOCON configuration.
/// </summary>
/// <summary>
/// Snapshot store related settings loaded from HOCON configuration.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite\Journal\SqliteJournal.cs
//-----------------------------------------------------------------------
// <copyright file="SqliteJournal.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite\Journal\SqliteQueryBuilder.cs
//-----------------------------------------------------------------------
// <copyright file="SqliteQueryBuilder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite\Snapshot\QueryBuilder.cs
//-----------------------------------------------------------------------
// <copyright file="QueryBuilder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite\Snapshot\SqliteQueryMapper.cs
//-----------------------------------------------------------------------
// <copyright file="SqliteQueryMapper.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite\Snapshot\SqliteSnapshotStore.cs
//-----------------------------------------------------------------------
// <copyright file="SqliteSnapshotStore.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite.Tests\SqliteJournalQuerySpec.cs
//-----------------------------------------------------------------------
// <copyright file="SqliteJournalQuerySpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite.Tests\SqliteJournalSpec.cs
//-----------------------------------------------------------------------
// <copyright file="SqliteJournalSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite.Tests\SqliteSnapshotStoreSpec.cs
//-----------------------------------------------------------------------
// <copyright file="SqliteSnapshotStoreSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\persistence\Akka.Persistence.Sqlite.Tests\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.TestKit\AkkaSerializationSpec.cs
//-----------------------------------------------------------------------
// <copyright file="SerializationSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//     Assert.True(message.Equals(deserialized));
//sys@localhost:9000/user/actor";
//sys@localhost:9000/user/actor";
//TODO: find out why this fails on build server
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.TestKit\ContainerMessage.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.TestKit\EmptyActor.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.TestKit\ImmutableMessage.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.TestKit\ImmutableMessageWithPrivateCtor.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.TestKit\SomeMessage.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.TestKit\UntypedContainerMessage.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.TestKit\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.Wire\WireSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="WireSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once CheckNamespace
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.Wire\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.WireTests\WireTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\serializers\Akka.Serialization.WireTests\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.NUnit\NUnitAssertions.cs
//-----------------------------------------------------------------------
// <copyright file="XunitAssertions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Assertions for NUnit
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.NUnit\TestKit.cs
//-----------------------------------------------------------------------
// <copyright file="TestKit.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// TestKit for NUnit.
/// </summary>
//Automatically initialized to false;
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for NUnit class.
/// If no <paramref name="system"/> is passed in, a new system 
/// with <see cref="DefaultConfig"/> will be created.
/// </summary>
/// <param name="system">Optional: The actor system.</param>
//github.com/akkadotnet/akka.net/pull/1092");
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for NUnit class.
/// A new system with the specified configuration will be created.
/// </summary>
/// <param name="config">The configuration to use for the system.</param>
/// <param name="actorSystemName">Optional: the name of the system. Default: "test"</param>
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for NUnit class.
/// A new system with the specified configuration will be created.
/// </summary>
/// <param name="config">The configuration to use for the system.</param>
/// <summary>
/// This method is called before each test run, it initializes the test including
/// creating and setting up the ActorSystem.
/// </summary>
/// <summary>
/// This method is called after each test finishes, which calls
/// into the AfterAll method.
/// </summary>
/// <summary>
/// This method is called when a test ends. 
/// <remarks>If you override this, make sure you either call 
/// base.AfterTest() or <see cref="TestKitBase.Shutdown(System.Nullable{System.TimeSpan},bool)">TestKitBase.Shutdown</see> to shut down
/// the system. Otherwise you'll leak memory.
/// </remarks>
/// </summary>
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
//Take this object off the finalization queue and prevent finalization code for this object
//from executing a second time.
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
/// <param name="disposing">if set to <c>true</c> the method has been called directly or indirectly by a 
/// user's code. Managed and unmanaged resources will be disposed.<br />
/// if set to <c>false</c> the method has been called by the runtime from inside the finalizer and only 
/// unmanaged resources can be disposed.</param>
// If disposing equals false, the method has been called by the
// runtime from inside the finalizer and you should not reference
// other objects. Only unmanaged resources can be disposed.
//Make sure Dispose does not get called more than once, by checking the disposed field
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.NUnit\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.NUnit.Tests\AssertionsTests.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.NUnit.Tests\TestKitTestFixtureTest.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.NUnit.Tests\TestKitTests.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.NUnit.Tests\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.VsTest\TestKit.cs
//-----------------------------------------------------------------------
// <copyright file="TestKit.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// TestKit for Visual Studio Unit Testing Framework.
/// You should always call Shutdown from your cleanup method, in order to not leak memory.
/// Example:
/// <code>
///     [TestClass]
///     public class MyTests : TestKit
///     {
///         [TestCleanup]
///         public void Cleanup()
///         {
///             Shutdown();
///         }
///     
///         [TestMethod]
///         public void Expect_a_message()
///         {
///             TestActor.Tell("Test");
///             ExpectMsg("Test");
///         }
///     }
/// </code>
/// </summary>
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for xUnit class.
/// If no <paramref name="system"/> is passed in, a new system 
/// with <see cref="DefaultConfig"/> will be created.
/// </summary>
/// <param name="system">Optional: The actor system.</param>
//Intentionally left blank
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for xUnit class.
/// A new system with the specified configuration will be created.
/// </summary>
/// <param name="config">The configuration to use for the system.</param>
/// <param name="actorSystemName">Optional: the name of the system. Default: "test"</param>
//Intentionally left blank
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for xUnit class.
/// A new system with the specified configuration will be created.
/// </summary>
/// <param name="config">The configuration to use for the system.</param>
//Intentionally left blank
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.VsTest\VsTestAssertions.cs
//-----------------------------------------------------------------------
// <copyright file="VsTestAssertions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Assertions for Visual Studio Unit Testing Framework
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.VsTest\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.VsTest.Tests\AssertionsTests.cs
//-----------------------------------------------------------------------
// <copyright file="AssertionsTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.VsTest.Tests\TestKitTests.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.VsTest.Tests\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit\TestKit.cs
//-----------------------------------------------------------------------
// <copyright file="TestKit.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// TestKit for xUnit.
/// </summary>
//Automatically initialized to false;
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for xUnit class.
/// If no <paramref name="system"/> is passed in, a new system 
/// with <see cref="DefaultConfig"/> will be created.
/// </summary>
/// <param name="system">Optional: The actor system.</param>
//Intentionally left blank
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for xUnit class.
/// A new system with the specified configuration will be created.
/// </summary>
/// <param name="config">The configuration to use for the system.</param>
/// <param name="actorSystemName">Optional: the name of the system. Default: "test"</param>
//Intentionally left blank
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for xUnit class.
/// A new system with the specified configuration will be created.
/// </summary>
/// <param name="config">The configuration to use for the system.</param>
//Intentionally left blank
/// <summary>
/// This method is called when a test ends. 
/// <remarks>If you override this, make sure you either call 
/// base.AfterTest() or <see cref="TestKitBase.Shutdown(System.Nullable{System.TimeSpan},bool)">TestKitBase.Shutdown</see> to shut down
/// the system. Otherwise you'll leak memory.
/// </remarks>
/// </summary>
// Dispose ------------------------------------------------------------
//Destructor:
//~TestKit() 
//{
//    // Finalizer calls Dispose(false)
//    Dispose(false);
//}
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
//Take this object off the finalization queue and prevent finalization code for this object
//from executing a second time.
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
/// <param name="disposing">if set to <c>true</c> the method has been called directly or indirectly by a 
/// user's code. Managed and unmanaged resources will be disposed.<br />
/// if set to <c>false</c> the method has been called by the runtime from inside the finalizer and only 
/// unmanaged resources can be disposed.</param>
// If disposing equals false, the method has been called by the
// runtime from inside the finalizer and you should not reference
// other objects. Only unmanaged resources can be disposed.
//Make sure Dispose does not get called more than once, by checking the disposed field
// base.dispose(disposing);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit\XunitAssertions.cs
//-----------------------------------------------------------------------
// <copyright file="XunitAssertions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Assertions for xUnit
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit\Internals\AkkaAssertEqualityComparer.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaAssertEqualityComparer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Default implementation of <see cref="IEqualityComparer{T}"/> used by the Akka's xUnit.net equality assertions.
/// Copy of xUnits code
/// https://github.com/xunit/xunit/blob/3e6ab94ca231a6d8c86e90d6e724631a0faa33b7/src/xunit.assert/Asserts/Sdk/AssertEqualityComparer.cs
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <typeparam name="T">The type that is being compared.</typeparam>
/// <summary>
/// Initializes a new instance of the <see cref="AkkaAssertEqualityComparer{T}" /> class.
/// </summary>
/// <param name="skipTypeCheck">Set to <c>true</c> to skip type equality checks.</param>
/// <param name="innerComparer">The inner comparer to be used when the compared objects are enumerable.</param>
// Use a thunk to delay evaluation of DefaultInnerComparer
/// <inheritdoc/>
// Null?
// Same type?
// Implements IEquatable<T>?
// Implements IComparable<T>?
// Implements IComparable?
// Enumerable?
// Last case, rely on Object.Equals
/// <inheritdoc/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit\Internals\AkkaAssertEqualityComparerAdapter.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaAssertEqualityComparerAdapter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A class that wraps <see cref="IEqualityComparer{T}"/> to create <see cref="IEqualityComparer"/>.
/// Copy of xUnits class:
/// https://github.com/xunit/xunit/blob/3e6ab94ca231a6d8c86e90d6e724631a0faa33b7/src/xunit.assert/Asserts/Sdk/AssertEqualityComparerAdapter.cs
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <typeparam name="T">The type that is being compared.</typeparam>
/// <summary>
/// Initializes a new instance of the <see cref="AkkaAssertEqualityComparerAdapter{T}"/> class.
/// </summary>
/// <param name="innerComparer">The comparer that is being adapted.</param>
/// <inheritdoc/>
/// <inheritdoc/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit\Internals\AkkaEqualException.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaEqualException.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit2\TestKit.cs
//-----------------------------------------------------------------------
// <copyright file="TestKit.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// TestKit for xUnit.
/// </summary>
//Automatically initialized to false;
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for xUnit class.
/// If no <paramref name="system"/> is passed in, a new system 
/// with <see cref="DefaultConfig"/> will be created.
/// </summary>
/// <param name="system">Optional: The actor system.</param>
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for xUnit class.
/// A new system with the specified configuration will be created.
/// </summary>
/// <param name="config">The configuration to use for the system.</param>
/// <param name="actorSystemName">Optional: the name of the system. Default: "test"</param>
/// <summary>
/// Create a new instance of the <see cref="TestKit"/> for xUnit class.
/// A new system with the specified configuration will be created.
/// </summary>
/// <param name="config">The configuration to use for the system.</param>
/// <summary>
/// This method is called when a test ends. 
/// <remarks>If you override this, make sure you either call 
/// base.AfterTest() or <see cref="TestKitBase.Shutdown(System.Nullable{System.TimeSpan},bool)">TestKitBase.Shutdown</see> to shut down
/// the system. Otherwise you'll leak memory.
/// </remarks>
/// </summary>
// Dispose ------------------------------------------------------------
//Destructor:
//~TestKit() 
//{
//    // Finalizer calls Dispose(false)
//    Dispose(false);
//}
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
//Take this object off the finalization queue and prevent finalization code for this object
//from executing a second time.
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
/// <param name="disposing">if set to <c>true</c> the method has been called directly or indirectly by a 
/// user's code. Managed and unmanaged resources will be disposed.<br />
/// if set to <c>false</c> the method has been called by the runtime from inside the finalizer and only 
/// unmanaged resources can be disposed.</param>
// If disposing equals false, the method has been called by the
// runtime from inside the finalizer and you should not reference
// other objects. Only unmanaged resources can be disposed.
//Make sure Dispose does not get called more than once, by checking the disposed field
// base.dispose(disposing);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit2\XunitAssertions.cs
//-----------------------------------------------------------------------
// <copyright file="XunitAssertions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Assertions for xUnit
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit2\Internals\AkkaAssertEqualityComparer.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaAssertEqualityComparer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Default implementation of <see cref="IEqualityComparer{T}"/> used by the Akka's xUnit.net equality assertions.
/// Copy of xUnits code
/// https://github.com/xunit/xunit/blob/3e6ab94ca231a6d8c86e90d6e724631a0faa33b7/src/xunit.assert/Asserts/Sdk/AssertEqualityComparer.cs
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <typeparam name="T">The type that is being compared.</typeparam>
/// <summary>
/// Initializes a new instance of the <see cref="AkkaAssertEqualityComparer{T}" /> class.
/// </summary>
/// <param name="skipTypeCheck">Set to <c>true</c> to skip type equality checks.</param>
/// <param name="innerComparer">The inner comparer to be used when the compared objects are enumerable.</param>
// Use a thunk to delay evaluation of DefaultInnerComparer
/// <inheritdoc/>
// Null?
// Same type?
// Implements IEquatable<T>?
// Implements IComparable<T>?
// Implements IComparable?
// Enumerable?
// Last case, rely on Object.Equals
/// <inheritdoc/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit2\Internals\AkkaAssertEqualityComparerAdapter.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaAssertEqualityComparerAdapter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A class that wraps <see cref="IEqualityComparer{T}"/> to create <see cref="IEqualityComparer"/>.
/// Copy of xUnits class:
/// https://github.com/xunit/xunit/blob/3e6ab94ca231a6d8c86e90d6e724631a0faa33b7/src/xunit.assert/Asserts/Sdk/AssertEqualityComparerAdapter.cs
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <typeparam name="T">The type that is being compared.</typeparam>
/// <summary>
/// Initializes a new instance of the <see cref="AkkaAssertEqualityComparerAdapter{T}"/> class.
/// </summary>
/// <param name="innerComparer">The comparer that is being adapted.</param>
/// <inheritdoc/>
/// <inheritdoc/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit2\Internals\AkkaEqualException.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaEqualException.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit2\Internals\Loggers.cs
//-----------------------------------------------------------------------
// <copyright file="Loggers.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\testkits\Akka.TestKit.Xunit2\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\transports\Akka.Remote.AkkaIOTransport\AddressConverters.cs
//-----------------------------------------------------------------------
// <copyright file="AddressConverters.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\transports\Akka.Remote.AkkaIOTransport\AkkaIOTransport.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaIOTransport.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\transports\Akka.Remote.AkkaIOTransport\ConnectionAssociation.cs
//-----------------------------------------------------------------------
// <copyright file="ConnectionAssociation.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: Should we close connection?
//_connection.Tell(Tcp.Close.Instance);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\transports\Akka.Remote.AkkaIOTransport\TransportListener.cs
//-----------------------------------------------------------------------
// <copyright file="TransportListener.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\transports\Akka.Remote.AkkaIOTransport\TransportManager.cs
//-----------------------------------------------------------------------
// <copyright file="TransportManager.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Commands
//TODO: Supervision. Stopping Strategy is probably the only option. Do we need to signal remoting?
//TODO: Handle
// We only process one connect at a time, if we receive more associate or listener 
// requests during this time we just queue them. 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\contrib\transports\Akka.Remote.AkkaIOTransport\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\ActorState.cs
//-----------------------------------------------------------------------
// <copyright file="ActorState.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This interface represents the parts of the internal actor state; the behavior stack, watched by, watching and termination queue
/// </summary>
/// <summary>
/// Removes the provided <see cref="IActorRef"/> from the `Watching` set
/// </summary>
/// <param name="actor">The <see cref="IActorRef"/> to be removed</param>
/// <returns></returns>
/// <summary>
/// Removes the provided <see cref="IActorRef"/> from the `WatchedBy` set
/// </summary>
/// <param name="actor">The <see cref="IActorRef"/> to be removed</param>
/// <returns></returns>
/// <summary>
/// Removes the provided <see cref="IActorRef"/> from the `Termination queue` set
/// </summary>
/// <param name="actor">The <see cref="IActorRef"/> to be removed</param>
/// <returns></returns>
/// <summary>
/// Adds the provided <see cref="IActorRef"/> to the `Watching` set
/// </summary>
/// <param name="actor">The <see cref="IActorRef"/> to be added</param>
/// <returns></returns>
/// <summary>
/// Adds the provided <see cref="IActorRef"/> to the `WatchedBy` set
/// </summary>
/// <param name="actor">The <see cref="IActorRef"/> to be added</param>
/// <returns></returns>
/// <summary>
/// Adds the provided <see cref="IActorRef"/> to the `Termination queue` set
/// </summary>
/// <param name="actor">The <see cref="IActorRef"/> to be added</param>
/// <returns></returns>
/// <summary>
/// Clears the `Watching` set
/// </summary>
/// <returns></returns>
/// <summary>
/// Clears the `Termination queue` set
/// </summary>
/// <returns></returns>
/// <summary>
/// Clears the `Behavior` stack
/// </summary>
/// <returns></returns>
/// <summary>
/// Replaces the current receive behavior with a new behavior
/// </summary>
/// <param name="receive">The new behavior</param>
/// <returns></returns>
/// <summary>
/// Pushes a new receive behavior onto the `Behavior` stack
/// </summary>
/// <param name="receive">The new top level behavior</param>
/// <returns></returns>
/// <summary>
/// Removes the top level receive behavior from the `Behavior` stack
/// </summary>
/// <returns></returns>
/// <summary>
/// Determines whether the provided <see cref="IActorRef"/> is present in the `Watching` set
/// </summary>
/// <param name="actor">The <see cref="IActorRef"/> to locate in the `Watching` set</param>
/// <returns></returns>
/// <summary>
/// Determines whether the provided <see cref="IActorRef"/> is present in the `WatchedBy` set
/// </summary>
/// <param name="actor">The <see cref="IActorRef"/> to locate in the `WatchedBy` set</param>
/// <returns></returns>
/// <summary>
/// Determines whether the provided <see cref="IActorRef"/> is present in the `Termination queue` set
/// </summary>
/// <param name="actor">The <see cref="IActorRef"/> to locate in the `Termination queue` set</param>
/// <returns></returns>
/// <summary>
/// Returns an <see cref="IEnumerable{IActorRef}"/> over the `Watching` set
/// </summary>
/// <returns></returns>
/// <summary>
/// Returns an <see cref="IEnumerable{IActorRef}"/> over the `WatchedBy` set
/// </summary>
/// <returns></returns>
/// <summary>
/// Returns an <see cref="IEnumerable{IActorRef}"/> over the `Termination queue` set
/// </summary>
/// <returns></returns>
/// <summary>
/// Returns the top level receive behavior from the behavior stack
/// </summary>
/// <returns></returns>
/// <summary>
/// Represents the default start up state for any actor.
/// This state provides capacity for one `WatchedBy` and one `Receive` behavior
/// As soon as this container is no longer enough to contain the current state
/// The state container will escalate into a `FullActorState` instance
/// </summary>
//if we have no watchedBy, assign it to our local ref
//this is a memory footprint optimization, we can have a DefaultActorState object that is watched by _one_ watcher (parent)
//in every other case, we escalate to FullActorState
//otherwise, add our existing watchedBy and the new actor to the new fullstate container
//TODO: throw if null?
/// <summary>
/// Represents the full state of an actor, this is used whenever an actor need more state than the `DefaultActorState` container can contain
/// </summary>
//terminatedqueue should never be used outside the message loop
//We should never pop off the initial receiver
//We should never pop off the initial receiver
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Helios.Concurrency.DedicatedThreadPool.cs
/*
//github.com/helios-io/DedicatedThreadPool
/// <summary>
/// The type of threads to use - either foreground or background threads.
/// </summary>
/// <summary>
/// Provides settings for a dedicated thread pool
/// </summary>
/// <summary>
/// Background threads are the default thread type
/// </summary>
/// <summary>
/// The total number of threads to run in this thread pool.
/// </summary>
/// <summary>
/// The type of threads to run in this thread pool.
/// </summary>
/// <summary>
/// Apartment state for threads to run in this thread pool
/// </summary>
/// <summary>
/// Interval to check for thread deadlocks.
/// 
/// If a thread takes longer than <see cref="DeadlockTimeout"/> it will be aborted
/// and replaced.
/// </summary>
/// <summary>
/// TaskScheduler for working with a <see cref="DedicatedThreadPool"/> instance
/// </summary>
// Indicates whether the current thread is processing work items.
/// <summary>
/// Number of tasks currently running
/// </summary>
//current thread isn't running any tasks, can't execute inline
//remove the task from the queue if it was previously added
/// <summary>
/// Level of concurrency is directly equal to the number of threads
/// in the <see cref="DedicatedThreadPool"/>.
/// </summary>
//should this be immutable?
// this thread is now available for inlining
// Process all available items in the queue. 
// done processing
// Get the next item from the queue
// Execute the task we pulled out of the queue 
// We're done processing items on the current thread 
/// <summary>
/// An instanced, dedicated thread pool.
/// </summary>
//don't set up a timer if a timeout wasn't specified
//bail in the event of a shutdown
//this requests a new new worker and calls ForceTermination on the old worker
//Potential problem here: if the thread is not dead for real, we might abort real work.. there is no way to tell the difference between 
//deadlocked or just very long running tasks
//schedule heartbeat action to worker
/*
/// <summary>
/// index for round-robin load-balancing across worker threads
/// </summary>
//don't queue work if we've been disposed
//no local queue, write to a round-robin queue
//if (null == CurrentWorker)
//{
//using volatile instead of interlocked, no need to be exact, gaining 20% perf
//need to wrap bitwise operations in parens to preserve order, otherwise this won't round-robin
//to some actors if Settings.NumThreads is an odd number
//}
//else //recursive task queue, write directly
//{
//    // send work directly to PoolWorker
//    // CurrentWorker.AddWork(work);
//}
//bail if shutdown has been requested
/* request a new thread then shut down */
//TODO: abort is no guarantee for thread abortion
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\PatternMatch.cs
//-----------------------------------------------------------------------
// <copyright file="PatternMatch.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Class PatternMatch.
/// </summary>
/// <summary>
/// Matches the specified target.
/// </summary>
/// <param name="target">The target.</param>
/// <returns>Case.</returns>
/// <summary>
/// Interface IMatchResult
/// </summary>
/// <summary>
/// Gets a value indicating whether [was handled].
/// </summary>
/// <value><c>true</c> if [was handled]; otherwise, <c>false</c>.</value>
/// <summary>
/// Class Case.
/// </summary>
/// <summary>
/// The _message
/// </summary>
/// <summary>
/// The _handled
/// </summary>
/// <summary>
/// Gets a value indicating whether [was handled].
/// </summary>
/// <value><c>true</c> if [was handled]; otherwise, <c>false</c>.</value>
/// <summary>
/// Initializes a new instance of the <see cref="Case"/> class.
/// </summary>
/// <param name="message">The message.</param>
/// <summary>
/// Withes the specified action.
/// </summary>
/// <typeparam name="TMessage">The type of the t message.</typeparam>
/// <param name="action">The action.</param>
/// <returns>Case.</returns>
/// <summary>
/// Withes the specified action.
/// </summary>
/// <typeparam name="TMessage">The type of the t message.</typeparam>
/// <param name="action">The action.</param>
/// <returns>Case.</returns>
/// <summary>
/// Defaults the specified action.
/// </summary>
/// <param name="action">The action.</param>
/// <returns>IMatchResult.</returns>
/// <summary>
/// Class AlwaysHandled.
/// </summary>
/// <summary>
/// The instance
/// </summary>
/// <summary>
/// Prevents a default instance of the <see cref="AlwaysHandled"/> class from being created.
/// </summary>
/// <summary>
/// Gets a value indicating whether [was handled].
/// </summary>
/// <value><c>true</c> if [was handled]; otherwise, <c>false</c>.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorBase.cs
//-----------------------------------------------------------------------
// <copyright file="ActorBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Classes for passing status back to the sender.
/// Used for internal ACKing protocol, but also exposed as a utility class for user-specific ACKing if needed.
/// </summary>
/// <summary>
/// Indicates the success of some operation which has been performed
/// </summary>
/// <summary>
/// Indicates the failure of some operation that was requested and includes an
/// <see cref="Exception"/> describing the underlying cause of the problem.
/// </summary>
/// <summary>
///     Interface ILogReceive
/// </summary>
/// <summary>
/// Interface used on Actors that have an explicit requirement for a logger
/// </summary>
/// <summary>
/// Contains things needed by the framework
/// </summary>
/// <summary>Gets the context for this instance.</summary>
/// <value>The context.</value>
/// <exception cref="System.NotSupportedException">
/// There is no active Context, this is most likely due to use of async
/// operations from within this actor.
/// </exception>
/// <summary>
///     Class ActorBase.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="ActorBase" /> class.
/// </summary>
/// <exception cref="System.Exception">Do not create actors using 'new', always create them using an ActorContext/System</exception>
/// <summary>
///     Gets the sending ActorRef of the current message
/// </summary>
/// <value>The sender ActorRef</value>
/// <summary>
///     Gets the self ActorRef
/// </summary>
/// <value>Self ActorRef</value>
/// <summary>
///     Gets the context.
/// </summary>
/// <value>The context.</value>
/// <exception cref="System.NotSupportedException">
///     There is no active ActorContext, this is most likely due to use of async
///     operations from within this actor.
/// </exception>
/// <summary>
///     Gets the context.
/// </summary>
/// <value>The context.</value>
/// <exception cref="System.NotSupportedException">
///     There is no active Context, this is most likely due to use of async
///     operations from within this actor.
/// </exception>
/// <summary>
///     Processor for user defined messages.
/// </summary>
/// <param name="message">The message.</param>
/// <summary>
/// EmptyReceive is a Receive-delegate that matches no messages at all, ever.
/// </summary>
/// <summary>
/// Is called when a message isn't handled by the current behavior of the actor
/// by default it fails with either a <see cref="DeathPactException"/> (in
/// case of an unhandled <see cref="Terminated"/> message) or publishes an <see cref="UnhandledMessage"/>
/// to the actor's system's <see cref="EventStream"/>
/// </summary>
/// <param name="message">The unhandled message.</param>
/// <summary>
/// Changes the actor's command behavior and replaces the current receive handler with the specified handler.
/// </summary>
/// <param name="receive">The new message handler.</param>
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the specified handler.
/// The current handler is stored on a stack, and you can revert to it by calling <see cref="IActorContext.UnbecomeStacked"/>
/// <remarks>Please note, that in order to not leak memory, make sure every call to <see cref="BecomeStacked"/>
/// is matched with a call to <see cref="IActorContext.UnbecomeStacked"/>.</remarks>
/// </summary>
/// <param name="receive">The new message handler.</param>
/// <summary>
/// Reverts the Actor behavior to the previous one on the behavior stack.
/// </summary>
/// <summary>
/// <para>
/// Defines the inactivity timeout after which the sending of a <see cref="ReceiveTimeout"/> message is triggered.
/// When specified, the receive function should be able to handle a <see cref="ReceiveTimeout"/> message.
/// </para>
/// 
/// <para>
/// Please note that the receive timeout might fire and enqueue the <see cref="ReceiveTimeout"/> message right after
/// another message was enqueued; hence it is not guaranteed that upon reception of the receive
/// timeout there must have been an idle period beforehand as configured via this method.
/// </para>
/// 
/// <para>
/// Once set, the receive timeout stays in effect (i.e. continues firing repeatedly after inactivity
/// periods). Pass in <c>null</c> to switch off this feature.
/// </para>
/// </summary>
/// <param name="timeout">The timeout. Pass in <c>null</c> to switch off this feature.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorBase.Lifecycle.cs
//-----------------------------------------------------------------------
// <copyright file="ActorBase.Lifecycle.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Class ActorBase.
/// </summary>
/// <summary>
///     Can be overridden to intercept calls to `preRestart`. Calls `preRestart` by default.
/// </summary>
/// <param name="cause">The cause.</param>
/// <param name="message">The message.</param>
/// <summary>
///     Can be overridden to intercept calls to `preStart`. Calls `preStart` by default.
/// </summary>
/// <summary>
///     User overridable callback.
///     <p />
///     Is called when an Actor is started.
///     Actors are automatically started asynchronously when created.
///     Empty default implementation.
/// </summary>
/// <summary>
///     Can be overridden to intercept calls to `postRestart`. Calls `postRestart` by default.
/// </summary>
/// <param name="cause">The cause.</param>
/// <param name="message">The message.</param>
/// <summary>
///     User overridable callback: '''By default it disposes of all children and then calls `postStop()`.'''
///     <p />
///     Is called on a crashed Actor right BEFORE it is restarted to allow clean
///     up of resources before Actor is terminated.
/// </summary>
/// <param name="reason">the Exception that caused the restart to happen.</param>
/// <param name="message">optionally the current message the actor processed when failing, if applicable.</param>
/// <summary>
///     User overridable callback: By default it calls `preStart()`.
///     <p />
///     Is called right AFTER restart on the newly created Actor to allow reinitialization after an Actor crash.
/// </summary>
/// <param name="reason">the Exception that caused the restart to happen.</param>
/// <summary>
///     Can be overridden to intercept calls to `postStop`. Calls `postStop` by default..
/// </summary>
/// <summary>
///     User overridable callback.
///     <p />
///     Is called asynchronously after 'actor.stop()' is invoked.
///     Empty default implementation.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorBase.SupervisorStrategy.cs
//-----------------------------------------------------------------------
// <copyright file="ActorBase.SupervisorStrategy.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Gets or sets a <see cref="SupervisorStrategy"/>.
/// When getting, if a previously <see cref="SupervisorStrategy"/> has been set it's returned; otherwise calls
/// <see cref="SupervisorStrategy">SupervisorStrategy()</see>, stores and returns it.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorCell.Children.cs
//-----------------------------------------------------------------------
// <copyright file="ActorCell.Children.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: Hmm do we need memory barriers here???
/// <summary>
///     Stops the specified child.
/// </summary>
/// <param name="child">The child.</param>
/// <summary>
/// Swaps out the children container, by calling <paramref name="updater"/>  to produce the new container.
/// If the underlying container has been updated while <paramref name="updater"/> was called,
/// <paramref name="updater"/> will be called again with the new container. This will repeat until the 
/// container can be swapped out, or until <see cref="Tuple{T1,T2,T3}.Item1"/> contains <c>false</c>.
/// <para>The returned tuple should contain:</para>
/// <para>Item1: <c>true</c> if the container should be updated; <c>false</c> to not update and return Item3</para>
/// <para>Item2: The new container (will only be used if Item1=<c>true</c>)</para>
/// <para>Item3: The return value</para>
/// </summary>
/// <param name="updater">A function that returns a new container.</param>
/// <returns>The third value of the tuple that <paramref name="updater"/> returned.</returns>
/// <summary>
/// Swaps out the children container, by calling <paramref name="updater" />  to produce the new container.
/// If the underlying container has been updated while <paramref name="updater" /> was called,
/// <paramref name="updater" /> will be called again with the new container. This will repeat until the
/// container can be swapped out.
/// </summary>
/// <param name="updater">A function that returns a new container.</param>
/// <returns>The new updated <see cref="ChildrenContainer"/></returns>
/// <summary>This should only be used privately or when creating the root actor. </summary>
//Do not update. Return old
//Update (if it's still cc) and return the new crs
//Do not update. Return null
//The arguments says: Update; with a new reason; and return true
//The arguments says:Do NOT update; any container will do since it wont be updated; return false 
// This is called isWaitingForChildrenOrNull in AkkaJVM but is used like if returned a bool
/// <summary>
///     Suspends the children.
/// </summary>
/// <summary>
///     Resumes the children.
/// </summary>
/// <summary>
/// Tries to get the stats for the child with the specified name. The stats can be either <see cref="ChildNameReserved"/> 
/// indicating that only a name has been reserved for the child, or a <see cref="ChildRestartStats"/> for a child that 
/// has been initialized/created.
/// </summary>
//This is called getChildByName in Akka JVM
/// <summary>
/// Tries to get the stats for the child with the specified name. This ignores children for whom only names have been reserved.
/// </summary>
/// <summary>
/// Tries to get the stats for the specified child.
/// <remarks>Since the child exists <see cref="ChildRestartStats"/> is the only valid <see cref="IChildStats"/>.</remarks>
/// </summary>
//This is called getChildByRef in Akka JVM
// In Akka JVM there is a getAllChildStats here. Use ChildrenRefs.Stats instead
// optimization for the non-uid case
//TODO: Implement SerializeAllCreators
//   if (cell.system.settings.SerializeAllCreators && !systemService && props.deploy.scope != LocalScope)
//     try {
//       val ser = SerializationExtension(cell.system)
//       props.args forall (arg ⇒
//         arg == null ||
//           arg.isInstanceOf[INoSerializationVerificationNeeded] ||
//           ser.deserialize(ser.serialize(arg.asInstanceOf[AnyRef]).get, arg.getClass).get != null)
//     } catch {
//       case NonFatal(e) ⇒ throw new IllegalArgumentException(s"pre-creation serialization check failed at [${cell.self.path}/$name]", e)
//     }
// In case we are currently terminating, fail external attachChild requests
// (internal calls cannot happen anyway because we are suspended)
//reserve the name before we create the actor
//if actor creation failed, unreserve the name
//TODO: When Mailbox has SuspendCount implement this
//      // mailbox==null during RoutedActorCell constructor, where suspends are queued otherwise
//      if (mailbox ne null) for (_ ← 1 to mailbox.suspendCount) actor.suspend()
//replace the reservation with the real actor
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorCell.cs
//-----------------------------------------------------------------------
// <copyright file="ActorCell.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>NOTE! Only constructor and ClearActorFields is allowed to update this</summary>
//TODO: switch from  Func<Mailbox> createMailbox to MailboxType mailboxType
/*, MailboxType mailboxType*/) //TODO: switch from  Func<Mailbox> createMailbox to MailboxType mailboxType
//Akka: dispatcher.createMailbox(this, mailboxType)
// AKKA:
//   /*
/*
//    * has promised to produce. If that was more than the default, then we need
//    * to reverify here because the dispatcher may well have screwed it up.
//    */
//// we need to delay the failure to the point of actor creation so we can handle
//// it properly in the normal way
//val actorClass = props.actorClass
//val createMessage = mailboxType match {
//    case _: ProducesMessageQueue[_] if system.mailboxes.hasRequiredType(actorClass) ⇒
//    val req = system.mailboxes.getRequiredType(actorClass)
//    if (req isInstance mbox.messageQueue) Create(None)
//    else {
//        val gotType = if (mbox.messageQueue == null) "null" else mbox.messageQueue.getClass.getName
//        Create(Some(ActorInitializationException(self,
//        s"Actor [$self] requires mailbox type [$req] got [$gotType]")))
//    }
//    case _ ⇒ Create(None)
//}
//swapMailbox(mbox)
//mailbox.setActor(this)
//// ➡➡➡ NEVER SEND THE SAME SYSTEM MESSAGE OBJECT TO TWO ACTORS ⬅⬅⬅
//mailbox.systemEnqueue(self, createMessage)
//TODO: Should return  Option[ChildStats]
//set the thread static context or things will break
//TODO: this overwrites any already initialized supervisor strategy
//We should investigate what we can do to handle this better
//defaults to null - won't affect lazy instantiation unless explicitly set in props
// Apply default of custom behaviors to actor.
//ensure we set back the old context
//stackoverflow if this is the deadletters actorref
//this._systemImpl.DeadLetters.Tell(new DeadLetter(message, sender, this.Self));
//TODO_ UnstashAll stashed system messages (this is not the same stash that might exist on the actor)
//TODO: semantics here? should all "_state" be cleared? or just behavior?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorCell.DeathWatch.cs
//-----------------------------------------------------------------------
// <copyright file="ActorCell.DeathWatch.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ➡➡➡ NEVER SEND THE SAME SYSTEM MESSAGE OBJECT TO TWO ACTORS
// here we know that it is the SAME ref which was put in
/// <summary>
/// When this actor is watching the subject of <see cref="Terminated"/> message
/// it will be propagated to user's receive.
/// </summary>
// Don't need to send to parent parent since it receives a DWN by default
/*
// ➡➡➡ NEVER SEND THE SAME SYSTEM MESSAGE OBJECT TO TWO ACTORS
//_watchedBy.Add(watcher);
//_watchedBy.Remove(watcher);
// cleanup watchedBy since we know they are dead
//_watchedBy.Remove(a);
// send DeathWatchNotification to self for all matching subjects
// that are not child with existenceConfirmed = false because we could have been watching a
// non-local ActorRef that had never resolved before the other node went down
// When a parent is watching a child and it terminates due to AddressTerminated
// it is removed by sending DeathWatchNotification with existenceConfirmed = true to support
// immediate creation of child with same name.
/*TODO: childrenRefs.getByRef(a).isDefined*/, true));
/// <summary>
/// Starts subscription to AddressTerminated if not already subscribing and the
/// block adds a non-local ref to watching or watchedBy.
/// Ends subscription to AddressTerminated if subscribing and the
/// block removes the last non-local ref from watching and watchedBy.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorCell.DefaultMessages.cs
//-----------------------------------------------------------------------
// <copyright file="ActorCell.DefaultMessages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Class ActorCell.
/// </summary>
/// <summary>
///     Gets the type of the actor.
/// </summary>
/// <value>The type of the actor.</value>
/// <summary>
///     Invokes the specified envelope.
/// </summary>
/// <param name="envelope">The envelope.</param>
// Reschedule receive timeout
/// <summary>
/// If the envelope.Sender property is null, then we'll substitute
/// Deadletters as the <see cref="Sender"/> of this message.
/// </summary>
/// <param name="envelope">The envelope we received</param>
/// <returns>An IActorRef that corresponds to a Sender</returns>
/*
/// <summary>
/// This is only intended to be called from TestKit's TestActorRef
/// </summary>
/// <param name="envelope"></param>
//TODO: akka alters the receive handler for logging, but the effect is the same. keep it this way?
/// <summary>   
///     Receives the selection.
/// </summary>
/// <param name="m">The m.</param>
/// <summary>
///     Systems the invoke.
/// </summary>
/// <param name="envelope">The envelope.</param>
/// <summary>
///     Publishes the specified event.
/// </summary>
/// <param name="event">The event.</param>
//TODO: Hmmm?
//TODO: complete this
/// <summary>
///     Handles the identity.
/// </summary>
/// <param name="m">The m.</param>
/// <summary>
///     Handles the poison pill.
/// </summary>
/// <summary>
///     Restarts the specified cause.
/// </summary>
/// <param name="cause">The cause.</param>
// ensure that we know that we failed during creation
/// <summary>
///     Starts this instance.
/// </summary>
/// <summary>
/// Allow extra pre-start initialization in derived classes
/// </summary>
/// <summary>
///     Resumes the specified caused by failure.
/// </summary>
/// <param name="causedByFailure">The caused by failure.</param>
/// <summary>
///     Async stop this actor
/// </summary>
/// <summary>
///     Suspends this instance.
/// </summary>
/// <summary>
///     Kills this instance.
/// </summary>
/// <exception cref="ActorKilledException">Kill</exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorCell.FaultHandling.cs
//-----------------------------------------------------------------------
// <copyright file="ActorCell.FaultHandling.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
/// <summary>Re-create the actor in response to a failure.</summary>
// if the actor fails in preRestart, we can do nothing but log it: it’s best-effort
// run actor pre-incarnation plugin pipeline
// need to keep that suspend counter balanced
/// <summary>
/// Suspends the actor in response to a failure of a parent (i.e. the "recursive suspend" feature).
/// </summary>
/// <summary>
/// Resumes the actor in response to a failure
/// </summary>
/// <param name="causedByFailure">The exception that caused the failure. signifies if it was our own failure 
/// which prompted this action.</param>
//Akka Jvm does the following commented section as well, but we do not store the context inside the actor so it's not applicable
//    else if (_actor.context == null && causedByFailure != null)
//    {
//        system.eventStream.publish(Error(self.path.toString, clazz(actor), "changing Resume into Restart after " + causedByFailure))
//        faultRecreate(causedByFailure)
//    }
// done always to keep that suspend counter balanced
// must happen "atomically"
/// <summary>
/// Create the actor in response to a failure
/// </summary>
// stop all children, which will turn childrenRefs into TerminatingChildrenContainer (if there are children)
/// <summary>Terminates this instance.</summary>
// prevent Deadletter(Terminated) messages
//TODO: Implement when we have ActorSystem.Abort
//    if (systemImpl.aborting) {
//      // separate iteration because this is a very rare case that should not penalize normal operation
//      children foreach {
//        case ref: ActorRefScope if !ref.isLocal ⇒ self.sendSystemMessage(DeathWatchNotification(ref, true, false))
//        case _                                  ⇒
//      }
//    }
// do not process normal messages while waiting for all children to terminate
// do not propagate failures during shutdown to the supervisor
// prevent any further messages to be processed until the actor has been restarted
//Function handles childrenNotToSuspend being null
//Tell supervisor
// The following order is crucial for things to work properly. Only change this if you're very confident and lucky.
// 
// Please note that if a parent is also a watcher then ChildTerminated and Terminated must be processed in this
// specific order.
// run actor pre-incarnation plugin pipeline
//TODO: Akka Jvm: this is done in a call to dispatcher.detach()
//TODO: Akka Jvm: this is done in a call to MessageDispatcher.detach()
// need to keep a snapshot of the surviving children before the new actor instance creates new ones
// must happen in any case, so that failure is propagated
// this must happen before postRestart has a chance to fail
// If the creator returns the same instance, we need to restore our nulled out fields.
// only after parent is up and running again do restart the children which were not stopped
//Needed since otherwise it would be access to foreach variable in closure
// in order to prevent preRestart() from happening again
//Called handleFailure in Akka JVM
//Only act upon the failure, if it comes from a currently known child;
//the UID protects against reception of a Failed from a child which was
//killed in preRestart and re-created in postRestart
//If this fails, we do nothing in case of terminating/restarting state,
//otherwise tell the supervisor etc. (in that second case, the match
//below will hit the empty default case, too)
// if the removal changed the state of the (terminating) children container,
// then we are continuing the previously suspended recreate/create/terminate action
/// <summary>
///     Handles the non fatal or interrupted exception.
/// </summary>
/// <param name="action">The action.</param>
//TODO: Hmmm?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorCell.ReceiveTimeout.cs
//-----------------------------------------------------------------------
// <copyright file="ActorCell.ReceiveTimeout.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorPath.cs
//-----------------------------------------------------------------------
// <copyright file="ActorPath.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Actor path is a unique path to an actor that shows the creation path
/// up through the actor tree to the root actor.
/// ActorPath defines a natural ordering (so that ActorRefs can be put into
/// collections with this requirement); this ordering is intended to be as fast
/// as possible, which owing to the bottom-up recursive nature of ActorPath
/// is sorted by path elements FROM RIGHT TO LEFT, where RootActorPath >
/// ChildActorPath in case the number of elements is different.
/// Two actor paths are compared equal when they have the same name and parent
/// elements, including the root address information. That does not necessarily
/// mean that they point to the same incarnation of the actor if the actor is
/// re-created with the same path. In other words, in contrast to how actor
/// references are compared the unique id of the actor is not taken into account
/// when comparing actor paths.
/// </summary>
/** INTERNAL API */
/// <summary> 
/// Method that checks if actor name conforms to RFC 2396, http://www.ietf.org/rfc/rfc2396.txt
/// Note that AKKA JVM does not allow parenthesis ( ) but, according to RFC 2396 those are allowed, and 
/// since we use URL Encode to create valid actor names, we must allow them.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ActorPath" /> class.
/// </summary>
/// <param name="address"> The address. </param>
/// <param name="name"> The name. </param>
/// <summary>
/// Initializes a new instance of the <see cref="ActorPath" /> class.
/// </summary>
/// <param name="parentPath"> The parent path. </param>
/// <param name="name"> The name. </param>
/// <param name="uid"> The uid. </param>
/// <summary>
/// Gets the uid.
/// </summary>
/// <value> The uid. </value>
/// <summary>
/// Gets the elements.
/// </summary>
/// <value> The elements. </value>
/// <summary>
/// Gets the name.
/// </summary>
/// <value> The name. </value>
/// <summary>
/// The Address under which this path can be reached; walks up the tree to
/// the RootActorPath.
/// </summary>
/// <value> The address. </value>
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other"> An object to compare with this object. </param>
/// <returns> true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false. </returns>
/// <summary>
/// Withes the uid.
/// </summary>
/// <param name="uid"> The uid. </param>
/// <returns> ActorPath. </returns>
/// <summary>
/// Create a new child actor path.
/// </summary>
/// <param name="path"> The path. </param>
/// <param name="name"> The name. </param>
/// <returns> The result of the operator. </returns>
/// <summary>
/// Recursively create a descendant’s path by appending all child names.
/// </summary>
/// <param name="path"> The path. </param>
/// <param name="name"> The name. </param>
/// <returns> The result of the operator. </returns>
/// <summary>
/// Tries to parse the uri, which should be a full uri, i.e containing protocol.
/// For example "akka://System/user/my-actor"
/// </summary>
//This code corresponds to AddressFromURIString.unapply
//Typically "akka"
// Protocol must start with 'akka.*
//  protocol://SystemName/Path1/Path2
//port may not be specified for these types of paths
//System name is in the "host" position. According to rfc3986 host is case 
//insensitive, but should be produced as lowercase, so if we use uri.Host 
//we'll get it in lower case.
//So we'll extract it ourselves using the original path.
//We skip the protocol and "://"
//  protocol://SystemName@Host:port/Path1/Path2
/// <summary>
/// Joins this instance.
/// </summary>
/// <returns> System.String. </returns>
/// <summary>
/// String representation of the path elements, excluding the address
/// information. The elements are separated with "/" and starts with "/",
/// e.g. "/user/a/b".
/// </summary>
/// <returns> System.String. </returns>
/// <summary>
/// Returns a <see cref="System.String" /> that represents this instance.
/// </summary>
/// <returns> A <see cref="System.String" /> that represents this instance. </returns>
/// <summary>
/// Returns a string representation of this instance including uid.
/// </summary>
/// <returns></returns>
/// <summary>
/// Creates a child with the specified name
/// </summary>
/// <param name="childName"> Name of the child. </param>
/// <returns> ActorPath. </returns>
/// <summary>
/// Returns a hash code for this instance.
/// </summary>
/// <returns> A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </returns>
/// <summary>
/// Determines whether the specified <see cref="System.Object" /> is equal to this instance.
/// </summary>
/// <param name="obj"> The object to compare with the current object. </param>
/// <returns>
/// <c> true </c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise,
/// <c> false </c>.
/// </returns>
//public bool Equals(Surrogate other)
//{
//    if (other == null) return false;
//    return other.Equals(ToSurrogate(null));
//}
/// <summary>
/// Generate String representation, with the address in the RootActorPath.
/// </summary>
/// <returns> System.String. </returns>
/// <summary>
/// Generate String representation, replacing the Address in the RootActorPath
/// with the given one unless this path’s address includes host and port
/// information.
/// </summary>
/// <param name="address"> The address. </param>
/// <returns> System.String. </returns>
/// <summary>
/// Class RootActorPath.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RootActorPath" /> class.
/// </summary>
/// <param name="address"> The address. </param>
/// <param name="name"> The name. </param>
/// <summary>
/// Withes the uid.
/// </summary>
/// <param name="uid"> The uid. </param>
/// <returns> ActorPath. </returns>
/// <exception cref="System.NotSupportedException"> RootActorPath must have undefinedUid </exception>
/// <summary>
/// Class ChildActorPath.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ChildActorPath" /> class.
/// </summary>
/// <param name="parentPath"> The parent path. </param>
/// <param name="name"> The name. </param>
/// <param name="uid"> The uid. </param>
/// <summary>
/// Creates a copy of the given ActorPath and applies a new Uid
/// </summary>
/// <param name="uid"> The uid. </param>
/// <returns> ActorPath. </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorProducerPipeline.cs
//-----------------------------------------------------------------------
// <copyright file="ActorProducerPipeline.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Plugin interface used to define
/// </summary>
/// <summary>
/// Determines if current plugin can be applied to provided actor based on it's type.
/// </summary>
/// <summary>
/// Plugin behavior applied to underlying <paramref name="actor"/> instance when the new one is being created.
/// </summary>
/// <summary>
/// Plugin behavior applied to underlying <paramref name="actor"/> instance before the actor is being recycled.
/// </summary>
/// <summary>
/// Base actor producer pipeline plugin class.
/// </summary>
/// <summary>
/// By default derivatives of this plugin will be applied to all actors.
/// </summary>
/// <summary>
/// Plugin behavior applied to <paramref name="actor"/> instance when the new one is being created.
/// </summary>
/// <summary>
/// Plugin behavior applied to <paramref name="actor"/> instance before the actor is being recycled.
/// </summary>
/// <summary>
/// Base generic actor producer pipeline plugin class.
/// </summary>
/// <summary>
/// By default derivatives of this plugin will be applied to all actors inheriting from <typeparamref name="TActor">actor generic type</typeparamref>.
/// </summary>
/// <summary>
/// Plugin behavior applied to <paramref name="actor"/> instance when the new one is being created.
/// </summary>
/// <summary>
/// Plugin behavior applied to <paramref name="actor"/> instance before the actor is being recycled.
/// </summary>
/// <summary>
/// Class used to resolving actor producer pipelines depending on actor type.
/// </summary>
// collection of plugins loaded by default
/// <summary>
/// Gets total number of unique plugins registered inside current resolver.
/// </summary>
/// <summary>
/// Register target <paramref name="plugin"/> at the end of producer pipeline.
/// </summary>
/// <returns>True if plugin was registered (it has not been found in pipeline already). False otherwise. </returns>
/// <summary>
/// Register target <paramref name="plugin"/> inside producer pipeline at specified <paramref name="index"/>.
/// </summary>
/// <returns>True if plugin was registered (it has not been found in pipeline already). False otherwise. </returns>
/// <summary>
/// Unregisters plugin from producer pipeline, returning false if plugin was not found.
/// </summary>
/// <summary>
/// Returns true if current actor producer pipeline already has registered provided plugin type.
/// </summary>
/// <summary>
/// Resolves and applies all plugins valid to specified underlying <paramref name="actor"/> 
/// registered in current producer pipeline to newly created actor.
/// </summary>
/// <summary>
/// Resolves and applies all plugins valid to specified underlying <paramref name="actor"/> 
/// registered in current producer pipeline before old actor would be recycled.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorRef.cs
//-----------------------------------------------------------------------
// <copyright file="ActorRef.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// All ActorRefs have a scope which describes where they live. Since it is often
/// necessary to distinguish between local and non-local references, this is the only
/// method provided on the scope.
/// INTERNAL
/// </summary>
/// <summary>
/// Marker interface for Actors that are deployed within local scope, 
/// i.e. <see cref="IActorRefScope.IsLocal"/> always returns <c>true</c>.
/// </summary>
/// <summary>
/// RepointableActorRef (and potentially others) may change their locality at
/// runtime, meaning that isLocal might not be stable. RepointableActorRef has
/// the feature that it starts out “not fully started” (but you can send to it),
/// which is why <see cref="IsStarted"/> features here; it is not improbable that cluster
/// actor refs will have the same behavior.
/// INTERNAL
/// </summary>
//we have special handling for system messages
/// <summary>
/// Forwards the message using the current Sender
/// </summary>
/// <param name="receiver">The actor that receives the forward</param>
/// <param name="message">The message to forward</param>
/// <summary>
/// Use this value as an argument to <see cref="ICanTell.Tell"/> if there is not actor to
/// reply to (e.g. when sending from non-actor code).
/// </summary>
/// <summary>
/// Obtain a child given the paths element to that actor, by possibly traversing the actor tree or 
/// looking it up at some provider-specific location. 
/// A path element of ".." signifies the parent, a trailing "" element must be disregarded. 
/// If the requested path does not exist, returns <see cref="Nobody"/>.
/// </summary>
/// <param name="name">The path elements.</param>
/// <returns>The <see cref="IActorRef"/>, or if the requested path does not exist, returns <see cref="Nobody"/>.</returns>
/// <summary>
/// Obtain a child given the paths element to that actor, by possibly traversing the actor tree or 
/// looking it up at some provider-specific location. 
/// A path element of ".." signifies the parent, a trailing "" element must be disregarded. 
/// If the requested path does not exist, returns <see cref="Nobody"/>.
/// </summary>
/// <param name="name">The path elements.</param>
/// <returns>The <see cref="IActorRef"/>, or if the requested path does not exist, returns <see cref="Nobody"/>.</returns>
//TODO: Refactor this to use an IEnumerator instead as this will be faster instead of enumerating multiple times over name, as the implementations currently do.
/// <summary> This is an internal look-up failure token, not useful for anything else.</summary>
/*
//Using enumerator to avoid multiple enumerations of name.
//name was empty
/// <summary>
/// An enumerable that continues where the supplied enumerator is positioned
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorRef.Extensions.cs
//-----------------------------------------------------------------------
// <copyright file="ActorRef.Extensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     An extension method class for working with ActorRefs
/// </summary>
/// <summary>
///     If we call a method such as <code>Context.Child(name)</code>
///     and don't receive a valid result in return, this method will indicate
///     whether or not the actor we received is valid.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorRefFactoryExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="ActorRefFactoryExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorRefFactoryShared.cs
//-----------------------------------------------------------------------
// <copyright file="ActorRefFactoryShared.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains implementations originally found in Akka´s trait ActorRefFactory in ActorRefProvider.scala
/// https://github.com/akka/akka/blob/master/akka-actor/src/main/scala/akka/actor/ActorRefProvider.scala#L180
/// <see cref="IActorRefFactory"/> corresponds to that trait, but since it is an interface it
/// cannot contain any code, hence this class.
/// </summary>
/// <summary>
///     Construct an <see cref="Akka.Actor.ActorSelection"/> from the given path, which is
///     parsed for wildcards (these are replaced by regular expressions
///     internally). No attempt is made to verify the existence of any part of
///     the supplied path, it is recommended to send a message and gather the
///     replies in order to resolve the matching set of actors.
/// </summary>
/// <summary>
///     Construct an <see cref="Akka.Actor.ActorSelection"/> from the given path, which is
///     parsed for wildcards (these are replaced by regular expressions
///     internally). No attempt is made to verify the existence of any part of
///     the supplied path, it is recommended to send a message and gather the
///     replies in order to resolve the matching set of actors.
/// </summary>
//no path given
//absolute path
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorRefProvider.cs
//-----------------------------------------------------------------------
// <copyright file="ActorRefProvider.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Reference to the supervisor of guardian and systemGuardian; this is
/// exposed so that the ActorSystemImpl can use it as lookupRoot, i.e.
/// for anchoring absolute actor look-ups.
/// </summary>
/// <summary>Reference to the supervisor of guardian and systemGuardian at the specified address;
/// this is exposed so that the ActorRefFactory can use it as lookupRoot, i.e.
/// for anchoring absolute actor selections.
/// </summary>
/// <summary> Gets the supervisor used for all top-level user actors.</summary>
/// <summary>Gets the supervisor used for all top-level system actors.</summary>
/// <summary>Gets the dead letters.</summary>
/// <summary>
/// Gets the root path for all actors within this actor system, not including any remote address information.
/// </summary>
/// <summary>Gets the settings.</summary>
/// <summary>
/// Initialization of an ActorRefProvider happens in two steps: first
/// construction of the object with settings, eventStream, etc.
/// and then—when the ActorSystem is constructed—the second phase during
/// which actors may be created (e.g. the guardians).
/// </summary>
/// <summary>Gets the deployer.</summary>
/// <summary>Generates and returns a unique actor path below "/temp".</summary>
/// <summary>Returns the actor reference representing the "/temp" path.</summary>
/// <summary>Registers an actorRef at a path returned by <see cref="TempPath"/>; do NOT pass in any other path.</summary>
/// <param name="actorRef">The actor reference.</param>
/// <param name="path">A path returned by <see cref="TempPath"/>. Do NOT pass in any other path!</param>
/// <summary>Unregister a temporary actor (i.e. obtained from <see cref="TempPath"/>); do NOT pass in any other path.</summary>
/// <param name="path">A path returned by <see cref="TempPath"/>. Do NOT pass in any other path!</param>
/// <summary>
/// Actor factory with create-only semantics: will create an actor as
/// described by <paramref name="props"/> with the given <paramref name="supervisor"/> and <paramref name="path"/> (may be different
/// in case of remote supervision). If <paramref name="systemService"/> is true, deployment is
/// bypassed (local-only). If a value for<paramref name="deploy"/> is passed in, it should be
/// regarded as taking precedence over the nominally applicable settings,
/// but it should be overridable from external configuration; the lookup of
/// the latter can be suppressed by setting "lookupDeploy" to "false".
/// </summary>
/// <summary>Get the actor reference for a specified path. If no such actor exists, it will be (equivalent to) a dead letter reference.</summary>
/// <summary>Get the actor reference for a specified path. If no such actor exists, it will be (equivalent to) a dead letter reference.</summary>
/// <summary>
/// This Future is completed upon termination of this <see cref="IActorRefProvider"/>, which
/// is usually initiated by stopping the guardian via <see cref="ActorSystem.Stop"/>.
/// </summary>
/// <summary>
/// Obtain the address which is to be used within sender references when
/// sending to the given other address or none if the other address cannot be
/// reached from this system (i.e. no means of communication known; no
/// attempt is made to verify actual reachability).
/// </summary>
/// <summary>Gets the external address of the default transport. </summary>
/// <summary>
///     Class LocalActorRefProvider. This class cannot be inherited.
/// </summary>
//This is called guardian in Akka
//TODO: switch to MailboxType
//Intentionally left blank
//TODO: _guardianSupervisorStrategyConfigurator = dynamicAccess.createInstanceFor[SupervisorStrategyConfigurator](settings.SupervisorStrategyClass, EmptyImmutableSeq).get
//TODO: Implement Akka's _guardianSupervisorStrategyConfigurator.create()
/// <summary>
/// Higher-level providers (or extensions) might want to register new synthetic
/// top-level paths for doing special stuff. This is the way to do just that.
/// Just be careful to complete all this before <see cref="ActorSystem.Start"/> finishes,
/// or before you start your own auto-spawned actors.
/// </summary>
//Corresponds to Akka's: override lazy val guardian: LocalActorRef
//Corresponds to Akka's: override lazy val guardian: systemGuardian
//The following are the lazy val statements in Akka
//TODO:system.Mailboxes.FromConfig(Mailboxes.DefaultMailboxId)
//End of lazy val
// chain death watchers so that killing guardian stops the application
//Should be SendSystemMessage
//Should be SendSystemMessage
/// <summary>
///     Resolves the actor reference.
/// </summary>
/// <param name="path">The actor path.</param>
/// <returns>ActorRef.</returns>
/// <exception cref="System.NotSupportedException">The provided actor path is not valid in the LocalActorRefProvider</exception>
//Used to be this, but the code above is what Akka has
//if(_rootPath.Address==actorPath.Address)
//{
//    if(actorPath.Elements.Head() == "temp")
//    {
//        //skip ""/"temp", 
//        string[] parts = actorPath.Elements.Drop(1).ToArray();
//        return _tempContainer.GetChild(parts);
//    }
//    //standard
//    ActorCell currentContext = _rootGuardian.Cell;
//    foreach(string part in actorPath.Elements)
//    {
//        currentContext = ((LocalActorRef)currentContext.Child(part)).Cell;
//    }
//    return currentContext.Self;
//}
//throw new NotSupportedException("The provided actor path is not valid in the LocalActorRefProvider");
// mailbox and dispatcher defined in deploy should override props
// for consistency we check configuration of dispatcher and mailbox locally
//routers!!!
// routers use context.actorOf() to create the routees, which does not allow us to pass
// these through, but obtain them here for early verification
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorSelection.cs
//-----------------------------------------------------------------------
// <copyright file="ActorSelection.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Class ActorSelection.
/// </summary>
/// <summary>
///     Gets the anchor.
/// </summary>
/// <value>The anchor.</value>
/// <summary>
///     Gets or sets the elements.
/// </summary>
/// <value>The elements.</value>
/// <summary>
/// <see cref="string"/> representation of all of the elements in the <see cref="ActorSelection"/> path.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="ActorSelection" /> class.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="ActorSelection" /> class.
/// </summary>
/// <param name="anchor">The anchor.</param>
/// <param name="path">The path.</param>
/// <summary>
///     Initializes a new instance of the <see cref="ActorSelection" /> class.
/// </summary>
/// <param name="anchor">The anchor.</param>
/// <param name="path">The path.</param>
/// <summary>
///     Initializes a new instance of the <see cref="ActorSelection" /> class.
/// </summary>
/// <param name="anchor">The anchor.</param>
/// <param name="elements">The elements.</param>
/// <summary>
///     Posts a message to this ActorSelection.
/// </summary>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <summary>
///     INTERNAL API
///     Convenience method used by remoting when receiving <see cref="ActorSelectionMessage" /> from a remote
///     actor.
/// </summary>
/// <summary>
///     Class ActorSelectionMessage.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="ActorSelectionMessage" /> class.
/// </summary>
/// <param name="message">The message.</param>
/// <param name="elements">The elements.</param>
/// <param name="wildCardFanOut"></param>
/// <summary>
///     The message that should be delivered to this ActorSelection.
/// </summary>
/// <value>The message.</value>
/// <summary>
///     The elements, e.g. "foo/bar/baz".
/// </summary>
/// <value>The elements.</value>
/// <summary>
///     Class SelectionPathElement.
/// </summary>
/// <summary>
///     Class SelectChildName.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="SelectChildName" /> class.
/// </summary>
/// <param name="name">The name.</param>
/// <summary>
///     Gets or sets the actor name.
/// </summary>
/// <value>The name.</value>
/// <summary>
///     Returns a <see cref="System.String" /> that represents this instance.
/// </summary>
/// <returns>A <see cref="System.String" /> that represents this instance.</returns>
/// <summary>
///     Class SelectChildPattern.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="SelectChildPattern" /> class.
/// </summary>
/// <param name="patternStr">The pattern string.</param>
/// <summary>
///     Gets the pattern string.
/// </summary>
/// <value>The pattern string.</value>
/// <summary>
///     Returns a <see cref="System.String" /> that represents this instance.
/// </summary>
/// <returns>A <see cref="System.String" /> that represents this instance.</returns>
/// <summary>
///     Class SelectParent.
/// </summary>
/// <summary>
///     Returns a <see cref="System.String" /> that represents this instance.
/// </summary>
/// <returns>A <see cref="System.String" /> that represents this instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ActorSystem.cs
//-----------------------------------------------------------------------
// <copyright file="ActorSystem.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     An actor system is a hierarchical group of actors which share common
///     configuration, e.g. dispatchers, deployments, remote capabilities and
///     addresses. It is also the entry point for creating or looking up actors.
///     There are several possibilities for creating actors (see <see cref="Akka.Actor.Props"/>
///     for details on `props`):
///     <code>
/// system.ActorOf(props, "name");
/// system.ActorOf(props);
/// system.ActorOf(Props.Create(typeof(MyActor)), "name");
/// system.ActorOf(Props.Create(() =&gt; new MyActor(arg1, arg2), "name");
/// </code>
///     Where no name is given explicitly, one will be automatically generated.
///     <b>
///         <i>Important Notice:</i>
///     </b>
///     This class is not meant to be extended by user code.
/// </summary>
/// <summary>Gets the settings.</summary>
/// <value>The settings.</value>
/// <summary>Gets the name of this system.</summary>
/// <value>The name.</value>
/// <summary>Gets the serialization.</summary>
/// <value>The serialization.</value>
/// <summary>Gets the event stream.</summary>
/// <value>The event stream.</value>
/// <summary>
///     Gets the dead letters.
/// </summary>
/// <value>The dead letters.</value>
/// <summary>Gets the dispatchers.</summary>
/// <value>The dispatchers.</value>
/// <summary>Gets the mailboxes.</summary>
/// <value>The mailboxes.</value>
/// <summary>Gets the scheduler.</summary>
/// <value>The scheduler.</value>
/// <summary>Gets the log</summary>
/// <summary>
///     Creates a new ActorSystem with the specified name, and the specified Config
/// </summary>
/// <param name="name">Name of the ActorSystem
/// <remarks>Must contain only word characters (i.e. [a-zA-Z0-9] plus non-leading '-'</remarks>
/// </param>
/// <param name="config">Configuration of the ActorSystem</param>
/// <returns>ActorSystem.</returns>
// var withFallback = config.WithFallback(ConfigurationFactory.Default());
/// <summary>
///     Creates the specified name.
/// </summary>
/// <param name="name">The name. The name must be uri friendly.
/// <remarks>Must contain only word characters (i.e. [a-zA-Z0-9] plus non-leading '-'</remarks>
/// </param>
/// <returns>ActorSystem.</returns>
/// <summary>
/// Returns an extension registered to this ActorSystem
/// </summary>
/// <summary>
/// Returns an extension registered to this ActorSystem
/// </summary>
/// <summary>
/// Determines whether this instance has the specified extension.
/// </summary>
/// <summary>
/// Determines whether this instance has the specified extension.
/// </summary>
/// <summary>
/// Tries to the get the extension of specified type.
/// </summary>
/// <summary>
/// Tries to the get the extension of specified type.
/// </summary>
/// <summary>
/// Register a block of code (callback) to run after ActorSystem.shutdown has been issued and
/// all actors in this actor system have been stopped.
/// Multiple code blocks may be registered by calling this method multiple times.
/// The callbacks will be run sequentially in reverse order of registration, i.e.
/// last registration is run first.
/// </summary>
/// <param name="code">The code to run</param>
/// <exception cref="Exception">Thrown if the System has already shut down or if shutdown has been initiated.</exception>
/// <summary>
///     Stop this actor system. This will stop the guardian actor, which in turn
///     will recursively stop all its child actors, then the system guardian
///     (below which the logging actors reside) and the execute all registered
///     termination handlers (<see cref="ActorSystem.RegisterOnTermination" />).
/// </summary>
/// <summary>
/// Returns a task that will be completed when the system has terminated.
/// </summary>
/// <summary>
/// Block current thread until the system has been shutdown.
/// This will block until after all on termination callbacks have been run.
/// </summary>
/// <summary>
/// Block current thread until the system has been shutdown, or the specified
/// timeout has elapsed. 
/// This will block until after all on termination callbacks have been run.
/// <para>Returns <c>true</c> if the system was shutdown during the specified time;
/// <c>false</c> if it timed out.</para>
/// </summary>
/// <param name="timeout">The timeout.</param>
/// <returns>Returns <c>true</c> if the system was shutdown during the specified time;
/// <c>false</c> if it timed out.</returns>
/// <summary>
/// Block current thread until the system has been shutdown, or the specified
/// timeout has elapsed, or the cancellationToken was canceled. 
/// This will block until after all on termination callbacks have been run.
/// <para>Returns <c>true</c> if the system was shutdown during the specified time;
/// <c>false</c> if it timed out, or the cancellationToken was canceled. </para>
/// </summary>
/// <param name="timeout">The timeout.</param>
/// <param name="cancellationToken">A cancellation token that cancels the wait operation.</param>
/// <returns>Returns <c>true</c> if the system was shutdown during the specified time;
/// <c>false</c> if it timed out, or the cancellationToken was canceled. </returns>
//Automatically initialized to false;
//Destructor:
//~ActorSystem() 
//{
//    // Finalizer calls Dispose(false)
//    Dispose(false);
//}
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
//Take this object off the finalization queue and prevent finalization code for this object
//from executing a second time.
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
/// <param name="disposing">if set to <c>true</c> the method has been called directly or indirectly by a 
/// user's code. Managed and unmanaged resources will be disposed.<br />
/// if set to <c>false</c> the method has been called by the runtime from inside the finalizer and only 
/// unmanaged resources can be disposed.</param>
// If disposing equals false, the method has been called by the
// runtime from inside the finalizer and you should not reference
// other objects. Only unmanaged resources can be disposed.
//Make sure Dispose does not get called more than once, by checking the disposed field
//Clean up unmanaged resources
// base.dispose(disposing);
/// <summary>
/// Block and prevent the main application thread from exiting unless
/// the actor system is shut down.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Address.cs
//-----------------------------------------------------------------------
// <copyright file="Address.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///  The address specifies the physical location under which an Actor can be
///  reached. Examples are local addresses, identified by the <see cref="ActorSystem"/>'s
/// name, and remote addresses, identified by protocol, host and port.
///  
/// This class is sealed to allow use as a case class (copy method etc.); if
/// for example a remote transport would want to associate additional
/// information with an address, then this must be done externally.
/// </summary>
/// <summary>
/// Pseudo address for all systems
/// </summary>
//{1}", Protocol, System);
/// <summary>
/// Parses a new <see cref="Address"/> from a given string
/// </summary>
/// <param name="address">The address to parse</param>
/// <returns>A populated <see cref="Address"/> object with host and port included, if available</returns>
/// <exception cref="UriFormatException">Thrown if the address is not able to be parsed</exception>
/// <summary>
/// Extractor class for so-called "relative actor paths" - as in "relative URI", not
/// "relative to some other actors."
/// 
/// Examples:
/// 
///  * "grand/child"
///  * "/user/hello/world"
/// </summary>
//hack to cause the URI not to explode when we're only given an actor name
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\BuiltInActors.cs
//-----------------------------------------------------------------------
// <copyright file="BuiltInActors.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Class EventStreamActor.
/// </summary>
/// <summary>
///     Processor for user defined messages.
/// </summary>
/// <param name="message">The message.</param>
/// <summary>
///     Class GuardianActor.
/// </summary>
/// <summary>
/// System guardian. 
/// 
/// Root actor for all actors under the /system path.
/// </summary>
/// <summary>
/// Processor for messages that are sent to the root system guardian
/// </summary>
/// <param name="message"></param>
// time for the systemGuardian to stop, but first notify all the
// termination hooks, they will reply with TerminationHookDone
// and when all are done the systemGuardian is stopped
// a registered, and watched termination hook terminated before
// termination process of guardian has started
//Guardian MUST NOT lose its children during restart
//Intentionally left blank
/// <summary>
///     Class DeadLetterActorRef.
/// </summary>
//TODO: Since this isn't overriding SendUserMessage it doesn't handle all messages as Akka JVM does
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Cell.cs
//-----------------------------------------------------------------------
// <copyright file="Cell.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>Gets the “self” reference which this Cell is attached to.</summary>
/// <summary>The system within which this Cell lives.</summary>
/// <summary>The system internals within which this Cell lives.</summary>
/// <summary>
/// Start the cell: enqueued message must not be processed before this has
/// been called. The usual action is to attach the mailbox to a dispatcher.
/// </summary>
/// <summary>Recursively suspend this actor and all its children. Is only allowed to throw fatal exceptions.</summary>
/// <summary>Recursively resume this actor and all its children. Is only allowed to throw fatal exceptions.</summary>
/// <summary>Restart this actor (will recursively restart or stop all children). Is only allowed to throw Fatal Throwables.</summary>
/// <summary>Recursively terminate this actor and all its children. Is only allowed to throw Fatal Throwables.</summary>
/// <summary>The supervisor of this actor.</summary>
/// <summary>Returns true if the actor is local.</summary>
/// <summary>The props for this actor cell.</summary>
/// <summary>
/// If the actor isLocal, returns whether "user messages" are currently queued,
/// <c>false</c>otherwise.
/// </summary>
/// <summary>
/// If the actor isLocal, returns the number of "user messages" currently queued,
/// which may be a costly operation, 0 otherwise.
/// </summary>
//TODO: Should be replaced by childrenRefs: ChildrenContainer
/// <summary>
/// Method for looking up a single child beneath this actor.
/// It is racy if called from the outside.</summary>
/// <summary>
/// Tries to get the stats for the child with the specified name. The stats can be either <see cref="ChildNameReserved"/> 
/// indicating that only a name has been reserved for the child, or a <see cref="ChildRestartStats"/> for a child that 
/// has been initialized/created.
/// </summary>
//This is called getChildByName in Akka JVM
// TODO: Missing:
//    /**
/**
//    */
//    def systemImpl: ActorSystemImpl
//    /**
/**
//    */
//    def childrenRefs: ChildrenContainer
//    /**
/**
//    */
//    def getChildByName(name: String): Option[ChildStats]
//    /**
/**
//    * It is racy if called from the outside.
//    */
//    def getSingleChild(name: String): InternalActorRef
//    /**
/**
//    * schedule the actor to run, depending on which type of cell it is.
//    * Is only allowed to throw Fatal Throwables.
//    */
//    def sendMessage(msg: Envelope): Unit
//    /**
/**
//    * schedule the actor to run, depending on which type of cell it is.
//    * Is only allowed to throw Fatal Throwables.
//    */
//    final def sendMessage(message: Any, sender: ActorRef): Unit =
//    sendMessage(Envelope(message, sender, system))
//    /**
/**
//    * schedule the actor to run, depending on which type of cell it is.
//    * Is only allowed to throw Fatal Throwables.
//    */
//    def sendSystemMessage(msg: ISystemMessage): Unit
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ChildrenContainer.cs
//-----------------------------------------------------------------------
// <copyright file="ChildrenContainer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//using System.Collections.Concurrent;
//using System.Collections.Generic;
//using System.Linq;
//namespace Akka.Actor
//{
//    /// <summary>
//    /// Class ChildrenContainer.
//    /// </summary>
//    public abstract class ChildrenContainer
//    {
//        /// <summary>
//        /// The is normal
//        /// </summary>
//        public bool isNormal = true;
//        /// <summary>
//        /// The is terminating
//        /// </summary>
//        public bool isTerminating = false;
//        /// <summary>
//        /// Gets the children.
//        /// </summary>
//        /// <value>The children.</value>
//        public abstract ActorRef[] Children { get; }
//        /// <summary>
//        /// Gets the stats.
//        /// </summary>
//        /// <value>The stats.</value>
//        public abstract ChildRestartStats[] Stats { get; }
//        /// <summary>
//        /// Adds the specified name.
//        /// </summary>
//        /// <param name="name">The name.</param>
//        /// <param name="stats">The stats.</param>
//        public abstract void Add(string name, ChildRestartStats stats);
//        /// <summary>
//        /// Removes the specified child.
//        /// </summary>
//        /// <param name="child">The child.</param>
//        public abstract void Remove(ActorRef child);
//        /// <summary>
//        /// Gets the name of the by.
//        /// </summary>
//        /// <param name="name">The name.</param>
//        /// <returns>ChildStats.</returns>
//        public abstract ChildStats GetByName(string name);
//        /// <summary>
//        /// Gets the by reference.
//        /// </summary>
//        /// <param name="actor">The actor.</param>
//        /// <returns>ChildRestartStats.</returns>
//        public abstract ChildRestartStats getByRef(ActorRef actor);
//        /// <summary>
//        /// Shalls the die.
//        /// </summary>
//        /// <param name="actor">The actor.</param>
//        public abstract void shallDie(ActorRef actor);
//        // reserve that name or throw an exception
//        /// <summary>
//        /// Reserves the specified name.
//        /// </summary>
//        /// <param name="name">The name.</param>
//        public abstract void reserve(string name);
//        // cancel a reservation
//        /// <summary>
//        /// Unreserves the specified name.
//        /// </summary>
//        /// <param name="name">The name.</param>
//        public abstract void unreserve(string name);
//    }
//    public interface IChildrenContainer
//    {
//        IEnumerable<InternalActorRef> GetChildren();
//    }
//    /// <summary>
//    /// Class ChildRestartStats.
//    /// </summary>
//    public class ChildRestartStats
//    {
//    }
//    /// <summary>
//    /// Class ChildStats.
//    /// </summary>
//    public class ChildStats
//    {
//    }
//}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\DeadLetterMailbox.cs
//-----------------------------------------------------------------------
// <copyright file="DeadLetterMailbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Just drop it like it's hot
//Intentionally left blank
//Intentionally left blank
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Deploy.cs
//-----------------------------------------------------------------------
// <copyright file="Deploy.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Deployer.cs
//-----------------------------------------------------------------------
// <copyright file="Deployer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\EmptyLocalActorRef.cs
//-----------------------------------------------------------------------
// <copyright file="EmptyLocalActorRef.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Just ignore
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Exceptions.cs
//-----------------------------------------------------------------------
// <copyright file="Exceptions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This exception provides the base for all Akka.NET specific exceptions within the system.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AkkaException"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AkkaException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <param name="cause">The exception that is the cause of the current exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="AkkaException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// The exception that is the cause of the current exception.
/// </summary>
/// <summary>
/// This exception is thrown when the actor name is invalid.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="InvalidActorNameException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="InvalidActorNameException"/> class.
/// </summary>
/// <param name="message">The error message that explains the reason for the exception.</param>
/// <param name="innerException">The exception that is the cause of the current exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="InvalidActorNameException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// This exception is thrown when an Ask operation times out.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AskTimeoutException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="AskTimeoutException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// This exception is thrown when the initialization logic for an Actor fails.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ActorInitializationException"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ActorInitializationException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ActorInitializationException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <param name="cause">The exception that is the cause of the current exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ActorInitializationException"/> class.
/// </summary>
/// <param name="actor">The actor whose initialization logic failed.</param>
/// <param name="message">The message that describes the error.</param>
/// <param name="cause">The exception that is the cause of the current exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ActorInitializationException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// Retrieves the actor whose initialization logic failed.
/// </summary>
/// <summary>
/// Returns a <see cref="String" /> that represents this instance.
/// </summary>
/// <returns>
/// A <see cref="String" /> that represents this instance.
/// </returns>
/// <summary>
/// This exception is thrown when there was a problem initializing a logger.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="LoggerInitializationException"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="LoggerInitializationException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="LoggerInitializationException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <param name="cause">The exception that is the cause of the current exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="LoggerInitializationException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// This exception is thrown when a <see cref="Kill"/> message has been sent to an Actor.
/// <see cref="SupervisorStrategy.DefaultDecider"/> will by default stop the actor.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ActorKilledException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ActorKilledException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// This exception is thrown when a core invariant in the Actor implementation has been violated.
/// For instance, if you try to create an Actor that doesn't inherit from <see cref="ActorBase" />.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="IllegalActorStateException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="IllegalActorStateException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// This exception is thrown when an Actor with an invalid name is deployed.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="IllegalActorNameException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="IllegalActorNameException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// This exception is thrown by an Actor that receives a Terminated(someActor) message
/// that it doesn't handle itself, effectively crashing the Actor and escalating to the supervisor.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DeathPactException"/> class.
/// </summary>
/// <param name="deadActor">The actor that has been terminated.</param>
/// <summary>
/// Initializes a new instance of the <see cref="DeathPactException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// Retrieves the actor that has been terminated.
/// </summary>
/// <summary>
/// This exception is thrown when the <see cref="ActorBase.PreRestart"/> method fails during a restart attempt.
///
/// <note>
/// This exception is not propagated to the supervisor, as it originates from the already failed instance,
/// hence it is only visible as log entry on the event stream.
/// </note>
/// </summary>
//TODO: what is this?
/// <summary>
/// Initializes a new instance of the <see cref="PreRestartException"/> class.
/// </summary>
/// <param name="actor">The actor whose <see cref="ActorBase.PreRestart"/> hook failed.</param>
/// <param name="restartException">The exception thrown by the <paramref name="actor"/> within <see cref="ActorBase.PreRestart"/>.</param>
/// <param name="cause">The exception which caused the restart in the first place.</param>
/// <param name="optionalMessage">The message which was optionally passed into <see cref="ActorBase.PreRestart"/>.</param>
/// <summary>
/// Initializes a new instance of the <see cref="PreRestartException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// This exception is thrown when the Actor constructor or <see cref="ActorBase.PostRestart"/> method
/// fails during a restart attempt.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="PostRestartException"/> class.
/// </summary>
/// <param name="actor">The actor whose constructor or <see cref="ActorBase.PostRestart"/> hook failed.</param>
/// <param name="cause">The exception thrown by the <paramref name="actor"/> within <see cref="ActorBase.PostRestart"/>.</param>
/// <param name="originalCause">The original cause is the exception which caused the restart in the first place.</param>
/// <summary>
/// Initializes a new instance of the <see cref="PostRestartException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
///<summary>
/// Retrieves the exception which caused the restart in the first place.
/// </summary>
/// <summary>
/// This exception is thrown when an Actor can not be found.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ActorNotFoundException"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ActorNotFoundException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// This exception is thrown when an invalid message is sent to an Actor.
///
/// <note>
/// Currently only <c>null</c> is an invalid message.
/// </note>
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="InvalidMessageException"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="InvalidMessageException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="InvalidMessageException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ExtendedActorSystem.cs
//-----------------------------------------------------------------------
// <copyright file="ExtendedActorSystem.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// More powerful interface to the actor system’s implementation which is presented to 
/// extensions (see <see cref="IExtension"/>).
/// <remarks>Important Notice:<para>
/// This class is not meant to be extended by user code. If you want to
/// actually roll your own Akka, beware that you are completely on your own in
/// that case!</para></remarks>
/// </summary>
/// <summary>Gets the provider.</summary>
/// <value>The provider.</value>
/// <summary>
/// Gets the top-level supervisor of all user actors created using 
/// <see cref="ActorSystem.ActorOf">system.ActorOf(...)</see>
/// </summary>
/// <summary>
/// Gets the top-level supervisor of all system-internal services like logging.
/// </summary>
/// <summary>
/// Gets the actor producer pipeline resolver for current actor system. It may be used by
/// Akka plugins to inject custom behavior directly into actor creation chain.
/// </summary>
/// <summary>Creates a new system actor in the "/system" namespace. This actor 
/// will be shut down during system shutdown only after all user actors have
/// terminated.</summary>
/// <summary>Creates a new system actor in the "/system" namespace. This actor 
/// will be shut down during system shutdown only after all user actors have
/// terminated.</summary>
//TODO: Missing threadFactory, dynamicAccess, printTree
//  /**
/**
//  */
//  def threadFactory: ThreadFactory
//  /**
/**
//  * to use the context class loader, if one is set, or the class loader which
//  * loaded the ActorSystem implementation. The context class loader is also
//  * set on all threads created by the ActorSystem, if one was set during
//  * creation.
//  */
//  def dynamicAccess: DynamicAccess
//  /**
/**
//  * Careful, this may OOM on large actor systems, and it is only meant for
//  * helping debugging in case something already went terminally wrong.
//  */
//  private[akka] def printTree: String
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Extensions.cs
//-----------------------------------------------------------------------
// <copyright file="Extensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Marker interface used to identify an object as ActorSystem extension
/// </summary>
/// <summary>
/// Non-generic version of interface, mostly to avoid issues with generic casting
/// </summary>
/// <summary>
/// Returns an instance of the extension identified by this ExtensionId instance
/// </summary>
/// <summary>
/// Returns an instance of the extension identified by this <see cref="IExtensionId{T}"/> instance
/// </summary>
/// <summary>
/// Is used by Akka to instantiate the <see cref="IExtension"/> identified by this ExtensionId.
/// Internal use only.
/// </summary>
/// <summary>
/// Returns the underlying type for this extension
/// </summary>
/// <summary>
/// Marker interface used to distinguish a unique ActorSystem extensions
/// </summary>
/// <summary>
/// Returns an instance of the extension identified by this ExtensionId instance
/// </summary>
/// <summary>
/// Returns an instance of the extension identified by this <see cref="IExtensionId{T}"/> instance
/// </summary>
/// <summary>
/// Is used by Akka to instantiate the <see cref="IExtension"/> identified by this ExtensionId.
/// Internal use only.
/// </summary>
/// <summary>
/// Static helper class used for resolving extensions
/// </summary>
/// <summary>
/// Loads the extension and casts it to the expected type if it's already registered
/// </summary>
/// <summary>
/// Registers a type and returns it if one doesn't yet exist
/// </summary>
/// <summary>
/// Registers a type and returns it if one doesn't yet exist
/// </summary>
/// <summary>
///     Class ExtensionBase.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\FSM.cs
//-----------------------------------------------------------------------
// <copyright file="FSM.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Message type which is sent directly to the subscriber Actor in <see cref="SubscribeTransitionCallBack"/>
/// before sending any <see cref="Transition{TS}"/> messages.
/// </summary>
/// <typeparam name="TS">The type of the state being used in this finite state machine.</typeparam>
/// <summary>
/// Message type which is used to communicate transitions between states to all subscribed listeners
/// (use <see cref="SubscribeTransitionCallBack"/>)
/// </summary>
/// <typeparam name="TS">The type of state used</typeparam>
/// <summary>
/// Send this to an <see cref="SubscribeTransitionCallBack"/> to request first the <see cref="UnsubscribeTransitionCallBack"/>
/// followed by a series of <see cref="Transition{TS}"/> updates. Cancel the subscription using
/// <see cref="CurrentState{TS}"/>.
/// </summary>
/// <summary>
/// Unsubscribe from <see cref="SubscribeTransitionCallBack"/> notifications which were
/// initialized by sending the corresponding <see cref="Transition{TS}"/>.
/// </summary>
/// <summary>
/// Reason why this <see cref="FSM{T,S}"/> is shutting down
/// </summary>
/// <summary>
/// Default <see cref="Reason"/> if calling Stop().
/// </summary>
/// <summary>
/// Reason given when someone as calling <see cref="Stop"/> from outside;
/// also applies to <see cref="ActorSystem"/> supervision directive.
/// </summary>
/// <summary>
/// Signifies that the <see cref="FSM{T,S}"/> is shutting itself down because of an error,
/// e.g. if the state to transition into does not exist. You can use this to communicate a more
/// precise cause to the <see cref="FSM{T,S}.OnTermination"/> block.
/// </summary>
/// <summary>
/// Used in the event of a timeout between transitions
/// </summary>
/*
/// <summary>
/// Log entry of the <see cref="ILoggingFSM"/> - can be obtained by calling <see cref="GetLog"/>
/// </summary>
/// <typeparam name="TS">The name of the state</typeparam>
/// <typeparam name="TD">The data of the state</typeparam>
/// <summary>
/// This captures all of the managed state of the <see cref="FSM{T,S}"/>: the state name,
/// the state data, possibly custom timeout, stop reason, and replies accumulated while
/// processing the last message.
/// </summary>
/// <typeparam name="TS">The name of the state</typeparam>
/// <typeparam name="TD">The data of the state</typeparam>
/// <summary>
/// Modify the state transition descriptor to include a state timeout for the 
/// next state. This timeout overrides any default timeout set for the next state.
/// <remarks>Use <see cref="TimeSpan.MaxValue"/> to cancel a timeout.</remarks>
/// </summary>
/// <summary>
/// Send reply to sender of the current message, if available.
/// </summary>
/// <param name="replyValue"></param>
/// <returns></returns>
/// <summary>
/// Modify state transition descriptor with new state data. The data will be set
/// when transitioning to the new state.
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// All messages sent to the <see cref="FSM{TS,TD}"/> will be wrapped inside an <see cref="Event{TD}"/>,
/// which allows pattern matching to extract both state and data.
/// </summary>
/// <typeparam name="TD">The state data for this event</typeparam>
/// <summary>
/// Class representing the state of the <see cref="FSM{TS,TD}"/> within the OnTermination block.
/// </summary>
/// <summary>
/// Finite state machine (FSM) actor.
/// </summary>
/// <typeparam name="TState">The state name type</typeparam>
/// <typeparam name="TData">The state data type</typeparam>
/// <summary>
/// Insert a new <see cref="StateFunction"/> at the end of the processing chain for the
/// given state. If the stateTimeout parameter is set, entering this state without a
/// differing explicit timeout setting will trigger a <see cref="FSMBase.StateTimeout"/>.
/// </summary>
/// <param name="stateName">designator for the state</param>
/// <param name="func">delegate describing this state's response to input</param>
/// <param name="timeout">default timeout for this state</param>
/// <summary>
/// Sets the initial state for this FSM. Call this method from the constructor before the <see cref="Initialize"/> method.
/// If different state is needed after a restart this method, followed by <see cref="Initialize"/>, can be used in the actor
/// life cycle hooks <see cref="ActorBase.PreStart()"/> and <see cref="ActorBase.PostRestart"/>.
/// </summary>
/// <param name="stateName">Initial state designator.</param>
/// <param name="stateData">Initial state data.</param>
/// <param name="timeout">State timeout for the initial state, overriding the default timeout for that state.</param>
/// <summary>
/// Produce transition to other state. Return this from a state function
/// in order to effect the transition.
/// </summary>
/// <param name="nextStateName">State designator for the next state</param>
/// <returns>State transition descriptor</returns>
/// <summary>
/// Produce transition to other state. Return this from a state function
/// in order to effect the transition.
/// </summary>
/// <param name="nextStateName">State designator for the next state</param>
/// <param name="stateData">Data for next state</param>
/// <returns>State transition descriptor</returns>
/// <summary>
/// Produce "empty" transition descriptor. Return this from a state function
/// when no state change is to be effected.
/// </summary>
/// <returns>Descriptor for staying in the current state.</returns>
/// <summary>
/// Produce change descriptor to stop this FSM actor with <see cref="FSMBase.Reason"/> <see cref="FSMBase.Normal"/>
/// </summary>
/// <summary>
/// Produce change descriptor to stop this FSM actor with the specified <see cref="FSMBase.Reason"/>.
/// </summary>
/// <summary>
/// Schedule named timer to deliver message after given delay, possibly repeating.
/// Any existing timer with the same name will automatically be canceled before adding
/// the new timer.
/// </summary>
/// <param name="name">identifier to be used with <see cref="CancelTimer"/>.</param>
/// <param name="msg">message to be delivered</param>
/// <param name="timeout">delay of first message delivery and between subsequent messages.</param>
/// <param name="repeat">send once if false, scheduleAtFixedRate if true</param>
/// <summary>
/// Cancel a named <see cref="Timer"/>, ensuring that the message is not subsequently delivered (no race.)
/// </summary>
/// <param name="name">The name of the timer to cancel.</param>
/// <summary>
/// Determines whether the named timer is still active. Returns true 
/// unless the timer does not exist, has previously been cancelled, or
/// if it was a single-shot timer whose message was already received.
/// </summary>
/// <summary>
/// Set the state timeout explicitly. This method can be safely used from
/// within a state handler.
/// </summary>
//Internal API
/// <summary>
/// Set handler which is called upon each state transition, i.e. not when
/// staying in the same state. 
/// </summary>
/// <summary>
/// Set the handler which is called upon termination of this FSM actor. Calling this
/// method again will overwrite the previous contents.
/// </summary>
/// <summary>
/// Set handler which is called upon reception of unhandled FSM messages. Calling
/// this method again will overwrite the previous contents.
/// </summary>
/// <param name="stateFunction"></param>
/// <summary>
/// Verify the existence of initial state and setup timers. This should be the
/// last call within the constructor or <see cref="ActorBase.PreStart"/> and
/// <see cref="ActorBase.PostRestart"/>.
/// </summary>
/// <summary>
/// Current state name
/// </summary>
/// <summary>
/// Current state data
/// </summary>
/// <summary>
/// Return next state data (available in <see cref="OnTransition"/> handlers)
/// </summary>
/// <summary>
/// Can be set to enable debugging on certain actions taken by the FSM
/// </summary>
/// <summary>
/// FSM state data and current timeout handling
/// </summary>
/// <summary>
/// Timer handling
/// </summary>
/// <summary>
/// State definitions
/// </summary>
/// <summary>
/// Unhandled event handler
/// </summary>
/// <summary>
/// Termination handling
/// </summary>
/// <summary>
/// Transition handling
/// </summary>
/// <summary>
/// C# port of Scala's orElse method for partial function chaining.
/// 
/// See http://scalachina.com/api/scala/PartialFunction.html
/// </summary>
/// <param name="original">The original <see cref="StateFunction"/> to be called</param>
/// <param name="fallback">The <see cref="StateFunction"/> to be called if <paramref name="original"/> returns null</param>
/// <returns>A <see cref="StateFunction"/> which combines both the results of <paramref name="original"/> and <paramref name="fallback"/></returns>
/// <summary>
/// Main actor receive method
/// </summary>
/// <param name="message"></param>
//send the current state back as a reference point
//Internal API
/// <summary>
/// Call the <see cref="OnTermination"/> hook if you want to retain this behavior.
/// When overriding make sure to call base.PostStop();
/// 
/// Please note that this method is called by default from <see cref="ActorBase.PreRestart"/> so
/// override that one if <see cref="OnTermination"/> shall not be called during restart.
/// </summary>
/*
/// <summary>
/// By default, <see cref="Failure"/> is logged at error level and other
/// reason types are not logged. It is possible to override this behavior.
/// </summary>
/// <param name="reason"></param>
/// <summary>
/// Marker interface to let the setting "akka.actor.debug.fsm" control if logging should occur in <see cref="FSM{TS,TD}"/>
/// </summary>
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Futures.cs
//-----------------------------------------------------------------------
// <copyright file="Futures.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Extension method class designed to create Ask support for
///     non-ActorRef objects such as <see cref="ActorSelection" />.
/// </summary>
//when asking from outside of an actor, we need to pass a system, so the FutureActor can register itself there and be resolvable for local and remote calls
//create a new tempcontainer path
//callback to unregister from tempcontainer
//The future actor needs to be registered in the temp container
/// <summary>
/// Akka private optimized representation of the temporary actor spawned to
/// receive the reply to an "ask" operation.
/// 
/// INTERNAL API
/// </summary>
/// <summary>
/// This is necessary for weaving the PromiseActorRef into the asked message, i.e. the replyTo pattern.
/// </summary>
/**
// ReSharper disable once InconsistentNaming
// ReSharper disable once InconsistentNaming
//TODO: ActorCell.emptyActorRefSet ?
/// <summary>
/// Returns false if the <see cref="Result"/> is already completed.
/// </summary>
//TODO: ActorCell.emptyActorRefSet ?
/// <summary>
///  Contract of this method:
///  Must always return the same ActorPath, which must have
///  been registered if we haven't been stopped yet.
/// </summary>
//even if we are already stopped we still need to produce a proper path
//TODO: isn't SendSystemMessage supposed to be a part of ActorRef? Why isn't it overridable?
// ➡➡➡ NEVER SEND THE SAME SYSTEM MESSAGE OBJECT TO TWO ACTORS ⬅⬅⬅
//TODO: find a way to get access to logger?
// if path was never queried nobody can possibly be watching us, so we don't have to publish termination either
//already stopped
//spin until registration is completed before stopping
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\GracefulStopSupport.cs
//-----------------------------------------------------------------------
// <copyright file="GracefulStopSupport.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Returns a <see cref="Task"/> that will be completed with success when existing messages
/// of the target actor have been processed and the actor has been terminated.
/// 
/// Useful when you need to wait for termination or compose ordered termination of several actors,
/// which should only be done outside of the <see cref="ActorSystem"/> as blocking inside <see cref="ActorBase"/> is discouraged.
/// 
/// <remarks><c>IMPORTANT:</c> the actor being terminated and its supervisor being informed of the availability of the deceased actor's name
/// are two distinct operations, which do not obey any reliable ordering.</remarks>
/// 
/// If the target actor isn't terminated within the timeout the <see cref="Task"/> is completed with failure.
/// 
/// If you want to invoke specialized stopping logic on your target actor instead of <see cref="PoisonPill"/>, you can pass your stop command as a parameter:
/// <code>
///     GracefulStop(someChild, timeout, MyStopGracefullyMessage).ContinueWith(r => {
///         // Do something after someChild starts being stopped.
///     });
/// </code>
/// </summary>
//set up the timeout
//create a new tempcontainer path
//callback to unregister from tempcontainer
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\IActorContext.cs
//-----------------------------------------------------------------------
// <copyright file="IActorContext.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Monitors the specified actor for termination. When the <paramref name="subject"/> terminates
/// the instance watching will receive a <see cref="Terminated"/> message.
/// <remarks>Note that if the <see cref="Terminated"/> message isn't handled by the actor,
/// by default the actor will crash by throwing a <see cref="DeathPactException"/>. To change
/// the default behavior, override <see cref="ActorBase.Unhandled"/>.
/// </remarks>
/// </summary>
/// <param name="subject">The actor to monitor for termination.</param>
/// <returns>Returns the provided subject</returns>
/// <summary>
/// Stops monitoring the <paramref name="subject"/> for termination.
/// </summary>
/// <param name="subject">The actor to stop monitor for termination.</param>
/// <returns>Returns the provided subject</returns>
/// <summary>
/// Gets the <see cref="IActorRef"/> belonging to the current actor.
/// </summary>
/// <summary>
/// Gets the <see cref="IActorRef"/> of the actor who sent the current message.
/// 
/// If the message was not sent by an actor (i.e. some external non-actor code
/// sent this actor a message) then this value will default to <see cref="ActorRefs.NoSender"/>.
/// </summary>
/// <summary>
/// Gets a reference to the <see cref="ActorSystem"/> to which this actor belongs.
/// 
/// <remarks>
/// This property is how you can get access to the <see cref="IScheduler"/> and other parts
/// of Akka.NET from within an actor instance.
/// </remarks>
/// </summary>
/// <summary>
/// Gets the <see cref="IActorRef"/> of the parent of the current actor.
/// </summary>
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the specified handler.
/// </summary>
/// <param name="receive">The new message handler.</param>
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the specified handler.
/// The current handler is stored on a stack, and you can revert to it by calling <see cref="UnbecomeStacked"/>
/// <remarks>Please note, that in order to not leak memory, make sure every call to <see cref="BecomeStacked"/>
/// is matched with a call to <see cref="UnbecomeStacked"/>.</remarks>
/// </summary>
/// <param name="receive">The new message handler.</param>
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the previous one on the behavior stack.
/// <remarks>In order to store an actor on the behavior stack, a call to <see cref="BecomeStacked"/> must have been made
/// prior to this call</remarks>
/// </summary>
/// <summary>
/// Retrieves a child actor with the specified name, if it exists.
/// 
/// If the child with the given name cannot be found, 
/// then <see cref="ActorRefs.Nobody"/> will be returned instead.
/// </summary>
/// <param name="name">
/// The name of the child actor.
/// 
/// e.g. "child1", "foo"
/// 
/// Not the path, just the name of the child at the time it was created by this parent.
/// </param>
/// <returns>The <see cref="IActorRef"/> belonging to the child if found, <see cref="ActorRefs.Nobody"/> otherwise.</returns>
/// <summary>
/// Gets all of the children that belong to this actor.
/// 
/// If this actor has no children, 
/// an empty collection of <see cref="IActorRef"/> is returned instead.
/// </summary>
/// <summary>
/// <para>
/// Defines the inactivity timeout after which the sending of a <see cref="ReceiveTimeout"/> message is triggered.
/// When specified, the receive function should be able to handle a <see cref="ReceiveTimeout"/> message.
/// </para>
/// 
/// <para>
/// Please note that the receive timeout might fire and enqueue the <see cref="ReceiveTimeout"/> message right after
/// another message was enqueued; hence it is not guaranteed that upon reception of the receive
/// timeout there must have been an idle period beforehand as configured via this method.
/// </para>
/// 
/// <para>
/// Once set, the receive timeout stays in effect (i.e. continues firing repeatedly after inactivity
/// periods). Pass in <c>null</c> to switch off this feature.
/// </para>
/// </summary>
/// <param name="timeout">The timeout. Pass in <c>null</c> to switch off this feature.</param>
/// <summary>
/// Gets the inactivity deadline timeout set using <see cref="SetReceiveTimeout"/>.
/// </summary>
/*
/// <summary>
/// Issues a stop command to the provided <see cref="IActorRef"/>, which will cause that actor
/// to terminate.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\IActorRefFactory.cs
//-----------------------------------------------------------------------
// <copyright file="IActorRefFactory.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Interface IActorRefFactory
/// </summary>
// ReSharper disable once InconsistentNaming
//TODO: Fix comment
/// <summary>
/// Create new actor as child of this context with the given name, which must
/// not start with “$”. If the given name is already in use,
/// and `InvalidActorNameException` is thrown.
/// See <see cref="Props"/> for details on how to obtain a <see cref="Props"/> object.
/// @throws akka.actor.InvalidActorNameException if the given name is
/// invalid or already in use
/// @throws akka.ConfigurationException if deployment, dispatcher
/// or mailbox configuration is wrong
/// </summary>
/// <param name="props">The props.</param>
/// <param name="name">The name.</param>
/// <returns>InternalActorRef.</returns>
/// <summary>
/// Construct an <see cref="Akka.Actor.ActorSelection" /> from the given path, which is
/// parsed for wildcards (these are replaced by regular expressions
/// internally). No attempt is made to verify the existence of any part of
/// the supplied path, it is recommended to send a message and gather the
/// replies in order to resolve the matching set of actors.
/// </summary>
/// <param name="actorPath">The actor path.</param>
/// <returns>ActorSelection.</returns>
/// <summary>
/// Construct an <see cref="Akka.Actor.ActorSelection" /> from the given path, which is
/// parsed for wildcards (these are replaced by regular expressions
/// internally). No attempt is made to verify the existence of any part of
/// the supplied path, it is recommended to send a message and gather the
/// replies in order to resolve the matching set of actors.
/// </summary>
/// <param name="actorPath">The actor path.</param>
/// <returns>ActorSelection.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\IAutoReceivedMessage.cs
//-----------------------------------------------------------------------
// <copyright file="IAutoReceivedMessage.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//request to an actor ref, to get back the identity of the underlying actors
//response to the Identity message, get identity by Sender
/// <summary>
/// Sending a <see cref="PoisonPill"/> to an will stop the actor when the message 
/// is processed. <see cref="PoisonPill"/> is enqueued as ordinary messages and will be handled after 
/// messages that were already queued in the mailbox.
/// <para>See also <see cref="Kill"/> which causes the actor to throw an  <see cref="ActorKilledException"/> when 
/// it processes the message, which gets handled using the normal supervisor mechanism, and
/// <see cref="IActorContext.Stop"/> which causes the actor to stop without processing any more messages. </para>
/// </summary>
/// <summary>
/// Sending an <see cref="Kill"/> message to an actor causes the actor to throw an 
/// <see cref="ActorKilledException"/> when it processes the message, which gets handled using the normal supervisor mechanism.
/// <para>See also <see cref="PoisonPill"/> which causes the actor to stop when the <see cref="PoisonPill"/>
/// is processed, without throwing an exception, and 
/// <see cref="IActorContext.Stop"/> which causes the actor to stop without processing any more messages. </para>
/// </summary>
/// <summary>
/// INTERNAL API
/// 
/// Used for remote death watch. Failure detectors publish this to the
/// <see cref="AddressTerminatedTopic"/> when a remote node is detected to be unreachable and / or decided
/// to be removed.
/// 
/// The watcher <see cref="DeathWatch"/> subscribes to the <see cref="AddressTerminatedTopic"/> and translates this
/// event to <see cref="Terminated"/>, which is sent to itself.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ICanTell.cs
//-----------------------------------------------------------------------
// <copyright file="ICanTell.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Inbox.Actor.cs
//-----------------------------------------------------------------------
// <copyright file="Inbox.Actor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: this should work as DequeueFirstOrDefault
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Inbox.cs
//-----------------------------------------------------------------------
// <copyright file="Inbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// LinkedList wrapper instead of Queue? While it's used for queueing, however I expect a lot of churn around 
// adding-removing elements. Additionally we have to get a functionality of dequeueing element meeting
// a specific predicate (even if it's in middle of queue), and current queue implementation won't provide that in easy way.
/// <summary>
/// <see cref="IInboxable"/> is an actor-like object to be listened by external objects.
/// It can watch other actors lifecycle and contains inner actor, which could be passed
/// as reference to other actors.
/// </summary>
/// <summary>
/// Get a reference to internal actor. It may be for example registered in event stream.
/// </summary>
/// <summary>
/// Receive a next message from current <see cref="IInboxable"/> with default timeout. This call will return immediately,
/// if the internal actor previously received a message, or will block until it'll receive a message.
/// </summary>
/// <summary>
/// Receive a next message from current <see cref="IInboxable"/>. This call will return immediately,
/// if the internal actor previously received a message, or will block for time specified by 
/// <paramref name="timeout"/> until it'll receive a message.
/// </summary>
/// <summary>
/// Receive a next message satisfying specified <paramref name="predicate"/> under default timeout.
/// </summary>
/// <summary>
/// Receive a next message satisfying specified <paramref name="predicate"/> under provided <paramref name="timeout"/>.
/// </summary>
/// <summary>
/// Makes an internal actor act as a proxy of given <paramref name="message"/>, 
/// which will be send to given <paramref cref="target"/> actor. It means, 
/// that all <paramref name="target"/>'s replies will be sent to current inbox instead.
/// </summary>
/// <summary>
/// Make the inbox’s actor watch the <paramref name="subject"/> actor such that 
/// reception of the <see cref="Terminated"/> message can then be awaited.
/// </summary>
/// <summary>
/// Receive a single message from <see cref="Receiver"/> actor with default timeout. 
/// NOTE: Timeout resolution depends on system's scheduler.
/// </summary>
/// <remarks>
/// Don't use this method within actors, since it block current thread until a message is received.
/// </remarks>
/// <summary>
/// Receive a single message from <see cref="Receiver"/> actor. 
/// Provided <paramref name="timeout"/> is used for cleanup purposes.
/// NOTE: <paramref name="timeout"/> resolution depends on system's scheduler.
/// </summary>
/// <remarks>
/// Don't use this method within actors, since it block current thread until a message is received.
/// </remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\INoSerializationVerificationNeeded.cs
//-----------------------------------------------------------------------
// <copyright file="INoSerializationVerificationNeeded.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Marker Interface INoSerializationVerificationNeeded, this interface prevents
///     implementing message types from being serialized if configuration setting 'akka.actor.serialize-messages' is "on"
/// </summary>
// ReSharper disable once InconsistentNaming
/// <summary>
/// Marker interface to indicate that a message might be potentially harmful;
/// this is used to block messages coming in over remoting.
/// </summary>
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\IUntypedActorContext.cs
//-----------------------------------------------------------------------
// <copyright file="IUntypedActorContext.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Interface IUntypedActorContext
/// </summary>
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the specified handler.
/// </summary>
/// <param name="receive">The new message handler.</param>
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the specified handler.
/// The current handler is stored on a stack, and you can revert to it by calling <see cref="IUntypedActorContext.UnbecomeStacked"/>
/// <remarks>Please note, that in order to not leak memory, make sure every call to <see cref="BecomeStacked"/>
/// is matched with a call to <see cref="IUntypedActorContext.UnbecomeStacked"/>.</remarks>
/// </summary>
/// <param name="receive">The new message handler.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\LocalActorRef.cs
//-----------------------------------------------------------------------
// <copyright file="LocalActorRef.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//This mimics what's done in Akka`s construction of an LocalActorRef.
//The actorCell is created in the overridable newActorCell() during creation of the instance.
//Since we don't want calls to virtual members in C# we must supply it. 
//
//This is the code from Akka:
//    private[akka] class LocalActorRef private[akka] (
//        _system: ActorSystemImpl,
//        _props: Props,
//        _dispatcher: MessageDispatcher,
//        _mailboxType: MailboxType,
//        _supervisor: InternalActorRef,
//        override val path: ActorPath) extends ActorRefWithCell with LocalRef {
//      private val actorCell: ActorCell = newActorCell(_system, this, _props, _dispatcher, _supervisor)
//      actorCell.init(sendSupervise = true, _mailboxType)
//      ...
//    }
//TODO: switch from  Func<Mailbox> createMailbox to MailboxType mailboxType      
//Intentionally left blank
/// <summary>
/// Inheritors should only call this constructor
/// </summary>
//TODO: switch from  Func<Mailbox> createMailbox to MailboxType mailboxType      
//Current is not a LocalActorRef
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\LocalScope.cs
//-----------------------------------------------------------------------
// <copyright file="LocalScope.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used to deploy actors in local scope
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Message.cs
//-----------------------------------------------------------------------
// <copyright file="Message.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Note: this is a struct in order to lower GC pressure, it will be removed once the mailbox Run call goes out of scope. //Roger
/// <summary>
///     Envelope class, represents a message and the sender of the message.    
/// </summary>
/// <summary>
///     Gets or sets the sender.
/// </summary>
/// <value>The sender.</value>
/// <summary>
///     Gets or sets the message.
/// </summary>
/// <value>The message.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\NameAndUid.cs
//-----------------------------------------------------------------------
// <copyright file="NameAndUid.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\PipeToSupport.cs
//-----------------------------------------------------------------------
// <copyright file="PipeToSupport.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Creates the PipeTo pattern for automatically sending the results of completed tasks
/// into the inbox of a designated Actor
/// </summary>
/// <summary>
/// Pipes the output of a Task directly to the <paramref name="recipient"/>'s mailbox once
/// the task completes
/// </summary>
/// <summary>
/// Pipes the output of a Task directly to the <paramref name="recipient"/>'s mailbox once
/// the task completes.  As this task has no result, only exceptions will be piped to the <paramref name="recipient"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Props.cs
//-----------------------------------------------------------------------
// <copyright file="Props.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Props is a configuration object used in creating an <see cref="Akka.Actor.ActorBase">Actor</see>; it is
///     immutable, so it is thread-safe and fully shareable.
/// <example>
/// <code>
///   private Props props = Props.Empty();
///   private Props props = Props.Create(() => new MyActor(arg1, arg2));
/// 
///   private Props otherProps = props.WithDispatcher("dispatcher-id");
///   private Props otherProps = props.WithDeploy(deployment info);
///  </code>
///  </example>
/// </summary>
//TODO: fix https://github.com/akkadotnet/akka.net/issues/599
//TODO: since arguments can be serialized, we can not compare by ref
//arguments may also not implement equality operators, so we can not structurally compare either
//we can not just call a serializer and compare outputs either, since different args may require diff serializer mechanics
//  hashCode = (hashCode*397) ^ (SupervisorStrategy != null ? SupervisorStrategy.GetHashCode() : 0);
//  hashCode = (hashCode*397) ^ (Arguments != null ? Arguments.GetHashCode() : 0);
/// <summary>
///     The default deploy
/// </summary>
/// <summary>
///     No args
/// </summary>
/// <summary>
///     A Props instance whose creator will create an actor that doesn't respond to any message
/// </summary>
/// <summary>
///     The none
/// </summary>
/// <summary>
///     The default producer
/// </summary>
/// <summary>
///     The intern type of the actor or the producer
/// </summary>
/// <summary>
///     The extern type of the actor
/// </summary>
/// <summary>
///     The producer of the actor
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Props" /> class.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Props" /> class from a copy.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Props" /> class.
/// </summary>
/// <param name="type">The type.</param>
/// <param name="args">The arguments.</param>
/// <summary>
///     Initializes a new instance of the <see cref="Props" /> class.
/// </summary>
/// <param name="type">The type.</param>
/// <summary>
///     Initializes a new instance of the <see cref="Props" /> class.
/// </summary>
/// <param name="type">The type.</param>
/// <param name="supervisorStrategy">The supervisor strategy.</param>
/// <param name="args">The arguments.</param>
/// <summary>
///     Initializes a new instance of the <see cref="Props" /> class.
/// </summary>
/// <param name="type">The type.</param>
/// <param name="supervisorStrategy">The supervisor strategy.</param>
/// <param name="args">The arguments.</param>
/// <summary>
///     Initializes a new instance of the <see cref="Props" /> class.
/// </summary>
/// <param name="deploy">The deploy.</param>
/// <param name="type">The type.</param>
/// <param name="args">The arguments.</param>
/// <summary>
///     Initializes a new instance of the <see cref="Props" /> class.
/// </summary>
/// <param name="deploy">The deploy.</param>
/// <param name="type">The type.</param>
/// <param name="args">The arguments.</param>
/// <summary>
///     Gets the type.
/// </summary>
/// <value>The type.</value>
/// <summary>
///     Gets or sets the dispatcher.
/// </summary>
/// <value>The dispatcher.</value>
/// <summary>
///     Gets or sets the mailbox.
/// </summary>
/// <value>The mailbox.</value>
//for serialization
/// <summary>
///     Gets or sets the router configuration.
/// </summary>
/// <value>The router configuration.</value>
/// <summary>
///     Gets or sets the deploy.
/// </summary>
/// <value>The deploy.</value>
/// <summary>
///     Gets or sets the supervisor strategy.
/// </summary>
/// <value>The supervisor strategy.</value>
/// <summary>
///     A Props instance whose creator will create an actor that doesn't respond to any message
/// </summary>
/// <value>The empty.</value>
/// <summary>
///     Gets the arguments.
/// </summary>
/// <value>The arguments.</value>
/// <summary>
///     Creates the specified factory.
/// </summary>
/// <typeparam name="TActor">The type of the actor.</typeparam>
/// <param name="factory">The factory.</param>
/// <param name="supervisorStrategy">Optional: Supervisor strategy</param>
/// <returns>Props.</returns>
/// <exception cref="System.ArgumentException">The create function must be a 'new T (args)' expression</exception>
/// <summary>
///     Creates this instance.
/// </summary>
/// <typeparam name="TActor">The type of the actor.</typeparam>
/// <returns>Props.</returns>
/// <summary>
///     Creates an actor by an actor producer
/// </summary>
/// <typeparam name="TProducer">The type of the actor producer</typeparam>
/// <param name="args">The arguments</param>
/// <returns>Props</returns>
/// <summary>
///     Creates this instance.
/// </summary>
/// <typeparam name="TActor">The type of the actor.</typeparam>
/// <returns>Props.</returns>
/// <summary>
///     Creates the specified type.
/// </summary>
/// <param name="type">The type.</param>
/// <param name="args"></param>
/// <returns>Props.</returns>
/// <summary>
///     Returns a new Props with the specified mailbox set.
/// </summary>
/// <param name="path">The path.</param>
/// <returns>Props.</returns>
/// <summary>
///     Returns a new Props with the specified dispatcher set.
/// </summary>
/// <param name="path">The path.</param>
/// <returns>Props.</returns>
/// <summary>
///     Returns a new Props with the specified router config set.
/// </summary>
/// <param name="routerConfig">The router configuration.</param>
/// <returns>Props.</returns>
/// <summary>
///     Returns a new Props with the specified deployment configuration.
/// </summary>
/// <param name="deploy">The deploy.</param>
/// <returns>Props.</returns>
// TODO: this is a hack designed to preserve explicit router deployments https://github.com/akkadotnet/akka.net/issues/546
// in reality, we should be able to do copy.Deploy = deploy.WithFallback(copy.Deploy); but that blows up at the moment
// - Aaron Stannard
//if (!(original.RouterConfig is NoRouter || original.RouterConfig is FromConfig) && deploy.RouterConfig is NoRouter)
//{
//    copy.Deploy = deploy.WithFallback(copy.Deploy);
//    copy.Deploy = deploy.WithRouterConfig(original.RouterConfig);
//}
////both configs describe valid, programmatically defined routers (usually clustered routers)
//else if (!(original.RouterConfig is NoRouter || original.RouterConfig is FromConfig) &&
//         !(deploy.RouterConfig is FromConfig))
//{
//    var deployedRouter = deploy.RouterConfig.WithFallback(original.RouterConfig);
//    copy.Deploy = copy.Deploy.WithRouterConfig(deployedRouter);
//}
//else
//{
//    copy.Deploy = deploy;
//}
/// <summary>
///     Returns a new Props with the specified supervisor strategy set.
/// </summary>
/// <param name="strategy">The strategy.</param>
/// <returns>Props.</returns>
//TODO: use Linq Expressions so compile a creator
//cache the creator
/// <summary>
///     Create a new actor instance. This method is only useful when called during
///     actor creation by the ActorSystem.
/// </summary>
/// <returns>ActorBase.</returns>
/// <summary>
///     Copies this instance.
/// </summary>
/// <returns>Props.</returns>
/// <summary>
/// EmptyActor is used by <see cref="Props.None"/> in order to create actors that
/// don't respond to any messages.
/// </summary>
/// <summary>
///     Props instance that uses dynamic invocation to create new Actor instances,
///     rather than a traditional Activator.
///     Intended to be used in conjunction with Dependency Injection.
/// </summary>
/// <typeparam name="TActor">The type of the actor.</typeparam>
/// <summary>
///     The _invoker
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="DynamicProps{TActor}" /> class.
/// </summary>
/// <param name="invoker">The invoker.</param>
/// <summary>
///     News the actor.
/// </summary>
/// <returns>ActorBase.</returns>
/// <summary>
///     Copy constructor
/// </summary>
/// <param name="copy">The copy.</param>
/// <param name="invoker">The invoker.</param>
/// <summary>
///     Copies this instance.
/// </summary>
/// <returns>Props.</returns>
/// <summary>
///     This interface defines a class of actor creation strategies deviating from
///     the usual default of just reflectively instantiating the <see cref="Akka.Actor.ActorBase">Actor</see>
///     subclass. It can be used to allow a dependency injection framework to
///     determine the actual actor class and how it shall be instantiated.
/// </summary>
/// <summary>
///     This factory method must produce a fresh actor instance upon each
///     invocation. It is not permitted to return the same instance more than
///     once.
/// </summary>
/// <returns>A fresh actor instance.</returns>
/// <summary>
///     This method is used by <see cref="Akka.Actor.Props"/> to determine the type of actor which will
///     be created. The returned type is not used to produce the actor.
/// </summary>
/// <summary>
/// This method is used by <see cref="Akka.Actor.Props"/> to signal the Producer that it can
/// release it's reference.  <see href="http://www.amazon.com/Dependency-Injection-NET-Mark-Seemann/dp/1935182501/ref=sr_1_1?ie=UTF8&qid=1425861096&sr=8-1&keywords=mark+seemann">HERE</see> 
/// </summary>
/// <param name="actor"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Receive.cs
//-----------------------------------------------------------------------
// <copyright file="Receive.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Delegate Receive
/// </summary>
/// <param name="message">The message.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ReceiveActor.cs
//-----------------------------------------------------------------------
// <copyright file="ReceiveActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//This might be called directly after the constructor, or when the same actor instance has been returned
//during recreate. Make sure what happens here is idempotent
//Do not perform this when "recreating" the same instance
/// <summary>
/// Creates and pushes a new MatchBuilder
/// </summary>
//Seal the method so that implementors cannot use it. They should only use Receive and Become
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the specified handler.
/// </summary>
/// <param name="configure">Configures the new handler by calling the different Receive overloads.</param>
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the specified handler.
/// The current handler is stored on a stack, and you can revert to it by calling <see cref="ActorBase.UnbecomeStacked"/>
/// <remarks>Please note, that in order to not leak memory, make sure every call to <see cref="BecomeStacked"/>
/// is matched with a call to <see cref="ActorBase.UnbecomeStacked"/>.</remarks>
/// </summary>
/// <param name="configure">Configures the new handler by calling the different Receive overloads.</param>
/// <summary>
/// Registers a handler for incoming messages of the specified type <typeparamref name="T"/>.
/// If <paramref name="shouldHandle"/>!=<c>null</c> then it must return true before a message is passed to <paramref name="handler"/>.
/// <remarks>This method may only be called when constructing the actor or from <see cref="Become(System.Action)"/> or <see cref="BecomeStacked"/>.</remarks>
/// <remarks>Note that handlers registered prior to this may have handled the message already. 
/// In that case, this handler will not be invoked.</remarks>
/// </summary>
/// <typeparam name="T">The type of the message</typeparam>
/// <param name="handler">The message handler that is invoked for incoming messages of the specified type <typeparamref name="T"/></param>
/// <param name="shouldHandle">When not <c>null</c> it is used to determine if the message matches.</param>
/// <summary>
/// Registers a handler for incoming messages of the specified type <typeparamref name="T"/>.
/// If <paramref name="shouldHandle"/>!=<c>null</c> then it must return true before a message is passed to <paramref name="handler"/>.
/// <remarks>This method may only be called when constructing the actor or from <see cref="Become(Action)"/> or <see cref="BecomeStacked"/>.</remarks>
/// <remarks>Note that handlers registered prior to this may have handled the message already. 
/// In that case, this handler will not be invoked.</remarks>
/// </summary>
/// <typeparam name="T">The type of the message</typeparam>
/// <param name="handler">The message handler that is invoked for incoming messages of the specified type <typeparamref name="T"/></param>
/// <param name="shouldHandle">When not <c>null</c> it is used to determine if the message matches.</param>
/// <summary>
/// Registers a handler for incoming messages of the specified <paramref name="messageType"/>.
/// If <paramref name="shouldHandle"/>!=<c>null</c> then it must return true before a message is passed to <paramref name="handler"/>.
/// <remarks>This method may only be called when constructing the actor or from <see cref="Become(Action)"/> or <see cref="BecomeStacked"/>.</remarks>
/// <remarks>Note that handlers registered prior to this may have handled the message already. 
/// In that case, this handler will not be invoked.</remarks>
/// </summary>
/// <param name="messageType">The type of the message</param>
/// <param name="handler">The message handler that is invoked for incoming messages of the specified <paramref name="messageType"/></param>
/// <param name="shouldHandle">When not <c>null</c> it is used to determine if the message matches.</param>
/// <summary>
/// Registers a handler for incoming messages of the specified <paramref name="messageType"/>.
/// If <paramref name="shouldHandle"/>!=<c>null</c> then it must return true before a message is passed to <paramref name="handler"/>.
/// <remarks>This method may only be called when constructing the actor or from <see cref="Become(Action)"/> or <see cref="BecomeStacked"/>.</remarks>
/// <remarks>Note that handlers registered prior to this may have handled the message already. 
/// In that case, this handler will not be invoked.</remarks>
/// </summary>
/// <param name="messageType">The type of the message</param>
/// <param name="handler">The message handler that is invoked for incoming messages of the specified <paramref name="messageType"/></param>
/// <param name="shouldHandle">When not <c>null</c> it is used to determine if the message matches.</param>
/// <summary>
/// Registers a handler for incoming messages of the specified type <typeparamref name="T"/>.
/// The handler should return <c>true</c> if it has handled the message. 
/// If the handler returns true no more handlers will be tried; otherwise the next registered handler will be tried.
/// <remarks>This method may only be called when constructing the actor or from <see cref="Become(Action)"/> or <see cref="BecomeStacked"/>.</remarks>
/// <remarks>Note that handlers registered prior to this may have handled the message already. 
/// In that case, this handler will not be invoked.</remarks>
/// </summary>
/// <typeparam name="T">The type of the message</typeparam>
/// <param name="handler">The message handler that is invoked for incoming messages of the 
/// specified type <typeparamref name="T"/>. It should return <c>true</c>if it handled/matched 
/// the message; <c>false</c> otherwise.</param>
/// <summary>
/// Registers a handler for incoming messages of the specified <paramref name="messageType"/>.
/// The handler should return <c>true</c> if it has handled the message. 
/// If the handler returns true no more handlers will be tried; otherwise the next registered handler will be tried.
/// <remarks>This method may only be called when constructing the actor or from <see cref="Become(Action)"/> or <see cref="BecomeStacked"/>.</remarks>
/// <remarks>Note that handlers registered prior to this may have handled the message already. 
/// In that case, this handler will not be invoked.</remarks>
/// </summary>
/// <param name="messageType">The type of the message</param>
/// <param name="handler">The message handler that is invoked for incoming messages of the 
/// specified type <paramref name="messageType"/>. It should return <c>true</c>if it handled/matched 
/// the message; <c>false</c> otherwise.</param>
/// <summary>
/// Registers a handler for incoming messages of any type.
/// <remarks>This method may only be called when constructing the actor or from <see cref="Become(Action)"/> or <see cref="BecomeStacked"/>.</remarks>
/// <remarks>Note that handlers registered prior to this may have handled the message already. 
/// In that case, this handler will not be invoked.</remarks>
/// </summary>
/// <param name="handler">The message handler that is invoked for all</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ReceiveTimeout.cs
//-----------------------------------------------------------------------
// <copyright file="ReceiveTimeout.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This message is sent to an actor that has set a receive timeout, either by calling 
/// <see cref="IActorContext.SetReceiveTimeout">Context.SetReceiveTimeout</see> or
/// <see cref="ActorBase.SetReceiveTimeout">SetReceiveTimeout</see>
/// and no message has been sent to the actor during the specified amount of time.
/// </summary>
/// <summary>
/// Gets the <see cref="ReceiveTimeout"/> singleton instance.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\RemoteScope.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteScope.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used to deploy actors on remote nodes at the specified <see cref="Address"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\RepointableActorRef.cs
//-----------------------------------------------------------------------
// <copyright file="RepointableActorRef.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Ok to ignore CS0420 "a reference to a volatile field will not be treated as volatile" for interlocked calls http://msdn.microsoft.com/en-us/library/4bw5ewxy(VS.80).aspx
//Ok to ignore CS0420 "a reference to a volatile field will not be treated as volatile" for interlocked calls http://msdn.microsoft.com/en-us/library/4bw5ewxy(VS.80).aspx
///<summary>
///Initialize: make a dummy cell which holds just a mailbox, then tell our
///supervisor that we exist so that he can create the real Cell in
///handleSupervise().
///Call twice on your own peril!
///This is protected so that others can have different initialization.
/// </summary>
///<summary>
///This method is supposed to be called by the supervisor in HandleSupervise()
///to replace the UnstartedCell with the real one. It assumes no concurrent
///modification of the `underlying` field, though it is safe to send messages
///at any time.
/// </summary>
// The problem here was that if the real actor (which will start running
// at cell.start()) creates children in its constructor, then this may
// happen before the swapCell in u.replaceWith, meaning that those
// children cannot be looked up immediately, e.g. if they shall become
// routees.
// underlying not being UnstartedCell happens routinely for things which were created async=false
//Intentionally left blank
//Akka does this. Not sure what it means. /HCanber
//   this.type = this
// systemMessages that are sent during replace need to jump to just after the last system message in the queue, so it's processed before other messages
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\RootGuardianActorRef.cs
//-----------------------------------------------------------------------
// <copyright file="RootGuardianActorRef.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: switch from  Func<Mailbox> createMailbox to MailboxType mailboxType
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\RootGuardianSupervisor.cs
//-----------------------------------------------------------------------
// <copyright file="RootGuardianSupervisor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Top-level anchor for the supervision hierarchy of this actor system.
/// Note: This class is called theOneWhoWalksTheBubblesOfSpaceTime in Akka
/// </summary>
//In akka this is root / "bubble-walker" 
// This comment comes from AKKA: TO DO register child in some map to keep track of it and enable shutdown after all dead
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scope.cs
//-----------------------------------------------------------------------
// <copyright file="Scope.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Defines the scope of a <see cref="Deploy"/>
/// 
/// Valid values are:
/// 
/// * Local - this actor will be deployed locally in this process
/// * Remote - this actor will be deployed remotely on another system
/// * Cluster - this actor will be deployed into a cluster of remote processes
/// </summary>
//we don't do equality checks on fallbacks
/// <summary>
/// Place-holder for when a scope of this deployment has not been specified yet
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Settings.cs
//-----------------------------------------------------------------------
// <copyright file="Settings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Settings are the overall ActorSystem Settings which also provides a convenient access to the Config object.
///     For more detailed information about the different possible configuration options, look in the Akka .NET
///     Documentation under "Configuration"
/// </summary>
/// <summary>
/// Combines the user config and the fallback chain of configs
/// </summary>
//if we get a new config definition loaded after all ActorRefProviders have been started, such as Akka.Persistence...
/// <summary>
/// Injects a system config at the top of the fallback chain
/// </summary>
/// <param name="config"></param>
/// <summary>
///     Initializes a new instance of the <see cref="Settings" /> class.
/// </summary>
/// <param name="system">The system.</param>
/// <param name="config">The configuration.</param>
//handled
//TODO: dunno.. we dont have FiniteStateMachines, dont know what the rest is
/*              
/// <summary>
///     Gets the system.
/// </summary>
/// <value>The system.</value>
/// <summary>
///     Gets the configuration.
/// </summary>
/// <value>The configuration.</value>
/// <summary>
///     Gets the configuration version.
/// </summary>
/// <value>The configuration version.</value>
/// <summary>
///     Gets the provider class.
/// </summary>
/// <value>The provider class.</value>
/// <summary>
///     Gets the supervisor strategy class.
/// </summary>
/// <value>The supervisor strategy class.</value>
/// <summary>
///     Gets a value indicating whether [serialize all messages].
/// </summary>
/// <value><c>true</c> if [serialize all messages]; otherwise, <c>false</c>.</value>
/// <summary>
///     Gets a value indicating whether [serialize all creators].
/// </summary>
/// <value><c>true</c> if [serialize all creators]; otherwise, <c>false</c>.</value>
/// <summary>
///     Gets the default timeout for <see cref="Futures.Ask" /> calls.
/// </summary>
/// <value>The ask timeout.</value>
/// <summary>
///     Gets the creation timeout.
/// </summary>
/// <value>The creation timeout.</value>
/// <summary>
///     Gets the unstarted push timeout.
/// </summary>
/// <value>The unstarted push timeout.</value>
/// <summary>
///     Gets the log level.
/// </summary>
/// <value>The log level.</value>
/// <summary>
///     Gets the stdout log level.
/// </summary>
/// <value>The stdout log level.</value>
/// <summary>
///     Gets the loggers.
/// </summary>
/// <value>The loggers.</value>
/// <summary>
///     Gets the logger start timeout.
/// </summary>
/// <value>The logger start timeout.</value>
/// <summary>
///     Gets a value indicating whether [log configuration on start].
/// </summary>
/// <value><c>true</c> if [log configuration on start]; otherwise, <c>false</c>.</value>
/// <summary>
///     Gets the log dead letters.
/// </summary>
/// <value>The log dead letters.</value>
/// <summary>
///     Gets a value indicating whether [log dead letters during shutdown].
/// </summary>
/// <value><c>true</c> if [log dead letters during shutdown]; otherwise, <c>false</c>.</value>
/// <summary>
///     Gets a value indicating whether [add logging receive].
/// </summary>
/// <value><c>true</c> if [add logging receive]; otherwise, <c>false</c>.</value>
/// <summary>
///     Gets a value indicating whether [debug automatic receive].
/// </summary>
/// <value><c>true</c> if [debug automatic receive]; otherwise, <c>false</c>.</value>
/// <summary>
///     Gets a value indicating whether [debug event stream].
/// </summary>
/// <value><c>true</c> if [debug event stream]; otherwise, <c>false</c>.</value>
/// <summary>
///     Gets a value indicating whether [debug unhandled message].
/// </summary>
/// <value><c>true</c> if [debug unhandled message]; otherwise, <c>false</c>.</value>
/// <summary>
///     Gets a value indicating whether [debug router misconfiguration].
/// </summary>
/// <value><c>true</c> if [debug router misconfiguration]; otherwise, <c>false</c>.</value>
/// <summary>
///     Gets the home.
/// </summary>
/// <value>The home.</value>
/// <summary>
///     Gets a value indicating whether [debug lifecycle].
/// </summary>
/// <value><c>true</c> if [debug lifecycle]; otherwise, <c>false</c>.</value>
/// <summary>
/// The number of default virtual nodes to use with <see cref="ConsistentHashingRoutingLogic"/>.
/// </summary>
/// <summary>
/// Gets the scheduler implementation used by this system.
/// </summary>
/// <summary>
///     Returns a <see cref="string" /> that represents this instance.
/// </summary>
/// <returns>A <see cref="string" /> that represents this instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\SupervisorStrategy.cs
//-----------------------------------------------------------------------
// <copyright file="SupervisorStrategy.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Base class for supervision strategies
/// </summary>
/// <summary>
///     Handles the specified child.
/// </summary>
/// <param name="child">The actor that caused the evaluation to occur</param>
/// <param name="x">The exception that caused the evaluation to occur.</param>
/// <returns>Directive.</returns>
/// <summary>
///     This is the main entry point: in case of a child’s failure, this method
///     must try to handle the failure by resuming, restarting or stopping the
///     child (and returning `true`), or it returns `false` to escalate the
///     failure, which will lead to this actor re-throwing the exception which
///     caused the failure. The exception will not be wrapped.
///     This method calls <see cref="Akka.Actor.SupervisorStrategy"/>, which will
///     log the failure unless it is escalated. You can customize the logging by
///     setting <see cref="Akka.Actor.SupervisorStrategy" /> to `false` and
///     do the logging inside the `decider` or override the `LogFailure` method.
/// </summary>
/// <param name="actorCell">The actor cell.</param>
/// <param name="cause">The cause.</param>
/// <param name="failedChildStats">The stats for the failed child.</param>
/// <param name="allChildren"></param>
/// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
/// <summary>
///     When supervisorStrategy is not specified for an actor this
///     Decider is used by default in the supervisor strategy.
///     The child will be stopped when <see cref="Akka.Actor.ActorInitializationException"/>,
///     <see cref="Akka.Actor.ActorKilledException"/>, or <see cref="Akka.Actor.DeathPactException"/> is
///     thrown. It will be restarted for other `Exception` types.
///     The error is escalated if it's a `Exception`, i.e. `Error`.
/// </summary>
/// <returns>Directive.</returns>
/// <summary>
///     Restarts the child.
/// </summary>
/// <param name="child">The child.</param>
/// <param name="cause">The cause.</param>
/// <param name="suspendFirst">if set to <c>true</c> [suspend first].</param>
/// <summary>
/// This method is called to act on the failure of a child: restart if the flag is true, stop otherwise.
/// </summary>
/// <param name="context">The actor context.</param>
/// <param name="restart">if set to <c>true</c> restart, stop otherwise.</param>
/// <param name="cause">The exception that caused the child to fail.</param>
/// <param name="failedChildStats">The stats for the child that failed. The ActorRef to the child can be obtained via the <see cref="ChildRestartStats.Child"/> property</param>
/// <param name="allChildren">The stats for all children</param>
/// <summary>
///  Resume the previously failed child: <b>do never apply this to a child which
///  is not the currently failing child</b>. Suspend/resume needs to be done in
///  matching pairs, otherwise actors will wake up too soon or never at all.
/// </summary>
/// <param name="child">The child.</param>
/// <param name="exception">The exception.</param>
/// <summary>
///     Logs the failure.
/// </summary>
/// <param name="context">The actor cell.</param>
/// <param name="child">The child.</param>
/// <param name="cause">The cause.</param>
/// <param name="directive">The directive.</param>
//Don't log here
//case Directive.Restart:
//case Directive.Stop:
// swallow any exceptions
/// <summary>
///     When supervisorStrategy is not specified for an actor this
///     is used by default. OneForOneStrategy with decider defined in
///     <see cref="DefaultDecider" />.
/// </summary>
/// <value>The default.</value>
/// <summary>
///     This strategy resembles Erlang in that failing children are always
///     terminated (one-for-one).
/// </summary>
/// <summary>
/// This method is called after the child has been removed from the set of children.
/// It does not need to do anything special. Exceptions thrown from this method
/// do NOT make the actor fail if this happens during termination.
/// </summary>
/// <summary>
///     Class OneForOneStrategy. This class cannot be inherited.
/// </summary>
/// <summary>
///     Applies the fault handling `Directive` (Resume, Restart, Stop) specified in the `Decider`
///     to all children when one fails, as opposed to <see cref="OneForOneStrategy" /> that applies
///     it only to the child actor that failed.
/// </summary>
/// <param name="maxNrOfRetries">
///     the number of times a child actor is allowed to be restarted, negative value means no limit,
///     if the limit is exceeded the child actor is stopped.
/// </param>
/// <param name="withinTimeRange">duration of the time window for maxNrOfRetries, Duration.Inf means no window.</param>
/// <param name="localOnlyDecider">mapping from Exception to <see cref="Directive" /></param>
//Intentionally left blank
/// <summary>
///     Applies the fault handling `Directive` (Resume, Restart, Stop) specified in the `Decider`
///     to all children when one fails, as opposed to <see cref="OneForOneStrategy" /> that applies
///     it only to the child actor that failed.
/// </summary>
/// <param name="maxNrOfRetries">
///     the number of times a child actor is allowed to be restarted, negative value means no limit,
///     if the limit is exceeded the child actor is stopped.
/// </param>
/// <param name="withinTimeRange">duration of the time window for maxNrOfRetries, Duration.Inf means no window.</param>
/// <param name="decider">mapping from Exception to <see cref="Directive" /></param>
//Intentionally left blank
/// <summary>
///     Applies the fault handling `Directive` (Resume, Restart, Stop) specified in the `Decider`
///     to all children when one fails, as opposed to <see cref="OneForOneStrategy" /> that applies
///     it only to the child actor that failed.
/// </summary>
/// <param name="maxNrOfRetries">
///     the number of times a child actor is allowed to be restarted, negative value means no limit,
///     if the limit is exceeded the child actor is stopped.
/// </param>
/// <param name="withinTimeMilliseconds">duration in milliseconds of the time window for <paramref name="maxNrOfRetries"/>, negative values means no window.</param>
/// <param name="localOnlyDecider">Mapping from an <see cref="Exception"/> to <see cref="Directive"/></param>
/// <param name="loggingEnabled">If <c>true</c> failures will be logged</param>
//Intentionally left blank
/// <summary>
///     Applies the fault handling `Directive` (Resume, Restart, Stop) specified in the `Decider`
///     to all children when one fails, as opposed to <see cref="OneForOneStrategy" /> that applies
///     it only to the child actor that failed.
/// </summary>
/// <param name="maxNrOfRetries">
///     the number of times a child actor is allowed to be restarted, negative value means no limit,
///     if the limit is exceeded the child actor is stopped.
/// </param>
/// <param name="withinTimeMilliseconds">duration in milliseconds of the time window for <paramref name="maxNrOfRetries"/>, negative values means no window.</param>
/// <param name="decider">Mapping from an <see cref="Exception"/> to <see cref="Directive"/></param>
/// <param name="loggingEnabled">If <c>true</c> failures will be logged</param>
/// <summary>
/// Constructor that accepts only a decider and uses reasonable defaults for the other settings
/// </summary>
//Intentionally left blank
/// <summary>
/// Constructor that accepts only a decider and uses reasonable defaults for the other settings
/// </summary>
//Intentionally left blank
/// <summary>
/// Serialization-friendly constructor
/// </summary>
//Intentionally left blank
/// <summary>
///     Handles the specified child.
/// </summary>
/// <param name="child">The child.</param>
/// <param name="x">The x.</param>
/// <returns>Directive.</returns>
//Intentionally left blank
/// <summary>
///     Class AllForOneStrategy. This class cannot be inherited.
/// </summary>
/// <summary>
///     Applies the fault handling `Directive` (Resume, Restart, Stop) specified in the `Decider`
///     to all children when one fails, as opposed to <see cref="AllForOneStrategy" /> that applies
///     it only to the child actor that failed.
/// </summary>
/// <param name="maxNrOfRetries">
///     the number of times a child actor is allowed to be restarted, negative value and null means no limit,
///     if the limit is exceeded the child actor is stopped.
/// </param>
/// <param name="withinTimeRange">duration of the time window for maxNrOfRetries, <see cref="Timeout.InfiniteTimeSpan"/> means no window.</param>
/// <param name="localOnlyDecider">mapping from Exception to <see cref="Directive"/></param>
//Intentionally left blank
/// <summary>
///     Applies the fault handling `Directive` (Resume, Restart, Stop) specified in the `Decider`
///     to all children when one fails, as opposed to <see cref="AllForOneStrategy" /> that applies
///     it only to the child actor that failed.
/// </summary>
/// <param name="maxNrOfRetries">
///     the number of times a child actor is allowed to be restarted, negative value and null means no limit,
///     if the limit is exceeded the child actor is stopped.
/// </param>
/// <param name="withinTimeRange">duration of the time window for maxNrOfRetries, <see cref="Timeout.InfiniteTimeSpan"/> means no window.</param>
/// <param name="decider">mapping from Exception to <see cref="Directive"/></param>
//Intentionally left blank
/// <summary>
///     Applies the fault handling `Directive` (Resume, Restart, Stop) specified in the `Decider`
///     to all children when one fails, as opposed to <see cref="AllForOneStrategy" /> that applies
///     it only to the child actor that failed.
/// </summary>
/// <param name="maxNrOfRetries">
///     the number of times a child actor is allowed to be restarted, negative value means no limit,
///     if the limit is exceeded the child actor is stopped.
/// </param>
/// <param name="withinTimeMilliseconds">duration in milliseconds of the time window for <paramref name="maxNrOfRetries"/>, negative values means no window.</param>
/// <param name="localOnlyDecider">Mapping from an <see cref="Exception"/> to <see cref="Directive"/></param>
/// <param name="loggingEnabled">If <c>true</c> failures will be logged</param>
//Intentionally left blank
/// <summary>
///     Applies the fault handling `Directive` (Resume, Restart, Stop) specified in the `Decider`
///     to all children when one fails, as opposed to <see cref="AllForOneStrategy" /> that applies
///     it only to the child actor that failed.
/// </summary>
/// <param name="maxNrOfRetries">
///     the number of times a child actor is allowed to be restarted, negative value means no limit,
///     if the limit is exceeded the child actor is stopped.
/// </param>
/// <param name="withinTimeMilliseconds">duration in milliseconds of the time window for <paramref name="maxNrOfRetries"/>, negative values means no window.</param>
/// <param name="decider">Mapping from an <see cref="Exception"/> to <see cref="Directive"/></param>
/// <param name="loggingEnabled">If <c>true</c> failures will be logged</param>
/// <summary>
/// Constructor that accepts only a decider and uses reasonable defaults for the other settings
/// </summary>
//Intentionally left blank
/// <summary>
/// Constructor that accepts only a decider and uses reasonable defaults for the other settings
/// </summary>
//Intentionally left blank
/// <summary>
/// Serialization-friendly constructor
/// </summary>]
//Intentionally left blank
/// <summary>
///     Determines what to do with the child when the given exception occurs.
/// </summary>
/// <param name="child">The child.</param>
/// <param name="x">The x.</param>
/// <returns>Directive.</returns>
//Intentionally left blank
/// <summary>
///     Collection of failures, used to keep track of how many times a given actor have failed.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Failures" /> class.
/// </summary>
/// <summary>
///     Gets the entries.
/// </summary>
/// <value>The entries.</value>
/// <summary>
///     Represents a single failure.
/// </summary>
/// <summary>
///     The exception that caused the failure.
/// </summary>
/// <value>The exception.</value>
/// <summary>
///     The timestamp when the failure occurred.
/// </summary>
/// <value>The timestamp.</value>
/// <summary>
///     Enum Directive for supervisor actions
/// </summary>
/// <summary>
///     Resumes message processing for the failed Actor
/// </summary>
/// <summary>
///     Discards the old Actor instance and replaces it with a new,
///     then resumes message processing.
/// </summary>
/// <summary>
///     Escalates the failure to the supervisor of the supervisor,
///     by rethrowing the cause of the failure, i.e. the supervisor fails with
///     the same exception as the child.
/// </summary>
/// <summary>
///     Stops the Actor
/// </summary>
//Json .net can not decide which of the other ctors are the correct one to use
//so we fall back to default ctor and property injection for deserializer
//emulate if (cause is SomeType)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\TypedActor.cs
//-----------------------------------------------------------------------
// <copyright file="TypedActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Interface IHandle
/// </summary>
/// <typeparam name="TMessage">The type of the t message.</typeparam>
/// <summary>
///     Handles the specified message.
/// </summary>
/// <param name="message">The message.</param>
/// <summary>
///     Class TypedActor.
/// </summary>
/// <summary>
///     Processor for user defined messages.
/// </summary>
/// <param name="message">The message.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\UntypedActor.cs
//-----------------------------------------------------------------------
// <copyright file="UntypedActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Class UntypedActor.
/// </summary>
/// <summary>
/// To be implemented by concrete UntypedActor, this defines the behavior of the UntypedActor.
/// This method is called for every message received by the actor.
/// </summary>
/// <param name="message">The message.</param>
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the specified handler.
/// </summary>
/// <param name="receive">The new message handler.</param>
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the specified handler.
/// The current handler is stored on a stack, and you can revert to it by calling <see cref="IUntypedActorContext.UnbecomeStacked"/>
/// <remarks>Please note, that in order to not leak memory, make sure every call to <see cref="BecomeStacked"/>
/// is matched with a call to <see cref="IUntypedActorContext.UnbecomeStacked"/>.</remarks>
/// </summary>
/// <param name="receive">The new message handler.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\UntypedReceive.cs
//-----------------------------------------------------------------------
// <copyright file="UntypedReceive.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Delegate UntypedReceive
/// </summary>
/// <param name="message">The message.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Cancellation\AlreadyCanceledCancelable.cs
//-----------------------------------------------------------------------
// <copyright file="AlreadyCanceledCancelable.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A <see cref="ICancelable"/> that is already canceled.
/// </summary>
//Intentionally left blank
//Intentionally left blank            
//Intentionally left blank            
//Intentionally left blank
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Cancellation\Cancelable.cs
//-----------------------------------------------------------------------
// <copyright file="Cancelable.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A <see cref="ICancelable"/> that wraps a <see cref="CancellationTokenSource"/>. 
/// When canceling this instance the underlying <see cref="CancellationTokenSource"/> is canceled as well.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Cancelable"/> class that will be cancelled after the specified amount of time.
/// </summary>
/// <param name="scheduler">The scheduler.</param>
/// <param name="delay">The delay before the cancelable is canceled.</param>
/// <summary>
/// Initializes a new instance of the <see cref="Cancelable"/> class that will be cancelled after the specified amount of time.
/// </summary>
/// <param name="scheduler">The scheduler.</param>
/// <param name="delay">The delay before the cancelable is canceled.</param>
/// <summary>
/// Initializes a new instance of the <see cref="Cancelable"/> class that will be cancelled after the specified amount of milliseconds.
/// </summary>
/// <param name="scheduler">The scheduler.</param>
/// <param name="millisecondsDelay">The delay in milliseconds.</param>
/// <summary>
/// Initializes a new instance of the <see cref="Cancelable"/> class.
/// </summary>
/// <param name="scheduler"></param>
//Intentionally left blank
/// <summary>
/// Initializes a new instance of the <see cref="Cancelable"/> class.
/// </summary>
/// <param name="scheduler"></param>
//Intentionally left blank
//TODO: Remove this line and make it private when DeprecatedSchedulerExtensions is removed
//If the scheduler is using the system time, we can optimize for that
//Use the built in functionality on CancellationTokenSource which is
//likely more lightweight than using the scheduler
/// <summary>
/// Returns a <see cref="ICancelable"/> that has already been canceled.
/// </summary>
/// <summary>
/// Creates a <see cref="ICancelable"/> that will be in the canceled state
/// when any of the source cancelables are in the canceled state. 
/// </summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="cancelables">The cancelables instances to observe.</param>
/// <returns>A new <see cref="ICancelable"/> that is linked to the source .</returns>
/// <summary>
/// Creates a <see cref="ICancelable"/> that will be in the canceled state
/// when any of the source cancelables are in the canceled state. 
/// </summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="cancelables">The cancelables instances to observe.</param>
/// <returns>A new <see cref="ICancelable"/> that is linked to the source .</returns>
//  Dispose ---------------------------------------------------------------
//Automatically initialized to false;
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
//Take this object off the finalization queue and prevent finalization code for this object
//from executing a second time.
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
/// <param name="disposing">if set to <c>true</c> the method has been called directly or indirectly by a 
/// user's code. Managed and unmanaged resources will be disposed.<br />
/// if set to <c>false</c> the method has been called by the runtime from inside the finalizer and only 
/// unmanaged resources can be disposed.</param>
// If disposing equals false, the method has been called by the
// runtime from inside the finalizer and you should not reference
// other objects. Only unmanaged resources can be disposed.
//Make sure Dispose does not get called more than once, by checking the disposed field
//Clean up managed resources
//Clean up unmanaged resources
// base.dispose(disposing);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Cancellation\CancelableExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="CancelableExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// If <paramref name="cancelable"/> is not <c>null</c> it's canceled.
/// </summary>
/// <param name="cancelable">The cancelable. Will be canceled if it's not <c>null</c></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Cancellation\ICancellable.cs
//-----------------------------------------------------------------------
// <copyright file="ICancellable.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Signifies something that can be canceled
/// </summary>
/// <summary>
/// Communicates a request for cancellation.
/// </summary>
/// <remarks>The associated cancelable will be notified of the cancellation and will transition to a state where 
/// <see cref="IsCancellationRequested"/> returns <c>true</c>.
/// Any callbacks or cancelable operations registered with the cancelable will be executed.
/// Cancelable operations and callbacks registered with the token should not throw exceptions.
/// However, this overload of Cancel will aggregate any exceptions thrown into an 
/// <see cref="AggregateException"/>, such that one callback throwing an exception will not 
/// prevent other registered callbacks from being executed.
/// The <see cref="ExecutionContext"/> that was captured when each callback was registered will 
/// be reestablished when the callback is invoked.</remarks>
/// <summary>
/// Gets a value indicating whether cancellation has been requested
/// </summary>
/// <summary>
/// Schedules a cancel operation on this cancelable after the specified delay.
/// </summary>
/// <param name="delay">The delay before this instance is canceled.</param>
/// <summary>
/// Schedules a cancel operation on this cancelable after the specified number of milliseconds.
/// </summary>
/// <param name="millisecondsDelay">The delay in milliseconds before this instance is canceled.</param>
/// <summary>
/// Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed.
/// </summary>
/// <param name="throwOnFirstException"><c>true</c> if exceptions should immediately propagate; otherwise, <c>false</c>.</param>
/// <remarks>The associated cancelable will be notified of the cancellation and will transition to a state where 
/// <see cref="IsCancellationRequested"/> returns <c>true</c>.
/// Any callbacks or cancelable operations registered with the cancelable will be executed.
/// Cancelable operations and callbacks registered with the token should not throw exceptions.
/// If <paramref name="throwOnFirstException"/> is <c>true</c>, an exception will immediately propagate out of 
/// the call to Cancel, preventing the remaining callbacks and cancelable operations from being processed.
/// If <paramref name="throwOnFirstException"/> is <c>false</c>, this overload will aggregate any exceptions 
/// thrown into an <see cref="AggregateException"/>, such that one callback throwing an exception will not 
/// prevent other registered callbacks from being executed.
/// The <see cref="ExecutionContext"/> that was captured when each callback was registered will be reestablished when the callback is invoked.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ChildrenContainer\Internal\ChildrenContainer.cs
//-----------------------------------------------------------------------
// <copyright file="ChildrenContainer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ChildrenContainer\Internal\ChildrenContainerBase.cs
//-----------------------------------------------------------------------
// <copyright file="ChildrenContainerBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Since the actor exists, ChildRestartStats is the only valid ChildStats.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ChildrenContainer\Internal\ChildStats.cs
//-----------------------------------------------------------------------
// <copyright file="ChildStats.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/* Intentionally left blank */}
/// <summary>
/// ChildRestartStats is the statistics kept by every parent Actor for every child Actor
/// and is used for SupervisorStrategies to know how to deal with problems that occur for the children.
/// </summary>
//retriesWindow match {
//  case (Some(retries), _) if retries < 1 ⇒ false
//  case (Some(retries), None)             ⇒ { maxNrOfRetriesCount += 1; maxNrOfRetriesCount <= retries }
//  case (x, Some(window))                 ⇒ retriesInWindowOkay(if (x.isDefined) x.get else 1, window)
//  case (None, _)                         ⇒ true
//}
// Simple window algorithm: window is kept open for a certain time
// after a restart and if enough restarts happen during this time, it
// denies. Otherwise window closes and the scheme starts over.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ChildrenContainer\Internal\EmptyChildrenContainer.cs
//-----------------------------------------------------------------------
// <copyright file="EmptyChildrenContainer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is the empty container, shared among all leaf actors.
/// </summary>
//Intentionally left blank
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ChildrenContainer\Internal\NormalChildrenContainer.cs
//-----------------------------------------------------------------------
// <copyright file="NormalChildrenContainer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Normal children container: we do have at least one child, but none of our
/// children are currently terminating (which is the time period between calling
/// context.stop(child) and processing the ChildTerminated() system message).
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ChildrenContainer\Internal\SuspendReason.cs
//-----------------------------------------------------------------------
// <copyright file="SuspendReason.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
// ReSharper disable once InconsistentNaming
//Intentionally left blank
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
//Intentionally left blank
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ChildrenContainer\Internal\TerminatedChildrenContainer.cs
//-----------------------------------------------------------------------
// <copyright file="TerminatedChildrenContainer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is the empty container which is installed after the last child has
/// terminated while stopping; it is necessary to distinguish from the normal
/// empty state while calling handleChildTerminated() for the last time.
/// </summary>
//Intentionally left blank
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\ChildrenContainer\Internal\TerminatingChildrenContainer.cs
//-----------------------------------------------------------------------
// <copyright file="TerminatingChildrenContainer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Waiting state: there are outstanding termination requests (i.e. context.stop(child)
/// was called but the corresponding ChildTerminated() system message has not yet been
/// processed). There could be no specific reason (UserRequested), we could be Restarting
/// or Terminating.
/// Removing the last child which was supposed to be terminating will return a different
/// type of container, depending on whether or not children are left and whether or not
/// the reason was “Terminating”.
/// </summary>
//Intentionally left blank
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Dsl\Act.cs
//-----------------------------------------------------------------------
// <copyright file="Act.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Changes the actor's behavior and replaces the current handler with the specified handler.
/// </summary>
/// <summary>
/// Changes the actor's behavior and replaces the current handler with the specified handler without discarding the current.
/// The current handler is stored on a stack, and you can revert to it by calling <see cref="UnbecomeStacked"/>
/// <remarks>Please note, that in order to not leak memory, make sure every call to <see cref="BecomeStacked"/>
/// is matched with a call to <see cref="UnbecomeStacked"/>.</remarks>
/// </summary>
/// <summary>
/// Changes the actor's behavior and replaces the current handler with the previous one on the behavior stack.
/// <remarks>In order to store an actor on the behavior stack, a call to <see cref="BecomeStacked"/> must have been made
/// prior to this call</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Internal\ActorSystemImpl.cs
//-----------------------------------------------------------------------
// <copyright file="ActorSystemImpl.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>Creates a new system actor.</summary>
/// <summary>Creates a new system actor.</summary>
/// <summary>Starts this system</summary>
/// <summary>
/// Load all of the extensions registered in the <see cref="ActorSystem.Settings"/>
/// </summary>
/// <summary>
///     Configures the settings.
/// </summary>
/// <param name="config">The configuration.</param>
/// <summary>
///     Configures the event stream.
/// </summary>
/// <summary>
///     Configures the serialization.
/// </summary>
/// <summary>
///     Configures the mailboxes.
/// </summary>
/// <summary>
///     Configures the provider.
/// </summary>
/// <summary>
/// Extensions depends on loggers being configured before Start() is called
/// </summary>
/// <summary>
///     Configures the dispatchers.
/// </summary>
/// <summary>
/// Configures the actor producer pipeline.
/// </summary>
// we push Log in lazy manner since it may not be configured at point of pipeline initialization
/// <summary>
/// Configures the termination callbacks.
/// </summary>
/// <summary>
/// Register a block of code (callback) to run after ActorSystem.shutdown has been issued and
/// all actors in this actor system have been stopped.
/// Multiple code blocks may be registered by calling this method multiple times.
/// The callbacks will be run sequentially in reverse order of registration, i.e.
/// last registration is run first.
/// </summary>
/// <param name="code">The code to run</param>
/// <exception cref="Exception">Thrown if the System has already shut down or if shutdown has been initiated.</exception>
/// <summary>
///     Stop this actor system. This will stop the guardian actor, which in turn
///     will recursively stop all its child actors, then the system guardian
///     (below which the logging actors reside) and the execute all registered
///     termination handlers (<see cref="ActorSystem.RegisterOnTermination" />).
/// </summary>
//The cancellationToken was canceled.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Internal\InitializableActor.cs
//-----------------------------------------------------------------------
// <copyright file="InitializableActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Marks that the actor needs to be initialized directly after it has been created.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Internal\InternalCurrentActorCellKeeper.cs
//-----------------------------------------------------------------------
// <copyright file="InternalCurrentActorCellKeeper.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>INTERNAL!
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>INTERNAL!
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Internal\InternalSupportsTestFSMRef.cs
//-----------------------------------------------------------------------
// <copyright file="InternalSupportsTestFSMRef.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API. Used for testing.
/// This is used to let TestFSMRef in TestKit access to internal methods.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// INTERNAL API. Used for testing.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// INTERNAL API. Used for testing.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// INTERNAL API. Used for testing.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// INTERNAL API. Used for testing.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scheduler\DateTimeNowTimeProvider.cs
//-----------------------------------------------------------------------
// <copyright file="DateTimeNowTimeProvider.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scheduler\DedicatedThreadScheduler.cs
//-----------------------------------------------------------------------
// <copyright file="DedicatedThreadScheduler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: use some more efficient approach to handle future work
//has work already expired?
//buffer it for later
//this is completely stupid, but does work.. 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scheduler\DeprecatedSchedulerExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="DeprecatedSchedulerExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//When removing this class, also make this constructor private:  internal CancellationTokenSourceCancelable(CancellationTokenSource source)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scheduler\IActionScheduler.cs
//-----------------------------------------------------------------------
// <copyright file="IActionScheduler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A scheduler able of scheduling actions
/// </summary>
/// <summary>
/// Schedules an action to be invoked after an delay.
/// The action will be wrapped so that it completes inside the currently active actor if it is called from within an actor.
/// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
/// </summary>
/// <param name="delay">The time period that has to pass before the action is invoked.</param>
/// <param name="action">The action to perform.</param>
/// <param name="cancelable">A cancelable that can be used to cancel the action from being executed</param>
/// <summary>
/// Schedules an action to be invoked after an delay.
/// The action will be wrapped so that it completes inside the currently active actor if it is called from within an actor.
/// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
/// </summary>
/// <param name="delay">The time period that has to pass before the action is invoked.</param>
/// <param name="action">The action to perform.</param>
/// <summary>
/// Schedules an action to be invoked after an initial delay and then repeatedly.
/// The action will be wrapped so that it completes inside the currently active actor if it is called from within an actor
/// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
/// </summary>
/// <param name="initialDelay">The time period that has to pass before first invocation.</param>
/// <param name="interval">The interval, i.e. the time period that has to pass between the action is invoked.</param>
/// <param name="action">The action to perform.</param>
/// <param name="cancelable">A cancelable that can be used to cancel the action from being executed</param>
/// <summary>
/// Schedules an action to be invoked after an initial delay and then repeatedly.
/// The action will be wrapped so that it completes inside the currently active actor if it is called from within an actor
/// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
/// </summary>
/// <param name="initialDelay">The time period that has to pass before first invocation.</param>
/// <param name="interval">The interval, i.e. the time period that has to pass between the action is invoked.</param>
/// <param name="action">The action to perform.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scheduler\IAdvancedScheduler.cs
//-----------------------------------------------------------------------
// <copyright file="IAdvancedScheduler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scheduler\IDateTimeNowTimeProvider.cs
//-----------------------------------------------------------------------
// <copyright file="IDateTimeNowTimeProvider.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Marks that an <see cref="ITimeProvider"/> uses <see cref="DateTimeOffset.UtcNow"/>, 
/// i.e. system time, to provide <see cref="ITimeProvider.Now"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scheduler\IScheduler.cs
//-----------------------------------------------------------------------
// <copyright file="IScheduler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Gets the advanced scheduler which will allow you to schedule actions. 
/// <remarks>Note! It's considered bad practice to use concurrency inside actors and very easy to get wrong so usage is discouraged.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scheduler\ITellScheduler.cs
//-----------------------------------------------------------------------
// <copyright file="ITellScheduler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A scheduler that's able to schedule sending messages.
/// </summary>
/// <summary>Schedules to send a message once after a specified period of time.</summary>
/// <param name="delay">The time period that has to pass before the message is sent.</param>
/// <param name="receiver">The receiver.</param>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <summary>Schedules to send a message once after a specified period of time.</summary>
/// <param name="delay">The time period that has to pass before the message is sent.</param>
/// <param name="receiver">The receiver.</param>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <param name="cancelable">An <see cref="ICancelable"/> that can be used to cancel sending of the message. Once the message has been sent, it cannot be canceled.</param>
/// <summary>Schedules to send a message repeatedly. The first message will be sent after the specified initial delay and there after at the rate specified.</summary>
/// <param name="initialDelay">The time period that has to pass before the first message is sent.</param>
/// <param name="interval">The interval, i.e. the time period that has to pass between messages are being sent.</param>
/// <param name="receiver">The receiver.</param>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <summary>Schedules to send a message repeatedly. The first message will be sent after the specified initial delay and there after at the rate specified.</summary>
/// <param name="initialDelay">The time period that has to pass before the first message is sent.</param>
/// <param name="interval">The interval, i.e. the time period that has to pass between messages are being sent.</param>
/// <param name="receiver">The receiver.</param>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <param name="cancelable">An <see cref="ICancelable"/> that can be used to cancel sending of the message. Once the message has been sent, it cannot be canceled.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scheduler\ITimeProvider.cs
//-----------------------------------------------------------------------
// <copyright file="ITimeProvider.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Gets the scheduler's notion of current time.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scheduler\SchedulerBase.cs
//-----------------------------------------------------------------------
// <copyright file="SchedulerBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Scheduler\SchedulerExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="SchedulerExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>Schedules to send a message once after a specified period of time.</summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="millisecondsDelay">The time in milliseconds that has to pass before the message is sent.</param>
/// <param name="receiver">The receiver.</param>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <param name="cancelable">OPTIONAL. An <see cref="ICancelable"/> that can be used to cancel sending of the message. Note that once the message has been sent, it cannot be canceled.</param>
/// <summary>Schedules to send a message repeatedly. The first message will be sent after the specified initial delay and there after at the rate specified.</summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="initialMillisecondsDelay">The time in milliseconds that has to pass before the first message is sent.</param>
/// <param name="millisecondsInterval">The interval, i.e. the time in milliseconds that has to pass between messages are being sent.</param>
/// <param name="receiver">The receiver.</param>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <param name="cancelable">OPTIONAL. An <see cref="ICancelable"/> that can be used to cancel sending of the message. Note that once the message has been sent, it cannot be canceled.</param>
/// <summary>
/// Schedules an action to be invoked after an delay.
/// The action will be wrapped so that it completes inside the currently active actor if it is called from within an actor.
/// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
/// </summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="millisecondsDelay">The time in milliseconds that has to pass before the action is invoked.</param>
/// <param name="action">The action to perform.</param>
/// <param name="cancelable">OPTIONAL. A cancelable that can be used to cancel the action from being executed. Defaults to <c>null</c></param>
/// <summary>
/// Schedules an action to be invoked after an initial delay and then repeatedly.
/// The action will be wrapped so that it completes inside the currently active actor if it is called from within an actor
/// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
/// </summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="initialMillisecondsDelay">The time in milliseconds that has to pass before first invocation.</param>
/// <param name="millisecondsInterval">The interval, i.e. the time in milliseconds that has to pass before the action is invoked again.</param>
/// <param name="action">The action to perform.</param>
/// <param name="cancelable">OPTIONAL. A cancelable that can be used to cancel the action from being executed. Defaults to <c>null</c></param>
/// <summary>Schedules to send a message once after a specified period of time.</summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="delay">The time period that has to pass before the message is sent.</param>
/// <param name="receiver">The receiver.</param>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <returns>An <see cref="ICancelable"/> that can be used to cancel sending of the message. Once the message already has been sent, it cannot be cancelled.</returns>
/// <summary>Schedules to send a message once after a specified period of time.</summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="millisecondsDelay">The time in milliseconds that has to pass before the message is sent.</param>
/// <param name="receiver">The receiver.</param>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <returns>An <see cref="ICancelable"/> that can be used to cancel sending of the message. Once the message already has been sent, it cannot be cancelled.</returns>
/// <summary>Schedules to send a message repeatedly. The first message will be sent after the specified initial delay and there after at the rate specified.</summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="initialDelay">The time period that has to pass before the first message is sent.</param>
/// <param name="interval">The interval, i.e. the time period that has to pass between messages are being sent.</param>
/// <param name="receiver">The receiver.</param>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <returns>An <see cref="ICancelable"/> that can be used to cancel sending of the message. Once the message already has been sent, it cannot be cancelled.</returns>
/// <summary>Schedules to send a message repeatedly. The first message will be sent after the specified initial delay and there after at the rate specified.</summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="initialMillisecondsDelay">The time in milliseconds that has to pass before the first message is sent.</param>
/// <param name="millisecondsInterval">The interval, i.e. the time in milliseconds that has to pass between messages are sent.</param>
/// <param name="receiver">The receiver.</param>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <returns>An <see cref="ICancelable"/> that can be used to cancel sending of the message. Once the message already has been sent, it cannot be cancelled.</returns>
/// <summary>
/// Schedules an action to be invoked after an delay.
/// </summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="delay">The time period that has to pass before the action is invoked.</param>
/// <param name="action">The action to perform.</param>
/// <returns>A cancelable that can be used to cancel the action from being executed</returns>
/// <summary>
/// Schedules an action to be invoked after an delay.
/// </summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="millisecondsDelay">The time in milliseconds that has to pass before the action is invoked.</param>
/// <param name="action">The action to perform.</param>
/// <returns>A cancelable that can be used to cancel the action from being executed</returns>
/// <summary>
/// Schedules an action to be invoked after an initial delay and then repeatedly.
/// </summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="initialDelay">The time period that has to pass before first invocation.</param>
/// <param name="interval">The interval, i.e. the time period that has to pass between the action is invoked.</param>
/// <param name="action">The action to perform.</param>
/// <returns>A cancelable that can be used to cancel the action from being executed</returns>
/// <summary>
/// Schedules an action to be invoked after an initial delay and then repeatedly.
/// </summary>
/// <param name="scheduler">The scheduler</param>
/// <param name="initialMillisecondsDelay">The time in milliseconds that has to pass before first invocation.</param>
/// <param name="millisecondsInterval">The interval, i.e. the time in milliseconds that has to pass between the action is invoked.</param>
/// <param name="action">The action to perform.</param>
/// <returns>A cancelable that can be used to cancel the action from being executed</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Stash\IActorStash.cs
//-----------------------------------------------------------------------
// <copyright file="IActorStash.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Marker interface for adding stash support
/// </summary>
/// <summary>
/// Gets or sets the stash. This will be automatically populated by the framework AFTER the constructor has been run.
/// Implement this as an auto property.
/// </summary>
/// <value>
/// The stash.
/// </value>
/// <summary>
/// Stash plugin is applied to all actors implementing <see cref="IActorStash"/> interface.
/// </summary>
/// <summary>
/// Creates a new stash for specified <paramref name="actor"/> if it has not been initialized already.
/// </summary>
/// <summary>
/// Ensures, that all stashed messages inside <paramref name="actor"/> stash have been unstashed.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Stash\IStash.cs
//-----------------------------------------------------------------------
// <copyright file="IStash.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Public interface used to expose stash capabilities to user-level actors
/// </summary>
/// <summary>
/// Stashes the current message (the message that the actor received last)
/// </summary>
/// <summary>
/// Unstash the oldest message in the stash and prepends it to the actor's mailbox.
/// The message is removed from the stash.
/// </summary>
/// <summary>
/// Unstashes all messages by prepending them to the actor's mailbox.
/// The stash is guaranteed to be empty afterwards.
/// </summary>
/// <summary>
/// Unstashes all messages selected by the predicate function. Other messages are discarded.
/// The stash is guaranteed to be empty afterwards.
/// </summary>
/// <summary>
/// Returns all messages and clears the stash.
/// The stash is guaranteed to be empty afterwards.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Stash\IWithBoundedStash.cs
//-----------------------------------------------------------------------
// <copyright file="IWithBoundedStash.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Lets the <see cref="StashFactory"/> know that this Actor needs stash support
/// with restricted storage capacity
/// You need to add the property:
/// <code>public IStash Stash { get; set; }</code>
/// </summary>
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Stash\IWithUnboundedStash.cs
//-----------------------------------------------------------------------
// <copyright file="IWithUnboundedStash.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Lets the <see cref="StashFactory"/> know that this Actor needs stash support
/// with unrestricted storage capacity.
/// You need to add the property:
/// <code>public IStash Stash { get; set; }</code>
/// </summary>
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Stash\StashFactory.cs
//-----------------------------------------------------------------------
// <copyright file="StashFactory.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Static factor used for creating Stash instances
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Stash\StashOverflowException.cs
//-----------------------------------------------------------------------
// <copyright file="StashOverflowException.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This exception is thrown when the size of the Stash exceeds the capacity of the stash.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="StashOverflowException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <param name="cause">The exception that is the cause of the current exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="StashOverflowException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext" /> that contains contextual information about the source or destination.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Stash\UntypedActorWithBoundedStash.cs
//-----------------------------------------------------------------------
// <copyright file="UntypedActorWithBoundedStash.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// An UntypedActor with bounded Stash capabilities
/// </summary>
/// <summary>
/// The stash implementation available for this actor
/// </summary>
/// <summary>
/// Stashes the current message
/// </summary>
/// <summary>
/// Unstash the oldest message in the stash
/// </summary>
/// <summary>
/// Unstashes all messages
/// </summary>
/// <summary>
/// Unstashes all messages selected by the predicate function
/// </summary>
/// <summary>
/// Overridden callback. Prepends all messages in the stash to the mailbox,
/// clears the stash, stops all children, and invokes the PostStop callback.
/// </summary>
/// <summary>
/// Overridden callback. Prepends all messages in the stash to the mailbox,
/// clears the stash. Must be called when overriding this method; otherwise stashed messages won't be
/// propagated to DeadLetters when actor stops.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Stash\UntypedActorWithUnboundedStash.cs
//-----------------------------------------------------------------------
// <copyright file="UntypedActorWithUnboundedStash.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// An UntypedActor with Unbounded Stash capabilities
/// </summary>
/// <summary>
/// The stash implementation available for this actor
/// </summary>
/// <summary>
/// Stashes the current message
/// </summary>
/// <summary>
/// Unstash the oldest message in the stash
/// </summary>
/// <summary>
/// Unstashes all messages
/// </summary>
/// <summary>
/// Unstashes all messages selected by the predicate function
/// </summary>
/// <summary>
/// Overridden callback. Prepends all messages in the stash to the mailbox,
/// clears the stash, stops all children, and invokes the PostStop callback.
/// </summary>
/// <summary>
/// Overridden callback. Prepends all messages in the stash to the mailbox,
/// clears the stash. Must be called when overriding this method; otherwise stashed messages won't be
/// propagated to DeadLetters when actor stops.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Stash\Internal\AbstractStash.cs
//-----------------------------------------------------------------------
// <copyright file="AbstractStash.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>INTERNAL
/// Abstract base class for stash support
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>INTERNAL
/// Abstract base class for stash support
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
// TODO: capacity needs to come from dispatcher or mailbox config
// https://github.com/akka/akka/blob/master/akka-actor/src/main/scala/akka/actor/Stash.scala#L126
/// <summary>
/// Stashes the current message in the actor's state.
/// </summary>
/// <exception cref="IllegalActorStateException">Thrown if we attempt to stash the same message more than once.</exception>
/// <exception cref="StashOverflowException">Thrown in the event that we're using a <see cref="BoundedMessageQueue"/> 
/// for the <see cref="IStash"/> and we've exceeded capacity.</exception>
/// <summary>
/// Unstash the most recently stashed message (top of the message stack.)
/// </summary>
/// <summary>
/// Unstash all of the <see cref="Envelope"/>s in the Stash.
/// </summary>
/// <summary>
/// Unstash all of the <see cref="Envelope"/>s in the Stash.
/// </summary>
/// <param name="predicate">A predicate function to determine which messages to select.</param>
/// <summary>
/// Eliminates the contents of the <see cref="IStash"/>, and returns
/// the previous contents of the messages.
/// </summary>
/// <returns>Previously stashed messages.</returns>
// since we want to save the order of messages, but still prepending using AddFirst,
// we must enumerate envelopes in reversed order
/// <summary>
/// Enqueues <paramref name="msg"/> at the first position in the mailbox. If the message contained in
/// the envelope is a <see cref="Terminated"/> message, it will be ensured that it can be re-received
/// by the actor.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Stash\Internal\BoundedStashImpl.cs
//-----------------------------------------------------------------------
// <copyright file="BoundedStashImpl.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>INTERNAL
/// A stash implementation that is bounded
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>INTERNAL
/// A stash implementation that is bounded
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Actor\Stash\Internal\UnboundedStashImpl.cs
//-----------------------------------------------------------------------
// <copyright file="UnboundedStashImpl.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>INTERNAL
/// A stash implementation that is unbounded
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>INTERNAL
/// A stash implementation that is bounded
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Config.cs
//-----------------------------------------------------------------------
// <copyright file="Config.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class represents the main configuration object used by Akka.NET
/// when configuring objects within the system. To put it simply, it's
/// the internal representation of a HOCON (Human-Optimized Config Object Notation)
/// configuration string.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Config"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Config"/> class.
/// </summary>
/// <param name="root">The root node to base this configuration.</param>
/// <exception cref="ArgumentNullException">"The root value cannot be null."</exception>
/// <summary>
/// Initializes a new instance of the <see cref="Config"/> class.
/// </summary>
/// <param name="source">The configuration to use as the primary source.</param>
/// <param name="fallback">The configuration to use as a secondary source.</param>
/// <exception cref="ArgumentNullException">The source configuration cannot be null.</exception>
/// <summary>
/// The configuration used as a secondary source.
/// </summary>
/// <summary>
/// Determines if this root node contains any values
/// </summary>
/// <summary>
/// The root node of this configuration section
/// </summary>
/// <summary>
/// An enumeration of substitutions values
/// </summary>
/// <summary>
/// Generates a deep clone of the current configuration.
/// </summary>
/// <returns>A deep clone of the current configuration</returns>
//deep clone
/// <summary>
/// Retrieves a boolean value from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the value to retrieve.</param>
/// <param name="default">The default value to return if the value doesn't exist.</param>
/// <returns>The boolean value defined in the specified path.</returns>
/// <summary>
/// Retrieves a long value, optionally suffixed with a 'b', from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the value to retrieve.</param>
/// <returns>The long value defined in the specified path.</returns>
/// <summary>
/// Retrieves an integer value from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the value to retrieve.</param>
/// <param name="default">The default value to return if the value doesn't exist.</param>
/// <returns>The integer value defined in the specified path.</returns>
/// <summary>
/// Retrieves a long value from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the value to retrieve.</param>
/// <param name="default">The default value to return if the value doesn't exist.</param>
/// <returns>The long value defined in the specified path.</returns>
/// <summary>
/// Retrieves a string value from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the value to retrieve.</param>
/// <param name="default">The default value to return if the value doesn't exist.</param>
/// <returns>The string value defined in the specified path.</returns>
/// <summary>
/// Retrieves a float value from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the value to retrieve.</param>
/// <param name="default">The default value to return if the value doesn't exist.</param>
/// <returns>The float value defined in the specified path.</returns>
/// <summary>
/// Retrieves a decimal value from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the value to retrieve.</param>
/// <param name="default">The default value to return if the value doesn't exist.</param>
/// <returns>The decimal value defined in the specified path.</returns>
/// <summary>
/// Retrieves a double value from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the value to retrieve.</param>
/// <param name="default">The default value to return if the value doesn't exist.</param>
/// <returns>The double value defined in the specified path.</returns>
/// <summary>
/// Retrieves a list of boolean values from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the values to retrieve.</param>
/// <returns>The list of boolean values defined in the specified path.</returns>
/// <summary>
/// Retrieves a list of decimal values from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the values to retrieve.</param>
/// <returns>The list of decimal values defined in the specified path.</returns>
/// <summary>
/// Retrieves a list of float values from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the values to retrieve.</param>
/// <returns>The list of float values defined in the specified path.</returns>
/// <summary>
/// Retrieves a list of double values from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the values to retrieve.</param>
/// <returns>The list of double values defined in the specified path.</returns>
/// <summary>
/// Retrieves a list of int values from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the values to retrieve.</param>
/// <returns>The list of int values defined in the specified path.</returns>
/// <summary>
/// Retrieves a list of long values from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the values to retrieve.</param>
/// <returns>The list of long values defined in the specified path.</returns>
/// <summary>
/// Retrieves a list of byte values from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the values to retrieve.</param>
/// <returns>The list of byte values defined in the specified path.</returns>
/// <summary>
/// Retrieves a list of string values from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the values to retrieve.</param>
/// <returns>The list of string values defined in the specified path.</returns>
/// <summary>
/// Retrieves a new configuration from the current configuration
/// with the root node being the supplied path.
/// </summary>
/// <param name="path">The path that contains the configuration to retrieve.</param>
/// <returns>A new configuration with the root node being the supplied path.</returns>
/// <summary>
/// Retrieves a <see cref="HoconValue"/> from a specific path.
/// </summary>
/// <param name="path">The path that contains the value to retrieve.</param>
/// <returns>The <see cref="HoconValue"/> found at the location if one exists, otherwise <c>null</c>.</returns>
/// <summary>
/// Retrieves a <see cref="TimeSpan"/> value from the specified path in the configuration.
/// </summary>
/// <param name="path">The path that contains the value to retrieve.</param>
/// <param name="default">The default value to return if the value doesn't exist.</param>
/// <param name="allowInfinite"><c>true</c> if infinite timespans are allowed; otherwise <c>false</c>.</param>
/// <returns>The <see cref="TimeSpan"/> value defined in the specified path.</returns>
/// <summary>
/// Converts the current configuration to a string.
/// </summary>
/// <returns>A string containing the current configuration.</returns>
/// <summary>
/// Configure the current configuration with a secondary source.
/// </summary>
/// <param name="fallback">The configuration to use as a secondary source.</param>
/// <returns>The current configuration configured with the specified fallback.</returns>
/// <exception cref="ArgumentException">Config can not have itself as fallback.</exception>
/// <summary>
/// Determine if a HOCON configuration element exists at the specified location
/// </summary>
/// <param name="path">The location to check for a configuration value.</param>
/// <returns><c>true</c> if a value was found, <c>false</c> otherwise.</returns>
/// <summary>
/// Adds the supplied configuration string as a fallback to the supplied configuration.
/// </summary>
/// <param name="config">The configuration used as the source.</param>
/// <param name="fallback">The string used as the fallback configuration.</param>
/// <returns>The supplied configuration configured with the supplied fallback.</returns>
/// <summary>
/// Adds the supplied configuration as a fallback to the supplied configuration string.
/// </summary>
/// <param name="configHocon">The configuration string used as the source.</param>
/// <param name="fallbackConfig">The configuration used as the fallback.</param>
/// <returns>A configuration configured with the supplied fallback.</returns>
/// <summary>
/// Performs an implicit conversion from <see cref="System.String"/> to <see cref="Config"/>.
/// </summary>
/// <param name="str">The string that contains a configuration.</param>
/// <returns>A configuration based on the supplied string.</returns>
/// <summary>
/// Retrieves an enumerable key value pair representation of the current configuration.
/// </summary>
/// <returns>The current configuration represented as an enumerable key value pair.</returns>
/// <summary>
/// This class contains convenience methods for working with <see cref="Config"/>.
/// </summary>
/// <summary>
/// Retrieves the current configuration or the fallback
/// configuration if the current one is null.
/// </summary>
/// <param name="config">The configuration used as the source.</param>
/// <param name="fallback">The configuration to use as a secondary source.</param>
/// <returns>The current configuration or the fallback configuration if the current one is null.</returns>
/// <summary>
/// Determines if the supplied configuration has any usable content period.
/// </summary>
/// <param name="config">The configuration used as the source.</param>
/// <returns><c>true></c> if the <see cref="Config" /> is null or <see cref="Config.IsEmpty" />; otherwise <c>false</c>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\ConfigurationException.cs
//-----------------------------------------------------------------------
// <copyright file="ConfigurationException.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// The exception that is thrown when a configuration is invalid.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConfigurationException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ConfigurationException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <param name="exception">The exception that is the cause of the current exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ConfigurationException"/> class.
/// </summary>
/// <param name="info">The object that holds the serialized object data.</param>
/// <param name="context">The contextual information about the source or destination.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\ConfigurationFactory.cs
//-----------------------------------------------------------------------
// <copyright file="ConfigurationFactory.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains methods used to retrieve configuration information
/// from a variety of sources including user-supplied strings, configuration
/// files and assembly resources.
/// </summary>
/// <summary>
/// Generates an empty configuration.
/// </summary>
/// <summary>
/// Generates a configuration defined in the supplied
/// HOCON (Human-Optimized Config Object Notation) string.
/// </summary>
/// <param name="hocon">A string that contains configuration options to use.</param>
/// <param name="includeCallback">callback used to resolve includes</param>
/// <returns>The configuration defined in the supplied HOCON string.</returns>
/// <summary>
/// Generates a configuration defined in the supplied
/// HOCON (Human-Optimized Config Object Notation) string.
/// </summary>
/// <param name="hocon">A string that contains configuration options to use.</param>
/// <returns>The configuration defined in the supplied HOCON string.</returns>
//TODO: add default include resolver
/// <summary>
/// Loads a configuration defined in the current application's
/// configuration file, e.g. app.config or web.config
/// </summary>
/// <returns>The configuration defined in the configuration file.</returns>
/// <summary>
/// Retrieves the default configuration that Akka.NET uses
/// when no configuration has been defined.
/// </summary>
/// <returns>The configuration that contains default values for all options.</returns>
/// <summary>
/// Retrieves a configuration defined in a resource of the
/// current executing assembly.
/// </summary>
/// <param name="resourceName">The name of the resource that contains the configuration.</param>
/// <returns>The configuration defined in the current executing assembly.</returns>
/// <summary>
/// Retrieves a configuration defined in a resource of the
/// assembly containing the supplied instance object.
/// </summary>
/// <param name="resourceName">The name of the resource that contains the configuration.</param>
/// <param name="instanceInAssembly">An instance object located in the assembly to search.</param>
/// <returns>The configuration defined in the assembly that contains the instanced object.</returns>
/// <summary>
/// Retrieves a configuration defined in a resource of the assembly
/// containing the supplied type <typeparamref name="TAssembly"/>.
/// </summary>
/// <typeparam name="TAssembly">A type located in the assembly to search.</typeparam>
/// <param name="resourceName">The name of the resource that contains the configuration.</param>
/// <returns>The configuration defined in the assembly that contains the type <typeparamref name="TAssembly"/>.</returns>
/// <summary>
/// Retrieves a configuration defined in a resource of the supplied assembly.
/// </summary>
/// <param name="resourceName">The name of the resource that contains the configuration.</param>
/// <param name="assembly">The assembly that contains the given resource.</param>
/// <returns>The configuration defined in the assembly that contains the given resource.</returns>
/// <summary>
/// Creates a configuration based on the supplied source object
/// </summary>
/// <param name="source">The source object</param>
/// <returns>The configuration created from the source object</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\AkkaConfigurationSection.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaConfigurationSection.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class represents a custom akka node within a configuration file.
/// <code>
/// <![CDATA[
/// <?xml version="1.0" encoding="utf-8" ?>
/// <configuration>
///   <configSections>
///     <section name="akka" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka" />
///   </configSections>
///   <akka>
///   ...
///   </akka>
/// </configuration>
/// ]]>
/// </code>
/// </summary>
/// <summary>
/// Retrieves a <see cref="Config"/> from the contents of the
/// custom akka node within a configuration file.
/// </summary>
/// <summary>
/// Retrieves the HOCON (Human-Optimized Config Object Notation)
/// configuration string from the custom akka node.
/// <code>
/// <?xml version="1.0" encoding="utf-8" ?>
/// <configuration>
///   <configSections>
///     <section name="akka" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka" />
///   </configSections>
///   <akka>
///      <hocon>
///      ...
///      </hocon>
///   </akka>
/// </configuration>
/// </code>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\CDataConfigurationElement.cs
//-----------------------------------------------------------------------
// <copyright file="CDataConfigurationElement.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class represents the base implementation for retrieving text from
/// an XML CDATA node within a configuration file.
/// <code>
/// <![CDATA[
/// <?xml version="1.0" encoding="utf-8" ?>
/// <configuration>
///   <configSections>
///     <section name="akka" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka" />
///   </configSections>
///   <akka>
///     <hocon>
///       &lt;![CDATA[
///       ...
///       ]]&gt;
///     </hocon>
///   </akka>
/// </configuration>
/// ]]>
/// </code>
/// </summary>
/// <summary>
/// Deserializes the text located in a CDATA node of the configuration file.
/// </summary>
/// <param name="reader">The <see cref="T:System.Xml.XmlReader" /> that reads from the configuration file.</param>
/// <param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\HoconArray.cs
//-----------------------------------------------------------------------
// <copyright file="HoconArray.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class represents an array element in a HOCON (Human-Optimized Config Object Notation)
/// configuration string.
/// <code>
/// akka {
///   cluster {
///     seed-nodes = [
///       "akka.tcp://ClusterSystem@127.0.0.1:2551",
///       "akka.tcp://ClusterSystem@127.0.0.1:2552"]
///   }
/// }
/// </code>
/// </summary>
/// <summary>
/// Determines whether this element is a string.
/// </summary>
/// <returns><c>false</c></returns>
/// <summary>
/// Retrieves the string representation of this element.
/// </summary>
/// <returns>
/// The string representation of this element.
/// </returns>
/// <exception cref="System.NotImplementedException">
/// This element is an array. It is not a string.
/// Therefore this method will throw an exception.
/// </exception>
/// <summary>
/// Determines whether this element is an array.
/// </summary>
/// <returns><c>true</c></returns>
/// <summary>
/// Retrieves a list of elements associated with this element.
/// </summary>
/// <returns>
/// A list of elements associated with this element.
/// </returns>
/// <summary>
/// Returns a HOCON string representation of this element.
/// </summary>
/// <returns>A HOCON string representation of this element.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\HoconConfigurationElement.cs
//-----------------------------------------------------------------------
// <copyright file="HoconConfigurationElement.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class represents a custom HOCON (Human-Optimized Config Object Notation)
/// node within a configuration file.
/// <code>
/// <![CDATA[
/// <?xml version="1.0" encoding="utf-8" ?>
/// <configuration>
///   <configSections>
///     <section name="akka" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka" />
///   </configSections>
///   <akka>
///     <hocon>
///     ...
///     </hocon>
///   </akka>
/// </configuration>
/// ]]>
/// </code>
/// </summary>
/// <summary>
/// Gets or sets the HOCON configuration string contained in the hocon node.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\HoconLiteral.cs
//-----------------------------------------------------------------------
// <copyright file="HoconLiteral.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class represents a string literal element in a HOCON (Human-Optimized Config Object Notation)
/// configuration string.
/// <code>
/// akka {  
///   actor {
///     provider = "Akka.Remote.RemoteActorRefProvider, Akka.Remote"
///   }
/// }
/// </code>
/// </summary>
/// <summary>
/// Gets or sets the value of this element.
/// </summary>
/// <summary>
/// Determines whether this element is a string.
/// </summary>
/// <returns><c>true</c></returns>
/// <summary>
/// Retrieves the string representation of this element.
/// </summary>
/// <returns>The value of this element.</returns>
/// <summary>
/// Determines whether this element is an array.
/// </summary>
/// <returns><c>false</c></returns>
/// <summary>
/// Retrieves a list of elements associated with this element.
/// </summary>
/// <returns>
/// A list of elements associated with this element.
/// </returns>
/// <exception cref="System.NotImplementedException">
/// This element is a string literal. It is not an array.
/// Therefore this method will throw an exception.
/// </exception>
/// <summary>
/// Returns the string representation of this element.
/// </summary>
/// <returns>The value of this element.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\HoconObject.cs
//-----------------------------------------------------------------------
// <copyright file="HoconObject.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class represents an object element in a HOCON (Human-Optimized Config Object Notation)
/// configuration string.
/// <code>
/// akka {  
///   actor {
///     debug {  
///       receive = on 
///       autoreceive = on
///       lifecycle = on
///       event-stream = on
///       unhandled = on
///     }
///   }
/// }
/// </code>
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HoconObject"/> class.
/// </summary>
/// <summary>
/// Retrieves the underlying map that contains the barebones
/// object values.
/// </summary>
/// <summary>
/// Retrieves the underlying map that this element is based on.
/// </summary>
/// <summary>
/// Determines whether this element is a string.
/// </summary>
/// <returns><c>false</c></returns>
/// <summary>
/// Retrieves the string representation of this element.
/// </summary>
/// <returns>The string representation of this element.</returns>
/// <exception cref="System.NotImplementedException">
/// This element is an object. It is not a string.
/// Therefore this method will throw an exception.
/// </exception>
/// <summary>
/// Determines whether this element is an array.
/// </summary>
/// <returns><c>false</c></returns>
/// <summary>
/// Retrieves a list of elements associated with this element.
/// </summary>
/// <returns>A list of elements associated with this element.</returns>
/// <exception cref="System.NotImplementedException">
/// This element is an object. It is not an array.
/// Therefore this method will throw an exception.
/// </exception>
/// <summary>
/// Retrieves the value associated with the supplied key.
/// </summary>
/// <param name="key">The key associated with the value to retrieve.</param>
/// <returns>
/// The value associated with the supplied key or null
/// if they key does not exist.
/// </returns>
/// <summary>
/// Retrieves the value associated with the supplied key.
/// If the supplied key is not found, then one is created
/// with a blank value.
/// </summary>
/// <param name="key">The key associated with the value to retrieve.</param>
/// <returns>The value associated with the supplied key.</returns>
/// <summary>
/// Returns a HOCON string representation of this element.
/// </summary>
/// <returns>A HOCON string representation of this element.</returns>
/// <summary>
/// Returns a HOCON string representation of this element.
/// </summary>
/// <param name="indent">The number of spaces to indent the string.</param>
/// <returns>A HOCON string representation of this element.</returns>
//other key was present in this object.
//if we have a value, just ignore the other value, unless it is an object
//if both values are objects, merge them
//other key was not present in this object, just copy it over
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\HoconParser.cs
//-----------------------------------------------------------------------
// <copyright file="HoconParser.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains methods used to parse HOCON (Human-Optimized Config Object Notation)
/// configuration strings.
/// </summary>
/// <summary>
/// Parses the supplied HOCON configuration string into a root element.
/// </summary>
/// <param name="text">The string that contains a HOCON configuration string.</param>
/// <param name="includeCallback">Callback used to resolve includes</param>
/// <returns>The root element created from the supplied HOCON configuration string.</returns>
/// <exception cref="System.Exception">
/// This exception is thrown when an unresolved substitution is encountered.
/// It also occurs when the end of the file has been reached while trying
/// to read a value.
/// </exception>
//the value of this KVP is already an object
//the value of this KVP is not an object, thus, we should add a new
//fixup the substitution, add the current path as a prefix to the substitution path
//if not an object, then replace the value.
//if object. value should be merged
/// <summary>
/// Retrieves the next value token from the tokenizer and appends it
/// to the supplied element <paramref name="owner"/>.
/// </summary>
/// <param name="owner">The element to append the next token.</param>
/// <exception cref="System.Exception">End of file reached while trying to read a value</exception>
//needed to allow for override objects
//single line ws should be included if string concat
/// <summary>
/// Retrieves the next array token from the tokenizer.
/// </summary>
/// <returns>An array of elements retrieved from the token.</returns>
//optional end of value
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\HoconRoot.cs
//-----------------------------------------------------------------------
// <copyright file="HoconRoot.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class represents the root element in a HOCON (Human-Optimized Config Object Notation)
/// configuration string.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HoconRoot"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HoconRoot"/> class.
/// </summary>
/// <param name="value">The value to associate with this element.</param>
/// <param name="substitutions">An enumeration of substitutions to associate with this element.</param>
/// <summary>
/// Initializes a new instance of the <see cref="HoconRoot"/> class.
/// </summary>
/// <param name="value">The value to associate with this element.</param>
/// <summary>
/// Retrieves the value associated with this element.
/// </summary>
/// <summary>
/// Retrieves an enumeration of substitutions associated with this element.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\HoconSubstitution.cs
//-----------------------------------------------------------------------
// <copyright file="HoconSubstitution.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class represents a substitution element in a HOCON (Human-Optimized Config Object Notation)
/// configuration string.
/// <code>
/// akka {  
///   defaultInstances = 10
///   deployment{
///     /user/time{
///       nr-of-instances = $defaultInstances
///     }
///   }
/// }
/// </code>
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HoconSubstitution"/> class.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="HoconSubstitution" /> class.
/// </summary>
/// <param name="path">The path.</param>
/// <summary>
///     The full path to the value which should substitute this instance.
/// </summary>
/// <summary>
///     The evaluated value from the Path property
/// </summary>
/// <summary>
/// Determines whether this element is a string.
/// </summary>
/// <returns><c>true</c> if this element is a string; otherwise <c>false</c></returns>
/// <summary>
/// Retrieves the string representation of this element.
/// </summary>
/// <returns>The string representation of this element.</returns>
/// <summary>
/// Determines whether this element is an array.
/// </summary>
/// <returns><c>true</c> if this element is aan array; otherwise <c>false</c></returns>
/// <summary>
/// Retrieves a list of elements associated with this element.
/// </summary>
/// <returns>A list of elements associated with this element.</returns>
/// <summary>
/// Determines whether this element is a HOCON object.
/// </summary>
/// <returns><c>true</c> if this element is a HOCON object; otherwise <c>false</c></returns>
/// <summary>
/// Retrieves the HOCON object representation of this element.
/// </summary>
/// <returns>The HOCON object representation of this element.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\HoconToken.cs
//-----------------------------------------------------------------------
// <copyright file="HoconToken.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This enumeration defines the different types of tokens found within
/// a HOCON (Human-Optimized Config Object Notation) configuration string.
/// </summary>
/// <summary>
/// This token type represents a comment.
/// </summary>
/// <summary>
/// This token type represents the key portion of a key-value pair.
/// </summary>
/// <summary>
/// This token type represents the value portion of a key-value pair.
/// </summary>
/// <summary>
/// This token type represents the assignment operator, <c>=</c> or <c>:</c> .
/// </summary>
/// <summary>
/// This token type represents the beginning of an object, <c>{</c> .
/// </summary>
/// <summary>
/// This token type represents the end of an object, <c>}</c> .
/// </summary>
/// <summary>
/// This token type represents a namespace separator, <c>.</c> .
/// </summary>
/// <summary>
/// This token type represents the end of the configuration string.
/// </summary>
/// <summary>
/// This token type represents the beginning of an array, <c>[</c> .
/// </summary>
/// <summary>
/// This token type represents the end of an array, <c>]</c> .
/// </summary>
/// <summary>
/// This token type represents the separator in an array, <c>,</c> .
/// </summary>
/// <summary>
/// This token type represents a replacement variable, <c>$foo</c> .
/// </summary>
/// <summary>
/// This class represents a token within a HOCON (Human-Optimized Config Object Notation)
/// configuration string.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Token"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Token"/> class.
/// </summary>
/// <param name="type">The type of token to associate with.</param>
/// <summary>
/// Initializes a new instance of the <see cref="Token"/> class.
/// </summary>
/// <param name="value">The string literal value to associate with this token.</param>
/// <summary>
/// The value associated with this token. If this token is
/// a <see cref="TokenType.LiteralValue"/>, then this property
/// holds the string literal.
/// </summary>
/// <summary>
/// The type that represents this token.
/// </summary>
/// <summary>
/// Creates a key token with a given <paramref name="key"/>.
/// </summary>
/// <param name="key">The key to associate with this token.</param>
/// <returns>A key token with the given key.</returns>
/// <summary>
/// Creates a substitution token with a given <paramref name="path"/>.
/// </summary>
/// <param name="path">The path to associate with this token.</param>
/// <returns>A substitution token with the given path.</returns>
/// <summary>
/// Creates a string literal token with a given <paramref name="value"/>.
/// </summary>
/// <param name="value">The value to associate with this token.</param>
/// <returns>A string literal token with the given value.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\HoconTokenizer.cs
//-----------------------------------------------------------------------
// <copyright file="HoconTokenizer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains methods used to tokenize a string.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Tokenizer"/> class.
/// </summary>
/// <param name="text">The string that contains the text to tokenize.</param>
/// <summary>
/// A value indicating whether the tokenizer has reached the end of the string.
/// </summary>
/// <summary>
/// Determines whether the given pattern matches the value at the current
/// position of the tokenizer.
/// </summary>
/// <param name="pattern">The string that contains the characters to match.</param>
/// <returns><c>true</c> if the pattern matches, otherwise <c>false</c>.</returns>
//Aaron: added this to make it easier to set a breakpoint to debug config issues
/// <summary>
/// Retrieves a string of the given length from the current position of the tokenizer.
/// </summary>
/// <param name="length">The length of the string to return.</param>
/// <returns>
/// The string of the given length. If the length exceeds where the
/// current index is located, then null is returned.
/// </returns>
/// <summary>
/// Determines whether any of the given patterns match the value at the current
/// position of the tokenizer.
/// </summary>
/// <param name="patterns">The string array that contains the characters to match.</param>
/// <returns><c>true</c> if any one of the patterns match, otherwise <c>false</c>.</returns>
/// <summary>
/// Retrieves the next character in the tokenizer without advancing its position.
/// </summary>
/// <returns>The character at the tokenizer's current position.</returns>
/// <summary>
/// Retrieves the next character in the tokenizer.
/// </summary>
/// <returns>The character at the tokenizer's current position.</returns>
/// <summary>
/// Advances the tokenizer to the next non-whitespace character.
/// </summary>
/// <summary>
/// This class contains methods used to tokenize HOCON (Human-Optimized Config Object Notation)
/// configuration strings.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HoconTokenizer"/> class.
/// </summary>
/// <param name="text">The string that contains the text to tokenize.</param>
/// <summary>
/// Advances the tokenizer to the next non-whitespace, non-comment token.
/// </summary>
/// <summary>
/// Retrieves the current line from where the current token
/// is located in the string.
/// </summary>
/// <returns>The current line from where the current token is located.</returns>
//ignore
/// <summary>
/// Retrieves the next token from the string.
/// </summary>
/// <returns>The next token contained in the string.</returns>
/// <exception cref="System.FormatException">
/// This exception is thrown when an unknown token is encountered.
/// </exception>
/// <summary>
/// Retrieves a <see cref="TokenType.ArrayEnd"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.ArrayEnd"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Determines whether the current token matches an <see cref="TokenType.ArrayEnd"/> token.
/// </summary>
/// <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the current token matches an <see cref="TokenType.ArrayStart"/> token.
/// </summary>
/// <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
/// <summary>
/// Retrieves a <see cref="TokenType.ArrayStart"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.ArrayStart"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Retrieves a <see cref="TokenType.Dot"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.Dot"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Retrieves a <see cref="TokenType.Comma"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.Comma"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Retrieves a <see cref="TokenType.ObjectStart"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.ObjectStart"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Retrieves a <see cref="TokenType.ObjectEnd"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.ObjectEnd"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Retrieves a <see cref="TokenType.Assign"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.Assign"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Determines whether the current token matches an <see cref="TokenType.Comma"/> token.
/// </summary>
/// <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the current token matches an <see cref="TokenType.Dot"/> token.
/// </summary>
/// <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the current token matches an <see cref="TokenType.ObjectStart"/> token.
/// </summary>
/// <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the current token matches an <see cref="TokenType.ObjectEnd"/> token.
/// </summary>
/// <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the current token matches an <see cref="TokenType.Assign"/> token.
/// </summary>
/// <returns><c>true</c> if the token matches; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the current token matches the start of a quoted string.
/// </summary>
/// <returns><c>true</c> if token matches; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the current token matches the start of a triple quoted string.
/// </summary>
/// <returns><c>true</c> if token matches; otherwise, <c>false</c>.</returns>
/// <summary>
/// Retrieves a <see cref="TokenType.Comment"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.Comment"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Retrieves an unquoted <see cref="TokenType.Key"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.Key"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Determines whether the current token is an unquoted key.
/// </summary>
/// <returns><c>true</c> if token is an unquoted key; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the current token is the start of an unquoted key.
/// </summary>
/// <returns><c>true</c> if token is the start of an unquoted key; otherwise, <c>false</c>.</returns>
/// <summary>
/// Retrieves a triple quoted <see cref="TokenType.LiteralValue"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.LiteralValue"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Retrieves a quoted <see cref="TokenType.LiteralValue"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.LiteralValue"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Retrieves a quoted <see cref="TokenType.Key"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.Key"/> token from the tokenizer's current position.</returns>
//consume "\"
//"));
/// <summary>
/// Retrieves a value token from the tokenizer's current position.
/// </summary>
/// <returns>A value token from the tokenizer's current position.</returns>
/// <exception cref="System.FormatException">
/// Expected value: Null literal, Array, Quoted Text, Unquoted Text,
///     Triple quoted Text, Object or End of array
/// </exception>
/// <summary>
/// Determines whether the current token is the start of a substitution.
/// </summary>
/// <returns><c>true</c> if token is the start of a substitution; otherwise, <c>false</c>.</returns>
/// <summary>
/// Retrieves a <see cref="TokenType.Substitute"/> token from the tokenizer's current position.
/// </summary>
/// <returns>A <see cref="TokenType.Substitute"/> token from the tokenizer's current position.</returns>
/// <summary>
/// Determines whether the current token is a space or a tab.
/// </summary>
/// <returns><c>true</c> if token is the start of a space or a tab; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the current token is the start of an unquoted string literal.
/// </summary>
/// <returns><c>true</c> if token is the start of an unquoted string literal; otherwise, <c>false</c>.</returns>
/// <summary>
/// Retrieves the current token, including whitespace and tabs, as a string literal token.
/// </summary>
/// <returns>A token that contains the string literal value.</returns>
/// <summary>
/// Retrieves the current token as a string literal token.
/// </summary>
/// <returns>A token that contains the string literal value.</returns>
/// <exception cref="System.FormatException">
/// This exception is thrown when the tokenizer cannot find
/// a string literal value from the current token.
/// </exception>
/// <summary>
/// Determines whether the current token is a value.
/// </summary>
/// <returns><c>true</c> if the current token is a value; otherwise, <c>false</c>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\HoconValue.cs
//-----------------------------------------------------------------------
// <copyright file="HoconValue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class represents the root type for a HOCON (Human-Optimized Config Object Notation)
/// configuration object.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HoconValue"/> class.
/// </summary>
/// <summary>
/// Returns true if this HOCON value doesn't contain any elements
/// </summary>
/// <summary>
/// The list of elements inside this HOCON value
/// </summary>
/// <summary>
/// Wraps this <see cref="HoconValue"/> into a new <see cref="Config"/> object at the specified key.
/// </summary>
/// <param name="key">The key designated to be the new root element.</param>
/// <returns>A <see cref="Config"/> with the given key as the root element.</returns>
/// <summary>
/// Retrieves the <see cref="HoconObject"/> from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>The <see cref="HoconObject"/> that represents this <see cref="HoconValue"/>.</returns>
//TODO: merge objects?
/// <summary>
/// Determines if this <see cref="HoconValue"/> is a <see cref="HoconObject"/>.
/// </summary>
/// <returns><c>true</c> if this value is a <see cref="HoconObject"/>, <c>false</c> otherwise.</returns>
/// <summary>
/// Adds the given element to the list of elements inside this <see cref="HoconValue"/>.
/// </summary>
/// <param name="value">The element to add to the list.</param>
/// <summary>
/// Clears the list of elements inside this <see cref="HoconValue"/>.
/// </summary>
/// <summary>
/// Creates a fresh list of elements inside this <see cref="HoconValue"/>
/// and adds the given value to the list.
/// </summary>
/// <param name="value">The element to add to the list.</param>
/// <summary>
/// Determines whether all the elements inside this <see cref="HoconValue"/>
/// are a string.
/// </summary>
/// <returns>
///   <c>true</c>if all elements inside this <see cref="HoconValue"/> are a string; otherwise <c>false</c>.
/// </returns>
/// <summary>
/// Retrieves the child object located at the given key.
/// </summary>
/// <param name="key">The key used to retrieve the child object.</param>
/// <returns>The element at the given key.</returns>
/// <summary>
/// Retrieves the boolean value from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>The boolean value represented by this <see cref="HoconValue"/>.</returns>
/// <exception cref="System.NotSupportedException">
/// This exception occurs when the <see cref="HoconValue"/> doesn't
/// conform to the standard boolean values: "on", "off", "true", or "false"
/// </exception>
/// <summary>
/// Retrieves the string value from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>The string value represented by this <see cref="HoconValue"/>.</returns>
//TODO: throw exception?
/// <summary>
/// Retrieves the decimal value from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>The decimal value represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves the float value from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>The float value represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves the double value from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>The double value represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves the long value from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>The long value represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves the integer value from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>The integer value represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves the byte value from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>The byte value represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves a list of byte values from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>A list of byte values represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves a list of integer values from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>A list of integer values represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves a list of long values from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>A list of long values represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves a list of boolean values from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>A list of boolean values represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves a list of float values from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>A list of float values represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves a list of double values from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>A list of double values represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves a list of decimal values from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>A list of decimal values represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves a list of string values from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>A list of string values represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Retrieves a list of values from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>A list of values represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Determines whether this <see cref="HoconValue"/> is an array.
/// </summary>
/// <returns>
///   <c>true</c> if this <see cref="HoconValue"/> is an array; otherwise <c>false</c>.
/// </returns>
/// <summary>
/// Retrieves the time span value from this <see cref="HoconValue"/>.
/// </summary>
/// <param name="allowInfinite">A flag used to set inifinite durations.</param>
/// <returns>The time span value represented by this <see cref="HoconValue"/>.</returns>
//TODO: Add support for ns, us, and non abbreviated versions (second, seconds and so on) see https://github.com/typesafehub/config/blob/master/HOCON.md#duration-format
//Not in Hocon spec
/// <summary>
/// Retrieves the long value, optionally suffixed with a 'b', from this <see cref="HoconValue"/>.
/// </summary>
/// <returns>The long value represented by this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Returns a HOCON string representation of this <see cref="HoconValue"/>.
/// </summary>
/// <returns>A HOCON string representation of this <see cref="HoconValue"/>.</returns>
/// <summary>
/// Returns a HOCON string representation of this <see cref="HoconValue"/>.
/// </summary>
/// <param name="indent">The number of spaces to indent the string.</param>
/// <returns>A HOCON string representation of this <see cref="HoconValue"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Configuration\Hocon\IHoconElement.cs
//-----------------------------------------------------------------------
// <copyright file="IHoconElement.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Marker interface to make it easier to retrieve HOCON
/// (Human-Optimized Config Object Notation) objects for
/// substitutions.
/// </summary>
/// <summary>
/// Determines whether this element is a HOCON object.
/// </summary>
/// <returns><c>true</c> if this element is a HOCON object; otherwise <c>false</c></returns>
/// <summary>
/// Retrieves the HOCON object representation of this element.
/// </summary>
/// <returns>The HOCON object representation of this element.</returns>
/// <summary>
/// This interface defines the contract needed to implement
/// a HOCON (Human-Optimized Config Object Notation) element.
/// </summary>
/// <summary>
/// Determines whether this element is a string.
/// </summary>
/// <returns><c>true</c> if this element is a string; otherwise <c>false</c></returns>
/// <summary>
/// Retrieves the string representation of this element.
/// </summary>
/// <returns>The string representation of this element.</returns>
/// <summary>
/// Determines whether this element is an array.
/// </summary>
/// <returns><c>true</c> if this element is aan array; otherwise <c>false</c></returns>
/// <summary>
/// Retrieves a list of elements associated with this element.
/// </summary>
/// <returns>A list of elements associated with this element.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\AbstractDispatcher.cs
//-----------------------------------------------------------------------
// <copyright file="AbstractDispatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Contextual information that's useful for dispatchers
/// </summary>
/// <summary>
/// The <see cref="EventStream"/> that belongs to the current <see cref="ActorSystem"/>.
/// </summary>
/// <summary>
/// The <see cref="IScheduler"/> that belongs to the current <see cref="ActorSystem"/>.
/// </summary>
/// <summary>
/// The <see cref="Settings"/> for the current <see cref="ActorSystem"/>.
/// </summary>
/// <summary>
/// The list of registered <see cref="Mailboxes"/> for the current <see cref="ActorSystem"/>.
/// </summary>
/// <summary>
/// The default set of contextual data needed for <see cref="MessageDispatcherConfigurator"/>s
/// </summary>
/// <summary>
/// Default constructor...
/// </summary>
/// <summary>
/// Base class used for hooking new <see cref="MessageDispatcher"/> types into <see cref="Dispatchers"/>
/// </summary>
/// <summary>
/// Takes a <see cref="Config"/> object, usually passed in via <see cref="Settings.Config"/>
/// </summary>
/// <summary>
/// System-wide configuration
/// </summary>
/// <summary>
/// The system prerequisites needed for this dispatcher to do its job
/// </summary>
/// <summary>
/// Returns a <see cref="Dispatcher"/> instance.
/// 
/// Whether or not this <see cref="MessageDispatcherConfigurator"/> returns a new instance 
/// or returns a reference to an existing instance is an implementation detail of the
/// underlying implementation.
/// </summary>
/// <returns></returns>
/// <summary>
/// Used to create instances of the <see cref="ThreadPoolDispatcher"/>.
/// 
/// <remarks>
/// Always returns the same instance, since the <see cref="ThreadPool"/> is global.
/// This is also the default dispatcher for all actors.
/// </remarks>
/// </summary>
//cached instance
/*
/// <summary>
/// Used to create instances of the <see cref="TaskDispatcher"/>.
/// 
/// <remarks>
/// Always returns the same instance.
/// </remarks>
/// </summary>
/// <summary>
/// Used to create instances of the <see cref="CurrentSynchronizationContextDispatcher"/>.
/// 
/// <remarks>
/// Always returns the a new instance.
/// </remarks>
/// </summary>
/// <summary>
/// Class responsible for pushing messages from an actor's mailbox into its
/// receive methods. Comes in many different flavors.
/// </summary>
/// <summary>
///     The default throughput
/// </summary>
/// <summary>
/// The configurator used to configure this message dispatcher.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="MessageDispatcher" /> class.
/// </summary>
/// <summary>
/// The ID for this dispatcher.
/// </summary>
/// <summary>
///     Gets or sets the throughput deadline time.
/// </summary>
/// <value>The throughput deadline time.</value>
/// <summary>
///     Gets or sets the throughput.
/// </summary>
/// <value>The throughput.</value>
/// <summary>
///     Schedules the specified run.
/// </summary>
/// <param name="run">The run.</param>
/// <summary>
/// Dispatches a user-defined message from a mailbox to an <see cref="ActorCell"/>        
/// </summary>
/// <summary>
/// Dispatches a <see cref="ISystemMessage"/> from a mailbox to an <see cref="ActorCell"/>        
/// </summary>
/// <summary>
/// Attaches the dispatcher to the <see cref="ActorCell"/>
/// 
/// <remarks>
/// Practically, doesn't do very much right now - dispatchers aren't responsible for creating
/// mailboxes in Akka.NET
/// </remarks>
/// </summary>
/// <param name="cell">The ActorCell belonging to the actor who's attaching to this dispatcher.</param>
/// <summary>
/// Detaches the dispatcher to the <see cref="ActorCell"/>
/// 
/// <remarks>
/// Only really used in dispatchers with 1:1 relationship with dispatcher.
/// </remarks>
/// </summary>
/// <param name="cell">The ActorCell belonging to the actor who's detaching from this dispatcher.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\ActorTaskScheduler.cs
//-----------------------------------------------------------------------
// <copyright file="ActorTaskScheduler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Executing a LongRunning task in an ActorTaskScheduler is bad practice, it will potentially
// hang the actor and starve the ThreadPool
// The best thing we can do here is force a rescheduling to at least not execute the task inline.
// Schedule the task execution, run inline if we are already in the actor context.
// Prevent inline execution, it will execute inline anyway in QueueTask if we
// are already in the actor context.
//suspend the mailbox
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\BoundedDequeBasedMailbox.cs
//-----------------------------------------------------------------------
// <copyright file="BoundedDequeBasedMailbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Mailbox with support for EnqueueFirst
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\CachingConfig.cs
//-----------------------------------------------------------------------
// <copyright file="CachingConfig.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// 
/// A <see cref="CachingConfig"/> is a <see cref="Config"/> that wraps another <see cref="Config"/> and is used to
/// cache path lookup and string retrieval, which we happen to do in some critical paths of the actor creation
/// and mailbox selection code.
/// 
/// All other <see cref="Config"/> operations are delegated to the wrapped <see cref="Config"/>.
/// </summary>
//cache miss
//found something
//empty
//is a string value
//some other type of HOCON value
//couldn't find the path
//configuration threw some sort of error
//cache hit
//run the real code in order to get exceptions
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\ConcurrentQueueMailbox.cs
//-----------------------------------------------------------------------
// <copyright file="ConcurrentQueueMailbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//using TQueue = Akka.Util.MonoConcurrentQueue<Akka.Actor.Envelope>;
/// <summary>
/// Class ConcurrentQueueMailbox.
/// </summary>
//if ThroughputDeadlineTime is enabled, start a stopwatch
//we are about to process all enqueued messages
//start with system messages, they have the highest priority
// TODO: Add + " with " + ActorCell.GetChildren());
//we should process x messages in this run
//try dequeue a user message
//run the receive handler
//check if any system message have arrived while processing user messages
//handle system message
// TODO: Add + " with " + ActorCell.GetChildren());
//if deadline time have expired, stop and break
//we are done processing messages for this run
//there are still messages that needs to be processed
//we still need has unscheduled messages for external info.
//e.g. repointable actor ref uses it
//TODO: will this be enough for external parties to work?
//this is subject of a race condition
//but that doesn't matter, since if the above "if" misses
//the "Post" that adds the new message will still schedule
//this specific call is just to deal with existing messages
//that wasn't scheduled due to dispatcher throughput being reached
//or system messages arriving during user message processing
/// <summary>
/// Schedules this instance.
/// </summary>
//only schedule if we idle
/// <summary>
/// Posts the specified envelope.
/// </summary>
/// <param name="receiver"></param>
/// <param name="envelope"> The envelope. </param>
/// <summary>
/// Stops this instance.
/// </summary>
/// <summary>
/// Disposes this instance.
/// </summary>
//We only count user messages in the mailbox, otherwise Resizers and ReceiveTimeouts explode
// actor is null for the deadLetterMailbox
//Akka JVM code:
//   if (actor ne null) { // actor is null for the deadLetterMailbox
//     val dlm = actor.dispatcher.mailboxes.deadLetterMailbox
//     var messageList = systemDrain(new LatestFirstSystemMessageList(NoMessage))
//     while (messageList.nonEmpty) {
//       // message must be “virgin” before being able to systemEnqueue again
//       val msg = messageList.head
//       messageList = messageList.tail
//       msg.unlink()
//       dlm.systemEnqueue(actor.self, msg)
//     }
//     if (messageQueue ne null) // needed for CallingThreadDispatcher, which never calls Mailbox.run()
//       messageQueue.cleanUp(actor.self, actor.dispatcher.mailboxes.deadLetterMailbox.messageQueue)
//   }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\DequeBasedMailbox.cs
//-----------------------------------------------------------------------
// <copyright file="DequeBasedMailbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used for <see cref="IMessageQueue"/> instances that support double-ended queues.
/// </summary>
/// <summary>
/// Enqueues an <see cref="Envelope"/> to the front of
/// the <see cref="IMessageQueue"/>. Typically called during
/// a <see cref="IStash.Unstash"/> or <see cref="IStash.UnstashAll()"/>operation.
/// </summary>
/// <param name="envelope">The message that will be prepended to the queue.</param>
/// <summary>
/// Posts a message to the back of the <see cref="IMessageQueue"/>
/// </summary>
/// <param name="receiver">The intended recipient of the message.</param>
/// <param name="envelope">The message that will be appended to the queue.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\DispatcherConfigurator.cs
//-----------------------------------------------------------------------
// <copyright file="DispatcherConfigurator.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\Dispatchers.cs
//-----------------------------------------------------------------------
// <copyright file="Dispatchers.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Schedules the specified run and returns a continuation task.
/// </summary>
/// <summary>
///     Class ThreadPoolDispatcher.
/// </summary>
/// <summary>
/// Takes a <see cref="MessageDispatcherConfigurator"/>
/// </summary>
/// <summary>
///     Schedules the specified run.
/// </summary>
/// <param name="run">The run.</param>
// we use unsafe version if current application domain is FullTrusted
/// <summary>
///     Dispatcher that dispatches messages on the current synchronization context, e.g. WinForms or WPF GUI thread
/// </summary>
/// <summary>
///     The scheduler
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="CurrentSynchronizationContextDispatcher" /> class.
/// </summary>
/// <summary>
///     Schedules the specified run.
/// </summary>
/// <param name="run">The run.</param>
/// <summary>
/// The registry of all <see cref="MessageDispatcher"/> instances available to this <see cref="ActorSystem"/>.
/// </summary>
/// <summary>
///     The default dispatcher identifier, also the full key of the configuration of the default dispatcher.
/// </summary>
/// <summary>
/// The list of all configurators used to create <see cref="MessageDispatcher"/> instances.
/// 
/// Has to be thread-safe, as this collection can be accessed concurrently by many actors.
/// </summary>
/// <summary>Initializes a new instance of the <see cref="Dispatchers" /> class.</summary>
/// <param name="system">The system.</param>
/// <param name="prerequisites">The prerequisites required for some <see cref="MessageDispatcherConfigurator"/> instances.</param>
/// <summary>Gets the one and only default dispatcher.</summary>
/// <summary>
/// The <see cref="Configuration.Config"/> for the default dispatcher.
/// </summary>
/// <summary>
/// INTERNAL API
/// 
/// Used when a plugin like Akka.Persistence needs to be able to load dispatcher configurations to the chain.
/// </summary>
/// <summary>
/// The prerequisites required for some <see cref="MessageDispatcherConfigurator"/> instances.
/// </summary>
/// <summary>
/// Returns a dispatcher as specified in configuration. Please note that this method _MAY_
/// create and return a new dispatcher on _EVERY_ call.
/// </summary>
/// <exception cref="ConfigurationException">If the specified dispatcher cannot be found in configuration.</exception>
/// <summary>
/// Checks that configuration provides a section for the given dispatcher.
/// This does not guarantee that no <see cref="ConfigurationException"/> will be thrown
/// when using the dispatcher, because the details can only be checked by trying to
/// instantiate it, which might be undesirable when just checking.
/// </summary>
// It doesn't matter if we create a dispatcher configurator that isn't used due to concurrent lookup.
// That shouldn't happen often and in case it does the actual ExecutorService isn't
// created until used, i.e. cheap.
/// <summary>
/// INTERNAL API
/// 
/// Creates a dispatcher from a <see cref="Configuration.Config"/>. Internal test purpose only.
/// <code>
/// From(Config.GetConfig(id));
/// </code>
/// 
/// The Config must also contain an `id` property, which is the identifier of the dispatcher.
/// </summary>
/// <param name="cfg">The provided configuration section.</param>
/// <returns>An instance of the <see cref="MessageDispatcher"/>, if valid.</returns>
/// <exception cref="ConfigurationException">if the `id` property is missing from <paramref name="cfg"/></exception>
/// <exception cref="NotSupportedException">thrown if the dispatcher path or type cannot be resolved.</exception>
/// <summary>
/// Register a <see cref="MessageDispatcherConfigurator"/> that will be used by <see cref="Lookup"/>
/// and <see cref="HasDispatcher"/> instead of looking up the configurator from the system
/// configuration.
/// 
/// This enables dynamic addition of dispatchers.
/// 
/// <remarks>
/// A <see cref="MessageDispatcherConfigurator"/> for a certain id can only be registered once,
/// i.e. it can not be replaced. It is safe to call this method multiple times, but only the
/// first registration will be used.
/// </remarks>
/// </summary>
/// <returns>This method returns <c>true</c> if the specified configurator was successfully registered.</returns>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// The cached <see cref="MessageDispatcher"/> factory that gets looked up via configuration
/// inside <see cref="Dispatchers"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\ForkJoinDispatcher.cs
//-----------------------------------------------------------------------
// <copyright file="ForkJoinDispatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <see cref="MessageDispatcherConfigurator"/> for the <see cref="ForkJoinDispatcher"/>.
/// 
/// Creates a single <see cref="ForkJoinDispatcher"/> instance and returns the same instance
/// each time <see cref="Dispatcher"/> is called.
/// </summary>
/// <summary>
/// ForkJoinDispatcher - custom multi-threaded dispatcher that runs on top of a 
/// <see cref="Helios.Concurrency.DedicatedThreadPool"/>, designed to be used for mission-critical actors
/// that can't afford <see cref="ThreadPool"/> starvation.
/// 
/// Relevant configuration options:
/// <code>
///     my-forkjoin-dispatcher{
///             type = ForkJoinDispatcher
///	            throughput = 100
///	            dedicated-thread-pool{ #settings for Helios.DedicatedThreadPool
///		            thread-count = 3 #number of threads
///		            #deadlock-timeout = 3s #optional timeout for deadlock detection
///		            threadtype = background #values can be "background" or "foreground"
///	            }
///     }
/// </code>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\FutureActor.cs
//-----------------------------------------------------------------------
// <copyright file="FutureActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Class FutureActor.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="FutureActor" /> class.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="FutureActor" /> class.
/// </summary>
/// <param name="completionSource">The completion source.</param>
/// <param name="respondTo">The respond to.</param>
/// <summary>
///     Processor for user defined messages.
/// </summary>
/// <param name="message">The message.</param>
//if there is no listening actor asking,
//just eval the result directly
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\GenericMailbox.cs
//-----------------------------------------------------------------------
// <copyright file="GenericMailbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Class Mailbox of TSys,TUser.
/// </summary>
//if ThroughputDeadlineTime is enabled, start a stopwatch
//we are about to process all enqueued messages
//start with system messages, they have the highest priority
// TODO: Add + " with " + ActorCell.GetChildren());
//we should process x messages in this run
//try dequeue a user message
//run the receive handler
//check if any system message have arrived while processing user messages
//handle system message
// TODO: Add + " with " + ActorCell.GetChildren());
//if deadline time have expired, stop and break
//we are done processing messages for this run
//there are still messages that needs to be processed
//we still need has unscheduled messages for external info.
//e.g. repointable actor ref uses it
//TODO: will this be enough for external parties to work?
//this is subject of a race condition
//but that doesn't matter, since if the above "if" misses
//the "Post" that adds the new message will still schedule
//this specific call is just to deal with existing messages
//that wasn't scheduled due to dispatcher throughput being reached
//or system messages arriving during user message processing
/// <summary>
/// Schedules this instance.
/// </summary>
//only schedule if we idle
/// <summary>
/// Posts the specified envelope.
/// </summary>
/// <param name="receiver"></param>
/// <param name="envelope"> The envelope. </param>
/// <summary>
/// Stops this instance.
/// </summary>
/// <summary>
/// Disposes this instance.
/// </summary>
//TODO: should we only check userMessages? not system messages?
// actor is null for the deadLetterMailbox
//Akka JVM code:
//   if (actor ne null) { // actor is null for the deadLetterMailbox
//     val dlm = actor.dispatcher.mailboxes.deadLetterMailbox
//     var messageList = systemDrain(new LatestFirstSystemMessageList(NoMessage))
//     while (messageList.nonEmpty) {
//       // message must be “virgin” before being able to systemEnqueue again
//       val msg = messageList.head
//       messageList = messageList.tail
//       msg.unlink()
//       dlm.systemEnqueue(actor.self, msg)
//     }
//     if (messageQueue ne null) // needed for CallingThreadDispatcher, which never calls Mailbox.run()
//       messageQueue.cleanUp(actor.self, actor.dispatcher.mailboxes.deadLetterMailbox.messageQueue)
//   }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\IDispatcherPrerequisites.cs
//-----------------------------------------------------------------------
// <copyright file="IDispatcherPrerequisites.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\IRequiresMessageQueue.cs
//-----------------------------------------------------------------------
// <copyright file="IRequiresMessageQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\ISemantics.cs
//-----------------------------------------------------------------------
// <copyright file="ISemantics.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// 
/// </summary>
/// <summary> 
/// Semantics for message queues that support multiple consumers 
/// </summary>
/// <summary> 
/// Semantics for message queues that have an unbounded size 
/// </summary>
/// <summary> 
/// Semantics for message queues that have a bounded size 
/// </summary>
/// <summary> 
/// The enqueue time to wait until message is dropped to deadletters if the message queue is full 
/// </summary>
/// <summary> 
/// Semantics for message queues that are blocking 
/// </summary>
/// <summary> 
/// The time to wait on a lock before throwing an timeout exception. 
/// </summary>
/// <summary>
/// Semantics for message queues that are Double-Ended.
/// </summary>
/// <summary>
/// Semantics for message queues that are Double-Ended and unbounded
/// </summary>
/// <summary>
/// Semantics for message queues that are Double-Ended and bounded
/// </summary>
//TODO: make this Bounded once we have BoundedMessageQueues
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\Mailbox.cs
//-----------------------------------------------------------------------
// <copyright file="Mailbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Mailbox base class
/// </summary>
/// <summary>
/// Prints a message tosStandard out if the Compile symbol "MAILBOXDEBUG" has been set.
/// If the symbol is not set all invocations to this method will be removed by the compiler.
/// </summary>
/// <summary>
///     Attaches an ActorCell to the Mailbox.
/// </summary>
/// <param name="actorCell"></param>
/// <summary>
///     Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
/// </summary>
/// <summary>
/// Releases unmanaged and - optionally - managed resources.
/// </summary>
/// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
/// <summary>
///     Posts the specified envelope to the mailbox.
/// </summary>
/// <param name="receiver"></param>
/// <param name="envelope">The envelope.</param>
/// <summary>
///     Stops this instance.
/// </summary>
/// <summary>
///     Attaches a MessageDispatcher to the Mailbox.
/// </summary>
/// <param name="dispatcher">The dispatcher.</param>
/// <summary>
///     The has unscheduled messages
/// </summary>
// ReSharper disable once InconsistentNaming
/// <summary>
///     The mailbox status (busy or idle)
/// </summary>
// ReSharper disable once InconsistentNaming
//HACK: Initially set the mailbox as busy in order for it not to scheduled until we want it to
/// <summary>
///     Class MailboxStatus.
/// </summary>
/// <summary>
///     The idle
/// </summary>
/// <summary>
///     The busy
/// </summary>
//TODO: When Mailbox gets SuspendCount, update ActorCell.MakeChild
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\Mailboxes.cs
//-----------------------------------------------------------------------
// <copyright file="Mailboxes.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Class Mailboxes.
/// </summary>
/// <summary>
///     The system
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Mailboxes" /> class.
/// </summary>
/// <param name="system">The system.</param>
//TODO: can't log here, logger not created yet
//  system.Log.Warn("Mailbox Requirement mapping '{0}' is not an actual type",kvp.Key);
/// <summary>
/// Creates a mailbox from a configuration path.
/// </summary>
/// <param name="path">The path.</param>
/// <returns>Mailbox.</returns>
//TODO: this should not exist, its a temp hack because we are not serializing mailbox info when doing remote deploy..
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\MessageQueueMailbox.cs
//-----------------------------------------------------------------------
// <copyright file="MessageQueueMailbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\SingleThreadDispatcher.cs
//-----------------------------------------------------------------------
// <copyright file="SingleThreadDispatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used to create instances of the <see cref="SingleThreadDispatcher"/>. 
/// 
/// Each actor created using the pinned dispatcher gets its own unique thread.
/// <remarks>
/// Always returns a new instance.
/// </remarks>
/// </summary>
/// <summary>
/// Used to power the <see cref="PinnedDispatcherConfigurator"/>.
/// 
/// Guaranteed to provide one new thread instance per actor.
/// 
/// Uses <see cref="DedicatedThreadPool"/> with 1 thread in order 
/// to take advantage of standard cleanup / teardown / queueing mechanics.
/// 
/// /// Relevant configuration options:
/// <code>
///     my-forkjoin-dispatcher{
///             type = PinnedDispatcher
///	            throughput = 100
///	            dedicated-thread-pool{ #settings for Helios.DedicatedThreadPool
///		            #deadlock-timeout = 3s #optional timeout for deadlock detection
///		            threadtype = background #values can be "background" or "foreground"
///                 apartment = mta # values can be "mta" or "sta" or empty
///	            }
///     }
/// 
///     my-other-forkjoin-dispatcher{
///             type = PinnedDispatcher
///             # dedicated-thread-pool section is optional
///     }
/// </code>
/// <remarks>
/// Worth noting that unlike the <see cref="ForkJoinDispatcher"/>, the <see cref="SingleThreadDispatcher"/>
/// does not respect the <c>dedicated-thread-pool.thread-count</c> property in configuration. That value is
/// always equal to 1 in the <see cref="SingleThreadDispatcher"/>.
/// </remarks>
/// </summary>
/// <summary>
///     Schedules the specified run.
/// </summary>
/// <param name="run">The run.</param>
//shut down the dedicated thread pool
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\TaskDispatcher.cs
//-----------------------------------------------------------------------
// <copyright file="TaskDispatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Task based dispatcher
/// </summary>
/// <summary>
/// Takes a <see cref="MessageDispatcherConfigurator"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\ThreadPoolBuilder.cs
//-----------------------------------------------------------------------
// <copyright file="ThreadPoolBuilder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <see cref="Config"/> helper class for configuring <see cref="MessageDispatcherConfigurator"/>
/// instances who depend on the Helios <see cref="DedicatedThreadPool"/>.
/// </summary>
/// <summary>
/// Default settings for <see cref="SingleThreadDispatcher"/> instances.
/// </summary>
/// <summary>
/// Used inside Akka.Remote for constructing the low-level Helios threadpool, but inside
/// vanilla Akka it's also used for constructing custom fixed-size-threadpool dispatchers.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\UnboundedDequeBasedMailbox.cs
//-----------------------------------------------------------------------
// <copyright file="UnboundedDequeBasedMailbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Mailbox with support for EnqueueFirst. Used primarily for <see cref="IStash"/> support.
/// </summary>
/// <summary>
/// Intended for system messages, creates an <see cref="UnboundedMessageQueue"/> to be used 
/// inside the <see cref="Mailbox"/>.
/// </summary>
/// <summary>
/// Used for user-defined messages within a <see cref="Mailbox"/>; creates a new <see cref="UnboundedDequeMessageQueue"/>
/// which means that any actor with a <see cref="IStash"/> can unstash messages to the front of the queue.
/// </summary>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\UnboundedMailbox.cs
//-----------------------------------------------------------------------
// <copyright file="UnboundedMailbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Alias for concurrent queue mailbox
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\UnboundedPriorityMailbox.cs
//-----------------------------------------------------------------------
// <copyright file="UnboundedPriorityMailbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\MessageQueues\BlockingMessageQueue.cs
//-----------------------------------------------------------------------
// <copyright file="BlockingMessageQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary> 
/// Base class for blocking message queues. Allows non thread safe data structures to be used as message queues. 
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\MessageQueues\BoundedMessageQueue.cs
//-----------------------------------------------------------------------
// <copyright file="BoundedMessageQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>An Bounded mailbox message queue.</summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\MessageQueues\DequeWrapperMessageQueue.cs
//-----------------------------------------------------------------------
// <copyright file="DequeWrapperMessageQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Message queue for supporting <see cref="IDequeBasedMessageQueueSemantics"/> within <see cref="Mailbox"/> instances.
/// 
/// Uses a <see cref="Stack{Envelope}"/> internally - each individual <see cref="EnqueueFirst"/>
/// </summary>
/// <summary>
/// Takes another <see cref="IMessageQueue"/> as an argument - wraps <paramref name="messageQueue"/>
/// in order to provide it with prepend (<see cref="EnqueueFirst"/>) semantics.
/// </summary>
/// <param name="messageQueue"></param>
/// <summary>
/// Returns true if there are any messages inside the queue.
/// </summary>
/// <summary>
/// Returns the number of messages in both the internal message queue
/// and the prepend buffer.
/// </summary>
/// <summary>
/// Enqueue a message to the back of the <see cref="IMessageQueue"/>
/// </summary>
/// <param name="envelope"></param>
/// <summary>
/// Attempt to dequeue a message from the front of the prepend buffer.
/// 
/// If the prepend buffer is empty, dequeue a message from the normal
/// <see cref="IMessageQueue"/> wrapped but this wrapper.
/// </summary>
/// <param name="envelope">The message to return, if any</param>
/// <returns><c>true</c> if a message was available, <c>false</c> otherwise.</returns>
/// <summary>
/// Add a message to the front of the queue via the prepend buffer.
/// </summary>
/// <param name="envelope">The message we wish to append to the front of the queue.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\MessageQueues\IMessageQueue.cs
//-----------------------------------------------------------------------
// <copyright file="IMessageQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary> 
/// Interface to be implemented by all mailbox message queues 
/// </summary>
/// <summary> 
/// Tests if the message queue contains any messages 
/// </summary>
/// <summary> 
/// Returns the count of messages currently in the message queue 
/// </summary>
/// <summary> 
/// Enqueues an mailbox envelope onto the message queue 
/// </summary>
/// <param name="envelope"> The envelope to enqueue </param>
/// <summary> 
/// Tries to pull an envelope of the message queue 
/// </summary>
/// <param name="envelope"> The envelope that was dequeued </param>
/// <returns> </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\MessageQueues\UnboundedDequeMessageQueue.cs
//-----------------------------------------------------------------------
// <copyright file="UnboundedDequeMessageQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\MessageQueues\UnboundedMailboxQueue.cs
//-----------------------------------------------------------------------
// <copyright file="UnboundedMailboxQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary> An unbounded mailbox message queue. </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\MessageQueues\UnboundedPriorityMailboxQueue.cs
//-----------------------------------------------------------------------
// <copyright file="UnboundedPriorityMailboxQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary> 
/// Base class message queue that uses a priority generator for messages 
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Dispatch\SysMsg\ISystemMessage.cs
//-----------------------------------------------------------------------
// <copyright file="ISystemMessage.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/**
//@SerialVersionUID(1L)
//private[akka] case class Create(failure: Option[ActorInitializationException]) extends ISystemMessage // sent to self from Dispatcher.register
/// <summary>
///     Class ISystemMessage.
/// </summary>
/// <summary>
///     Class NoMessage.
/// </summary>
/// <summary>
///     Class DeathWatchNotification.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="DeathWatchNotification" /> class.
/// </summary>
/// <param name="actor">The actor.</param>
/// <param name="existenceConfirmed">if set to <c>true</c> [existence confirmed].</param>
/// <param name="addressTerminated">if set to <c>true</c> [address terminated].</param>
/// <summary>
///     Gets the actor.
/// </summary>
/// <value>The actor.</value>
/// <summary>
///     Gets a value indicating whether [existence confirmed].
/// </summary>
/// <value><c>true</c> if [existence confirmed]; otherwise, <c>false</c>.</value>
/// <summary>
///     Gets a value indicating whether [address terminated].
/// </summary>
/// <value><c>true</c> if [address terminated]; otherwise, <c>false</c>.</value>
/// <summary>
///     Class Failed.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Failed" /> class.
/// </summary>
/// <param name="child">The child.</param>
/// <param name="cause">The cause.</param>
/// <param name="uid">The uid</param>
/// <summary>
///     Gets the child.
/// </summary>
/// <value>The child.</value>
/// <summary>
///     Gets the cause.
/// </summary>
/// <value>The cause.</value>
/// <summary>
///     Class Supervise.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Supervise" /> class.
/// </summary>
/// <param name="child">The child.</param>
/// <param name="async">if set to <c>true</c> [asynchronous].</param>
/// <summary>
///     Gets a value indicating whether this <see cref="Supervise" /> is asynchronous.
/// </summary>
/// <value><c>true</c> if asynchronous; otherwise, <c>false</c>.</value>
/// <summary>
///     Gets the child.
/// </summary>
/// <value>The child.</value>
//used to start watching another actor (deathwatch)
/// <summary>
///     Class Watch.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Watch" /> class.
/// </summary>
/// <param name="watchee">The watchee.</param>
/// <param name="watcher">The watcher.</param>
/// <summary>
///     Gets the watchee.
/// </summary>
/// <value>The watchee.</value>
/// <summary>
///     Gets the watcher.
/// </summary>
/// <value>The watcher.</value>
//used to unsubscribe to deathwatch
/// <summary>
///     Class Unwatch.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Unwatch" /> class.
/// </summary>
/// <param name="watchee">The watchee.</param>
/// <param name="watcher">The watcher.</param>
/// <summary>
///     Gets the watchee.
/// </summary>
/// <value>The watchee.</value>
/// <summary>
///     Gets the watcher.
/// </summary>
/// <value>The watcher.</value>
/// <summary>
///     Class ActorTask.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="ActorTask" /> class.
/// </summary>
/// <param name="task">The task.</param>
/// <summary>
///     Gets the task.
/// </summary>
/// <value>The task.</value>
/// <summary>
///     Initializes a new instance of the <see cref="ActorTaskSchedulerMessage" /> class.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="ActorTaskSchedulerMessage" /> class.
/// </summary>
/// <param name="exception">The exception.</param>
/// <summary>
///     Class Restart.
/// </summary>
/// <summary>
///     Class Recreate.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Recreate" /> class.
/// </summary>
/// <param name="cause">The cause.</param>
/// <summary>
///     Gets the cause.
/// </summary>
/// <value>The cause.</value>
/// <summary>
///     Class Resume.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Resume" /> class.
/// </summary>
/// <param name="causedByFailure">The caused by failure.</param>
/// <summary>
///     Gets or sets the caused by failure.
/// </summary>
/// <value>The caused by failure.</value>
/// <summary>
///     Class Suspend.
/// </summary>
/// <summary>
///     Class Stop.
/// </summary>
/// <summary>
///     INTERNAL
/// </summary>
//StopChild is NOT a ISystemMessage
/// <summary>
///     Initializes a new instance of the <see cref="StopChild" /> class.
/// </summary>
/// <param name="child">The child.</param>
/// <summary>
///     Gets the child.
/// </summary>
/// <value>The child.</value>
/// <summary>
///     Class Escalate.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Escalate" /> class.
/// </summary>
/// <param name="reason">The reason.</param>
/// <summary>
///     Gets the reason.
/// </summary>
/// <value>The reason.</value>
/// <summary>
///     Class Terminate.
/// </summary>
/// <summary>
///     Class Terminate.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\ActorEventBus.cs
//-----------------------------------------------------------------------
// <copyright file="ActorEventBus.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents an EventBus where the Subscriber type is ActorRef.
/// </summary>
/// <typeparam name="TEvent">The event type.</typeparam>
/// <typeparam name="TClassifier">The classifier type.</typeparam>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\AddressTerminatedTopic.cs
//-----------------------------------------------------------------------
// <copyright file="AddressTerminatedTopic.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API.
/// 
/// Watchers of remote actor references register themselves as subscribers of
/// <see cref="AddressTerminated"/> notifications. Remote and cluster death watchers
/// publish <see cref="AddressTerminated"/> when a remote system is deemed dead.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\BusLogging.cs
//-----------------------------------------------------------------------
// <copyright file="BusLogging.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A logging adapter implementation publishing log events to the event stream.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BusLogging" /> class.
/// </summary>
/// <param name="bus">The logging bus instance that messages will be published to.</param>
/// <param name="logSource">The log source.</param>
/// <param name="logClass">The log class.</param>
/// <param name="logMessageFormatter">The log message formatter.</param>
/// <summary>
/// Publishes the error message onto the LoggingBus.
/// </summary>
/// <param name="message">The error message.</param>
/// <summary>
/// Publishes the error message and exception onto the LoggingBus.
/// </summary>
/// <param name="cause">The exception that caused this error.</param>
/// <param name="message">The error message.</param>
/// <summary>
/// Publishes the the warning message onto the LoggingBus.
/// </summary>
/// <param name="message">The warning message.</param>
/// <summary>
/// Publishes the the info message onto the LoggingBus.
/// </summary>
/// <param name="message">The info message.</param>
/// <summary>
/// Publishes the the debug message onto the LoggingBus.
/// </summary>
/// <param name="message">The debug message.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\DeadLetter.cs
//-----------------------------------------------------------------------
// <copyright file="DeadLetter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents a message that could not be delivered to it's recipient. 
/// This message wraps the original message, the sender and the intended recipient of the message.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DeadLetter"/> class.
/// </summary>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <param name="recipient">The recipient.</param>
/// <summary>
/// Gets the original message that could not be delivered.
/// </summary>
/// <value>The message.</value>
/// <summary>
/// Gets the recipient of the message.
/// </summary>
/// <value>The recipient of the message.</value>
/// <summary>
/// Gets the sender of the message.
/// </summary>
/// <value>The sender of the message.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\DeadLetterListener.cs
//-----------------------------------------------------------------------
// <copyright file="DeadLetterListener.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Actor responsible for listening to DeadLetter messages and logging them using the EventStream.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\Debug.cs
//-----------------------------------------------------------------------
// <copyright file="Debug.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents an Debug log event.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Debug" /> class.
/// </summary>
/// <param name="logSource">The log source.</param>
/// <param name="logClass">The log class.</param>
/// <param name="message">The message.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\DefaultLogger.cs
//-----------------------------------------------------------------------
// <copyright file="DefaultLogger.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Default logger implementation that outputs logs to the Console.
/// </summary>
/// <summary>
/// Print the specified log event.
/// </summary>
/// <param name="logEvent">The log event that is to be output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\DefaultLogMessageFormatter.cs
//-----------------------------------------------------------------------
// <copyright file="DefaultLogMessageFormatter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Default implementation of the ILogMessageFormatter that uses string.Format to format a log message.
/// </summary>
/// <summary>
/// Formats the log message using string.Format providing the format and specified args.
/// </summary>
/// <param name="format">The format string of the message.</param>
/// <param name="args">The arguments used to format the message.</param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\Error.cs
//-----------------------------------------------------------------------
// <copyright file="Error.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents an Error log event.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Error" /> class.
/// </summary>
/// <param name="cause">The cause.</param>
/// <param name="logSource">The log source.</param>
/// <param name="logClass">The log class.</param>
/// <param name="message">The message.</param>
/// <summary>
/// Gets the cause of the error.
/// </summary>
/// <value>The cause.</value>
/// <summary>
/// Modifies the <see cref="LogEvent"/> printable error stream to also include
/// the details of the <see cref="Cause"/> object itself.
/// </summary>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\EventBus.cs
//-----------------------------------------------------------------------
// <copyright file="EventBus.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents the base event bus, internally manages subscriptions using the event type, classifier type and subscriber type.
/// </summary>
/// <typeparam name="TEvent">The type of the event.</typeparam>
/// <typeparam name="TClassifier">The type of the classifier.</typeparam>
/// <typeparam name="TSubscriber">The type of the subscriber.</typeparam>
/// <summary>
/// Simples the name.
/// </summary>
/// <param name="source">The source.</param>
/// <returns>System.String.</returns>
/// <summary>
/// Simples the name.
/// </summary>
/// <param name="source">The source.</param>
/// <returns>System.String.</returns>
/// <summary>
/// Subscribes the specified subscriber.
/// </summary>
/// <param name="subscriber">The subscriber.</param>
/// <param name="classifier">The classifier.</param>
/// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
//already subscribed
/// <summary>
/// Unsubscribes the specified subscriber.
/// </summary>
/// <param name="subscriber">The subscriber.</param>
/// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
/// <summary>
/// Unsubscribes the specified subscriber.
/// </summary>
/// <param name="subscriber">The subscriber.</param>
/// <param name="classifier">The classifier.</param>
/// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
/// <summary>
/// Clears the cache.
/// </summary>
/// <summary>
/// Determines whether [is sub classification] [the specified parent].
/// </summary>
/// <param name="parent">The parent.</param>
/// <param name="child">The child.</param>
/// <returns><c>true</c> if [is sub classification] [the specified parent]; otherwise, <c>false</c>.</returns>
/// <summary>
/// Publishes the specified event.
/// </summary>
/// <param name="event">The event.</param>
/// <param name="subscriber">The subscriber.</param>
/// <summary>
/// Classifies the specified event.
/// </summary>
/// <param name="event">The event.</param>
/// <param name="classifier">The classifier.</param>
/// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
/// <summary>
/// Gets the classifier.
/// </summary>
/// <param name="event">The event.</param>
/// <returns>`1.</returns>
/// <summary>
/// Publishes the specified event.
/// </summary>
/// <param name="event">The event.</param>
/// <summary>
/// Publishes to subscribers.
/// </summary>
/// <param name="event">The event.</param>
/// <param name="cachedSubscribers">The cached subscribers.</param>
/// <summary>
/// Updates the cache for event classifier.
/// </summary>
/// <param name="event">The event.</param>
/// <param name="eventClass">The event class.</param>
/// <returns>List{`2}.</returns>
//finds a distinct list of subscribers for the given event type
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\EventBusUnsubscriber.cs
//-----------------------------------------------------------------------
// <copyright file="EventBusUnsubscribers.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// 
/// Watches all actors which subscribe on the given eventStream, and unsubscribes them from it when they are Terminated.
/// 
/// Assumptions note:
///  We do not guarantee happens-before in the EventStream when 2 threads subscribe(a) / unsubscribe(a) on the same actor,
/// thus the messages sent to this actor may appear to be reordered - this is fine, because the worst-case is starting to
/// needlessly watch the actor which will not cause trouble for the stream. This is a trade-off between slowing down
/// subscribe calls * because of the need of linearizing the history message sequence and the possibility of sometimes
/// watching a few actors too much - we opt for the 2nd choice here.
/// </summary>
/// <summary>
/// Provides factory for Akka.Event.EventStreamUnsubscriber actors with unique names.
/// This is needed if someone spins up more EventStreams using the same ActorSystem,
/// each stream gets it's own unsubscriber.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\EventStream.cs
//-----------------------------------------------------------------------
// <copyright file="EventStream.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// The EventStream is a pub-sub stream of events that can be both system and user generated. 
/// 
/// The subscribers are IActorRef instances and events can be any object. Subscriptions are hierarchical meaning that if you listen to
/// an event for a particular type you will receive events for that type and any sub types.
/// 
/// If the debug flag is activated any operations on the event stream will be published as debug level events.
/// </summary>
/// <summary>
/// Determines if subscription logging is enabled.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="EventStream"/> class.
/// </summary>
/// <param name="debug">if set to <c>true</c> [debug].</param>
/// <summary>
/// Subscribes the specified subscriber.
/// </summary>
/// <param name="subscriber">The subscriber.</param>
/// <param name="channel">The channel.</param>
/// <returns><c>true</c> if subscription was successful, <c>false</c> otherwise.</returns>
/// <exception cref="System.ArgumentNullException">subscriber</exception>
/// <summary>
/// Unsubscribes the specified subscriber.
/// </summary>
/// <param name="subscriber">The subscriber.</param>
/// <param name="channel">The channel.</param>
/// <returns><c>true</c> if unsubscription was successful, <c>false</c> otherwise.</returns>
/// <exception cref="System.ArgumentNullException">subscriber</exception>
/// <summary>
/// Unsubscribes the specified subscriber.
/// </summary>
/// <param name="subscriber">The subscriber.</param>
/// <returns><c>true</c> if unsubscription was successful, <c>false</c> otherwise.</returns>
/// <exception cref="System.ArgumentNullException">subscriber</exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\EventStreamExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="EventStreamExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Extension methods for the EventStream class.
/// </summary>
/// <summary>
/// Subscribes the specified subscriber.
/// </summary>
/// <typeparam name="TChannel">The channel.</typeparam>
/// <param name="eventStream">The event stream.</param>
/// <param name="subscriber">The subscriber.</param>
/// <returns><c>true</c> if subscription was successful, <c>false</c> otherwise.</returns>
/// <exception cref="System.ArgumentNullException">subscriber</exception>
/// <summary>
/// Unsubscribes the specified subscriber.
/// </summary>
/// <typeparam name="TChannel">The channel.</typeparam>
/// <param name="eventStream">The event stream.</param>
/// <param name="subscriber">The subscriber.</param>
/// <returns><c>true</c> if unsubscription was successful, <c>false</c> otherwise.</returns>
/// <exception cref="System.ArgumentNullException">subscriber</exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\ILoggingAdapter.cs
//-----------------------------------------------------------------------
// <copyright file="ILoggingAdapter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Provides a logging adapter used to log events within the system.
/// </summary>
/// <summary>Returns <c>true</c> if Debug level is enabled.</summary>
/// <summary>Returns <c>true</c> if Info level is enabled.</summary>
/// <summary>Returns <c>true</c> if Warning level is enabled.</summary>
/// <summary>Returns <c>true</c> if Error level is enabled.</summary>
/// <summary>Returns <c>true</c> if the specified level is enabled.</summary>
/// <summary>Logs a message with the Debug level.</summary>
/// <param name="format">The format.</param>
/// <param name="args">The arguments.</param>
/// <summary>Logs a message with the Info level.</summary>
/// <param name="format">The format.</param>
/// <param name="args">The arguments.</param>
/// <summary>Logs a message with the Warning level.</summary>
/// <param name="format">The format.</param>
/// <param name="args">The arguments.</param>
/// <summary>Logs a message with the Warning level.</summary>
/// <param name="format">The format.</param>
/// <param name="args">The arguments.</param>
/// <summary>Logs a message with the Error level.</summary>
/// <param name="format">The format.</param>
/// <param name="args">The arguments.</param>
/// <summary>Logs a message with the Error level.</summary>
/// <param name="cause">The cause.</param>
/// <param name="format">The format.</param>
/// <param name="args">The arguments.</param>
/// <summary>Logs a message with the specified level.</summary>
/// <param name="logLevel">The log level.</param>
/// <param name="format">The format.</param>
/// <param name="args">The arguments.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\ILogMessageFormatter.cs
//-----------------------------------------------------------------------
// <copyright file="ILogMessageFormatter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents a log message formatter, these are used to format log messages based on a string format and an array of format args.
/// </summary>
/// <summary>
/// Format the specified format string using the format args.
/// </summary>
/// <param name="format">The format string of the message.</param>
/// <param name="args">The format args used to format the message.</param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\Info.cs
//-----------------------------------------------------------------------
// <copyright file="Info.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents an Info log event.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Info" /> class.
/// </summary>
/// <param name="logSource">The log source.</param>
/// <param name="logClass">The log class.</param>
/// <param name="message">The message.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\InitializeLogger.cs
//-----------------------------------------------------------------------
// <copyright file="InitializeLogger.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Message used to initialize a logger.
/// </summary> 
/// <summary>
/// Initializes a new instance of the <see cref="InitializeLogger" /> message.
/// </summary>
/// <param name="loggingBus">The logging bus.</param>
/// <summary>
/// Gets the logging bus instance.
/// </summary>
/// <value>The logging bus instance.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\LogEvent.cs
//-----------------------------------------------------------------------
// <copyright file="LogEvent.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents a LogEvent in the system.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="LogEvent" /> class.
/// </summary>
/// <summary>
/// Gets the timestamp of this LogEvent.
/// </summary>
/// <value>The timestamp.</value>
/// <summary>
/// Gets the thread of this LogEvent.
/// </summary>
/// <value>The thread.</value>
/// <summary>
/// Gets the log source of this LogEvent.
/// </summary>
/// <value>The log source.</value>
/// <summary>
/// Gets the log class of this LogEvent.
/// </summary>
/// <value>The log class.</value>
/// <summary>
/// Gets the message of this LogEvent.
/// </summary>
/// <value>The message.</value>
/// <summary>
/// Gets the specified LogLevel for this LogEvent.
/// </summary>
/// <returns>LogLevel.</returns>
/// <summary>
/// Returns a <see cref="System.String" /> that represents this LogEvent.
/// </summary>
/// <returns>A <see cref="System.String" /> that represents this LogEvent.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\LoggerInitialized.cs
//-----------------------------------------------------------------------
// <copyright file="LoggerInitialized.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Message used to notify that a logger has been initialized.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\Logging.cs
//-----------------------------------------------------------------------
// <copyright file="Logging.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is a “marker” class which is inserted as originator class into
/// <see cref="LogEvent"/> when the string representation was supplied directly.
/// </summary>
/// <summary>
/// Provides the functionality for creating logger instances and helpers for converting to/from LogLevel values.
/// </summary>
/// <summary>
/// Returns an instance of the standard out logger.
/// </summary>
/// <summary>
/// Classes for.
/// </summary>
/// <param name="logLevel">The log level.</param>
/// <returns>Type.</returns>
/// <exception cref="System.ArgumentException">Unknown LogLevel;logLevel</exception>
/// <summary>
/// Returns the string representation for a particular LogLevel.
/// </summary>
/// <param name="logLevel">The log level to get the string representation for.</param>
/// <returns></returns>
/// <exception cref="ArgumentException"></exception>
/// <summary>
/// Gets an instance of the logger.
/// </summary>
/// <param name="context">The context.</param>
/// <param name="logMessageFormatter">The log message formatter.</param>
/// <returns>A logging adapter instance.</returns>
/// <summary>
/// Gets an instance of the logger.
/// </summary>
/// <param name="system">The actor system.</param>
/// <param name="logSourceObj">The log source object.</param>
/// <param name="logMessageFormatter">The log message formatter.</param>
/// <returns>A logging adapter instance.</returns>
/// <summary>
/// Gets an instance of the logger.
/// </summary>
/// <param name="loggingBus">The logging bus this logger will write to.</param>
/// <param name="logSourceObj">The log source object.</param>
/// <param name="logMessageFormatter">The log message formatter.</param>
/// <returns>A logging adapter instance.</returns>
//TODO: refine this
/// <summary>
/// Gets the LogLevel for a particular log level string.
/// </summary>
/// <param name="logLevel">The log level string.</param>
/// <returns>The LogLevel mapping to the string based log level.</returns>
/// <exception cref="System.ArgumentException">Unknown LogLevel;logLevel</exception>
/// <summary>
/// Given the type of <see cref="LogEvent"/> returns the corresponding <see cref="LogLevel"/>
/// </summary>
/// <typeparam name="T"></typeparam>
/// <returns>The <see cref="LogLevel"/> that corresponds to the specified type.</returns>
/// <exception cref="System.ArgumentException">Thrown for unknown types, i.e. when <typeparamref name="T"/> is not
/// <see cref="Event.Debug"/>, <see cref="Event.Info"/>, <see cref="Event.Warning"/> or<see cref="Event.Error"/></exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\LoggingAdapterBase.cs
//-----------------------------------------------------------------------
// <copyright file="LoggingAdapterBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents a base logging adapter implementation which can be used by logging adapter implementations.
/// </summary>
/// <summary>
/// Creates an instance of the LoggingAdapterBase.
/// </summary>
/// <param name="logMessageFormatter">The log message formatter used by this logging adapter.</param>
/// <exception cref="ArgumentNullException">This exception is thrown when the supplied message formatter is null.</exception>
/// <summary>
/// Checks the logging adapter to see if the supplied <paramref name="logLevel"/> is enabled.
/// </summary>
/// <param name="logLevel">The log level to check if it is enabled in this logging adapter.</param>
/// <returns><c>true</c> if the supplied log level is enabled; otherwise <c>false</c></returns>
/// <exception cref="NotSupportedException">This exception is thrown when the supplied log level is unknown.</exception>
/// <summary>
/// Handles logging a log event for a particular level if that level is enabled. 
/// </summary>
/// <param name="logLevel">The log level of the log event.</param>
/// <param name="message">The log message of the log event.</param>
/// <exception cref="NotSupportedException">This exception is thrown when the supplied log level is unknown.</exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\LoggingBus.cs
//-----------------------------------------------------------------------
// <copyright file="LoggingBus.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents a logging bus which subscribes loggers to the system LogEvents for the desired minimum level.
/// </summary>
/// <summary>
/// Gets the minimum log level that this LoggingBus will subscribe to, any LogEvents with a log level below will not be subscribed to.
/// </summary>
/// <value>The log level.</value>
/// <summary>
/// Determines whether [is sub classification] [the specified parent].
/// </summary>
/// <param name="parent">The parent.</param>
/// <param name="child">The child.</param>
/// <returns><c>true</c> if [is sub classification] [the specified parent]; otherwise, <c>false</c>.</returns>
/// <summary>
/// Publishes the specified event.
/// </summary>
/// <param name="event">The event.</param>
/// <param name="subscriber">The subscriber.</param>
/// <summary>
/// Classifies the specified event.
/// </summary>
/// <param name="event">The event.</param>
/// <param name="classifier">The classifier.</param>
/// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
/// <summary>
/// Gets the classifier for the LogEvent.
/// </summary>
/// <param name="event">The event.</param>
/// <returns>Type.</returns>
/// <summary>
/// Starts the default loggers.
/// </summary>
/// <param name="system">The system.</param>
/// <exception cref="System.Exception">Can not use logger of type: + loggerType</exception>
//TODO: Implement stopping loggers
/// <summary>
/// Starts the StandardOutLogger logger.
/// </summary>
/// <param name="config">The configuration.</param>
/// <summary>
/// Sets up StandardOutLogger logger.
/// </summary>
/// <param name="config">The configuration.</param>
/// <summary>
/// Sets the minimum log level for the LoggingBus, any LogEvents below this level will not be listened to.
/// </summary>
/// <param name="logLevel">The log level.</param>
//subscribe to given log level and above
//unsubscribe to all levels below loglevel
//subscribe to given log level and above
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\LogLevel.cs
//-----------------------------------------------------------------------
// <copyright file="LogLevel.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Enumeration representing the various log levels in the system.
/// </summary>
/// <summary>
/// The debug log level.
/// </summary>
/// <summary>
/// The information log level.
/// </summary>
/// <summary>
/// The warning log level.
/// </summary>
/// <summary>
/// The error log level.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\LogMessage.cs
//-----------------------------------------------------------------------
// <copyright file="LogMessage.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents a log message which is composed of a format string and format args.
/// </summary>
/// <summary>
/// Gets the format string of this log message.
/// </summary>
/// <summary>
/// Gets the format args of this log message.
/// </summary>
/// <summary>
/// Initializes an instance of the LogMessage with the specified formatter, format and args.
/// </summary>
/// <param name="formatter">The formatter for the LogMessage.</param>
/// <param name="format">The string format of the LogMessage.</param>
/// <param name="args">The format args of the LogMessage.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\StandardOutLogger.cs
//-----------------------------------------------------------------------
// <copyright file="StandardOutLogger.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents a logger that logs using the StandardOutWriter.
/// The logger can also be configured to use colors for the various log event types.
/// </summary>
/// <summary>
/// Gets the provider.
/// </summary>
/// <exception cref="System.NotSupportedException">StandardOutLogger does not provide</exception>
/// <summary>
/// Gets the path of this actor.
/// </summary>
/// <summary>
/// Handles log events printing them to the Console.
/// </summary>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <exception cref="System.ArgumentNullException">message</exception>
/// <summary>
/// Gets or Sets the color of Debug events.
/// </summary>
/// <summary>
/// Gets or Sets the color of Info events.
/// </summary>
/// <summary>
/// Gets or Sets the color of Warning events.
/// </summary>
/// <summary>
/// Gets or Sets the color of Error events. 
/// </summary>
/// <summary>
/// Gets or Sets whether or not to use colors when printing events.
/// </summary>
/// <summary>
/// Prints the LogEvent using the StandardOutWriter.
/// </summary>
/// <param name="logEvent"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\Subscription.cs
//-----------------------------------------------------------------------
// <copyright file="Subscription.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents a Subscription to the EventBus.
/// </summary>
/// <typeparam name="TSubscriber">The type of the subscriber.</typeparam>
/// <typeparam name="TClassifier">The type of the classifier.</typeparam>
/// <summary>
/// Initializes a new instance of the <see cref="Subscription{TSubscriber, TClassifier}"/> class.
/// </summary>
/// <param name="subscriber">The subscriber.</param>
/// <param name="unsubscriptions">The unsubscriptions.</param>
/// <summary>
/// Initializes a new instance of the <see cref="Subscription{TSubscriber, TClassifier}"/> class.
/// </summary>
/// <param name="subscriber">The subscriber.</param>
/// <summary>
/// Gets the subscriber attached to this subscription.
/// </summary>
/// <value>The subscriber.</value>
/// <summary>
/// Gets the unsubscriptions of this particular subscription.
/// </summary>
/// <value>The unsubscriptions.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\TraceLogger.cs
//-----------------------------------------------------------------------
// <copyright file="TraceLogger.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// TraceLogger - writes to System.Trace; useful for systems that use trace listeners.
/// 
/// To activate the TraceLogger, add loggers = [""Akka.Event.TraceLogger, Akka""] to your config
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\UnhandledMessage.cs
//-----------------------------------------------------------------------
// <copyright file="UnhandledMessage.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents an UnhandledMessage that was not handled by the Recipient.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="UnhandledMessage" /> class.
/// </summary>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <param name="recipient">The recipient.</param>
/// <summary>
/// Gets the original message that could not be handled.
/// </summary>
/// <value>The message.</value>
/// <summary>
/// Gets the sender of the message.
/// </summary>
/// <value>The sender of the message.</value>
/// <summary>
/// Gets the recipient of the message.
/// </summary>
/// <value>The recipient of the message.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Event\Warning.cs
//-----------------------------------------------------------------------
// <copyright file="Warning.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents an Warning log event.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Warning" /> class.
/// </summary>
/// <param name="logSource">The log source.</param>
/// <param name="logClass">The log class.</param>
/// <param name="message">The message.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\ByteBuffer.cs
//-----------------------------------------------------------------------
// <copyright file="ByteBuffer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\DatagramChannel.cs
//-----------------------------------------------------------------------
// <copyright file="DatagramChannel.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\DirectByteBufferPool.cs
//-----------------------------------------------------------------------
// <copyright file="DirectByteBufferPool.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// 
/// A buffer pool which keeps a free list of direct buffers of a specified default
/// size in a simple fixed size stack.
///
/// If the stack is full the buffer is de-referenced and available to be
/// freed by normal garbage collection.
/// </summary>
// else let the buffer be gc'd
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\Dns.cs
//-----------------------------------------------------------------------
// <copyright file="Dns.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: Throw better exception
//TODO: system.dynamicAccess.getClassFor[DnsProvider](Settings.ProviderObjectName).get.newInstance()
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\DnsProvider.cs
//-----------------------------------------------------------------------
// <copyright file="DnsProvider.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\Inet.cs
//-----------------------------------------------------------------------
// <copyright file="Inet.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: What is the .NET equivalent
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\InetAddressDnsProvider.cs
//-----------------------------------------------------------------------
// <copyright file="InetAddressDnsProvider.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\InetAddressDnsResolver.cs
//-----------------------------------------------------------------------
// <copyright file="InetAddressDnsResolver.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: IP6
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\IO.cs
//-----------------------------------------------------------------------
// <copyright file="IO.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\SelectionHandler.cs
//-----------------------------------------------------------------------
// <copyright file="SelectionHandler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: requiring
// OBJECT 
/* 
// Stop select loop when no more interested sockets. It will be started again once a socket is registered
// One of the sockets has been closed
// Start the select loop on initial enable interest
// The select loop will stop itself if no more interested sockets
// Start the select loop on initial enable interest
// The select loop will stop itself if no more interested sockets
// CLASS
// we can never recover from failures of a connection or listener child
// and log the failure at debug level
//ignore adding completed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\SimpleDnsCache.cs
//-----------------------------------------------------------------------
// <copyright file="SimpleDnsCache.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\SimpleDnsManager.cs
//-----------------------------------------------------------------------
// <copyright file="SimpleDnsManager.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\SocketAsyncEventArgsPool.cs
//-----------------------------------------------------------------------
// <copyright file="SocketAsyncEventArgsPool.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// TODO: make configurable with good default
//TODO: What do we do when pool is empty?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\SocketChannel.cs
//-----------------------------------------------------------------------
// <copyright file="SocketChannel.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/* 
//TODO: Investigate. If we don't wait 1ms we get intermittent test failure in TcpListenerSpec.  
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\Tcp.cs
//-----------------------------------------------------------------------
// <copyright file="Tcp.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// COMMANDS
/// <summary>
/// The Connect message is sent to the TCP manager actor, which is obtained via
/// <see cref="TcpExt.Manager" />. Either the manager replies with a <see cref="CommandFailed" />
/// or the actor handling the new connection replies with a <see cref="Connected" />
/// message.
/// </summary>
/// <summary>
/// The Bind message is send to the TCP manager actor, which is obtained via
/// <see cref="TcpExt.Manager" /> in order to bind to a listening socket. The manager
/// replies either with a <see cref="CommandFailed" /> or the actor handling the listen
/// socket replies with a <see cref="Bound" /> message. If the local port is set to 0 in
/// the Bind message, then the <see cref="Bound" /> message should be inspected to find
/// the actual port which was bound to.
/// </summary>
/// <summary>
/// This message must be sent to a TCP connection actor after receiving the
/// <see cref="Connected" /> message. The connection will not read any data from the
/// socket until this message is received, because this message defines the
/// actor which will receive all inbound data.
/// </summary>
/// <summary>
/// In order to close down a listening socket, send this message to that socket’s
/// actor (that is the actor which previously had sent the <see cref="Bound" /> message). The
/// listener socket actor will reply with a <see cref="Unbound" /> message.
/// </summary>
/// <summary>
/// Common interface for all commands which aim to close down an open connection.
/// </summary>
/// <summary>
/// A normal close operation will first flush pending writes and then close the
/// socket. The sender of this command and the registered handler for incoming
/// data will both be notified once the socket is closed using a <see cref="Closed" />
/// message.
/// </summary>
/// <summary>
/// A confirmed close operation will flush pending writes and half-close the
/// connection, waiting for the peer to close the other half. The sender of this
/// command and the registered handler for incoming data will both be notified
/// once the socket is closed using a <see cref="ConfirmedClosed" /> message.
/// </summary>
/// <summary>
/// An abort operation will not flush pending writes and will issue a TCP ABORT
/// command to the O/S kernel which should result in a TCP_RST packet being sent
/// to the peer. The sender of this command and the registered handler for
/// incoming data will both be notified once the socket is closed using a
/// <see cref="Aborted" /> message.
/// </summary>
/// <summary>
/// Each <see cref="WriteCommand" /> can optionally request a positive acknowledgment to be sent
/// to the commanding actor. If such notification is not desired the <see cref="WriteCommand#ack" />
/// must be set to an instance of this class. The token contained within can be used
/// to recognize which write failed when receiving a <see cref="CommandFailed" /> message.
/// </summary>
/// <summary>
/// Write data to the TCP connection. If no ack is needed use the special
/// `NoAck` object. The connection actor will reply with a <see cref="CommandFailed" />
/// message if the write could not be enqueued. If <see cref="WriteCommand#wantsAck" />
/// returns true, the connection actor will reply with the supplied <see cref="WriteCommand#ack" />
/// token once the write has been successfully enqueued to the O/S kernel.
/// <b>Note that this does not in any way guarantee that the data will be
/// or have been sent!</b> Unfortunately there is no way to determine whether
/// a particular write has been sent by the O/S.
/// </summary>
/// <summary>
/// Write `count` bytes starting at `position` from file at `filePath` to the connection.
/// The count must be &gt; 0. The connection actor will reply with a <see cref="CommandFailed"/>
/// message if the write could not be enqueued. If <see cref="SimpleWriteCommand.WantsAck"/>
/// returns true, the connection actor will reply with the supplied <see cref="SimpleWriteCommand.Ack"/>
/// token once the write has been successfully enqueued to the O/S kernel.
/// <b>Note that this does not in any way guarantee that the data will be
/// or have been sent!</b> Unfortunately there is no way to determine whether
/// a particular write has been sent by the O/S.
/// </summary>
/// <summary>
/// A write command which aggregates two other write commands. Using this construct
/// you can chain a number of <see cref="Akka.IO.Tcp.Write" /> and/or <see cref="Akka.IO.Tcp.WriteFile" /> commands together in a way
/// that allows them to be handled as a single write which gets written out to the
/// network as quickly as possible.
/// If the sub commands contain `ack` requests they will be honored as soon as the
/// respective write has been written completely.
/// </summary>
/// <summary>
/// When `useResumeWriting` is in effect as was indicated in the <see cref="Register" /> message
/// then this command needs to be sent to the connection actor in order to re-enable
/// writing after a <see cref="CommandFailed" /> event. All <see cref="WriteCommand" /> processed by the
/// connection actor between the first <see cref="CommandFailed" /> and subsequent reception of
/// this message will also be rejected with <see cref="CommandFailed" />.
/// </summary>
/// <summary>
/// Sending this command to the connection actor will disable reading from the TCP
/// socket. TCP flow-control will then propagate backpressure to the sender side
/// as buffers fill up on either end. To re-enable reading send <see cref="ResumeReading" />.
/// </summary>
/// <summary>
/// This command needs to be sent to the connection actor after a <see cref="SuspendReading" />
/// command in order to resume reading from the socket.
/// </summary>
/// <summary>
/// This message enables the accepting of the next connection if read throttling is enabled
/// for connection actors.
/// </summary>
// EVENTS
/// <summary>
/// Common interface for all events generated by the TCP layer actors.
/// </summary>
/// <summary>
/// Whenever data are read from a socket they will be transferred within this
/// class to the handler actor which was designated in the <see cref="Register" /> message.
/// </summary>
/// <summary>
/// The connection actor sends this message either to the sender of a <see cref="Connect" />
/// command (for outbound) or to the handler for incoming connections designated
/// in the <see cref="Bind" /> message. The connection is characterized by the `remoteAddress`
/// and `localAddress` TCP endpoints.
/// </summary>
/// <summary>
/// Whenever a command cannot be completed, the queried actor will reply with
/// this message, wrapping the original command which failed.
/// </summary>
/// <summary>
/// When `useResumeWriting` is in effect as indicated in the <see cref="Register" /> message,
/// the <see cref="ResumeWriting" /> command will be acknowledged by this message type, upon
/// which it is safe to send at least one write. This means that all writes preceding
/// the first <see cref="CommandFailed" /> message have been enqueued to the O/S kernel at this
/// point.
/// </summary>
/// <summary>
/// The sender of a <see cref="Bind" /> command will—in case of success—receive confirmation
/// in this form. If the bind address indicated a 0 port number, then the contained
/// `localAddress` can be used to find out which port was automatically assigned.
/// </summary>
/// <summary>
/// The sender of an <see cref="Unbind" /> command will receive confirmation through this
/// message once the listening socket has been closed.
/// </summary>
/// <summary>
/// This is the common interface for all events which indicate that a connection
/// has been closed or half-closed.
/// </summary>
/// <summary>
/// The connection has been closed normally in response to a <see cref="Close" /> command.
/// </summary>
/// <summary>
/// The connection has been aborted in response to an <see cref="Abort" /> command.
/// </summary>
/// <summary>
/// The connection has been half-closed by us and then half-close by the peer
/// in response to a <see cref="ConfirmedClose" /> command.
/// </summary>
/// <summary>
/// The peer has closed its writing half of the connection.
/// </summary>
/// <summary>
/// The connection has been closed due to an IO error.
/// </summary>
//TODO: requiring, check defaults
//_fileIoDispatcher = system.Dispatchers.Lookup(_settings.FileIODispatcher);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\TcpConnection.cs
//-----------------------------------------------------------------------
// <copyright file="TcpConnection.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/**
// for ConnectionClosed message in postStop
// STATES
/** connection established, waiting for registration from user handler */
// up to this point we've been watching the commander,
// but since registration is now complete we only need to watch the handler from here on
// if we have resumed reading from pullMode while waiting for Register then register OP_READ interest
// immediately try reading, pullMode is handled by readingSuspended
// after sending `Register` user should watch this actor to make sure
// it didn't die because of the timeout
/** normal connected state */
/** the peer sent EOF first, but we may still want to send */
/** connection is closing but a write has to be finished first */
// writing is now finished
// rethrow exception from dispatcher task
/** connection is closed on our side and we're waiting from confirmation from the other side */
/*
//TODO: File IO
// AUXILIARIES and IMPLEMENTATION
/** used in subclasses to start the common machinery above once a channel is connected */
// Turn off Nagle's algorithm by default
// TODO: Not ported. The following need to be investigated before porting
//if (WindowsConnectionAbortWorkaroundEnabled) 
//    registration.EnableInterest(SocketAsyncOperation.Connect);
// TODO: Port. Socket does not seem to expose (isOutputShutdown). It is passed as 'how' argument to Socket.Shutdown, but not exposed. 
// case EndOfStream if channel.socket.isOutputShutdown ⇒
//    if (TraceLogging) log.debug("Read returned end-of-stream, our side already closed")
//    doCloseConnection(info.handler, closeCommander, ConfirmedClosed)
// TODO: Port. Socket does not seem to expose (isOutputShutdown). It is passed as 'how' argument to Socket.Shutdown, but not exposed. 
// if (channel.socket.isOutputShutdown) ConfirmedClosed
// report that peer closed the connection
// used to check if peer already closed its side later
// finish writing first
// shutdown output and wait for confirmation
// If peer closed first, the socket is now fully closed.
// Also, if shutdownOutput threw an exception we expect this to be an indication
// that the peer closed first or concurrently with this code running.
// close now
//TODO: Port. Where is this used?
/*
// causes the following close() to send TCP RST
//TODO: Port file IO
// empty write with either an ACK or a non-standard NoACK
// at first we try to drain the remaining bytes from the buffer
// we weren't able to write all bytes from the buffer, so we need to try again later
// copy with updated remainingData
//TODO: Port File IO
// INTERNAL API
/**
/**
// INTERNAL MESSAGES
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\TcpIncomingConnection.cs
//-----------------------------------------------------------------------
// <copyright file="TcpIncomingConnection.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/**
// sign death pact
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\TcpListener.cs
//-----------------------------------------------------------------------
// <copyright file="TcpListener.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: log.debug("Error closing socket channel: {}", e)
//TODO: log.debug("Unbinding endpoint {}", localAddress)
//TODO: log.debug("Unbound endpoint {}, stopping listener", localAddress)
// log.error(e, "Accept error: could not accept new connection")
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\TcpManager.cs
//-----------------------------------------------------------------------
// <copyright file="TcpManager.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\TcpOutgoingConnection.cs
//-----------------------------------------------------------------------
// <copyright file="TcpOutgoingConnection.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// sign death pact
//Initiate connection timeout if supplied
// Clear the timeout
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\Udp.cs
//-----------------------------------------------------------------------
// <copyright file="Udp.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// UDP Extension for Akka’s IO layer.
///
/// This extension implements the connectionless UDP protocol without
/// calling `connect` on the underlying sockets, i.e. without restricting
/// from whom data can be received. For “connected” UDP mode see <see cref="UdpConnected"/>.
///
/// For a full description of the design and philosophy behind this IO
/// implementation please refer to <see href="http://doc.akka.io/">the Akka online documentation</see>.
/// </summary>
/// <summary>The common interface for <see cref="Command"/> and <see cref="Event"/>.</summary>
/// <summary>The common type of all commands supported by the UDP implementation.</summary>
/// <summary>
/// Each <see cref="Send"/> can optionally request a positive acknowledgment to be sent
/// to the commanding actor. If such notification is not desired the <see cref="Send.Ack"/>
/// must be set to an instance of this class. The token contained within can be used
/// to recognize which write failed when receiving a <see cref="CommandFailed"/> message.
/// </summary>
/// <summary>
/// Default <see cref="NoAck"/> instance which is used when no acknowledgment information is
/// explicitly provided. Its “token” is `null`.
/// </summary>
/// <summary>
/// This message is understood by the “simple sender” which can be obtained by
/// sending the <see cref="SimpleSender"/> query to the <see cref="UdpExt.Manager"/> as well as by
/// the listener actors which are created in response to <see cref="Bind"/>. It will send
/// the given payload data as one UDP datagram to the given target address. The
/// UDP actor will respond with <see cref="CommandFailed"/> if the send could not be
/// enqueued to the O/S kernel because the send buffer was full. If the given
/// `ack` is not of type <see cref="NoAck"/> the UDP actor will reply with the given
/// object as soon as the datagram has been successfully enqueued to the O/S
/// kernel.
///
/// The sending UDP socket’s address belongs to the “simple sender” which does
/// not handle inbound datagrams and sends from an ephemeral port; therefore
/// sending using this mechanism is not suitable if replies are expected, use
/// <see cref="Bind"/> in that case.
/// </summary>
/// <summary>
///  Send this message to the <see cref="UdpExt.Manager"/> in order to bind to the given
///  local port (or an automatically assigned one if the port number is zero).
///  The listener actor for the newly bound port will reply with a <see cref="Bound"/>
///  message, or the manager will reply with a <see cref="CommandFailed"/> message.
/// </summary>
/// <summary>
/// Send this message to the listener actor that previously sent a <see cref="Bound"/>
/// message in order to close the listening socket. The recipient will reply
/// with an <see cref="Unbound"/> message.
/// </summary>
/// <summary>
/// Retrieve a reference to a “simple sender” actor of the UDP extension.
/// The newly created “simple sender” will reply with the <see cref="SimpleSenderReady" /> notification.
///
/// The “simple sender” is a convenient service for being able to send datagrams
/// when the originating address is meaningless, i.e. when no reply is expected.
///
/// The “simple sender” will not stop itself, you will have to send it a <see cref="Akka.Actor.PoisonPill"/>
/// when you want to close the socket.
/// </summary>
/// <summary>
/// Send this message to a listener actor (which sent a <see cref="Bound"/> message) to
/// have it stop reading datagrams from the network. If the O/S kernel’s receive
/// buffer runs full then subsequent datagrams will be silently discarded.
/// Re-enable reading from the socket using the `ResumeReading` command.
/// </summary>
/// <summary>
///  This message must be sent to the listener actor to re-enable reading from
///  the socket after a `SuspendReading` command.
/// </summary>
/// <summary>The common type of all events emitted by the UDP implementation.</summary>
/// <summary>
///  When a listener actor receives a datagram from its socket it will send
///  it to the handler designated in the <see cref="Bind"/> message using this message type.
/// </summary>
/// <summary>
/// When a command fails it will be replied to with this message type,
/// wrapping the failing command object.
/// </summary>
/// <summary>
/// This message is sent by the listener actor in response to a <see cref="Bind"/> command.
/// If the address to bind to specified a port number of zero, then this message
/// can be inspected to find out which port was automatically assigned.
/// </summary>
/// <summary> The “simple sender” sends this message type in response to a <see cref="SimpleSender"/> query. </summary>
/// <summary>
/// This message is sent by the listener actor in response to an `Unbind` command
/// after the socket has been closed.
/// </summary>
/// <summary>
/// <see cref="Akka.IO.Inet.SocketOption"/> to set the SO_BROADCAST option
///
/// For more information see cref="System.Net.Sockets.Socket.EnableBroadcast"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\UdpConnected.cs
//-----------------------------------------------------------------------
// <copyright file="UdpConnected.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// UDP Extension for Akka’s IO layer.
///
/// This extension implements the connectionless UDP protocol with
/// calling `connect` on the underlying sockets, i.e. with restricting
/// from whom data can be received. For “unconnected” UDP mode see <see cref="Udp"/>.
///
/// For a full description of the design and philosophy behind this IO
/// implementation please refer to <see href="http://doc.akka.io/">the Akka online documentation</see>.
/// </summary>
/// <summary>
/// The common interface for <see cref="Command"/> and <see cref="Event"/>.
/// </summary>
/// <summary>
/// The common type of all commands supported by the UDP implementation.
/// </summary>
/// <summary>
/// Each <see cref="Send"/> can optionally request a positive acknowledgment to be sent
/// to the commanding actor. If such notification is not desired the <see cref="Send.Ack"/>
/// must be set to an instance of this class. The token contained within can be used
/// to recognize which write failed when receiving a <see cref="CommandFailed"/> message.
/// </summary>
/// <summary>
/// Default <see cref="NoAck"/> instance which is used when no acknowledgment information is
/// explicitly provided. Its “token” is `null`.
/// </summary>
/// <summary>
/// This message is understood by the connection actors to send data to their
/// designated destination. The connection actor will respond with
/// <see cref="CommandFailed"/> if the send could not be enqueued to the O/S kernel
/// because the send buffer was full. If the given `ack` is not of type <see cref="NoAck"/>
/// the connection actor will reply with the given object as soon as the datagram
/// has been successfully enqueued to the O/S kernel.
/// </summary>
/// <summary>
/// Send this message to the <see cref="UdpExt.Manager"/> in order to bind to a local
/// port (optionally with the chosen `localAddress`) and create a UDP socket
/// which is restricted to sending to and receiving from the given `remoteAddress`.
/// All received datagrams will be sent to the designated `handler` actor.
/// </summary>
/// <summary>
/// Send this message to a connection actor (which had previously sent the
/// <see cref="Connected"/> message) in order to close the socket. The connection actor
/// will reply with a <see cref="Disconnected"/> message.
/// </summary>
/// <summary>
/// Send this message to a listener actor (which sent a <see cref="Udp.Bound"/> message) to
/// have it stop reading datagrams from the network. If the O/S kernel’s receive
/// buffer runs full then subsequent datagrams will be silently discarded.
/// Re-enable reading from the socket using the `ResumeReading` command.
/// </summary>
/// <summary>
/// This message must be sent to the listener actor to re-enable reading from
/// the socket after a `SuspendReading` command.
/// </summary>
/// <summary>
/// The common type of all events emitted by the UDP implementation.
/// </summary>
/// <summary>
/// When a connection actor receives a datagram from its socket it will send
/// it to the handler designated in the <see cref="Udp.Bind"/> message using this message type.
/// </summary>
/// <summary>
/// When a command fails it will be replied to with this message type,
/// wrapping the failing command object.
/// </summary>
/// <summary>
/// This message is sent by the connection actor to the actor which sent the
/// <see cref="Connect"/> message when the UDP socket has been bound to the local and
/// remote addresses given.
/// </summary>
/// <summary>
/// This message is sent by the connection actor to the actor which sent the
/// `Disconnect` message when the UDP socket has been closed.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\UdpConnectedManager.cs
//-----------------------------------------------------------------------
// <copyright file="UdpConnectedManager.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// INTERNAL API
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\UdpConnection.cs
//-----------------------------------------------------------------------
// <copyright file="UdpConnection.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Datagram channel either sends the whole message, or nothing
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\UdpListener.cs
//-----------------------------------------------------------------------
// <copyright file="UdpListener.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// INTERNAL API
// sign death pact
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\UdpManager.cs
//-----------------------------------------------------------------------
// <copyright file="UdpManager.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\UdpSender.cs
//-----------------------------------------------------------------------
// <copyright file="UdpSender.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\IO\WithUdpSend.cs
//-----------------------------------------------------------------------
// <copyright file="WithUdpSend.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Datagram channel either sends the whole message, or nothing
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Pattern\BackoffSupervisor.cs
//-----------------------------------------------------------------------
// <copyright file="BackoffSupervisor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Actor used to supervise actors with ability to restart them after back-off timeout occurred. 
/// It's designed for cases when i.e. persistent actor stops due to journal unavailability or failure. 
/// In this case it better to wait before restart.
/// </summary>
/// <summary>
/// Request <see cref="BackoffSupervisor"/> with this message to receive <see cref="CurrentChild"/> response with current child.
/// </summary>
// duration overflow protection (> 100 years)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Pattern\CircuitBreaker.cs
//-----------------------------------------------------------------------
// <copyright file="CircuitBreaker.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Provides circuit breaker functionality to provide stability when working with 
/// "dangerous" operations, e.g. calls to remote systems
/// 
///<list type="bullet">
///<listheader>
///    <description>Transitions through three states:</description>
///</listheader>
///<item>
///    <term>In *Closed* state, </term>
///    <description>calls pass through until the maxFailures count is reached. 
///         This causes the circuit breaker to open. Both exceptions and calls exceeding 
///         callTimeout are considered failures.</description>
///</item>
///<item>
///    <term>In *Open* state, </term>
///    <description>calls fail-fast with an exception. After resetTimeout, 
///         circuit breaker transitions to half-open state.</description>
///</item>
///<item>
///    <term>In *Half-Open* state, </term>
///    <description>the first call will be allowed through, if it succeeds 
///         the circuit breaker will reset to closed state. If it fails, the circuit 
///         breaker will re-open to open state. All calls beyond the first that execute 
///         while the first is running will fail-fast with an exception.</description>
///</item>
///</list>
/// </summary>
/// <summary>
/// The current state of the breaker -- Closed, Half-Open, or Closed -- *access only via helper methods*
/// </summary>
/// <summary>
/// Helper method for access to the underlying state via Interlocked
/// </summary>
/// <param name="oldState">Previous state on transition</param>
/// <param name="newState">Next state on transition</param>
/// <returns>Whether the previous state matched correctly</returns>
/// <summary>
/// Helper method for access to the underlying state via Interlocked
/// </summary>
//akka.io implementation is to use nested static classes and access parent member variables
//.Net static nested classes do not have access to parent member variables -- so we configure the states here and
//swap them above
/// <summary>
/// Create a new CircuitBreaker
/// </summary>
/// <param name="maxFailures">Maximum number of failures before opening the circuit</param>
/// <param name="callTimeout"><see cref="TimeSpan"/> of time after which to consider a call a failure</param>
/// <param name="resetTimeout"><see cref="TimeSpan"/> of time after which to attempt to close the circuit</param>
/// <returns></returns>
/// <summary>
/// Create a new CircuitBreaker
/// </summary>
/// <param name="maxFailures">Maximum number of failures before opening the circuit</param>
/// <param name="callTimeout"><see cref="TimeSpan"/> of time after which to consider a call a failure</param>
/// <param name="resetTimeout"><see cref="TimeSpan"/> of time after which to attempt to close the circuit</param>
/// <returns></returns>
//_failures = new AtomicInteger();
/// <summary>
/// Retrieves current failure count.
/// </summary>
/// <summary>
/// Wraps invocation of asynchronous calls that need to be protected
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="body">Call needing protected</param>
/// <returns><see cref="Task"/> containing the call result</returns>
/// <summary>
/// Wraps invocation of asynchronous calls that need to be protected
/// </summary>
/// <param name="body">Call needing protected</param>
/// <returns><see cref="Task"/></returns>
/// <summary>
/// The failure will be recorded farther down.
/// </summary>
/// <param name="body"></param>
//throw new TimeoutException( string.Format( "Execution did not complete within the time alotted {0} ms", CallTimeout.TotalMilliseconds ) );
/// <summary>
/// Wraps invocations of asynchronous calls that need to be protected
/// If this does not complete within the time allotted, it should return default(<typeparamref name="T"/>)
/// 
/// <code>
///  Await.result(
///      withCircuitBreaker(try Future.successful(body) catch { case NonFatal(t) ⇒ Future.failed(t) }),
///      callTimeout)
/// </code>
///
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="body"></param>
/// <returns><typeparamref name="T"/> or default(<typeparamref name="T"/>)</returns>
/// <summary>
/// Adds a callback to execute when circuit breaker opens
/// </summary>
/// <param name="callback"><see cref="Action"/> Handler to be invoked on state change</param>
/// <returns>CircuitBreaker for fluent usage</returns>
/// <summary>
/// Adds a callback to execute when circuit breaker transitions to half-open
/// </summary>
/// <param name="callback"><see cref="Action"/> Handler to be invoked on state change</param>
/// <returns>CircuitBreaker for fluent usage</returns>
/// <summary>
/// Adds a callback to execute when circuit breaker state closes
/// </summary>
/// <param name="callback"><see cref="Action"/> Handler to be invoked on state change</param>
/// <returns>CircuitBreaker for fluent usage</returns>
/// <summary>
/// Implements consistent transition between states. Throws IllegalStateException if an invalid transition is attempted.
/// </summary>
/// <param name="fromState">State being transitioning from</param>
/// <param name="toState">State being transitioned to</param>
/// <summary>
/// Trips breaker to an open state. This is valid from Closed or Half-Open states
/// </summary>
/// <param name="fromState">State we're coming from (Closed or Half-Open)</param>
/// <summary>
/// Resets breaker to a closed state.  This is valid from an Half-Open state only.
/// </summary>
/// <summary>
/// Attempts to reset breaker by transitioning to a half-open state.  This is valid from an Open state only.
/// </summary>
//private readonly Task timeoutTask = Task.FromResult(new TimeoutException("Circuit Breaker Timed out."));
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Pattern\CircuitBreakerState.cs
//-----------------------------------------------------------------------
// <copyright file="CircuitBreakerState.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Concrete implementation of Open state
/// </summary>
/// <summary>
/// Fail-fast on any invocation
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="body">Implementation of the call that needs protected</param>
/// <returns><see cref="Task"/> containing result of protected call</returns>
/// <summary>
/// Implementation of invoke, which simply attempts the call
/// </summary>
/// <param name="body">Implementation of the call that needs protected</param>
/// <returns><see cref="Task"/> containing result of protected call</returns>
/// <summary>
/// No-op for open, calls are never executed so cannot succeed or fail
/// </summary>
//throw new NotImplementedException();
/// <summary>
/// No-op for open, calls are never executed so cannot succeed or fail
/// </summary>
//throw new NotImplementedException();
/// <summary>
/// On entering this state, schedule an attempted reset and store the entry time to
/// calculate remaining time before attempted reset.
/// </summary>
/// <summary>
/// Concrete implementation of half-open state
/// </summary>
/// <summary>
/// Allows a single call through, during which all other callers fail-fast. If the call fails, the breaker reopens.
/// If the call succeeds, the breaker closes.
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="body">Implementation of the call that needs protected</param>
/// <returns><see cref="Task"/> containing result of protected call</returns>
/// <summary>
/// Allows a single call through, during which all other callers fail-fast. If the call fails, the breaker reopens.
/// If the call succeeds, the breaker closes.
/// </summary>
/// <param name="body">Implementation of the call that needs protected</param>
/// <returns><see cref="Task"/> containing result of protected call</returns>
/// <summary>
/// Reopen breaker on failed call.
/// </summary>
/// <summary>
/// Reset breaker on successful call.
/// </summary>
/// <summary>
/// On entry, guard should be reset for that first call to get in
/// </summary>
/// <summary>
/// Override for more descriptive toString
/// </summary>
/// <returns></returns>
/// <summary>
/// Concrete implementation of Closed state
/// </summary>
/// <summary>
/// Implementation of invoke, which simply attempts the call
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="body">Implementation of the call that needs protected</param>
/// <returns><see cref="Task"/> containing result of protected call</returns>
/// <summary>
/// Implementation of invoke, which simply attempts the call
/// </summary>
/// <param name="body">Implementation of the call that needs protected</param>
/// <returns><see cref="Task"/> containing result of protected call</returns>
/// <summary>
/// On failed call, the failure count is incremented.  The count is checked against the configured maxFailures, and
/// the breaker is tripped if we have reached maxFailures.
/// </summary>
/// <summary>
/// On successful call, the failure count is reset to 0
/// </summary>
/// <summary>
/// On entry of this state, failure count is reset.
/// </summary>
/// <summary>
/// Override for more descriptive toString
/// </summary>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Pattern\IllegalStateException.cs
//-----------------------------------------------------------------------
// <copyright file="IllegalStateException.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This exception is thrown when a method has been invoked at an illegal or inappropriate time.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="IllegalStateException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="IllegalStateException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext" /> that contains contextual information about the source or destination.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Pattern\OpenCircuitException.cs
//-----------------------------------------------------------------------
// <copyright file="OpenCircuitException.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This exception is thrown when the CircuitBreaker is open.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="OpenCircuitException"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="OpenCircuitException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="OpenCircuitException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <param name="cause">The exception that is the cause of the current exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="OpenCircuitException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext" /> that contains contextual information about the source or destination.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\Broadcast.cs
//-----------------------------------------------------------------------
// <copyright file="Broadcast.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains logic used by a <see cref="Router"/> to route a message to multiple <see cref="Routee">routees</see>.
/// </summary>
/// <summary>
/// Picks all the <see cref="Routee">routees</see> in <paramref name="routees"/> to receive the <paramref name="message"/>.
/// </summary>
/// <param name="message">The message that is being routed.</param>
/// <param name="routees">A collection of routees that receives the <paramref name="message"/>.</param>
/// <returns>A <see cref="Routee"/> that contains all the given <paramref name="routees"/> that receives the <paramref name="message"/>.</returns>
/// <summary>
/// This class represents a <see cref="Pool"/> router that sends messages it receives to all of its <see cref="Routee">routees</see>.
/// </summary>
/// <summary>
/// This class represents a surrogate of a <see cref="BroadcastPool"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="BroadcastPool"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="BroadcastPool"/> encapsulated by this surrogate.</returns>
/// <summary>
/// The number of routees associated with this pool.
/// </summary>
/// <summary>
/// Determine whether or not to use the pool dispatcher. The dispatcher is defined in the
/// 'pool-dispatcher' configuration property in the deployment section of the router.
/// </summary>
/// <summary>
/// The resizer to use when dynamically allocating routees to the pool.
/// </summary>
/// <summary>
/// The strategy to use when supervising the pool.
/// </summary>
/// <summary>
/// The dispatcher to use when passing messages to the routees.
/// </summary>
/// <summary>
/// Creates a surrogate representation of the current <see cref="BroadcastPool"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="BroadcastPool"/>.</returns>
/// <summary>
/// Initializes a new instance of the <see cref="BroadcastPool"/> class.
/// </summary>
/// <param name="config">The configuration used to configure the pool.</param>
/// <summary>
/// Initializes a new instance of the <see cref="BroadcastPool"/> class.
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="resizer">The resizer to use when dynamically allocating routees to the pool.</param>
/// <param name="supervisorStrategy">The strategy to use when supervising the pool.</param>
/// <param name="routerDispatcher">The dispatcher to use when passing messages to the routees.</param>
/// <param name="usePoolDispatcher"><c>true</c> to use the pool dispatcher; otherwise <c>false</c>.</param>
/// <summary>
/// Initializes a new instance of the <see cref="BroadcastPool"/> class.
/// 
/// <note>
/// A <see cref="BroadcastPool"/> configured in this way uses the <see cref="Pool.DefaultStrategy"/> supervisor strategy.
/// </note>
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Creates a new <see cref="BroadcastPool"/> router with a given <see cref="SupervisorStrategy"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="strategy">The <see cref="SupervisorStrategy"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="strategy" />.</returns>
/// <summary>
/// Creates a new <see cref="BroadcastPool"/> router with a given <see cref="Resizer"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="resizer">The <see cref="Resizer"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="resizer" />.</returns>
/// <summary>
/// Creates a new <see cref="BroadcastPool"/> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// Configure the current router with an auxiliary router for routes that it does not know how to handle.
/// </summary>
/// <param name="routerConfig">The router to use as an auxiliary source.</param>
/// <returns>The router configured with the auxiliary information.</returns>
/// <summary>
/// This class represents a <see cref="Group"/> router that sends messages it receives to all of its routees.
/// </summary>
/// <summary>
/// This class represents a surrogate of a <see cref="BroadcastGroup"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="BroadcastGroup"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="BroadcastGroup"/> encapsulated by this surrogate.</returns>
/// <summary>
/// The actor paths used by this router during routee selection.
/// </summary>
/// <summary>
/// Creates a surrogate representation of the current <see cref="BroadcastGroup"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="BroadcastGroup"/>.</returns>
/// <summary>
/// Initializes a new instance of the <see cref="BroadcastGroup"/> class.
/// </summary>
/// <param name="config">
/// The configuration to use to lookup paths used by the group router.
/// 
/// <note>
/// If 'routees.path' is defined in the provided configuration then those paths will be used by the router.
/// </note>
/// </param>
/// <summary>
/// Initializes a new instance of the <see cref="BroadcastGroup"/> class.
/// </summary>
/// <param name="paths">A list of actor paths used by the group router.</param>
/// <summary>
/// Initializes a new instance of the <see cref="BroadcastGroup"/> class.
/// </summary>
/// <param name="paths">An enumeration of actor paths used by the group router.</param>
/// <summary>
/// Initializes a new instance of the <see cref="BroadcastGroup"/> class.
/// </summary>
/// <param name="routees">An enumeration of routees used by the group router.</param>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Creates a new <see cref="BroadcastGroup" /> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\ConsistentHash.cs
//-----------------------------------------------------------------------
// <copyright file="ConsistentHash.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Consistent Hashing node ring implementation.
/// 
///  A good explanation of Consistent Hashing:
/// http://weblogs.java.net/blog/tomwhite/archive/2007/11/consistent_hash.html
/// 
/// Note that toString of the ring nodes are used for the node
/// hash, i.e. make sure it is different for different nodes.
/// </summary>
/// <summary>
/// arrays for fast binary search access
/// </summary>
/// <summary>
/// Sorted hash values of the nodes
/// </summary>
/// <summary>
/// NodeRing is the nodes sorted in the same order as <see cref="NodeHashRing"/>, i.e. same index
/// </summary>
/// <summary>
/// Add a node to the hash ring.
/// 
/// Note that <see cref="ConsistentHash{T}"/> is immutable and
/// this operation returns a new instance.
/// </summary>
/// <summary>
/// Removes a node from the hash ring.
/// 
/// Note that <see cref="ConsistentHash{T}"/> is immutable and
/// this operation returns a new instance.
/// </summary>
/// <summary>
/// Converts the result of <see cref="Array.BinarySearch{T}(T[], T)"/> into an index in the 
/// <see cref="RingTuple"/> array.
/// </summary>
/// <param name="i"></param>
/// <returns></returns>
//exact match
//after last, use first
//next node clockwise
/// <summary>
/// Get the node responsible for the data key.
/// Can only be used if nodes exist in the node ring.
/// Otherwise throws <see cref="ArgumentException"/>.
/// </summary>
/// <summary>
/// Get the node responsible for the data key.
/// Can only be used if nodes exist in the node ring.
/// Otherwise throws <see cref="ArgumentException"/>.
/// </summary>
/// <summary>
/// Is the node ring empty? i.e. no nodes added or all removed
/// </summary>
/// <summary>
/// Add a node to the hash ring.
/// 
/// Note that <see cref="ConsistentHash{T}"/> is immutable and
/// this operation returns a new instance.
/// </summary>s
/// <summary>
/// Removes a node from the hash ring.
/// 
/// Note that <see cref="ConsistentHash{T}"/> is immutable and
/// this operation returns a new instance.
/// </summary>
/// <summary>
/// Static helper class for creating <see cref="ConsistentHash{T}"/> instances.
/// </summary>
/// <summary>
/// Factory method to create a <see cref="ConsistentHash{T}"/> instance.
/// </summary>
/// <summary>
/// Translate the offered object into a byte array, or returns the original object
/// if it needs to be serialized first.
/// </summary>
/// <param name="obj">An arbitrary .NET object</param>
/// <returns>The object encoded into bytes - in the case of custom classes, the hashcode may be used.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\ConsistentHashRouter.cs
//-----------------------------------------------------------------------
// <copyright file="ConsistentHashRouter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Static class for assisting with <see cref="ConsistentHashMapping"/> instances
/// </summary>
/// <summary>
/// Default empty <see cref="ConsistentHashMapping"/> implementation
/// </summary>
/// <summary>
/// This interface marks a given class as consistently hashable, for use with
/// <see cref="ConsistentHashingGroup"/> or <see cref="ConsistentHashingPool"/>
/// routers.
/// </summary>
/// <summary>
/// The consistent hash key of the marked class.
/// </summary>
/// <summary>
/// This class represents a <see cref="RouterEnvelope"/> that can be wrapped around a message in order to make
/// it hashable for use with <see cref="ConsistentHashingGroup"/> or <see cref="ConsistentHashingPool"/> routers.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConsistentHashableEnvelope"/> class.
/// </summary>
/// <param name="message">The message that is being wrapped in the envelope.</param>
/// <param name="hashKey">The key used as the consistent hash key for the envelope.</param>
/// <summary>
/// The key used as the consistent hash key.
/// 
/// <remarks>
/// This is the same as the <see cref="ConsistentHashKey"/>
/// </remarks>
/// </summary>
/// <summary>
/// The consistent hash key of the envelope.
/// </summary>
/// <summary>
/// Delegate for computing the hashkey from any given type of message. Extracts the property / data
/// that is going to be used for a given hash, but doesn't actually return the hash values themselves.
/// 
/// If returning a byte[] or string it will be used as is, otherwise the configured
/// <see cref="Serializer"/> will be applied to the returned data.
/// </summary>
/// <summary>
/// This class contains logic used by a <see cref="Router"/> to route a message to a <see cref="Routee"/>
/// determined using consistent-hashing. This process has the router select a routee based on a message's
/// consistent hash key. There are 3 ways to define the key, which can be used individually or combined
/// to form the key. The <see cref="ConsistentHashMapping"/> is tried first.
/// 
/// <ol>
/// <li>
/// You can define a <see cref="ConsistentHashMapping"/> or use <see cref="WithHashMapping"/>
/// of the router to map incoming messages to their consistent hash key.
/// This makes the decision transparent for the sender.
/// </li>
/// <li>
/// Messages may implement <see cref="IConsistentHashable"/>. The hash key is part
/// of the message and it's convenient to define it together with the message
/// definition.
/// </li>
/// <li>
/// The message can be wrapped in a <see cref="ConsistentHashableEnvelope"/> to
/// define what data to use for the consistent hash key. The sender knows what key
/// to use.
/// </li>
/// </ol>
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConsistentHashingRoutingLogic"/> class.
/// 
/// <note>
/// A <see cref="ConsistentHashingRoutingLogic"/> configured in this way uses the
/// <see cref="ConsistentHashingRouter.EmptyConsistentHashMapping"/> as the hash
/// mapping function with a virtual node factor of 0 (zero).
/// </note>
/// </summary>
/// <param name="system">The actor system that owns the router with this logic.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ConsistentHashingRoutingLogic"/> class.
/// </summary>
/// <param name="system">The actor system that owns the router with this logic.</param>
/// <param name="virtualNodesFactor">The number of virtual nodes to use on the hash ring.</param>
/// <param name="hashMapping">The consistent hash mapping function to use on incoming messages.</param>
/// <summary>
/// Picks a <see cref="Routee" /> to receive the <paramref name="message" />.
/// </summary>
/// <param name="message">The message that is being routed</param>
/// <param name="routees">A collection of routees to choose from when receiving the <paramref name="message" />.</param>
/// <returns>A <see cref="Routee" /> that receives the <paramref name="message" />.</returns>
// update consistentHash when routees are changed
// changes to routees are rare when no changes this is a quick operation
// when other instance, same content, no need to re-hash, but try to set routees
//ignore, don't update, in case of CAS failure
//serialization failed
/// <summary>
/// Creates a new <see cref="ConsistentHashingRoutingLogic"/> router logic with a given <see cref="ConsistentHashMapping"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="mapping">The <see cref="ConsistentHashMapping"/> used to configure the new router.</param>
/// <returns>A new router logic with the provided <paramref name="mapping"/>.</returns>
/// <exception cref="ArgumentNullException">The mapping can not be null.</exception>
/// <summary>
/// INTERNAL API
/// 
/// Important to use ActorRef with full address, with host and port, in the hash ring,
/// so that same ring is produced on different nodes.
/// The ConsistentHash uses toString of the ring nodes, and the ActorRef itself
/// isn't a good representation, because LocalActorRef doesn't include the
/// host and port.
/// </summary>
/// <summary>
/// This class represents a <see cref="Group"/> router that sends messages to a <see cref="Routee"/> determined using consistent-hashing.
/// Please refer to <see cref="ConsistentHashingRoutingLogic"/> for more information on consistent hashing.
/// </summary>
/// <summary>
/// This class represents a surrogate of a <see cref="ConsistentHashingGroup"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="ConsistentHashingGroup"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="ConsistentHashingGroup"/> encapsulated by this surrogate.</returns>
/// <summary>
/// The actor paths used by this router during routee selection.
/// </summary>
/// <summary>
/// Virtual nodes used in the <see cref="ConsistentHash{T}"/>.
/// </summary>
/// <summary>
/// The consistent hash mapping function to use on incoming messages.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConsistentHashingGroup"/> class.
/// </summary>
/// <param name="config">
/// The configuration to use to lookup paths used by the group router.
/// 
/// <note>
/// If 'routees.path' is defined in the provided configuration then those paths will be used by the router.
/// 'virtual-nodes-factor' defaults to 0 (zero) if it is not defined in the provided configuration.
/// </note>
/// </param>
/// <summary>
/// Initializes a new instance of the <see cref="ConsistentHashingGroup"/> class.
/// </summary>
/// <param name="paths">A list of actor paths used by the group router.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ConsistentHashingGroup"/> class.
/// </summary>
/// <param name="paths">An enumeration of actor paths used by the group router.</param>
/// <param name="virtualNodesFactor">The number of virtual nodes to use on the hash ring.</param>
/// <param name="hashMapping">The consistent hash mapping function to use on incoming messages.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ConsistentHashingGroup"/> class.
/// </summary>
/// <param name="routees">An enumeration of routees used by the group router.</param>
/// <param name="virtualNodesFactor">The number of virtual nodes to use on the hash ring.</param>
/// <param name="hashMapping">The consistent hash mapping function to use on incoming messages.</param>
/// <summary>
/// Creates a new <see cref="ConsistentHashingGroup" /> router with a given <see cref="VirtualNodesFactor"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="vnodes">The <see cref="VirtualNodesFactor"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="vnodes" />.</returns>
/// <summary>
/// Creates a new <see cref="ConsistentHashingGroup"/> router with a given <see cref="ConsistentHashMapping"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="mapping">The <see cref="ConsistentHashMapping"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="mapping"/>.</returns>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Creates a new <see cref="ConsistentHashingGroup" /> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// Configure the current router with an auxiliary router for routes that it does not know how to handle.
/// </summary>
/// <param name="routerConfig">The router to use as an auxiliary source.</param>
/// <returns>The router configured with the auxiliary information.</returns>
/// <exception cref="ArgumentException">Expected ConsistentHashingGroup, got <paramref name="routerConfig"/>.</exception>
/// <summary>
/// Creates a surrogate representation of the current <see cref="ConsistentHashingGroup"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="ConsistentHashingGroup"/>.</returns>
/// <summary>
/// This class represents a <see cref="Pool"/> router that sends messages to a <see cref="Routee"/> determined using consistent-hashing.
/// Please refer to <see cref="ConsistentHashingRoutingLogic"/> for more information on consistent hashing.
/// 
/// <note>
/// Using <see cref="Resizer"/> with <see cref="ConsistentHashingPool"/> is potentially harmful, as hash ranges
/// might change radically during live message processing. This router works best with fixed-sized pools or fixed
/// number of routees per node in the event of clustered deployments.
/// </note>
/// </summary>
/// <summary>
/// Virtual nodes used in the <see cref="ConsistentHash{T}"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConsistentHashingPool"/> class.
/// 
/// <note>
/// 'virtual-nodes-factor' defaults to 0 (zero) if it is not defined in the provided configuration.
/// </note>
/// </summary>
/// <param name="config">The configuration used to configure the pool.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ConsistentHashingPool"/> class.
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="resizer">The resizer to use when dynamically allocating routees to the pool.</param>
/// <param name="supervisorStrategy">The strategy to use when supervising the pool.</param>
/// <param name="routerDispatcher">The dispatcher to use when passing messages to the routees.</param>
/// <param name="usePoolDispatcher"><c>true</c> to use the pool dispatcher; otherwise <c>false</c>.</param>
/// <param name="virtualNodesFactor">The number of virtual nodes to use on the hash ring.</param>
/// <param name="hashMapping">The consistent hash mapping function to use on incoming messages.</param>
/// <summary>
/// Creates a new <see cref="ConsistentHashingPool" /> router with a given <see cref="VirtualNodesFactor"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="vnodes">The <see cref="VirtualNodesFactor"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="vnodes" />.</returns>
/// <summary>
/// Creates a new <see cref="ConsistentHashingPool"/> router with a given <see cref="ConsistentHashMapping"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="mapping">The <see cref="ConsistentHashMapping"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="mapping"/>.</returns>
/// <summary>
/// Initializes a new instance of the <see cref="ConsistentHashingPool"/> class.
/// 
/// <note>
/// A <see cref="ConsistentHashingPool"/> configured in this way uses the <see cref="Pool.DefaultStrategy"/> supervisor strategy.
/// </note>
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Creates a new <see cref="ConsistentHashingPool" /> router with a given <see cref="SupervisorStrategy" />.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="strategy">The <see cref="SupervisorStrategy" /> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="strategy" />.</returns>
/// <summary>
/// Creates a new <see cref="ConsistentHashingPool" /> router with a given <see cref="Resizer" />.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// 
/// <note>
/// Using <see cref="Resizer"/> with <see cref="ConsistentHashingPool"/> is potentially harmful, as hash ranges
/// might change radically during live message processing. This router works best with fixed-sized pools or fixed
/// number of routees per node in the event of clustered deployments.
/// </note>
/// </summary>
/// <param name="resizer">The <see cref="Resizer" /> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="resizer" />.</returns>
/// <summary>
/// Creates a new <see cref="ConsistentHashingPool" /> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// Configure the current router with an auxiliary router for routes that it does not know how to handle.
/// </summary>
/// <param name="routerConfig">The router to use as an auxiliary source.</param>
/// <returns>The router configured with the auxiliary information.</returns>
/// <exception cref="System.ArgumentException">routerConfig</exception>
/// <summary>
/// This class represents a surrogate of a <see cref="ConsistentHashingPool"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="ConsistentHashingPool"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="ConsistentHashingPool"/> encapsulated by this surrogate.</returns>
/// <summary>
/// The number of routees associated with this pool.
/// </summary>
/// <summary>
/// Determine whether or not to use the pool dispatcher. The dispatcher is defined in the
/// 'pool-dispatcher' configuration property in the deployment section of the router.
/// </summary>
/// <summary>
/// The resizer to use when dynamically allocating routees to the pool.
/// </summary>
/// <summary>
/// The strategy to use when supervising the pool.
/// </summary>
/// <summary>
/// The dispatcher to use when passing messages to the routees.
/// </summary>
/// <summary>
/// Creates a surrogate representation of the current <see cref="ConsistentHashingPool"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="ConsistentHashingPool"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\Listeners.cs
//-----------------------------------------------------------------------
// <copyright file="Listeners.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This interface is needed to implement listening capabilities on an actor.
/// 
/// <remarks>
/// <ul>
/// <li>Use the <see cref="ListenerSupport.Gossip(object)"/> method to send a message to the listeners.</li>
/// <li>Send <code>Listen(Self)</code> to another Actor to start listening.</li>
/// <li>Send <code>Deafen(Self)</code> to another Actor to stop listening.</li>
/// <li>Send <code>WithListeners(delegate)</code> to traverse the current listeners.</li>
/// </ul>
/// </remarks>
/// </summary>
/// <summary>
/// Retrieves the support needed to interact with an actor's listeners.
/// </summary>
/// <summary>
/// This class represents a message sent by an actor to another actor that is listening to it.
/// </summary>
/// <summary>
/// The class represents a <see cref="ListenerMessage"/> sent by an <see cref="IActorRef"/> to another <see cref="IActorRef"/>
/// instructing the second actor to start listening for messages sent by the first actor.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Listen"/> class.
/// </summary>
/// <param name="listener">The actor that receives the message.</param>
/// <summary>
/// The actor that receives the message.
/// </summary>
/// <summary>
/// The class represents a <see cref="ListenerMessage"/> sent by an <see cref="IActorRef"/> to another <see cref="IActorRef"/>
/// instructing the second actor to stop listening for messages sent by the first actor.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Deafen"/> class.
/// </summary>
/// <param name="listener">The actor that no longer receives the message.</param>
/// <summary>
/// The actor that no longer receives the message.
/// </summary>
/// <summary>
/// This class represents a <see cref="ListenerMessage"/> instructing an <see cref="IActorRef"/>
/// to perform a supplied <see cref="Action{IActorRef}"/> for all of its listeners.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="WithListeners"/> class.
/// </summary>
/// <param name="listenerFunction">The action to perform for all of an actor's listeners.</param>
/// <summary>
/// The action to perform for all of an actor's listeners.
/// </summary>
/// <summary>
/// This class adds <see cref="IListeners"/> capabilities to an actor.
/// 
/// <note>
/// <see cref="ListenerReceive"/> must be wired manually into the actor's
/// <see cref="UntypedActor.OnReceive"/> method.
/// </note>
/// </summary>
/// <summary>
/// The collection of registered listeners that is listening for messages from an actor.
/// </summary>
/// <summary>
/// Retrieves the wiring needed to implement listening functionality.
/// 
/// <note>
/// This needs to be chained into the actor's <see cref="UntypedActor.OnReceive"/> method.
/// </note>
/// </summary>
/// <summary>
/// Adds the specified actor to the collection of registered listeners.
/// </summary>
/// <param name="actor">The actor to add to the collection of registered listeners.</param>
/// <summary>
/// Removes the specified actor from the collection of registered listeners.
/// </summary>
/// <param name="actor">The actor to remove from the collection of registered listeners.</param>
/// <summary>
/// Sends the supplied message to all registered listeners.
/// 
/// <note>
/// Messages sent this way use <see cref="ActorRefs.NoSender"/> as the sender.
/// </note>
/// </summary>
/// <param name="message">The message sent to all registered listeners.</param>
/// <summary>
/// Sends the supplied message to all registered listeners.
/// </summary>
/// <param name="message">The message sent to all registered listeners.</param>
/// <param name="sender">The actor that sends the message.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\Random.cs
//-----------------------------------------------------------------------
// <copyright file="Random.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains logic used by a <see cref="Router"/> to route a message to a random <see cref="Routee"/>.
/// </summary>
/// <summary>
/// Picks a random <see cref="Routee"/> to receive the <paramref name="message"/>.
/// </summary>
/// <param name="message">The message that is being routed.</param>
/// <param name="routees">A collection of routees to randomly choose from when receiving the <paramref name="message"/>.</param>
/// <returns>A <see cref="Routee" /> that receives the <paramref name="message"/>.</returns>
/// <summary>
/// This class represents a <see cref="Group"/> router that sends messages to a random <see cref="Routee"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RandomGroup"/> class.
/// </summary>
/// <param name="config">
/// The configuration to use to lookup paths used by the group router.
/// 
/// <note>
/// If 'routees.path' is defined in the provided configuration then those paths will be used by the router.
/// </note>
/// </param>
/// <summary>
/// Initializes a new instance of the <see cref="RandomGroup"/> class.
/// </summary>
/// <param name="paths">A list of paths used by the group router.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RandomGroup"/> class.
/// </summary>
/// <param name="paths">An enumeration of paths used by the group router.</param>
/// <summary>
/// Creates a surrogate representation of the current <see cref="RandomGroup"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="RandomGroup"/>.</returns>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Creates a new <see cref="RandomGroup" /> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// This class represents a surrogate of a <see cref="RandomGroup"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// The actor paths used by this router during routee selection.
/// </summary>
/// <summary>
/// Creates a <see cref="RandomGroup"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="RandomGroup"/> encapsulated by this surrogate.</returns>
/// <summary>
/// This class represents a <see cref="Pool"/> router that sends messages to a random <see cref="Routee"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RandomPool"/> class.
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="resizer">The resizer to use when dynamically allocating routees to the pool.</param>
/// <param name="supervisorStrategy">The strategy to use when supervising the pool.</param>
/// <param name="routerDispatcher">The dispatcher to use when passing messages to the routees.</param>
/// <param name="usePoolDispatcher"><c>true</c> to use the pool dispatcher; otherwise <c>false</c>.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RandomPool"/> class.
/// </summary>
/// <param name="config">The configuration used to configure the pool.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RandomPool"/> class.
/// 
/// <note>
/// A <see cref="RandomPool"/> configured in this way uses the <see cref="Pool.DefaultStrategy"/> supervisor strategy.
/// </note>
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RandomPool"/> class.
/// 
/// <note>
/// A <see cref="RandomPool"/> configured in this way uses the <see cref="Pool.DefaultStrategy"/> supervisor strategy.
/// </note>
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="resizer">The resizer to use when dynamically allocating routees to the pool.</param>
/// <summary>
/// Creates a surrogate representation of the current <see cref="RandomPool"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="RandomPool"/>.</returns>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// This class represents a surrogate of a <see cref="RandomPool"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// The number of routees associated with this pool.
/// </summary>
/// <summary>
/// Determine whether or not to use the pool dispatcher. The dispatcher is defined in the
/// 'pool-dispatcher' configuration property in the deployment section of the router.
/// </summary>
/// <summary>
/// The resizer to use when dynamically allocating routees to the pool.
/// </summary>
/// <summary>
/// The strategy to use when supervising the pool.
/// </summary>
/// <summary>
/// The dispatcher to use when passing messages to the routees.
/// </summary>
/// <summary>
/// Creates a <see cref="RandomPool"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="RandomPool"/> encapsulated by this surrogate.</returns>
/// <summary>
/// Creates a new <see cref="RandomPool" /> router with a given <see cref="SupervisorStrategy" />.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="strategy">The <see cref="SupervisorStrategy" /> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="strategy" />.</returns>
/// <summary>
/// Creates a new <see cref="RandomPool" /> router with a given <see cref="Resizer" />.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="resizer">The <see cref="Resizer" /> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="resizer" />.</returns>
/// <summary>
/// Creates a new <see cref="RandomPool" /> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// Configure the current router with an auxiliary router for routes that it does not know how to handle.
/// </summary>
/// <param name="routerConfig">The router to use as an auxiliary source.</param>
/// <returns>The router configured with the auxiliary information.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\ResizablePoolActor.cs
//-----------------------------------------------------------------------
// <copyright file="ResizablePoolActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API.
/// 
/// Defines <see cref="Pool"/> routers who can resize the number of routees
/// they use based on a defined <see cref="Resizer"/>
/// </summary>
//     private SupervisorStrategy supervisorStrategy;
//we don't care if routees are removed
/// <summary>
/// Command used to resize a <see cref="ResizablePoolActor"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\ResizablePoolCell.cs
//-----------------------------------------------------------------------
// <copyright file="ResizablePoolCell.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// must always use ResizeInProgressState static class to compare or assign values
/// </summary>
// initial resize, before message send
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\Resizer.cs
//-----------------------------------------------------------------------
// <copyright file="Resizer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <see cref="Akka.Routing.Pool"/> routers with dynamically resizable number of routees are implemented by providing a Resizer
/// implementation in the <see cref="Akka.Routing.Pool"/> configuration
/// </summary>
/// <summary>
/// Is it time for resizing. Typically implemented with modulo of nth message, but
/// could be based on elapsed time or something else. The messageCounter starts with 0
/// for the initial resize and continues with 1 for the first message. Make sure to perform
/// initial resize before first message (messageCounter == 0), because there is no guarantee
/// that resize will be done when concurrent messages are in play.
/// 
/// CAUTION: this method is invoked from the thread which tries to send a
/// message to the pool, i.e. the ActorRef.!() method, hence it may be called
/// concurrently.
/// </summary>
/// <param name="messageCounter"></param>
/// <returns></returns>
/// <summary>
/// Decide if the capacity of the router need to be changed. Will be invoked when `isTimeForResize`
/// returns true and no other resize is in progress.
///
/// Return the number of routees to add or remove. Negative value will remove that number of routees.
/// Positive value will add that number of routess. 0 will not change the routees.
///
/// This method is invoked only in the context of the Router actor.
/// </summary>
/// <param name="currentRoutees"></param>
/// <returns></returns>
/// <summary>
/// Implementation of <see cref="Akka.Routing.Resizer"/> that adjust the <see cref="Akka.Routing.Pool"/> based on specified thresholds.
/// </summary>
/// <summary>
/// Creates a new DefaultResizer from the given configuration
/// </summary>
/// <param name="resizerConfig"></param>
/// <summary>
/// Returns the overall desired change in resizer capacity. Positive value will
/// add routees to the resizer. Negative value will remove routees from the
/// resizer
/// </summary>
/// <param name="currentRoutees">The current actor in the resizer</param>
/// <returns>the number of routees by which the resizer should be adjusted (positive, negative or zero)</returns>
/// <summary>
/// This method can be used to smooth the capacity delta by considering
/// the current pressure and current capacity.
/// </summary>
/// <param name="pressure">pressure current number of busy routees</param>
/// <param name="capacity">capacity current number of routees</param>
/// <returns>proposed change in the capacity</returns>
/// <summary>
/// Computes a proposed negative (or zero) capacity delta using
/// the configured `backoffThreshold` and `backoffRate`
/// </summary>
/// <param name="pressure">pressure current number of busy routees</param>
/// <param name="capacity">capacity current number of routees</param>
/// <returns>proposed decrease in capacity (as a negative number)</returns>
/// <summary>
/// Computes a proposed positive (or zero) capacity delta using
/// the configured `rampupRate`.
/// </summary>
/// <param name="pressure">the current number of busy routees</param>
/// <param name="capacity">the current number of total routees</param>
/// <returns>proposed increase in capacity</returns>
/// <summary>
/// Number of routees considered busy, or above 'pressure level'.
///
/// Implementation depends on the value of `pressureThreshold`
/// (default is 1).
/// <ul>
/// <li> 0:   number of routees currently processing a message.</li>
/// <li> 1:   number of routees currently processing a message has
///           some messages in mailbox.</li>
/// <li> > 1: number of routees with at least the configured `pressureThreshold`
///           messages in their mailbox. Note that estimating mailbox size of
///           default UnboundedMailbox is O(N) operation.</li>
/// </ul>
/// </summary>
/// <param name="currentRoutees"></param>
/// <returns></returns>
//unstarted cells are always busy, for instance
/// <summary>
/// The fewest number of routees the router should ever have.
/// </summary>
/// <summary>
/// The most number of routees the router should ever have. 
/// Must be greater than or equal to `lowerBound`.
/// </summary>
/// <summary>
/// * Threshold to evaluate if routee is considered to be busy (under pressure).
/// Implementation depends on this value (default is 1).
/// <ul>
/// <li> 0:   number of routees currently processing a message.</li>
/// <li> 1:   number of routees currently processing a message has
///           some messages in mailbox.</li>
/// <li> > 1: number of routees with at least the configured `pressureThreshold`
///           messages in their mailbox. Note that estimating mailbox size of
///           default UnboundedMailbox is O(N) operation.</li>
/// </ul>
/// </summary>
/// <summary>
/// Percentage to increase capacity whenever all routees are busy.
/// For example, 0.2 would increase 20% (rounded up), i.e. if current
/// capacity is 6 it will request an increase of 2 more routees.
/// </summary>
/// <summary>
/// Minimum fraction of busy routees before backing off.
/// For example, if this is 0.3, then we'll remove some routees only when
/// less than 30% of routees are busy, i.e. if current capacity is 10 and
/// 3 are busy then the capacity is unchanged, but if 2 or less are busy
/// the capacity is decreased.
///
/// Use 0.0 or negative to avoid removal of routees.
/// </summary>
/// <summary>
/// Fraction of routees to be removed when the resizer reaches the
/// backoffThreshold.
/// For example, 0.1 would decrease 10% (rounded up), i.e. if current
/// capacity is 9 it will request an decrease of 1 routee.
/// </summary>
/// <summary>
/// Number of messages between resize operation.
/// Use 1 to resize before each message.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\RoundRobin.cs
//-----------------------------------------------------------------------
// <copyright file="RoundRobin.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains logic used by a <see cref="Router"/> to route a message to a <see cref="Routee"/> determined using round-robin.
/// This process has the router select from a list of routees in sequential order. When the list has been exhausted, the router iterates
/// again from the beginning of the list.
///
/// <note>
/// For concurrent calls, round robin is just a best effort.
/// </note>
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RoundRobinRoutingLogic"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RoundRobinRoutingLogic"/> class.
/// </summary>
/// <param name="next">The index to use when starting the selection process. Note that it will start at (next + 1).</param>
/// <summary>
/// Picks the next <see cref="Routee"/> in the collection to receive the <paramref name="message"/>.
/// </summary>
/// <param name="message">The message that is being routed.</param>
/// <param name="routees">A collection of routees to choose from when receiving the <paramref name="message"/>.</param>
/// <returns>A <see cref="Routee" /> that is receives the <paramref name="message"/>.</returns>
/// <summary>
/// This class represents a <see cref="Group"/> router that sends messages to a <see cref="Routee"/> determined using round-robin.
/// This process has the router select from a list of routees in sequential order. When the list has been exhausted, the router
/// iterates again from the beginning of the list.
/// 
/// <note>
/// For concurrent calls, round robin is just a best effort.
/// </note>
/// 
/// <note>
/// The configuration parameter trumps the constructor arguments. This means that
/// if you provide `paths` during instantiation they will be ignored if
/// the router is defined in the configuration file for the actor being used.
/// </note>
/// </summary>
/// <summary>
/// This class represents a surrogate of a <see cref="RoundRobinGroup"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="RoundRobinGroup"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="RoundRobinGroup"/> encapsulated by this surrogate.</returns>
/// <summary>
/// The actor paths used by this router during routee selection.
/// </summary>
/// <summary>
/// Creates a surrogate representation of the current <see cref="RoundRobinGroup"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="RoundRobinGroup"/>.</returns>
/// <summary>
/// Initializes a new instance of the <see cref="RoundRobinGroup"/> class.
/// </summary>
/// <param name="config">
/// The configuration to use to lookup paths used by the group router.
/// 
/// <note>
/// If 'routees.path' is defined in the provided configuration then those paths will be used by the router.
/// </note>
/// </param>
/// <summary>
/// Initializes a new instance of the <see cref="RoundRobinGroup"/> class.
/// </summary>
/// <param name="paths">A list of paths used by the group router.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RoundRobinGroup"/> class.
/// </summary>
/// <param name="paths">An enumeration of actor paths used by the group router.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RoundRobinGroup"/> class.
/// </summary>
/// <param name="routees">An enumeration of routees used by the group router.</param>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Creates a new <see cref="RoundRobinGroup"/> router with a given dispatcher id.
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// This class represents a <see cref="Pool"/> router that sends messages to a <see cref="Routee"/> determined using round-robin.
/// This process has the router select from a list of routees in sequential order. When the list has been exhausted, the router
/// iterates again from the beginning of the list.
/// 
/// <note>
/// For concurrent calls, round robin is just a best effort.
/// </note>
/// </summary>
/// <summary>
/// This class represents a surrogate of a <see cref="RoundRobinPool"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="RoundRobinPool"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="RoundRobinPool"/> encapsulated by this surrogate.</returns>
/// <summary>
/// The number of routees associated with this pool.
/// </summary>
/// <summary>
/// Determine whether or not to use the pool dispatcher. The dispatcher is defined in the
/// 'pool-dispatcher' configuration property in the deployment section of the router.
/// </summary>
/// <summary>
/// The resizer to use when dynamically allocating routees to the pool.
/// </summary>
/// <summary>
/// The strategy to use when supervising the pool.
/// </summary>
/// <summary>
/// The dispatcher to use when passing messages to the routees.
/// </summary>
/// <summary>
/// Creates a surrogate representation of the current <see cref="RoundRobinPool"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="RoundRobinPool"/>.</returns>
/// <summary>
/// Initializes a new instance of the <see cref="RoundRobinPool"/> class.
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="resizer">The resizer to use when dynamically allocating routees to the pool.</param>
/// <param name="supervisorStrategy">The strategy to use when supervising the pool.</param>
/// <param name="routerDispatcher">The dispatcher to use when passing messages to the routees.</param>
/// <param name="usePoolDispatcher"><c>true</c> to use the pool dispatcher; otherwise <c>false</c>.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RoundRobinPool"/> class.
/// </summary>
/// <param name="config">The configuration used to configure the pool.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RoundRobinPool"/> class.
/// 
/// <note>
/// A <see cref="RoundRobinPool"/> configured in this way uses the <see cref="Pool.DefaultStrategy"/> supervisor strategy.
/// </note>
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RoundRobinPool"/> class.
/// 
/// <note>
/// A <see cref="RoundRobinPool"/> configured in this way uses the <see cref="Pool.DefaultStrategy"/> supervisor strategy.
/// </note>
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="resizer">The resizer to use when dynamically allocating routees to the pool.</param>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Creates a new <see cref="RoundRobinPool"/> router with a given <see cref="SupervisorStrategy"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="strategy">The <see cref="SupervisorStrategy"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="strategy"/>.</returns>
/// <summary>
/// Creates a new <see cref="RoundRobinPool"/> router with a given <see cref="Resizer"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="resizer">The <see cref="Resizer"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="resizer"/>.</returns>
/// <summary>
/// Creates a new <see cref="RoundRobinPool"/> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// Configure the current router with an auxiliary router for routes that it does not know how to handle.
/// </summary>
/// <param name="routerConfig">The router to use as an auxiliary source.</param>
/// <returns>The router configured with the auxiliary information.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\RoutedActorCell.cs
//-----------------------------------------------------------------------
// <copyright file="RoutedActorCell.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// Remove routees from <see cref="Router"/>. Messages in flight may still
/// be routed to the old <see cref="Router"/> instance containing the old routees.
/// </summary>
/// <param name="affectedRoutees"></param>
/// <param name="stopChild"></param>
/// <summary>
/// Used to stop child routees - typically used in resizable <see cref="Pool"/> routers
/// </summary>
/// <param name="routee"></param>
// The reason for the delay is to give concurrent
// messages a chance to be placed in mailbox before sending PoisonPill,
// best effort.
// create the initial routees before scheduling the Router actor
/// <summary>
/// Called when <see cref="Router"/> is initialized but before the base class' <see cref="Start"/> to
/// be able to do extra initialization in a subclass.
/// </summary>
//Route the message via the router to the selected destination.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\RoutedActorRef.cs
//-----------------------------------------------------------------------
// <copyright file="RoutedActorRef.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: Implement:
// // verify that a BalancingDispatcher is not used with a Router
// if (!(routerProps.RouterConfig is NoRouter) && routerDispatcher is BalancingDispatcher)
// {
//     throw new ConfigurationException("Configuration for " + this +
//                                 " is invalid - you can not use a 'BalancingDispatcher' as a Router's dispatcher, you can however use it for the routees.");
// }
// routerProps.RouterConfig.VerifyConfig(path);
//if there is a resizer, use ResizablePoolCell
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\Router.cs
//-----------------------------------------------------------------------
// <copyright file="Router.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains logic used by a <see cref="Router"/> to route messages to one or more actors.
/// These actors are known in the system as a <see cref="Routee"/>.
/// </summary>
/// <summary>
/// Picks a <see cref="Routee"/> to receive the <paramref name="message"/>.
/// <note>
/// Normally it picks one of the passed routees, but it is up to the implementation
/// to return whatever <see cref="Routee"/> to use for sending a specific message.
/// </note>
/// </summary>
/// <param name="message">The message that is being routed</param>
/// <param name="routees">A collection of routees to choose from when receiving the <paramref name="message"/>.</param>
/// <returns>A <see cref="Routee"/> that receives the <paramref name="message"/>.</returns>
//The signature might look funky. Why not just Router(RoutingLogic logic, params ActorRef[] routees) ? 
//We need one unique constructor to handle this call: new Router(logic). The other constructor will handle that.
//So in order to not confuse the compiler we demand at least one ActorRef. /@hcanber
//Convert and put routee first in a new array
//Convert all routees and put them into the new array
/// <summary>
/// Create a new instance with the specified routees and the same <see cref="RoutingLogic"/>.
/// </summary>
/// <summary>
/// Create a new instance with one more routee and the same <see cref="RoutingLogic"/>.
/// </summary>
/// <summary>
/// Create a new instance with one more routee and the same <see cref="RoutingLogic"/>.
/// </summary>
/// <summary>
/// Create a new instance with one more routee and the same <see cref="RoutingLogic"/>.
/// </summary>  
/// <summary>
/// Create a new instance without the specified routee.
/// </summary>
/// <summary>
/// Create a new instance without the specified routee.
/// </summary>
/// <summary>
/// Create a new instance without the specified routee.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\RouterActor.cs
//-----------------------------------------------------------------------
// <copyright file="RouterActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// </summary>
//do not scrap children
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\RouterConfig.cs
//-----------------------------------------------------------------------
// <copyright file="RouterConfig.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class provides base functionality used in the creation and configuration of the various routers in the system.
/// </summary>
//  public abstract RoutingLogic GetLogic();
/// <summary>
/// A configuration that specifies that no router is to be used.
/// </summary>
/// <summary>
/// The id of the dispatcher that the router uses to pass messages to its routees.
/// </summary>
/// <summary>
/// Configure the current router with an auxiliary router for routes that it does not know how to handle.
/// 
/// <note>
/// This method defaults to ignoring the supplied router and returning itself.
/// </note>
/// </summary>
/// <param name="routerConfig">The router to use as an auxiliary source.</param>
/// <returns>The router configured with the auxiliary information.</returns>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Retrieves an enumeration of <see cref="Routee">routees</see> that belong to the provided <paramref name="routedActorCell"/>.
/// </summary>
/// <param name="routedActorCell">The router to query for a list of its routees.</param>
/// <returns>The enumeration of routees that belong to the provided <paramref name="routedActorCell"/>.</returns>
/// <summary>
/// Determines whether a provided message is handled by the router.
/// </summary>
/// <param name="message">The message to inspect.</param>
/// <returns><c>true</c> if this message is handled by the router; otherwise <c>false</c>.</returns>
// in akka.net this message is a subclass of AutoReceivedMessage - so removed condition that "message is Terminated ||"
/// <summary>
/// Determines whether the specified router, is equal to this instance.
/// </summary>
/// <param name="other">The router to compare.</param>
/// <returns><c>true</c> if the specified router is equal to this instance; otherwise, <c>false</c>.</returns>
/// <summary>
/// Creates a surrogate representation of the current router.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current router.</returns>
/// <summary>
/// Initializes a new instance of the <see cref="RouterConfig"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RouterConfig"/> class.
/// 
/// <note>
/// This method defaults to setting the dispatcher to use the <see cref="Dispatchers.DefaultDispatcherId"/>.
/// </note>
/// </summary>
/// <param name="routerDispatcher">The dispatcher to use when passing messages to routees.</param>
// ReSharper disable once DoNotCallOverridableMethodsInConstructor
/// <summary>
/// This class contains extension methods used by <see cref="RouterConfig"/>s.
/// </summary>
/// <summary>
/// Determines whether or not the provided router is a <see cref="Routing.NoRouter"/>.
/// </summary>
/// <param name="config">The router to check.</param>
/// <returns><c>true</c> if the provided router is a <see cref="Routing.NoRouter"/>; otherwise, <c>false</c>.</returns>
/// <summary>
/// This class represents a router that does not route messages.
/// </summary>
/// <summary>
/// The id of the dispatcher that the router uses to pass messages to its routees.
/// 
/// <note>
/// THIS METHOD IS NOT IMPLEMENTED.
/// </note>
/// </summary>
/// <exception cref="NotSupportedException">NoRouter has no router</exception>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system"/>.
///
/// <note>
/// THIS METHOD IS NOT IMPLEMENTED.
/// </note>
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>
/// The newly created router tied to the given system.
/// </returns>
/// <exception cref="NotImplementedException"></exception>
/// <summary>
/// Retrieves an enumeration of <see cref="Routee">routees</see> that belong to the provided <paramref name="routedActorCell"/>.
/// 
/// <note>
/// THIS METHOD IS NOT IMPLEMENTED.
/// </note>
/// </summary>
/// <param name="routedActorCell">The router to query for a list of its routees.</param>
/// <returns>
/// The enumeration of routees that belong to the provided <paramref name="routedActorCell"/>.
/// </returns>
/// <exception cref="NotImplementedException"></exception>
/// <summary>
/// This class represents a surrogate of a <see cref="NoRouter"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="NoRouter"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="NoRouter"/> encapsulated by this surrogate.</returns>
/// <summary>
/// Creates a surrogate representation of the current <see cref="NoRouter"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="NoRouter"/>.</returns>
/// <summary>
/// Configure the current router with an auxiliary router for routes that it does not know how to handle.
/// 
/// <note>
/// This method returns the provided <paramref name="routerConfig"/>.
/// </note>
/// </summary>
/// <param name="routerConfig">The router to use as an auxiliary source.</param>
/// <returns>The router configured with the auxiliary information.</returns>
/// <summary>
/// This class provides base functionality for all group routers in the system.
/// Group routers are routers that use already created routees. These routees
/// are supplied to the router and are addressed through <see cref="ActorSelection"/>
/// paths.
/// </summary>
/// <summary>
/// Determines whether the specified <see cref="Group"/>, is equal to this instance.
/// </summary>
/// <param name="other">The group to compare.</param>
/// <returns><c>true</c> if the specified <see cref="Group"/> is equal to this instance; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the specified <see cref="System.Object"/>, is equal to this instance.
/// </summary>
/// <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
/// <returns>
///   <c>true</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.
/// </returns>
/// <summary>
/// Returns a hash code for this instance.
/// </summary>
/// <returns>
/// A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
/// </returns>
/// <summary>
/// Retrieves the actor paths used by this router during routee selection.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Group"/> class.
/// 
/// <note>
/// This constructor sets up the group to use the default dispatcher <see cref="Dispatchers.DefaultDispatcherId"/>.
/// </note>
/// </summary>
/// <param name="paths">An enumeration of actor paths used by the group router.</param>
/// <summary>
/// Initializes a new instance of the <see cref="Group"/> class.
/// 
/// <note>
/// If a <paramref name="routerDispatcher"/> is not provided, this constructor sets up
/// the pool to use the default dispatcher <see cref="Dispatchers.DefaultDispatcherId"/>.
/// </note>
/// </summary>
/// <param name="paths">An enumeration of actor paths used by the group router.</param>
/// <param name="routerDispatcher">The dispatcher to use when passing messages to the routees.</param>
/// <summary>
/// Initializes a new instance of the <see cref="Group"/> class.
///
/// <note>
/// This constructor sets up the group to use the default dispatcher <see cref="Dispatchers.DefaultDispatcherId"/>.
/// </note>
/// </summary>
/// <param name="routees">An enumeration of routees used by the group router.</param>
/// <summary>
/// Adds the current router to an empty <see cref="Actor.Props"/>.
/// </summary>
/// <returns>An empty <see cref="Actor.Props"/> configured to use the current router.</returns>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system"/>.
/// 
/// <note>
/// THIS METHOD IS NOT IMPLEMENTED.
/// </note>
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>
/// The newly created router tied to the given system.
/// </returns>
/// <exception cref="NotImplementedException"></exception>
/// <summary>
/// Creates a new <see cref="Group"/> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// Retrieves an enumeration of <see cref="Routee">routees</see> that belong to the provided <paramref name="routedActorCell"/>.
/// </summary>
/// <param name="routedActorCell">The router to query for a list of its routees.</param>
/// <returns>
/// The enumeration of routees that belong to the provided <paramref name="routedActorCell"/>.
/// </returns>
/// <summary>
/// Determines whether the specified router, is equal to this instance.
/// </summary>
/// <param name="other">The router to compare.</param>
/// <returns>
///   <c>true</c> if the specified router is equal to this instance; otherwise, <c>false</c>.
/// </returns>
//should never be true due to the previous check
/// <summary>
/// This class provides base functionality for all pool routers in the system.
/// Pool routers are routers that create their own routees based on the provided
/// configuration.
/// </summary>
//TODO: add supervisor strategy to the equality compare
/// <summary>
/// Determines whether the specified <see cref="Pool"/>, is equal to this instance.
/// </summary>
/// <param name="other">The pool to compare.</param>
/// <returns><c>true</c> if the specified <see cref="Pool"/> is equal to this instance; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the specified <see cref="System.Object"/>, is equal to this instance.
/// </summary>
/// <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
/// <returns>
///   <c>true</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.
/// </returns>
/// <summary>
/// Returns a hash code for this instance.
/// </summary>
/// <returns>
/// A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
/// </returns>
/// <summary>
/// Initializes a new instance of the <see cref="Pool"/> class.
/// 
/// <note>
/// If a <paramref name="routerDispatcher"/> is not provided, this constructor sets up
/// the pool to use the default dispatcher <see cref="Dispatchers.DefaultDispatcherId"/>.
/// </note>
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="resizer">The resizer to use when dynamically allocating routees to the pool.</param>
/// <param name="supervisorStrategy">The strategy to use when supervising the pool.</param>
/// <param name="routerDispatcher">The dispatcher to use when passing messages to the routees.</param>
/// <param name="usePoolDispatcher"><c>true</c> to use the pool dispatcher; otherwise <c>false</c>.</param>
// OMG, if every member in Java is virtual - you must never call any members in a constructor!!1!
// In all seriousness, without making these members virtual RemoteRouterConfig won't work
// ReSharper disable DoNotCallOverridableMethodsInConstructor
/// <summary>
/// Initializes a new instance of the <see cref="Pool"/> class.
/// 
/// <note>
/// This constructor sets up the pool to use the default dispatcher <see cref="Dispatchers.DefaultDispatcherId"/>.
/// </note>
/// </summary>
/// <param name="config">The configuration used to configure the pool.</param>
// ReSharper restore DoNotCallOverridableMethodsInConstructor
/// <summary>
/// Retrieves the number of routees associated with this pool.
/// </summary>
/// <summary>
/// Used by the <see cref="RoutedActorCell"/> to determine the initial number of routees.
/// 
/// <note>
/// Needs to be connected to an <see cref="ActorSystem"/> for clustered deployment scenarios.
/// </note>
/// </summary>
/// <param name="system"></param>
/// <returns>The number of routees associated with this pool.</returns>
/// <summary>
/// Retrieve whether or not to use the pool dispatcher. The dispatcher is defined in the
/// 'pool-dispatcher' configuration property in the deployment section of the router.
/// </summary>
/// <summary>
/// Retrieve the resizer to use when dynamically allocating routees to the pool.
/// </summary>
/// <summary>
/// Retrieve the strategy to use when supervising the pool.
/// </summary>
/// <summary>
/// Creates a new <see cref="Routee"/> configured to use the provided <paramref name="routeeProps"/>
/// and the pool dispatcher if enabled.
/// </summary>
/// <param name="routeeProps">The <see cref="Actor.Props"/> to configure with the pool dispatcher.</param>
/// <param name="context">The context for the provided <paramref name="routeeProps"/>.</param>
/// <returns>
/// A new <see cref="Routee"/> configured to use the provided <paramref name="routeeProps"/>
/// and the pool dispatcher if enabled.
/// </returns>
//        if (usePoolDispatcher && routeeProps.dispatcher == Dispatchers.DefaultDispatcherId)
//  routeeProps.withDispatcher("akka.actor.deployment." + context.self.path.elements.drop(1).mkString("/", "/", "")
//    + ".pool-dispatcher")
//else
//  routeeProps
/// <summary>
/// Adds the current router to the provided <paramref name="routeeProps"/>.
/// </summary>
/// <param name="routeeProps">The <see cref="Actor.Props"/> to configure with the current router.</param>
/// <returns>The provided <paramref name="routeeProps"/> configured to use the current router.</returns>
/// <summary>
/// Retrieves an enumeration of <see cref="Routee">routees</see> that belong to the provided <paramref name="routedActorCell"/>.
/// </summary>
/// <param name="routedActorCell">The router to query for a list of its routees.</param>
/// <returns>
/// The enumeration of routees that belong to the provided <paramref name="routedActorCell"/>.
/// </returns>
//TODO: where do we get props?
/// <summary>
/// Overrides the settings of the current router with those in the provided configuration.
/// </summary>
/// <param name="other">The configuration whose settings are used to overwrite the current router.</param>
/// <returns>The current router whose settings have been overwritten.</returns>
// NoRouter is the default, hence "neutral"
/// <summary>
/// Creates a new <see cref="Pool"/> router with a given <see cref="Actor.SupervisorStrategy"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="strategy">The <see cref="Actor.SupervisorStrategy"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="strategy"/>.</returns>
/// <summary>
/// Creates a new <see cref="Pool"/> router with a given <see cref="Routing.Resizer"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="resizer">The <see cref="Routing.Resizer"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="resizer"/>.</returns>
/// <summary>
/// Creates a new <see cref="Pool"/> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// Retrieves the default <see cref="Actor.SupervisorStrategy"/> used by this router when one has not been specified.
/// When supervisorStrategy is not specified for an actor this
/// is used by default.
/// 
/// <note>
/// The default strategy used is <see cref="OneForOneStrategy"/> with an <see cref="Directive.Escalate"/> decider.
/// </note>
/// </summary>
//public override bool Equals(RouterConfig other)
//{
//    if (!base.Equals(other)) return false;
//    var otherPool = other as Pool;
//    if (otherPool == null) return false; //should never be true due to the previous check
//    return NrOfInstances == otherPool.NrOfInstances &&
//           UsePoolDispatcher == otherPool.UsePoolDispatcher &&
//           (Resizer == null && otherPool.Resizer == null || Resizer != null && otherPool.Resizer != null) &&
//           SupervisorStrategy.GetType() == otherPool.SupervisorStrategy.GetType();
//}
/// <summary>
/// This class represents a router that gets it's configuration from the system.
/// 
/// For example:
/// <code>
/// IActorRef router1 = Sys.ActorOf(Props.Create{Echo}().WithRouter(FromConfig.Instance), "router1");
/// </code>
/// </summary>
/// <summary>
/// Retrieves a <see cref="RouterConfig"/> based on what's stored in the configuration.
/// 
/// <note>
/// This router is set to use the default dispatcher <see cref="Dispatchers.DefaultDispatcherId"/>.
/// </note>
/// </summary>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system"/>.
/// 
/// <note>
/// THIS METHOD IS NOT SUPPORTED.
/// </note>
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>
/// The newly created router tied to the given system.
/// </returns>
/// <exception cref="NotSupportedException"></exception>
/// <summary>
/// Retrieves an enumeration of routees that belong to a provided <paramref name="routedActorCell"/>.
/// 
/// <note>
/// THIS METHOD IS NOT SUPPORTED.
/// </note>
/// </summary>
/// <param name="routedActorCell">The router to query for a list of its routees.</param>
/// <returns>
/// The enumeration of routees that belong to the provided <paramref name="routedActorCell"/>.
/// </returns>
/// <exception cref="NotSupportedException"></exception>
/// <summary>
/// This class represents a surrogate of a <see cref="FromConfig"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="FromConfig"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="FromConfig"/> encapsulated by this surrogate.</returns>
/// <summary>
/// Creates a surrogate representation of the current <see cref="FromConfig"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="FromConfig"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\RouterMsg.cs
//-----------------------------------------------------------------------
// <copyright file="RouterMsg.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains convenience methods used to send messages to a <see cref="Router"/>.
/// </summary>
/// <summary>
/// Sends a <see cref="RouterManagementMessage"/> to a <see cref="Router"/>
/// to retrieve a list of routees that the router is currently using.
/// </summary>
/// <summary>
/// This class represents a non-routed message that is processed by the <see cref="Router"/>.
/// These types of messages are for managing the router itself, like adding routees, deleting
/// routees, etc.
/// </summary>
/// <summary>
/// This class represents a <see cref="RouterManagementMessage"/> sent to a <see cref="Router"/> instructing
/// it to send a <see cref="Routees"/> message back to the requestor that lists the routees that the router
/// is currently using.
/// </summary>
/// <summary>
/// This class represents a message used to carry information about what routees a <see cref="Router"/> is currently using.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Routees"/> class.
/// </summary>
/// <param name="routees">The routees that a <see cref="Router"/> is currently using.</param>
/// <summary>
/// An enumeration of routees that a <see cref="Router"/> is currently using.
/// </summary>
/// <summary>
/// This class represents a <see cref="RouterManagementMessage"/> sent to a <see cref="Router"/> instructing
/// it to remove a specific routee from the router's collection of routees. It may be handled after other messages.
/// 
/// <note>
/// For a pool with child routees the routee is stopped by sending a <see cref="PoisonPill"/>
/// to the routee. Precautions are taken to reduce the risk of dropping messages that are concurrently
/// being routed to the remove routee, but there are no guarantees. 
/// </note>
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RemoveRoutee"/> class.
/// </summary>
/// <param name="routee">The routee to remove from the router's collection of routees.</param>
/// <summary>
/// The routee removed from the router's collection of routees.
/// </summary>
/// <summary>
/// This class represents a <see cref="RouterManagementMessage"/> sent to a <see cref="Router"/> instructing
/// it to add a specific routee to the router's collection of routees. It may be handled after other messages.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AddRoutee"/> class.
/// </summary>
/// <param name="routee">The routee added to the router's collection of routees.</param>
/// <summary>
/// The routee added to the router's collection of routees.
/// </summary>
/// <summary>
/// This class represents a <see cref="RouterManagementMessage"/> sent to a <see cref="Pool"/> router instructing
/// it to increase or decrease the number of alloted routees the router can use. It may be handled after other messages.
/// 
/// <remarks>
/// Positive <see cref="Change"/> will add that number of routees to the <see cref="Pool"/>.
/// Negative <see cref="Change"/> will remove that number of routees from the <see cref="Pool"/>.
/// </remarks>
///  <notes>
/// Routees are stopped by sending a <see cref="PoisonPill"/> to the routee.
/// Precautions are taken to reduce the risk of dropping messages that are concurrently
/// being routed to the remove routee, but there are no guarantees. 
/// </notes>
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AdjustPoolSize"/> class.
/// </summary>
/// <param name="change">The number of routees to add or subtract from the <see cref="Pool"/>.</param>
/// <summary>
/// The number of routees added or subtracted from the <see cref="Pool"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\RouterPoolActor.cs
//-----------------------------------------------------------------------
// <copyright file="RouterPoolActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// 
/// Actor implementation for <see cref="Pool"/> routers.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RouterPoolActor"/> class.
/// </summary>
/// <param name="supervisorStrategy">The supervisor strategy.</param>
/// <summary>
/// Called when [receive].
/// </summary>
/// <param name="message">The message.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\ScatterGatherFirstCompleted.cs
//-----------------------------------------------------------------------
// <copyright file="ScatterGatherFirstCompleted.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains logic used by a <see cref="Router"/> to route a message to a <see cref="Routee"/> determined
/// using scatter-gather-first-completed. This process has the router send a message to all of its routees. The first
/// response is used and the remaining are discarded. If the none of the routees respond within a specified time
/// limit, a timeout failure occurs.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ScatterGatherFirstCompletedRoutingLogic"/> class.
/// </summary>
/// <param name="within">The amount of time to wait for a response.</param>
/// <summary>
/// Picks all the provided <paramref name="routees"/> to receive the <paramref name="message" />.
/// </summary>
/// <param name="message">The message that is being routed</param>
/// <param name="routees">A collection of routees to choose from when receiving the <paramref name="message" />.</param>
/// <returns>A <see cref="ScatterGatherFirstCompletedRoutees" /> that receives the <paramref name="message" />.</returns>
/// <summary>
/// This class represents a single point <see cref="Routee"/> that sends messages to a <see cref="Routee"/> determined
/// using scatter-gather-first-completed. This process has the router send a message to all of its routees. The first
/// response is used and the remaining are discarded. If the none of the routees respond within a specified time limit,
/// a timeout failure occurs.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ScatterGatherFirstCompletedRoutees"/> class.
/// </summary>
/// <param name="routees">The list of routees that the router uses to send messages.</param>
/// <param name="within">The time within which at least one response is expected.</param>
/// <summary>
/// Sends a message to the collection of routees.
/// </summary>
/// <param name="message">The message that is being sent.</param>
/// <param name="sender">The actor sending the message.</param>
/// <summary>
/// This class represents a <see cref="Group"/> router that sends messages to a <see cref="Routee"/> determined using scatter-gather-first-completed.
/// This process has the router send a message to all of its routees. The first response is used and the remaining are discarded. If the none of the
/// routees respond within a specified time limit, a timeout failure occurs.
/// </summary>
/// <summary>
/// This class represents a surrogate of a <see cref="ScatterGatherFirstCompletedGroup"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="ScatterGatherFirstCompletedGroup"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="ScatterGatherFirstCompletedGroup"/> encapsulated by this surrogate.</returns>
/// <summary>
/// The amount of time to wait for a response.
/// </summary>
/// <summary>
/// The actor paths used by this router during routee selection.
/// </summary>
/// <summary>
/// Creates a surrogate representation of the current <see cref="ScatterGatherFirstCompletedGroup"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="ScatterGatherFirstCompletedGroup"/>.</returns>
/// <summary>
/// Initializes a new instance of the <see cref="ScatterGatherFirstCompletedGroup"/> class.
/// </summary>
/// <param name="config">
/// The configuration to use to lookup paths used by the group router.
/// 
/// <note>
/// If 'routees.path' is defined in the provided configuration then those paths will be used by the router.
/// If 'within' is defined in the provided configuration then that will be used as the interval.
/// </note>
/// </param>
/// <summary>
/// Initializes a new instance of the <see cref="ScatterGatherFirstCompletedGroup" /> class.
/// </summary>
/// <param name="within">The amount of time to wait for a response.</param>
/// <param name="paths">A list of actor paths used by the group router.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ScatterGatherFirstCompletedGroup" /> class.
/// </summary>
/// <param name="paths">An enumeration of actor paths used by the group router.</param>
/// <param name="within">The amount of time to wait for a response.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ScatterGatherFirstCompletedGroup"/> class.
/// </summary>
/// <param name="routees">An enumeration of routees used by the group router.</param>
/// <param name="within">The amount of time to wait for a response.</param>
/// <summary>
/// The amount of time to wait for a response.
/// </summary>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Creates a new <see cref="ScatterGatherFirstCompletedGroup" /> router with a given dispatcher id.
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// This class represents a <see cref="Pool"/> router that sends messages to a <see cref="Routee"/> determined using scatter-gather-first-completed.
/// This process has the router send a message to all of its routees. The first response is used and the remaining are discarded. If the none of the
/// routees respond within a specified time limit, a timeout failure occurs.
/// </summary>
/// <summary>
/// This class represents a surrogate of a <see cref="ScatterGatherFirstCompletedPool"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="ScatterGatherFirstCompletedPool"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="ScatterGatherFirstCompletedPool"/> encapsulated by this surrogate.</returns>
/// <summary>
/// The amount of time to wait for a response.
/// </summary>
/// <summary>
/// The number of routees associated with this pool.
/// </summary>
/// <summary>
/// Determine whether or not to use the pool dispatcher. The dispatcher is defined in the
/// 'pool-dispatcher' configuration property in the deployment section of the router.
/// </summary>
/// <summary>
/// The resizer to use when dynamically allocating routees to the pool.
/// </summary>
/// <summary>
/// The strategy to use when supervising the pool.
/// </summary>
/// <summary>
/// The dispatcher to use when passing messages to the routees.
/// </summary>
/// <summary>
/// Creeates a surrogate representation of the current <see cref="ScatterGatherFirstCompletedPool"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="ScatterGatherFirstCompletedPool"/>.</returns>
/// <summary>
/// Initializes a new instance of the <see cref="ScatterGatherFirstCompletedPool"/> class.
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="resizer">The resizer to use when dynamically allocating routees to the pool.</param>
/// <param name="supervisorStrategy">The strategy to use when supervising the pool.</param>
/// <param name="routerDispatcher">The dispatcher to use when passing messages to the routees.</param>
/// <param name="within">The amount of time to wait for a response.</param>
/// <param name="usePoolDispatcher"><c>true</c> to use the pool dispatcher; otherwise <c>false</c>.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ScatterGatherFirstCompletedPool"/> class.
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="within">The amount of time to wait for a response.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ScatterGatherFirstCompletedPool"/> class.
/// </summary>
/// <param name="config">
/// The configuration to use to lookup paths used by the group router.
/// 
/// <note>
/// 'within' must be defined in the provided configuration.
/// </note>
/// </param>
/// <summary>
/// Initializes a new instance of the <see cref="ScatterGatherFirstCompletedPool"/> class.
/// 
/// <note>
/// A <see cref="ScatterGatherFirstCompletedPool"/> configured in this way uses the <see cref="Pool.DefaultStrategy"/> supervisor strategy.
/// </note>
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Creates a new <see cref="ScatterGatherFirstCompletedPool" /> router with a given <see cref="SupervisorStrategy" />.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="strategy">The <see cref="SupervisorStrategy" /> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="strategy" />.</returns>
/// <summary>
/// Creates a new <see cref="ScatterGatherFirstCompletedPool" /> router with a given <see cref="Resizer" />.
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="resizer">The <see cref="Resizer" /> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="resizer" />.</returns>
/// <summary>
/// Creates a new <see cref="ScatterGatherFirstCompletedPool" /> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// Configure the current router with an auxiliary router for routes that it does not know how to handle.
/// </summary>
/// <param name="routerConfig">The router to use as an auxiliary source.</param>
/// <returns>The router configured with the auxiliary information.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\SmallestMailbox.cs
//-----------------------------------------------------------------------
// <copyright file="SmallestMailbox.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains logic used by a <see cref="Router"/> to route a message to a <see cref="Routee"/>
/// determined using smallest-mailbox. This process has the router select a routee based on the fewest number
/// of messages in its routees' mailbox. The selection is done in the following order:
/// 
/// <ul>
/// <li>Pick any routee with an empty mailbox.</li>
/// <li>Pick a routee with the fewest pending messages in its mailbox.</li>
/// <li>Pick any remaining routees.</li>
/// </ul>
/// <note>
/// Remote routees are consider lowest priority, since their mailbox size is unknown.
/// </note>
/// <note>
/// For the case, when all routees are of unpredictable size, the selection process fails back to round-robin.
/// </note>
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="SmallestMailboxRoutingLogic"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="SmallestMailboxRoutingLogic"/> class.
/// </summary>
/// <param name="next">Seed value used in the fallback selection process.</param>
/// <summary>
/// Picks a <see cref="Routee" /> to receive the <paramref name="message" />.
/// </summary>
/// <param name="message">The message that is being routed</param>
/// <param name="routees">A collection of routees to choose from when receiving the <paramref name="message" />.</param>
/// <returns>A <see cref="Routee" /> that receives the <paramref name="message" />.</returns>
// round robin fallback
// routee can be reasoned about it's mailbox size
// no messages => instant win    
/// <summary>
/// This class represents a <see cref="Pool"/> router that sends messages to a <see cref="Routee"/> determined using smallest-mailbox.
/// Please refer to <see cref="SmallestMailboxRoutingLogic"/> for more information on the selection process.
/// </summary>
/// <summary>
/// This class represents a surrogate of a <see cref="SmallestMailboxPool"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="SmallestMailboxPool"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="SmallestMailboxPool"/> encapsulated by this surrogate.</returns>
/// <summary>
/// The number of routees associated with this pool.
/// </summary>
/// <summary>
/// Determine whether or not to use the pool dispatcher. The dispatcher is defined in the
/// 'pool-dispatcher' configuration property in the deployment section of the router.
/// </summary>
/// <summary>
/// The resizer to use when dynamically allocating routees to the pool.
/// </summary>
/// <summary>
/// The strategy to use when supervising the pool.
/// </summary>
/// <summary>
/// The dispatcher to use when passing messages to the routees.
/// </summary>
/// <summary>
/// Creates a surrogate representation of the current <see cref="SmallestMailboxPool"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="SmallestMailboxPool"/>.</returns>
/// <summary>
/// Initializes a new instance of the <see cref=" SmallestMailboxPool"/> class.
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="resizer">The resizer to use when dynamically allocating routees to the pool.</param>
/// <param name="supervisorStrategy">The strategy to use when supervising the pool.</param>
/// <param name="routerDispatcher">The dispatcher to use when passing messages to the routees.</param>
/// <param name="usePoolDispatcher"><c>true</c> to use the pool dispatcher; otherwise <c>false</c>.</param>
/// <summary>
/// Initializes a new instance of the <see cref="SmallestMailboxPool"/> class.
/// </summary>
/// <param name="config">The configuration used to configure the pool.</param>
/// <summary>
/// Initializes a new instance of the <see cref="SmallestMailboxPool"/> class.
/// 
/// <note>
/// A <see cref="SmallestMailboxPool"/> configured in this way uses the <see cref="Pool.DefaultStrategy"/> supervisor strategy.
/// </note>
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Creates a new <see cref="SmallestMailboxPool" /> router with a given <see cref="SupervisorStrategy" />.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="strategy">The <see cref="SupervisorStrategy" /> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="strategy" />.</returns>
/// <summary>
/// Creates a new <see cref="SmallestMailboxPool" /> router with a given <see cref="Routing.Resizer" />.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="resizer">The <see cref="Routing.Resizer" /> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="resizer" />.</returns>
/// <summary>
/// Creates a new <see cref="SmallestMailboxPool" /> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// Configure the current router with an auxiliary router for routes that it does not know how to handle.
/// </summary>
/// <param name="routerConfig">The router to use as an auxiliary source.</param>
/// <returns>The router configured with the auxiliary information. </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Routing\TailChoppingRoutingLogic.cs
//-----------------------------------------------------------------------
// <copyright file="TailChoppingRoutingLogic.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains logic used by a <see cref="Router"/> to route a message to a <see cref="Routee"/> determined using tail-chopping.
/// This process has the router select a random routee, then waits an interval before sending to a different randomly chosen routee.
/// The first response is used and the remaining are discarded. If the none of the routees respond within a specified time limit,
/// a timeout failure occurs.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="TailChoppingRoutingLogic"/> class.
/// </summary>
/// <param name="within">The time within which at least one response is expected.</param>
/// <param name="interval">The duration after which the next routee will be picked.</param>
/// <param name="scheduler">The <see cref="IScheduler"/> used to force deadlines.</param>
/// <summary>
/// Picks all of the provided <paramref name="routees"/> to receive the <paramref name="message" />.
/// </summary>
/// <param name="message">The message that is being routed</param>
/// <param name="routees">A collection of routees used when receiving the <paramref name="message" />.</param>
/// <returns>A <see cref="TailChoppingRoutee" /> that receives the <paramref name="message" />.</returns>
/// <summary>
/// This class represents a single point <see cref="Routee"/> that sends messages to a <see cref="Routee"/> determined using tail-chopping.
/// This process has the routee select a random routee, then waits an interval before sending to a different randomly chosen routee.
/// The first response is used and the remaining are discarded. If the none of the routees respond within a specified time limit,
/// a timeout failure occurs.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="TailChoppingRoutee"/> class.
/// </summary>
/// <param name="routees">The list of routees that the router uses to send messages.</param>
/// <param name="within">The time within which at least one response is expected.</param>
/// <param name="interval">The duration after which the next routee will be picked.</param>
/// <param name="scheduler">The <see cref="IScheduler"/> used to force deadlines.</param>
/// <summary>
/// Sends a message to the collection of routees.
/// </summary>
/// <param name="message">The message that is being sent.</param>
/// <param name="sender">The actor sending the message.</param>
/// <summary>
/// This class represents a <see cref="Pool"/> router that sends messages to a <see cref="Routee"/> determined using tail-chopping.
/// This process has the router select a random routee, then waits an interval before sending to a different randomly chosen routee.
/// The first response is used and the remaining are discarded. If the none of the routees respond within a specified time limit,
/// a timeout failure occurs.
/// </summary>
/// <summary>
/// This class represents a surrogate of a <see cref="TailChoppingPool"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="TailChoppingPool"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="TailChoppingPool"/> encapsulated by this surrogate.</returns>
/// The interval to wait before sending to the next routee.
/// The amount of time to wait for a response.
/// <summary>
/// The number of routees associated with this pool.
/// </summary>
/// <summary>
/// Determine whether or not to use the pool dispatcher. The dispatcher is defined in the
/// 'pool-dispatcher' configuration property in the deployment section of the router.
/// </summary>
/// <summary>
/// The resizer to use when dynamically allocating routees to the pool.
/// </summary>
/// <summary>
/// The strategy to use when supervising the pool.
/// </summary>
/// <summary>
/// The dispatcher to use when passing messages to the routees.
/// </summary>
/// <summary>
/// Creates a surrogate representation of the current <see cref="TailChoppingPool"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="TailChoppingPool"/>.</returns>
/// <summary>
/// Initializes a new instance of the <see cref="TailChoppingPool"/> class.
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="resizer">The resizer to use when dynamically allocating routees to the pool.</param>
/// <param name="supervisorStrategy">The strategy to use when supervising the pool.</param>
/// <param name="routerDispatcher">The dispatcher to use when passing messages to the routees.</param>
/// <param name="within">The amount of time to wait for a response.</param>
/// <param name="interval">The interval to wait before sending to the next routee.</param>
/// <param name="usePoolDispatcher"><c>true</c> to use the pool dispatcher; otherwise <c>false</c>.</param>
/// <summary>
/// Initializes a new instance of the <see cref="TailChoppingPool"/> class.
/// 
/// <note>
/// 'nr-of-instances', 'within', and 'tail-chopping-router.interval'
/// must be defined in the provided configuration.
/// </note>
/// </summary>
/// <param name="config">The configuration used to configure the pool.</param>
//TODO: what are our defaults? null?
/// <summary>
/// Initializes a new instance of the <see cref="TailChoppingPool"/> class.
/// </summary>
/// <param name="nrOfInstances">The initial number of routees in the pool.</param>
/// <param name="within">The amount of time to wait for a response.</param>
/// <param name="interval">The interval to wait before sending to the next routee.</param>
//TODO: what are our defaults? null?
/// <summary>
/// Creates a new <see cref="TailChoppingPool"/> router with a given <see cref="SupervisorStrategy"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="strategy">The <see cref="SupervisorStrategy"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="strategy"/>.</returns>
/// <summary>
/// Creates a new <see cref="TailChoppingPool"/> router with a given <see cref="Resizer"/>.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="resizer">The <see cref="Resizer"/> used to configure the new router.</param>
/// <returns>A new router with the provided <paramref name="resizer"/>.</returns>
/// <summary>
/// Creates a new <see cref="TailChoppingPool"/> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Configure the current router with an auxiliary router for routes that it does not know how to handle.
/// </summary>
/// <param name="routerConfig">The router to use as an auxiliary source.</param>
/// <returns>The router configured with the auxiliary information.</returns>
/// <summary>
/// This class represents a <see cref="Group"/> router that sends messages to a <see cref="Routee"/> determined using tail-chopping.
/// This process has the router select a random routee, then waits an interval before sending to a different randomly chosen routee.
/// The first response is used and the remaining are discarded. If the none of the routees respond within a specified time limit,
/// a timeout failure occurs.
/// </summary>
/// <summary>
/// This class represents a surrogate of a <see cref="TailChoppingGroup"/> router.
/// Its main use is to help during the serialization process.
/// </summary>
/// <summary>
/// Creates a <see cref="TailChoppingGroup"/> encapsulated by this surrogate.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The <see cref="TailChoppingGroup"/> encapsulated by this surrogate.</returns>
/// The amount of time to wait for a response.
/// The actor paths used by this router during routee selection.
/// The interval to wait before sending to the next routee.
/// <summary>
/// Creates a surrogate representation of the current <see cref="TailChoppingGroup"/>.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The surrogate representation of the current <see cref="TailChoppingGroup"/>.</returns>
/// <summary>
/// Initializes a new instance of the <see cref="TailChoppingGroup"/> class.
/// </summary>
/// <param name="config">
/// The configuration to use to lookup paths used by the group router.
/// 
/// <note>
/// If 'routees.path' is defined in the provided configuration then those paths will be used by the router.
/// If 'within' is defined in the provided configuration then that will be used as the timeout.
/// If 'tail-chopping-router.interval' is defined in the provided configuration then that will be used as the interval.
/// </note>
/// </param>
/// <summary>
/// Initializes a new instance of the <see cref="TailChoppingGroup"/> class.
/// </summary>
/// <param name="routeePaths">The actor paths used by this router during routee selection.</param>
/// <param name="within">The amount of time to wait for a response.</param>
/// <param name="interval">The interval to wait before sending to the next routee.</param>
/// <summary>
/// Creates a router that is responsible for routing messages to routees within the provided <paramref name="system" />.
/// </summary>
/// <param name="system">The actor system that owns this router.</param>
/// <returns>The newly created router tied to the given system.</returns>
/// <summary>
/// Creates a new <see cref="TailChoppingGroup" /> router with a given dispatcher id.
/// 
/// <note>
/// This method is immutable and returns a new instance of the router.
/// </note>
/// </summary>
/// <param name="dispatcher">The dispatcher id used to configure the new router.</param>
/// <returns>A new router with the provided dispatcher id.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Serialization\ByteArraySerializer.cs
//-----------------------------------------------------------------------
// <copyright file="ByteArraySerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is a special <see cref="Serializer"/> that serializes and deserializes byte arrays only
/// (just returns the byte array unchanged/uncopied).
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ByteArraySerializer" /> class.
/// </summary>
/// <param name="system">The actor system to associate with this serializer. </param>
/// <summary>
/// Completely unique value to identify this implementation of the <see cref="Serializer"/> used to optimize network traffic
/// </summary>
/// <summary>
/// Returns whether this serializer needs a manifest in the fromBinary method
/// </summary>
/// <summary>
/// Serializes the given object into a byte array
/// </summary>
/// <param name="obj">The object to serialize </param>
/// <returns>A byte array containing the serialized object</returns>
/// <exception cref="NotSupportedException"></exception>
/// <summary>
/// Deserializes a byte array into an object of type <paramref name="type"/>.
/// </summary>
/// <param name="bytes">The array containing the serialized object</param>
/// <param name="type">The type of object contained in the array</param>
/// <returns>The object contained in the array</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Serialization\JavaSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="Serializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is a special <see cref="Serializer"/> that serializes and deserializes Java objects only.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="JavaSerializer" /> class.
/// </summary>
/// <param name="system">The actor system to associate with this serializer. </param>
/// <summary>
/// Completely unique value to identify this implementation of the <see cref="Serializer"/> used to optimize network traffic
/// </summary>
/// <summary>
/// Returns whether this serializer needs a manifest in the fromBinary method
/// </summary>
/// <summary>
/// Serializes the given object into a byte array
/// </summary>
/// <param name="obj">The object to serialize </param>
/// <returns>A byte array containing the serialized object</returns>
/// <summary>
/// Deserializes a byte array into an object of type <paramref name="type"/>
/// </summary>
/// <param name="bytes">The array containing the serialized object</param>
/// <param name="type">The type of object contained in the array</param>
/// <returns>The object contained in the array</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Serialization\NewtonSoftJsonSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="NewtonSoftJsonSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is a special <see cref="Serializer"/> that serializes and deserializes javascript objects only.
/// These objects need to be in the JavaScript Object Notation (JSON) format.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NewtonSoftJsonSerializer" /> class.
/// </summary>
/// <param name="system">The actor system to associate with this serializer. </param>
//important: if reuse, the serializer will overwrite properties in default references, e.g. Props.DefaultDeploy or Props.noArgs
/// <summary>
/// Completely unique value to identify this implementation of the <see cref="Serializer"/> used to optimize network traffic
/// </summary>
/// <summary>
/// Returns whether this serializer needs a manifest in the fromBinary method
/// </summary>
/// <summary>
/// Serializes the given object into a byte array
/// </summary>
/// <param name="obj">The object to serialize </param>
/// <returns>A byte array containing the serialized object</returns>
/// <summary>
/// Deserializes a byte array into an object of type <paramref name="type"/>.
/// </summary>
/// <param name="bytes">The array containing the serialized object</param>
/// <param name="type">The type of object contained in the array</param>
/// <returns>The object contained in the array</returns>
//The JObject represents a special akka.net wrapper for primitives (int,float,decimal) to preserve correct type when deserializing
//The JObject is not of our concern, let Json.NET deserialize it.
//The deserialized object is a surrogate, unwrap it
/// <summary>
///     Determines whether this instance can convert the specified object type.
/// </summary>
/// <param name="objectType">Type of the object.</param>
/// <returns><c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.</returns>
/// <summary>
///     Reads the JSON representation of the object.
/// </summary>
/// <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
/// <param name="objectType">Type of the object.</param>
/// <param name="existingValue">The existing value of object being read.</param>
/// <param name="serializer">The calling serializer.</param>
/// <returns>The object value.</returns>
/// <summary>
///     Writes the JSON representation of the object.
/// </summary>
/// <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
/// <param name="value">The value.</param>
/// <param name="serializer">The calling serializer.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Serialization\NullSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="NullSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is a special <see cref="Serializer"/> that serializes and deserializes nulls only
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NullSerializer" /> class.
/// </summary>
/// <param name="system">The actor system to associate with this serializer. </param>
/// <summary>
/// Completely unique value to identify this implementation of the <see cref="Serializer"/> used to optimize network traffic
/// </summary>
/// <summary>
/// Returns whether this serializer needs a manifest in the fromBinary method
/// </summary>
/// <summary>
/// Serializes the given object into a byte array
/// </summary>
/// <param name="obj">The object to serialize </param>
/// <returns>A byte array containing the serialized object</returns>
/// <summary>
/// Deserializes a byte array into an object of type <paramref name="type"/>
/// </summary>
/// <param name="bytes">The array containing the serialized object</param>
/// <param name="type">The type of object contained in the array</param>
/// <returns>The object contained in the array</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Serialization\Serialization.cs
//-----------------------------------------------------------------------
// <copyright file="Serialization.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//cache to eliminate lots of typeof operator calls
//TODO: see if we can do a better job with proper type sorting here - most specific to least specific (object serializer goes last)
//force deferral of the base "object" serializer until all other higher-level types have been evaluated
//do a final check for the "object" serializer
//CurrentTransportInformation exists
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Serialization\Serializer.cs
//-----------------------------------------------------------------------
// <copyright file="Serializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A Serializer represents a bimap between an object and an array of bytes representing that object.
///
/// Serializers are loaded using reflection during <see cref="ActorSystem"/>
/// start-up, where two constructors are tried in order:
///
/// <ul>
/// <li>taking exactly one argument of type <see cref="ExtendedActorSystem"/>;
/// this should be the preferred one because all reflective loading of classes
/// during deserialization should use ExtendedActorSystem.dynamicAccess (see
/// [[akka.actor.DynamicAccess]]), and</li>
/// <li>without arguments, which is only an option if the serializer does not
/// load classes using reflection.</li>
/// </ul>
///
/// <b>Be sure to always use the PropertyManager for loading classes!</b> This is necessary to
/// avoid strange match errors and inequalities which arise from different class loaders loading
/// the same class.
/// </summary>
/// <summary>
/// The actor system to associate with this serializer.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="Serializer" /> class.
/// </summary>
/// <param name="system">The actor system to associate with this serializer. </param>
/// <summary>
/// Completely unique value to identify this implementation of Serializer, used to optimize network traffic
/// Values from 0 to 16 is reserved for Akka internal usage
/// </summary>
/// <summary>
/// Returns whether this serializer needs a manifest in the fromBinary method
/// </summary>
/// <summary>
/// Serializes the given object into a byte array
/// </summary>
/// <param name="obj">The object to serialize </param>
/// <returns>A byte array containing the serialized object</returns>
/// <summary>
/// Serializes the given object into a byte array and uses the given address to decorate serialized ActorRef's
/// </summary>
/// <param name="address">The address to use when serializing local ActorRef´s</param>
/// <param name="obj">The object to serialize</param>
/// <returns></returns>
/// <summary>
/// Deserializes a byte array into an object of type <paramref name="type"/>.
/// </summary>
/// <param name="bytes">The array containing the serialized object</param>
/// <param name="type">The type of object contained in the array</param>
/// <returns>The object contained in the array</returns>
/// <summary>
/// Produces an object from an array of bytes, with an optional type-hint.
/// </summary>
/// <summary>
/// Return the manifest (type hint) that will be provided in the fromBinary method.
/// Return <see cref="string.Empty"/> if not needed.
/// </summary>
/// <summary>
/// INTERNAL API.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\AtomicBoolean.cs
//-----------------------------------------------------------------------
// <copyright file="AtomicBoolean.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Implementation of the java.concurrent.util.AtomicBoolean type.
/// 
/// Uses <see cref="Interlocked.MemoryBarrier"/> internally to enforce ordering of writes
/// without any explicit locking. .NET's strong memory on write guarantees might already enforce
/// this ordering, but the addition of the MemoryBarrier guarantees it.
/// </summary>
/// <summary>
/// Sets the initial value of this <see cref="AtomicBoolean"/> to <paramref name="initialValue"/>.
/// </summary>
/// <summary>
/// The current value of this <see cref="AtomicReference{T}"/>
/// </summary>
/// <summary>
/// If <see cref="Value"/> equals <paramref name="expected"/>, then set the Value to
/// <paramref name="newValue"/>.
/// </summary>
/// <returns><c>true</c> if <paramref name="newValue"/> was set</returns>
/// <summary>
/// Implicit conversion operator = automatically casts the <see cref="AtomicBoolean"/> to a <see cref="bool"/>
/// </summary>
/// <summary>
/// Implicit conversion operator = allows us to cast any bool directly into a <see cref="AtomicBoolean"/> instance.
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\AtomicReference.cs
//-----------------------------------------------------------------------
// <copyright file="AtomicReference.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Implementation of the java.concurrent.util AtomicReference type.
/// 
/// Uses <see cref="Interlocked.MemoryBarrier"/> internally to enforce ordering of writes
/// without any explicit locking. .NET's strong memory on write guarantees might already enforce
/// this ordering, but the addition of the MemoryBarrier guarantees it.
/// </summary>
/// <summary>
/// Sets the initial value of this <see cref="AtomicReference{T}"/> to <paramref name="originalValue"/>.
/// </summary>
/// <summary>
/// Default constructor
/// </summary>
// ReSharper disable once InconsistentNaming
/// <summary>
/// The current value of this <see cref="AtomicReference{T}"/>
/// </summary>
/// <summary>
/// If <see cref="Value"/> equals <paramref name="expected"/>, then set the Value to
/// <paramref name="newValue"/>.
/// </summary>
/// <returns><c>true</c> if <paramref name="newValue"/> was set</returns>
//special handling for null values
/// <summary>
/// Implicit conversion operator = automatically casts the <see cref="AtomicReference{T}"/> to an instance of <typeparamref name="T"/>.
/// </summary>
/// <summary>
/// Implicit conversion operator = allows us to cast any type directly into a <see cref="AtomicReference{T}"/> instance.
/// </summary>
/// <param name="newValue"></param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Base64Encoding.cs
//-----------------------------------------------------------------------
// <copyright file="Base64Encoding.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\ByteIterator.cs
//-----------------------------------------------------------------------
// <copyright file="ByteIterator.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>Get a single Byte from this iterator. Identical to next().</summary>
/// <summary>Get a single Short from this iterator.</summary>
/// <summary>Get a single Int from this iterator.</summary>
/// <summary>Get a single Long from this iterator.</summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\ByteString.cs
//-----------------------------------------------------------------------
// <copyright file="ByteString.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// TODO: Move to Akka.Util namespace - this will require changes as name clashes with ProtoBuf class
/*object*/ class ByteString
/// <summary>
/// Creates a new ByteString by copying a byte array.
/// </summary>
/// <summary>
/// Creates a new ByteString by copying length bytes starting at offset from
/// an Array.
/// </summary>
/// <summary>
/// Creates a new ByteString which will contain the UTF-8 representation of the given String
/// </summary>
/// <summary>
/// Creates a new ByteString which will contain the representation of the given String in the given charset
/// </summary>
/// <summary>
/// A rope-like immutable data structure containing bytes.
/// The goal of this structure is to reduce copying of arrays
/// when concatenating and slicing sequences of bytes,
/// and also providing a thread safe way of working with bytes.
/// </summary>
/*object*/ class CompactByteString
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\ConcurrentSet.cs
//-----------------------------------------------------------------------
// <copyright file="ConcurrentSet.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\ContinuousEnumerator.cs
//-----------------------------------------------------------------------
// <copyright file="ContinuousEnumerator.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Implements a circular <see cref="IEnumerator{T}"/> around an existing <see cref="IEnumerator{T}"/>.
/// 
/// This allows for continuous read-only iteration over a set.
/// </summary>
/// <typeparam name="T"></typeparam>
/// <summary>
/// The raw iterator from some <see cref="IEnumerable{T}"/> object
/// </summary>
/// <summary>
/// Extension method class for adding <see cref="ContinuousEnumerator{T}"/> support to any <see cref="IEnumerable{T}"/>
/// instance within Akka.NET
/// </summary>
/// <summary>
/// Provides a <see cref="ContinuousEnumerator{T}"/> instance for <paramref name="collection"/>.
/// 
/// Internally, it just wraps <paramref name="collection"/>'s internal iterator with circular iteration behavior.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Either.cs
//-----------------------------------------------------------------------
// <copyright file="Either.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\ISurrogate.cs
//-----------------------------------------------------------------------
// <copyright file="ISurrogate.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\ListPriorityQueue.cs
//-----------------------------------------------------------------------
// <copyright file="ListPriorityQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Priority queue implemented using a simple list with binary search for inserts.
/// This specific implementation is cheap in terms of memory but weak in terms of performance.
/// See http://visualstudiomagazine.com/articles/2012/11/01/priority-queues-with-c.aspx for original implementation
/// This specific version is adapted for Envelopes only and calculates a priority of envelope.Message
/// </summary>
// child index; start at end
// parent index
// child item is larger than (or equal) parent so we're done
// assumes pq is not empty; up to calling code
// last index (before removal)
// fetch the front
// last index (after removal)
// parent index. start at front of pq
// left child index of parent
// no children so done
// right child
// if there is a rc (ci + 1), and it is smaller than left child, use the rc instead
// parent is smaller than (or equal to) smallest child so done
// swap parent and child
// is the heap property true for all data?
// last index
// each parent index
// left child index
// right child index
// if lc exists and it's greater than parent then bad.
// check the right child too.
// passed all checks
// IsConsistent
// ListPriorityQueue
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MonoConcurrentQueue.cs
//-----------------------------------------------------------------------
// <copyright file="MonoConcurrentQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ConcurrentQueue.cs
//
// Copyright (c) 2008 Jérémie "Garuma" Laval
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//
// Did tail was already updated ?
// The place is for us
// another Thread already used the place so give him a hand by putting tail where it should be
// At this point we added correctly our node, now we have to update tail. If it fails then it will be done by another thread
// Empty case ?
// This should be false then
// If not then the linked list is mal formed, update tail
//check if head has been updated
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MonotonicClock.cs
//-----------------------------------------------------------------------
// <copyright file="MonotonicClock.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Ticks represent 100 nanos. https://msdn.microsoft.com/en-us/library/system.datetime.ticks(v=vs.110).aspx
/// 
/// This extension method converts a Ticks value to nano seconds.
/// </summary>
/// <summary>
/// Ticks represent 100 nanos. https://msdn.microsoft.com/en-us/library/system.datetime.ticks(v=vs.110).aspx
/// 
/// This extension method converts a nano seconds value to Ticks.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MurmurHash.cs
//-----------------------------------------------------------------------
// <copyright file="MurmurHash.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Murmur3 Hash implementation
/// </summary>
// Magic values used for MurmurHash's 32 bit hash.
// Don't change these without consulting a hashing expert!
// Arbitrary values used for hashing certain classes
/** The first 23 magic integers from the first stream are stored here */
/** The first 23 magic integers from the second stream are stored here */
/// <summary>
/// The initial magic integer in the first stream.
/// </summary>
/// <summary>
/// The initial magic integer in the second stream.
/// </summary>
//compute range of values for StoredMagicA
//compute range of values for StoredMagicB
/// <summary>
/// Begin a new hash with a seed value.
/// </summary>
/// <summary>
/// Given a magic integer from the first stream, compute the next
/// </summary>
/// <summary>
/// Given a magic integer from the second stream, compute the next
/// </summary>
/// <summary>
/// Incorporates a new value into an existing hash
/// </summary>
/// <param name="hash">The prior hash value</param>
/// <param name="value">The new value to incorporate</param>
/// <param name="magicA">A magic integer from the left of the stream</param>
/// <param name="magicB">A magic integer from a different stream</param>
/// <returns>The updated hash value</returns>
/// <summary>
/// Once all hashes have been incorporated, this performs a final mixing.
/// </summary>
/// <summary>
/// Rotate a 32-bit unsigned integer to the left by <paramref name="shift"/> bits
/// </summary>
/// <param name="original">Original value</param>
/// <param name="shift">The shift value</param>
/// <returns>The rotated 32-bit integer</returns>
/// <summary>
/// Rotate a 64-bit unsigned integer to the left by <paramref name="shift"/> bits
/// </summary>
/// <param name="original">Original value</param>
/// <param name="shift">The shift value</param>
/// <returns>The rotated 64-bit integer</returns>
/// <summary>
/// Compute a high-quality hash of a byte array
/// </summary>
/// <summary>
/// Compute a high-quality hash of an array
/// </summary>
/// <summary>
/// Compute high-quality hash of a string
/// </summary>
/// <summary>
/// Compute a hash that is symmetric in its arguments--that is,
/// where the order of appearance of elements does not matter.
/// This is useful for hashing sets, for example.
/// </summary>
/// <summary>
/// Extension method class to make it easier to work with <see cref="BitArray"/> instances
/// </summary>
/// <summary>
/// Converts a <see cref="BitArray"/> into an array of <see cref="byte"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Resolver.cs
//-----------------------------------------------------------------------
// <copyright file="Resolver.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\StandardOutWriter.cs
//-----------------------------------------------------------------------
// <copyright file="StandardOutWriter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains methods for thread safe writing to the standard output stream.
///  </summary>
/// <summary>
/// Writes the specified <see cref="string"/> value to the standard output stream. Optionally 
/// you may specify which colors should be used.
/// </summary>
/// <param name="message">The <see cref="string"/> value to write</param>
/// <param name="foregroundColor">Optional: The foreground color</param>
/// <param name="backgroundColor">Optional: The background color</param>
/// <summary>
/// Writes the specified <see cref="string"/> value, followed by the current line terminator,
/// to the standard output stream. Optionally you may specify which colors should be used.
/// </summary>
/// <param name="message">The <see cref="string"/> value to write</param>
/// <param name="foregroundColor">Optional: The foreground color</param>
/// <param name="backgroundColor">Optional: The background color</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\StringFormat.cs
//-----------------------------------------------------------------------
// <copyright file="StringFormat.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Concatenates the values, using the specified separator between the elements.
/// This method is similar to <see cref="string.Join(string,object[])"/> except it
/// formats null values as &lt;null&gt;
/// </summary>
/// <param name="separator">The separator.</param>
/// <param name="args">The arguments.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\StringLike.cs
//-----------------------------------------------------------------------
// <copyright file="StringLike.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Switch.cs
//-----------------------------------------------------------------------
// <copyright file="Switch.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// An atomic switch that can be either on or off
/// </summary>
// revert status
/// <summary>
/// Executes the provided action if the lock is on. This is done under a lock so be _very_ careful with longrunning/blocking operations in it.
/// Only executes the action if the switch is on, and switches it off immediately after obtaining the lock.
/// Will switch it back on if the provided action throws an exception.
/// </summary>
/// <returns>Returns <c>true</c> if the switch was switched off</returns>
/// <summary>
/// Executes the provided action if the lock is off. This is done under a lock so be _very_ careful with longrunning/blocking operations in it.
/// Only executes the action if the switch is off, and switches it on immediately after obtaining the lock.
/// Will switch it back off if the provided action throws an exception.
/// </summary>
/// <returns>Returns <c>true</c> if the switch was switched on</returns>
/// <summary>
/// Switches the switch off (if on). Uses locking.
/// </summary>
/// <returns>Returns <c>true</c> if the switch was switched off</returns>
/// <summary>
/// Switches the switch on (if off). Uses locking.
/// </summary>
/// <returns>Returns <c>true</c> if the switch was switched on</returns>
/// <summary>
/// Executes the provided action and returns if the action was executed or not, if the switch is IMMEDIATELY on (i.e. no lock involved)
/// </summary>
/// <param name="action">The action.</param>
/// <returns>Return <c>true</c> if the switch was on</returns>
/// <summary>
/// Executes the provided action and returns if the action was executed or not, if the switch is IMMEDIATELY off (i.e. no lock involved)
/// </summary>
/// <param name="action">The action.</param>
/// <returns>Return <c>true</c> if the switch was off</returns>
/// <summary>
/// Executes the provided action and returns if the action was executed or not, if the switch is on, waiting for any pending changes to happen before (locking)
/// Be careful of longrunning or blocking within the provided action as it can lead to deadlocks or bad performance
/// </summary>
/// <summary>
/// Executes the provided action and returns if the action was executed or not, if the switch is off, waiting for any pending changes to happen before (locking)
/// Be careful of longrunning or blocking within the provided action as it can lead to deadlocks or bad performance
/// </summary>
/// <summary>
/// Gets a value indicating whether this switch is on. No locking.
/// </summary>
/// <value>
///   <c>true</c> if this instance is on; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Gets a value indicating whether this switch is off. No locking.
/// </summary>
/// <value>
///   <c>true</c> if this instance is off; otherwise, <c>false</c>.
/// </value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\ThreadLocalRandom.cs
//-----------------------------------------------------------------------
// <copyright file="ThreadLocalRandom.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Create random numbers with Thread-specific seeds.
/// 
/// Borrowed form Jon Skeet's brilliant C# in Depth: http://csharpindepth.com/Articles/Chapter12/Random.aspx
/// </summary>
/// <summary>
/// The current random number seed available to this thread
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\TypeExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="TypeExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Class TypeExtensions.
/// </summary>
/// <summary>
/// Returns true if <paramref name="type" /> implements/inherits <typeparamref name="T" />.
/// <example><para>typeof(object[]).Implements&lt;IEnumerable&gt;() --&gt; true</para></example>
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="type">The type.</param>
/// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
/// <summary>
/// Returns true if <paramref name="type" /> implements/inherits <paramref name="moreGeneralType" />.
/// <example><para>typeof(object[]).Implements(typeof(IEnumerable)) --&gt; true</para></example>
/// </summary>
/// <param name="type">The type.</param>
/// <param name="moreGeneralType">Type of the more general.</param>
/// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Vector.cs
//-----------------------------------------------------------------------
// <copyright file="Vector.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\WildcardTree.cs
//-----------------------------------------------------------------------
// <copyright file="WildcardTree.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A searchable nested dictionary, represents a searchable tree structure underneath
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\ArrayExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="ArrayExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Provides extension utilities to arrays.
/// </summary>
/// <summary>
/// Determines if an array is null or empty.
/// </summary>
/// <param name="obj">The array to check.</param>
/// <returns>True if null or empty, false otherwise.</returns>
/// <summary>
/// Determines if an array is not null or empty.
/// </summary>
/// <param name="obj">The array to check.</param>
/// <returns>True if not null or empty, false otherwise.</returns>
/// <summary>
/// Shuffles an array of objects.
/// </summary>
/// <typeparam name="T">The type of the array to sort.</typeparam>
/// <param name="array">The array to sort.</param>
/// <summary>
/// Implementation of Scala's ZipWithIndex method.
/// 
/// Folds a collection into a Dictionary where the original value (of type T) acts as the key
/// and the index of the item in the array acts as the value.
/// </summary>
/// <summary>
/// Grabs a subset of an IEnumerable based on a starting index and position
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="items">The array of items to slice</param>
/// <param name="startIndex">The starting position to begin the slice</param>
/// <param name="count">The number of items to take</param>
/// <returns>A slice of size <paramref name="count"/> beginning from position <sparamref name="startIndex"/> in <paramref name="items"/>.</returns>
/// <summary>
/// Select all the items in this array beginning with <paramref name="startingItem"/> and up until the end of the array.
/// 
/// <note>
/// If <paramref name="startingItem"/> is not found in the array, From will return an empty set.
/// If <paramref name="startingItem"/> is found at the end of the array, From will return the entire original array.
/// </note>
/// </summary>
/// <summary>
/// Select all the items in this array from the beginning until (but not including) <paramref name="startingItem"/>
/// <note>
/// If <paramref name="startingItem"/> is not found in the array, Until will select all items.
/// If <paramref name="startingItem"/> is the first item in the array, an empty array will be returned.
/// </note>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\AtomicCounter.cs
//-----------------------------------------------------------------------
// <copyright file="AtomicCounter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// An atomic 32 bit integer counter.
/// </summary>
/// <summary>
/// Creates an instance of an AtomicCounter.
/// </summary>
/// <param name="initialValue">The initial value of this counter.</param>
/// <summary>
/// Creates an instance of an AtomicCounter with a starting value of -1.
/// </summary>
/// <summary>
/// The current value of the atomic counter.
/// </summary>
/// <summary>
/// Retrieves the current value of the counter
/// </summary>
/// <summary>
/// Increments the counter and returns the next value
/// </summary>
/// <summary>
/// Atomically increments the counter by one.
/// </summary>
/// <returns>The original value.</returns>
/// <summary>
/// Atomically increments the counter by one.
/// </summary>
/// <returns>The new value.</returns>
/// <summary>
/// Returns the current value and adds the specified value to the counter.
/// </summary>
/// <param name="amount">The amount to add to the counter.</param>
/// <returns>The original value before additions.</returns>
/// <summary>
/// Adds the specified value to the counter and returns the new value.
/// </summary>
/// <param name="amount">The amount to add to the counter.</param>
/// <returns>The new value after additions.</returns>
/// <summary>
/// Resets the counter to zero.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\AtomicCounterLong.cs
//-----------------------------------------------------------------------
// <copyright file="AtomicCounterLong.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// An atomic 64 bit integer counter.
/// </summary>
/// <summary>
/// Creates an instance of an AtomicCounterLong.
/// </summary>
/// <param name="value">The initial value of this counter.</param>
/// <summary>
/// Creates an instance of an AtomicCounterLong with a starting value of -1.
/// </summary>
/// <summary>
/// The current value for this counter.
/// </summary>
/// <summary>
/// Retrieves the current value of the counter
/// </summary>
/// <summary>
/// Increments the counter and returns the next value.
/// </summary>
/// <summary>
/// Atomically increments the counter by one.
/// </summary>
/// <returns>The original value.</returns>
/// <summary>
/// Atomically increments the counter by one.
/// </summary>
/// <returns>The new value.</returns>
/// <summary>
/// Gets the current value of the counter and adds an amount to it.
/// </summary>
/// <remarks>This uses a CAS loop as Interlocked.Increment is not atomic for longs on 32bit systems.</remarks>
/// <param name="amount">The amount to add to the counter.</param>
/// <returns>The original value.</returns>
/// <summary>
/// Adds an amount to the counter and returns the new value.
/// </summary>
/// <remarks>This uses a CAS loop as Interlocked.Increment is not atomic for longs on 32bit systems.</remarks>
/// <param name="amount">The amount to add to the counter.</param>
/// <returns>The new counter value.</returns>
/// <summary>
/// Resets the counter to zero.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\AtomicState.cs
//-----------------------------------------------------------------------
// <copyright file="AtomicState.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Internal state abstraction
/// </summary>
/// <summary>
/// Add a listener function which is invoked on state entry
/// </summary>
/// <param name="listener">listener implementation</param>
/// <summary>
/// Test for whether listeners exist
/// </summary>
/// <summary>
/// Notifies the listeners of the transition event via a 
/// </summary>
/// <summary>
/// Shared implementation of call across all states.  Thrown exception or execution of the call beyond the allowed
/// call timeout is counted as a failed call, otherwise a successful call
/// 
/// NOTE: In .Net there is no way to cancel an uncancellable task. We are merely cancelling the wait and marking this
/// as a failure.
/// 
/// see http://blogs.msdn.com/b/pfxteam/archive/2011/11/10/10235834.aspx 
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="task">Implementation of the call</param>
/// <returns>result of the call</returns>
/// <summary>
/// Shared implementation of call across all states.  Thrown exception or execution of the call beyond the allowed
/// call timeout is counted as a failed call, otherwise a successful call
/// 
/// NOTE: In .Net there is no way to cancel an uncancellable task. We are merely cancelling the wait and marking this
/// as a failure.
/// 
/// see http://blogs.msdn.com/b/pfxteam/archive/2011/11/10/10235834.aspx 
/// </summary>
/// <param name="task"><see cref="Task"/> Implementation of the call</param>
/// <returns><see cref="Task"/></returns>
/// <summary>
/// Abstract entry point for all states
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="body">Implementation of the call that needs protected</param>
/// <returns><see cref="Task"/> containing result of protected call</returns>
/// <summary>
/// Abstract entry point for all states
/// </summary>
/// <param name="body">Implementation of the call that needs protected</param>
/// <returns><see cref="Task"/> containing result of protected call</returns>
/// <summary>
/// Invoked when call fails
/// </summary>
/// <summary>
/// Invoked when call succeeds
/// </summary>
/// <summary>
/// Invoked on the transitioned-to state during transition. Notifies listeners after invoking subclass template method _enter
/// </summary>
/// <summary>
/// Enter the state. NotifyTransitionListeners is not awaited -- its "fire and forget". 
/// It is up to the user to handle any errors that occur in this state.
/// </summary>
/// <summary>
/// This interface represents the parts of the internal circuit breaker state; the behavior stack, watched by, watching and termination queue
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Extensions.cs
//-----------------------------------------------------------------------
// <copyright file="Extensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Scala alias for Skip
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="self"></param>
/// <param name="count"></param>
/// <returns></returns>
/// <summary>
/// Scala alias for FirstOrDefault
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="self"></param>
/// <returns></returns>
/// <summary>
/// Dictionary helper that allows for idempotent updates. You don't need to care whether or not
/// this item is already in the collection in order to update it.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\IAtomicCounter.cs
//-----------------------------------------------------------------------
// <copyright file="IAtomicCounter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// An interface that describes a numeric counter.
/// </summary>
/// <typeparam name="T">The type of the numeric.</typeparam>
/// <summary>
/// The current value of this counter.
/// </summary>
/// <summary>
/// Increments the counter and gets the next value. This is exactly the same as calling <see cref="IncrementAndGet"/>.
/// </summary>
/// <summary>
/// Atomically increments the counter by one.
/// </summary>
/// <returns>The original value.</returns>
/// <summary>
/// Atomically increments the counter by one.
/// </summary>
/// <returns>The new value.</returns>
/// <summary>
/// Returns the current value and adds the specified value to the counter.
/// </summary>
/// <param name="amount">The amount to add to the counter.</param>
/// <returns>The original value before additions.</returns>
/// <summary>
/// Adds the specified value to the counter and returns the new value.
/// </summary>
/// <param name="amount">The amount to add to the counter.</param>
/// <returns>The new value after additions.</returns>
/// <summary>
/// Resets the counter to zero.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\ImmutabilityUtils.cs
//-----------------------------------------------------------------------
// <copyright file="ImmutabilityUtils.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Utility class for adding some basic immutable behaviors
/// to specific types of collections without having to reference
/// the entire BCL.Immutability NuGet package.
/// 
/// INTERNAL API
/// </summary>
// ReSharper disable once PossibleNullReferenceException
// ReSharper disable once PossibleNullReferenceException
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\InterlockedSpin.cs
//-----------------------------------------------------------------------
// <copyright file="InterlockedSpin.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>INTERNAL!
/// Implements helpers for performing Compare-and-swap operations using <see cref="Interlocked.CompareExchange{T}"/>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>INTERNAL!
/// Atomically updates the object <paramref name="reference"/> by calling <paramref name="updater"/> to get the new value.
/// Note that <paramref name="updater"/> may be called many times so it should be idempotent.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <returns>The updated value.</returns>
/// <summary>INTERNAL!
/// Atomically updates the int <paramref name="reference"/> by calling <paramref name="updateIfTrue"/> to get the new value.
/// <paramref name="updateIfTrue"/> returns a Tuple&lt;should update, the new int value, the return value&gt;
/// If the first item in the tuple is true, the value is updated, and the third value of the tuple is returned.
/// Note that <paramref name="updateIfTrue"/> may be called many times so it should be idempotent.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <returns>The third value from the tuple return by <paramref name="updateIfTrue"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\StringBuilderExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="StringBuilderExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
// ReSharper disable CompareNonConstrainedGenericWithNull
// ReSharper restore CompareNonConstrainedGenericWithNull
// ReSharper disable CompareNonConstrainedGenericWithNull
// ReSharper restore CompareNonConstrainedGenericWithNull
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\TaskExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="TaskExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Collections\EmptyReadOnlyCollections.cs
//-----------------------------------------------------------------------
// <copyright file="EmptyReadOnlyCollections.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Collections\EnumeratorExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="EnumeratorExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Collections\IBinaryTreeNode.cs
//-----------------------------------------------------------------------
// <copyright file="IBinaryTreeNode.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Collections\IImmutableMap.cs
//-----------------------------------------------------------------------
// <copyright file="IImmutableMap.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Collections\IImmutableSet.cs
//-----------------------------------------------------------------------
// <copyright file="IImmutableSet.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Collections\IKeyValuePair.cs
//-----------------------------------------------------------------------
// <copyright file="IKeyValuePair.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Collections\ImmutableAvlTree.cs
//-----------------------------------------------------------------------
// <copyright file="ImmutableAvlTree.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// An immutable AVL tree.
/// Originally from http://justinmchase.com/2011/12/13/immutable-avl-tree-in-c/
/// </summary>
/// <typeparam name="TKey">The type of the keys.</typeparam>
/// <typeparam name="TValue">The type of the values.</typeparam>
//Intentionally left blank
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Collections\ImmutableAvlTreeBase.cs
//-----------------------------------------------------------------------
// <copyright file="ImmutableAvlTreeBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// An immutable AVL tree.
/// Originally from http://justinmchase.com/2011/12/13/immutable-avl-tree-in-c/
/// </summary>
/// <typeparam name="TKey">The type of the keys.</typeparam>
/// <typeparam name="TValue">The type of the values.</typeparam>
//case AddOperation.Add:
//default:
//    //Intentionally left blank
//    break;
// 2 or -2 means unbalanced
// L
// LL
// rotate right
// LR
// rotate left
// rotate right
// R
// RL
// rotate right
// rotate left
// RR
// rotate left
//       (5)            4     
//       / \           / \    
//      4   D         /   \   
//     / \           3     5  
//    3   C    -->  / \   / \ 
//   / \           A   B C   D
//  A   B                     
//    (3)               4     
//    / \              / \    
//   A   4            /   \   
//      / \          3     5  
//     B   5   -->  / \   / \ 
//        / \      A   B C   D
//       C   D                
//Note, if node is a leaf, Left will be null too.
// We have two children. Remove the next-highest node and replace
// this node with it.
//right is always!=null
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Collections\ImmutableAvlTreeMap.cs
//-----------------------------------------------------------------------
// <copyright file="ImmutableAvlTreeMap.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Intentionally left blank
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Collections\ImmutableTreeSet.cs
//-----------------------------------------------------------------------
// <copyright file="ImmutableTreeSet.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Intentionally left blank
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Internal\Collections\Iterator.cs
//-----------------------------------------------------------------------
// <copyright file="Iterator.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\Argument.cs
//-----------------------------------------------------------------------
// <copyright file="Argument.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\CachedMatchCompiler.cs
//-----------------------------------------------------------------------
// <copyright file="CachedMatchCompiler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//If we got a cached version of the delegate we need to restructure the captured arguments suitable for the delegate
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\CompiledMatchHandlerWithArguments.cs
//-----------------------------------------------------------------------
// <copyright file="CompiledMatchHandlerWithArguments.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\HandlerKind.cs
//-----------------------------------------------------------------------
// <copyright file="HandlerKind.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>The handler is a Action&lt;T&gt;</summary>
/// <summary>The handler is a Action&lt;T&gt; and a Predicate&lt;T&gt; is specified</summary>
/// <summary>The handler is a Func&lt;T, bool&gt;</summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\ILambdaExpressionCompiler.cs
//-----------------------------------------------------------------------
// <copyright file="ILambdaExpressionCompiler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Produces a delegate that represents the lambda expression.
/// </summary>
/// <param name="expression">The expression to compile</param>
/// <returns>A delegate containing the compiled version of the lambda.</returns>
/// <summary>
/// Compiles the lambda into a method definition.
/// </summary>
/// <param name="expression">The expression to compile</param>
/// <param name="method">A <see cref="MethodBuilder"/> which will be used to hold the lambda's IL.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\IMatchCompiler.cs
//-----------------------------------------------------------------------
// <copyright file="IMatchCompiler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\IMatchExpressionBuilder.cs
//-----------------------------------------------------------------------
// <copyright file="IMatchExpressionBuilder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\IPartialActionBuilder.cs
//-----------------------------------------------------------------------
// <copyright file="IPartialActionBuilder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Builds the specified delegate and arguments to a <see cref="PartialAction{T}"/>
/// <para>If the number of arguments are 0, the delegate should be a <see cref="Func{T}">Func&lt;<typeparamref name="T"/>,bool&gt;</see></para>
/// <para>If the number of arguments are 1, the delegate should be a <see cref="Func{T,T1}">Func&lt;<typeparamref name="T"/>,T1,bool&gt;</see></para>
/// <para>...</para>
/// <para>If the number of arguments are n, the delegate should be a Func&lt;<typeparamref name="T"/>,T1,...,Tn,bool&gt;</para>
/// <para>The maximum number of arguments i.e. n in the above example is therefore <see cref="PartialActionBuilder.MaxNumberOfArguments"/>=14</para>
/// <para>Given a delegate deleg of type Func&lt;<typeparamref name="T"/>,T1,...,Tn,bool&gt; and args [a_1,...a_n] then 
/// the delegate corresponding to this code is returned:
/// <example>(value) => deleg(value,a_1, ..., a_n)</example>
/// </para>
/// </summary>
/// <typeparam name="T">The type of the value parameter in to the returned <see cref="PartialAction{T}"/></typeparam>
/// <param name="handlerAndArgs">The handler, i.e. a Func&lt;<typeparamref name="T"/>,T1,...,Tn,bool&gt; and arguments [a_1,...a_n].</param>
/// <returns>Returns a <see cref="PartialAction{T}"/> that calls the delegate with the arguments.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\LambdaExpressionCompiler.cs
//-----------------------------------------------------------------------
// <copyright file="LambdaExpressionCompiler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\MatchBuilder.cs
//-----------------------------------------------------------------------
// <copyright file="MatchBuilder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//This class works by collecting all handlers.
//By creating a signature, made up of all types [Type], and types-of-handlers [HandlerKind], we can use the same code
//for all with the same signature.
//
//These two builders will create the same signature (given that these are the only match calls made):
//    builder1.Match<string>(s=>F(s) , s=>s=="");
//    builder2.Match<string>(s=>G(s) , s=>s!="");
//The signature will be [ typeof(String), HandlerKind.ActionWithPredicate ] for both, and will yield pseudo code that looks like:
//    bool Matcher(o, action, predicate)
//        if(o is string && predicate((string) s)) { action((string) s); return true; }
//        return false;
//
//Since both share the same signature they can both use the same expression tree, i.e. the same Matcher-function
//    
//Actions, Funcs and Predicates that are specified by the user in Match-calls are added to lists, like a closure.
//For the example above the captured variables for the two builders are:
//    builder1:  action = s=>F(s); predicate = s=>s==""
//    builder2:  action = s=>G(s); predicate = s=>s!=""
//Contains all handlers, with the handled types and predicates
//Contains Actions,Predicates and Funcs that has been added
/// <summary>
/// Adds a handler that is called if the item being matched is of type <typeparamref name="T"/>
/// and <paramref name="shouldHandle"/>, if it has been specified, returns <c>true</c>.
/// <remarks>Note that if a previous added handler handled the item, this <paramref name="handler"/> will not be invoked.</remarks>
/// </summary>
/// <typeparam name="T">The type that it must match in order for <paramref name="handler"/> to be called.</typeparam>
/// <param name="handler">The handler that is invoked when everything matches.</param>
/// <param name="shouldHandle">An optional predicate to test if the item matches. If it returns <c>true</c> the <paramref name="handler"/> is invoked.</param>
/// <summary>
/// Adds a handler that is called if the item being matched is of type <paramref name="handlesType"/>
/// and <paramref name="shouldHandle"/>, if it has been specified, returns <c>true</c>.
/// <remarks>Note that if a previous added handler handled the item, this <paramref name="handler"/> will not be invoked.</remarks>
/// </summary>
/// <param name="handlesType">The type that it must match in order for <paramref name="handler"/> to be called.</param>
/// <param name="handler">The handler that is invoked when everything matches.</param>
/// <param name="shouldHandle">An optional predicate to test if the item matches. If it returns <c>true</c> the <paramref name="handler"/> is invoked.</param>
/// <summary>
/// Adds a handler that is called if the item being matched is of type <typeparamref name="T"/>.
/// The handler should return <c>true</c> if the item sent in matched and was handled.
/// <remarks>Note that if a previous added handler handled the item, this <paramref name="handler"/> will not be invoked.</remarks>
/// </summary>
/// <typeparam name="T">The type that it must match in order for <paramref name="handler"/> to be called.</typeparam>
/// <param name="handler">The handler that is invoked. It should return <c>true</c> if the item sent in matched and was handled.</param>
/// <summary>
/// Adds a handler that is called if the item being matched is of type <paramref name="handlesType"/>.
/// The handler should return <c>true</c> if the item sent in matched and was handled.
/// <remarks>Note that if a previous added handler handled the item, this <paramref name="handler"/> will not be invoked.</remarks>
/// </summary>
/// <param name="handlesType">The type that it must match in order for <paramref name="handler"/> to be called.</param>
/// <param name="handler">The handler that is invoked. It should return <c>true</c> if the item sent in matched and was handled.</param>
/// <summary>
/// Adds a handler that is invoked no matter the type the item being matched is.
/// <remarks>Note that since this matches all items, no more handlers may be added after this one.</remarks>
/// <remarks>Note that if a previous added handler handled the item, this <paramref name="handler"/> will not be invoked.</remarks>
/// </summary>
/// <summary>
/// Builds all added handlers and returns a <see cref="PartialAction{TItem}"/>.
/// </summary>
/// <returns>Returns a <see cref="PartialAction{TItem}"/></returns>
//Throws an exception if a MatchAny handler has been added or the partial handler has been created.
//if the previous handler handles the same type, we don't need an entirely new TypeHandler,
//we can just add the handler to its' list of handlers
//Either no previous handler had been added, or it handled a different type.
//Create a new handler and store it.
//The type is part of the signature
//Store the handler (action or func), the predicate the the type of handler
//The kind of handler (action, action+predicate or fun) is part of the signature
//Capture the handler (action or func) and the predicate if specified
//If the last item in _typeHandlers handles the same type, it is returned in typeHandler
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\MatchBuilderSignature.cs
//-----------------------------------------------------------------------
// <copyright file="MatchBuilderSignature.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains the handled <see cref="Type">Types</see> and <see cref="HandlerKind">HandlerKinds</see> 
/// that has been added to a <see cref="MatchBuilder"/>.
/// Two signatures are equal if they contain the same <see cref="Type">Types</see> and <see cref="HandlerKind">HandlerKinds</see>
/// in the same order.
/// </summary>
// Two signatures are equal if they contain the same <see cref="Type">Types</see> and <see cref="HandlerKind">HandlerKinds</see>
// in the same order.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\MatchExpressionBuilder.cs
//-----------------------------------------------------------------------
// <copyright file="MatchExpressionBuilder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//See the end of file a description of what this class does
// ReSharper disable once StaticFieldInGenericType
//See the end of this file for a description of what kind of code we generate
//Create the return label and the context object
//Lets build the body
//We will cast the input variable to different types, i.g.:
//   var stringInput = input as string;
//We store every created variable so that, if a later handler handles strings, we already have it casted.
//Loop over all handlers
//This is the type the handler handles
//No need to check that the message can be casted to an object. Just add the handlers code to the body
//Next we'll create the rest of the if-body, i.e. the handlers code
//For value types we cannot use as-operator and check for nu, s0 we create the following code:
//  if(inputVariable is HandlesType)
//  {
//    var castedVariable = (HandlesType) inputVariable;
//       -Handlers code-
//  }
//Create:  var castedValueVariable = (HandlesType) inputVariable;
//Next we'll create the rest of the if-body, i.e. the handlers code
//Create the if-expression
//For reference type we'll cast the input using the as-operator and then check for null
//  var castedVariable = inputVariable as HandlesType;
//  if(castedVariable != null)
//  {
//     -Handler code-
//  }
//We might have a variable of the correct type already, so use it in that case
//The variable did not exist, create and store it:
//  var castedVariable = inputParameter as HandlesType;
//Next we'll create the rest of the if-body, i.e. the handlers code
//Add expression: if(messageVariable!=null) { handlerExpressions }
//Add the goto-label that is used for return statements
//Extract all declared variables (ignoring messageParameter which will be declared in the head of the delegate)
//Create the body, and declare all variables that was added to the mainBodyExpressions.
//Create the Lambda expressions.
//Warning: This is using the same algorithm as CreateArgumentValuesArray.
//         Any updates in this should be made in CreateArgumentValuesArray as well.
//
//If we only have a few arguments, the parameters will be:
//    (arguments_0, arguments_1)
//If we have more than we can fit, we'll create an array at the end and add the last ones there
//    (arguments_0, ..., arguments_n, extrArgsArray)
//We have at least one extra argument. We have to make room for extraArgsArray parameter
//Since we made room for the extraArgsArray we have to move one of the args to extraArgsArry
//Warning: This is a stripped down version, using the same algorithm as DecorateHandlerAndPredicateExpressions.
//         Any updates in this should be made in DecorateHandlerAndPredicateExpressions as well.
//We have at least one extra argument. We have to make room for extraArgsArray parameter
// Generates code for predicateAndHandlers and adds it to bodyExpressions
//Add the action as an argument, and get the expression for retrieving it
//Adds this code to the body:
//    action(arg);
//    return true;
//Add this code to the body:
//    if(predicate(arg))
//    {
//      action(arg);
//      return true;
//    }
//Add this code to the body:
//    if(func(castedValue))
//    {
//      return true;
//    }
//Basically this class build this expression tree:
//   bool Handler(T input, Type0 arg0, ..., Typen argn, object[] extra)
//   {
//      //BODY
//      return: //label
//   }
//
//We try to inline as many argument as function parameters as possible, the rest goes into the extra array.
//The arguments are the predicates and handler methods captured by the builder.
//   Example 1:
//      Receive<string>(s=>s.Length==5, s=>DoSomething(s));
//      Receive<string>(s=>DoSomethingElse(s));
//      Receive<int>(i=>DoSomethingElseWithInt(i));
//Will result in the following code:
//   Example 2:
//      bool Handler(T input, Predicate<string> p1, Action<string> a1, Action<string> a2, Action<int> a3)
//      {
//          var s = input as string;
//          if(s != null)
//          {
//              if(p1(s))
//              {
//                  a1(s);
//                  return true;
//              }
//              a2(s);
//              return true;
//          }
//          if(input is int)
//          {
//              var i = (int)input;
//              a3(i);
//              return true;
//          }
//          return false;
//      }
//Typically the code in Example 1 is called in the constructor of an Actor, and although the code looks the same,
//the actions and predicates sent in to receive actually are new instances.
//The reason we capture the predicates and actions, instead of calling them directly, is that the code 
//in Example 2, can be compiled, cached and reused no matter the predicates and actions.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\MatchExpressionBuilderResult.cs
//-----------------------------------------------------------------------
// <copyright file="MatchExpressionBuilderResult.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\PartialAction.cs
//-----------------------------------------------------------------------
// <copyright file="PartialAction.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// An action that returns <c>true</c> if the <paramref name="item"/> was handled.
/// </summary>
/// <typeparam name="T">The type of the argument</typeparam>
/// <param name="item">The argument.</param>
/// <returns>Returns <c>true</c> if the <paramref name="item"/> was handled</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\PartialActionBuilder.cs
//-----------------------------------------------------------------------
// <copyright file="PartialActionBuilder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// The maximum number of arguments=15 not including the obligatory first value argument in a partial action. 
/// 16 is the maximum number of args in a Func, see <see cref="Func{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TResult}"/>
/// </summary>
//This is except the required value parameter
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\PartialHandlerArgumentsCapture.cs
//-----------------------------------------------------------------------
// <copyright file="PartialHandlerArgumentsCapture.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//public interface IPartialHandler<in T>
//{
//    bool Handle(T value);
//}
//CheckParameters(handler, arguments, 1);
//CheckParameters(handler, arguments, 1);
//CheckParameters(handler, arguments, 2);
//CheckParameters(handler, arguments, 3);
//CheckParameters(handler, arguments, 4);
//CheckParameters(handler, arguments, 5);
//CheckParameters(handler, arguments, 6);
//CheckParameters(handler, arguments, 7);
//CheckParameters(handler, arguments, 8);
//CheckParameters(handler, arguments, 9);
//CheckParameters(handler, arguments, 10);
//CheckParameters(handler, arguments, 11);
//CheckParameters(handler, arguments, 12);
//CheckParameters(handler, arguments, 13);
//CheckParameters(handler, arguments, 14);
//CheckParameters(handler, arguments, 15);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\PredicateAndHandler.cs
//-----------------------------------------------------------------------
// <copyright file="PredicateAndHandler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\MatchHandler\TypeHandler.cs
//-----------------------------------------------------------------------
// <copyright file="TypeHandler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka\Util\Reflection\ExpressionExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="ExpressionExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\AutoDown.cs
//-----------------------------------------------------------------------
// <copyright file="AutoDown.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// 
/// An unreachable member will be downed by this actor if it remains unreachable
/// for the specified duration and this actor is running on the leader node in the
/// cluster.
/// 
/// The implementation is split into two classes AutoDown and AutoDownBase to be
/// able to unit test the logic without running cluster.
/// </summary>
//TODO: Equals etc
// it's supposed to be downed by another node, current leader, but if that crash
// a new leader must pick up these
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\Cluster.cs
//-----------------------------------------------------------------------
// <copyright file="Cluster.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: xmldoc
/// <summary>
/// This module is responsible for cluster membership information. Changes to the cluster
/// information is retrieved through <see cref="Akka.Cluster.Cluster.Subscribe"/>. Commands to operate the cluster is
/// available through methods in this class, such as <see cref="Akka.Cluster.Cluster.Join"/>, <see cref="Akka.Cluster.Cluster.Down"/> and <see cref="Akka.Cluster.Cluster.Leave"/>.
/// 
/// Each cluster <see cref="Akka.Cluster.Member"/> is identified by its <see cref="Akka.Actor.Address"/>, and
/// the cluster address of this actor system is [[#selfAddress]]. A member also has a status;
/// initially <see cref="Akka.Cluster.MemberStatus.Joining"/> followed by <see cref="Akka.Cluster.MemberStatus.Up"/>.
/// </summary>
//TODO: Issue with missing overrides for Get and Lookup
//TODO: Consequences of this?
//create supervisor for daemons under path "/system/cluster"
//TODO: Pretty sure this is bad and will at least throw aggregateexception possibly worse. 
/// <summary>
/// Handles initialization logic for the <see cref="Cluster"/>
/// </summary>
//don't re-throw the error. Just log it.
//TODO: add system.terminationCallback support
/// <summary>
/// Subscribe to one or more cluster domain events.
/// </summary>
/// <param name="subscriber">The actor who'll receive the cluster domain events</param>
/// <param name="to"><see cref="ClusterEvent.IClusterDomainEvent"/> subclasses</param>
/// <remarks>A snapshot of <see cref="ClusterEvent.CurrentClusterState"/> will be sent to <paramref name="subscriber"/> as the first message</remarks>
/// <summary>
/// Subscribe to one or more cluster domain events.
/// </summary>
/// <param name="subscriber">The actor who'll receive the cluster domain events</param>
/// <param name="initialStateMode">
/// If set to <see cref="ClusterEvent.SubscriptionInitialStateMode.InitialStateAsEvents"/> the events corresponding to the current state
/// will be sent to <paramref name="subscriber"/> to mimic what it would have seen if it were listening to the events when they occurred in the past.
/// 
/// If set to <see cref="ClusterEvent.SubscriptionInitialStateMode.InitialStateAsSnapshot"/> 
/// a snapshot of <see cref="ClusterEvent.CurrentClusterState"/> will be sent to <paramref name="subscriber"/> as the first message. </param>
/// <param name="to"><see cref="ClusterEvent.IClusterDomainEvent"/> subclasses</param>
/// <summary>
/// Unsubscribe to all cluster domain events.
/// </summary>
/// <summary>
/// Unsubscribe to a specific type of cluster domain event
/// </summary>
/// <summary>
/// Send the current (full) state of the cluster to the specified receiver.
/// If you want this to happen periodically, you can use the <see cref="Scheduler"/> to schedule
/// a call to this method. You can also call <see cref="State"/> directly for this information.
/// </summary>
/// <summary>
/// Try to join this cluster node specified by <paramref name="address"/>.
/// A <see cref="Join"/> command is sent to the node to join.
/// 
/// An actor system can only join a cluster once. Additional attempts will be ignored.
/// When it has successfully joined it must be restarted to be able to join another
/// cluster or to join the same cluster again.
/// </summary>
/// <summary>
/// Join the specified seed nodes without defining them in config.
/// Especially useful from tests when Addresses are unknown before startup time.
/// 
/// An actor system can only join a cluster once. Additional attempts will be ignored.
/// When it has successfully joined it must be restarted to be able to join another
/// cluster or to join the same cluster again.
/// </summary>
/// <summary>
/// Send command to issue state transition to LEAVING for the node specified by <paramref name="address"/>.
/// The member will go through the status changes <see cref="MemberStatus.Leaving"/> (not published to 
/// subscribers) followed by <see cref="MemberStatus.Exiting"/> and finally <see cref="MemberStatus.Removed"/>.
/// 
/// Note that this command can be issued to any member in the cluster, not necessarily the
/// one that is leaving. The cluster extension, but not the actor system, of the leaving member will be shutdown after
/// the leader has changed status of the member to <see cref="MemberStatus.Exiting"/>. Thereafter the member will be
/// removed from the cluster. Normally this is handled automatically, but in case of network failures during
/// this process it might still be necessary to set the node's status to <see cref="MemberStatus.Down"/> in order
/// to complete the removal.
/// </summary>
/// <param name="address"></param>
/// <summary>
/// Send command to DOWN the node specified by <paramref name="address"/>.
/// 
/// When a member is considered by the failure detector to be unreachable the leader is not
/// allowed to perform its duties, such as changing status of new joining members to <see cref="MemberStatus.Up"/>.
/// The status of the unreachable member must be changed to <see cref="MemberStatus.Down"/>, which can be done with
/// this method.
/// </summary>
/// <summary>
/// The supplied callback will be run once when the current cluster member is <see cref="MemberStatus.Up"/>.
/// Typically used together with configuration option 'akka.cluster.min-nr-of-members' to defer some action,
/// such as starting actors, until the cluster has reached a certain size.
/// </summary>
/// <param name="callback"></param>
/// <summary>
/// The address of this cluster member.
/// </summary>
/// <summary>
/// roles that this member has
/// </summary>
// ========================================================
// ===================== WORK DAEMONS =====================
// ========================================================
//TODO: Whole load of stuff missing here!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\ClusterActorRefProvider.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterActorRefProvider.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// 
/// The `ClusterActorRefProvider` will load the <see cref="Cluster"/>
/// extension, i.e. the cluster will automatically be started when
/// the `ClusterActorRefProvider` is used.
/// </summary>
/*DynamicAccess*/)
//Complete the usual RemoteActorRefProvider initializations - need access to transports and RemoteWatcher before clustering can work
// initialize/load the Cluster extension
// make sure Cluster extension is initialized/loaded from init thread
/// <summary>
/// Cluster-aware scope of a <see cref="Deploy"/>
/// </summary>
/// <summary>
/// INTERNAL API
/// 
/// Deployer of cluster-aware routers
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\ClusterDaemon.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterDaemon.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Base interface for all cluster messages. All ClusterMessage's are serializable.
/// </summary>
/// <summary>
/// Cluster commands sent by the USER via <see cref="Cluster"/> extension.
/// </summary>
/// <summary>
/// Command to initiate join another node (represented by `address`).
/// Join will be sent to the other node.
/// </summary>
/// <summary>
/// Command to leave the cluster.
/// </summary>
/// <summary>
/// Command to mark node as temporary down.
/// </summary>
/// <summary>
/// Command to join the cluster. Sent when a node wants to join another node (the receiver).
/// </summary>
/// <param name="node">the node that wants to join the cluster</param>
/// <param name="roles"></param>
/// <summary>
/// Reply to Join
/// </summary>
/// <param name="from">the sender node in the cluster, i.e. the node that received the Join command</param>
/// <param name="gossip"></param>
/// <summary>
/// Command to initiate the process to join the specified
/// seed nodes.
/// </summary>
/// <summary>
/// Start message of the process to join one of the seed nodes.
/// The node sends <see cref="InitJoin"/> to all seed nodes, which replies
/// with <see cref="InitJoinAck"/>. The first reply is used others are discarded.
/// The node sends <see cref="Join"/> command to the seed node that replied first.
/// If a node is uninitialized it will reply to `InitJoin` with
/// <see cref="InitJoinNack"/>.
/// </summary>
/// <summary>
/// See JoinSeedNode
/// </summary>
/// <summary>
/// See JoinSeeNode
/// </summary>
/// <summary>
/// See JoinSeeNode
/// </summary>
/// <summary>
/// Marker interface for periodic tick messages
/// </summary>
/// <summary>
/// Command to <see cref="Akka.Cluster.ClusterDaemon"/> to create a
/// <see cref="Akka.Cluster.OnMemberUpListener"/>
/// </summary>
/// <param name="receiver"><see cref="Akka.Cluster.ClusterEvent.CurrentClusterState"/> will be sent to the `receiver`</param>
//TODO: IRequiresMessageQueue?
/// <summary>
/// Supervisor managing the different Cluster daemons.
/// </summary>
// Important - don't use Cluster(context.system) here because that would
// cause deadlock. The Cluster extension is currently being created and is waiting
// for response from GetClusterCoreRef in its constructor.
/// <summary>
/// ClusterCoreDaemon and ClusterDomainEventPublisher can't be restarted because the state
/// would be obsolete. Shutdown the member if any those actors crashed.
/// </summary>
//TODO: JVM version matches NonFatal. Can / should we do something similar? 
// note that self is not initially member,
// and the SendGossip is not versioned for this 'Node' yet
//for unique names
// make sure that join process is stopped
// start heartbeatSender here, and not in constructor to make sure that
// heartbeating doesn't start before Welcome is received            
// make sure that join process is stopped
//do nothing
// use unique name of this actor, stopSeedNodeProcess doesn't wait for termination
// Try to join this cluster node with the node specified by `address`.
// It's only allowed to join from an empty state, i.e. when not already a member.
// A `Join(selfUniqueAddress)` command is sent to the node to join,
// which will reply with a `Welcome` message.
//TODO: Akka exception?
// to support manual join when joining to seed nodes is stuck (no seed nodes available)
// manual join, abort current seedNodeProcess
// State transition to JOINING - new node joining.
// Received `Join` message and replies with `Welcome` message, containing
// current gossip state, including the new joining member.
// remove the node from the failure detector
// add joining node as Joining
// add self in case someone else joins before self has joined (Set discards duplicates)
//Reply from Join request
// State transition to LEAVING.
// The node will eventually be removed by the leader, after hand-off in EXITING, and only after
// removal a new node with same address can join the cluster through the normal joining procedure.
// only try to update if the node is available (in the member ring)
// mark node as LEAVING
//This method is called when a member sees itself as Exiting or Down.
/**
//check if the node to DOWN is in the 'members' set
// replace member (changed status)
// remove nodes marked as DOWN from the 'seen' table
//update gossip overview
//update gossip
//same version
//remote is newer
//conflicting or local is newer
/// <summary>
/// The types of gossip actions that receive gossip has performed.
/// </summary>
/// <summary>
/// The types of gossip actions that receive gossip has performed.
/// </summary>
//same version
//local is newer
//remote is newer
//conflicting versions, merge
// for all new joining nodes we remove them from the failure detector
// send back gossip to sender() when sender() had different view, i.e. merge, or sender() had
// older or sender() had newer
//Initiates a new round of gossip.
// If it's time to try to gossip to some nodes with a different view
// gossip to a random alive member with preference to a member with older gossip version
// send full gossip because it has different view
// Fall back to localGossip; important to preserve the original order
/// <summary>
/// For large clusters we should avoid shooting down individual
/// nodes. Therefore the probability is reduced for large clusters
/// </summary>
// start reduction when cluster is larger than configured ReduceGossipDifferentViewProbability
// don't go lower than 1/10 of the configured GossipDifferentViewProbability
// linear reduction of the probability with increasing number of nodes
// from ReduceGossipDifferentViewProbability at ReduceGossipDifferentViewProbability nodes
// to ReduceGossipDifferentViewProbability / 10 at ReduceGossipDifferentViewProbability * 3 nodes
// i.e. default from 0.8 at 400 nodes, to 0.08 at 1600 nodes     
/// <summary>
/// Runs periodic leader actions, such as member status transitions, assigning partitions etc.
/// </summary>
// only run the leader actions if we are the LEADER
/// Leader actions are as follows:
/// 1. Move JOINING     => UP                   -- When a node joins the cluster
/// 2. Move LEAVING     => EXITING              -- When all partition handoff has completed
/// 3. Non-exiting remain                       -- When all partition handoff has completed
/// 4. Move unreachable EXITING => REMOVED      -- When all nodes have seen the EXITING node as unreachable (convergence) -
///                                                 remove the node from the node ring and seen table
/// 5. Move unreachable DOWN/EXITING => REMOVED -- When all nodes have seen that the node is DOWN/EXITING (convergence) -
///                                                 remove the node from the node ring and seen table
/// 7. Updating the vclock version for the changes
/// 8. Updating the `seen` table
/// 9. Update the state with the new gossip
//TODO (from JVM Akka) implement partion handoff and a check if it is completed - now just returns TRUE - e.g. has completed successfully
// Move JOINING => UP (once all nodes have seen that this node is JOINING, i.e. we have a convergence)
// and minimum number of nodes have joined the cluster
// It is alright to use same upNumber as already used by a removed member, since the upNumber
// is only used for comparing age of current cluster members (Member.isOlderThan)
// Move LEAVING => EXITING (once we have a convergence on LEAVING
// *and* if we have a successful partition handoff)
// handle changes
// replace changed members
// removing REMOVED nodes from the `seen` table
// removing REMOVED nodes from the `reachability` table
// log status changes
//log the removal of unreachable nodes
// Leader is moving itself from Leaving to Exiting. Let others know (best effort)
// before shutdown. Otherwise they will not see the Exiting state change
// and there will not be convergence until they have detected this node as
// unreachable and the required downing has finished. They will still need to detect
// unreachable, but Exiting unreachable will be removed without downing, i.e.
// normally the leaving of a leader will be graceful without the need
// for downing. However, if those final gossip messages never arrive it is
// alright to require the downing, because that is probably caused by a
// network failure anyway.
//TODO: Fire off a load of gossip messages in rapid succession?
// only scrutinize if we are a non-singleton cluster
//needed for tests
//Gossips latest gossip to a node.
// Updating the vclock version for the changes
// Nobody else have seen this gossip but us
// Update the state with the new gossip
/// <summary>
/// INTERNAL API
/// 
/// Sends <see cref="InternalClusterAction.InitJoin"/> to all seed nodes (except itself) and expect
/// <see cref="InternalClusterAction.InitJoinAck"/> reply back. The seed node that replied first
/// will be used and joined to. <see cref="InternalClusterAction.InitJoinAck"/> replies received after
/// the first one are ignored.
/// 
/// Retries if no <see cref="InternalClusterAction.InitJoinAck"/> replies are received within the 
/// <see cref="ClusterSettings.SeedNodeTimeout"/>. When at least one reply has been received it stops itself after
/// an idle <see cref="ClusterSettings.SeedNodeTimeout"/>.
/// 
/// The seed nodes can be started in any order, but they will not be "active" until they have been
/// able to join another seed node (seed1.)
/// 
/// They will retry the join procedure.
/// 
/// Possible scenarios:
///  1. seed2 started, but doesn't get any ack from seed1 or seed3
///  2. seed3 started, doesn't get any ack from seed1 or seed3 (seed2 doesn't reply)
///  3. seed1 is started and joins itself
///  4. seed2 retries the join procedure and gets an ack from seed1, and then joins to seed1
///  5. seed3 retries the join procedure and gets acks from seed2 first, and then joins to seed2
/// </summary>
//send InitJoin to all seed nodes (except myself)
//first InitJoinAck reply
//that seed was uninitialized
//no InitJoinAck received - try again
//already received one, skip the rest
/// <summary>
/// INTERNAL API
/// 
/// Used only for the first seed node.
/// Sends <see cref="InternalClusterAction.InitJoin"/> to all seed nodes except itself.
/// If other seed nodes are not part of the cluster yet they will reply with 
/// <see cref="InternalClusterAction.InitJoinNack"/> or not respond at all and then the
/// first seed node will join itself to initialize the new cluster. When the first seed 
/// node is restarted, and some other seed node is part of the cluster it will reply with
/// <see cref="InternalClusterAction.InitJoinAck"/> and then the first seed node will
/// join that other seed node to join the existing cluster.
/// </summary>
// send InitJoin to remaining seed nodes (except myself)
// no InitJoinAck received, initialize new cluster by joining myself
// first InitJoinAck reply, join existing cluster
// initialize new cluster by joining myself when nacks from all other seed nodes
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// INTERNAL API
/// 
/// The supplied callback will be run once when the current cluster member is <see cref="MemberStatus.Up"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\ClusterEvent.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterEvent.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Domain events published to the event bus.
/// Subscribe with:
/// {{{
/// Cluster(system).subscribe(actorRef, classOf[ClusterDomainEvent])
/// }}}
/// </summary>
//TODO: Sort out xml doc references
/// <summary>
/// When using this subscription mode a snapshot of
/// <see cref="CurrentClusterState"/> will be sent to the
/// subscriber as the first message.
/// </summary>
/// <summary>
/// When using this subscription mode the events corresponding
/// to the current state will be sent to the subscriber to mimic what you would
/// have seen if you were listening to the events when they occurred in the past.
/// </summary>
/// <summary>
/// Marker interface for cluster domain events
/// </summary>
/// <summary>
/// Get current member list
/// </summary>
/// <summary>
/// Get current unreachable set
/// </summary>
/// <summary>
/// Get current "seen-by" set
/// </summary>
/// <summary>
/// Get address of current leader, or null if noe
/// </summary>
//TODO: Cache ToImmutableHashSet?
/// <summary>
/// All node roles in the cluster
/// </summary>
/// <summary>
/// Needed internally inside the <see cref="ClusterReadView"/>
/// </summary>
/// <summary>
/// Get address of current leader, if any, within the role set
/// </summary>
/// <summary>
/// Creates a deep copy of the <see cref="CurrentClusterState"/> and optionally allows you
/// to specify different values for the outgoing objects
/// </summary>
/// <summary>
/// Marker interface for membership events.
/// Published when the state change is first seen on a node.
/// The state change was performed by the leader when there was
/// convergence on the leader node, i.e. all members had seen previous
/// state.
/// </summary>
/// <summary>
/// Member status changed to Up.
/// </summary>
//TODO: Sort out xml doc references
/// <summary>
/// Member status changed to <see cref="Akka.Cluster.MemberStatus.Exiting"/> and will be removed
/// when all members have seen the `Exiting` status.
/// </summary>
/// <summary>
/// Member completely removed from the cluster.
/// When `previousStatus` is `MemberStatus.Down` the node was removed
/// after being detected as unreachable and downed.
/// When `previousStatus` is `MemberStatus.Exiting` the node was removed
/// after graceful leaving and exiting.
/// </summary>
//TODO: Akka exception?
/// <summary>
/// Leader of the cluster members changed. Published when the state change
/// is first seen on a node.
/// </summary>
/// <summary>
/// Address of current leader, or null if none
/// </summary>
/// <summary>
/// First member (leader) of the members within a role set changed.
/// Published when the state change is first seen on a node.
/// </summary>
//TODO: While I'm here Address needs to be immutable
/// <summary>
/// Address of current leader, or null if none
/// </summary>
//TODO: Messy
/// <summary>
/// A marker interface to facilitate the subscription of
/// both <see cref="Akka.Cluster.ClusterEvent.UnreachableMember"/> and <see cref="Akka.Cluster.ClusterEvent.ReachableMember"/>.
/// </summary>
/// <summary>
/// A member is considered as unreachable by the failure detector.
/// </summary>
//TODO: xml doc
/// <summary>
/// A member is considered as reachable by the failure detector
/// after having been unreachable.
/// <see cref="Akka.Cluster.ClusterEvent.UnreachableMember"/>
/// </summary>
/// <summary>
/// Current snapshot of cluster node metrics. Published to subscribers.
/// </summary>
/// <summary>
/// The nodes that have seen current version of the Gossip.
/// </summary>
//TODO: Override GetHashCode? What to do about collection?
//TODO: IRequiresMessageQueue? 
// don't postStop when restarted, no children to stop
// publish the final removed state before shutting down
/// <summary>
/// The current snapshot state corresponding to latest gossip 
/// to mimic what you would have seen if you were listening to the events.
/// </summary>
//TODO: IsAssignableFrom same as in scala?
// publish internal SeenState for testing purposes
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\ClusterHeartbeat.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterHeartbeat.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// 
/// Receives <see cref="ClusterHeartbeatSender.Heartbeat"/> messages and replies.
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
//start periodic heartbeat to other nodes in cluster
//do nothing
//we don't care about other member events
/// <summary>
/// Looks up and returns the remote cluster heartbeat connection for the specific address.
/// </summary>
// This cluster node will be shutdown, but stop this actor immediately
// to avoid further updates
// schedule the expected first heartbeat for later, which will give the
// other side a chance to reply, and also trigger some resends if needed
/// <summary>
/// Sent at regular intervals for failure detection
/// </summary>
//there might very well be multiple heartbeats from the same address. overriding GetHashCode may have uninteded side effects
/// <summary>
/// Sends replies to <see cref="Heartbeat"/> messages
/// </summary>
//there might very well be multiple heartbeats from the same address. overriding GetHashCode may have uninteded side effects
/// <summary>
/// Sent to self only
/// </summary>
/// <summary>
/// INTERNAL API
/// State of <see cref="ClusterHeartbeatSender"/>. Encapsulated to facilitate unit testing.
/// It is immutable, but it updates the failure detector.
/// </summary>
//back from unreachable, ok to stop heartbeating to it
/// <summary>
/// INTERNAL API
/// 
/// Data structure for picking heartbeat receivers. The node ring is shuffled
/// by deterministic hashing to avoid picking physically co-located neighbors.
/// 
/// It is immutable, i.e. the methods all return new instances.
/// </summary>
/// <summary>
/// Receivers for <see cref="SelfAddress"/>. Cached for subsequent access.
/// </summary>
//grab members furthest from this peer
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\ClusterMetricsCollector.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterMetricsCollector.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// 
/// Cluster metrics is primarily for load-balancing of nodes. It controls metrics sampling
/// at a regular frequency, prepares highly variable data for further analysis by other entities,
/// and publishes the latest cluster metrics data around the node ring and local eventStream
/// to assist in determining the need to redirect traffic to the least-loaded nodes.
///
/// Metrics sampling is delegated to the <see cref="IMetricsCollector"/>.
///
/// Smoothing of the data for each monitored process is delegated to the
/// <see cref="EWMA"/> for exponential weighted moving average.
/// </summary>
/// <summary>
/// The node ring gossiped that contains only members that are <see cref="MemberStatus.Up"/>
/// </summary>
/// <summary>
/// The metrics collector that samples data on the node.
/// </summary>
/// <summary>
/// The latest metric values with their statistical data
/// </summary>
/// <summary>
/// Start periodic gossip to random nodes in the cluster
/// </summary>
/// <summary>
/// Start periodic metrics collection
/// </summary>
//not interested in other types of member event
/// <summary>
/// Adds a member to the node ring.
/// </summary>
/// <summary>
/// Removes a member from the node ring.
/// </summary>
/// <summary>
/// Update the initial node ring for those nodes that are <see cref="MemberStatus.Up"/>
/// </summary>
/// <summary>
/// Samples the latest metrics for the node, updates metrics statistics in <see cref="MetricsGossip"/>, and
/// publishes the changes to the event bus.
/// </summary>
/// <summary>
/// Receives changes from peer nodes, merges remote with local gossip nodes, then publishes
/// changes to the event stream for load balancing router consumption, and gossip back.
/// </summary>
// remote node might not have same view of member nodes, this side should only care
// about nodes that are known here, otherwise removed nodes can come back
// changes will be published in the period collect task
/* GOSSIP TO PEERS */
/// <summary>
/// Publishes to the event stream.
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// Remove nodes if their correlating node ring members are not <see cref="MemberStatus.Up"/>
/// </summary>
/// <summary>
/// Only the nodes that are in the <paramref name="includeNodes"/> set.
/// </summary>
/// <summary>
/// Adds new remote <see cref="NodeMetrics"/> and merges existing from a remote gossip.
/// </summary>
/// <summary>
/// Returns <see cref="NodeMetrics"/> for a node if exists.
/// </summary>
/// <summary>
/// Adds new local <see cref="NodeMetrics"/> or merges an existing one.
/// </summary>
/// <summary>
/// INTERNAL API
/// Envelope adding a sender address to the gossip.
/// </summary>
/// <summary>
/// The snapshot of current sampled health metrics for any monitored process.
/// Collected and gossiped at regular intervals for dynamic cluster management strategies.
/// 
/// Equality of <see cref="NodeMetrics"/> is based on its <see cref="Address"/>.
/// </summary>
/// <summary>
/// DateTime.Ticks
/// </summary>
/// <summary>
/// Return the metric that matches <paramref name="key"/>. Returns null if not found.
/// </summary>
/// <summary>
/// Returns the most recent data
/// </summary>
//that is older
/// <summary>
/// Metrics key/value
/// 
/// Equality of metric based on its name
/// </summary>
/// <summary>
/// Can be null
/// </summary>
/// <summary>
/// The numerical value of the average, if defined, otherwise the latest value
/// </summary>
/// <summary>
/// Returns true if the value is smoothed
/// </summary>
/// <summary>
/// Creates a new <see cref="Metric"/> instance if <paramref name="value"/> is valid, otherwise
/// returns null. Invalid numeric values are negative and NaN/Infinite.
/// </summary>
// ReSharper disable once InconsistentNaming
/// <summary>
/// INTERNAL API
/// 
/// Encapsulates evaluation of validity of metric values, conversion of an actual metric value to
/// an <see cref="Metric"/> for consumption by subscribed cluster entities.
/// </summary>
/// <summary>
/// A defined value is greater than zero and not NaN / Infinity
/// </summary>
/// <summary>
/// Here in .NET-istan, we're going to use <see cref="double"/> for all metrics since we
/// don't have convenient base classes for denoting general numeric types like Scala.
/// 
/// If a specific metrics method needs an integral data type, it should convert down from double.
/// </summary>
/// <summary>
/// The exponentially weighted moving average (EWMA) approach captures short-term
/// movements in volatility for a conditional volatility forecasting model. By virtue
/// of its alpha, or decay factor, this provides a statistical streaming data model
/// that is exponentially biased towards newer entries.
///
/// http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
///
/// An EWMA only needs the most recent forecast value to be kept, as opposed to a standard
/// moving average model.
///
/// INTERNAL API
///
/// @param alpha decay factor, sets how quickly the exponential weighting decays for past data compared to new data,
///   see http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
///
/// @param value the current exponentially weighted moving average, e.g. Y(n - 1), or,
///             the sampled value resulting from the previous smoothing iteration.
///             This value is always used as the previous EWMA to calculate the new EWMA.
///
/// </summary>
// ReSharper disable once InconsistentNaming
/// <summary>
/// Math.Log(2)
/// </summary>
///<summary>
/// Calculate the alpha (decay factor) used in <see cref="EWMA"/>
/// from specified half-life and interval between observations.
/// Half-life is the interval over which the weights decrease by a factor of two.
/// The relevance of each data sample is halved for every passing half-life duration,
/// i.e. after 4 times the half-life, a data sample's relevance is reduced to 6% of
/// its original relevance. The initial relevance of a data sample is given by
/// 1 – 0.5 ^ (collect-interval / half-life).
///</summary>
/// <summary>
/// Definitions of the built-in standard metrics
/// 
/// The following extractors and data structures make it easy to consume the
/// <see cref="NodeMetrics"/> in for example load balancers.
/// </summary>
// Constants for memory-related Metric names (accounting for differences between JVM and .NET)
//memory for the individual .NET process running Akka.NET
//Constants for cpu-related Metric names
/**
/// <summary>
/// Given a <see cref="NodeMetrics"/> it returns the <see cref="Cpu"/> data of the nodeMetrics
/// contains the necessary cpu metrics.
/// </summary>
/// <summary>
/// Implementations of cluster system metrics implement this interface
/// </summary>
/// <summary>
/// Sample and collects new data points.
/// This method is invoked periodically and should return
/// current metrics for this node.
/// </summary>
/// <summary>
/// Loads Windows system metrics through Windows Performance Counters
/// </summary>
/// <summary>
/// This constructor is used when creating an instance from configured fully-qualified name
/// </summary>
// Mono doesn't support Microsoft.VisualBasic, so need an alternative way of sampling this value
// see http://stackoverflow.com/questions/105031/how-do-you-get-total-amount-of-ram-the-computer-has
/// <summary>
/// Samples and collects new data points.
/// Create a new instance each time.
/// </summary>
/// <summary>
/// Returns the number of available processors. Creates a new instance each time.
/// </summary>
/// <summary>
/// Returns the system load average. Creates a new instance each time.
/// </summary>
/// <summary>
/// Gets the amount of memory used by this particular CLR process. Creates a new instance each time.
/// </summary>
/// <summary>
/// Gets the amount of system memory available. Creates a new instance each time.
/// </summary>
/// <summary>
/// Gets the total amount of system memory. Creates a new instance each time.
/// </summary>
/// <summary>
/// INTERNAL API
/// Factory to create a configured <see cref="IMetricsCollector"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\ClusterReadView.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterReadView.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// 
/// Read view of the cluster's state, updated via subscription of
/// cluster events published on the <see cref="EventBus{TEvent,TClassifier,TSubscriber}"/>.
/// </summary>
/// <summary>
/// Current state
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// Current internal cluster stats, updated periodically via event bus.
/// </summary>
/// <summary>
/// Current cluster metrics, updated periodically via event bus.
/// </summary>
/// <summary>
/// actor that subscribers to cluster eventBus to update current read view state
/// </summary>
// replace current member with new member (might have different status, only address is used in == comparison)
// replace current member with new member (might have different status, only address is used in == comparison)
//subscribe to all cluster domain events
//unsubscribe from all cluster domain events
/// <summary>
/// Returns true if this cluster instance has been shutdown.
/// </summary>
/// <summary>
/// Current cluster members, sorted by address
/// </summary>
/// <summary>
/// Members that have been detected as unreachable
/// </summary>
/// <summary>
/// <see cref="MemberStatus"/> for this node.
/// 
/// NOTE: If the node has been removed from the cluster (and shut down) then it's status is set to the 'REMOVED' tombstone state
/// and is no longer present in the node ring or any other part of the gossiping state. However in order to maintain the
/// model and the semantics the user would expect, this method will in this situation return <see cref="MemberStatus.Removed"/>.
/// </summary>
/// <summary>
/// Get the address of the current leader.
/// </summary>
/// <summary>
/// Is this node the leader?
/// </summary>
/// <summary>
/// Does the cluster consist of only one member?
/// </summary>
/// <summary>
/// Returns true if the node is no reachable and not <see cref="MemberStatus.Down"/>
/// and not <see cref="MemberStatus.Removed"/>
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// INTERNAL API
/// The nodes that have seen current version of the <see cref="Gossip"/>
/// </summary>
//shutdown
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\ClusterRemoteWatcher.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterRemoteWatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Specialization of <see cref="Akka.Remote.RemoteWatcher"/> that keeps
/// track of cluster member nodes and is responsible for watchees on cluster nodes.
/// <see cref="Akka.Actor.AddressTerminated"/> is published when a node is removed from cluster
/// 
/// `RemoteWatcher` handles non-cluster nodes. `ClusterRemoteWatcher` will take
/// over responsibility from `RemoteWatcher` if a watch is added before a node is member
/// of the cluster and then later becomes cluster member.
/// </summary>
/// <summary>
/// Factory method for <see cref="Akka.Remote.RemoteWatcher"/>
/// </summary>
// cluster managed node, don't propagate to super;
// not interesting
/// <summary>
/// When a cluster node is added this class takes over the
/// responsibility for watchees on that node already handled
/// by base RemoteWatcher.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\ClusterSettings.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSettings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: Requiring!
//TODO:
//_minNrOfMembersOfRole = cc.GetConfig("role").Root.GetArray().ToImmutableDictionary(o => o. )
//TODO: Ignored jmx
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\Gossip.cs
//-----------------------------------------------------------------------
// <copyright file="Gossip.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Represents the state of the cluster; cluster ring membership, ring convergence -
/// all versioned by a vector clock.
///
/// When a node is joining the `Member`, with status `Joining`, is added to `members`.
/// If the joining node was downed it is moved from `overview.unreachable` (status `Down`)
/// to `members` (status `Joining`). It cannot rejoin if not first downed.
///
/// When convergence is reached the leader change status of `members` from `Joining`
/// to `Up`.
///
/// When failure detector consider a node as unavailable it will be moved from
/// `members` to `overview.unreachable`.
///
/// When a node is downed, either manually or automatically, its status is changed to `Down`.
/// It is also removed from `overview.seen` table. The node will reside as `Down` in the
/// `overview.unreachable` set until joining again and it will then go through the normal
/// joining procedure.
///
/// When a `Gossip` is received the version (vector clock) is used to determine if the
/// received `Gossip` is newer or older than the current local `Gossip`. The received `Gossip`
/// and local `Gossip` is merged in case of conflicting version, i.e. vector clocks without
/// same history.
///
/// When a node is told by the user to leave the cluster the leader will move it to `Leaving`
/// and then rebalance and repartition the cluster and start hand-off by migrating the actors
/// from the leaving node to the new partitions. Once this process is complete the leader will
/// move the node to the `Exiting` state and once a convergence is complete move the node to
/// `Removed` by removing it from the `members` set and sending a `Removed` command to the
/// removed node telling it to shut itself down.
/// </summary>
//TODO: Serializer should ignore
/// <summary>
/// Increments the version for this 'Node'.
/// </summary>
/// <summary>
/// Adds a member to the member node ring.
/// </summary>
/// <param name="member"></param>
/// <returns></returns>
/// <summary>
/// Marks the gossip as seen by this node (address) by updating the address entry in the 'gossip.overview.seen'
/// </summary>
/// <summary>
/// Marks the gossip as seen by only this node (address) by replacing the 'gossip.overview.seen'
/// </summary>
/// <summary>
/// The nodes that have seen the current version of the Gossip.
/// </summary>
/// <summary>
/// Has this Gossip been seen by this node.
/// </summary>
//TODO: Member ordering import?
// 1. merge vector clocks
// 2. merge members by selecting the single Member with highest MemberStatus out of the Member groups
// 3. merge reachability table by picking records with highest version
// 4. Nobody can have seen this new gossip yet
// First check that:
//   1. we don't have any members that are unreachable, or
//   2. all unreachable members in the set have status DOWN or EXITING
// Else we can't continue to check for convergence
// When that is done we check that all members with a convergence
// status is in the seen table and has the latest vector clock
// version
// placeholder for removed member
//TODO: Akka exception?
/// <summary>
/// Represents the overview of the cluster, holds the cluster convergence table and set with unreachable nodes.
/// </summary>
/// <summary>
/// Envelope adding a sender and receiver address to the gossip.
/// The reason for including the receiver address is to be able to
/// ignore messages that were intended for a previous incarnation of
/// the node with same host:port. The `uid` in the `UniqueAddress` is
/// different in that case.
/// </summary>
//TODO: Serialization?
//TODO: ser stuff?
/// <summary>
/// When there are no known changes to the node ring a `GossipStatus`
/// initiates a gossip chat between two members. If the receiver has a newer
/// version it replies with a `GossipEnvelope`. If receiver has older version
/// it replies with its `GossipStatus`. Same versions ends the chat immediately.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\Member.cs
//-----------------------------------------------------------------------
// <copyright file="Member.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: Keep an eye on concurrency / immutability
//TODO: Comments
/// <summary>
/// Represents the address, current status, and roles of a cluster member node.
/// 
/// Note: `hashCode` and `equals` are solely based on the underlying `Address`, not its `MemberStatus`
/// and roles.
/// </summary>
/// <summary>
/// TODO: explain what this does
/// </summary>
/// <summary>
/// Is this member older, has been part of cluster longer, than another
/// member. It is only correct when comparing two existing members in a
/// cluster. A member that joined after removal of another member may be
/// considered older than the removed member.
/// </summary>
//TODO: Akka exception?
/// <summary>
///  `Address` ordering type class, sorts addresses by host and port.
/// </summary>
/// <summary>
/// Orders the members by their address except that members with status
/// Joining, Exiting and Down are ordered last (in that order).
/// </summary>
/// <summary>
/// `Member` ordering type class, sorts members by host and port.
/// </summary>
// group all members by Address => Seq[Member]
/// <summary>
/// Picks the Member with the highest "priority" MemberStatus.
/// </summary>
//case (Up, Up)     ⇒ m1
/// <summary>
/// Defines the current status of a cluster member node
/// 
/// Can be one of: Joining, Up, Leaving, Exiting and Down.
/// </summary>
/// <summary>
/// Member identifier consisting of address and random `uid`.
/// The `uid` is needed to be able to distinguish different
/// incarnations of a member with same hostname and port.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\Reachability.cs
//-----------------------------------------------------------------------
// <copyright file="Reachability.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Immutable data structure that holds the reachability status of subject nodes as seen
/// from observer nodes. Failure detector for the subject nodes exist on the
/// observer nodes. Changes (reachable, unreachable, terminated) are only performed
/// by observer nodes to its own records. Each change bumps the version number of the
/// record, and thereby it is always possible to determine which record is newest 
/// merging two instances.
///
/// Aggregated status of a subject node is defined as (in this order):
/// - Terminated if any observer node considers it as Terminated
/// - Unreachable if any observer node considers it as Unreachable
/// - Reachable otherwise, i.e. no observer node considers it as Unreachable
/// </summary>
//TODO: ISerializable?
//TODO: Other collections take items for Create. Create unnecessary array here
//TODO: Serialization should ignore
//TODO: Size hint somehow?
/*
/// <summary>
/// Doesn't include terminated
/// </summary>
//TODO: ", " is wrong
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\Util.cs
//-----------------------------------------------------------------------
// <copyright file="Util.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: Tests
//TODO: Test
//TODO:
//source.ThrowIfNull("source");
//selector.ThrowIfNull("selector");
//comparer.ThrowIfNull("comparer");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\VectorClock.cs
//-----------------------------------------------------------------------
// <copyright file="VectorClock.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Representation of a Vector-based clock (counting clock), inspired by Lamport logical clocks.
/// 
/// {{{
/// Reference:
///     1) Leslie Lamport (1978). "Time, clocks, and the ordering of events in a distributed system". Communications of the ACM 21 (7): 558-565.
///    2) Friedemann Mattern (1988). "Virtual Time and Global States of Distributed Systems". Workshop on Parallel and Distributed Algorithms: pp. 215-226
/// }}}
/// 
/// Based on code from the 'vlock' VectorClock library by Coda Hale.
/// </summary>
/**
//TODO: Node is alias for string in akka. Alternatives to below implementation?
//Do we really need to hash? Why not just use string and get rid of Node class
//TODO: Ideally this would be private, change to override of compare?
/// <summary>
/// Increment the version for the node passed as argument. Returns a new VectorClock.
/// </summary>
/// <summary>
/// Returns true if <code>this</code> and <code>that</code> are concurrent else false.
/// </summary>
/// <summary>
/// Returns true if <code>this</code> is before <code>that</code> else false.
/// </summary>
/// <summary>
/// Returns true if <code>this</code> is after <code>that</code> else false.
/// </summary>
/// <summary>
/// Returns true if this VectorClock has the same history as the 'that' VectorClock else false.
/// </summary>
/**
//TODO: Tail recursion issues?
// i1 is empty but i2 is not, so i1 can only be Before
// i2 is empty but i1 is not, so i1 can only be After
// compare the nodes
// both nodes exist compare the timestamps
// same timestamp so just continue with the next nodes   
// t1 is less than t2, so i1 can only be Before
// this node only exists in i1 so i1 can only be After
// this node only exists in i2 so i1 can only be Before
/**
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\Configuration\ClusterConfigFactory.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterConfigFactory.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains methods used to retrieve cluster configuration options from this assembly's resources.
///
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Retrieves the default cluster options that Akka.NET uses when no configuration has been defined.
/// </summary>
/// <returns>The configuration that contains default values for all cluster options.</returns>
/// <summary>
/// Retrieves a configuration defined in a resource of the current executing assembly.
/// </summary>
/// <param name="resourceName">The name of the resource that contains the configuration.</param>
/// <returns>The configuration defined in the current executing assembly.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\Proto\ClusterMessageSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterMessageSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Protobuff serializer for cluster messages
/// </summary>
//must be lazy because serializer is initialized from Cluster extension constructor
/// <summary>
/// Compresses the protobuf message using GZIP compression
/// </summary>
/// <summary>
/// Decompresses the protobuf message using GZIP compression
/// </summary>
// we don't care about races here since it's just a cache
// ReSharper disable once InconsistentNaming
// ReSharper disable once InconsistentNaming
// we set all metric types as doubles, since we don't have a convenient Number base class like Scala
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\Proto\Msg\ClusterMessages.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterMessages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster\Routing\ClusterRoutingConfig.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterRoutingConfig.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <see cref="ClusterRouterSettingsBase.TotalInstances"/> of cluster router must be > 0
/// </summary>
//validate that all routeesPaths are relative
/// <summary>
/// <see cref="ClusterRouterSettingsBase.TotalInstances"/> of cluster router must be > 0
/// <see cref="MaxInstancesPerNode"/> of cluster router must be > 0
/// <see cref="MaxInstancesPerNode"/> of cluster router must be 1 when routeesPath is defined
/// </summary>
/// <summary>
/// Base class for defining <see cref="ClusterRouterGroupSettings"/> and <see cref="ClusterRouterPoolSettings"/>
/// </summary>
/// <summary>
/// <see cref="RouterConfig"/> implementation for deployment on cluster nodes.
/// Delegates other duties to the local <see cref="RouterConfig"/>, which makes it
/// possible to mix this with built-in routers such as <see cref="RoundRobinGroup"/> or
/// custom routers.
/// </summary>
/// <summary>
/// <see cref="RouterConfig"/> implementation for deployment on cluster nodes.
/// Delegates other duties to the local <see cref="RouterConfig"/>, which makes it
/// possible to mix this with built-in routers such as <see cref="RoundRobinGroup"/> or
/// custom routers.
/// </summary>
/// <summary>
/// INTERNAL API
/// 
/// Have to implement this as an interface rather than a base class, so we can continue to inherit from <see cref="Group"/> and <see cref="Pool"/>
/// on the concrete cluster router implementations.
/// </summary>
/// <summary>
/// INTERNAL API
/// The router actor, subscribes to cluster events and
/// adjusts the routees.
/// </summary>
//use my own node, cluster information not updated yet
/// <summary>
/// Fills in self address for local <see cref="IActorRef"/>
/// </summary>
//local address
/// <summary>
/// Adds routees based on settings
/// </summary>
// unregister routees that live on that node
// addRoutees will not create more than createRoutees and maxInstancesPerNode
// this is useful when totalInstances < upNodes.size
// other events means that it is no onger interesting, such as
// MemberExited, MemberRemoved
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// Adds routees based on totalInstances and maxInstancesPerNode settings
/// </summary>
//must register each one, since registered routees are used in SelectDeploymentTarget
//find the node with the least routees
//we found at least 1 totally unused node
//find the node with the fewest routees
// pick next of unused paths
/// <summary>
/// INTERNAL API
/// </summary>
//must register each one, since registered routees are used in SelectDeploymentTarget
//find the node with the least routees
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\AutoDownSpec.cs
//-----------------------------------------------------------------------
// <copyright file="AutoDownSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\ClusterConfigSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterConfigSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO:
//Assert.AreEqual(ImmutableDictionary.Create<string, int>(), settings.);
//TODO:
//Assert.AreEqual(typeof(SigarMetricsCollector).FullName, settings.MetricsCollectorClass);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\ClusterDeployerSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterDeployerSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//todo: implement "have correct router mappings" test for adaptive load-balancing routers (not yet implemented)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\ClusterDomainEventPublisherSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterDomainEventPublisherSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// turn off scheduled tasks
//TODO: If parent told of exception then test should fail (if not expected in some way)?
// at the removed member a an empty gossip is the last thing
//TODO: Null leader stuff is messy. Better approach?
// but only to the new subscriber
// but only to the new subscriber
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\ClusterDomainEventSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterDomainEventSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\ClusterHeartBeatSenderStateSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterHeartBeatSenderStateSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Fake <see cref="FailureDetector"/> implementation used for testing cluster-wide failure detection.
/// </summary>
// they are sorted by the hash (UID) of the UniqueAddress
//keep unreachable
// keep unreachable, unless it was the removed
//make sure the FD is created
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\ClusterSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// turn off scheduled tasks
// Joining -> Up
// Joining -> Up
// this should be the last test step, since the cluster is shutdown
// Joining -> Up
// first, is in response to the subscription
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\ClusterSpecBase.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterSpecBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Abstract base class for cluster specs - turns on required serialization properties
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\EWMASpec.cs
//-----------------------------------------------------------------------
// <copyright file="EWMASpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// according to http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
// alpha = 2.0 / (1 + N)
// wait a while between each message to give the metrics a chance to change
/// <summary>
/// Needs to hide previous Dispose implementation in order to avoid recursive disposal.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\GossipSpec.cs
//-----------------------------------------------------------------------
// <copyright file="GossipSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// c3 removed
// a2 and e1 is Joining
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\HeartbeatNodeRingSpec.cs
//-----------------------------------------------------------------------
// <copyright file="HeartbeatNodeRingSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\MemberOrderingSpec.cs
//-----------------------------------------------------------------------
// <copyright file="MemberOrderingSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//sys@darkstar:1112"), MemberStatus.Up),
//sys@darkstar:1113"), MemberStatus.Joining),
//sys@darkstar:1111"), MemberStatus.Up),
//sys@darkstar:1111"), MemberStatus.Up),
//sys@darkstar:1112"), MemberStatus.Up),
//sys@darkstar:1113"), MemberStatus.Joining),
//different uid
//sys@darkstar:1112"),
//sys@darkstar:1113"),
//sys@darkstar:1110"),
//sys@darkstar:1111")
//sys@darkstar:1110"), seq[0]);
//sys@darkstar:1111"), seq[1]);
//sys@darkstar:1112"), seq[2]);
//sys@darkstar:1113"), seq[3]);
//sys@darkstar2:1110"),
//sys@darkstar1:1110"),
//sys@darkstar3:1110"),
//sys@darkstar0:1110")
//sys@darkstar0:1110"), seq[0]);
//sys@darkstar1:1110"), seq[1]);
//sys@darkstar2:1110"), seq[2]);
//sys@darkstar3:1110"), seq[3]);
//sys@darkstar2:1110"),
//sys@darkstar0:1111"),
//sys@darkstar2:1111"),
//sys@darkstar0:1110")
//sys@darkstar0:1110"), seq[0]);
//sys@darkstar0:1111"), seq[1]);
//sys@darkstar2:1110"), seq[2]);
//sys@darkstar2:1111"), seq[3]);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\MetricsCollectorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="MetricsCollectorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Needs to hide previous Dispose implementation in order to avoid recursive disposal.
/// </summary>
/// <summary>
/// Used when testing metrics without full Cluster
/// </summary>
//TODO: if we inherit from ClusterSpecBase, tests never run - must be a config chaining problem
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\MetricsGossipSpec.cs
//-----------------------------------------------------------------------
// <copyright file="MetricsGossipSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//merge peers
//should contain nodes 1,3 and the most recent version of 2
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\MetricValuesSpec.cs
//-----------------------------------------------------------------------
// <copyright file="MetricValuesSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\NodeMetricsSpec.cs
//-----------------------------------------------------------------------
// <copyright file="NodeMetricsSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//older and not the same
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\ReachabilitySpec.cs
//-----------------------------------------------------------------------
// <copyright file="ReachabilitySpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// allUnreachable doesn't include terminated
// nodeD not in allowed set
//nodeB pruned
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\SerializationChecksSpec.cs
//-----------------------------------------------------------------------
// <copyright file="SerializationChecksSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\TestMember.cs
//-----------------------------------------------------------------------
// <copyright file="TestMember.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\VectorClockSpec.cs
//-----------------------------------------------------------------------
// <copyright file="VectorClockSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\Proto\ClusterMessageSerializerSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterMessageSerializerSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\Routing\ClusterRouterAsk1343BugFixSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterRouterAsk1343BugFixSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Spec to get to the bottom of https://github.com/akkadotnet/akka.net/issues/1343
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests\Routing\ClusterRouterSupervisorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterRouterSupervisorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterDeathWatchSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//AnActorWatchingARemoteActorInTheClusterMustReceiveTerminatedWhenWatchedPathDoesNotExist();
//removed
//removed
/* 
//public void AnActorWatchingARemoteActorInTheClusterMustReceiveTerminatedWhenWatchedPathDoesNotExist()
//{
//    Thread.Sleep(5000);
//    RunOn(() =>
//    {
//        var path2 = new RootActorPath(GetAddress(_config.Second)) / "user" / "non-existing";
//        Sys.ActorOf(Props.Create(() => new DumbObserver(path2, TestActor)).WithDeploy(Deploy.Local), "observer3");
//        ExpectMsg(path2);
//    }, _config.First);
//    EnterBarrier("after-2");
//}
//fifth is not a cluster member, so the watch is handled by the RemoteWatcher
// second and third are already removed
// fifth is member, so the watch is handled by the ClusterRemoteWatcher,
// and cleaned up from RemoteWatcher
// removed
// fourth actor system will be shutdown, not part of testConductor any more
// so we can't use barriers to synchronize with it
// removed
// signal to the first node that the fourth node is done
// no barrier here, because it is not part of TestConductor roles any more
// don't end the test until fourth is done
// fourth system will be shutdown, remove to not participate in barriers any more
/// <summary>
/// Used to report <see cref="Terminated"/> events to the <see cref="TestActor"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\ConvergenceSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ConvergenceSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: This better
/*doesn't join immediately*/}, _config.Fourth);
//kill 'third' node
//third becomes unreachable
// still one unreachable
// wait and then check again
//TODO: Dilation?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\FailureDetectorPuppet.cs
//-----------------------------------------------------------------------
// <copyright file="FailureDetectorPuppet.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// User controllable "puppet" failure detector.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\InitialHeartbeatSpec.cs
//-----------------------------------------------------------------------
// <copyright file="InitialHeartbeatSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//[MultiNodeFact] //currently bugged, due to issues with TestKit
//TODO: Seem to be able to pass barriers once other node fails?
// It is likely that second has not started heartbeating to first yet,
// and when it does the messages doesn't go through and the first extra heartbeat is triggered.
// If the first heartbeat arrives, it will detect the failure anyway but not really exercise the
// part that we are trying to test here.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinInProgressSpec.cs
//-----------------------------------------------------------------------
// <copyright file="JoinInProgressSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinSeedNodeSpec.cs
//-----------------------------------------------------------------------
// <copyright file="JoinSeedNodeSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// test that first seed doesn't have to be started first
//verify that we can call this multiple times with no issue                    
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\LeaderLeavingSpec.cs
//-----------------------------------------------------------------------
// <copyright file="LeaderLeavingSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// verify that the LEADER is shut down
// verify that the LEADER is EXITING
// verify that the LEADER is no longer part of the 'members' set
// verify that the LEADER is not part of the 'unreachable' set
// verify that we have a new LEADER
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\MultiNodeClusterSpec.cs
//-----------------------------------------------------------------------
// <copyright file="MultiNodeClusterSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: WatchedByCoroner?
//@Aaronontheweb: Coroner is a JVM-specific instrument used to report deadlocks and other fun stuff.
//can probably skip for now.
// sometimes we need to coordinate test shutdown with messages instead of barriers
//TODO: ExpectedTestDuration?
/// <summary>
/// Get the cluster node to use.
/// </summary>
/// <summary>
/// Use this method for the initial startup of the cluster node
/// </summary>
/// <summary>
/// Initialize the cluster of the specified member nodes (<see cref="roles"/>)
/// and wait until all joined and <see cref="MemberStatus.Up"/>.
/// 
/// First node will be started first and others will join the first.
/// </summary>
// make sure that the node-to-join is started before other join
/// <summary>
/// Assert that the
/// member addresses match the expected addresses in the
/// sort order used by the cluster.
/// </summary>
/// <summary>
/// Note that this can only be used for a cluster with all members
/// in Up status, i.e. use `awaitMembersUp` before using this method.
/// The reason for that is that the cluster leader is preferably a
/// member with status Up or Leaving and that information can't
/// be determined from the `RoleName`.
/// </summary>
/// <summary>
/// Assert that the cluster has elected the correct leader
/// out of all nodes in the cluster. First
/// member in the cluster ring is expected leader.
///   
/// Note that this can only be used for a cluster with all members
/// in Up status, i.e. use `awaitMembersUp` before using this method.
/// The reason for that is that the cluster leader is preferably a
/// member with status Up or Leaving and that information can't
/// be determined from the `RoleName`.
/// </summary>
// don't run this on an empty set
// clusterView.leader is updated by LeaderChanged, await that to be updated also
/// <summary>
/// Leader according to the address ordering of the roles.
/// Note that this can only be used for a cluster with all members
/// in Up status, i.e. use `awaitMembersUp` before using this method.
/// The reason for that is that the cluster leader is preferably a
/// member with status Up or Leaving and that information can't
/// be determined from the `RoleName`.
/// </summary>
/// <summary>
/// Marks a node as available in the failure detector if
/// <see cref="FailureDetectorPuppet"/> is used as
/// failure detector
/// </summary>
/// <summary>
/// Marks a node as unavailable in the failure detector if
/// <see cref="FailureDetectorPuppet"/> is used as
/// failure detector
/// </summary>
// before marking it as unavailable there should be at least one heartbeat
// to create the FailureDetectorPuppet in the FailureDetectorRegistry
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\MultiNodeLoggingConfig.cs
//-----------------------------------------------------------------------
// <copyright file="MultiNodeLoggingConfig.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Static <see cref="Config"/> provider that allows toggleable logging
/// for <see cref="MultiNodeSpec"/> instances within the Akka.Cluster.Tests assembly
/// </summary>
// ReSharper disable once InconsistentNaming
/// <summary>
/// Used to specify which loggers to enable for the <see cref="MultiNodeClusterSpec"/> instances
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingGroupSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterConsistentHashingGroupSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Fills in the self address for local ActorRef
/// </summary>
//[MultiNodeFact(Skip = "Race conditions - needs debugging")]
// it may take some time until router receives cluster member events
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ClusterConsistentHashingRouterSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Fills in the self address for local ActorRef
/// </summary>
// it may take some time until router receives cluster member events
//[MultiNodeFact(Skip = "Race conditions - needs debugging")]
// it may take some time until router receives cluster member events
//it may take some time until router receives cluster member events
//it may take some time until router receives cluster member events
/// <summary>
/// An explicit check to ensure that our routers can adjust to unreachable member events as well
/// </summary>
//removed
// it may take some time until router receives cluster member events
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner\Discovery.cs
//-----------------------------------------------------------------------
// <copyright file="Discovery.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: Improve this
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Entry point for the MultiNodeTestRunner
/// </summary>
/// <summary>
/// MultiNodeTestRunner takes the following <see cref="args"/>:
/// 
/// C:\> Akka.MultiNodeTestRunner.exe [assembly name] [-Dmultinode.enable-filesink=on] [-Dmultinode.output-directory={dir path}]
/// 
/// <list type="number">
/// <listheader>
///     <term>Argument</term>
///     <description>The name and possible value of a given Akka.MultiNodeTestRunner.exe argument.</description>
/// </listheader>
/// <item>
///     <term>AssemblyName</term>
///     <description>
///         The full path or name of an assembly containing as least one MultiNodeSpec in the current working directory.
/// 
///         i.e. "Akka.Cluster.Tests.MultiNode.dll"
///              "C:\akka.net\src\Akka.Cluster.Tests\bin\Debug\Akka.Cluster.Tests.MultiNode.dll"
///     </description>
/// </item>
/// <item>
///     <term>-Dmultinode.enable-filesink</term>
///     <description>Having this flag set means that the contents of this test run will be saved in the
///                 current working directory as a .JSON file.
///     </description>
/// </item>
/// <item>
///     <term>-Dmultinode.multinode.output-directory</term>
///     <description>Setting this flag means that any persistent multi-node test runner output files
///                  will be written to this directory instead of the default, which is the same folder
///                  as the test binary.
///     </description>
/// </item>
/// </list>
/// </summary>
//Loop through each test, work out number of nodes to run on and kick off process
//ignore any trailing whitespace
//Block until all Sinks have been terminated.
//Return the proper exit code
// if multinode.output-directory wasn't specified, the results files will be written
// to the same directory as the test assembly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\ExitCodeContainer.cs
//-----------------------------------------------------------------------
// <copyright file="ExitCodeContainer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Global state for hanging onto the exit code used by the process.
/// 
/// The <see cref="SinkCoordinator"/> sets this value once during shutdown.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\NodeTest.cs
//-----------------------------------------------------------------------
// <copyright file="NodeTest.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Persistence\EnumerableExtensions.cs
// -----------------------------------------------------------------------
//  <copyright file="EnumerableExtensions.cs" company="Akka.NET Project">
//      Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
//  </copyright>
// -----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Persistence\FileNameGenerator.cs
// -----------------------------------------------------------------------
//  <copyright file="FileNameGenerator.cs" company="Akka.NET Project">
//      Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
//  </copyright>
// -----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Persistence\IPersistentTestRunStore.cs
//-----------------------------------------------------------------------
// <copyright file="IPersistentTestRunStore.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Persistent store for saving <see cref="TestRunTree"/> instances
/// from disk.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Persistence\IRetrievableTestRunStore.cs
// -----------------------------------------------------------------------
//  <copyright file="IRetrievableTestRunStore.cs" company="Akka.NET Project">
//      Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
//  </copyright>
// -----------------------------------------------------------------------
/// <summary>
/// Persistent store for retreiving <see cref="TestRunTree" /> instances
/// from disk.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Persistence\JsonPersistentTestRunStore.cs
//-----------------------------------------------------------------------
// <copyright file="JsonPersistentTestRunStore.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// JavaScript Object Notation (JSON) implementation of the <see cref="IRetrievableTestRunStore"/>
/// </summary>
//Internal version of the contract resolver
//important: if reuse, the serializer will overwrite properties in default references, e.g. Props.DefaultDeploy or Props.noArgs
//SerializeCompilerGeneratedMembers = true,
//IgnoreSerializableAttribute = true,
//IgnoreSerializableInterface = true,
// ReSharper disable once AssignNullToNotNullAttribute //already made this null check with Guard
// ReSharper disable once AssignNullToNotNullAttribute
// ReSharper disable once AssignNullToNotNullAttribute //already made this null check with Guard
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Persistence\TimelineItem.cs
// -----------------------------------------------------------------------	
//  <copyright file="TimelineItem.cs" company="Akka.NET Project">		
//      Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>		
//  </copyright>		
// -----------------------------------------------------------------------		
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Persistence\TimelineItemFactory.cs
// -----------------------------------------------------------------------	
//  <copyright file="TimelineItemFactory.cs" company="Akka.NET Project">		
//      Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>		
//  </copyright>		
// -----------------------------------------------------------------------	
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Persistence\VisualizerPersistentTestRunStore.cs
// -----------------------------------------------------------------------
//  <copyright file="VisualizerPersistentTestRunStore.cs" company="Akka.NET Project">
//      Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
//  </copyright>
// -----------------------------------------------------------------------
/// <summary>
/// Stores test run as a html page.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Persistence\VisualizerRuntimeTemplate.cs
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
/// <summary>
/// Class to produce the template output
/// </summary>
/// <summary>
/// Create the template output
/// </summary>
//cdnjs.cloudflare.com/ajax/libs/vis/4.8.1/" +
//cdnjs.cloudflare.com/ajax/libs/vis/4" +
//dv9be+9trCwAI/vIE/26gXmviW5bqnb8yUK028qZjPfoPWEj4Ku5HBspgAz941IXZ" +
/// <summary>
/// Base class for this transformation
/// </summary>
/// <summary>
/// The string builder that generation-time code is using to assemble generated output
/// </summary>
/// <summary>
/// The error collection for the generation process
/// </summary>
/// <summary>
/// A list of the lengths of each indent that was added with PushIndent
/// </summary>
/// <summary>
/// Gets the current indent we use when adding lines to the output
/// </summary>
/// <summary>
/// Current transformation session
/// </summary>
/// <summary>
/// Write text directly into the generated output
/// </summary>
// If we're starting off, or if the previous text ended with a newline,
// we have to append the current indent first.
// Check if the current text ends with a newline
// This is an optimization. If the current indent is "", then we don't have to do any
// of the more complex stuff further down.
// Everywhere there is a newline in the text, add an indent after it
// If the text ends with a newline, then we should strip off the indent added at the very end
// because the appropriate indent will be added when the next time Write() is called
/// <summary>
/// Write text directly into the generated output
/// </summary>
/// <summary>
/// Write formatted text directly into the generated output
/// </summary>
/// <summary>
/// Write formatted text directly into the generated output
/// </summary>
/// <summary>
/// Raise an error
/// </summary>
/// <summary>
/// Raise a warning
/// </summary>
/// <summary>
/// Increase the indent
/// </summary>
/// <summary>
/// Remove the last indent that was added with PushIndent
/// </summary>
/// <summary>
/// Remove any indentation
/// </summary>
/// <summary>
/// Utility class to produce culture-oriented representation of an object as a string.
/// </summary>
/// <summary>
/// Gets or sets format provider to be used by ToStringWithCulture method.
/// </summary>
/// <summary>
/// This is called from the compile/run appdomain to convert objects within an expression block to a string
/// </summary>
/// <summary>
/// Helper to produce culture-oriented representation of an object as a string
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Persistence\VisualizerRuntimeTemplate.Tree.cs
// -----------------------------------------------------------------------	
//  <copyright file="VisualizerRuntimeTemplate.Tree.cs" company="Akka.NET Project">
//      Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
//  </copyright>		
// -----------------------------------------------------------------------	
// TODO: Find a better way of calculating additional time from message length
// The last message is the 3 second wait. Which is about half the delta from start to end in length.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Reporting\MultiNodeMessage.cs
//-----------------------------------------------------------------------
// <copyright file="MultiNodeMessage.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Message from an individual node
/// </summary>
/// <summary>
/// The absolute time this message occurred represented as <see cref="DateTime.Ticks"/>
/// </summary>
/// <summary>
/// The contents of the log message.
/// </summary>
/// <summary>
/// The index of the node in question.
/// </summary>
/// <summary>
/// Message used to contain the PASS / FAIL results for a specific test
/// </summary>
/// <summary>
/// Flag to determine whether or not this <see cref="MultiNodeMessage.NodeIndex"/> passed its test or not.
/// </summary>
/// <summary>
/// Messages emitted directly by the test runner itself for an individual spec
/// </summary>
/// <summary>
/// The path of the actor on the remote node who generated this message.
/// 
/// CAN BE NULL.
/// </summary>
/// <summary>
/// The log level for this message.
/// </summary>
/// <summary>
/// Used in cases where a log message was broken up across multiple lines and this fragment has to be appended
/// to a previous message in the timeline
/// </summary>
/// <summary>
/// Message from a node containing log information
/// </summary>
/// <summary>
/// The path of the actor on the remote node who generated this message.
/// 
/// CAN BE NULL.
/// </summary>
/// <summary>
/// The log level for this message.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Reporting\NodeDataActor.cs
//-----------------------------------------------------------------------
// <copyright file="NodeDataActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Actor responsible for processing test messages for an individual node within a multi-node test
/// </summary>
/// <summary>
/// Data that will be processed and aggregated for an individual node
/// </summary>
/// <summary>
/// The ID of this node in the 0-N index of all nodes for this test.
/// </summary>
//Send NodeData to parent for aggregation purposes
//Begin shutdown
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Reporting\SpecRunCoordinator.cs
//-----------------------------------------------------------------------
// <copyright file="SpecRunCoordinator.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Actor responsible for organizing the results of an individual spec
/// </summary>
/// <summary>
/// All of the data for this individual spec
/// </summary>
/// <summary>
/// Internal dictionary used to route messages to their discrete nodes
/// </summary>
//create all of the NodeFactActor instances
/// <summary>
/// Send a <see cref="MultiNodeMessage"/> to the correct <see cref="NodeDataActor"/> based on the 
/// <see cref="MultiNodeMessage.NodeIndex"/> property.
/// </summary>
/// <summary>
/// Wait for all child <see cref="NodeDataActor"/> instances to finish processing
/// and report their results
/// </summary>
/// <returns>An awaitable task, since this operation uses the <see cref="Futures.Ask"/> pattern</returns>
//wait for all Ask operations to complete and pipe the result back to ourselves, including the ref for the original sender
/// <summary>
/// When the result of a <see cref="HandleEndSpec"/> finally gets finished...
/// </summary>
/// <param name="nodeDatum">An envelope with all of the <see cref="NodeData"/> messages we processed from earlier</param>
//mark this test as complete
//Send our FactData back to the sender
//Shut ourselves down
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Reporting\TestRunCoordinator.cs
//-----------------------------------------------------------------------
// <copyright file="TestRunCoordinator.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Actor responsible for organizing all of the data for each test run
/// </summary>
/// <summary>
/// Message used to request the current <see cref="TestRunData"/> value.
/// </summary>
/// <summary>
/// Signals that we need to publish all <see cref="FactData"/> messages to the <see cref="Subscriber"/>
/// </summary>
/// <summary>
/// Signals that <see cref="Subscriber"/> no longer wants to receive <see cref="FactData"/> messages
/// </summary>
/// <summary>
/// Default constructor which uses <see cref="DateTime.UtcNow"/> as the time for <see cref="TestRunStarted"/>.
/// </summary>
/// <summary>
/// Automatically set when <see cref="EndTestRun"/> is sent to this actor.
/// </summary>
/// <summary>
/// The amount of time elapsed for this test run
/// </summary>
/// <summary>
/// Contains the entire tree of information needed to process results of a full test run.
/// </summary>
/// <summary>
/// All of the subscribers who wish to receive <see cref="FactData"/> notifications
/// </summary>
//clean up the current spec, if it hasn't been done already
//Mark the test run as finished
//Deliver the final copy of the TestRunData
//shutdown
//Create the new spec run actor
//Should receive a FactData in return
//Publish the FactData back to any subscribers who wanted it
//Ready to begin the next spec
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Reporting\TestRunTree.cs
//-----------------------------------------------------------------------
// <copyright file="TestRunTree.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// The top of the tree - represents an entire test run.
/// </summary>
/// <summary>
/// The absolute time tests began for this individual node
/// </summary>
/// <summary>
/// The absolute time tests ended for this individual node
/// </summary>
/// <summary>
/// Whether or not this test has acquired a result yet
/// </summary>
/// <summary>
/// Returns a deep copy of the current tree.
/// </summary>
/// <summary>
/// A collection of data about a particular test
/// </summary>
/// <summary>
/// Messages sent by the test runner for this spec, rather than any individual nodes
/// </summary>
/// <summary>
/// The absolute time tests began for this individual node
/// </summary>
/// <summary>
/// The absolute time tests ended for this individual node
/// </summary>
/// <summary>
/// Whether or not this test has acquired a result yet
/// </summary>
/// <summary>
/// Creates a deep copy of the current <see cref="FactData"/> object.
/// </summary>
//make a copy of the NodeData too
/// <summary>
/// A collection of data about the status of a particular node
/// </summary>
/// <summary>
/// Copy constructor
/// </summary>
/// <summary>
/// The position of this node in the 0...N index of all nodes in the set.
/// </summary>
/// <summary>
/// The absolute time tests began for this individual node
/// </summary>
/// <summary>
/// The absolute time tests ended for this individual node
/// </summary>
/// <summary>
/// Whether or not this test has acquired a result yet
/// </summary>
/// <summary>
/// Filter all of the result messages to the top
/// </summary>
/// <summary>
/// All of the events that occurred for this node - time sequenced.
/// </summary>
/// <summary>
/// Push a new message onto the <see cref="EventStream"/> for this node.
/// </summary>
//Check for passed messages
/// <summary>
/// Does a deep copy of the current <see cref="NodeData"/> object
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Sinks\ConsoleMessageSinkActor.cs
//-----------------------------------------------------------------------
// <copyright file="ConsoleMessageSinkActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <see cref="MessageSinkActor"/> implementation that logs all of its output directly to the <see cref="Console"/>.
/// 
/// Has no persistence capabilities. Can optionally use a <see cref="TestRunCoordinator"/> to provide total "end of test" reporting.
/// </summary>
//If we had a failure
/// <summary>
/// Used to print a spec status message (spec starting, finishing, failed, etc...)
/// </summary>
/// <summary>
/// <see cref="IMessageSink"/> implementation that writes directly to the console.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Sinks\FileSystemMessageSinkActor.cs
//-----------------------------------------------------------------------
// <copyright file="FileSystemMessageSinkActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A file system <see cref="MessageSink"/> implementation
/// </summary>
//do nothing
/// <summary>
/// <see cref="MessageSink"/> responsible for writing to the file system.
/// </summary>
//Ask the TestRunCoordinator to give us the latest state
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Sinks\IMessageSink.cs
//-----------------------------------------------------------------------
// <copyright file="IMessageSink.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Interface used to define destinations for MultiNodeTest messages
/// </summary>
/// <summary>
/// Make this <see cref="IMessageSink"/> ready for business.
/// 
/// Typically called at the beginning of a test run.
/// </summary>
/// <summary>
/// Flag that determines if <see cref="Open"/> has been successfully called or not.
/// </summary>
/// <summary>
/// Flag that determines if <see cref="Close"/> has been successfully called or not.
/// </summary>
/// <summary>
/// Shut down the <see cref="IMessageSink"/> instance. 
/// 
/// Typically called at the end of a test run.
/// 
/// During instances of when a test run has been successfully started, this method
/// will wait up to 10 seconds for any <see cref="Actor"/> instances included as part of this
/// <see cref="IMessageSink"/> to shutdown, via the <see cref="GracefulStopSupport.GracefulStop(IActorRef, TimeSpan)"/> method.
/// </summary>
/// <summary>
/// Report that the test runner is moving onto the next test in the testsuite.
/// </summary>
/// <param name="className">The name of the class containing the spec.</param>
/// <param name="methodName">The name of the individual test method.</param>
/// <param name="nodes">The number of nodes who will be participating in this test.</param>
/// <summary>
/// Report that the test runner is terminating the current test in the suite.
/// </summary>
/// <summary>
/// Report that an individual node has passed its test.
/// </summary>
/// <param name="nodeIndex">The Id of the node in the 0-N index.</param>
/// <summary>
/// Report that an individual node has passed its test.
/// </summary>
/// <param name="nodeIndex">The Id of the node in the 0-N index.</param>
/// <param name="message">A string message included with the notification.</param>
/// <summary>
/// Report that an individual node has failed its test.
/// </summary>
/// <param name="nodeIndex">The Id of the node in the 0-N index.</param>
/// <summary>
/// Report that an individual node has failed its test.
/// </summary>
/// <param name="nodeIndex">The Id of the node in the 0-N index.</param>
/// <param name="message">A string message included with the notification.</param>
/// <summary>
/// Report a log message for an individual node.
/// </summary>
/// <param name="nodeIndex">The Id of the node in the 0-N index.</param>
/// <param name="message">A string message included with the notification.</param>
/// <param name="logSource">The source of a log message.</param>
/// <param name="level">The <see cref="LogLevel"/> of this message.</param>
/// <summary>
/// Report a log message from the MultiNodeTestRunner itself.
/// </summary>
/// <param name="message">A string message included with the notification.</param>
/// <param name="logSource">The source of a log message.</param>
/// <param name="level">The <see cref="LogLevel"/> of this message.</param>
/// <summary>
/// Offer a raw message to the message sink. <see cref="MessageSink"/> will attempt to parse it
/// and turn it into one of the below parsing calls.
/// </summary>
/// <param name="messageStr">A raw log message</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Sinks\Messages.cs
//-----------------------------------------------------------------------
// <copyright file="Messages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Message type for signaling that a new spec is ready to be run
/// </summary>
/// <summary>
/// Message type for indicating that the current spec has ended.
/// </summary>
/// <summary>
/// Message type for signaling that a node has completed a spec successfully
/// </summary>
/// <summary>
/// Message type for signaling that a node has completed a spec unsuccessfully
/// </summary>
/// <summary>
/// Truncated message - cut off from it's parent due to line break in I/O redirection
/// </summary>
/// <summary>
/// Message for an individual node participating in a spec
/// </summary>
/// <summary>
/// Message for an individual node participating in a spec
/// </summary>
/// <summary>
/// Message used to signal the end of the test run.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Sinks\MessageSink.cs
//-----------------------------------------------------------------------
// <copyright file="MessageSink.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Abstract base class for all <see cref="IMessageSink"/> implementations. Includes some methods
/// for parsing log messages into structured formats.
/// </summary>
/// <summary>
/// ActorRef for the actor who coordinates all of reporting for each test run
/// </summary>
//Do nothing
//Start the TestCoordinatorActor
//Test run has already been closed or hasn't started
//Signal that the test run has ended
/// <summary>
/// Constant used on calls where no message is proceeded by the caller.
/// </summary>
//for messages that had line breaks (such as stack traces)
/*
//begin the next spec
//end the current spec
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Sinks\MessageSinkActor.cs
//-----------------------------------------------------------------------
// <copyright file="MessageSinkActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Actor responsible for directing the flow of all messages for each test run.
/// </summary>
/// <summary>
/// Used to signal that the underlying  <see cref="MessageSinkActor"/> 
/// must collect and report its final test run results.
/// 
/// Shut down process is ready to begin.
/// </summary>
/// <summary>
/// Signals to <see cref="MessageSink"/> that the <see cref="MessageSinkActor"/> is ready to be
/// shut down.
/// </summary>
/// <summary>
/// Use the template method pattern here to force child actors to fill in
/// all handlers for these classes
/// </summary>
/// <summary>
/// Used to hook additional <see cref="Receive"/> methods into the <see cref="MessageSinkActor"/>
/// </summary>
/// <summary>
/// Used for truncated messages (happens when there's a line break during standard I/O redirection from child nodes)
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Sinks\SinkCoordinator.cs
//-----------------------------------------------------------------------
// <copyright file="SinkCoordinator.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Top-level actor responsible for managing all <see cref="MessageSink"/> instances.
/// </summary>
/// <summary>
/// Used to signal that we need to enable a given <see cref="MessageSink"/> instance
/// </summary>
/// <summary>
/// Test run is complete. Shut down all sinks.
/// 
/// NOTE: Sending this message also means that the <see cref="ActorSystem"/> will be shut down.
/// </summary>
/// <summary>
/// Confirms that a <see cref="MessageSink"/> has been closed
/// </summary>
/// <summary>
/// Case class for distinguishing runner messages
/// </summary>
/// <summary>
/// Message that the <see cref="SinkCoordinator"/> will pass onto a <see cref="MessageSinkActor"/>
/// </summary>
/// <summary>
/// Response sent to <see cref="SinkCoordinator"/>
/// </summary>
/// <summary>
/// Leave the console message sink enabled by default
/// </summary>
//Shut down the ActorSystem if all confirmations have been received
//Ignore duplicate CloseAllSinks calls
/// <summary>
/// Publish a message to all <see cref="MessageSink"/> instances.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared\Sinks\TestCoordinatorEnabledMessageSink.cs
//-----------------------------------------------------------------------
// <copyright file="TestCoordinatorEnabledMessageSink.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A <see cref="MessageSinkActor"/> implementation that is capable of using a <see cref="TestRunCoordinator"/> for 
/// test run summaries and other purposes.
/// </summary>
//Fire up a TestRunCoordinator instance and subscribe to FactData messages when they arrive
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared.Tests\NodeDataActorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="NodeDataActorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//union the two sets together
//Kill the node data actor and have it deliver its payload to TestActor
//Kill the node data actor and have it deliver its payload to TestActor
//Kill the node data actor and have it deliver its payload to TestActor
//union the two sets together
//Kill the node data actor and have it deliver its payload to TestActor
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared.Tests\NodeMessageHelpers.cs
//-----------------------------------------------------------------------
// <copyright file="NodeMessageHelpers.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Helper class for creating <see cref="MultiNodeMessage"/>
/// </summary>
/// <summary>
/// Meta-function for generating a distribution of messages across multiple nodes
/// </summary>
//special case for 1:1 distribution
// Key = nodeIndex, Value = # of allocated messages
//Don't go over the message count
//generate the assigned sequence for each node
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared.Tests\ParsingSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ParsingSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used to test the <see cref="MessageSink"/>'s ability to parse 
/// </summary>
//capture the logged message
//format the string as it would appear when reported by multinode test runner
//format the string as it would appear when reported by multinode test runner
//ParsingSpec-1/user/$b]] Received message LOG ME!";
//ParsingSpec-1/user/$b]", nodeMessage.LogSource);
//format the a log fragment as would be recorded by the test runner
//capture the logged message
//format the string as it would appear when reported by multinode test runner
//capture the logged message
//format the string as it would appear when reported by multinode test runner
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared.Tests\SpecRunCoordinatorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="SpecRunCoordinatorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//End the test
//End the test
// Combine the messages from each individual NodeData back into a unioned set. 
// Should match what we sent (messages.)
//Add some result (PASS) messages
//End the test
//Add some result (FAIL) messages
//End the test
//Add some result (1 FAIL, 2 PASS) messages
//PASS messages
//one FAIL message
//End the test
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared.Tests\TestRunCoordinatorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="TestRunCoordinatorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//begin a new spec
// create some messages for each node, the test runner, and some result messages
// just like a real MultiNodeSpec
//end the spec
//register the TestActor as a subscriber for FactData announcements
//begin a new spec
// create some messages for each node, the test runner, and some result messages
// just like a real MultiNodeSpec
//end the spec
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared.Tests\TestRunShutdownSpec.cs
//-----------------------------------------------------------------------
// <copyright file="TestRunShutdownSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used to validate that we can get final reporting on shutdown
/// </summary>
// create some messages for each node, the test runner, and some result messages
// just like a real MultiNodeSpec
//end the spec
//end the test run...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared.Tests\Persistence\JsonPersistentTestRunStoreSpec.cs
//-----------------------------------------------------------------------
// <copyright file="JsonPersistentTestRunStoreSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//begin a new spec
// create some messages for each node, the test runner, and some result messages
// just like a real MultiNodeSpec
//end the spec
//save the test run
//begin a new spec
// create some messages for each node, the test runner, and some result messages
// just like a real MultiNodeSpec
//end the spec
//save the test run
//retrieve the test run from file
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.MultiNodeTestRunner.Shared.Tests\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.NodeTestRunner\Discovery.cs
//-----------------------------------------------------------------------
// <copyright file="Discovery.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.NodeTestRunner\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/* need to pass in just the assembly name to Discovery, not the full path
//signal failure
//signal failure
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.NodeTestRunner\Sink.cs
//-----------------------------------------------------------------------
// <copyright file="Sink.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//the MultiNodeTestRunner uses 1-based indexing, which is why we have to add 1 to the index.
//the MultiNodeTestRunner uses 1-based indexing, which is why we have to add 1 to the index.
/// <summary>
/// Message class used for reporting a test pass.
/// 
/// <remarks>
/// The Akka.MultiNodeTestRunner.Shared.MessageSink depends on the format string
/// that this class produces, so do not remove or refactor it.
/// </remarks>
/// </summary>
/// <summary>
/// Message class used for reporting a test fail.
/// 
/// <remarks>
/// The Akka.MultiNodeTestRunner.Shared.MessageSink depends on the format string
/// that this class produces, so do not remove or refactor it.
/// </remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.NodeTestRunner\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\AtLeastOnceDelivery.cs
//-----------------------------------------------------------------------
// <copyright file="AtLeastOnceDelivery.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Persistent actor type, that sends messages with at-least-once delivery semantics to it's destinations.
///     It takes care of re-sending messages when they haven't been confirmed withing expected timeout. The same
///     message may be send twice or more to the same destination as a result of possible resends.
///     Use a <see cref="AtLeastOnceDeliverySemantic.Deliver" /> method to send a message to a destination. Call the
///     <see cref="ConfirmDelivery" />
///     method once destination has replied with a confirmation message. The interval between redelivery attempts
///     can be defined with <see cref="RedeliverInterval" />. After a number of delivery attempts an
///     <see cref="UnconfirmedWarning" /> message will be sent to <see cref="ActorBase.Self" />. The resending will
///     continue,
///     but you may choose <see cref="AtLeastOnceDeliverySemantic.ConfirmDelivery" /> to cancel resending.
///     This actor type has state consisting of unconfirmed messages and a sequence number. It doesn't store it by
///     itself, so you must persist corresponding events so that state can be restored by calling the same
///     delivery-related methods during recovery phase of the persistent actor. During recovery calls to
///     <see cref="AtLeastOnceDeliverySemantic.Deliver" /> won't send out a message, but it will be sent later if no
///     matching <see cref="AtLeastOnceDeliverySemantic.ConfirmDelivery" /> call was performed.
///     Support for snapshot is provided by get and set delivery snapshot methods. These snapshots contains full
///     delivery state including unconfirmed messages. For custom snapshots remember to include those delivery ones.
/// </summary>
/// <summary>
///     Interval between redelivery attempts.
/// </summary>
/// <summary>
///     Maximum number of unconfirmed messages that will be sent at each redelivery burst. This is to help to
///     prevent overflowing amount of messages to be sent at once, for eg. when destination cannot be reached for a long
///     time.
/// </summary>
/// <summary>
///     After this number of delivery attempts a <see cref="UnconfirmedWarning" /> message will be sent to
///     <see cref="ActorBase.Self" />.
///     The count is reset after restart.
/// </summary>
/// <summary>
///     Maximum number of unconfirmed messages, that this actor is allowed to hold in the memory. When this
///     number is exceed, <see cref="Deliver" /> will throw
///     <see cref="AtLeastOnceDeliverySemantic.MaxUnconfirmedMessagesExceededException" />
///     instead of accepting messages.
/// </summary>
/// <summary>
///     Number of messages, that have not been confirmed yet.
/// </summary>
/// <summary>
///     If snapshot from <see cref="GetDeliverySnapshot" /> was saved, it will be received during recovery phase in a
///     <see cref="SnapshotOffer" /> message and should be set with this method.
/// </summary>
/// <param name="snapshot"></param>
/// <summary>
///     Call this method to confirm that message with <paramref name="deliveryId" /> has been sent
///     or to cancel redelivery attempts.
/// </summary>
/// <returns>True if delivery was confirmed first time, false for duplicate confirmations.</returns>
/// <summary>
///     Returns full state of the current delivery actor. Could be saved using <see cref="Eventsourced.SaveSnapshot" />
///     method.
///     During recovery a snapshot received in <see cref="SnapshotOffer" /> should be set with
///     <see cref="SetDeliverySnapshot" />.
/// </summary>
/// <summary>
///     Send the message created with <paramref name="deliveryMessageMapper" /> function to the
///     <paramref name="destination" />
///     actor. It will retry sending the message until the delivery is confirmed with <see cref="ConfirmDelivery" />.
///     Correlation between these two methods is performed by delivery id - parameter of
///     <paramref name="deliveryMessageMapper" />.
///     Usually it's passed inside the message to the destination, which replies with the message having the same id.
///     During recovery this method won't send out any message, but it will be sent later if no matching
///     <see cref="ConfirmDelivery" /> call was performed.
/// </summary>
/// <exception cref="AtLeastOnceDeliverySemantic.MaxUnconfirmedMessagesExceededException">
///     Thrown when <see cref="UnconfirmedCount" /> is greater than or equal to <see cref="MaxUnconfirmedMessages" />.
/// </exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\AtLeastOnceDeliveryReceiveActor.cs
//-----------------------------------------------------------------------
// <copyright file="AtLeastOnceDelivery.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Receive persistent actor type, that sends messages with at-least-once delivery semantics to it's destinations.
/// </summary>
/// <summary>
///     Interval between redelivery attempts.
/// </summary>
/// <summary>
///     Maximum number of unconfirmed messages that will be sent at each redelivery burst. This is to help to
///     prevent overflowing amount of messages to be sent at once, for eg. when destination cannot be reached for a long
///     time.
/// </summary>
/// <summary>
///     After this number of delivery attempts a <see cref="UnconfirmedWarning" /> message will be sent to
///     <see cref="ActorBase.Self" />.
///     The count is reset after restart.
/// </summary>
/// <summary>
///     Maximum number of unconfirmed messages, that this actor is allowed to hold in the memory. When this
///     number is exceed, <see cref="Deliver" /> will throw
///     <see cref="AtLeastOnceDeliverySemantic.MaxUnconfirmedMessagesExceededException" />
///     instead of accepting messages.
/// </summary>
/// <summary>
///     Number of messages, that have not been confirmed yet.
/// </summary>
/// <summary>
///     If snapshot from <see cref="GetDeliverySnapshot" /> was saved, it will be received during recovery phase in a
///     <see cref="SnapshotOffer" /> message and should be set with this method.
/// </summary>
/// <param name="snapshot"></param>
/// <summary>
///     Call this method to confirm that message with <paramref name="deliveryId" /> has been sent
///     or to cancel redelivery attempts.
/// </summary>
/// <returns>True if delivery was confirmed first time, false for duplicate confirmations.</returns>
/// <summary>
///     Returns full state of the current delivery actor. Could be saved using <see cref="Eventsourced.SaveSnapshot" />
///     method.
///     During recovery a snapshot received in <see cref="SnapshotOffer" /> should be set with
///     <see cref="SetDeliverySnapshot" />.
/// </summary>
/// <summary>
///     Send the message created with <paramref name="deliveryMessageMapper" /> function to the
///     <paramref name="destination" />
///     actor. It will retry sending the message until the delivery is confirmed with <see cref="ConfirmDelivery" />.
///     Correlation between these two methods is performed by delivery id - parameter of
///     <paramref name="deliveryMessageMapper" />.
///     Usually it's passed inside the message to the destination, which replies with the message having the same id.
///     During recovery this method won't send out any message, but it will be sent later if no matching
///     <see cref="ConfirmDelivery" /> call was performed.
/// </summary>
/// <exception cref="AtLeastOnceDeliverySemantic.MaxUnconfirmedMessagesExceededException">
///     Thrown when <see cref="UnconfirmedCount" /> is greater than or equal to <see cref="MaxUnconfirmedMessages" />.
/// </exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\AtLeastOnceDeliverySemantic.cs
//-----------------------------------------------------------------------
// <copyright file="AtLeastOnceDelivery.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Snapshot of a current <see cref="AtLeastOnceDeliveryActor" /> state. Can be retrieved with
///     <see cref="AtLeastOnceDeliverySemantic.GetDeliverySnapshot" /> and saved with
///     <see cref="Eventsourced.SaveSnapshot" />.
///     During recovery the snapshot received in <see cref="SnapshotOffer" /> should be sent with
///     <see cref="AtLeastOnceDeliverySemantic.SetDeliverySnapshot" />.
/// </summary>
/// <summary>
///     <see cref="UnconfirmedDelivery" /> contains details about unconfirmed messages.
///     It's included inside <see cref="UnconfirmedWarning" /> and <see cref="AtLeastOnceDeliverySnapshot" />.
/// </summary>
/// <summary>
///     <see cref="UnconfirmedWarning" /> message should be sent after
///     <see cref="AtLeastOnceDeliverySemantic.UnconfirmedDeliveryAttemptsToWarn" /> limit will be reached.
/// </summary>
/// <summary>
///     This exception is thrown when the <see cref="MaxUnconfirmedMessages" /> threshold has been exceeded.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="MaxUnconfirmedMessagesExceededException" /> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <param name="cause">The exception that is the cause of the current exception.</param>
/// <summary>
///     Initializes a new instance of the <see cref="MaxUnconfirmedMessagesExceededException" /> class.
/// </summary>
/// <param name="info">
///     The <see cref="SerializationInfo" /> that holds the serialized object data about the exception being
///     thrown.
/// </param>
/// <param name="context">
///     The <see cref="StreamingContext" /> that contains contextual information about the source or
///     destination.
/// </param>
/// <summary>
///     Interval between redelivery attempts.
/// </summary>
/// <summary>
///     Maximum number of unconfirmed messages that will be sent at each redelivery burst. This is to help to
///     prevent overflowing amount of messages to be sent at once, for eg. when destination cannot be reached for a long
///     time.
/// </summary>
/// <summary>
///     After this number of delivery attempts a <see cref="UnconfirmedWarning" /> message will be sent to
///     <see cref="ActorBase.Self" />.
///     The count is reset after restart.
/// </summary>
/// <summary>
///     Maximum number of unconfirmed messages, that this actor is allowed to hold in the memory. When this
///     number is exceed, <see cref="Deliver" /> will throw <see cref="MaxUnconfirmedMessagesExceededException" />
///     instead of accepting messages.
/// </summary>
/// <summary>
///     Number of messages, that have not been confirmed yet.
/// </summary>
/// <summary>
///     Invoked after actor has been created and all of it's fields have been initialized.
/// </summary>
/// <summary>
///     Send the message created with <paramref name="deliveryMessageMapper" /> function to the
///     <paramref name="destination" />
///     actor. It will retry sending the message until the delivery is confirmed with <see cref="ConfirmDelivery" />.
///     Correlation between these two methods is performed by delivery id - parameter of
///     <paramref name="deliveryMessageMapper" />.
///     Usually it's passed inside the message to the destination, which replies with the message having the same id.
///     During recovery this method won't send out any message, but it will be sent later until corresponding
///     <see cref="ConfirmDelivery" /> method will be invoked.
/// </summary>
/// <exception cref="MaxUnconfirmedMessagesExceededException">
///     Thrown when <see cref="UnconfirmedCount" /> is greater than or equal to <see cref="MaxUnconfirmedMessages" />.
/// </exception>
/// <summary>
///     Call this method to confirm that message with <paramref name="deliveryId" /> has been sent
///     or to cancel redelivery attempts.
/// </summary>
/// <returns>True if delivery was confirmed first time, false for duplicate confirmations.</returns>
/// <summary>
///     Returns full state of the current delivery actor. Could be saved using <see cref="Eventsourced.SaveSnapshot" />
///     method.
///     During recovery a snapshot received in <see cref="SnapshotOffer" /> should be set with
///     <see cref="SetDeliverySnapshot" />.
/// </summary>
/// <summary>
///     If snapshot from <see cref="GetDeliverySnapshot" /> was saved, it will be received during recovery phase in a
///     <see cref="SnapshotOffer" /> message and should be set with this method.
/// </summary>
/// <param name="snapshot"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Eventsourced.cs
//-----------------------------------------------------------------------
// <copyright file="Eventsourced.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Forces actor to stash incoming commands until all invocations are handled.
/// </summary>
/// <summary>
/// Unlike <see cref="StashingHandlerInvocation"/> this one does not force actor to stash commands.
/// Originates from <see cref="Eventsourced.PersistAsync{TEvent}(TEvent,System.Action{TEvent})"/> 
/// or <see cref="Eventsourced.Defer{TEvent}(TEvent,System.Action{TEvent})"/> method calls.
/// </summary>
/// Used instead of iterating `pendingInvocations` in order to check if safe to revert to processing commands
/// Holds user-supplied callbacks for persist/persistAsync calls
/// <summary>
/// Id of the persistent entity for which messages should be replayed.
/// </summary>
/// <summary>
/// Returns <see cref="PersistenceId"/>.
/// </summary>
/// <summary>
/// Returns true if this persistent entity is currently recovering.
/// </summary>
/// <summary>
/// Returns true if this persistent entity has successfully finished recovery.
/// </summary>
/// <summary>
/// Highest received sequence number so far or `0L` if this actor 
/// hasn't replayed  or stored any persistent events yet.
/// </summary>
/// <summary>
/// Returns <see cref="LastSequenceNr"/>
/// </summary>
/// <summary> 
/// Recovery handler that receives persistent events during recovery. If a state snapshot has been captured and saved, 
/// this handler will receive a <see cref="SnapshotOffer"/> message followed by events that are younger than offer itself.
/// 
/// This handler must be a pure function (no side effects allowed), it should not perform any actions that may fail. 
/// If recovery fails this actor will be stopped. This can be customized in <see cref="RecoveryFailure"/>. 
/// </summary>
/// <summary>
/// Command handler. Typically validates commands against current state - possibly by communicating with other actors.
/// On successful validation, one or more events are derived from command and persisted.
/// </summary>
/// <param name="message"></param>
/// <returns></returns>
/// <summary> 
/// Asynchronously persists an <paramref name="event"/>. On successful persistence, the <paramref name="handler"/>
/// is called with the persisted event. This method guarantees that no new commands will be received by a persistent actor
/// between a call to <see cref="Persist{TEvent}(TEvent,System.Action{TEvent})"/> and execution of it's handler. It also
/// holds multiple persist calls per received command. Internally this is done by stashing.
/// 
/// 
/// An event <paramref name="handler"/> may close over eventsourced actor state and modify it. Sender of the persistent event
/// is considered a sender of the corresponding command. That means, one can respond to sender from within an event handler.
/// 
/// 
/// Within an event handler, applications usually update persistent actor state using 
/// persisted event data, notify listeners and reply to command senders.
/// 
/// 
/// If persistence of an event fails, the persistent actor will be stopped. 
/// This can be customized by handling <see cref="PersistenceFailure"/> in <see cref="ReceiveCommand"/> method. 
/// </summary>
/// <summary>
/// Asynchronously persists series of <paramref name="events"/> in specified order.
/// This is equivalent of multiple calls of <see cref="Persist{TEvent}(TEvent,System.Action{TEvent})"/> calls.
/// </summary>
/// <summary> 
/// Asynchronously persists an <paramref name="event"/>. On successful persistence, the <paramref name="handler"/>
/// is called with the persisted event. Unlike <see cref="Persist{TEvent}(TEvent,System.Action{TEvent})"/> method,
/// this one will continue to receive incoming commands between calls and executing it's event <paramref name="handler"/>.
/// 
/// 
/// This version should be used in favor of <see cref="Persist{TEvent}(TEvent,System.Action{TEvent})"/> 
/// method when throughput is more important that commands execution precedence.
/// 
/// 
/// An event <paramref name="handler"/> may close over eventsourced actor state and modify it. Sender of the persistent event
/// is considered a sender of the corresponding command. That means, one can respond to sender from within an event handler.
/// 
/// 
/// Within an event handler, applications usually update persistent actor state using 
/// persisted event data, notify listeners and reply to command senders.
/// 
/// 
/// If persistence of an event fails, the persistent actor will be stopped. 
/// This can be customized by handling <see cref="PersistenceFailure"/> in <see cref="ReceiveCommand"/> method. 
/// </summary>
/// <summary>
/// Asynchronously persists series of <paramref name="events"/> in specified order.
/// This is equivalent of multiple calls of <see cref="PersistAsync{TEvent}(TEvent,System.Action{TEvent})"/> calls.
/// </summary>
/// <summary>
/// 
/// Defer the <paramref name="handler"/> execution until all pending handlers have been executed. 
/// If <see cref="PersistAsync{TEvent}(TEvent,System.Action{TEvent})"/> was invoked before defer, 
/// the corresponding handlers will be invoked in the same order as they were registered in.
/// 
/// 
/// This call will NOT result in persisted event. If it should be possible to replay use persist method instead.
/// If there are not awaiting persist handler calls, the <paramref name="handler"/> will be invoiced immediately.
/// 
/// </summary>
// Internally, all messages are processed by unstashing them from
// the internal stash one-by-one. Hence, an unstashAll() from the
// user stash must be prepended to the internal stash.
/// <summary>
/// Called whenever a message replay succeeds.
/// </summary>
/// <summary>
/// Called whenever a message replay fails. By default it log the errors.
/// </summary>
/// <param name="reason">Reason of failure</param>
/// <param name="message">Message that caused a failure</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Eventsourced.Lifecycle.cs
//-----------------------------------------------------------------------
// <copyright file="Eventsourced.Lifecycle.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ignore
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Eventsourced.Recovery.cs
//-----------------------------------------------------------------------
// <copyright file="Eventsourced.Recovery.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Initial state, waits for <see cref="Recover"/> request, and then submits a <see cref="LoadSnapshot"/> request to the snapshot
/// store and changes to <see cref="RecoveryStarted"/> state. All incoming messages except <see cref="Recover"/> are stashed.
/// </summary>
/// <returns></returns>
/// <summary>
/// Processes a loaded snapshot, if any. A loaded snapshot is offered with a <see cref="SnapshotOffer"/> 
/// message to the actor's <see cref="ReceiveRecover"/>. Then initiates a message replay, either starting 
/// from the loaded snapshot or from scratch, and switches to <see cref="ReplayStarted"/> state. 
/// All incoming messages are stashed.
/// </summary>
/// <param name="maxReplays">Maximum number of messages to replay</param>
/// <summary>
/// Processes replayed messages, if any. The actor's <see cref="ReceiveRecover"/> is invoked with the replayed events.
/// 
/// If replay succeeds it switches to <see cref="Initializing"/> state and requests the highest stored sequence
/// number from the journal. Otherwise RecoveryFailure is emitted.
/// If replay succeeds the `onReplaySuccess` callback method is called, otherwise `onReplayFailure`.
/// 
/// If processing of a replayed event fails, the exception is caught and
/// stored for being thrown later and state is changed to <see cref="RecoveryFailed"/>.
/// 
/// All incoming messages are stashed.
/// </summary>
// FIXME what happens if RecoveryFailure is handled, i.e. actor is not stopped?
/// <summary>
/// Processes messages with the highest stored sequence number in the journal and then switches to
/// <see cref="ProcessingCommands"/> state. All other messages are stashed.
/// </summary>
/// <summary>
/// If event persistence is pending after processing a command, event persistence 
/// is triggered and the state changes to <see cref="PersistingEvents"/>.
/// </summary>
// When using only `PersistAsync` and `Defer` max throughput is increased by using
// batching, but when using `Persist` we want to use one atomic WriteMessages
// for the emitted events.
// Flush previously collected events, if any, separately from the `Persist` batch
/// <summary>
/// Remains until pending events are persisted and then changes state to <see cref="ProcessingCommands"/>.
/// Only events to be persisted are processed. All other messages are stashed internally.
/// </summary>
// enables an early return to `processingCommands`, because if this counter hits `0`,
// we know the remaining pendingInvocations are all `persistAsync` created, which
// means we can go back to processing commands also - and these callbacks will be called as soon as possible
// _instanceId mismatch can happen for persistAsync and defer in case of actor restart
// while message is in flight, in that case we ignore the call to the handler
/// <summary>
/// Removes first element from the list and returns it or returns default value if list was empty.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\InternalExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="InternalExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Sends <paramref name="task"/> result to the <paramref name="receiver"/> in form of <see cref="ReplayMessagesSuccess"/> 
/// or <see cref="ReplayMessagesFailure"/> depending on the success or failure of the task.
/// </summary>
/// <summary>
/// Enqueues provided <paramref name="message"/> at the beginning of the internal actor cell mailbox message queue.
/// Requires current actor to use unbounded deque-based message queue. It will fail otherwise.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\JournalProtocol.cs
//-----------------------------------------------------------------------
// <copyright file="JournalProtocol.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Reply message to failed <see cref="DeleteMessages"/> request.
/// </summary>
/// <summary>
/// Request to delete all persistent messages with sequence numbers up to `toSequenceNr` (inclusive).  
/// </summary>
/// <summary>
/// If false, the persistent messages are marked as deleted in the journal, 
/// otherwise they are permanently deleted from the journal.
/// </summary>
/// <summary>
/// Reply message to a successful <see cref="WriteMessages"/> request. This reply is sent 
/// to the requestor before all subsequent <see cref="WriteMessageSuccess"/> replies.
/// </summary>
/// <summary>
/// Reply message to a failed <see cref="WriteMessages"/> request. This reply is sent 
/// to the requestor before all subsequent <see cref="WriteMessageFailure"/> replies.
/// </summary>
/// <summary>
/// Reply message to a successful <see cref="WriteMessages"/> request. For each contained 
/// <see cref="IPersistentRepresentation"/> message in the request, a separate reply is sent to the requestor.
/// </summary>
/// <summary>
/// Successfully written message.
/// </summary>
/// <summary>
/// Reply message to a failed <see cref="WriteMessages"/> request. For each contained 
/// <see cref="IPersistentRepresentation"/> message in the request, a separate reply is sent to the requestor.
/// </summary>
/// <summary>
/// Message failed to be written.
/// </summary>
/// <summary>
/// Failure cause.
/// </summary>
/// <summary>
/// Reply message to a <see cref="WriteMessages"/> with a non-persistent message.
/// </summary>
/// <summary>
/// A looped message.
/// </summary>
/// <summary>
/// Request to replay messages to the <see cref="PersistentActor"/>.
/// </summary>
/// <summary>
/// Inclusive lower sequence number bound where a replay should start.
/// </summary>
/// <summary>
/// Inclusive upper sequence number bound where a replay should end.
/// </summary>
/// <summary>
/// Maximum number of messages to be replayed.
/// </summary>
/// <summary>
/// Requesting persistent actor identifier.
/// </summary>
/// <summary>
/// Requesting persistent actor.
/// </summary>
/// <summary>
/// If true, message marked as deleted shall be replayed.
/// </summary>
/// <summary>
/// Reply message to a <see cref="ReplayMessages"/> request. A separate reply is sent to the requestor for each replayed message.
/// </summary>
/// <summary>
/// Reply message to a successful <see cref="ReplayMessages"/> request. This reply is sent 
/// to the requestor after all <see cref="ReplayedMessage"/> have been sent (if any).
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Persistence.cs
//-----------------------------------------------------------------------
// <copyright file="Persistence.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// both defaults are lazy, so that they don't need to be configured if they're not used
/// <summary>
/// Returns a snapshot store plugin actor identified by <paramref name="snapshotPluginId"/>. 
/// When empty looks for default path under "akka.persistence.snapshot-store.plugin".
/// </summary>
/// <summary>
/// Returns a journal plugin actor identified by <paramref name="journalPluginId"/>. 
/// When empty looks for default path under "akka.persistence.journal.plugin".
/// </summary>
/// <summary>
/// Returns an <see cref="EventAdapters"/> object which serves as a per-journal collection of bound event adapters. 
/// If no adapters are registered for a given journal the EventAdapters object will simply return the identity adapter for each 
/// class, otherwise the most specific adapter matching a given class will be returned.
/// </summary>
/// <param name="journalPluginId"></param>
/// <returns></returns>
/// <summary>
/// 
/// </summary>
/// <param name="journalRef"></param>
/// <returns></returns>
/// <summary>
/// Persistence extension.
/// </summary>
/// <summary>
/// Persistence configuration.
/// </summary>
/// <summary>
///     Interval between redelivery attempts.
/// </summary>
/// <summary>
///     Maximum number of unconfirmed messages, that this actor is allowed to hold in the memory. When this
///     number is exceed, <see cref="AtLeastOnceDeliverySemantic.Deliver" /> will throw
///     <see cref="AtLeastOnceDeliverySemantic.MaxUnconfirmedMessagesExceededException" />
///     instead of accepting messages.
/// </summary>
/// <summary>
///     After this number of delivery attempts a <see cref="UnconfirmedWarning" /> message will be sent to
///     <see cref="ActorBase.Self" />.
///     The count is reset after restart.
/// </summary>
/// <summary>
///     Maximum number of unconfirmed messages that will be sent at each redelivery burst. This is to help to
///     prevent overflowing amount of messages to be sent at once, for eg. when destination cannot be reached for a long
///     time.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Persistent.cs
//-----------------------------------------------------------------------
// <copyright file="Persistent.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Identifier of the persistent identity for which messages should be replayed.
/// </summary>
/// <summary>
/// Configuration identifier of the journal plugin servicing current persistent actor or view.
/// When empty, looks in [akka.persistence.journal.plugin] to find configuration entry path.
/// Otherwise uses string value as an absolute path to the journal configuration entry.
/// </summary>
/// <summary>
/// Configuration identifier of the snapshot store plugin servicing current persistent actor or view.
/// When empty, looks in [akka.persistence.snapshot-store.plugin] to find configuration entry path.
/// Otherwise uses string value as an absolute path to the snapshot store configuration entry.
/// </summary>
/// <summary>
/// Marks messages, which can then be resequenced by <see cref="AsyncWriteJournal"/>.
/// </summary>
/// <summary>
/// Message, which can be resequenced by <see cref="AsyncWriteJournal"/>, but won't be persisted.
/// </summary>
/// <summary>
/// Message's payload.
/// </summary>
/// <summary>
/// Sender of this message.
/// </summary>
/// <summary>
/// Representation of a persistent message in the journal plugin API.
/// </summary>
/// <summary>
/// True if this message is marked as deleted.
/// </summary>
/// <summary>
/// Sequence number of this persistent message.
/// </summary>
/// <summary>
/// Returns the persistent payload's manifest if available.
/// </summary>
/// <summary>
/// Creates a new persistent message with the specified <paramref name="payload"/>.
/// </summary>
/// <summary>
/// Creates a new persistent message with the specified <paramref name="manifest"/>.
/// </summary>
/// <summary>
/// Creates a new deep copy of this message.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\PersistentActor.cs
//-----------------------------------------------------------------------
// <copyright file="PersistentActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Sent to a <see cref="PersistentActor"/> if a journal fails to write a persistent message. 
/// If not handled, an <see cref="ActorKilledException"/> is thrown by that persistent actor.
/// </summary>
/// <summary>
/// Payload of the persistent message.
/// </summary>
/// <summary>
/// Sequence number of the persistent message.
/// </summary>
/// <summary>
/// Failure cause.
/// </summary>
/// <summary>
/// Sent to a <see cref="PersistentActor"/> if a journal fails to replay messages or fetch that 
/// persistent actor's highest sequence number. If not handled, the actor will be stopped.
/// </summary>
/// <summary>
/// Instructs a <see cref="PersistentActor"/> to recover itself. Recovery will start from the first previously saved snapshot
/// matching provided <see cref="FromSnapshot"/> selection criteria, if any. Otherwise it will replay all journaled messages.
/// 
/// If recovery starts from a snapshot, the <see cref="PersistentActor"/> is offered with that snapshot wrapped in 
/// <see cref="SnapshotOffer"/> message, followed by replayed messages, if any, that are younger than the snapshot, up to the
/// specified upper sequence number bound (<see cref="ToSequenceNr"/>).
/// </summary>
/// <summary>
/// Criteria for selecting a saved snapshot from which recovery should start. Default is del youngest snapshot.
/// </summary>
/// <summary>
/// Upper, inclusive sequence number bound. Default is no upper bound.
/// </summary>
/// <summary>
/// Maximum number of messages to replay. Default is no limit.
/// </summary>
/// <summary>
/// Persistent actor - can be used to implement command or eventsourcing.
/// </summary>
/// <summary>
/// Persistent actor - can be used to implement command or eventsourcing.
/// </summary>
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the specified handler.
/// </summary>
/// <param name="receive">The new message handler.</param>
/// <summary>
/// Changes the actor's behavior and replaces the current receive handler with the specified handler.
/// The current handler is stored on a stack, and you can revert to it by calling <see cref="IUntypedActorContext.UnbecomeStacked"/>
/// <remarks>Please note, that in order to not leak memory, make sure every call to <see cref="BecomeStacked"/>
/// is matched with a call to <see cref="IUntypedActorContext.UnbecomeStacked"/>.</remarks>
/// </summary>
/// <param name="receive">The new message handler.</param>
//This might be called directly after the constructor, or when the same actor instance has been returned
//during recreate. Make sure what happens here is idempotent
//Do not perform this when "recreating" the same instance
/// <summary>
/// Creates and pushes a new MatchBuilder
/// </summary>
/// <summary>
/// Changes the actor's command behavior and replaces the current receive command handler with the specified handler.
/// </summary>
/// <param name="configure">Configures the new handler by calling the different Receive overloads.</param>
/// <summary>
/// Changes the actor's command behavior and replaces the current receive command handler with the specified handler.
/// The current handler is stored on a stack, and you can revert to it by calling <see cref="ActorBase.UnbecomeStacked"/>
/// <remarks>Please note, that in order to not leak memory, make sure every call to <see cref="BecomeStacked"/>
/// is matched with a call to <see cref="ActorBase.UnbecomeStacked"/>.</remarks>
/// </summary>
/// <param name="configure">Configures the new handler by calling the different Command overloads.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\PersistentView.cs
//-----------------------------------------------------------------------
// <copyright file="PersistentView.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Instructs a <see cref="PersistentView"/> to update itself. This will run a single incremental message replay 
/// with all messages from the corresponding persistent id's journal that have not yet been consumed by the view.  
/// To update a view with messages that have been written after handling this request, another <see cref="Update"/> 
/// request must be sent to the view.
/// </summary>
/// <summary>
/// If `true`, processing of further messages sent to the view will be delayed 
/// until the incremental message replay, triggered by this update request, completes. 
/// If `false`, any message sent to the view may interleave with replayed <see cref="Persistent"/> message stream.
/// </summary>
/// <summary>
/// Maximum number of messages to replay when handling this update request. Defaults to <see cref="long.MaxValue"/> (i.e. no limit).
/// </summary>
/// <summary>
/// A view replicates the persistent message stream of a <see cref="PersistentActor"/>. Implementation classes receive
/// the message stream directly from the Journal. These messages can be processed to update internal state
/// in order to maintain an (eventual consistent) view of the state of the corresponding persistent actor. A
/// persistent view can also run on a different node, provided that a replicated journal is used.
/// 
/// Implementation classes refer to a persistent actors' message stream by implementing `persistenceId`
/// with the corresponding (shared) identifier value.
/// 
/// Views can also store snapshots of internal state by calling [[autoUpdate]]. The snapshots of a view
/// are independent of those of the referenced persistent actor. During recovery, a saved snapshot is offered
/// to the view with a <see cref="SnapshotOffer"/> message, followed by replayed messages, if any, that are younger
/// than the snapshot. Default is to offer the latest saved snapshot.
/// 
/// By default, a view automatically updates itself with an interval returned by `autoUpdateInterval`.
/// This method can be overridden by implementation classes to define a view instance-specific update
/// interval. The default update interval for all views of an actor system can be configured with the
/// `akka.persistence.view.auto-update-interval` configuration key. Applications may trigger additional
/// view updates by sending the view <see cref="Update"/> requests. See also methods
/// </summary>
/// <summary>
/// Used as identifier for snapshots performed by this <see cref="PersistentView"/>. This allows the View to keep 
/// separate snapshots of data than the <see cref="PersistentActor"/> originating the message stream.
/// 
/// The usual case is to have a different identifiers for <see cref="ViewId"/> and <see cref="PersistenceId"/>.
/// </summary>
/// <summary>
/// Id of the persistent entity for which messages should be replayed.
/// </summary>
/// <summary>
/// Gets the <see cref="ViewId"/>.
/// </summary>
/// <summary>
/// If true, the currently processed message was persisted - it sent from the <see cref="Journal"/>.
/// If false, the currently processed message comes from another actor ('/user/*' path).
/*' path).
/// <summary>
/// If true, this view will update itself automatically within an interval specified by <see cref="AutoUpdateInterval"/>.
/// If false, application must update this view explicitly with <see cref="Update"/> requests.
/// </summary>
/// <summary>
/// Time interval to automatic updates. Used only when <see cref="IsAutoUpdate"/> value is true.
/// </summary>
/// <summary>
/// The maximum number of messages to replay per update.
/// </summary>
/// <summary>
/// Highest received sequence number so far or 0 it none persistent event has been replayed yet.
/// </summary>
/// <summary>
/// Gets last sequence number.
/// </summary>
/// <summary>
/// Orders to load a snapshots related to persistent actor identified by <paramref name="persistenceId"/>
/// that match specified <paramref name="criteria"/> up to provided <paramref name="toSequenceNr"/> upper, inclusive bound.
/// </summary>
/// <summary>
/// Saves a <paramref name="snapshot"/> of this actor's state. If snapshot succeeds, this actor will
/// receive a <see cref="SaveSnapshotSuccess"/>, otherwise a <see cref="SaveSnapshotFailure"/> message.
/// </summary>
/// <summary>
/// Deletes a snapshot identified by <paramref name="sequenceNr"/> and <paramref name="timestamp"/>.
/// </summary>
/// <summary>
/// Delete all snapshots matching <paramref name="criteria"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\PersistentView.Lifecycle.cs
//-----------------------------------------------------------------------
// <copyright file="PersistentView.Lifecycle.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ignore
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\PersistentView.Recovery.cs
//-----------------------------------------------------------------------
// <copyright file="PersistentView.Recovery.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: There are some duplication of the recovery state management here and in EventsourcedState,
//      but the enhanced PersistentView will not be based on recovery infrastructure, and
//      therefore this code will be replaced anyway
/// <summary>
/// Initial state. Waits for <see cref="Recover"/> request, and then submits a <see cref="LoadSnapshot"/>
/// request to snapshot store and then changes to <see cref="RecoveryStarted"/> state. All other message types are stashed.
/// </summary>
/// <summary>
/// Processes a loaded snapshot, if any. A loaded snapshot is offered to view via <see cref="SnapshotOffer"/>
/// message in <see cref="PersistentActor.ReceiveRecover"/> method. Then initiates a message replay, either 
/// starting from the loaded snapshot or from scratch. Then switches to <see cref="ReplayStarted"/> state.
/// 
/// All incoming messages are stashed.
/// </summary>
// ignore
// since we're recovering, we can ignore receive behavior from the stack
/// <summary>
/// Processes replayed message, if any. The actor's <see cref="PersistentActor.ReceiveRecover"/> is invoked 
/// with the replayed events.
/// 
/// If replay succeeds it switches to <see cref="Initialized"/> state and requests the highest stored sequence
/// number from the journal and <see cref="OnReplaySuccess"/> is called. Otherwise the <see cref="RecoveryFailure"/> 
/// is emitted with <see cref="OnReplayFailure"/> being called.
/// 
/// If processing fails, the exception is caught and stored for being thrown later and the state is changed
/// to <see cref="RecoveryFailed"/>.
/// 
/// All incoming messages are stashed.
/// </summary>
// ignore
// delay throwing exception to prepare restart
// FIXME what happens if RecoveryFailure is handled, i.e. actor is not stopped?
/// <summary>
/// Switches to <see cref="Idle"/> state and schedules the next update if <see cref="IsAutoUpdate"/> flag is set.
/// </summary>
/// <summary>
/// Consumes remaining replayed messages and switches to <see cref="PrepareRestart"/> state. Message that
/// caused an exception during replay is re-added to the mailbox and re-received in <see cref="PrepareRestart"/> state.
/// </summary>
// journal couldn't tell the maximum stored sequence number, hence the next
// replay must be a full replay (up to the highest stored sequence number)
// Recover(lastSequenceNr) is sent by preRestart
// ignore
/// <summary>
/// When receiving an <see cref="Update"/> event, switches to <see cref="ReplayStarted"/> state
/// and triggers an incremental message replay. For any other message invokes actor default behavior.
/// </summary>
/// <returns></returns>
// ignore
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Snapshot.cs
//-----------------------------------------------------------------------
// <copyright file="Snapshot.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Id of the persistent actor, from which the snapshot was taken.
/// </summary>
/// <summary>
/// Sequence number at which a snapshot was taken.
/// </summary>
/// <summary>
/// Time at which the snapshot was saved.
/// </summary>
/// <summary>
/// Sent to <see cref="PersistentActor"/> after successful saving of a snapshot.
/// </summary>
/// <summary>
/// Sent to <see cref="PersistentActor"/> after failed saving a snapshot.
/// </summary>
/// <summary>
/// Snapshot metadata.
/// </summary>
/// <summary>
/// A failure cause.
/// </summary>
/// <summary>
/// Offers a <see cref="PersistentActor"/> a previously saved snapshot during recovery.
/// This offer is received before any further replayed messages.
/// </summary>
/// <summary>
/// Selection criteria for loading and deleting a snapshots.
/// </summary>
/// <summary>
/// Upper bound for a selected snapshot's sequence number.
/// </summary>
/// <summary>
/// Upper bound for a selected snapshot's timestamp.
/// </summary>
/// <summary>
/// A selected snapshot matching <see cref="SnapshotSelectionCriteria"/>.
/// </summary>
/// <summary>
/// Instructs a snapshot store to load the snapshot.
/// </summary>
/// <summary>
/// Persistent actor identifier.
/// </summary>
/// <summary>
/// Criteria for selecting snapshot, from which the recovery should start.
/// </summary>
/// <summary>
/// Upper, inclusive sequence number bound for recovery.
/// </summary>
/// <summary>
/// Response to a <see cref="LoadSnapshot"/> message.
/// </summary>
/// <summary>
/// Loaded snapshot or null if none provided.
/// </summary>
/// <summary>
/// Instructs a snapshot store to save a snapshot.
/// </summary>
/// <summary>
/// Instructs a snapshot store to delete a snapshot.
/// </summary>
/// <summary>
/// Instructs a snapshot store to delete all snapshots that match provided criteria.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Snapshotter.cs
//-----------------------------------------------------------------------
// <copyright file="Snapshotter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Snapshot API on top of the internal snapshot protocol.
/// </summary>
/// <summary>
/// Snapshotter id.
/// </summary>
/// <summary>
/// Incrementable sequence number to use when taking a snapshot.
/// </summary>
/// <summary>
/// Orders to load a snapshots related to persistent actor identified by <paramref name="persistenceId"/>
/// that match specified <paramref name="criteria"/> up to provided <paramref name="toSequenceNr"/> upper, inclusive bound.
/// </summary>
/// <summary>
/// Saves <paramref name="snapshot"/> of current <see cref="ISnapshotter"/> state.
/// If saving succeeds, this snapshotter will receive a <see cref="SaveSnapshotSuccess"/> message,
/// otherwise <see cref="SaveSnapshotFailure"/> message.
/// </summary>
/// <summary>
/// Deletes snapshot identified by <paramref name="sequenceNr"/> and <paramref name="timestamp"/>.
/// </summary>
/// <summary>
/// Deletes all snapshots matching provided <paramref name="criteria"/>.
/// </summary>
/// <param name="criteria"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Fsm\PersistentFSM.cs
//-----------------------------------------------------------------------
// <copyright file="FSM.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Finite state machine (FSM) persistent actor.
/// </summary>
/// <typeparam name="TState">The state name type</typeparam>
/// <typeparam name="TData">The state data type</typeparam>
/// <typeparam name="TEvent">The event data type</typeparam>
// upcomingState.StateData;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Fsm\PersistentFSMBase.cs
//-----------------------------------------------------------------------
// <copyright file="FSM.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     State definitions
/// </summary>
/// <summary>
///     Timer handling
/// </summary>
/// <summary>
///     Transition handling
/// </summary>
/// <summary>
///     FSM state data and current timeout handling
/// </summary>
/// a
/// <summary>
///     Termination handling
/// </summary>
/// <summary>
///     Can be set to enable debugging on certain actions taken by the FSM
/// </summary>
/// <summary>
///     Current state name
/// </summary>
/// <summary>
///     Current state data
/// </summary>
/// <summary>
///     Return next state data (available in <see cref="OnTransition" /> handlers)
/// </summary>
/// <summary>
///     Unhandled event handler
/// </summary>
/// <summary>
///     Insert a new <see cref="StateFunction" /> at the end of the processing chain for the
///     given state. If the stateTimeout parameter is set, entering this state without a
///     differing explicit timeout setting will trigger a <see cref="FSMBase.StateTimeout" />.
/// </summary>
/// <param name="stateName">designator for the state</param>
/// <param name="func">delegate describing this state's response to input</param>
/// <param name="timeout">default timeout for this state</param>
/// <summary>
///     Sets the initial state for this FSM. Call this method from the constructor before the <see cref="Initialize" />
///     method.
///     If different state is needed after a restart this method, followed by <see cref="Initialize" />, can be used in the
///     actor
///     life cycle hooks <see cref="ActorBase.PreStart()" /> and <see cref="ActorBase.PostRestart" />.
/// </summary>
/// <param name="stateName">Initial state designator.</param>
/// <param name="stateData">Initial state data.</param>
/// <param name="timeout">State timeout for the initial state, overriding the default timeout for that state.</param>
/// <summary>
///     Produce transition to other state. Return this from a state function
///     in order to effect the transition.
/// </summary>
/// <param name="nextStateName">State designator for the next state</param>
/// <returns>State transition descriptor</returns>
/// <summary>
///     Produce transition to other state. Return this from a state function
///     in order to effect the transition.
/// </summary>
/// <param name="nextStateName">State designator for the next state</param>
/// <param name="stateData">Data for next state</param>
/// <returns>State transition descriptor</returns>
/// <summary>
///     Produce "empty" transition descriptor. Return this from a state function
///     when no state change is to be effected.
/// </summary>
/// <returns>Descriptor for staying in the current state.</returns>
/// <summary>
///     Produce change descriptor to stop this FSM actor with <see cref="FSMBase.Reason" /> <see cref="FSMBase.Normal" />
/// </summary>
/// <summary>
///     Produce change descriptor to stop this FSM actor with the specified <see cref="FSMBase.Reason" />.
/// </summary>
/// <summary>
///     Schedule named timer to deliver message after given delay, possibly repeating.
///     Any existing timer with the same name will automatically be canceled before adding
///     the new timer.
/// </summary>
/// <param name="name">identifier to be used with <see cref="CancelTimer" />.</param>
/// <param name="msg">message to be delivered</param>
/// <param name="timeout">delay of first message delivery and between subsequent messages.</param>
/// <param name="repeat">send once if false, scheduleAtFixedRate if true</param>
/// <summary>
///     Cancel a named <see cref="System.Threading.Timer" />, ensuring that the message is not subsequently delivered (no
///     race.)
/// </summary>
/// <param name="name">The name of the timer to cancel.</param>
/// <summary>
///     Determines whether the named timer is still active. Returns true
///     unless the timer does not exist, has previously been cancelled, or
///     if it was a single-shot timer whose message was already received.
/// </summary>
/// <summary>
///     Set the state timeout explicitly. This method can be safely used from
///     within a state handler.
/// </summary>
/// <summary>
///     Set handler which is called upon each state transition, i.e. not when
///     staying in the same state.
/// </summary>
/// <summary>
///     Set the handler which is called upon termination of this FSM actor. Calling this
///     method again will overwrite the previous contents.
/// </summary>
/// <summary>
///     Set handler which is called upon reception of unhandled FSM messages. Calling
///     this method again will overwrite the previous contents.
/// </summary>
/// <param name="stateFunction"></param>
/// <summary>
///     Verify the existence of initial state and setup timers. This should be the
///     last call within the constructor or <see cref="ActorBase.PreStart" /> and
///     <see cref="ActorBase.PostRestart" />.
/// </summary>
/// <summary>
///     C# port of Scala's orElse method for partial function chaining.
///     See http://scalachina.com/api/scala/PartialFunction.html
/// </summary>
/// <param name="original">The original <see cref="StateFunction" /> to be called</param>
/// <param name="fallback">The <see cref="StateFunction" /> to be called if <paramref name="original" /> returns null</param>
/// <returns>
///     A <see cref="StateFunction" /> which combines both the results of <paramref name="original" /> and
///     <paramref name="fallback" />
/// </returns>
//send the current state back as a reference point
/// <summary>
///     Call the <see cref="PersistentFSMBase.OnTermination" /> hook if you want to retain this behavior.
///     When overriding make sure to call base.PostStop();
///     Please note that this method is called by default from <see cref="ActorBase.PreRestart" /> so
///     override that one if <see cref="PersistentFSMBase.OnTermination" /> shall not be called during restart.
/// </summary>
/*
/// <summary>
///     By default, <see cref="Failure" /> is logged at error level and other
///     reason types are not logged. It is possible to override this behavior.
/// </summary>
/// <param name="reason"></param>
/// <summary>
///     Used in the event of a timeout between transitions
/// </summary>
/*
/// <summary>
///     This captures all of the managed state of the <see cref="PersistentFSM{T,S,E}" />: the state name,
///     the state data, possibly custom timeout, stop reason, and replies accumulated while
///     processing the last message.
/// </summary>
/// <typeparam name="TS">The name of the state</typeparam>
/// <typeparam name="TD">The data of the state</typeparam>
/// <typeparam name="TE">The event of the state</typeparam>
/// <summary>
///     Specify domain events to be applied when transitioning to the new state.
/// </summary>
/// <param name="events"></param>
/// <returns></returns>
/// <summary>
///     Specify domain event to be applied when transitioning to the new state.
/// </summary>
/// <param name="e"></param>
/// <returns></returns>
/// <summary>
///     Register a handler to be triggered after the state has been persisted successfully
/// </summary>
/// <param name="handler"></param>
/// <returns></returns>
/// <summary>
///     Modify state transition descriptor with new state data. The data will be set
///     when transitioning to the new state.
/// </summary>
/// <summary>
///     INTERNAL API
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Journal\AsyncRecovery.cs
//-----------------------------------------------------------------------
// <copyright file="AsyncRecovery.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Asynchronously replays persistent messages. Replay a message by calling <paramref name="replayCallback"/>.
/// Returned task must be completed then all messages (matching the sequence upper bounds) have been replayed.
/// If any of the persistent messages couldn't be replayed, task must return failure.
/// 
/// <paramref name="replayCallback"/> must be called with messages that have been marked as deleted.
/// </summary>
/// <param name="persistenceId">Persistent actor identifier</param>
/// <param name="fromSequenceNr">Inclusive sequence number where replay should start</param>
/// <param name="toSequenceNr">Inclusive sequence number where replay should end</param>
/// <param name="max">Maximum number of messages to be replayed</param>
/// <param name="replayCallback">Called to replay a message, may be called from any thread.</param>
/// <returns></returns>
/// <summary>
/// Asynchronously reads the highest stored sequence number for provided <paramref name="persistenceId"/>.
/// </summary>
/// <param name="persistenceId">Persistent actor identifier</param>
/// <param name="fromSequenceNr">Heuristic where to start searching for the highest sequence number</param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Journal\AsyncWriteJournal.cs
//-----------------------------------------------------------------------
// <copyright file="AsyncWriteJournal.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Asynchronously writes a batch of a persistent messages to the journal. The batch must be atomic,
/// i.e. all persistent messages in batch are written at once or none of them.
/// </summary>
/// <summary>
/// Asynchronously deletes all persistent messages up to inclusive <paramref name="toSequenceNr"/>
/// bound. If <paramref name="isPermanent"/> flag is clear, the persistent messages are marked as
/// deleted, otherwise they're permanently deleted.
/// </summary>
// Send read highest sequence number to persistentActor directly. No need
// to resequence the result relative to written and looped messages.
// Send replayed messages and replay result to persistentActor directly. No need
// to resequence replayed messages relative to written and looped messages.
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Journal\AsyncWriteProxy.cs
//-----------------------------------------------------------------------
// <copyright file="AsyncWriteProxy.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This exception is thrown when the replay inactivity exceeds a specified timeout.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AsyncReplayTimeoutException"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AsyncReplayTimeoutException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="AsyncReplayTimeoutException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Journal\EventAdapters.cs
//-----------------------------------------------------------------------
// <copyright file="EventAdapters.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <para>Facility to convert from and to specialised data models, as may be required by specialized persistence Journals.</para>
///
/// <para>Typical use cases include(but are not limited to):</para>
/// <para>- adding metadata, a.k.a. "tagging" - by wrapping objects into tagged counterparts</para>
/// <para>- manually converting to the Journals storage format, such as JSON, BSON or any specialised binary format</para>
/// <para>- adapting incoming events in any way before persisting them by the journal</para>
/// </summary>
/// <summary>
/// Return the manifest (type hint) that will be provided in the <see cref="FromJournal"/> method. Use empty string if not needed.
/// </summary>
/// <param name="evt"></param>
/// <returns></returns>
/// <summary>
/// <para>Convert domain event to journal event type.</para>
///
/// <para>Some journal may require a specific type to be returned to them,
/// for example if a primary key has to be associated with each event then a journal
/// may require adapters to return "EventWithPrimaryKey(event, key)".</para>
///
/// <para>The <see cref="ToJournal"/> adaptation must be an 1-to-1 transformation.
/// It is not allowed to drop incoming events during the `toJournal` adaptation.</para>
/// </summary>
/// <param name="evt">the application-side domain event to be adapted to the journal model</param>
/// <returns>the adapted event object, possibly the same object if no adaptation was performed</returns>
/// <summary>
/// <para>Convert a event from its journal model to the applications domain model.</para>
///
/// <para>One event may be adapter into multiple(or none) events which should be delivered to the <see cref="PersistentActor"/>.
/// Use the specialised <see cref="EventSequence.Single"/> method to emit exactly one event,
/// or <see cref="EventSequence.Empty"/> in case the adapter is not handling this event. Multiple <see cref="IEventAdapter"/> instances are
/// applied in order as defined in configuration and their emitted event seqs are concatenated and delivered in order
/// to the PersistentActor.</para>
/// </summary>
/// <param name="evt">event to be adapted before delivering to the PersistentActor</param>
/// <param name="manifest">optionally provided manifest(type hint) in case the Adapter has stored one for this event. Use empty string if none.</param>
/// <returns>sequence containing the adapted events (possibly zero) which will be delivered to the PersistentActor</returns>
// A Map of handler from alias to implementation (i.e. class implementing Akka.Serialization.ISerializer)
// For example this defines a handler named 'country': `"country" -> com.example.comain.CountryTagsAdapter`
// bindings is a enumerable of key-val representing the mapping from Type to handler.
// It is primarily ordered by the most specific classes first, and secondly in the configured order.
// bindings are ordered from most specific to least specific
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Journal\EventSequences.cs
//-----------------------------------------------------------------------
// <copyright file="EventSequences.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Journal\MemoryJournal.cs
//-----------------------------------------------------------------------
// <copyright file="MemoryJournal.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// In-memory journal for testing purposes.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Journal\SyncWriteJournal.cs
//-----------------------------------------------------------------------
// <copyright file="SyncWriteJournal.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Synchronously writes a batch of a persistent messages to the journal. The batch must be atomic,
/// i.e. all persistent messages in batch are written at once or none of them.
/// </summary>
/// <summary>
/// Synchronously deletes all persistent messages up to inclusive <paramref name="toSequenceNr"/>
/// bound. If <paramref name="isPermanent"/> flag is clear, the persistent messages are marked as
/// deleted, otherwise they're permanently deleted.
/// </summary>
/* do nothing */ }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Journal\WriteJournal.cs
//-----------------------------------------------------------------------
// <copyright file="WriteJournal.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//protected IEnumerable<IPersistentRepresentation> CreatePersistentBatch(IEnumerable<IPersistentEnvelope> resequencables)
//{
//    return resequencables.Where(PreparePersistentWrite).Cast<IPersistentRepresentation>();
//}
// IdentityEventAdapter returns "" as manifest and normally the incoming PersistentRepr
// doesn't have an assigned manifest, but when WriteMessages is sent directly to the
// journal for testing purposes we want to preserve the original manifest instead of
// letting IdentityEventAdapter clearing it out.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Serialization\MessageSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="MessageSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Serialization\SnapshotSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="SnapshotSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Wrapper for snapshot data.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Serialization\Proto\PersistenceMessages.cs
//-----------------------------------------------------------------------
// <copyright file="PersistenceMessages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs
//-----------------------------------------------------------------------
// <copyright file="LocalSnapshotStore.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Storage location of snapshot files;
/// </summary>
/// <summary>
/// Dispatcher for streaming snapshot IO.
/// </summary>
/// <summary>
/// Number of attempts made to load a subsequent snapshots in case they were corrupted.
/// </summary>
// remove .tmp extension and rename
// guaranteed to be not null in previous constraint
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence\Snapshot\SnapshotStore.cs
//-----------------------------------------------------------------------
// <copyright file="SnapshotStore.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Sender is PersistentActor
// Sender is PersistentActor
/// <summary>
/// Asynchronously loads a snapshot.
/// </summary>
/// <summary>
/// Asynchronously saves a snapshot.
/// </summary>
/// <summary>
/// Called after successful saving a snapshot.
/// </summary>
/// <summary>
/// Deletes the snapshot identified by <paramref name="metadata"/>.
/// </summary>
/// <summary>
/// Deletes all snapshots matching provided <paramref name="criteria"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.TestKit\PluginSpec.cs
//-----------------------------------------------------------------------
// <copyright file="PluginSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//if (disposing) FSMBase.Shutdown();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.TestKit\Journal\JournalSpec.cs
//-----------------------------------------------------------------------
// <copyright file="JournalSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Initializes a journal with set o predefined messages.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.TestKit\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.TestKit\Snapshot\SnapshotStoreSpec.cs
//-----------------------------------------------------------------------
// <copyright file="SnapshotStoreSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This spec aims to verify custom <see cref="SnapshotStore"/> implementations. 
/// Every custom authors snapshot store spec should have it's spec suite included.
/// </summary>
/// <summary>
/// Initializes a snapshot store with set of predefined snapshots.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.TestKit.Tests\Cleanup.cs
//-----------------------------------------------------------------------
// <copyright file="Cleanup.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.TestKit.Tests\LocalSnapshotStoreSpec.cs
//-----------------------------------------------------------------------
// <copyright file="LocalSnapshotStoreSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.TestKit.Tests\MemoryJournalSpec.cs
//-----------------------------------------------------------------------
// <copyright file="MemoryJournalSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.TestKit.Tests\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\AtLeastOnceDeliveryCrashSpec.cs
//-----------------------------------------------------------------------
// <copyright file="AtLeastOnceDeliveryCrashSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\AtLeastOnceDeliveryFailureSpec.cs
//-----------------------------------------------------------------------
// <copyright file="AtLeastOnceDeliveryFailureSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// journal failed during recovery, throw exception to re-recover persistent actor
// inform sender about journaling failure so that it can resend
// ok, will be redelivered
// by sender
// by destination
// recovery of the new instance should have same outcome
// by sender
// destination won't receive message again, because all of the has already been confirmed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\AtLeastOnceDeliveryReceiveActorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="AtLeastOnceDeliverySpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//FIXME: change to Akka.Actor.ActorPath when serialization problems will be solved
// a-3 was lost ...
// ... and then redelivered
// a-3 was lost ...
// ... trigger restart ...
// ... and then redeliver
// a-2 was lost
// a-4 was lost
// trigger restart
// and redeliver
// redelivered
// a-4 was redelivered but lost again
// redelivered
//FIXME: expression below works, just for some reason won't fit in 10 sec. interval
// redelivered, 3th time
// a-3 was lost
// after snapshot succeed
// trigger restart
// and then redelivered
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\AtLeastOnceDeliverySpec.cs
//-----------------------------------------------------------------------
// <copyright file="AtLeastOnceDeliverySpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//FIXME: change to Akka.Actor.ActorPath when serialization problems will be solved
// a-3 was lost ...
// ... and then redelivered
// a-3 was lost ...
// ... trigger restart ...
// ... and then redeliver
// a-2 was lost
// a-4 was lost
// trigger restart
// and redeliver
// redelivered
// a-4 was redelivered but lost again
// redelivered
//FIXME: expression below works, just for some reason won't fit in 10 sec. interval
// redelivered, 3th time
// a-3 was lost
// after snapshot succeed
// trigger restart
// and then redelivered
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\EndToEndEventAdapterSpec.cs
//-----------------------------------------------------------------------
// <copyright file="EndToEndEventAdapterSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\MemoryEventAdapterSpec.cs
//-----------------------------------------------------------------------
// <copyright file="MemoryEventAdapterSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// don't unpack, just pass through the JournalModel
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\PersistenceSpec.cs
//-----------------------------------------------------------------------
// <copyright file="PersistenceSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//.Select(x => x.ToString())
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\PersistentActorFailureSpec.cs
//-----------------------------------------------------------------------
// <copyright file="PersistentActorFailureSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: remove akka.actor.serialize-messages=off when Props serialization will be resolved (github issue: #569)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\PersistentActorSpec.Actors.cs
//-----------------------------------------------------------------------
// <copyright file="PersistentActorSpec.Actors.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// sending ourself a normal message here also tests
// that we stash them until recovery is complete
//FIXME: after persisting Evt(c) messages are unstashed onto actor cell mailbox,
// but then actor becomes terminated and messages land inside death letters
// sending ourself a normal message tests
// that we stash them until recovery is complete
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\PersistentActorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="PersistentActorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// cmd that was added to state before failure (b-10) is not replayed ...
// for some reason after this line of code test hangs
// each command = 1 reply + 3 event-replies
// range(3, 30) is equivalent of Scala (3 to 32)
// sanity check, the setting of Sender for PersistentRepresentation is handled by PersistentActor currently
// but as we want to remove it soon, keeping the explicit test here.
// persist
// persist async, but ordering enforced by sync persist below
// persist
// persist, must be before next command
// ea2 is PersistAsyn, b can be processed before it
// persist, must be before next command
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\PersistentViewSpec.Actors.cs
//-----------------------------------------------------------------------
// <copyright file="PersistentViewSpec.Actors.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// do nothing
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\PersistentViewSpec.cs
//-----------------------------------------------------------------------
// <copyright file="PersistentViewSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: performance optimization 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\ReceivePersistentActorTests.cs
//-----------------------------------------------------------------------
// <copyright file="ReceivePersistentActorTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Given
//When
//Then
//Given
// when
//Then
//Given
//When
//Then
//We expect a exception was thrown when the actor called Receive, and that it was sent back to us
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
/// <summary>
/// Initialize test journal using provided events.
/// </summary>
// no command here
// no recover here
//Predicate first, when i < 5
//Predicate after, when 5 <= i < 10
//Func,            when 10 <= i < 15
//Null predicate,  when i >= 15
//The handler above should never be invoked
//Predicate first, when i < 5
//Predicate after, when 5 <= i < 10
//Func,            when 10 <= i < 15
//Null predicate,  when i >= 15
//The handler above should never be invoked
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\ReceivePersistentActorTests_Become.cs
//-----------------------------------------------------------------------
// <copyright file="ReceivePersistentActorTests_Become.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Given
//When
//Switch to state2   
//Then
//When
//Switch to state3
//Then
//Given
//Switch to state2
//Switch to state3
//When
//Switch back to state2
//Then
//Given
//When
//Then
//When
//Switch back to state2
//Then
//When
//Switch back to state1
//Then
//When
//should still be in state1
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\ReceivePersistentActorTests_LifeCycle.cs
//-----------------------------------------------------------------------
// <copyright file="ReceivePersistentActorTests_LifeCycle.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\SnapshotSpec.cs
//-----------------------------------------------------------------------
// <copyright file="SnapshotSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// recover persistentActor and the delete first three (= all) snapshots
// recover persistentActor from replayed messages (all snapshots deleted)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\Fsm\PersistentFSMSpec.cs
//-----------------------------------------------------------------------
// <copyright file="PersistentFSMSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//var addItem = ((AddItem)@event)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\Journal\ChaosJournal.cs
//-----------------------------------------------------------------------
// <copyright file="ChaosJournal.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Persistence.Tests\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: CollectionBehavior(DisableTestParallelization = true)]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\AckedDelivery.cs
//-----------------------------------------------------------------------
// <copyright file="AckedDelivery.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Implements a 64-bit sequence number with proper overflow ordering
/// </summary>
/// <summary>
/// Checks if this sequence number is an immediate successor of the provided one.
/// </summary>
/// <param name="that">The second sequence number that has to be exactly one less</param>
/// <returns>true if this sequence number is the successor of the provided one</returns>
/// <summary>
/// Implements wrap-around comparison, in the event of a 64-bit overflow
/// </summary>
/// <summary>
/// Messages that are to be buffered in an <see cref="AckedSendBuffer{T}"/> or <see cref="AckedReceiveBuffer{T}"/> has
/// to implement this interface to provide the sequence needed by the buffers
/// </summary>
/// <summary>
/// Sequence number of the message
/// </summary>
/// <summary>
/// Class representing an acknowledgement with select negative acknowledgements.
/// </summary>
/// <param name="cumulativeAck">Represents the highest sequence number received</param>
/// <param name="nacks">Set of sequence numbers between the last delivered one and <paramref name="cumulativeAck"/> that has not been received.</param>
/// <summary>
/// Class representing an acknowledgement with select negative acknowledgements.
/// </summary>
/// <param name="cumulativeAck">Represents the highest sequence number received</param>
/// <summary>
/// This exception is thrown when the Resent buffer is filled beyond its capacity.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ResendBufferCapacityReachedException"/> class.
/// </summary>
/// <param name="c">The capacity of the buffer</param>
/// <summary>
/// Initializes a new instance of the <see cref="ResendBufferCapacityReachedException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// This exception is thrown when the system is unable to fulfill a resend request since negatively acknowledged payload is no longer in buffer.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ResendUnfulfillableException"/> class.
/// </summary>
/// <summary>
/// Implements an immutable resend buffer that buffers messages until they have been acknowledged. Properly removes messages
/// when an <see cref="Ack"/> is received. This buffer works together with <see cref="AckedReceiveBuffer{T}"/> on the receiving end.
/// </summary>
/// <typeparam name="T">The type of message being stored - has to implement <see cref="IHasSequenceNumber"/></typeparam>
/// <summary>
/// Processes an incoming acknowledgement and returns a new buffer with only unacknowledged elements remaining.
/// </summary>
/// <param name="ack">The received acknowledgement</param>
/// <exception cref="ResendUnfulfillableException">Thrown if we couldn't fit all of the nacks stored inside <see cref="Ack"/> onto the buffer.</exception>
/// <returns>An updated buffer containing the remaining unacknowledged messages</returns>
/// <summary>
/// Puts a new message in the buffer. 
/// </summary>
/// <param name="msg">The message to be stored for possible future transmission.</param>
/// <exception cref="ArgumentException">Thrown if an out-of-sequence message is attempted to be stored.</exception>
/// <exception cref="ResendBufferCapacityReachedException">Thrown if the resend buffer is beyond its capacity.</exception>
/// <returns>The updated buffer.</returns>
/// <summary>
/// Helper class that makes it easier to work with <see cref="AckedReceiveBuffer{T}"/> deliverables.
/// </summary>
/// <summary>
/// Implements an immutable receive buffer that buffers incoming messages until they can be safely delivered. This
/// buffer works together with an <see cref="AckedSendBuffer{T}"/> on the sender() side.
/// </summary>
/// <typeparam name="T">The type of messages being buffered; must implement <see cref="IHasSequenceNumber"/>.</typeparam>
/// <summary>
/// Constructor
/// </summary>
/// <param name="lastDelivered">Sequence number of the last message that has been delivered.</param>
/// <param name="cumulativeAck">The highest sequence number received so far</param>
/// <param name="buffer">Buffer of messages that are waiting for delivery.</param>
/// <summary>
/// Puts a sequenced message in the receive buffer returning a new buffer.
/// </summary>
/// <param name="arrivedMsg">Message to be put into the buffer</param>
/// <returns>The updated buffer containing the message</returns>
/// <summary>
/// Extract all messages that could be safely delivered, an updated ack to be sent to the sender(), and
/// an updated buffer that has the messages removed that can be delivered.
/// </summary>
/// <returns>Triplet of the updated buffer, messages that can be delivered, and the updated acknowledgement.</returns>
//in Java, there are no overflow / underflow exceptions so the value rolls over. We have to explicitly squelch those errors in .NET
// Collect all missing sequence numbers (gaps)
/// <summary>
/// Merges two receive buffers. Merging preserves sequencing of messages, and drops all messages that has been
/// safely acknowledged by any of the participating buffers. Also updates the expected sequence numbers.
/// </summary>
/// <param name="other">The receive buffer to merge with</param>
/// <returns>The merged receive buffer</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\AddressUidExtension.cs
//-----------------------------------------------------------------------
// <copyright file="AddressUidExtension.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <see cref="IExtension"/> provider for <see cref="AddressUid"/>
/// </summary>
/// <summary>
/// Extension that holds a UID that is assigned as a random 'Int'.
/// 
/// The UID is intended to be used together with an <see cref="Address"/> to be
/// able to distinguish restarted actor system using the same host and port.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\AkkaProtocolSettings.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaProtocolSettings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\AssociationEvent.cs
//-----------------------------------------------------------------------
// <copyright file="AssociationEvent.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Deadline.cs
//-----------------------------------------------------------------------
// <copyright file="Deadline.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Import of the scala.concurrent.duration.Deadline class
/// </summary>
/// <summary>
/// Warning: creates a new <see cref="TimeSpan"/> instance each time it's used
/// </summary>
/// <summary>
/// Returns a deadline that is due <see cref="DateTime.UtcNow"/>
/// </summary>
/// <summary>
/// Adds a given <see cref="TimeSpan"/> to the due time of this <see cref="Deadline"/>
/// </summary>
/// <summary>
/// Adds a given <see cref="Nullable{TimeSpan}"/> to the due time of this <see cref="Deadline"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\DeadlineFailureDetector.cs
//-----------------------------------------------------------------------
// <copyright file="DeadlineFailureDetector.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Implementation of failure detector using an absolute timeout of missing heartbeats
/// to trigger unavailability
/// </summary>
/// <summary>
/// Procedural constructor for <see cref="DeadlineFailureDetector"/>
/// </summary>
/// <param name="acceptableHeartbeatPause">Duration corresponding to number of potentially lost/delayed
/// heartbeats that will be accepted before considering it to be an anomaly.
/// This margin is important to be able to survive sudden, occasional, pauses in heartbeat
/// arrivals, due to for example garbage collect or network drop.</param>
/// <param name="clock">The clock, returning current time in milliseconds, but can be faked for testing
/// purposes. It is only used for measuring intervals (duration).</param>
/// <summary>
/// Constructor that reads parameters from an Akka <see cref="Config"/> section.
/// Expects property 'acceptable-heartbeat-pause'.
/// </summary>
/// <param name="config"></param>
/// <param name="ev"></param>
//treat unmanaged connections, e.g. with zero heartbeats, as healthy connections
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\DefaultFailureDetectorRegistry.cs
//-----------------------------------------------------------------------
// <copyright file="DefaultFailureDetectorRegistry.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A lock-less, thread-safe implementation of <see cref="IFailureDetectorRegistry{T}"/>.
/// </summary>
/// <typeparam name="T"></typeparam>
/// <summary>
/// Instantiates the DefaultFailureDetectorRegistry an uses a factory method for creating new instances
/// </summary>
/// <param name="factory"></param>
//First one wins and creates the new FailureDetector
// First check for non-existing key wa outside the lock, and a second thread might just have released the lock
// when this one acquired it, so the second check is needed (double-check locking pattern)
//if we won the race then update else try again
// if we won the race then update else try again
/// <summary>
/// Get the underlying <see cref="FailureDetector"/> for a resource.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Endpoint.cs
//-----------------------------------------------------------------------
// <copyright file="Endpoint.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// </summary>
// ReSharper disable once InconsistentNaming
/// <summary>
/// INTERNAL API
/// </summary>
// message is intended for the RemoteDaemon, usually a command to create a remote actor
//message is intended for a local recipient
//run the receive logic for ActorSelectionMessage here to make sure it is not stuck on busy user actor
// message is intended for a remote-deployed recipient
//if it was originally addressed to us but is in fact remote from our point of view (i.e. remote-deployed)
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// INTERNAL API
/// 
/// <remarks>
/// [Aaronontheweb] so this class is responsible for maintaining a buffer of retriable messages in
/// Akka and it expects an ACK / NACK response pattern before it considers a message to be sent or received.
/// 
/// Currently AkkaDotNet does not have any form of guaranteed message delivery in the stack, since that was
/// considered outside the scope of V1. However, this class needs to be revisited and updated to support it,
/// along with others.
/// 
/// For the time being, the class remains just a proxy for spawning <see cref="EndpointWriter"/> actors and
/// forming any outbound associations.
/// </remarks>
/// </summary>
/// <summary>
/// Processing of <see cref="Ack"/>s has to be delayed until the UID is discovered after a reconnect. Depending whether the
/// UID matches the expected one, pending Acks can be processed or must be dropped. It is guaranteed that for any inbound
/// connections (calling <see cref="CreateWriter"/>) the first message from that connection is <see cref="GotUid"/>, therefore it serves
/// a separator.
/// 
/// If we already have an inbound handle then UID is initially confirmed.
/// (This actor is never restarted.)
/// </summary>
//Trying to serve untilour last breath
// Cumulative ack is progressing, we might not need to resend non-acked messages yet.
// If this progression stops, the timer will eventually kick in, since scheduleAutoResend
// does not cancel existing timers (see the "else" case).
//New system that has the same address as the old - need to start from fresh state
//forward the request
// If we talk to a system we have not talked to before (or has given up talking to in the past) stop
// system delivery attempts after the specified time. This act will drop the pending system messages and gate the
// remote address at the EndpointManager level stopping this actor. In case the remote system becomes reachable
// again it will be immediately quarantined due to out-of-sync system message buffer and becomes quarantined.
// In other words, this action is safe.
//Resending will be triggered by the incoming GotUid message after the connection finished
//Resending will be triggered by the incoming GotUid message after the connection finished
//Resending will be triggered by the incoming GotUid message after the connection finished
//Clear buffer to prevent sending system messages to dead letters -- at this point we are shutting down and
//don't know if they were properly delivered or not
//If we have not confirmed the remote UID we cannot transfer the system message at this point, so just buffer it.
// GotUid will kick ResendAll causing the messages to be properly written.
/// <summary>
/// Abstract base class for <see cref="EndpointReader"/> classes
/// </summary>
/// <summary>
/// INTERNAL API.
/// 
/// Abstract base class for Endpoint writers that require a <see cref="FSM{TS,TD}"/> implementation.
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
// Use an internal buffer instead of Stash for efficiency
// stash/unstashAll is slow when many messages are stashed
// IMPORTANT: sender is not stored, so sender() and forward must not be used in EndpointWriter
//buffer for IPriorityMessages - ensures that heartbeats get delivered before user-defined messages
//we're going to throw an exception anyway
//This should never be hit.
//Flushing is postponed after the pending writes
//enough
// initializing, buffer and take care of it later when buffer is sent
// Shutdown old reader
//ignore
// 1 ms
// FIXME remove these counters when tuning/testing is completed
//Try to send last Ack message
//todo: RemoteMetrics https://github.com/akka/akka/blob/dc0547dd73b54b5de9c3e0b45a21aa865c5db8e2/akka-remote/src/main/scala/akka/remote/Endpoint.scala#L742
// FIXME remove this when testing/tuning is completed
// These settings are not configurable because wrong configuration will break the auto-tuning
// 0.3 ms
// 2 ms
// 5 s, in nanoseconds
/// <summary>
/// This message signals that the current association maintained by the local <see cref="EndpointWriter"/> and
/// <see cref="EndpointReader"/> is to be overridden by a new inbound association. This is needed to avoid parallel inbound
/// associations from the same remote endpoint: when a parallel inbound association is detected, the old one is removed and the new
/// one is used instead.
/// </summary>
/// <summary>
/// Create a new TakeOver command
/// </summary>
/// <param name="protocolHandle">The handle of the new association</param>
/// <param name="replyTo"></param>
/// <summary>
/// INTERNAL API
/// </summary>
// Notify writer that some messages can be acked
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\EndpointManager.cs
//-----------------------------------------------------------------------
// <copyright file="EndpointManager.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// Indicates that the policy does not contain an active endpoint, but it is a tombstone of a previous failure
/// </summary>
/// <summary>
/// We will always accept a 
/// </summary>
/// <summary>
/// A Gated node can't be connected to from this process for <see cref="TimeOfRelease"/>,
/// but we may accept an inbound connection from it if the remote node recovers on its own.
/// </summary>
/// <summary>
/// We do not accept connection attempts for a quarantined node until it restarts and resets its UID.
/// </summary>
/// <summary>
/// Messages sent between <see cref="Remoting"/> and <see cref="EndpointManager"/>
/// </summary>
/// <summary>
/// Can be null!
/// </summary>
/// <summary>
/// Helper class to store address pairs
/// </summary>
/// <summary>
/// Overrode this to make sure that the <see cref="ReliableDeliverySupervisor"/> can correctly store
/// <see cref="AckedReceiveBuffer{T}"/> data for each <see cref="Link"/> individually, since the HashCode
/// is what Dictionary types use internally for equality checking by default.
/// </summary>
/// <summary>
/// Mapping between addresses and endpoint actors. If passive connections are turned off, incoming connections
/// will not be part of this map!
/// </summary>
/// <summary>
/// Used to indicate when an abrupt shutdown occurs
/// </summary>
/// <summary>
/// Mapping between transports and the local addresses they listen to
/// </summary>
//PruneInterval = 2x the RetryGateClosedFor value, if available
/// <summary>
/// Cancelable for terminating <see cref="Prune"/> operations.
/// </summary>
//no logging
// Remaining running endpoints are children, so they will clean up themselves.
// We still need to clean up any remaining transports because handles might be in mailboxes, and for example
// Netty is not part of the actor hierarchy, so its handles will not be cleaned up if no actor is taking
// responsibility of them (because they are sitting in a mailbox).
/*
//Register a listener to each transport and collect mapping to addresses
// defer the inbound association until we can enter "Accepting" behavior
// transports are all started. Ready to start accepting inbound associations.
/// <summary>
/// Message-processing behavior when the <see cref="EndpointManager"/> is able to accept
/// inbound association requests.
/// </summary>
/// <param name="message">Messages from local system and the network.</param>
/*
//Stop writers
//Stop inbound read-only association
// timeOfRelease is only used for garbage collection reasons, therefore it is ignored here. We still have
// the Quarantined tombstone and we know what UID we don't want to accept, so use it.
//Shutdown all endpoints and signal to Sender when ready (and whether all endpoints were shutdown gracefully)
// The construction of the Task for shutdownStatus has to happen after the flushStatus future has been finished
// so that endpoints are shut down before transports.
//Ignore all other writes
/*
//Loads the driver -- the bottom element of the chain
//The chain at this point:
//  Driver
// ReSharper disable once AssignNullToNotNullAttribute
//Iteratively decorates the bottom level driver with a list of adapters
//The chain at this point:
//  Adapter <-- .. <-- Adapter <-- Driver
//Apply AkkaProtocolTransport wrapper to the end of the chain
//The chain at this point:
// AkkaProtocolTransport <-- Adapter <-- .. <-- Adapter <-- Driver
// Collect all transports, listen addresses, and listener promises in one Task
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\EndpointRegistry.cs
//-----------------------------------------------------------------------
// <copyright file="EndpointRegistry.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Not threadsafe - only to be used in HeadActor
/// </summary>
//don't throw if the prune timer didn't get a chance to run first
//if there is already a tombstone directive, leave it there
//otherwise, remove this address from the writeable address range
/// <summary>
/// Marking an endpoint as failed means that we will not try to connect to the remote system within
/// the gated period but it is ok for the remote system to try to connect with us (inbound-only.)
/// </summary>
/// <summary>
/// Internal function used for filtering endpoints that need to be pruned due to non-recovery past their deadlines
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\FailureDetector.cs
//-----------------------------------------------------------------------
// <copyright file="FailureDetector.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A failure detector must be a thread-safe, mutable construct that registers heartbeat events of a resource and
/// is able to decide the availability of that monitored resource
/// </summary>
/// <summary>
/// Returns true if the resource is considered to be up and healthy; false otherwise
/// </summary>
/// <summary>
/// Returns true if the failure detector has received any heartbeats and started monitoring
/// the resource
/// </summary>
/// <summary>
/// Notifies the <see cref="FailureDetector"/> that a heartbeat arrived from the monitored resource.
/// This causes the <see cref="FailureDetector"/> to update its state.
/// </summary>
//fixed: sign will no longer flip, but the tickcount will go back down to zero every 24.9 days 
/// <summary>
/// Abstraction of a clock that returns time in milliseconds. Can only be used to measure the elapsed time
/// and is not related to any other notion of system or wall-clock time.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\FailureDetectorRegistry.cs
//-----------------------------------------------------------------------
// <copyright file="FailureDetectorRegistry.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Interface for a registry of Akka <see cref="FailureDetector"/>s. New resources are implicitly registered when heartbeat is first
/// called with the resource given as parameter.
/// </summary>
/// <summary>
/// Returns true if the resource is considered to be up and healthy, false otherwise.
/// For unregistered resources it returns true.
/// </summary>
/// <summary>
/// Returns true if the failure detector has received any heartbeats and started monitoring
/// the resource.
/// </summary>
/// <summary>
/// Records a heartbeat for a resource. If the resource is not yet registered (i.e. this is the first heartbeat) then
/// is it automatically registered.
/// </summary>
/// <summary>
/// Remove the heartbeat management for a resource
/// </summary>
/// <summary>
/// Removes all resources and any associated failure detector state.
/// </summary>
/// <summary>
/// INTERNAL API
/// 
/// Utility class to create <see cref="FailureDetector"/> instances via reflection.
/// </summary>
/// <summary>
/// Loads an instantiates a given <see cref="FailureDetector"/> implementation. The class to be loaded must have a constructor
/// that accepts a <see cref="Config"/> and an <see cref="EventStream"/> parameter. Will throw <see cref="ConfigurationException"/>
/// if the implementation cannot be loaded.
/// </summary>
/// <param name="fqcn">The fully-qualified .NET assembly name of the FailureDetector implementation class to be loaded.</param>
/// <param name="config">Configuration that will be passed to the implementation.</param>
/// <param name="system">ActorSystem to be used for loading the implementation.</param>
/// <returns>A configured instance of the given <see cref="FailureDetector"/> implementation.</returns>
/// <summary>
/// Loads an instantiates a given <see cref="FailureDetector"/> implementation. The class to be loaded must have a constructor
/// that accepts a <see cref="Config"/> and an <see cref="EventStream"/> parameter. Will throw <see cref="ConfigurationException"/>
/// if the implementation cannot be loaded.
/// </summary>
/// <param name="fqcn">The fully-qualified .NET assembly name of the FailureDetector implementation class to be loaded.</param>
/// <param name="config">Configuration that will be passed to the implementation.</param>
/// <param name="context">The ActorContext used to resolve an <see cref="ActorSystem"/> for this <see cref="FailureDetector"/> instance.</param>
/// <returns>A configured instance of the given <see cref="FailureDetector"/> implementation.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\MessageSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="MessageSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Class MessageSerializer.
/// </summary>
/// <summary>
/// Deserializes the specified message.
/// </summary>
/// <param name="system">The system.</param>
/// <param name="messageProtocol">The message protocol.</param>
/// <returns>System.Object.</returns>
/// <summary>
/// Serializes the specified message.
/// </summary>
/// <param name="system">The system.</param>
/// <param name="address"></param>
/// <param name="message">The message.</param>
/// <returns>SerializedMessage.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\PhiAccrualFailureDetector.cs
//-----------------------------------------------------------------------
// <copyright file="PhiAccrualFailureDetector.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/**
//ddg.jaist.ac.jp/pub/HDY+04.pdf]
/// <summary>
/// Procedural constructor for PhiAccrualDetector
/// </summary>
/// <param name="threshold">A low threshold is prone to generate many wrong suspicions but ensures a quick detection in the event
/// of a real crash. Conversely, a high threshold generates fewer mistakes but needs more time to detect actual crashes</param>
/// <param name="maxSampleSize">Number of samples to use for calculation of mean and standard deviation of inter-arrival times.</param>
/// <param name="minStdDeviation">Minimum standard deviation to use for the normal distribution used when calculating phi.
/// Too low standard deviation might result in too much sensitivity for sudden, but normal, deviations 
/// in heartbeat inter arrival times.</param>
/// <param name="acceptableHeartbeatPause">Duration corresponding to number of potentially lost/delayed
/// heartbeats that will be accepted before considering it to be an anomaly.
/// This margin is important to be able to survive sudden, occasional, pauses in heartbeat
/// arrivals, due to for example garbage collect or network drop.</param>
/// <param name="firstHeartbeatEstimate">Bootstrap the stats with heartbeats that corresponds to
/// to this duration, with a with rather high standard deviation (since environment is unknown
/// in the beginning)</param>
/// <param name="clock">The clock, returning current time in milliseconds, but can be faked for testing
/// purposes. It is only used for measuring intervals (duration).</param>
/// <summary>
/// Constructor that reads parameters from config.
/// Expecting config properties named 'threshold', 'max-sample-size',
/// 'min-std-deviation', 'acceptable-heartbeat-pause', and 'heartbeat-interval'.
/// </summary>
/// <summary>
/// Guess statistics for first heartbeat,
/// important so that connections with only one heartbeat becomes unavailable
/// </summary>
//bootstrap with 2 entries with rather high standard deviation
/// <summary>
/// Uses volatile memory and immutability for lockless concurrency.
/// </summary>
//this is a heartbeat for a new resource
//add starter records for this new resource
//this is a known connection
//don't use the first heartbeat after failure for the history, since a long pause will skew the stats
//if we won the race then update else try again
//treat unmanaged connections, e.g. with zero heartbeats, as healthy connections
/// <summary>
///  Calculation of phi, derived from the Cumulative distribution function for
/// N(mean, stdDeviation) normal distribution, given by
/// 1.0 / (1.0 + math.exp(-y * (1.5976 + 0.070566 * y * y)))
/// where y = (x - mean) / standard_deviation
/// This is an approximation defined in β Mathematics Handbook (Logistic approximation).
///  Error is 0.00014 at +- 3.16
/// The calculated value is equivalent to -log10(1 - CDF(y))
/// </summary>
/// <summary>
/// Holds the heartbeat statistics for a specific node <see cref="Address"/>.
/// It is capped by the number of samples specified in 'maxSampleSize.'
/// 
/// The stats (mean, variance, stdDeviation) are not defined for empty
/// <see cref="HeartbeatHistory"/>, i.e. throws Exception
/// </summary>
//recurse
/// <summary>
/// Create an empty <see cref="HeartbeatHistory"/> without any history.
/// Can only be used as starting point for appending intervals.
/// The stats (mean, variance, stdDeviation) are not defined for empty
/// HeartbeatHistory and will throw DivideByZero exceptions
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\RemoteActorRef.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteActorRef.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Marker interface for Actors that are deployed in a remote scope
/// </summary>
// ReSharper disable once InconsistentNaming
/// <summary>
/// Class RemoteActorRef.
/// </summary>
/// <summary>
/// The deploy
/// </summary>
/// <summary>
/// The parent
/// </summary>
/// <summary>
/// The props
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RemoteActorRef"/> class.
/// </summary>
/// <param name="remote">The remote.</param>
/// <param name="localAddressToUse">The local address to use.</param>
/// <param name="path">The path.</param>
/// <param name="parent">The parent.</param>
/// <param name="props">The props.</param>
/// <param name="deploy">The deploy.</param>
/// <summary>
/// Gets the local address to use.
/// </summary>
/// <value>The local address to use.</value>
/// <summary>
/// Gets the remote.
/// </summary>
/// <value>The remote.</value>
/// <summary>
/// Gets the parent.
/// </summary>
/// <value>The parent.</value>
/// <summary>
/// Gets the provider.
/// </summary>
/// <value>The provider.</value>
/// <summary>
/// Gets the child.
/// </summary>
/// <param name="name">The name.</param>
/// <returns>ActorRef.</returns>
/// <exception cref="System.NotImplementedException"></exception>
/// <summary>
/// Resumes the specified caused by failure.
/// </summary>
/// <param name="causedByFailure">The caused by failure.</param>
/// <summary>
/// Stops this instance.
/// </summary>
/// <summary>
/// Restarts the specified cause.
/// </summary>
/// <param name="cause">The cause.</param>
/// <summary>
/// Suspends this instance.
/// </summary>
/// <summary>
/// Sends the system message.
/// </summary>
/// <param name="message">The message.</param>
/// <summary>
/// Tells the internal.
/// </summary>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <summary>
/// Starts this instance.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\RemoteActorRefProvider.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteActorRefProvider.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// </summary>
/* these are only available after Init() is called */
/*
//sys@home:1234/remote/akka/sys@remote:6667/remote/akka/sys@other:3333/user/a/b/c
//sys@other:3333" with
//sys@remote:6667" and
//sys@home:1234", where
//merge all of the fallbacks together
//match for remote scope
//Even if this actor is in RemoteScope, it might still be a local address
//check for correct scope configuration
// for consistency we check configuration of dispatcher and mailbox locally
/// <summary>
/// Looks up local overrides for remote deployments
/// </summary>
/// <param name="p"></param>
/// <returns></returns>
/// <summary>
/// INTERNAL API.
/// 
/// Called in deserialization of incoming remote messages where the correct local address is known.
/// </summary>
//the actor's local address was already included in the ActorPath
//skip ""/"remote", 
//skip ""/"temp", 
//standard
/// <summary>
/// Marks a remote system as out of sync and prevents reconnects until the quarantine timeout elapses.
/// </summary>
/// <param name="address">Address of the remote system to be quarantined</param>
/// <param name="uid">UID of the remote system, if the uid is not defined it will not be a strong quarantine but
/// the current endpoint writer will be stopped (dropping system messages) and the address will be gated
/// </param>
/// <summary>
///     Afters the send system message.
/// </summary>
/// <param name="message">The message.</param>
/// <summary>
/// All of the private internals used by <see cref="RemoteActorRefProvider"/>, namely its transport
/// registry, remote serializers, and the <see cref="RemoteDaemon"/> instance.
/// </summary>
/// <summary>
/// Describes the FSM states of the <see cref="RemotingTerminator"/>
/// </summary>
/// <summary>
/// Responsible for shutting down the <see cref="RemoteDaemon"/> and all transports
/// when the <see cref="ActorSystem"/> is being shutdown.
/// </summary>
// TODO: state timeout
// else ignore: it is a reliably delivered message that might be retried later, and it has not yet deserved
// the dead letter status
// else ignore: it is a reliably delivered message that might be retried later, and it has not yet deserved
// the dead letter status
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\RemoteDeployer.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteDeployer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// 
/// Used for deployment of actors on remote systems
/// </summary>
//can have remotely deployed routers that remotely deploy routees
/// <summary>
/// Used to determine if a given <paramref name="deploy"/> is an instance of <see cref="RemoteRouterConfig"/>.
/// </summary>
//TODO: return deploy;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\RemoteDeploymentWatcher.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteDeploymentWatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Responsible for cleaning up child references of remote deployed actors when remote node
/// goes down (crash, network failure), i.e. triggered by Akka.Actor.Terminated.AddressTerminated
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\RemoteSettings.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteSettings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used for augmenting outbound messages with the Akka scheme
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\RemoteSystemDaemon.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteDaemon.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
///  INTERNAL API
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="DaemonMsgCreate" /> class.
/// </summary>
/// <param name="props">The props.</param>
/// <param name="deploy">The deploy.</param>
/// <param name="path">The path.</param>
/// <param name="supervisor">The supervisor.</param>
/// <summary>
///     Gets the props.
/// </summary>
/// <value>The props.</value>
/// <summary>
///     Gets the deploy.
/// </summary>
/// <value>The deploy.</value>
/// <summary>
///     Gets the path.
/// </summary>
/// <value>The path.</value>
/// <summary>
///     Gets the supervisor.
/// </summary>
/// <value>The supervisor.</value>
/// <summary>
///  INTERNAL API
/// 
/// Internal system "daemon" actor for remote internal communication.
/// 
/// It acts as the brain of the remote that responds to system remote messages and executes actions accordingly.
/// </summary>
/// <summary>
///     Initializes a new instance of the <see cref="RemoteSystemDaemon" /> class.
/// </summary>
/// <param name="system">The system.</param>
/// <param name="path">The path.</param>
/// <param name="parent">The parent.</param>
/// <param name="terminator"></param>
/// <param name="log"></param>
/// <summary>
///     Called when [receive].
/// </summary>
/// <param name="message">The message that was received.</param>
/// <param name="sender">The actor that sent the message.</param>
//note: RemoteDaemon does not handle ActorSelection messages - those are handled directly by the RemoteActorRefProvider.
//Remote ActorSystem on another process / machine has died. 
//Need to clean up any references to remote deployments here.
//stop any remote actors that belong to this address
//    removeChild(child.path.elements.drop(1).mkString("/"), child)
//    val parent = child.getParent
//    if (removeChildParentNeedsUnwatch(parent, child)) parent.sendSystemMessage(Unwatch(parent, this))
//    terminationHookDoneWhenNoChildren()
//case DeathWatchNotification(parent: ActorRef with ActorRefScope, _, _) if !parent.isLocal ⇒
//  terminating.locked {
//    parent2children.remove(parent) match {
//      case null ⇒
//      case children ⇒
//        for (c ← children) {
//          system.stop(c)
//          removeChild(c.path.elements.drop(1).mkString("/"), c)
//        }
//        terminationHookDoneWhenNoChildren()
//    }
//  }
//      def terminationHookDoneWhenNoChildren(): Unit = terminating.whileOn {
//  if (!hasChildren) terminator.tell(TerminationHookDone, this)
//}
/// <summary>
///     Tells the internal.
/// </summary>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <summary>
///     Handles the daemon MSG create.
/// </summary>
/// <param name="message">The message.</param>
//drop the /remote
//.WithDeploy(new Deploy(Scope.Local));
//TODO: figure out why current transport is not set when this message is sent
/// <summary>
///     Gets the child.
/// </summary>
/// <param name="name">The name.</param>
/// <returns>ActorRef.</returns>
//TODO: I have no clue what the scala version does
//longest match found
//child was successfully added
//child successfully added
//parent is missing, so child does not need to be removed
//child was removed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\RemoteTransport.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteTransport.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API.
/// 
/// The remote transport is responsible for sending and receiving messages.
/// Each transport has an address, which it should provide in Serialization.CurrentTransportInformation (thread-local)
/// while serializing ActorReferences (which might also be part of messages). This address must
/// be available (i.e. fully initialized) by the time the first message is received or when the Start() method
/// returns, whichever happens first.
/// </summary>
/// <summary>
/// Addresses to be used in <see cref="RootActorPath"/> of refs generated for this transport.
/// </summary>
/// <summary>
/// The default transport address of the <see cref="ActorSystem"/>. 
/// This is the listen address of the default transport.
/// </summary>
/// <summary>
/// When true, some functionality will be turned off for security purposes
/// </summary>
/// <summary>
/// A logger that can be used to log issues that may occur
/// </summary>
/// <summary>
/// Start up the transport, i.e. enable incoming connections
/// </summary>
/// <summary>
/// Shuts down the remoting
/// </summary>
/// <returns>A Task that can be waited on until shutdown is complete</returns>
/// <summary>
/// Sends the given message to the recipient, supplying <paramref name="sender"/> if any.
/// </summary>
/// <summary>
/// Sends a management command to the underlying transport stack. The call returns with a Task that
/// indicates if the command was handled successfully or dropped.
/// </summary>
/// <param name="cmd">a Command message to send to the transport</param>
/// <returns>A task that indicates when the message was successfully handled or dropped</returns>
/// <summary>
/// Resolves the correct local address to be used for contacting the given remote address
/// </summary>
/// <param name="remote">The remote address</param>
/// <returns>the local address to be used for the given remote address</returns>
/// <summary>
/// Marks a remote system as out of sync and prevents reconnects until the quarantine timeout elapses.
/// </summary>
/// <param name="address">Address of the remote system to be quarantined</param>
/// <param name="uid">UID of the remote system; if the uid is not defined it will not be a strong quarantine but the current
/// endpoint writer will be stopped (dropping system messages) and the address will be gated.</param>
/// <summary>
/// This exception is thrown when a general failure within a <see cref="RemoteTransport"/> occurs, such as
/// the inability to start, wrong configuration, etc...
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RemoteTransportException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <param name="cause">The exception that is the cause of the current exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RemoteTransportException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\RemoteWatcher.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteWatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Remote nodes with actors that are watched are monitored by this actor to be able
/// to detect network failures and process crashes. <see cref="RemoteActorRefProvider"/>
/// intercepts Watch and Unwatch system messages and sends corresponding
/// <see cref="RemoteWatcher.WatchRemote"/> and <see cref="RemoteWatcher.UnwatchRemote"/> to this actor.
///
/// For a new node to be watched this actor periodically sends <see cref="RemoteWatcher.Heartbeat"/>
/// to the peer actor on the other node, which replies with <see cref="RemoteWatcher.HeartbeatRsp"/>
/// message back. The failure detector on the watching side monitors these heartbeat messages.
/// If arrival of heartbeat messages stops it will be detected and this actor will publish
/// <see cref="AddressTerminated"/> to the <see cref="AddressTerminatedTopic"/>.
///
/// When all actors on a node have been unwatched it will stop sending heartbeat messages.
///
/// For bi-directional watch between two nodes the same thing will be established in
/// both directions, but independent of each other.
/// </summary>
// sent to self only
// test purpose
//TODO: This should either be a deep copy or immutable
//@Aaronontheweb 2/7/2015 - we now return a deep copy everytime the refs get shared, see line 334
//TODO: this needs to be immutable
// test purpose
//has been unwatched inbetween, skip re-watch
// also watch from self, to be able to cleanup on termination of the watchee
// first watch to that node after previous unreachable
// clean up self watch when no more watchers of this watchee
// When watchee is stopped it sends DeathWatchNotification to the watcher and to this RemoteWatcher,
// which is also watching. Send extra DeathWatchNotification to the watcher in case the
// DeathWatchNotification message is only delivered to RemoteWatcher. Otherwise there is a risk that
// the monitoring is removed, subsequent node failure is not detected and the original watcher is
// never notified. This may occur for normal system shutdown of the watchee system when not all remote
// messages are flushed at shutdown.
// unwatched last watchee on that node
// schedule the expected first heartbeat for later, which will give the
// other side a chance to reply, and also trigger some resends if needed
/// <summary>
/// To ensure that we receive heartbeat messages from the right actor system
/// incarnation we send Watch again for the first HeartbeatRsp (containing
/// the system UID) and if HeartbeatRsp contains a new system UID.
/// Terminated will be triggered if the watchee (including correct Actor UID)
/// does not exist.
/// </summary>
/// <param name="address"></param>
// this re-watch will result in a RewatchRemote message to this actor
// must be a special message to be able to detect if an UnwatchRemote comes in
// before the extra RewatchRemote, then the re-watch should be ignored
// ➡➡➡ NEVER SEND THE SAME SYSTEM MESSAGE OBJECT TO TWO ACTORS
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Remoting.cs
//-----------------------------------------------------------------------
// <copyright file="Remoting.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// URL-encodes an actor <see cref="Address"/>. Used when generating the names
/// of some system remote actors.
/// </summary>
/// <summary>
/// INTERNAL API
/// 
/// (used for forcing all /system level remoting actors onto a dedicated dispatcher)
/// </summary>
// ReSharper disable once InconsistentNaming
//this is why this extension is called "RARP"
/// <summary>
/// Used as part of the <see cref="ExtensionIdProvider{RARP}"/>
/// </summary>
//TODO: needs to be implemented in Endpoint
/// <summary>
/// INTERNAL API
/// Messages marked with this interface will be sent before other messages when buffering is active.
/// This means that these messages don't obey normal message ordering.
/// It is used for failure detector heartbeat messages.
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
// This is effectively a write-once variable similar to a lazy val. The reason for not using a lazy val is exception
// handling.
// This variable has the same semantics as the addresses variable, in the sense it is written once, and emulates
// a lazy val
// tells the EndpointManager to start all transports and bind them to listenable addresses, and then set the results
// of this promise to include them.
//   this.transportMapping = akkaProtocolTransports
//       .ToDictionary(p => p.ProtocolTransport.Transport.SchemeIdentifier,);
//Shutdown was not successful
/// <summary>
/// Message type used to provide both <see cref="Props"/> and a name for a new transport actor
/// </summary>
/// <summary>
/// Actor responsible for supervising the creation of all transport actors
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\RemotingLifecycleEvent.cs
//-----------------------------------------------------------------------
// <copyright file="RemotingLifecycleEvent.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Remote lifecycle events that are published to the <see cref="EventStream"/> when
/// initialization / connect / disconnect events that occur during network operations
/// </summary>
/// <summary>
///     Logs the level.
/// </summary>
/// <returns>LogLevel.</returns>
/// <summary>
/// INTERNAL API.
/// 
/// Used for publishing remote lifecycle events to the <see cref="EventStream"/> of the provided <see cref="ActorSystem"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Configuration\RemoteConfigFactory.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteConfigFactory.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains methods used to retrieve remote configuration options from this assembly's resources.
///
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Retrieves the default remote options that Akka.NET uses when no configuration has been defined.
/// </summary>
/// <returns>The configuration that contains default values for all remote options.</returns>
/// <summary>
/// Retrieves a configuration defined in a resource of the current executing assembly.
/// </summary>
/// <param name="resourceName">The name of the resource that contains the configuration.</param>
/// <returns>The configuration defined in the current executing assembly.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Proto\Containerformats.cs
//-----------------------------------------------------------------------
// <copyright file="Containerformats.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Proto\Wireformats.cs
//-----------------------------------------------------------------------
// <copyright file="Wireformats.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Routing\RemoteRouterConfig.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteRouterConfig.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <see cref="RouterConfig"/> implementation for remote deployment of 
/// routees on defined target nodes. Delegates other duties to the local <see cref="Pool"/>,
/// which makes it possible to mix this with built-in routers such as <see cref="RoundRobinGroup"/> or custom routers.
/// </summary>
/// <summary>
/// Used for distributing routees to <see cref="Nodes"/>. Needs to be an instance variable since <see cref="Resizer"/> may call <see cref="RoutedActorCell.AddRoutees"/> several times.
/// </summary>
/// <summary>
/// Used for naming child routees. Needs to be an instance variable since <see cref="Resizer"/> may call <see cref="RoutedActorCell.AddRoutees"/> several times.
/// </summary>
//should never be true due to the previous check
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Serialization\DaemonMsgCreateSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="DaemonMsgCreateSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is a special <see cref="Serializer"/> that serializes and deserializes <see cref="DaemonMsgCreate"/> only.
/// Serialization of contained <see cref="RouterConfig"/>, <see cref="Config"/>, and <see cref="Scope"/> is done with the
/// configured serializer for those classes.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DaemonMsgCreateSerializer"/> class.
/// </summary>
/// <param name="system">The actor system to associate with this serializer. </param>
/// <summary>
/// Completely unique value to identify this implementation of Serializer, used to optimize network traffic
/// Values from 0 to 16 is reserved for Akka internal usage
/// </summary>
/// <summary>
/// Returns whether this serializer needs a manifest in the fromBinary method
/// </summary>
/// <summary>
/// Serializes the given object into a byte array
/// </summary>
/// <param name="obj">The object to serialize </param>
/// <returns>A byte array containing the serialized object</returns>
/// <exception cref="ArgumentException">Can't serialize a non-<see cref="DaemonMsgCreate"/> message using <see cref="DaemonMsgCreateSerializer"/></exception>
/// <summary>
/// Deserializes a byte array into an object of type <paramref name="type"/>.
/// </summary>
/// <param name="bytes">The array containing the serialized object</param>
/// <param name="type">The type of object contained in the array</param>
/// <returns>The object contained in the array</returns>
/// <exception cref="TypeLoadException">
/// Could not find type on the remote system.
/// Ensure that the remote system has an assembly that contains the type in its assembly search path.
/// </exception>
//HACK: no typename and empty arg gives null 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Serialization\MessageContainerSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="MessageContainerSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is a special <see cref="Serializer"/> that serializes and deserializes <see cref="ActorSelectionMessage"/> only.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="MessageContainerSerializer"/> class.
/// </summary>
/// <param name="system">The actor system to associate with this serializer. </param>
/// <summary>
/// Completely unique value to identify this implementation of Serializer, used to optimize network traffic
/// Values from 0 to 16 is reserved for Akka internal usage
/// </summary>
/// <summary>
/// Returns whether this serializer needs a manifest in the fromBinary method
/// </summary>
/// <summary>
/// Serializes the given object into a byte array
/// </summary>
/// <param name="obj">The object to serialize </param>
/// <returns>A byte array containing the serialized object</returns>
/// <exception cref="ArgumentException">Object must be of type <see cref="ActorSelectionMessage"/></exception>
/// <summary>
/// Deserializes a byte array into an object of type <paramref name="type"/>.
/// </summary>
/// <param name="bytes">The array containing the serialized object</param>
/// <param name="type">The type of object contained in the array</param>
/// <returns>The object contained in the array</returns>
/// <exception cref="NotSupportedException">Unknown SelectionEnvelope.Elements.Type</exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Serialization\ProtobufSerializer.cs
//-----------------------------------------------------------------------
// <copyright file="ProtobufSerializer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is a special <see cref="Serializer"/> that serializes and deserializes Google protobuf messages only.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ProtobufSerializer"/> class.
/// </summary>
/// <param name="system">The actor system to associate with this serializer. </param>
/// <summary>
/// Completely unique value to identify this implementation of Serializer, used to optimize network traffic
/// Values from 0 to 16 is reserved for Akka internal usage
/// </summary>
/// <summary>
/// Returns whether this serializer needs a manifest in the fromBinary method
/// </summary>
/// <summary>
/// Serializes the given object into a byte array
/// </summary>
/// <param name="obj">The object to serialize </param>
/// <returns>A byte array containing the serialized object</returns>
/// <exception cref="NotImplementedException">This method is not currently implemented.</exception>
//using (var stream = new MemoryStream())
//{
//    global::ProtoBuf.Serializer.Serialize(stream, obj);
//    return stream.ToArray();
//}
/// <summary>
/// Deserializes a byte array into an object of type <paramref name="type"/>.
/// </summary>
/// <param name="bytes">The array containing the serialized object</param>
/// <param name="type">The type of object contained in the array</param>
/// <returns>The object contained in the array</returns>
/// <exception cref="NotImplementedException">This method is not currently implemented.</exception>
//using (var stream = new MemoryStream(bytes))
//{
//    return global::ProtoBuf.Serializer.NonGeneric.Deserialize(type, stream);
//}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Transport\AkkaPduCodec.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaPduCodec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// </summary>
/*
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// INTERNAL API
/// 
/// A codec that is able to convert Akka PDUs from and to <see cref="ByteString"/>
/// </summary>
/// <summary>
/// Return an <see cref="IAkkaPdu"/> instance that represents a PDU contained in the raw
/// <see cref="ByteString"/>.
/// </summary>
/// <param name="raw">Encoded raw byte representation of an Akka PDU</param>
/// <returns>Class representation of a PDU that can be used in a <see cref="PatternMatch"/>.</returns>
/// <summary>
/// Takes an <see cref="IAkkaPdu"/> representation of an Akka PDU and returns its encoded form
/// as a <see cref="ByteString"/>.
/// </summary>
/// <param name="pdu"></param>
/// <returns></returns>
//proto takes a ulong
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaProtocolTransport.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Pairs an <see cref="AkkaProtocolTransport"/> with its <see cref="Address"/> binding.
/// 
/// This is the information that's used to allow external <see cref="ActorSystem"/> messages to address
/// this system over the network.
/// </summary>
/// <summary>
/// This exception is thrown when an error occurred during the Akka protocol handshake.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AkkaProtocolException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <param name="cause">The exception that is the cause of the current exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="AkkaProtocolException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// Implementation of the Akka protocol as a (logical) <see cref="Transport"/> that wraps an underlying (physical) <see cref="Transport"/> instance.
/// 
/// Features provided by this transport include:
///  - Soft-state associations via the use of heartbeats and failure detectors
///  - Transparent origin address handling
/// 
/// This transport is loaded automatically by <see cref="Remoting"/> and will wrap all dynamically loaded transports.
/// </summary>
// Prepare a Task and pass its completion source to the manager
/// <summary>
/// The <see cref="AkkaProtocolTransport"/> does not handle recovery of associations, this task is implemented
/// in the remoting itself. Hence the strategy <see cref="Directive.Stop"/>.
/// </summary>
//need to create an Inbound ProtocolStateActor
//need to create an Outbound ProtocolStateActor
/// <summary>
/// Neither the underlying nor the provided transport is associated
/// </summary>
/// <summary>
/// The underlying transport is associated, but the handshake of the Akka protocol is not yet finished
/// </summary>
/// <summary>
/// The underlying transport is associated, but the handshake of the akka protocol is not yet finished
/// </summary>
/// <summary>
/// The underlying transport is associated, but the handler for the handle has not been provided yet
/// </summary>
/// <summary>
/// System ready!
/// </summary>
/// <summary>
/// Message sent when a <see cref="FailureDetector.IsAvailable"/> returns false, signaling a transport timeout.
/// </summary>
/// <summary>
/// Constructor for outbound ProtocolStateActors
/// </summary>
/// <summary>
/// Constructor for inbound ProtocolStateActors
/// </summary>
/// <summary>
/// Common constructor used by both the outbound and the inbound cases
/// </summary>
//Transport layer events for outbound associations
/*
// wait for reply from the inbound side of the connection (WaitHandshake)
//Otherwise, retry
//TODO: rewrite using RARP ActorSystem Extension
//Transport layer events for outbound associations
/*
//refused UID
//accepted UID
//After receiving Disassociate we MUST NOT send back a Disassociate (loop)
//Expect handshake to be finished, dropping connection
/*
/*
// attempt to open underlying transport to the remote address
// if using Helios, this is where the socket connection is opened.
// inbound transport is opened already inside the ProtocolStateManager
// therefore we just have to set ourselves as listener and wait for
// incoming handshake attempts from the client.
//no logging
//no logging
//pass to OnTermination
//send disassociate just to be sure
/// <summary>
/// Publishes a transport error to the message stream
/// </summary>
/// <summary>
/// <see cref="Props"/> used when creating OUTBOUND associations to remote endpoints.
/// 
/// These <see cref="Props"/> create outbound <see cref="ProtocolStateActor"/> instances,
/// which begin a state of 
/// </summary>
/// <param name="handshakeInfo"></param>
/// <param name="remoteAddress"></param>
/// <param name="statusCompletionSource"></param>
/// <param name="transport"></param>
/// <param name="settings"></param>
/// <param name="codec"></param>
/// <param name="failureDetector"></param>
/// <param name="refuseUid"></param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Transport\FailureInjectorTransportAdapter.cs
//-----------------------------------------------------------------------
// <copyright file="FailureInjectorTransportAdapter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Provider implementation for creating <see cref="FailureInjectorTransportAdapter"/> instances.
/// </summary>
/// <summary>
/// This exception is used to indicate a simulated failure in an association.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="FailureInjectorException"/> class.
/// </summary>
/// <param name="msg">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="FailureInjectorException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// Retrieves the message of the simulated failure.
/// </summary>
// ReSharper disable once InconsistentNaming
// ReSharper disable once InconsistentNaming
//  don't care about the protocol part - we are injected in the stack anyway!
// Side effecting: As this class is not an actor, the only way to safely modify state is through volatile vars.
// Listen is called only during the initialization of the stack, and upstreamListener is not read before this
// finishes.
// Association is simulated to be failed if there was either an inbound or outbound message drop
//ignore
/// <summary>
/// INTERNAL API
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Transport\TestTransport.cs
//-----------------------------------------------------------------------
// <copyright file="TestTransport.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
///     Transport implementation used for testing.
///     The TestTransport is basically shared memory between actor systems. It can be programmed to emulate
///     different failure modes of a <see cref="Transport" /> implementation. TestTransport keeps a log of the activities
///     it was requested to do. This class is not optimized for performance and MUST not be used in production systems.
/// </summary>
/*
//pass a non-writeable handle to remote first
//registration of reader at local finishes the registration and enables communication
/// <summary>
///     Base trait for remote activities that are logged by <see cref="TestTransport" />
/// </summary>
/// <summary>
///     Test utility to make behavior of functions that return some Task controllable form tests.
///     This tool is able to override default behavior with any generic behavior, including failure, and exposes
///     control to the timing of completion of the associated Task.
///     The utility is implemented as a stack of behaviors, where the behavior on the top of the stack represents the
///     currently active behavior. The bottom of the stack always contains the <see cref="DefaultBehavior" /> which
///     can not be popped out.
/// </summary>
//otherwise, return the default behavior
/// <summary>
///     Changes the current behavior to the provided one
/// </summary>
/// <param name="behavior">
///     Function that takes a parameter type <typeparamref name="TIn" /> and returns a Task
///     <typeparamref name="TOut" />.
/// </param>
/// <summary>
///     Changes the behavior to return a completed Task with the given constant value.
/// </summary>
/// <param name="result">The constant the Task will be completed with.</param>
/// <summary>
///     Changes the behavior to return a faulted Task with the given exception
/// </summary>
/// <param name="e">The exception responsible for faulting this task</param>
/// <summary>
///     Enables control of the completion of the previously active behavior. Wraps the previous behavior in
/// </summary>
/// <returns></returns>
/// <summary>
///     Shared state among <see cref="TestTransport" /> instances. Coordinates the transports and the means of
///     communication between them.
/// </summary>
/// <remarks>
///     NOTE: This is a global shared state between different actor systems. The purpose of this class is to allow
///     dynamically
///     loaded TestTransports to set up a shared AssociationRegistry.Extensions could not be used for this purpose, as the
///     injection
///     of the shared instance must happen during the startup time of the actor system. Association registries are looked
///     up via a string key. Until we find a better way to inject an AssociationRegistry to multiple actor systems it is
///     strongly recommended to use long, randomly generated strings to key the registry to avoid interference between
///     tests.
/// </remarks>
/// <summary>
/// Retrieves the specified <see cref="AssociationRegistry"/> associated with the <see cref="key"/>.
/// </summary>
/// <param name="key">The registry key - see the HOCON example for details.</param>
/// <returns>An existing or new <see cref="AssociationRegistry"/> instance.</returns>
/// <code>
///     akka{
///         remote{
///             enabled-transports = ["akka.remote.test"]
///             test{
///                 registry-key = "SOME KEY"
///             }
///         }
///     }
/// </code>
/// <summary>
/// Wipes out all of the <see cref="AssociationRegistry"/> instances retained by this process.
/// </summary>
/// <summary>
///     Returns the remote endpoint for a pair of endpoints relative to the owner of the supplied
///     <see cref="TestAssociationHandle" />.
/// </summary>
/// <param name="handle">The reference handle to determine the remote endpoint relative to</param>
/// <param name="listenerPair">pair of listeners in initiator, receiver order</param>
/// <returns></returns>
//initiator
//receiver
/// <summary>
///     Logs a transport activity
/// </summary>
/// <param name="activity">The activity to be logged</param>
/// <summary>
///     Gets a snapshot of the current transport activity log
/// </summary>
/// <returns>A IList of activities ordered left-to-right in chronological order (element[0] is the oldest)</returns>
/// <summary>
///     Clears the current contents of the log
/// </summary>
/// <summary>
///     Records a mapping between an address and the corresponding (transport, associationEventListener) pair.
/// </summary>
/// <param name="transport">The transport that is to be registered. The address of this transport will be used as a key.</param>
/// <param name="associationEventListenerTask">
///     The Task that will be completed with the listener that will handle the
///     events for the given transport.
/// </param>
/// <summary>
///     Indicates if all given transports were successfully registered. No associations can be established between
///     transports that are not yet registered.
/// </summary>
/// <param name="addresses">The listen addresses of transports that participate in the test case.</param>
/// <returns>True if all transports are successfully registered.</returns>
/// <summary>
///     Registers two event listeners corresponding to the two endpoints of an association.
/// </summary>
/// <param name="key">
///     Ordered pair of addresses representing an association. First element must be the address of the
///     initiator.
/// </param>
/// <param name="listeners">
///     A pair of listeners that will be responsible for handling the events of the two endpoints
///     of the association. Elements in the Tuple must be in the same order as the addresses in <paramref name="key" />.
/// </param>
/// <summary>
///     Removes an association.
/// </summary>
/// <param name="key">
///     Ordered pair of addresses representing an association. First element must be the address of the
///     initiator.
/// </param>
/// <returns>The original entries, or null if the key wasn't found in the table.</returns>
/// <summary>
///     Tests if an association was registered.
/// </summary>
/// <param name="initiatorAddress">The initiator of the association.</param>
/// <param name="remoteAddress">The other address of the association.</param>
/// <returns>True if there is an association for the given address.</returns>
/// <summary>
///     Returns the event handler corresponding to the remote endpoint of the given local handle. In other words
///     it returns the listener that will receive <see cref="InboundPayload" /> events when
///     <seealso cref="AssociationHandle.Write" /> is called.
/// </summary>
/// <param name="localHandle">The handle</param>
/// <returns>The option that contains the listener if it exists.</returns>
/// <summary>
///     Returns the transport bound to the given address.
/// </summary>
/// <param name="address">The address bound to the transport.</param>
/// <returns>The transport, if it exists.</returns>
/// <summary>
///     Clears the state of the entire registry.
///     <remarks>
///         This method is not atomic and does not use a critical section when clearing transports, listeners, and logs.
///     </remarks>
/// </summary>
/// <summary>
///     Key used in <see cref="AssociationRegistry" /> to identify associations. Contains an ordered Tuple of addresses,
///     where the first address is always the initiator of the association.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs
//-----------------------------------------------------------------------
// <copyright file="ThrottleTransportAdapter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used to provide throttling controls for remote <see cref="Transport"/> instances.
/// </summary>
// ReSharper disable once InconsistentNaming
/// <summary>
/// Management command to force disassociation of an address
/// </summary>
/// <summary>
/// Management command to force disassociation of an address with an explicit error.
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
// ReSharper disable once InconsistentNaming
/// <summary>
/// INTERNAL API
/// </summary>
// Slight modification of PipeTo, only success is sent, failure is propagated to a separate Task
// Finished outbound association and got back the handle
/*
/*
//TODO: use PromiseActorRef here when implemented
//var internalTarget = target.AsInstanceOf<InternalActorRef>();
//var promiseRef = PromiseActorRef.Apply(internalTarget.Provider, timeout, target, mode.GetType().Name);
//internalTarget.Tell(new Watch(internalTarget, promiseRef));
//target.Tell(mode, promiseRef);
//return promiseRef.Result.Task.ContinueWith(tr =>
//{
//    if (tr.Result is Status.Success)
//    {
//        var resultMsg = tr.Result as Status.Success;
//        if (resultMsg.Status is Terminated &&
//            resultMsg.Status.AsInstanceOf<Terminated>().ActorRef.Path == target.Path)
//            return SetThrottleAck.Instance;
//        if (resultMsg.Status is SetThrottleAck)
//        {
//            internalTarget.Tell(new Unwatch(target, promiseRef));
//        }
//        return SetThrottleAck.Instance;
//    }
//    else
//    {
//        internalTarget.Tell(new Unwatch(target, promiseRef));
//       return SetThrottleAck.Instance;
//    }
//}, TaskContinuationOptions.AttachedToParent & TaskContinuationOptions.ExecuteSynchronously);
// ReSharper disable once InconsistentNaming
// Allow messages larger than capacity through, it will be recorded as negative tokens
// ReSharper disable once InconsistentNaming
/// <summary>
/// INTERNAL API
/// </summary>
//need to declare recursive delegates first before they can self-reference
//might want to consider making this consumer function strongly typed: http://blogs.msdn.com/b/wesdyer/archive/2007/02/02/anonymous-recursion-in-c.aspx
/// <summary>
/// INTERNAL API
/// </summary>
/*
/// <summary>
/// Waiting for the <see cref="ThrottlerHandle"/> coupled with the throttler actor.
/// </summary>
/// <summary>
/// Waiting for the ASSOCIATE message that contains the origin address of the remote endpoint
/// </summary>
/// <summary>
/// After origin is known and a Checkin message is sent to the manager, we must wait for the <see cref="ThrottleMode"/>
/// for the address
/// </summary>
/// <summary>
/// After all information is known, the throttler must wait for the upstream listener to be able to forward messages
/// </summary>
/*
/// <summary>
/// Waiting for the tuple containing the upstream listener and the <see cref="ThrottleMode"/>
/// </summary>
/// <summary>
/// Fully initialized state
/// </summary>
// ReSharper disable once InconsistentNaming
/// <summary>
/// Used for decoding certain types of throttled messages on-the-fly
/// </summary>
// register to downstream layer and wait for origin
// we should always set the throttling mode
// not notifying the upstream handler is intentional: we are relying on heartbeating
/// <summary>
/// This method captures ASSOCIATE packets and extracts the origin <see cref="Address"/>.
/// </summary>
/// <param name="b">Inbound <see cref="ByteString"/> received from network.</param>
/// <returns></returns>
// This layer should not care about malformed packets. Also, this also useful for testing, because
// arbitrary payload could be passed in
//do nothing
// Do nothing
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Transport\Transport.cs
//-----------------------------------------------------------------------
// <copyright file="Transport.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Asynchronously opens a logical duplex link between two <see cref="Transport"/> entities over a network. It could be backed
/// with a real transport layer connection (TCP), socketless connections provided over datagram protocols (UDP), and more.
/// 
/// This call returns a Task of an <see cref="AssociationHandle"/>. A faulted Task indicates that the association attempt was
/// unsuccessful. If the exception is <see cref="InvalidAssociationException"/> then the association request was invalid and it's
/// impossible to recover.
/// </summary>
/// <param name="remoteAddress">The address of the remote transport entity.</param>
/// <returns>A status representing the failure or success containing an <see cref="AssociationHandle"/>.</returns>
/// <summary>
/// Shuts down the transport layer and releases all of the corresponding resources. Shutdown is asynchronous and is signaled
/// by the result of the returned Task.
/// 
/// The transport SHOULD try flushing pending writes before becoming completely closed.
/// </summary>
/// <returns>Task signaling the completion of the shutdown.</returns>
/// <summary>
/// This method allows upper layers to send management commands to the transport. It is the responsibility of the sender to
/// send appropriate commands to different transport implementations. Unknown commands will be ignored.
/// </summary>
/// <param name="message">Command message to send to the transport.</param>
/// <returns>A Task that succeeds when the command was handled or dropped.</returns>
/// <summary>
/// This exception is thrown when an association setup request is invalid and it is impossible to recover (malformed IP address, unknown hostname, etc...).
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="InvalidAssociationException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <param name="cause">The exception that is the cause of the current exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="InvalidAssociationException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// Marker interface for events that the registered listener for a <see cref="AssociationHandle"/> might receive.
/// </summary>
/// <summary>
/// Message sent to the listener registered to an association (via the TaskCompletionSource returned by <see cref="AssociationHandle.ReadHandlerSource"/>)
/// </summary>
/// <summary>
/// The underlying transport reported a non-fatal error
/// </summary>
/// <summary>
/// Supertype of possible disassociation reasons
/// </summary>
/// <summary>
/// An interface that needs to be implemented by a user of an <see cref="AssociationHandle"/>
/// in order to listen to association events
/// </summary>
/// <summary>
/// Notify the listener about an <see cref="IHandleEvent"/>.
/// </summary>
/// <param name="ev">The <see cref="IHandleEvent"/> to notify the listener about</param>
/// <summary>
/// Converts an <see cref="IActorRef"/> into an <see cref="IHandleEventListener"/>, so <see cref="IHandleEvent"/> messages
/// can be passed directly to the Actor.
/// </summary>
/// <summary>
/// The Actor to notify about <see cref="IHandleEvent"/> messages.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ActorHandleEventListener"/> class.
/// </summary>
/// <param name="actor">The Actor to notify about <see cref="IHandleEvent"/> messages.</param>
/// <summary>
/// Notify the Actor about an <see cref="IHandleEvent"/> message.
/// </summary>
/// <param name="ev">The <see cref="IHandleEvent"/> message to notify the Actor about</param>
/// <summary>
/// Marker type for whenever new actors / endpoints are associated with this <see cref="ActorSystem"/> via remoting.
/// </summary>
/// <summary>
/// Message sent to <see cref="IAssociationEventListener"/> registered to a transport (via the TaskCompletionSource returned by <see cref="Transport.Listen"/>)
/// when the inbound association request arrives.
/// </summary>
/// <summary>
/// Listener interface for any object that can handle <see cref="IAssociationEvent"/> messages.
/// </summary>
/// <summary>
/// Notify the listener about an <see cref="IAssociationEvent"/> message.
/// </summary>
/// <param name="ev">The <see cref="IAssociationEvent"/> message to notify the listener about</param>
/// <summary>
/// Converts an <see cref="IActorRef"/> into an <see cref="IAssociationEventListener"/>, so <see cref="IAssociationEvent"/> messages
/// can be passed directly to the Actor.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ActorAssociationEventListener"/> class.
/// </summary>
/// <param name="actor">The Actor to notify about <see cref="IAssociationEvent"/> messages.</param>
/// <summary>
/// The Actor to notify about <see cref="IAssociationEvent"/> messages.
/// </summary>
/// <summary>
/// Notify the Actor about an <see cref="IAssociationEvent"/>.
/// </summary>
/// <param name="ev">The <see cref="IAssociationEvent"/> message to notify the Actor about</param>
/// <summary>
/// A Service Provider Interface (SPI) layer for abstracting over logical links (associations) created by a <see cref="Transport"/>.
/// Handles are responsible for providing an API for sending and receiving from the underlying channel.
/// 
/// To register a listener for processing incoming payload data, the listener must be registered by completing the Task returned by
/// <see cref="AssociationHandle.ReadHandlerSource"/>. Incoming data is not processed until this registration takes place.
/// </summary>
/// <summary>
/// Address of the local endpoint
/// </summary>
/// <summary>
/// Address of the remote endpoint
/// </summary>
/// <summary>
/// The TaskCompletionSource returned by this call must be completed with an <see cref="IHandleEventListener"/> to
/// register a listener responsible for handling the incoming payload. Until the listener is not registered the
/// transport SHOULD buffer incoming messages.
/// </summary>
/// <summary>
/// Asynchronously sends the specified <paramref name="payload"/> to the remote endpoint. This method's implementation MUST be thread-safe
/// as it might be called from different threads. This method MUST NOT block.
/// 
/// Writes guarantee ordering of messages, but not their reception. The call to write returns with a boolean indicating if the
/// channel was ready for writes or not. A return value of false indicates that the channel is not yet ready for deliver 
/// (e.g.: the write buffer is full)and the sender  needs to wait until the channel becomes ready again.
/// 
/// Returning false also means that the current write was dropped (this MUST be guaranteed to ensure duplication-free delivery).
/// </summary>
/// <param name="payload">The payload to be delivered to the remote endpoint.</param>
/// <returns>
/// Bool indicating the availability of the association for subsequent writes.
/// </returns>
/// <summary>
/// Closes the underlying transport link, if needed. Some transports might not need an explicit teardown (UDP) and some
/// transports may not support it. Remote endpoint of the channel or connection MAY be notified, but this is not
/// guaranteed.
/// 
/// The transport that provides the handle MUST guarantee that <see cref="Disassociate"/> could be called arbitrarily many times.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Transport\TransportAdapters.cs
//-----------------------------------------------------------------------
// <copyright file="TransportAdapters.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Create a transport adapter that wraps the underlying transport
/// </summary>
/// <summary>
/// INTERNAL API
/// 
/// Extension that allows us to look up transport adapters based upon the settings provided inside <see cref="RemoteSettings"/>
/// </summary>
// ReSharper disable once AssignNullToNotNullAttribute
/// <summary>
/// An adapter that wraps a transport and provides interception capabilities
/// </summary>
/// <summary>
/// Marker interface for all transport operations
/// </summary>
/// <summary>
/// Lightweight Stash implementation
/// </summary>
/// <summary>
/// Method to be implemented for child classes - processes messages once the transport is ready to send / receive
/// </summary>
/// <param name="message"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Transport\Helios\HeliosHelpers.cs
//-----------------------------------------------------------------------
// <copyright file="HeliosHelpers.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// 
/// Abstract base class for adapting Helios <see cref="IConnection"/> objects to work with Akka.Remote.Transports
/// </summary>
/// <summary>
/// Binds the events for any incoming TCP activity
/// </summary>
/// <summary>
/// Converts a <see cref="ByteString"/> structure into a Helios <see cref="NetworkData"/> structure
/// </summary>
/// <param name="byteString">The data to send over the network</param>
/// <param name="address">The address that we received data from / are sending data to</param>
/// <returns>a new <see cref="NetworkData"/> struct</returns>
/// <summary>
/// Converts a <see cref="NetworkData"/> structure into a <see cref="ByteString"/>
/// </summary>
/// <param name="data">The data we received from the network</param>
/// <returns>A populated <see cref="ByteString"/> instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Transport\Helios\HeliosTcpTransport.cs
//-----------------------------------------------------------------------
// <copyright file="HeliosTcpTransport.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// Fires whenever a Helios <see cref="IConnection"/> gets closed.
/// 
/// Two possible causes for this event handler to fire:
///  * The other end of the connection has closed. We don't make any distinctions between graceful / unplanned shutdown.
///  * This end of the connection experienced an error.
/// </summary>
/// <param name="cause">An exception describing why the socket was closed.</param>
/// <param name="closedChannel">The handle to the socket channel that closed.</param>
//if (cause != null)
//    ChannelLocalActor.Notify(closedChannel, new UnderlyingTransportError(cause, "Underlying transport closed."));
/// <summary>
/// Fires whenever a Helios <see cref="IConnection"/> received data from the network.
/// </summary>
/// <param name="data">The message playload.</param>
/// <param name="responseChannel">
/// The channel responsible for sending the message.
/// Can be used to send replies back.
/// </param>
/// <summary>
/// Fires whenever a Helios <see cref="IConnection"/> experienced a non-fatal error.
/// 
/// <remarks>The connection should still be open even after this event fires.</remarks>
/// </summary>
/// <param name="ex">The execption that triggered this event.</param>
/// <param name="erroredChannel">The handle to the Helios channel that errored.</param>
// Want to notify only for encoding exceptions
/// <summary>
/// TCP handlers for inbound connections
/// </summary>
/// <summary>
/// TCP handlers for outbound connections
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// TCP implementation of a <see cref="HeliosTransport"/>.
/// 
/// <remarks>
/// Due to the connection-oriented nature of TCP connections, this transport doesn't have to do any
/// additional bookkeeping when transports are disposed or opened.
/// </remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote\Transport\Helios\HeliosTransport.cs
//-----------------------------------------------------------------------
// <copyright file="HeliosTransport.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TransportMode
/// <summary>
/// The hostname that this server binds to
/// </summary>
/// <summary>
/// If different from <see cref="Hostname"/>, this is the public "address" that is bound to the <see cref="ActorSystem"/>,
/// whereas <see cref="Hostname"/> becomes the physical address that the low-level socket connects to.
/// </summary>
/// <summary>
/// Abstract base class for HeliosTransport - has separate child implementations for TCP / UDP respectively
/// </summary>
/// <summary>
/// maintains a list of all established connections, so we can close them easily
/// </summary>
/// <summary>
/// the internal executor used
/// </summary>
/// <summary>
/// Internal factory used for creating new outbound connection transports
/// </summary>
/// <summary>
/// Internal factory used for creating inbound connection listeners
/// </summary>
//use the port assigned by the transport
//Block reads until a handler actor is registered
//TODO
// free all of the connection objects we were holding onto
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs
//-----------------------------------------------------------------------
// <copyright file="BarrierCoordinator.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// 
/// This barrier coordinator gets informed of players connecting (NodeInfo),
/// players being deliberately removed (RemoveClient) or failing (ClientDisconnected)
/// by the controller. It also receives EnterBarrier requests, where upon the first
/// one received the name of the current barrier is set and all other known clients
/// are expected to join the barrier, whereupon all of the will be sent the successful
/// EnterBarrier return message. In case of planned removals, this may just happen
/// earlier, in case of failures the current barrier (and all subsequent ones) will
/// be failed by sending BarrierFailed responses.
///
///INTERNAL API.
/// </summary>
//this shall be set to true if all subsequent barriers shall fail
//we only allow the deadlines to get shorter
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\CommandLine.cs
//-----------------------------------------------------------------------
// <copyright file="CommandLine.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: Needs some work
/// <summary>
/// Command line argument parser for individual node tests during a <see cref="MultiNodeSpec"/>.
/// 
/// Parses arguments from <see cref="Environment.GetCommandLineArgs"/> using the same conventions as canonical Akka.
/// 
/// For example (from the Akka.NodeTestRunner source):
/// <code>
///     var nodeIndex = CommandLine.GetInt32("multinode.index");
///     var assemblyName = CommandLine.GetProperty("multinode.test-assembly");
///     var typeName = CommandLine.GetProperty("multinode.test-class");
///     var testName = CommandLine.GetProperty("multinode.test-method");
/// </code>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\Conductor.cs
//-----------------------------------------------------------------------
// <copyright file="Conductor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// The conductor is the one orchestrating the test: it governs the
/// <see cref="Akka.Remote.TestKit.Controller"/>'s ports to which all
/// Players connect, it issues commands to their
/// <see cref="Akka.Remote.TestKit.NetworkFailureInjector"/> and provides support
/// for barriers using the <see cref="Akka.Remote.TestKit.BarrierCoordinator"/>.
/// All of this is bundled inside the <see cref="TestConductor"/>
/// </summary>
//Conductor trait in JVM version
/// <summary>
/// Start the <see cref="Controller"/>, which in turn will
/// bind to a TCP port as specified in the `akka.testconductor.port` config
/// property, where 0 denotes automatic allocation. Since the latter is
/// actually preferred, a `Future[Int]` is returned which will be completed
/// with the port number actually chosen, so that this can then be communicated
/// to the players for their proper start-up.
///
/// This method also invokes Player.startClient,
/// since it is expected that the conductor participates in barriers for
/// overall coordination. The returned Future will only be completed once the
/// client’s start-up finishes, which in fact waits for all other players to
/// connect.
/// </summary>
/// <param name="participants">participants gives the number of participants which shall connect
///  before any of their startClient() operations complete
/// </param>
/// <param name="name"></param>
/// <param name="controllerPort"></param>
/// <returns></returns>
//TODO: Need to review this async stuff
/// <summary>
/// Make the remoting pipeline on the node throttle data sent to or received
/// from the given remote peer. Throttling works by delaying packet submission
/// within the netty pipeline until the packet would have been completely sent
/// according to the given rate, the previous packet completion and the current
/// packet length. In case of large packets they are split up if the calculated
/// end pause would exceed `akka.testconductor.packet-split-threshold`
/// (roughly). All of this uses the system’s scheduler, which is not
/// terribly precise and will execute tasks later than they are schedule (even
/// on average), but that is countered by using the actual execution time for
/// determining how much to send, leading to the correct output rate, but with
/// increased latency.
/// 
/// ====Note====
/// To use this feature you must activate the failure injector and throttler
/// transport adapters by specifying `testTransport(on = true)` in your MultiNodeConfig.
/// </summary>
/// <param name="node">is the symbolic name of the node which is to be affected</param>
/// <param name="target">is the symbolic name of the other node to which connectivity shall be throttled</param>
/// <param name="direction">can be either `Direction.Send`, `Direction.Receive` or `Direction.Both`</param>
/// <param name="rateMBit">is the maximum data rate in MBit</param>
/// <returns></returns>
/// <summary>
/// Switch the helios pipeline of the remote support into blackhole mode for
/// sending and/or receiving: it will just drop all messages right before
/// submitting them to the Socket or right after receiving them from the
/// Socket.
/// 
///  ====Note====
/// To use this feature you must activate the failure injector and throttler
/// transport adapters by specifying `testTransport(on = true)` in your MultiNodeConfig.
/// </summary>
/// <param name="node">is the symbolic name of the node which is to be affected</param>
/// <param name="target">is the symbolic name of the other node to which connectivity shall be impeded</param>
/// <param name="direction">can be either `Direction.Send`, `Direction.Receive` or `Direction.Both`</param>
/// <returns></returns>
//TODO: What is helios equivalent of this?
/*if(!Transport.DefaultAddress.Protocol.Contains(".trttl.gremlin."))
/// <summary>
/// Switch the Helios pipeline of the remote support into pass through mode for
/// sending and/or receiving.
/// 
/// ====Note====
/// To use this feature you must activate the failure injector and throttler
/// transport adapters by specifying `testTransport(on = true)` in your MultiNodeConfig.
/// </summary>
/// <param name="node">is the symbolic name of the node which is to be affected</param>
/// <param name="target">is the symbolic name of the other node to which connectivity shall be impeded</param>
/// <param name="direction">can be either `Direction.Send`, `Direction.Receive` or `Direction.Both`</param>
/// <returns></returns>
/// <summary>
/// Tell the remote support to TCP_RESET the connection to the given remote
/// peer. It works regardless of whether the recipient was initiator or
/// responder.
/// </summary>
/// <param name="node">is the symbolic name of the node which is to be affected</param>
/// <param name="target">is the symbolic name of the other node to which connectivity shall be impeded</param>
/// <returns></returns>
/// <summary>
/// Tell the remote support to TCP_RESET the connection to the given remote
/// peer. It works regardless of whether the recipient was initiator or
/// responder.
/// </summary>
/// <param name="node">is the symbolic name of the node which is to be affected</param>
/// <param name="target">is the symbolic name of the other node to which connectivity shall be impeded</param>
/// <returns></returns>
/// <summary>
/// Tell the actor system at the remote node to shut itself down. The node will also be
/// removed, so that the remaining nodes may still pass subsequent barriers.
/// </summary>
/// <param name="node">is the symbolic name of the node which is to be affected</param>
/// <param name="exitValue">is the return code which shall be given to System.exit</param>
/// <returns></returns>
// the recover is needed to handle ClientDisconnectedException exception,
// which is normal during shutdown
/// <summary>
/// Tell the actor system at the remote node to shut itself down without
/// awaiting termination of remote-deployed children. The node will also be
/// removed, so that the remaining nodes may still pass subsequent barriers.
/// </summary>
/// <param name="node">is the symbolic name of the node which is to be affected</param>
/// <param name="abort"></param>
/// <returns></returns>
// the recover is needed to handle ClientDisconnectedException exception,
// which is normal during shutdown
/// <summary>
/// Obtain the list of remote host names currently registered.
/// </summary>
/// <summary>
/// Remove a remote host from the list, so that the remaining nodes may still
/// pass subsequent barriers. This must be done before the client connection
/// breaks down in order to affect an “orderly” removal (i.e. without failing
/// present and future barriers).
/// </summary>
/// <param name="node">is the symbolic name of the node which is to be removed</param>
/// <returns></returns>
/// <summary>
/// This handler is what's used to process events which occur on <see cref="RemoteConnection"/>.
/// 
/// It's only purpose is to dispatch incoming messages to the right <see cref="ServerFSM"/> actor. There is
/// one shared instance fo this class for all <see cref="IConnection"/>s accepted by one <see cref="Controller"/>.
/// </summary>
//TODO: Seems wrong to create new RemoteConnection here
/// <summary>
/// The server part of each client connection is represented by a ServerFSM.
/// The Initial state handles reception of the new client’s
/// <see cref="Hello"/> message (which is needed for all subsequent
/// node name translations).
/// 
/// In the Ready state, messages from the client are forwarded to the controller
/// and <see cref="EndpointManager.Send"/> requests are sent, but the latter is
/// treated specially: all client operations are to be confirmed by a
/// <see cref="Done"/> message, and there can be only one such
/// request outstanding at a given time (i.e. a Send fails if the previous has
/// not yet been acknowledged).
/// 
/// INTERNAL API.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\Controller.cs
//-----------------------------------------------------------------------
// <copyright file="Controller.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This controls test execution by managing barriers (delegated to
/// <see cref="BarrierCoordinator"/>, its child) and allowing
/// network and other failures to be injected at the test nodes.
/// 
/// INTERNAL API.
/// </summary>
/// <summary>
/// This exception is thrown when a client has disconnected.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ClientDisconnectedException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ClientDisconnectedException"/> class.
/// </summary>
/// <param name="info">The <see cref="SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <summary>
/// Marker interface for working with <see cref="BarrierCoordinator"/>
/// </summary>
// map keeping unanswered queries for node addresses (enqueued upon GetAddress, serviced upon NodeInfo)
/// <summary>
/// Supervision of the BarrierCoordinator means to catch all his bad emotions
/// and sometimes console him (BarrierEmpty, BarrierTimeout), sometimes tell
/// him to hate the world (WrongBarrier, DuplicateNode, ClientLost). The latter shall help
/// terminate broken tests as quickly as possible (i.e. without awaiting
/// BarrierTimeouts in the players).
/// </summary>
/// <returns></returns>
//TODO: Logging receive?
//FIXME what should happen?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs
//-----------------------------------------------------------------------
// <copyright file="DataTypes.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: This is messy, better way to do this?
//Marker interface to avoid using reflection to work out if message
//is derived from generic type
//TODO: This is messy, better way to do this?
//Marker interface to avoid using reflection to work out if message
//is derived from generic type
// messages sent to from Conductor to Player
// messages sent to from Player to Conductor
// messages sent from TestConductorExt to Conductor
// messages sent over the wire
// unconfirmed messages going to the Player
/// <summary>
/// First message of connection sets names straight.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\Extension.cs
//-----------------------------------------------------------------------
// <copyright file="Extension.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Access to the <see cref="TestConductor"/> extension:
/// 
/// {{{
/// var tc = TestConductor(system)
/// tc.StartController(numPlayers)
/// OR
/// tc.StartClient(conductorPort)
/// }}}
/// </summary>
//TODO:
//override def lookup = TestConductor
//TODO:
//override def get(system: ActorSystem): TestConductorExt = super.get(system)
//def apply()(implicit ctx: ActorContext): TestConductorExt = apply(ctx.system)
/// <summary>
/// This binds together the Conductor and Player in an extension
/// ====Note====
/// This extension requires the `akka.actor.provider`
/// to be a <see cref="Akka.Remote.RemoteActorRefProvider"/>.
/// To use ``blackhole``, ``passThrough``, and ``throttle`` you must activate the
/// failure injector and throttler transport adapters by specifying `testTransport(on = true)`
/// in your MultiNodeConfig.
/// </summary>
/// <summary>
/// Remote transport used by the actor ref provider.
/// </summary>
/// <summary>
/// Transport address of this Helios-like remote transport.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\MsgDecoder.cs
//-----------------------------------------------------------------------
// <copyright file="MsgDecoder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\MsgEncoder.cs
//-----------------------------------------------------------------------
// <copyright file="MsgEncoder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//yep, it's FINE if this throws a null reference error - means that the test configuration is borked anyway
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\MultiNodeFact.cs
//-----------------------------------------------------------------------
// <copyright file="MultiNodeFact.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\MultiNodeSpec.cs
//-----------------------------------------------------------------------
// <copyright file="MultiNodeSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Configure the role names and participants of the test, including configuration settings
/// </summary>
/// <summary>
/// Register a common base config for all test participants, if so desired.
/// </summary>
/// <summary>
/// Register a config override for a specific participant.
/// </summary>
/// <summary>
/// Include for verbose debug logging
/// </summary>
/// <param name="on">when `true` debug Config is returned, otherwise config with info logging</param>
/// <summary>
/// To be able to use `blackhole`, `passThrough`, and `throttle` you must
/// activate the failure injector and throttler transport adapters by
/// specifying `testTransport(on = true)` in your MultiNodeConfig.
/// </summary>
//TODO: Equivalent in Helios?
//TODO: Applicable?
/// <summary>
/// Note: To be able to run tests with everything ignored or excluded by tags
/// you must not use `testconductor`, or helper methods that use `testconductor`,
/// from the constructor of your test class. Otherwise the controller node might
/// be shutdown before other nodes have completed and you will see errors like:
/// `AskTimeoutException: sending to terminated ref breaks promises`. Using lazy
/// val is fine.
/// </summary>
//TODO: Sort out references to Java classes in 
/// <summary>
/// Marker used to indicate that <see cref="MaxNodes"/> has not been set yet.
/// </summary>
/// <summary>
/// Number of nodes node taking part in this test.
/// -Dmultinode.max-nodes=4
/// </summary>
/// <summary>
/// Name (or IP address; must be resolvable)
/// of the host this node is running on
/// 
/// <code>-Dmultinode.host=host.example.com</code>
/// 
/// InetAddress.getLocalHost.getHostAddress is used if empty or "localhost"
/// is defined as system property "multinode.host".
/// </summary>
//Run this assertion every time. Consistency is more important than performance.
/// <summary>
/// Marker used to indicate what the "not been set" value of <see cref="SelfPort"/> is.
/// </summary>
/// <summary>
/// Port number of this node. Defaults to 0 which means a random port.
/// 
/// <code>-Dmultinode.port=0</code>
/// </summary>
//unset
/// <summary>
/// Name (or IP address; must be resolvable using InetAddress.getByName)
/// of the host that the server node is running on.
/// 
/// <code>-Dmultinode.server-host=server.example.com</code>
/// </summary>
/// <summary>
/// Marker used to indicate what the "not been set" value of <see cref="ServerPort"/> is.
/// </summary>
/// <summary>
/// Default value for <see cref="ServerPort"/>
/// </summary>
/// <summary>
/// Port number of the node that's running the server system. Defaults to 4711.
/// 
/// <code>-Dmultinode.server-port=4711</code>
/// </summary>
/// <summary>
/// Marker value used to indicate that <see cref="SelfIndex"/> has not been set yet.
/// </summary>
/// <summary>
/// Index of this node in the roles sequence. The TestConductor
/// is started in “controller” mode on selfIndex 0, i.e. there you can inject
/// failures and shutdown other nodes etc.
/// </summary>
// wait for all nodes to remove themselves before we shut the conductor down
/// <summary>
/// Override this and return `true` to assert that the
/// shutdown of the `ActorSystem` was done properly.
/// </summary>
//Test Class Interface
/// <summary>
/// Override this method to do something when the whole test is starting up.
/// </summary>
/// <summary>
/// Override this method to do something when the whole test is terminating.
/// </summary>
/// <summary>
/// All registered roles
/// </summary>
/// <summary>
/// MUST BE DEFINED BY USER.
/// 
/// Defines the number of participants required for starting the test. This
/// might not be equals to the number of nodes available to the test.
/// </summary>
/// <summary>
/// Must be defined by user. Creates the values used by <see cref="InitialParticipants"/>
/// </summary>
/// <summary>
/// Execute the given block of code only on the given nodes (names according
/// to the `roleMap`).
/// </summary>
/// <summary>
/// Verify that the running node matches one of the given nodes
/// </summary>
/// <summary>
/// Enter the named barriers in the order given. Use the remaining duration from
/// the innermost enclosing `within` block or the default `BarrierTimeout`
/// </summary>
/// <summary>
/// Query the controller for the transport address of the given node (by role name) and
/// return that as an ActorPath for easy composition:
/// 
/// <code>var serviceA = Sys.ActorSelection(Node(new RoleName("master")) / "user" / "serviceA");</code>
/// </summary>
//TODO: Async stuff here 
/*
//TODO: Async stuff
// now add deployments, if so desired
// might happen if all test cases are ignored (excluded) and
// controller node is finished/exited before r.addr is run
// on the other nodes
//unresolved-replacement-" + r.Role.Name;
//TODO: Improve docs
/// <summary>
/// Use this to hook <see cref="MultiNodeSpec"/> into your test framework lifecycle
/// </summary>
/// <summary>
/// Call this before the start of the test run. NOT before every test case.
/// </summary>
/// <summary>
/// Call this after the all test cases have run. NOT after every test case.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\Player.cs
//-----------------------------------------------------------------------
// <copyright file="Player.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// The Player is the client component of the
/// test conductor extension. It registers with
/// the conductor's controller
///  in order to participate in barriers and enable network failure injection
/// </summary>
//Player trait in JVM version
/// <summary>
/// Connect to the conductor on the given port (the host is taken from setting
/// `akka.testconductor.host`). The connection is made asynchronously, but you
/// should await completion of the returned Future because that implies that
/// all expected participants of this test have successfully connected (i.e.
/// this is a first barrier in itself). The number of expected participants is
/// set in <see cref="TestConductor"/>`.startController()`.
/// </summary>
//TODO: IRequiresMessageQueue
/// <summary>
/// Enter the named barriers, one after the other, in the order given. Will
/// throw an exception in case of timeouts or other errors.
/// </summary>
/// <summary>
/// Enter the named barriers, one after the other, in the order given. Will
/// throw an exception in case of timeouts or other errors.
/// </summary>
//TODO: Wait?
//TODO: QueryTimeout implicit?
/// <summary>
/// This is the controlling entity on the player
/// side: in a first step it registers itself with a symbolic name and its remote
/// address at the <see cref="Controller"/>, then waits for the
/// `Done` message which signals that all other expected test participants have
/// done the same. After that, it will pass barrier requests to and from the
/// coordinator and react to the Conductors’s
/// requests for failure injection.
/// 
/// Note that you can't perform requests concurrently, e.g. enter barrier
/// from one thread and ask for node address from another thread.
/// 
/// INTERNAL API.
/// </summary>
//TODO: RequireMessageQueue
//FIXME is this the right EC for the future below?
// FIXME: Currently ignoring, needs support from Remoting
//TODO: terminate more aggressively with Abort
//Context.System.AsInstanceOf<ActorSystemImpl>().Abort();
//FIXME what should happen?
/// <summary>
/// This handler only forwards messages received from the conductor to the <see cref="ClientFSM"/>
/// 
/// INTERNAL API.
/// </summary>
//added this to help mute log messages
//TODO: Some logic here in JVM version to execute this on a different pool to the Netty IO pool
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\RemoteConnection.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteConnection.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// INTERNAL API
/// </summary>
/// <summary>
/// Handler interface for receiving events from Helios
/// </summary>
/// <summary>
/// INTERNAL API
/// </summary>
//Got to pass OnMessage here or get null reference.
//LengthFieldPrepender
//LengthFieldFrameBasedDecoder
//server
//LengthFieldPrepender
//LengthFieldFrameBasedDecoder
//TODO: Correct?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\Internals\TestConductorConfigFactory.cs
//-----------------------------------------------------------------------
// <copyright file="TestConductorConfigFactory.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This class contains methods used to retrieve Multi-Node TestKit configuration options from this assembly's resources
/// and injects them in relevant tests.
///
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Retrieves the default Multi-Node TestKit options that Akka.NET uses when no configuration has been defined.
/// </summary>
/// <returns>The configuration that contains default values for all Multi-Node TestKit options.</returns>
/// <summary>
/// Retrieves a configuration defined in a resource of the current executing assembly.
/// </summary>
/// <param name="resourceName">The name of the resource that contains the configuration.</param>
/// <returns>The configuration defined in the current executing assembly.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\Proto\ProtobufDecoder.cs
//-----------------------------------------------------------------------
// <copyright file="ProtobufDecoder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Decodes a message from a <see cref="IByteBuf"/> into a Google protobuff wire format
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\Proto\ProtobufEncoder.cs
//-----------------------------------------------------------------------
// <copyright file="ProtobufEncoder.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Encodes a generic object into a <see cref="IByteBuf"/> using Google protobufs
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs
//-----------------------------------------------------------------------
// <copyright file="TestConductorProtocol.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit.Tests\BarrierSpec.cs
//-----------------------------------------------------------------------
// <copyright file="BarrierSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//sys"), Sys.DeadLetters), TestActor);
//EventFilter<BarrierCoordinator.BarrierEmpty>(1, () => b.Tell(new BarrierCoordinator.RemoveClient(A), TestActor)); //appears to be a bug in the testfilter
//sys"), Sys.DeadLetters));
//sys"), a.Ref));
//sys"), b.Ref));
//sys"), a.Ref));
//sys"), b.Ref));
//sys"), c.Ref));
//sys"), a.Ref));
//sys"), b.Ref));
//sys"), c.Ref));
//sys"), a.Ref));
//sys"), b.Ref));
//sys"), a.Ref);
//sys"), b.Ref));
//TODO: EventFilter?
//sys"), a.Ref);
//sys"), c.Ref);
//sys"), b.Ref));
//TODO: Event filter?
//sys"), a.Ref));
//sys"), b.Ref));
//TODO: Event filter
//TODO: EventFilter
//sys"), a.Ref));
//sys"), a.Ref);
//sys"), b.Ref);
//sys"), a.Ref);
//sys"), b.Ref);
//TODO: Event filter
//TODO: Controller tests.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit.Tests\ControllerSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ControllerSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//sys"), TestActor));
//sys"), TestActor));
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.TestKit.Tests\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="AccrualFailureDetectorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//larger stdDeviation results => lower phi
//0
//1000
//1100
//1200
//8200
//1000 regular intervals, 5 minute pause, then a short pause again that should trigger unreachable again
//after the long pause
//after the 7 seconds pause
//3 seconds acceptableLostDuration
// 100 ms interval
//0
//100
//200
//300
//400
// 500 ms interval, should become same phi when 100 ms intervals have been dropped
//1000
//1500
//2000
//2500
//3000
/// <summary>
/// Uses an epsilon value to compare between floating point numbers.
/// Uses a default epsilon value of 0.001d
/// </summary>
/// <summary>
/// Static helper class used for assisting with tests related to <see cref="FailureDetector"/>s.
/// </summary>
/// <summary>
/// Uses the default values for creating a new failure detector
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs
//-----------------------------------------------------------------------
// <copyright file="AckedDeliverySpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Dropping phase
//Finalizing phase
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="DeadlineFailureDetectorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//0
//1000
//1100
//1200
//8200
//after the long pause
//after the 7 second pause
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs
//-----------------------------------------------------------------------
// <copyright file="EndpointRegistrySpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs
//-----------------------------------------------------------------------
// <copyright file="FailureDetectorRegistrySpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//0
//1000
//1100
//1200
//5200, but unrelated resource
//changed to 3 seconds
//changed to 3 seconds
//0
//1000
//1100
//2200
//3300
//receives a heartbeat from an explicitly removed node
//4400
//5500
//6600
//6700
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteConfigSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Assert.Equal("akka.remote.default-remote-dispatcher", remoteSettings.Dispatcher); //TODO: add RemoteDispatcher support
//TODO add adapter support
//TODO fill this in when we add secure cookie support
// server-socket-worker-pool
//client-socket-worker-pool
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\RemoteConsistentHashingRouterSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteRouterSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// simulating running router on two different nodes (a1, a2) with target routees on 3 other nodes (s1, s2, s3) 
//Sys@server1:2552/user/a/b"));
//Sys@server2:2552/user/a/b"));
//Sys@server3:2552/user/a/b"));
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\RemoteDaemonSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteDaemonSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//ask to create an actor MyRemoteActor, this actor has a child "child"
//Wait for the child to be created (actors are instantiated async)
//try to resolve the child actor "child"
//pass a message to the child
//expect the child to forward the message to the eventstream
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\RemoteDeployerSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteDeployerSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Tests to see that the <see cref="RemoteDeployer"/> parses
/// <see cref="RemoteRouterConfig"/> sections correctly.
/// </summary>
//sys@wallace:2552""
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteRouterSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Tests for <see cref="RemoteRouterConfig"/>
/// </summary>
// ReSharper disable once PossibleInvalidOperationException
//${sysName}@localhost:${port}""]
//${sysName}@localhost:${port}""]
//${sysName}@localhost:${port}""
//${masterSysName}""
//${sysName}@localhost:${port}""]
//${sysName}@localhost:${port}""]
//${sysName}@localhost:${port}"
//{0}", masterActorSystem.Name));
// Need to be able to bind EventFilter to additional actor system (masterActorSystem in this case) before this code works
// EventFilter.Exception<ActorKilledException>().ExpectOne(() => 
//);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteWatcherSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// don't publish the real AddressTerminated, but a testable message,
// that doesn't interfere with the real watch that is going on in the background
// don't quarantine in remoting, but publish a testable message
//TODO: Mute dead letters?
/*
//TODO: Better way to write this?
// for each watchee the RemoteWatcher also adds its own watch: 5 = 3 + 2
// (a1->b1), (a1->b2), (a2->b2)
// still (a1->b2) and (a2->b2) left
// still (a1->b2) left
// all unwatched
// make sure nothing floods over to next test
//but no HeartbeatRsp
// no HeartbeatRsp sent
//but no HeartbeatRsp
// no real quarantine when missing first heartbeat, uid unknown
//but no HeartbeatRsp
//real AddressTerminated would trigger Terminated for b6, simulate that here
//assume that connection comes up again, or remote system is restarted
//then stop heartbeating again; should generate a new AddressTerminated
//but no HeartbeatRsp
//make sure nothing floods over to next test
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RemotingSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//ConfigurationFactory.ParseString(GetOtherRemoteSysConfig());
//remote-sys@localhost:12346/user/echo");
//RemotingSpec@localhost:12345""
//remote-sys@localhost:12346""
//remote-sys@localhost:12346""
//remote-sys@localhost:12346""
//RemotingSpec@localhost:12345""
//remote-sys@localhost:12346""
//RemotingSpec@localhost:12345""
//remote-sys@localhost:12346""
//remote-sys@localhost:12346""
//remote-sys@localhost:12346""
//RemotingSpec@localhost:12345""
//remote-sys@localhost:12346""
//RemotingSpec@localhost:12345""
//TODO: using smaller numbers for the cancellation here causes a bug.
//the remoting layer uses some "initialdelay task.delay" for 4 seconds.
//so the token is cancelled before the delay completed.. 
//remote-sys@localhost:12346/remote/akka.test/RemotingSpec@localhost:12345/user/blub", r.Path.ToString());
//remote-sys@localhost:12346/remote/akka.test/RemotingSpec@localhost:12345/user/echo", r.Path.ToString());
//remote-sys@localhost:12346/remote/akka.test/RemotingSpec@localhost:12345/user/echo", r.Path.ToString());
//have one of the routees send the message
//have one of the routees send the message
//remote-sys@localhost:12346/user/{0}", bigBounceId));
//TODO need to implement test filters first
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\Serialization\DaemonMsgCreateSerializerSpec.cs
//-----------------------------------------------------------------------
// <copyright file="DaemonMsgCreateSerializerSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaProtocolSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Heartbeat was sent in response to Associate
//a stray message will force a disassociate
//this associate will now be ignored
//keeps sending heartbeats
//finish the connection by sending back an associate message
//wait for one heartbeat
//handler tries to register after the association has closed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolStressTest.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaProtocolStressTest.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used to test the throughput of the Akka Protocol
/// </summary>
// Due to the (bursty) lossyness of gate, we are happy with receiving at least one message from the upper
// half (> 50000). Since messages are sent in bursts of 2000 0.5 seconds apart, this is reasonable.
// The purpose of this test is not reliable delivery (there is a gremlin with 30% loss anyway) but respecting
// the proper ordering.
// Make sure the other side eventually "gets the message"
//BUG: looks like the serializer will by default convert plain numerics sent over the wire into long integers
//todo mute both systems for deadletters for any type of message
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\Transport\GenericTransportSpec.cs
//-----------------------------------------------------------------------
// <copyright file="GenericTransportSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Must complete the returned promise to receive events
// Transport throws InvalidAssociationException when trying to associate with non-existing system
// Initialize handles
// Initialize handles
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\Transport\TestTransportSpec.cs
//-----------------------------------------------------------------------
// <copyright file="TestTransportSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//arrange
//act
//assert
//arrange
//act
//must complete returned promises to receive events
//assert
//arrange
//act
//assert
//arrange
//act
//must complete returned promises to receive events
//Initialize handles
//assert
//arrange
//act
//must complete returned promises to receive events
//Initialize handles
//assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ThrottleModeSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests\Transport\ThrottlerTransportAdapterSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ThrottlerTransportAdapterSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: muteDeadLetters (typeof(Lost)) for both actor systems 
// after we remove the Blackhole we can't be certain of the state
// of the connection, repeat until success
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.MultiNode\LookupRemoteActorMultiNetSpec.cs
//-----------------------------------------------------------------------
// <copyright file="LookupRemoteActorMultiNetSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.MultiNode\NewRemoteActorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="NewRemoteActorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// This watch is in race with the shutdown of the watched system. This race should remain, as the test should
// handle both cases:
//  - remote system receives watch, replies with DeathWatchNotification
//  - remote system never gets watch, but DeathWatch heartbeats time out, and AddressTerminated is generated
//    (this needs some time to happen)
// master system is supposed to be shutdown after slave
// this should be triggered by slave system shutdown
// Important that this is the last test.
// It should not be any barriers here.
// verifySystemShutdown = true will ensure that system shutdown is successful
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.MultiNode\PiercingShouldKeepQuarantineSpec.cs
//-----------------------------------------------------------------------
// <copyright file="PiercingShouldKeepQuarantineSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Communicate with second system
// Manually Quarantine the other system
// Quarantining is not immedeiate
// Quarantine is up - Should not be able to communicate with remote system any more
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteDeliverySpec.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteDeliverySpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// in case the loop count is increased it is good with some progress feedback
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteDeploymentDeathWatchSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteWatcherSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Possible to override to let them heartbeat for a while.
// if the remote deployed actor is not removed the system will not shutdown
//TODO: add printTree
//second system will be shutdown
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteRandomSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteRandomSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// since it's random we can't be too strict in the assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteRoundRobinSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RemoteRoundRobinSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/*
//ARemoteRoundRobinPoolWithResizerMustBeLocallyInstantiatedOnARemoteNodeAfterSeveralResizeRounds();
//each message triggers a resize, incrementing number of routees with 1
// check if they have same elements (ignoring order)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.MultiNode\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.Performance\ForkJoinDispatcherRemoteMessagingThroughputSpec.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.Performance\ThreadPoolDispatcherRemoteMessagingThroughputSpec.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.Performance\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.Performance\Transports\AssociationStressSpecBase.cs
/// <summary>
///     Creates and shuts associations between two <see cref="ActorSystem" /> instances rapidly
///     using pluggable transports. Designed to expose race conditions, deadlocks, and other
///     faults with the <see cref="AssociationHandle" /> implementation specific to each transport.
/// </summary>
/// <summary>
///     Used to create a HOCON <see cref="Config" /> object for each <see cref="ActorSystem" />
///     participating in this throughput test.
///     This method is responsible for selecting the correct <see cref="Transport" /> implementation.
/// </summary>
/// <param name="actorSystemName">The name of the <see cref="ActorSystem" />. Needed for <see cref="TestTransport" />.</param>
/// <param name="ipOrHostname">The address this system will be bound to</param>
/// <param name="port">The port this system will be bound to</param>
/// <param name="registryKey">
///     The <see cref="AssociationRegistry" /> key. Only needed when using
///     <see cref="TestTransport" />.
/// </param>
/// <returns>A populated <see cref="Config" /> object.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.Performance\Transports\HeliosRemoteMessagingThroughputSpec.cs
// todo: SKIP FOR NOW - BUGS
//public class HeliosRemoteMessagingThroughputSpec : RemoteMessagingThroughputSpecBase
//{
//    public override Config CreateActorSystemConfig(string actorSystemName, string ipOrHostname, int port)
//    {
//        var baseConfig = ConfigurationFactory.ParseString(@"
//            akka {
//          actor.provider = ""Akka.Remote.RemoteActorRefProvider,Akka.Remote""
//          remote {
//            log-remote-lifecycle-events = off
//            helios.tcp {
//                port = 0
//                hostname = ""localhost""
//                # Used to configure the number of I/O worker threads on server sockets
//  server-socket-worker-pool {
//    # Min number of threads to cap factor-based number to
//    pool-size-min = 1
//    # The pool size factor is used to determine thread pool size
//    # using the following formula: ceil(available processors * factor).
//    # Resulting size is then bounded by the pool-size-min and
//    # pool-size-max values.
//    pool-size-factor = 1.0
//    # Max number of threads to cap factor-based number to
//    pool-size-max = 1
//  }
//  # Used to configure the number of I/O worker threads on client sockets
//  client-socket-worker-pool {
//    # Min number of threads to cap factor-based number to
//    pool-size-min = 1
//    # The pool size factor is used to determine thread pool size
//    # using the following formula: ceil(available processors * factor).
//    # Resulting size is then bounded by the pool-size-min and
//    # pool-size-max values.
//    pool-size-factor = 1.0
//    # Max number of threads to cap factor-based number to
//    pool-size-max = 1
//  }
//            }
//          }
//        ");
//        var bindingConfig =
//            ConfigurationFactory.ParseString(@"akka.remote.helios.tcp.hostname = """ + ipOrHostname + @"""")
//            .WithFallback(ConfigurationFactory.ParseString(@"akka.remote.helios.tcp.port = " + port));
//        return bindingConfig.WithFallback(baseConfig);
//    }
//}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.Performance\Transports\RemoteMessagingThroughputSpecBase.cs
/// <summary>
/// Used to test the performance of remote messaging in Akka.Remote using various transports
/// </summary>
/// <summary>
/// Used to create a HOCON <see cref="Config"/> object for each <see cref="ActorSystem"/>
/// participating in this throughput test.
/// 
/// This method is responsible for selecting the correct <see cref="Transport.Transport"/> implementation.
/// </summary>
/// <param name="actorSystemName">The name of the <see cref="ActorSystem"/>. Needed for <see cref="Transport.TestTransport"/>.</param>
/// <param name="ipOrHostname">The address this system will be bound to</param>
/// <param name="port">The port this system will be bound to</param>
/// <returns>A populated <see cref="Config"/> object.</returns>
// send a remote message
// send a remote message
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.Performance\Transports\TestTransportAssociationStressSpec.cs
//BUG: setting the port to 0 causes the DefaultAddress to report the port as -1
//{actorSystemName}@{ipOrHostname}:{port}";
// nuke all registries
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Remote.Tests.Performance\Transports\TestTransportRemoteMessagingThroughputSpec.cs
//BUG: setting the port to 0 causes the DefaultAddress to report the port as -1
//{actorSystemName}@{ipOrHostname}:{port}";
// force all content logged by the TestTransport to be released
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\ActorCellKeepingSynchronizationContext.cs
//-----------------------------------------------------------------------
// <copyright file="ActorCellKeepingSynchronizationContext.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\AutoPilots.cs
//-----------------------------------------------------------------------
// <copyright file="AutoPilots.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Creates an <see cref="AutoPilot"/>.
/// <para>An <see cref="AutoPilot"/> will be called for each received message and can be 
/// used to send or forward messages, etc. </para>
/// <para>Each invocation must return the <see cref="AutoPilot"/> for the next round.</para>
/// <para>To reuse an <see cref="AutoPilot"/> for the next message either 
/// return the instance or return <see cref="AutoPilot.KeepRunning"/>.</para>
/// <para>Return <see cref="AutoPilot.NoAutoPilot"/> to stop handling messages.</para>
/// </summary>
/// <summary>
/// <para>This function will be called for each received message and can be 
/// used to send or forward messages, etc. </para>
/// <para>Each invocation must return the <see cref="AutoPilot"/> for the next round.</para> 
/// </summary>
/// <param name="sender">The sender.</param>
/// <param name="message">The message.</param>
/// <returns>The <see cref="AutoPilot"/> to be used for the next round</returns>
/// <summary>
/// When returned by another <see cref="AutoPilot"/> then no
/// action will be performed by the <see cref="TestActor"/>
/// for the next message. This is the default <see cref="AutoPilot"/> used 
/// by <see cref="AutoPilot"/>.
/// </summary>
/// <summary>
/// When returned by another <see cref="AutoPilot"/> then <see cref="TestActor"/>
/// will reuse the AutoPilot for the next message.
/// </summary>
/// <summary>
/// When returned by another <see cref="AutoPilot"/> then no
/// action will be performed by the <see cref="TestActor"/>
/// for the next message. This is the default <see cref="AutoPilot"/> used 
/// by <see cref="AutoPilot"/>.
/// </summary>
/// <summary>
/// When returned by another <see cref="AutoPilot"/> then <see cref="TestActor"/>
/// will reuse the AutoPilot for the next message.
/// </summary>
/// <summary>
/// Creates an <see cref="AutoPilot"/>.
/// <para>The <see cref="AutoPilotDelegate"/> specified in the constructor will 
/// be called for each received message and can be used to send or forward 
/// messages, etc. </para>
/// <para>Each invocation must return the <see cref="AutoPilot"/> for the next round.</para>
/// <para>To have this instance handle the next message either return this instance
/// or return <see cref="AutoPilot.KeepRunning"/>.</para>
/// <para>Return <see cref="AutoPilot.NoAutoPilot"/> to stop handling messages.</para>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\CallingThreadDispatcher.cs
//-----------------------------------------------------------------------
// <copyright file="CallingThreadDispatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\FSMSpecHelpers.cs
//-----------------------------------------------------------------------
// <copyright file="FSMSpecHelpers.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\INoImplicitSender.cs
//-----------------------------------------------------------------------
// <copyright file="INoImplicitSender.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Normally test classes has <see cref="TestKitBase.TestActor"/> as implicit sender.
/// So when no sender is specified when sending messages, <see cref="TestKitBase.TestActor"/>
/// is used.
/// When a a test class implements <see cref="INoImplicitSender"/> this behavior is removed and the normal
/// behavior is restored, i.e. <see cref="ActorRefs.NoSender"/> is used as sender when no sender has been specified.
/// <example>
/// <code>
/// public class WithImplicitSender : TestKit
/// {
///    public void TheTestMethod()
///    {
///       ...
///       someActor.Tell("message");             //TestActor is used as Sender
///       someActor.Tell("message", TestActor);  //TestActor is used as Sender
///    }
/// }
/// 
/// public class WithNoImplicitSender : TestKit, INoImplicitSender
/// {
///    public void TheTestMethod()
///    {
///       ...
///       someActor.Tell("message");    //ActorRefs.NoSender is used as Sender
///    }
/// }
/// </code>
/// </example>
/// </summary>
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\ITestKitAssertions.cs
//-----------------------------------------------------------------------
// <copyright file="ITestKitAssertions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\MessageEnvelope.cs
//-----------------------------------------------------------------------
// <copyright file="MessageEnvelope.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//this is called Message in Akka JVM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\NullMessageEnvelope.cs
//-----------------------------------------------------------------------
// <copyright file="NullMessageEnvelope.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\RealMessageEnvelope.cs
//-----------------------------------------------------------------------
// <copyright file="RealMessageEnvelope.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestActor.cs
//-----------------------------------------------------------------------
// <copyright file="TestActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A delegate that returns <c>true</c> if the <paramref name="message"/> should be ignored.
/// </summary>
/// <param name="message">The message.</param>
/// <returns></returns>
/// <summary>
/// Message that is supposed to be sent to a <see cref="TestActor"/> to make it ignore 
/// received messages. If the delegate specified on the constructor returns
/// <c>true</c> the message will be ignored by <see cref="TestActor"/>
/// </summary>
/// <summary>
/// Message that is supposed to be sent to a <see cref="TestActor"/> to make it watch 
/// the specified actor and receive death notifications, 
/// i.e. <see cref="Terminated"/> messages.
/// </summary>
/// <summary>
/// Message that is supposed to be sent to a <see cref="TestActor"/> to make it unwatch 
/// a previously watched actor.
/// </summary>
/// <summary>
/// Message that is supposed to be sent to a <see cref="TestActor"/>
/// to install an AutoPilot to drive the <see cref="TestActor"/>: the AutoPilot 
/// will be run for each received message and can be used to send or forward 
/// messages, etc. Each invocation must return the AutoPilot for the next round.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestActorRef.cs
//-----------------------------------------------------------------------
// <copyright file="TestActorRef.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This special ActorRef is exclusively for use during unit testing in a single-threaded environment. Therefore, it
/// overrides the dispatcher to <see cref="CallingThreadDispatcher"/> and sets the receiveTimeout to None. Otherwise,
/// it acts just like a normal ActorRef. You may retrieve a reference to the underlying actor to test internal logic.
/// A <see cref="TestActorRef{TActor}"/> can be implicitly casted to an <see cref="IActorRef"/> or you can get the actual
/// <see cref="IActorRef"/> from the <see cref="TestActorRefBase{TActor}.Ref"/> property.
/// </summary>
/// <typeparam name="TActor">The type of actor</typeparam>
/// <summary>
/// Initializes a new instance of the <see cref="TestActorRef{TActor}"/> class.
/// </summary>
/// <param name="system">The system.</param>
/// <param name="actorProps">The actor props.</param>
/// <param name="supervisor">Optional: The supervisor.</param>
/// <param name="name">Optional: The name.</param>
//Here to suppress CS0660, 'class' defines operator == or operator != but does not override Object.Equals(object o)
//We have correct implementations in TestActorRefBase, so it's perfectly fine to delegate
//Here to suppress CS0661, 'class' defines operator == or operator != but does not override Object.GetHashCode()
//We have correct implementations in TestActorRefBase, so it's perfectly fine to delegate
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestActorRefBase.cs
//-----------------------------------------------------------------------
// <copyright file="TestActorRefBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is the base class for TestActorRefs
/// </summary>
/// <typeparam name="TActor">The type of actor</typeparam>
/// <summary>
/// Directly inject messages into actor receive behavior. Any exceptions
/// thrown will be available to you, while still being able to use
/// become/unbecome.
/// </summary>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <summary>
/// Gets the path of this instance
/// </summary>
/// <summary>
/// Sends a message to this actor. 
/// If this call is made from within an actor, the current actor will be the sender.
/// If the call is made from a test class that is based on TestKit, TestActor will 
/// will be the sender;
/// otherwise <see cref="ActorRefs.NoSender"/> will be set as sender.
/// </summary>
/// <param name="message">The message.</param>
/// <summary>
/// Forwards a message to this actor.
/// If this call is made from within an actor, the current actor will be the sender.
/// If the call is made from a test class that is based on TestKit, TestActor will 
/// will be the sender;
/// </summary>
/// <param name="message">The message.</param>
/// <summary>
/// Sends a message to this actor with the specified sender.
/// </summary>
/// <param name="message">The message.</param>
/// <param name="sender">The sender</param>
/// <summary>
/// Registers this actor to be a death monitor of the provided ActorRef
/// This means that this actor will get a Terminated()-message when the provided actor
/// is permanently terminated.
/// Returns the same ActorRef that is provided to it, to allow for cleaner invocations.
/// </summary>
/// <param name="subject">The subject to watch.</param>
/// <returns>Returns the same ActorRef that is provided to it, to allow for cleaner invocations.</returns>
/// <summary>
/// Deregisters this actor from being a death monitor of the provided ActorRef
/// This means that this actor will not get a Terminated()-message when the provided actor
/// is permanently terminated.
/// Returns the same ActorRef that is provided to it, to allow for cleaner invocations.
/// </summary>
/// <returns>Returns the same ActorRef that is provided to it, to allow for cleaner invocations.</returns>
/// <param name="subject">The subject to unwatch.</param>
//ActorRef implementations
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestBarrier.cs
//-----------------------------------------------------------------------
// <copyright file="TestBarrier.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Wraps a <see cref="Barrier"/> for use in testing.
/// It always uses a timeout when waiting.
/// Timeouts will always throw an exception. The default timeout is based on 
/// TestKits default out, see <see cref="TestKitSettings.DefaultTimeout"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestBreaker.cs
//-----------------------------------------------------------------------
// <copyright file="TestBreaker.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestFSMRef.cs
//-----------------------------------------------------------------------
// <copyright file="TestFSMRef.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This is a specialized form of the <see cref="TestActorRef{TActor}"/> with support for querying and
/// setting the state of a <see cref="FSM{TState,TData}"/>. 
/// </summary>
/// <typeparam name="TActor">The type of the actor.</typeparam>
/// <typeparam name="TState">The type of the state.</typeparam>
/// <typeparam name="TData">The type of the data.</typeparam>
/// <summary>Get current state name of this FSM.</summary>
/// <summary>Get current state data of this FSM.</summary>
/// <summary>
/// Change FSM state data; but do not transition to a new state name. 
/// This method is directly equivalent to a transition initiated from within the FSM.
/// </summary>
/// <summary>
/// Change FSM state timeout. This method is directly equivalent to a
/// transition initiated from within the FSM using the current state name and data
/// but with the specified timeout.
/// </summary>
/// <summary>
/// Change FSM state; but keeps the current state data. 
/// This method is directly equivalent to a  transition initiated from within the FSM.
/// </summary>
/// <summary>
/// Change FSM state. This method is directly equivalent to a
/// corresponding transition initiated from within the FSM, including timeout
/// and stop handling.
/// </summary>
/// <summary>
/// Proxy for <see cref="FSM{TState,TData}.SetTimer"/>
/// </summary>
/// <summary>
/// Proxy for <see cref="FSM{TState,TData}.CancelTimer"/>
/// </summary>
/// <summary>
/// Proxy for <see cref="FSM{TState,TData}.IsTimerActive"/>
/// </summary>
/// <summary>
/// Determines whether the FSM has a active state timer active.
/// </summary>
/// <returns><c>true</c> if the FSM has a active state timer active; <c>false</c> otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitAssertionsExtension.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitAssertionsExtension.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitAssertionsProvider.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitAssertionsProvider.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Contains <see cref="ITestKitAssertions"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitBase.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Unless you're creating a TestKit for a specific test framework, you should probably not inherit directly from this class.</remarks>
/// </summary>
//if last assertion was expectNoMsg, disable timing failure upon within() block end.
/// <summary>
/// Create a new instance of the <see cref="TestKitBase"/> class.
/// If no <paramref name="system"/> is passed in, a new system 
/// with <see cref="DefaultConfig"/> will be created.
/// </summary>
/// <param name="assertions"></param>
/// <param name="system">Optional: The actor system.</param>
/// <param name="testActorName">Optional: The name of the TestActor.</param>
/// <summary>
/// Create a new instance of the <see cref="TestKitBase"/> class.
/// A new system with the specified configuration will be created.
/// </summary>
/// <param name="config">The configuration to use for the system.</param>
/// <param name="testActorName">Optional: The name of the TestActor.</param>
/// <param name="assertions"></param>
/// <param name="actorSystemName"></param>
//register the CallingThreadDispatcherConfigurator
//Wait for the testactor to start
//HACK: we need to clear the current context when running a No Implicit Sender test as sender from an async test may leak
//but we should not clear the current context when creating a testprobe from a test
/// <summary>
/// The default TestActor. The actor can be controlled by sending it 
/// special control messages, see <see cref="TestKit.TestActor.SetIgnore"/>, 
/// <see cref="TestKit.TestActor.Watch"/>, <see cref="TestKit.TestActor.Unwatch"/>.
/// You can also install an <see cref="AutoPilot" /> to drive the actor, see
/// <see cref="SetAutoPilot"/>. All other messages are forwarded to the queue
/// and can be retrieved with Receive and the ExpectMsg overloads.
/// </summary>
/// <summary>
/// Filter <see cref="LogEvent"/> sent to the system's <see cref="EventStream"/>.
/// In order to be able to filter the log the special logger
/// <see cref="TestEventListener"/> must be installed using the config
/// <code>akka.loggers = ["Akka.TestKit.TestEventListener, Akka.TestKit"]</code>
/// It is installed by default in testkit.
/// </summary>
/// <summary>
/// Returns <c>true</c> if messages are available.
/// </summary>
/// <value>
/// <c>true</c> if messages are available; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Ignore all messages in the test actor for which the given function 
/// returns <c>true</c>.
/// </summary>
/// <param name="shouldIgnoreMessage">Given a message, if the function returns 
/// <c>true</c> the message will be ignored by <see cref="TestActor"/>.</param>
/// <summary>Stop ignoring messages in the test actor.</summary>
/// <summary>
/// Have the <see cref="TestActor"/> watch an actor and receive 
/// <see cref="Terminated"/> messages when the actor terminates.
/// </summary>
/// <param name="actorToWatch">The actor to watch.</param>
/// <returns>The actor to watch, i.e. the parameter <paramref name="actorToWatch"/></returns>
/// <summary>
/// Have the <see cref="TestActor"/> stop watching an actor.
/// </summary>
/// <param name="actorToUnwatch">The actor to unwatch.</param>
/// <returns>The actor to unwatch, i.e. the parameter <paramref name="actorToUnwatch"/></returns>
/// <summary>
/// Install an <see cref="AutoPilot" /> to drive the <see cref="TestActor" />.
/// The <see cref="AutoPilot" /> will be run for each received message and can
/// be used to send or forward messages, etc.
/// Each invocation must return the AutoPilot for the next round. To reuse the
/// same <see cref="AutoPilot" /> return <see cref="AutoPilot.KeepRunning" />
/// </summary>
/// <param name="pilot">The pilot to install.</param>
/// <summary>Obtain time remaining for execution of the innermost enclosing `within`
/// block or missing that it returns the properly dilated default for this
/// case from settings (key "akka.test.single-expect-default"). <remarks>The returned value is always finite.</remarks>
/// </summary>
/// <summary>
/// Obtain time remaining for execution of the innermost enclosing <see cref="Within(System.TimeSpan,System.Action)">Within</see>
/// block or throw an <see cref="InvalidOperationException" /> if no `within` block surrounds this
/// call. <remarks>The returned value is always finite.</remarks>
/// </summary>
/// <exception cref="System.InvalidOperationException">Thrown if this was called outside of within</exception>
// ReSharper disable once PossibleInvalidOperationException
///<summary>
/// If inside a `within` block obtain time remaining for execution of the innermost enclosing `within`
/// block; otherwise returns the given duration.
/// </summary>
/// <summary>
/// If <paramref name="duration"/> is finite it is returned after it has been scaled using <see cref="Dilated(TimeSpan)"/>.
/// If <paramref name="duration"/> is undefined, it returns the remaining time (if within a `within` block) or the properly dilated 
/// default from settings (key "akka.test.single-expect-default").
/// If <paramref name="duration"/> is infinite, an <see cref="ArgumentException"/> is thrown.
/// <remarks>The returned value is always finite.</remarks>
/// </summary>
/// <param name="duration">The maximum.</param>
/// <returns>A finite <see cref="TimeSpan"/> properly dilated</returns>
/// <exception cref="System.ArgumentException">Thrown if <paramref name="duration"/> is infinite</exception>
/// <summary>
/// Multiplies the duration with the <see cref="Akka.TestKit.TestKitSettings.TestTimeFactor"/>,
/// i.e. the config value "akka.test.timefactor"
/// </summary>
//Else: 0 or infinite (negative)
/// <summary>
/// If <paramref name="timeout"/> is defined it is returned; otherwise
/// the config value "akka.test.single-expect-default" is returned.
/// </summary>
/// <summary>
/// Shuts down this system.
/// On failure debug output will be logged about the remaining actors in the system.
/// If verifySystemShutdown is true, then an exception will be thrown on failure.
/// </summary>
/// <param name="duration">Optional. The duration to wait for shutdown. Default is 5 seconds multiplied with the config value "akka.test.timefactor".</param>
/// <param name="verifySystemShutdown">if set to <c>true</c> an exception will be thrown on failure.</param>
/// <summary>
/// Shuts down the specified system.
/// On failure debug output will be logged about the remaining actors in the system.
/// If verifySystemShutdown is true, then an exception will be thrown on failure.
/// </summary>
/// <param name="system">The system to shutdown.</param>
/// <param name="duration">The duration to wait for shutdown. Default is 5 seconds multiplied with the config value "akka.test.timefactor"</param>
/// <param name="verifySystemShutdown">if set to <c>true</c> an exception will be thrown on failure.</param>
//TODO: replace "" with system.PrintTree()
//TODO: replace "" with system.PrintTree()
/// <summary>
/// Creates a test actor with the specified name. The actor can be controlled by sending it 
/// special control messages, see <see cref="TestKit.TestActor.SetIgnore"/>, 
/// <see cref="TestKit.TestActor.Watch"/>, <see cref="TestKit.TestActor.Unwatch"/>,
/// <see cref="TestKit.TestActor.SetAutoPilot"/>. All other messages are forwarded to the queue
/// and can be retrieved with Receive and the ExpectMsg overloads.
/// <para>The default test actor can be retrieved from the <see cref="TestActor"/> property</para>
/// </summary>
/// <param name="name">The name of the new actor.</param>
/// <returns></returns>
/// <summary>
/// Creates a new <see cref="TestProbe" />.
/// </summary>
/// <param name="name">Optional: The name of the probe.</param>
/// <returns></returns>
/// <summary>
/// Creates a new <see cref="TestProbe" />.
/// </summary>
/// <param name="system">For multi-actor system tests, you can specify which system the node is for.</param>
/// <param name="name">Optional: The name of the probe.</param>
/// <returns></returns>
/// <summary>
/// Creates a Countdown latch wrapper for use in testing.
/// 
/// It uses a timeout when waiting and timeouts are specified as durations.
/// There's a default timeout of 5 seconds and the default count is 1.
/// Timeouts will always throw an exception.
/// </summary>
/// <param name="count">Optional. The count. Default: 1</param>
/// <returns>A new <see cref="TestLatch"/></returns>
/// <summary>
/// Wraps a <see cref="Barrier"/> for use in testing.
/// It always uses a timeout when waiting.
/// Timeouts will always throw an exception. The default timeout is 5 seconds.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitBase_ActorOf.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitBase_ActorOf.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Create a new actor as child of <see cref="Sys" />.
/// </summary>
/// <param name="props">The props configuration object</param>
/// <summary>
/// Create a new actor as child of <see cref="Sys" />.
/// </summary>
/// <param name="props">The props configuration object</param>
/// <param name="name">The name of the actor.</param>
/// <summary>
/// Create a new actor as child of <see cref="Sys" />.
/// </summary>
/// <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
/// <summary>
/// Create a new actor as child of <see cref="Sys" />.
/// </summary>
/// <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
/// <param name="name">The name of the actor.</param>
/// <summary>
/// Create a new actor as child of <see cref="Sys" /> using an expression that calls the constructor
/// of <typeparamref name="TActor"/>.
/// <example>
/// <code>ActorOf&lt;MyActor&gt;(()=>new MyActor("value", 4711))</code>
/// </example>
/// </summary>
/// <typeparam name="TActor">The type of the actor.</typeparam>
/// <param name="factory">An expression that calls the constructor of <typeparamref name="TActor"/></param>
/// <summary>
/// Create a new actor as child of <see cref="Sys" /> using an expression that calls the constructor
/// of <typeparamref name="TActor"/>.
/// <example>
/// <code>ActorOf&lt;MyActor&gt;(()=>new MyActor("value", 4711), "test-actor")</code>
/// </example>
/// </summary>
/// <typeparam name="TActor">The type of the actor.</typeparam>
/// <param name="factory">An expression that calls the constructor of <typeparamref name="TActor"/></param>
/// <param name="name">The name of the actor.</param>
/// <summary>
/// Creates a new actor by defining the behavior inside the <paramref name="configure"/> action.
/// <example>
/// <code>
/// ActorOf(c =>
/// {
///     c.Receive&lt;string&gt;((msg, ctx) => ctx.Sender.Tell("Hello " + msg));
/// });
/// </code>
/// </example>
/// </summary>
/// <param name="configure">An action that configures the actor's behavior.</param>
/// <param name="name">Optional: The name of the actor.</param>
/// <summary>
/// Creates a new actor by defining the behavior inside the <paramref name="configure"/> action.
/// <example>
/// <code>
/// ActorOf(c =>
/// {
///     c.Receive&lt;string&gt;((msg, ctx) => ctx.Sender.Tell("Hello " + msg));
/// });
/// </code>
/// </example>
/// </summary>
/// <param name="configure">An action that configures the actor's behavior.</param>
/// <param name="name">Optional: The name of the actor.</param>
/// <summary>
/// Create a new actor as child of specified supervisor and returns it as <see cref="TestActorRef{TActor}"/>
/// to enable access to the underlying actor instance via <see cref="TestActorRefBase{TActor}.UnderlyingActor"/>.
/// </summary>
/// <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
/// <param name="props">The <see cref="Props"/> object</param>
/// <param name="supervisor">The supervisor</param>
/// <param name="name">Optional: The name.</param>
/// <summary>
/// Create a new actor as child of <see cref="Sys"/> and returns it as <see cref="TestActorRef{TActor}"/> 
/// to enable access to the underlying actor instance via <see cref="TestActorRefBase{TActor}.UnderlyingActor"/>.
/// </summary>
/// <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
/// <param name="props">The <see cref="Props"/> object</param>
/// <param name="name">Optional: The name.</param>
/// <summary>
/// Create a new actor as child of the specified supervisor and returns it as <see cref="TestActorRef{TActor}"/> 
/// to enable access to the underlying actor instance via <see cref="TestActorRefBase{TActor}.UnderlyingActor"/>.
/// Uses an expression that calls the constructor of <typeparamref name="TActor"/>.
/// <example>
/// <code>ActorOf&lt;MyActor&gt;(()=>new MyActor("value", 4711), "test-actor")</code>
/// </example>
/// </summary>
/// <typeparam name="TActor">The type of the actor.</typeparam>
/// <param name="factory">An expression that calls the constructor of <typeparamref name="TActor"/></param>
/// <param name="supervisor">The supervisor</param>
/// <param name="name">Optional: The name.</param>
/// <summary>
/// Create a new actor as child of <see cref="Sys"/> and returns it as <see cref="TestActorRef{TActor}"/> 
/// to enable access to the underlying actor instance via <see cref="TestActorRefBase{TActor}.UnderlyingActor"/>.
/// Uses an expression that calls the constructor of <typeparamref name="TActor"/>.
/// <example>
/// <code>ActorOf&lt;MyActor&gt;(()=>new MyActor("value", 4711), "test-actor")</code>
/// </example>
/// </summary>
/// <typeparam name="TActor">The type of the actor.</typeparam>
/// <param name="factory">An expression that calls the constructor of <typeparamref name="TActor"/></param>
/// <param name="name">Optional: The name.</param>
/// <summary>
/// Create a new actor as child of the specified supervisor and returns it as <see cref="TestActorRef{TActor}"/> 
/// to enable access to the underlying actor instance via <see cref="TestActorRefBase{TActor}.UnderlyingActor"/>.
/// </summary>
/// <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
/// <param name="supervisor">The supervisor</param>
/// <param name="name">Optional: The name.</param>
/// <summary>
/// Create a new actor as child of <see cref="Sys"/> and returns it as <see cref="TestActorRef{TActor}"/> 
/// to enable access to the underlying actor instance via <see cref="TestActorRefBase{TActor}.UnderlyingActor"/>.
/// </summary>
/// <typeparam name="TActor">The type of the actor. It must have a parameterless public constructor</typeparam>
/// <param name="name">Optional: The name.</param>
/// <summary>
/// Create a new <see cref="FSM{TState,TData}"/> as child of the specified supervisor
/// and returns it as <see cref="TestFSMRef{TActor,TState,TData}"/> to enable inspecting and modifying the FSM directly.
/// </summary>
/// <typeparam name="TFsmActor">The type of the actor. It must be a <see cref="FSM{TState,TData}"/></typeparam>
/// <typeparam name="TState">The type of state name</typeparam>
/// <typeparam name="TData">The type of state data</typeparam>
/// <param name="props">The <see cref="Props"/> object</param>
/// <param name="supervisor">The supervisor</param>
/// <param name="name">Optional: The name.</param>
/// <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
/// <summary>
/// Create a new <see cref="FSM{TState,TData}"/> as child of <see cref="Sys"/>
/// and returns it as <see cref="TestFSMRef{TActor,TState,TData}"/> to enable inspecting and modifying the FSM directly.
/// </summary>
/// <typeparam name="TFsmActor">The type of the actor. It must be a <see cref="FSM{TState,TData}"/> and have a public parameterless constructor</typeparam>
/// <typeparam name="TState">The type of state name</typeparam>
/// <typeparam name="TData">The type of state data</typeparam>
/// <param name="props">The <see cref="Props"/> object</param>
/// <param name="name">Optional: The name.</param>
/// <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
/// <summary>
/// Create a new <see cref="FSM{TState,TData}"/> as child of the specified supervisor
/// and returns it as <see cref="TestFSMRef{TActor,TState,TData}"/> to enable inspecting and modifying the FSM directly.
/// <typeparamref name="TFsmActor"/> must have a public parameterless constructor.
/// </summary>
/// <typeparam name="TFsmActor">The type of the actor. It must have a parameterless public constructor</typeparam>
/// <typeparam name="TState">The type of state name</typeparam>
/// <typeparam name="TData">The type of state data</typeparam>
/// <param name="supervisor">The supervisor</param>
/// <param name="name">Optional: The name.</param>
/// <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
/// <summary>
/// Create a new <see cref="FSM{TState,TData}"/> as child of <see cref="Sys"/>
/// and returns it as <see cref="TestFSMRef{TActor,TState,TData}"/> to enable inspecting and modifying the FSM directly.
/// <typeparamref name="TFsmActor"/> must have a public parameterless constructor.
/// </summary>
/// <typeparam name="TFsmActor">The type of the actor. It must have a parameterless public constructor</typeparam>
/// <typeparam name="TState">The type of state name</typeparam>
/// <typeparam name="TData">The type of state data</typeparam>
/// <param name="name">Optional: The name.</param>
/// <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
/// <summary>
/// Create a new <see cref="FSM{TState,TData}"/> as child of the specified supervisor
/// and returns it as <see cref="TestFSMRef{TActor,TState,TData}"/> to enable inspecting and modifying the FSM directly.
/// Uses an expression that calls the constructor of <typeparamref name="TFsmActor"/>.
/// </summary>
/// <typeparam name="TFsmActor">The type of the actor.</typeparam>
/// <typeparam name="TState">The type of state name</typeparam>
/// <typeparam name="TData">The type of state data</typeparam>
/// <param name="factory">An expression that calls the constructor of <typeparamref name="TFsmActor"/></param>
/// <param name="supervisor">The supervisor</param>
/// <param name="name">Optional: The name.</param>
/// <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
/// <summary>
/// Create a new <see cref="FSM{TState,TData}"/> as child of <see cref="Sys"/>
/// and returns it as <see cref="TestFSMRef{TActor,TState,TData}"/> to enable inspecting and modifying the FSM directly.
/// Uses an expression that calls the constructor of <typeparamref name="TFsmActor"/>.
/// </summary>
/// <typeparam name="TFsmActor">The type of the actor.</typeparam>
/// <typeparam name="TState">The type of state name</typeparam>
/// <typeparam name="TData">The type of state data</typeparam>
/// <param name="factory">An expression that calls the constructor of <typeparamref name="TFsmActor"/></param>
/// <param name="name">Optional: The name.</param>
/// <param name="withLogging">Optional: If set to <c>true</c> logs state changes of the FSM as Debug messages. Default is <c>false</c>.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitBase_AwaitAssert.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitBase_AwaitAssert.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <para>Await until the given assertion does not throw an exception or the timeout
/// expires, whichever comes first. If the timeout expires the last exception
/// is thrown.</para>
/// <para>The action is called, and if it throws an exception the thread sleeps
/// the specified interval before retrying.</para>
/// <para>If no timeout is given, take it from the innermost enclosing `within`
/// block.</para>
/// <para>Note that the timeout is scaled using <see cref="Dilated" />,
/// which uses the configuration entry "akka.test.timefactor".</para>
/// </summary>
/// <param name="assertion">The action.</param>
/// <param name="duration">The timeout.</param>
/// <param name="interval">The interval to wait between executing the assertion.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitBase_AwaitConditions.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitBase_AwaitConditions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <para>Await until the given condition evaluates to <c>true</c> or until a timeout</para>
/// <para>The timeout is taken from the innermost enclosing `within`
/// block (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
/// The value is <see cref="Dilated(TimeSpan)">dilated</see>, i.e. scaled by the factor 
/// specified in config value "akka.test.timefactor"..</para>
/// <para>A call to <paramref name="conditionIsFulfilled"/> is done immediately, then the threads sleep
/// for about a tenth of the timeout value, before it checks the condition again. This is repeated until
/// timeout or the condition evaluates to <c>true</c>. To specify another interval, use the overload
/// <see cref="AwaitCondition(System.Func{bool},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},string)"/>
/// </para>
/// </summary>
/// <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
/// <summary>
/// <para>Await until the given condition evaluates to <c>true</c> or the timeout
/// expires, whichever comes first.</para>
/// <para>If no timeout is given, take it from the innermost enclosing `within`
/// block (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
/// The value is <see cref="Dilated(TimeSpan)">dilated</see>, i.e. scaled by the factor 
/// specified in config value "akka.test.timefactor"..</para>
/// <para>A call to <paramref name="conditionIsFulfilled"/> is done immediately, then the threads sleep
/// for about a tenth of the timeout value, before it checks the condition again. This is repeated until
/// timeout or the condition evaluates to <c>true</c>. To specify another interval, use the overload
/// <see cref="AwaitCondition(System.Func{bool},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},string)"/>
/// </para>
/// </summary>
/// <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
/// <param name="max">The maximum duration. If undefined, uses the remaining time 
/// (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
/// The value is <see cref="Dilated(TimeSpan)">dilated</see>, i.e. scaled by the factor 
/// specified in config value "akka.test.timefactor".</param>
/// <summary>
/// <para>Await until the given condition evaluates to <c>true</c> or the timeout
/// expires, whichever comes first.</para>
/// <para>If no timeout is given, take it from the innermost enclosing `within`
/// block (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
/// The value is <see cref="Dilated(TimeSpan)">dilated</see>, i.e. scaled by the factor 
/// specified in config value "akka.test.timefactor"..</para>
/// <para>A call to <paramref name="conditionIsFulfilled"/> is done immediately, then the threads sleep
/// for about a tenth of the timeout value, before it checks the condition again. This is repeated until
/// timeout or the condition evaluates to <c>true</c>. To specify another interval, use the overload
/// <see cref="AwaitCondition(System.Func{bool},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},string)"/>
/// </para>
/// </summary>
/// <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
/// <param name="max">The maximum duration. If undefined, uses the remaining time 
/// (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
/// The value is <see cref="Dilated(TimeSpan)">dilated</see>, i.e. scaled by the factor 
/// specified in config value "akka.test.timefactor".</param>
/// <param name="message">The message used if the timeout expires.</param>
/// <summary>
/// <para>Await until the given condition evaluates to <c>true</c> or the timeout
/// expires, whichever comes first.</para>
/// <para>If no timeout is given, take it from the innermost enclosing `within`
/// block.</para>
/// <para>Note that the timeout is <see cref="Dilated(TimeSpan)">dilated</see>, i.e. scaled by the factor 
/// specified in config value "akka.test.timefactor".</para>
/// <para>The parameter <paramref name="interval"/> specifies the time between calls to <paramref name="conditionIsFulfilled"/>
/// Between calls the thread sleeps. If <paramref name="interval"/> is undefined the thread only sleeps 
/// one time, using the <paramref name="max"/> as duration, and then rechecks the condition and ultimately 
/// succeeds or fails.</para>
/// <para>To make sure that tests run as fast as possible, make sure you do not leave this value as undefined,
/// instead set it to a relatively small value.</para>
/// </summary>
/// <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
/// <param name="max">The maximum duration. If undefined, uses the remaining time 
/// (if inside a `within` block) or the value specified in config value "akka.test.single-expect-default". 
/// The value is <see cref="Dilated(TimeSpan)">dilated</see>, i.e. scaled by the factor 
/// specified in config value "akka.test.timefactor".</param>
/// <param name="interval">The time between calls to <paramref name="conditionIsFulfilled"/> to check
/// if the condition is fulfilled. Between calls the thread sleeps. If undefined, negative or 
/// <see cref="Timeout.InfiniteTimeSpan"/>the thread only sleeps one time, using the <paramref name="max"/>, 
/// and then rechecks the condition and ultimately succeeds or fails.
/// <para>To make sure that tests run as fast as possible, make sure you do not set this value as undefined,
/// instead set it to a relatively small value.</para>
/// </param>
/// <param name="message">The message used if the timeout expires.</param>
/// <summary>
/// <para>Await until the given condition evaluates to <c>true</c> or the timeout
/// expires, whichever comes first. Returns <c>true</c> if the condition was fulfilled.</para>        
/// <para>The parameter <paramref name="interval"/> specifies the time between calls to <paramref name="conditionIsFulfilled"/>
/// Between calls the thread sleeps. If <paramref name="interval"/> is not specified or <c>null</c> 100 ms is used.</para>
/// </summary>
/// <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
/// <param name="max">The maximum duration.</param>
/// <param name="interval">Optional. The time between calls to <paramref name="conditionIsFulfilled"/> to check
/// if the condition is fulfilled. Between calls the thread sleeps. If undefined, 100 ms is used
/// </param>
/// <summary>
/// <para>Await until the given condition evaluates to <c>true</c> or the timeout
/// expires, whichever comes first.</para>
/// <para>If no timeout is given, take it from the innermost enclosing `within`
/// block.</para>
/// <para>Note that the timeout is <see cref="Dilated(TimeSpan)">dilated</see>, i.e. scaled by the factor 
/// specified in config value "akka.test.timefactor".</para>
/// <para>The parameter <paramref name="interval"/> specifies the time between calls to <paramref name="conditionIsFulfilled"/>
/// Between calls the thread sleeps. If <paramref name="interval"/> is undefined the thread only sleeps 
/// one time, using the <paramref name="max"/> as duration, and then rechecks the condition and ultimately 
/// succeeds or fails.</para>
/// <para>To make sure that tests run as fast as possible, make sure you do not leave this value as undefined,
/// instead set it to a relatively small value.</para>
/// </summary>
/// <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
/// <param name="max">The maximum duration. The value is <see cref="Dilated(TimeSpan)">dilated</see>, i.e. 
/// scaled by the factor specified in config value "akka.test.timefactor".</param>
/// <param name="interval">The time between calls to <paramref name="conditionIsFulfilled"/> to check
/// if the condition is fulfilled. Between calls the thread sleeps. If undefined the thread only sleeps 
/// one time, using the <paramref name="max"/>, and then rechecks the condition and ultimately 
/// succeeds or fails.
/// <para>To make sure that tests run as fast as possible, make sure you do not set this value as undefined,
/// instead set it to a relatively small value.</para>
/// </param>
/// <param name="fail">Action that is called when the timeout expired. 
/// The parameters conforms to <see cref="string.Format(string,object[])"/></param>
/// <summary>
/// <para>Await until the given condition evaluates to <c>true</c> or the timeout
/// expires, whichever comes first.</para>
/// <para>If no timeout is given, take it from the innermost enclosing `within`
/// block.</para>
/// <para>Note that the timeout is <see cref="Dilated(TimeSpan)">dilated</see>, i.e. scaled by the factor 
/// specified in config value "akka.test.timefactor".</para>
/// <para>The parameter <paramref name="interval"/> specifies the time between calls to <paramref name="conditionIsFulfilled"/>
/// Between calls the thread sleeps. If <paramref name="interval"/> is undefined the thread only sleeps 
/// one time, using the <paramref name="max"/> as duration, and then rechecks the condition and ultimately 
/// succeeds or fails.</para>
/// <para>To make sure that tests run as fast as possible, make sure you do not leave this value as undefined,
/// instead set it to a relatively small value.</para>
/// </summary>
/// <param name="conditionIsFulfilled">The condition that must be fulfilled within the duration.</param>
/// <param name="max">The maximum duration. The value is <see cref="Dilated(TimeSpan)">dilated</see>, i.e. 
/// scaled by the factor specified in config value "akka.test.timefactor".</param>
/// <param name="interval">The time between calls to <paramref name="conditionIsFulfilled"/> to check
/// if the condition is fulfilled. Between calls the thread sleeps. If undefined the thread only sleeps 
/// one time, using the <paramref name="max"/>, and then rechecks the condition and ultimately 
/// succeeds or fails.
/// <para>To make sure that tests run as fast as possible, make sure you do not set this value as undefined,
/// instead set it to a relatively small value.</para>
/// </param>
/// <param name="fail">Action that is called when the timeout expired. 
/// The parameters conforms to <see cref="string.Format(string,object[])"/></param>
/// <param name="logger">If a <see cref="ILoggingAdapter"/> is specified, debug messages will be logged using it. If <c>null</c> nothing will be logged</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitBase_Expect.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitBase_Expect.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Receive one message from the test actor and assert that it is of the specified type.
/// Wait time is bounded by the given duration, if specified; otherwise
/// wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// </summary>
/// <summary>
/// Receive one message of the specified type from the test actor and assert that it
/// equals the <paramref name="message"/>.
/// Wait time is bounded by the given duration, if specified; otherwise
/// wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// </summary>
/// <summary>
/// Receive one message of the specified type from the test actor and assert that the given
/// predicate accepts it.
/// Use this variant to implement more complicated or conditional processing.
/// 
/// Wait time is bounded by the given duration, if specified; otherwise
/// wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// </summary>
/// <summary>
/// Receive one message of the specified type from the test actor and calls the 
/// action that performs extra assertions.
/// Use this variant to implement more complicated or conditional processing.
/// 
/// Wait time is bounded by the given duration, if specified; otherwise
/// wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// </summary>
/// <summary>
/// Receive one message of the specified type from the test actor and assert that the given
/// predicate accepts it.
/// Use this variant to implement more complicated or conditional processing.
/// 
/// Wait time is bounded by the given duration, if specified; otherwise
/// wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// </summary>
/// <summary>
/// Receive one message of the specified type from the test actor calls the 
/// action that performs extra assertions.
/// Use this variant to implement more complicated or conditional processing.
/// 
/// Wait time is bounded by the given duration, if specified; otherwise
/// wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// </summary>
/// <summary>
/// Receive one message from the test actor and assert that it is equal to the expected value,
/// according to the specified comparer function.
/// 
/// Wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// </summary>
/// <summary>
/// Receive one message from the test actor and assert that it is the Terminated message of the given ActorRef.
/// 
/// Wait time is bounded by the given duration, if specified; otherwise
/// wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// </summary>       
/// <summary>
/// Receive one message of the specified type from the test actor and calls the optional 
/// action that performs extra assertions. Wait time is bounded by the given duration.
/// Use this variant to implement more complicated or conditional processing.
/// </summary>
/// <summary>
/// Assert that no message is received.
/// 
/// Wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// </summary>
/// <summary>
/// Assert that no message is received for the specified time.
/// </summary>
/// <summary>
/// Assert that no message is received for the specified time in milliseconds.
/// </summary>
/// <summary>
/// Receive a message from the test actor and assert that it equals 
/// one of the given <paramref name="messages"/>. Wait time is bounded by 
/// <see cref="RemainingOrDefault"/> as duration, with an assertion exception being thrown in case of timeout.
/// </summary>
/// <typeparam name="T">The type of the messages</typeparam>
/// <param name="messages">The messages.</param>
/// <returns>The received messages in received order</returns>
/// <summary>
/// Receive a number of messages from the test actor matching the given
/// number of objects and assert that for each given object one is received
/// which equals it and vice versa. This construct is useful when the order in
/// which the objects are received is not fixed. Wait time is bounded by 
/// <see cref="RemainingOrDefault"/> as duration, with an assertion exception being thrown in case of timeout.
/// 
/// <code>
///   dispatcher.Tell(SomeWork1())
///   dispatcher.Tell(SomeWork2())
///   ExpectMsgAllOf(TimeSpan.FromSeconds(1), Result1(), Result2())
/// </code>
/// </summary>
/// <typeparam name="T">The type of the messages</typeparam>
/// <param name="messages">The messages.</param>
/// <returns>The received messages in received order</returns>
/// <summary>
/// Receive a number of messages from the test actor matching the given
/// number of objects and assert that for each given object one is received
/// which equals it and vice versa. This construct is useful when the order in
/// which the objects are received is not fixed. Wait time is bounded by the
/// given duration, with an assertion exception being thrown in case of timeout.
/// 
/// <code>
///   dispatcher.Tell(SomeWork1())
///   dispatcher.Tell(SomeWork2())
///   ExpectMsgAllOf(TimeSpan.FromSeconds(1), Result1(), Result2())
/// </code>
/// The deadline is scaled by "akka.test.timefactor" using <see cref="Dilated"/>.
/// </summary>
/// <typeparam name="T">The type of the messages</typeparam>
/// <param name="max">The deadline. The deadline is scaled by "akka.test.timefactor" using <see cref="Dilated"/>.</param>
/// <param name="messages">The messages.</param>
/// <returns>The received messages in received order</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitBase_ExpectMsgFrom.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitBase_ExpectMsgFrom.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Receive one message from the test actor and assert that it is of the specified type
/// and was sent by the specified sender
/// Wait time is bounded by the given duration if specified.
/// If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// </summary>
/// <summary>
/// Receive one message of the specified type from the test actor and assert that it
/// equals the <paramref name="message"/> and was sent by the specified sender
/// Wait time is bounded by the given duration if specified.
/// If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// </summary>
/// <summary>
/// Receive one message of the specified type from the test actor and assert that the given
/// predicate accepts it and was sent by the specified sender
/// Wait time is bounded by the given duration if specified.
/// If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// Use this variant to implement more complicated or conditional processing.
/// </summary>
/// <summary>
/// Receive one message of the specified type from the test actor and assert that the given
/// predicate accepts it and was sent by a sender that matches the <paramref name="isSender"/> predicate.
/// Wait time is bounded by the given duration if specified.
/// If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// Use this variant to implement more complicated or conditional processing.
/// </summary>
/// <summary>
/// Receive one message of the specified type from the test actor, verifies that the sender is the specified
/// and calls the action that performs extra assertions.
/// Wait time is bounded by the given duration if specified.
/// If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// Use this variant to implement more complicated or conditional processing.
/// </summary>
/// <summary>
/// Receive one message of the specified type from the test actor and calls the 
/// action that performs extra assertions.
/// Wait time is bounded by the given duration if specified.
/// If not specified, wait time is bounded by remaining time for execution of the innermost enclosing 'within'
/// block, if inside a 'within' block; otherwise by the config value 
/// "akka.test.single-expect-default".
/// Use this variant to implement more complicated or conditional processing.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitBase_Receive.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitBase_Receive.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Receives messages until <paramref name="isMessage"/> returns <c>true</c>.
/// Use it to ignore certain messages while waiting for a specific message.
/// </summary>
/// <param name="isMessage">The is message.</param>
/// <param name="max">The maximum.</param>
/// <param name="hint">The hint.</param>
/// <returns>Returns the message that <paramref name="isMessage"/> matched</returns>
/// <summary>
/// Receives messages until <paramref name="isMessage"/> returns <c>true</c>.
/// Use it to ignore certain messages while waiting for a specific message.
/// </summary>
/// <typeparam name="T">The type of the expected message. Messages of other types are ignored.</typeparam>
/// <param name="isMessage">The is message.</param>
/// <param name="max">The maximum.</param>
/// <param name="hint">The hint.</param>
/// <returns>Returns the message that <paramref name="isMessage"/> matched</returns>
/// <summary>
/// Receive one message from the internal queue of the TestActor.
/// This method blocks the specified duration or until a message
/// is received. If no message was received, <c>null</c> is returned.
/// <remarks>This method does NOT automatically scale its Duration parameter using <see cref="Dilated(TimeSpan)" />!</remarks>
/// </summary>
/// <param name="max">The maximum duration to wait. 
/// If <c>null</c> the config value "akka.test.single-expect-default" is used as timeout.
/// If set to a negative value or <see cref="Timeout.InfiniteTimeSpan"/>, blocks forever.
/// <remarks>This method does NOT automatically scale its Duration parameter using <see cref="Dilated(TimeSpan)" />!</remarks></param>
/// <returns>The message if one was received; <c>null</c> otherwise</returns>
/// <summary>
/// Receive one message from the internal queue of the TestActor.
/// This method blocks until cancelled. 
/// </summary>
/// <param name="cancellationToken">A token used to cancel the operation</param>
/// <returns>The message if one was received; <c>null</c> otherwise</returns>
/// <summary>
/// Receive one message from the internal queue of the TestActor within 
/// the specified duration. The method blocks the specified duration.
/// <remarks><b>Note!</b> that the returned <paramref name="envelope"/> 
/// is a <see cref="MessageEnvelope"/> containing the sender and the message.</remarks>
/// <remarks>This method does NOT automatically scale its Duration parameter using <see cref="Dilated(TimeSpan)" />!</remarks>
/// </summary>
/// <param name="envelope">The received envelope.</param>
/// <param name="max">Optional: The maximum duration to wait. 
///     If <c>null</c> the config value "akka.test.single-expect-default" is used as timeout.
///     If set to a negative value or <see cref="Timeout.InfiniteTimeSpan"/>, blocks forever.
///     <remarks>This method does NOT automatically scale its Duration parameter using <see cref="Dilated(TimeSpan)" />!</remarks></param>
/// <returns><c>True</c> if a message was received within the specified duration; <c>false</c> otherwise.</returns>
/// <summary>
/// Receive one message from the internal queue of the TestActor within 
/// the specified duration.
/// <para><c>True</c> is returned if a message existed, and the message 
/// is returned in <paramref name="envelope" />. The method blocks the 
/// specified duration, and can be cancelled using the 
/// <paramref name="cancellationToken" />.
/// </para> 
/// <remarks>This method does NOT automatically scale its duration parameter using <see cref="Dilated(TimeSpan)" />!</remarks>
/// </summary>
/// <param name="envelope">The received envelope.</param>
/// <param name="max">The maximum duration to wait. 
///     If <c>null</c> the config value "akka.test.single-expect-default" is used as timeout.
///     If set to <see cref="Timeout.InfiniteTimeSpan"/>, blocks forever (or until cancelled).
///     <remarks>This method does NOT automatically scale its Duration parameter using <see cref="Dilated(TimeSpan)" />!</remarks>
/// </param>
/// <param name="cancellationToken">A token used to cancel the operation.</param>
/// <returns><c>True</c> if a message was received within the specified duration; <c>false</c> otherwise.</returns>
//Negative
/// <summary>
/// Receive a series of messages until the function returns null or the overall
/// maximum duration is elapsed or expected messages count is reached.
/// Returns the sequence of messages.
/// 
/// Note that it is not an error to hit the `max` duration in this case.
/// The max duration is scaled by <see cref="Dilated(TimeSpan)"/>
/// </summary>
/// <summary>
/// Receive a series of messages until the function returns null or the idle 
/// timeout is met or the overall maximum duration is elapsed or 
/// expected messages count is reached.
/// Returns the sequence of messages.
/// 
/// Note that it is not an error to hit the `max` duration in this case.
/// The max duration is scaled by <see cref="Dilated(TimeSpan)"/>
/// </summary>
/// <summary>
/// Receive a series of messages until the function returns null or the idle 
/// timeout is met (disabled by default) or the overall
/// maximum duration is elapsed or expected messages count is reached.
/// Returns the sequence of messages.
/// 
/// Note that it is not an error to hit the `max` duration in this case.
/// The max duration is scaled by <see cref="Dilated(TimeSpan)"/>
/// </summary>
//Put the message back in the queue
/// <summary>
/// Receive a series of messages.
/// It will continue to receive messages until the <paramref name="shouldIgnore"/> predicate returns <c>false</c> or the idle 
/// timeout is met (disabled by default) or the overall
/// maximum duration is elapsed or expected messages count is reached.
/// If a message that isn't of type <typeparamref name="T"/> the parameter <paramref name="shouldIgnoreOtherMessageTypes"/> 
/// declares if the message should be ignored or not.
/// <para>Returns the sequence of messages.</para>
/// 
/// Note that it is not an error to hit the `max` duration in this case.
/// The max duration is scaled by <see cref="Dilated(TimeSpan)"/>
/// </summary>
//Put the message back in the queue
/// <summary>
/// Receive the specified number of messages using <see cref="RemainingOrDefault"/> as timeout.
/// </summary>
/// <param name="numberOfMessages">The number of messages.</param>
/// <returns>The received messages</returns>
/// <summary>
/// Receive the specified number of messages in a row before the given deadline.
/// The deadline is scaled by "akka.test.timefactor" using <see cref="Dilated"/>.
/// </summary>
/// <param name="numberOfMessages">The number of messages.</param>
/// <param name="max">The timeout scaled by "akka.test.timefactor" using <see cref="Dilated"/>.</param>
/// <returns>The received messages</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitBase_Within.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitBase_Within.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Execute code block while bounding its execution time between 0 seconds and <paramref name="max"/>.
/// <para>`within` blocks may be nested. All methods in this class which take maximum wait times 
/// are available in a version which implicitly uses the remaining time governed by 
/// the innermost enclosing `within` block.</para>
/// <remarks>Note that the max duration is scaled using <see cref="Dilated(TimeSpan)"/> which uses the config value "akka.test.timefactor"</remarks>
/// </summary>
/// <summary>
/// Execute code block while bounding its execution time between <paramref name="min"/> and <paramref name="max"/>.
/// <para>`within` blocks may be nested. All methods in this class which take maximum wait times 
/// are available in a version which implicitly uses the remaining time governed by 
/// the innermost enclosing `within` block.</para>
/// <remarks>Note that the max duration is scaled using <see cref="Dilated(TimeSpan)"/> which uses the config value "akka.test.timefactor"</remarks>
/// </summary>
/// <summary>
/// Execute code block while bounding its execution time between 0 seconds and <paramref name="max"/>.
/// <para>`within` blocks may be nested. All methods in this class which take maximum wait times 
/// are available in a version which implicitly uses the remaining time governed by 
/// the innermost enclosing `within` block.</para>
/// <remarks>Note that the max duration is scaled using <see cref="Dilated(TimeSpan)"/> which uses the config value "akka.test.timefactor"</remarks>
/// </summary>
/// <summary>
/// Execute code block while bounding its execution time between <paramref name="min"/> and <paramref name="max"/>.
/// <para>`within` blocks may be nested. All methods in this class which take maximum wait times 
/// are available in a version which implicitly uses the remaining time governed by 
/// the innermost enclosing `within` block.</para>
/// <remarks>Note that the max duration is scaled using <see cref="Dilated(TimeSpan)"/> which uses the config value "akka.test.timefactor"</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitExtension.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitExtension.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A extension to be used together with the TestKit.
/// <example>
/// To get the settings:
/// <code>var testKitSettings = TestKitExtension.For(system);</code>
/// </example>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestKitSettings.cs
//-----------------------------------------------------------------------
// <copyright file="TestKitSettings.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Contains settings to be used when writing tests with TestKit.
/// </summary>
/// <summary>
/// Gets the default timeout as specified in the setting akka.test.default-timeout.
/// Typically used for Ask-timeouts. It is always finite.
/// </summary>
/// <summary>Gets the config value "akka.test.single-expect-default". It is always finite.</summary>
/// <summary>Gets the config value "akka.test.filter-leeway".  It is always finite.</summary>
/// <summary>
/// Gets the timefactor by which all values are scaled by.
/// <para>
/// The tight timeouts you use during testing on your lightning-fast notebook 
/// will invariably lead to spurious test failures on the heavily loaded 
/// CI server. To account for this situation, all maximum durations are 
/// internally scaled by this factor, which defaults to 1. To change this value
/// set configuration "akka.test.timefactor" to a positive double/integer.</para>
/// <para>
/// You can scale other durations with the same factor by using the
/// <see cref="TestKitBase.Dilated">Testkit.Dilated</see>
/// </para>
/// </summary>
/// <summary>
/// If set to <c>true</c> calls to testkit will be logged.
/// This is enabled by setting the configuration value "akka.test.testkit.debug" to a true.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestLatch.cs
//-----------------------------------------------------------------------
// <copyright file="TestLatch.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <para>A count down latch that initially is closed. In order for it to become open <see cref="CountDown"/> must be called.
/// By default one call is enough, but this can be changed by specifying the count in the constructor.</para>
/// 
/// <para>By default a timeout of 5 seconds is used.</para>
/// <para>
/// When created using <see cref="TestKitBase.CreateTestLatch">TestKit.CreateTestLatch</see> the default
/// timeout from <see cref="TestKitSettings.DefaultTimeout"/> is used and all timeouts are dilated, i.e. multiplied by 
/// <see cref="Akka.TestKit.TestKitSettings.TestTimeFactor"/>
/// </para>
/// Timeouts will always throw an exception.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="TestLatch"/> class with count = 1, i.e. the 
/// instance will become open after one call to <see cref="CountDown"/>.
/// The default timeout is set to 5 seconds.
/// </summary>
//Intentionally left blank
/// <summary>
/// Initializes a new instance of the <see cref="TestLatch"/> class with the specified count, i.e
/// number of times <see cref="CountDown"/> must be called to make this instance become open.
/// The default timeout is set to 5 seconds.
/// </summary>
//Intentionally left blank
/// <summary>
/// Initializes a new instance of the <see cref="TestLatch"/> class with the specified count, i.e
/// number of times <see cref="CountDown"/> must be called to make this instance become open.
/// </summary>
/// <summary>
/// Creates a TestLatch with the specified dilate function, timeout and count. 
/// Intended to be used by TestKit.
/// </summary>
//This one exists to be available to inheritors
/// <summary>
/// Gets a value indicating whether the latch is open.
/// </summary>
/// <summary>
/// Count down the latch.
/// </summary>
/// <summary>
/// Make this instance become open.
/// </summary>
/// <summary>
/// Reset this instance to the initial count, making it become closed.
/// </summary>
/// <summary>
/// Expects the latch to become open within the specified timeout. If the timeout is reached, a
/// <see cref="TimeoutException"/> is thrown.
/// <para>
/// If this instance has been created using <see cref="TestKitBase.CreateTestLatch">TestKit.CreateTestLatch</see> 
/// <paramref name="timeout"/> is dilated, i.e. multiplied by <see cref="Akka.TestKit.TestKitSettings.TestTimeFactor"/>
/// </para>
/// </summary>
/// <exception cref="TimeoutException">Thrown when the timeout is reached</exception>
/// <exception cref="ArgumentException">Thrown when a too large timeout has been specified</exception>
/// <summary>
/// Expects the latch to become open within the default timeout. If the timeout is reached, a
/// <see cref="TimeoutException"/> is thrown.
/// <para>If no timeout was specified when creating this instance, 5 seconds is used.</para>
/// <para>If this instance has been created using <see cref="TestKitBase.CreateTestLatch">TestKit.CreateTestLatch</see> the default
/// timeout from <see cref="TestKitSettings.DefaultTimeout"/> is used and dilated, i.e. multiplied by 
/// <see cref="Akka.TestKit.TestKitSettings.TestTimeFactor"/>
/// </para>
/// </summary>
/// <exception cref="TimeoutException">Thrown when the timeout is reached</exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestProbe.cs
//-----------------------------------------------------------------------
// <copyright file="TestProbe.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// TestKit-based probe which allows sending, reception and reply.
/// Use <see cref="TestKitBase.CreateTestProbe(string)" /> inside your test 
/// to create new instances.
/// </summary>
/// <summary>Gets the reference of this probe.</summary>
/// <summary>Gets the sender of the last message</summary>
/// <summary>
/// Send message to an actor while using the probe as the sender.
/// Replies will be available for inspection with all of TestKit's assertion
/// methods.
/// </summary>
/// <param name="actor">The actor.</param>
/// <param name="message">The message.</param>
/// <summary>
/// Forwards a message to the specified actor. As sender the sender of the last message is used.
/// </summary>
/// <param name="actor">The actor to forward to.</param>
/// <param name="message">The message.</param>
/// <summary>
/// Forwards the last received message to the specified actor as if the 
/// <see cref="TestKitBase.LastMessage"/> was sent directly to the actor in the first place.
/// </summary>
/// <param name="actor">The actor to forward to.</param>
/// <summary>
/// Send message to the sender of the last received message.
/// </summary>
/// <param name="message">The message.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestScheduler.cs
//-----------------------------------------------------------------------
// <copyright file="TestScheduler.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\Configs\TestConfigs.cs
//-----------------------------------------------------------------------
// <copyright file="TestConfigs.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// The default TestKit config
/// </summary>
/// <summary>
/// Configuration for tests that require deterministic control over the AkkaSystem scheduler.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\DeadLettersFilter.cs
//-----------------------------------------------------------------------
// <copyright file="DeadLettersFilter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Filter which matches DeadLetter events, if the wrapped message conforms to the given type.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\EventFilterFactory.cs
//-----------------------------------------------------------------------
// <copyright file="EventFilterFactory.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Create a filter for <see cref="Akka.Event.Error"/> events. Events must match the specified pattern to be filtered.
/// <example>
/// Error&lt;MyException&gt;(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <typeparam name="TException">The type of the exception.</typeparam>
/// <param name="pattern">The event must match the pattern to be filtered.</param>
/// <param name="source">>Optional. The event source.</param>
/// <returns>The new filter</returns>
/// <summary>
/// Create a filter for Error events. Events must match the specified pattern to be filtered.
/// <example>
/// Error&lt;MyException&gt;(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <param name="exceptionType">The type of the exception. It must be a <see cref="System.Exception"/>.</param>
/// <param name="pattern">The event must match the pattern to be filtered.</param>
/// <param name="source">>Optional. The event source.</param>
/// <param name="checkInnerExceptions">Optional. When set to <c>true</c> not only the top level exception is matched, but inner exceptions are also checked until one matches. Default: <c>false</c></param>
/// <returns>The new filter</returns>
/// <summary>
/// Create a filter for Error events.
/// <para><paramref name="message" /> takes priority over <paramref name="start" />.
/// If <paramref name="message" />!=<c>null</c> the event must match it to be filtered.
/// If <paramref name="start" />!=<c>null</c> and <paramref name="message" /> has not been specified,
/// the event must start with the given string to be filtered.
/// </para><example>
/// Error&lt;MyException&gt;()                                         // filter only on exception type
/// Error&lt;MyException&gt;("message")                                // filter on exactly matching message
/// Error&lt;MyException&gt;(source: obj)                              // filter on event source
/// Error&lt;MyException&gt;(start: "Expected")                        // filter on start of message
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <typeparam name="TException">The type of the exception.</typeparam>
/// <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
/// <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
/// <param name="start">>Optional. If specified (and <paramref name="message"/> is not specified, the event must start with the string to be filtered.</param>
/// <param name="source">>Optional. The event source.</param>
/// <returns>The new filter</returns>
/// <summary>
/// Create a filter for Error events.
/// <para><paramref name="message" /> takes priority over <paramref name="start" />.
/// If <paramref name="message" />!=<c>null</c> the event must match it to be filtered.
/// If <paramref name="start" />!=<c>null</c> and <paramref name="message" /> has not been specified,
/// the event must start with the given string to be filtered.
/// </para><example>
/// Error(typeof(MyException))                                     // filter only on exception type
/// Error(typeof(MyException), "message")                          // filter on exactly matching message
/// Error(typeof(MyException), source: obj)                        // filter on event source
/// Error(typeof(MyException), start: "Expected")                  // filter on start of message
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <param name="exceptionType">The type of the exception. It must be a <see cref="System.Exception"/>.</param>
/// <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
/// <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
/// <param name="start">>Optional. If specified (and <paramref name="message"/> is not specified, the event must start with the string to be filtered.</param>
/// <param name="source">>Optional. The event source.</param>
/// <param name="checkInnerExceptions">Optional. When set to <c>true</c> not only the top level exception is matched, but inner exceptions are also checked until one matches. Default: <c>false</c></param>
/// <returns>The new filter</returns>
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Create a custom event filter. The filter will affect those events for
///  which the predicate function returns <c>true</c>.
/// </summary>
/// <param name="predicate">This function must return <c>true</c> for events that should be filtered.</param>
/// <returns></returns>
/// <summary>
/// Create a custom event filter. The filter will affect those events for
///  which the predicate function returns <c>true</c>.
/// </summary>
/// <param name="predicate">This function must return <c>true</c> for events that should be filtered.</param>
/// <returns></returns>
/// <summary>
/// Creates a event filter given the specified <paramref name="logLevel"/>.
/// This is the same as calling <see cref="Debug(string,string,string,string)"/>, <see cref="Info(string,string,string,string)"/>
///  <see cref="Warning(string,string,string,string)"/> or <see cref="Error(string,string,string,string)"/>
/// directly.
/// </summary>
/// <summary>
/// Creates a filter given the specified <paramref name="logLevel"/>.
/// This is the same as calling <see cref="Debug(Regex,string)"/>, <see cref="Info(Regex,string)"/>
///  <see cref="Warning(Regex,string)"/> or <see cref="Error(Regex,string)"/>
/// directly.
/// </summary>
/// <summary>
/// Creates a filter that catches dead letters
/// </summary>
/// <returns></returns>
/// <summary>
/// Creates a filter that catches dead letters of the specified type and, optionally from the specified source.
/// </summary>
/// <returns></returns>
/// <summary>
/// Creates a filter that catches dead letters of the specified type and matches the predicate, and optionally from the specified source.
/// </summary>
/// <returns></returns>
/// <summary>
/// Creates a filter that catches dead letters of the specified type and, optionally from the specified source.
/// </summary>
/// <returns></returns>
/// <summary>
/// Creates a filter that catches dead letters of the specified type and matches the predicate, and optionally from the specified source.
/// </summary>
/// <returns></returns>
//This will contain _filters + filter
//Copy everything from _filters to allFilter and put filter at the end
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\EventFilterFactory_Generated.cs
//-----------------------------------------------------------------------
// <copyright file="EventFilterFactory_Generated.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// --- Error ------------------------------------------------------------------------------------------------
/// <summary>
/// Create a filter for <see cref="Akka.Event.Error"/> events.
/// <para><paramref name="message" /> takes priority over <paramref name="start" />.
/// If <paramref name="message" />!=<c>null</c> the event must match it to be filtered.
/// If <paramref name="start" />!=<c>null</c> and <paramref name="message" /> has not been specified,
/// the event must start with the given string to be filtered.
/// If <paramref name="contains" />!=<c>null</c> and both <paramref name="message" /> and 
/// <paramref name="start" /> have not been specified,
/// the event must contain the given string to be filtered.
/// </para><example>
/// Error()                                   // filter all Error events
/// Error("message")                          // filter on exactly matching message
/// Error(source: obj)                        // filter on event source
/// Error(start: "Expected")                  // filter on start of message
/// Error(contains: "Expected")               // filter on part of message
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
/// <param name="start">Optional. If specified (and <paramref name="message"/> is not specified), the event must start with the string to be filtered.</param>
/// <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
/// <param name="source">Optional. The event source.</param>
/// <returns>The new filter</returns>
//This file has been auto generated. Do NOT modify this file directly
/// <summary>
/// Create a filter for <see cref="Akka.Event.Error"/> events. Events must match the specified pattern to be filtered.
/// <example>
/// Error(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <param name="pattern">The event must match the pattern to be filtered.</param>
/// <param name="source">>Optional. The event source.</param>
/// <returns>The new filter</returns>
// --- Warning ------------------------------------------------------------------------------------------------
/// <summary>
/// Create a filter for <see cref="Akka.Event.Warning"/> events.
/// <para><paramref name="message" /> takes priority over <paramref name="start" />.
/// If <paramref name="message" />!=<c>null</c> the event must match it to be filtered.
/// If <paramref name="start" />!=<c>null</c> and <paramref name="message" /> has not been specified,
/// the event must start with the given string to be filtered.
/// If <paramref name="contains" />!=<c>null</c> and both <paramref name="message" /> and 
/// <paramref name="start" /> have not been specified,
/// the event must contain the given string to be filtered.
/// </para><example>
/// Warning()                                   // filter all Warning events
/// Warning("message")                          // filter on exactly matching message
/// Warning(source: obj)                        // filter on event source
/// Warning(start: "Expected")                  // filter on start of message
/// Warning(contains: "Expected")               // filter on part of message
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
/// <param name="start">Optional. If specified (and <paramref name="message"/> is not specified), the event must start with the string to be filtered.</param>
/// <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
/// <param name="source">Optional. The event source.</param>
/// <returns>The new filter</returns>
//This file has been auto generated. Do NOT modify this file directly
/// <summary>
/// Create a filter for <see cref="Akka.Event.Warning"/> events. Events must match the specified pattern to be filtered.
/// <example>
/// Warning(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <param name="pattern">The event must match the pattern to be filtered.</param>
/// <param name="source">>Optional. The event source.</param>
/// <returns>The new filter</returns>
// --- Info ------------------------------------------------------------------------------------------------
/// <summary>
/// Create a filter for <see cref="Akka.Event.Info"/> events.
/// <para><paramref name="message" /> takes priority over <paramref name="start" />.
/// If <paramref name="message" />!=<c>null</c> the event must match it to be filtered.
/// If <paramref name="start" />!=<c>null</c> and <paramref name="message" /> has not been specified,
/// the event must start with the given string to be filtered.
/// If <paramref name="contains" />!=<c>null</c> and both <paramref name="message" /> and 
/// <paramref name="start" /> have not been specified,
/// the event must contain the given string to be filtered.
/// </para><example>
/// Info()                                   // filter all Info events
/// Info("message")                          // filter on exactly matching message
/// Info(source: obj)                        // filter on event source
/// Info(start: "Expected")                  // filter on start of message
/// Info(contains: "Expected")               // filter on part of message
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
/// <param name="start">Optional. If specified (and <paramref name="message"/> is not specified), the event must start with the string to be filtered.</param>
/// <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
/// <param name="source">Optional. The event source.</param>
/// <returns>The new filter</returns>
//This file has been auto generated. Do NOT modify this file directly
/// <summary>
/// Create a filter for <see cref="Akka.Event.Info"/> events. Events must match the specified pattern to be filtered.
/// <example>
/// Info(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <param name="pattern">The event must match the pattern to be filtered.</param>
/// <param name="source">>Optional. The event source.</param>
/// <returns>The new filter</returns>
// --- Debug ------------------------------------------------------------------------------------------------
/// <summary>
/// Create a filter for <see cref="Akka.Event.Debug"/> events.
/// <para><paramref name="message" /> takes priority over <paramref name="start" />.
/// If <paramref name="message" />!=<c>null</c> the event must match it to be filtered.
/// If <paramref name="start" />!=<c>null</c> and <paramref name="message" /> has not been specified,
/// the event must start with the given string to be filtered.
/// If <paramref name="contains" />!=<c>null</c> and both <paramref name="message" /> and 
/// <paramref name="start" /> have not been specified,
/// the event must contain the given string to be filtered.
/// </para><example>
/// Debug()                                   // filter all Debug events
/// Debug("message")                          // filter on exactly matching message
/// Debug(source: obj)                        // filter on event source
/// Debug(start: "Expected")                  // filter on start of message
/// Debug(contains: "Expected")               // filter on part of message
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <param name="message">Optional. If specified the event must match it exactly to be filtered.</param>
/// <param name="start">Optional. If specified (and <paramref name="message"/> is not specified), the event must start with the string to be filtered.</param>
/// <param name="contains">Optional. If specified (and neither <paramref name="message"/> nor <paramref name="start"/> are specified), the event must contain the string to be filtered.</param>
/// <param name="source">Optional. The event source.</param>
/// <returns>The new filter</returns>
//This file has been auto generated. Do NOT modify this file directly
/// <summary>
/// Create a filter for <see cref="Akka.Event.Debug"/> events. Events must match the specified pattern to be filtered.
/// <example>
/// Debug(pattern: new Regex("weird.*message"), source: obj) // filter on pattern and source
/// </example>
/// <remarks>Please note that filtering on the <paramref name="source"/> being
/// <c>null</c> does NOT work (passing <c>null</c> disables the source filter).
/// </remarks>
/// </summary>
/// <param name="pattern">The event must match the pattern to be filtered.</param>
/// <param name="source">>Optional. The event source.</param>
/// <returns>The new filter</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\IEventFilter.cs
//-----------------------------------------------------------------------
// <copyright file="IEventFilter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\IEventFilterApplier.cs
//-----------------------------------------------------------------------
// <copyright file="IEventFilterApplier.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
/// <summary>
/// Executes <paramref name="action"/> and
/// expects one event to be logged during the execution.
/// This method fails and throws an exception if more than one event is logged,
/// or if a timeout occurs. The timeout is taken from the config value
/// "akka.test.filter-leeway", see <see cref="TestKitSettings.TestEventFilterLeeway"/>.
/// </summary>
/// <param name="action">The action.</param>
/// <summary>
/// Executes <paramref name="action"/> and
/// expects one event to be logged during the execution.
/// This method fails and throws an exception if more than one event is logged,
/// or if a timeout occurs.
/// </summary>
/// <param name="timeout">The time to wait for a log event after executing <paramref name="action"/></param>
/// <param name="action">The action.</param>
/// <summary>
/// Executes <paramref name="action"/> and expects the specified number
/// of events to be logged during the execution.
/// This method fails and throws an exception if more events than expected are logged,
/// or if a timeout occurs. The timeout is taken from the config value
/// "akka.test.filter-leeway", see <see cref="TestKitSettings.TestEventFilterLeeway"/>.
/// </summary>
/// <param name="expectedCount">The expected number of events</param>
/// <param name="action">The action.</param>
/// <summary>
/// Executes <paramref name="action"/> and expects the specified number
/// of events to be logged during the execution.
/// This method fails and throws an exception if more events than expected are logged,
/// or if a timeout occurs. The timeout is taken from the config value
/// "akka.test.filter-leeway", see <see cref="TestKitSettings.TestEventFilterLeeway"/>.
/// </summary>
/// <param name="timeout">The time to wait for log events after executing <paramref name="action"/></param>
/// <param name="expectedCount">The expected number of events</param>
/// <param name="action">The action.</param>
/// <summary>
/// Executes <paramref name="func"/> and
/// expects one event to be logged during the execution.
/// This function fails and throws an exception if more than one event is logged,
/// or if a timeout occurs. The timeout is taken from the config value
/// "akka.test.filter-leeway", see <see cref="TestKitSettings.TestEventFilterLeeway"/>.
/// </summary>
/// <typeparam name="T">The return value of the function</typeparam>
/// <param name="func">The function.</param>
/// <returns>The returned value from <paramref name="func"/>.</returns>
/// <summary>
/// Executes <paramref name="func"/> and
/// expects one event to be logged during the execution.
/// This function fails and throws an exception if more than one event is logged,
/// or if a timeout occurs.
/// </summary>
/// <typeparam name="T">The return value of the function</typeparam>
/// <param name="timeout">The time to wait for a log event after executing <paramref name="func"/></param>
/// <param name="func">The function.</param>
/// <returns>The returned value from <paramref name="func"/>.</returns>
/// <summary>
/// Executes <paramref name="func"/> and expects the specified number
/// of events to be logged during the execution.
/// This function fails and throws an exception if more events than expected are logged,
/// or if a timeout occurs. The timeout is taken from the config value
/// "akka.test.filter-leeway", see <see cref="TestKitSettings.TestEventFilterLeeway"/>.
/// </summary>
/// <typeparam name="T">The return value of the function</typeparam>
/// <param name="expectedCount">The expected number of events</param>
/// <param name="func">The function.</param>
/// <returns>The returned value from <paramref name="func"/>.</returns>
/// <summary>
/// Executes <paramref name="func"/> and expects the specified number
/// of events to be logged during the execution.
/// This function fails and throws an exception if more events than expected are logged,
/// or if a timeout occurs. The timeout is taken from the config value
/// "akka.test.filter-leeway", see <see cref="TestKitSettings.TestEventFilterLeeway"/>.
/// </summary>
/// <typeparam name="T">The return value of the function</typeparam>
/// <param name="timeout">The time to wait for log events after executing <paramref name="func"/></param>
/// <param name="expectedCount">The expected number of events</param>
/// <param name="func">The function.</param>
/// <returns>The returned value from <paramref name="func"/>.</returns>
/// <summary>
/// Executes <paramref name="func"/> and prevent events from being logged during the execution.
/// </summary>
/// <typeparam name="T">The return value of the function</typeparam>
/// <param name="func">The function.</param>
/// <returns>The returned value from <paramref name="func"/>.</returns>
/// <summary>
/// Executes <paramref name="action"/> and prevent events from being logged during the execution.
/// </summary>
/// <param name="action">The function.</param>
/// <returns>The returned value from <paramref name="action"/>.</returns>
/// <summary>
/// Prevents events from being logged from now on. To allow events to be logged again, call 
/// <see cref="IUnmutableFilter.Unmute"/> on the returned object.
/// <example>
/// <code>
/// var filter = EventFilter.Debug().Mute();
/// ...
/// filter.Unmute();
/// </code>
/// </example>
/// You may also use it like this:
/// <example>
/// <code>
/// using(EventFilter.Debug().Mute())
/// {
///    ...
/// }
/// </code>
/// </example>
/// </summary>
/// <summary>
/// Let's you chain more filters together. Similar to Akka JVM's filterEvents
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\IUnmutableFilter.cs
//-----------------------------------------------------------------------
// <copyright file="IUnmutableFilter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
/// <summary>
/// Call this to let events that previously have been muted to be logged again.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\TestEventListener.cs
//-----------------------------------------------------------------------
// <copyright file="TestEventListener.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// EventListener for running tests, which allows selectively filtering out
/// expected messages. To use it, include something like this in
/// the configuration:
/// <code>akka.loggers = ["Akka.TestKit.TestEventListener, Akka.TestKit"]</code>
/// </summary>
// ReSharper disable once EmptyGeneralCatchClause
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\CustomEventFilter.cs
//-----------------------------------------------------------------------
// <copyright file="CustomEventFilter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\DebugFilter.cs
//-----------------------------------------------------------------------
// <copyright file="DebugFilter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\ErrorFilter.cs
//-----------------------------------------------------------------------
// <copyright file="ErrorFilter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
//Must match type. If no cause, then it does not match the specified exception type
//The cause did not implement the specified type.
//At this stage we have a cause, and it's of the specified type.
//Check that message matches, if nothing matches, recurse
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\EventFilterApplier.cs
//-----------------------------------------------------------------------
// <copyright file="EventFilterApplier.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
//Automatically initialized to false;
//Destructor:
//~InternalUnmutableFilter() 
//{
//    // Finalizer calls Dispose(false)
//    Dispose(false);
//}
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
//Take this object off the finalization queue and prevent finalization code for this object
//from executing a second time.
/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
/// <param name="disposing">if set to <c>true</c> the method has been called directly or indirectly by a 
/// user's code. Managed and unmanaged resources will be disposed.<br />
/// if set to <c>false</c> the method has been called by the runtime from inside the finalizer and only 
/// unmanaged resources can be disposed.</param>
// If disposing equals false, the method has been called by the
// runtime from inside the finalizer and you should not reference
// other objects. Only unmanaged resources can be disposed.
//Make sure Dispose does not get called more than once, by checking the disposed field
//Clean up unmanaged resources
// base.dispose(disposing);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\EventFilterBase.cs
//-----------------------------------------------------------------------
// <copyright file="EventFilterBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>Internal! 
/// Facilities for selectively filtering out expected events from logging so
/// that you can keep your test run’s console output clean and do not miss real
/// error messages.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Determines whether the specified event should be filtered or not.
/// </summary>
/// <returns><c>true</c> to filter the event.</returns>
//In Akka JVM this is called matches
/// <summary>Internal helper.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
//if(_occurences > 1)
//    sb.Append(_occurences == int.MaxValue ? "infinite" : _occurences.ToString(CultureInfo.InvariantCulture)).Append(" occurences of ");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\InfoFilter.cs
//-----------------------------------------------------------------------
// <copyright file="InfoFilter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\WarningFilter.cs
//-----------------------------------------------------------------------
// <copyright file="WarningFilter.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\StringMatcher\ContainsString.cs
//-----------------------------------------------------------------------
// <copyright file="ContainsString.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\StringMatcher\EqualsString.cs
//-----------------------------------------------------------------------
// <copyright file="EqualsString.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\StringMatcher\EqualsStringAndPathMatcher.cs
//-----------------------------------------------------------------------
// <copyright file="EqualsStringAndPathMatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\StringMatcher\IStringMatcher.cs
//-----------------------------------------------------------------------
// <copyright file="IStringMatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\StringMatcher\MatchesAll.cs
//-----------------------------------------------------------------------
// <copyright file="MatchesAll.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\StringMatcher\PredicateMatcher.cs
//-----------------------------------------------------------------------
// <copyright file="PredicateMatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\StringMatcher\RegexMatcher.cs
//-----------------------------------------------------------------------
// <copyright file="RegexMatcher.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\Internal\StringMatcher\StartsWithString.cs
//-----------------------------------------------------------------------
// <copyright file="StartsWithString.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\TestEvent\Mute.cs
//-----------------------------------------------------------------------
// <copyright file="Mute.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\EventFilter\TestEvent\Unmute.cs
//-----------------------------------------------------------------------
// <copyright file="Unmute.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\Internal\BlockingCollectionTestActorQueue.cs
//-----------------------------------------------------------------------
// <copyright file="BlockingCollectionTestActorQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\Internal\BlockingQueue.cs
//-----------------------------------------------------------------------
// <copyright file="BlockingQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// This behaves exactly like a <see cref="BlockingCollection{T}"/> with a queue as the underlying storage
/// except it adds the possibility to add an item first, making it a LIFO.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <typeparam name="T">The type of item to store</typeparam>
/// <summary>
/// Removes an item from the collection.
/// </summary>
/// <param name="cancellationToken">The cancellation token that can be used to cancel the operation..</param>
/// <returns>The item removed from the collection.</returns>
/// <exception cref="OperationCanceledException">Thrown if the operation was cancelled</exception>
//We must create a copy
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\Internal\InternalTestActor.cs
//-----------------------------------------------------------------------
// <copyright file="InternalTestActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// An actor that enqueues received messages to a <see cref="BlockingCollection{T}"/>.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\Internal\InternalTestActorRef.cs
//-----------------------------------------------------------------------
// <copyright file="InternalTestActorRef.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>INTERNAL
/// This special ActorRef is exclusively for use during unit testing in a single-threaded environment. Therefore, it
/// overrides the dispatcher to CallingThreadDispatcher and sets the receiveTimeout to None. Otherwise,
/// it acts just like a normal ActorRef. You may retrieve a reference to the underlying actor to test internal logic.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>INTERNAL
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
//Looking at the scala code, this might not be obvious that the name starts with $$
//object TestActorRef (TestActorRef.scala) contain this code: 
//    private[testkit] def randomName: String = {
//      val l = number.getAndIncrement()
//      "$" + akka.util.Helpers.base64(l)
//    }
//So it adds one $. The second is added by akka.util.Helpers.base64(l) which by default 
//creates a StringBuilder and adds adds $. Hence, 2 $$
//TODO: switch from  Func<Mailbox> createMailbox to MailboxType mailboxType      
/// <summary>
/// Directly inject messages into actor receive behavior. Any exceptions
/// thrown will be available to you, while still being able to use
/// become/unbecome.
/// </summary>
/// <param name="message">The message.</param>
/// <param name="sender">The sender.</param>
/// <summary>
/// Registers this actor to be a death monitor of the provided ActorRef
/// This means that this actor will get a Terminated()-message when the provided actor
/// is permanently terminated.
/// Returns the same ActorRef that is provided to it, to allow for cleaner invocations.
/// </summary>
/// <param name="subject">The subject to watch.</param>
/// <returns>Returns the same ActorRef that is provided to it, to allow for cleaner invocations.</returns>
/// <summary>
/// Deregisters this actor from being a death monitor of the provided ActorRef
/// This means that this actor will not get a Terminated()-message when the provided actor
/// is permanently terminated.
/// Returns the same ActorRef that is provided to it, to allow for cleaner invocations.
/// </summary>
/// <returns>Returns the same ActorRef that is provided to it, to allow for cleaner invocations.</returns>
/// <param name="subject">The subject to unwatch.</param>
/// <summary>
/// INTERNAL
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
//TODO: Should be: Func<Mailbox> mailbox = () => system.Mailboxes.FromConfig(dispatcher.Configurator.Config);
// we need to start ourselves since the creation of an actor has been split into initialization and starting
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\Internal\ITestActorQueue.cs
//-----------------------------------------------------------------------
// <copyright file="ITestActorQueue.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>Adds the specified item to the queue.</summary>
/// <param name="item">The item.</param>
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Get all messages.
/// </summary>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\Internal\TimeSpanExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="TimeSpanExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Returns <c>true</c> if the <paramref name="timeSpan"/> has no value.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Returns <c>true</c> if the <paramref name="timeSpan"/> <c>== 0</c>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Returns <c>true</c> if the <paramref name="timeSpan"/> <c>== 0</c>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Returns <c>true</c> if the <paramref name="timeSpan"/> <c>&gt;= 0</c>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Returns <c>true</c> if the <paramref name="timeSpan"/> <c>&gt;= 0</c>
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Returns <c>true</c> if the <paramref name="timeSpan"/> is negative.
/// This is a relaxed definition of when a <see cref="TimeSpan"/>.
/// Use <see cref="IsInfiniteTimeout(System.TimeSpan)"/> to test using the stricter definition.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Returns <c>true</c> if the <paramref name="timeSpan"/> is negative.
/// This is a relaxed definition of when a <see cref="TimeSpan"/>.
/// Use <see cref="IsInfiniteTimeout(System.TimeSpan)"/> to test using the stricter definition.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Returns <c>true</c> if the <paramref name="timeSpan"/> equals <see cref="Timeout.InfiniteTimeSpan"/> 
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Returns <c>true</c> if the <paramref name="timeSpan"/> equals <see cref="Timeout.InfiniteTimeSpan"/> 
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Throws an <see cref="ArgumentException"/> if the <paramref name="timeSpan"/> is not 0 or greater.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Returns the smallest value.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
/// <summary>
/// Returns the smallest value. if <paramref name="b"/> is <c>null</c> it's treated as 
/// undefined, and <paramref name="a"/> is returned.
/// <remarks>Note! Part of internal API. Breaking changes may occur without notice. Use at own risk.</remarks>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestActors\BlackHoleActor.cs
//-----------------------------------------------------------------------
// <copyright file="BlackHoleActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// A <see cref="BlackHoleActor"/> is an actor that silently 
/// accepts any messages sent to it.
/// </summary>
/// <summary>
/// Returns a <see cref="Props"/> object that can be used to create a <see cref="BlackHoleActor"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit\TestActors\EchoActor.cs
//-----------------------------------------------------------------------
// <copyright file="EchoActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// An <see cref="EchoActor"/> is an actor that echoes whatever is sent to it, to the
/// TestKit's <see cref="TestKitBase.TestActor"/>.
/// By default it also echoes back to the sender, unless the sender is the <see cref="TestKitBase.TestActor"/>
/// (in this case the <see cref="TestKitBase.TestActor"/> will only receive one message).
/// </summary>
/// <summary>
/// Returns a <see cref="Props"/> object that can be used to create an <see cref="EchoActor"/>.
/// The  <see cref="EchoActor"/> echoes whatever is sent to it, to the
/// TestKit's <see cref="TestKitBase.TestActor"/>.
/// By default it also echoes back to the sender, unless the sender is the <see cref="TestKitBase.TestActor"/>
/// (in this case the <see cref="TestKitBase.TestActor"/> will only receive one message) or unless 
/// <paramref name="echoBackToSenderAsWell"/> has been set to <c>false</c>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\NoImplicitSenderSpec.cs
//-----------------------------------------------------------------------
// <copyright file="NoImplicitSenderSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Test that it works after we know that context has been changed
//Verifies that bug #459 has been fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestKit_Config_Tests.cs
//-----------------------------------------------------------------------
// <copyright file="TestKit_Config_Tests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestSchedulerTests.cs
//-----------------------------------------------------------------------
// <copyright file="TestSchedulerTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestActorRefTests\BossActor.cs
//-----------------------------------------------------------------------
// <copyright file="BossActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestActorRefTests\Logger.cs
//-----------------------------------------------------------------------
// <copyright file="Logger.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestActorRefTests\NestingActor.cs
//-----------------------------------------------------------------------
// <copyright file="NestingActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestActorRefTests\ReplyActor.cs
//-----------------------------------------------------------------------
// <copyright file="ReplyActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestActorRefTests\SenderActor.cs
//-----------------------------------------------------------------------
// <copyright file="SenderActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestActorRefTests\TActorBase.cs
//-----------------------------------------------------------------------
// <copyright file="TActorBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestActorRefTests\TestActorRefSpec.cs
//-----------------------------------------------------------------------
// <copyright file="TestActorRefSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//return (@"test-dispatcher1.type=""" + typeof(TaskDispatcher).FullName) + FullDebugConfig;
//Looking at the scala code, this might not be obvious that the name starts with $$
//object TestActorRef (TestActorRef.scala) contain this code: 
//    private[testkit] def randomName: String = {
//      val l = number.getAndIncrement()
//      "$" + akka.util.Helpers.base64(l)
//    }
//So it adds one $. The second is added by akka.util.Helpers.base64(l) which by default 
//creates a StringBuilder and adds adds $. Hence, 2 $$
//TODO: Should have this surrounding all code EventFilter[ActorKilledException]() intercept {            
//TODO: Should have this surrounding all code EventFilter[ActorKilledException]() intercept {
//Using a timeout to stop the test if there is something wrong with the code
//This will stop the actor
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestActorRefTests\WatchAndForwardActor.cs
//-----------------------------------------------------------------------
// <copyright file="WatchAndForwardActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestActorRefTests\WorkerActor.cs
//-----------------------------------------------------------------------
// <copyright file="WorkerActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: case replyTo: Promise[_] ⇒ replyTo.asInstanceOf[Promise[Any]].success("complexReply")
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestActorRefTests\WrappedTerminated.cs
//-----------------------------------------------------------------------
// <copyright file="WrappedTerminated.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestEventListenerTests\AllTestForEventFilterBase.cs
//-----------------------------------------------------------------------
// <copyright file="AllTestForEventFilterBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable ConvertToLambdaExpression
// ReSharper restore ConvertToLambdaExpression
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestEventListenerTests\AllTestForEventFilterBase_Instances.cs
//-----------------------------------------------------------------------
// <copyright file="AllTestForEventFilterBase_Instances.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestEventListenerTests\ConfigTests.cs
//-----------------------------------------------------------------------
// <copyright file="ConfigTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestEventListenerTests\CustomEventFilterTests.cs
//-----------------------------------------------------------------------
// <copyright file="CustomEventFilterTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable ConvertToLambdaExpression
// ReSharper restore ConvertToLambdaExpression
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestEventListenerTests\DeadLettersEventFilterTests.cs
//-----------------------------------------------------------------------
// <copyright file="DeadLettersEventFilterTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable ConvertToLambdaExpression
// ReSharper restore ConvertToLambdaExpression
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestEventListenerTests\EventFilterTestBase.cs
//-----------------------------------------------------------------------
// <copyright file="EventFilterTestBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used to signal that the test was successful and that we should ensure no more messages were logged
/// </summary>
//We send a ForwardAllEventsTo containing message to the TestEventListenerToForwarder logger (configured as a logger above).
//It should respond with an "OK" message when it has received the message.
// ReSharper disable once DoNotCallOverridableMethodsInConstructor
//From now on we know that all messages will be forwarded to TestActor
//After every test we make sure no uncatched messages have been logged
//We log a Finished message. When it arrives to TestActor we know no other message has been logged.
//If we receive something else it means another message was logged, and ExpectMsg will fail
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestEventListenerTests\ExceptionEventFilterTests.cs
//-----------------------------------------------------------------------
// <copyright file="ExceptionEventFilterTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//public class ExceptionEventFilterTests : EventFilterTestBase
//{
//    public ExceptionEventFilterTests()
//        : base("akka.logLevel=ERROR")
//    {
//    }
//    public class TestFinished : Exception { }
//    public class SomeException : Exception { }
//    protected override void SendInitLoggerMessage(InitLoggerMessage message)
//    {
//        throw new NotImplementedException();
//    }
//    protected override void AfterTest()
//    {
//        //After every test we make sure no uncatched messages have been logged
//        EnsureNoMoreLoggedMessages();
//        base.AfterTest();
//    }
//    private void EnsureNoMoreLoggedMessages()
//    {
//        //We log a TestFinished exception. When it arrives to TestActor we know no other message has been logged7
//        //If we receive something else it means another message was logged, and ExpectMsg will fail
//        Log.Error(new TestFinished(), "Finished");
//        ExpectMsg<Error>(err => err.Cause is TestFinished,"cause to be <TestFinished>");
//    }
//    [Fact]
//    public void SingleExceptionIsIntercepted()
//    {
//        EventFilter.Exception<SomeException>().Intercept(() => Log.Error(new SomeException(), "whatever"));
//    }
//    [Fact]
//    public void CanInterceptMessagesWhenStartIsSpecified()
//    {
//        EventFilter.Exception<SomeException>(start: "what").Intercept(() => Log.Error(new SomeException(), "whatever"));
//    }
//    [Fact]
//    public void DoNotInterceptMessagesWhenStartDoesNotMatch()
//    {
//        EventFilter.Exception<SomeException>(start: "this is clearly not in message").Intercept(() => Log.Error(new SomeException(), "whatever"));
//        ExpectMsg<Error>(err => (string)err.Message == "whatever");
//    }
//    [Fact]
//    public void CanInterceptMessagesWhenMessageIsSpecified()
//    {
//        EventFilter.Exception<SomeException>(message: "whatever").Intercept(() => Log.Error(new SomeException(), "whatever"));
//    }
//    [Fact]
//    public void DoNotInterceptMessagesWhenMessageDoesNotMatch()
//    {
//        EventFilter.Exception<SomeException>(message: "this is clearly not the message").Intercept(() => Log.Error(new SomeException(), "whatever"));
//        ExpectMsg<Error>(err => (string)err.Message == "whatever");
//    }
//    [Fact]
//    public void CanInterceptMessagesWhenContainsIsSpecified()
//    {
//        EventFilter.Exception<SomeException>(contains: "ate").Intercept(() => Log.Error(new SomeException(), "whatever"));
//    }
//    [Fact]
//    public void DoNotInterceptMessagesWhenContainsDoesNotMatch()
//    {
//        EventFilter.Exception<SomeException>(contains: "this is clearly not in the message").Intercept(() => Log.Error(new SomeException(), "whatever"));
//        ExpectMsg<Error>(err => (string)err.Message == "whatever");
//    }
//    [Fact]
//    public void CanInterceptMessagesWhenSourceIsSpecified()
//    {
//        EventFilter.Exception<SomeException>(source: GetType().FullName).Intercept(() => Log.Error(new SomeException(), "whatever"));
//    }
//    [Fact]
//    public void DoNotInterceptMessagesWhenSourceDoesNotMatch()
//    {
//        EventFilter.Exception<SomeException>(source: "this is clearly not the source").Intercept(() => Log.Error(new SomeException(), "whatever"));
//        ExpectMsg<Error>(err => (string)err.Message == "whatever");
//    }
//    [Fact]
//    public void SpecifiedNumbersOfExceptionsCanBeIntercepted()
//    {
//        EventFilter.Exception<SomeException>(occurrences: 2).Intercept(() =>
//        {
//            Log.Error(new SomeException(), "whatever");
//            Log.Error(new SomeException(), "whatever");
//        });
//    }
//    [Fact]
//    public void ShouldFailIfMoreExceptionsThenSpecifiedAreLogged()
//    {
//        var exception = XAssert.Throws<AssertException>(() =>
//            EventFilter.Exception<SomeException>(occurrences: 2).Intercept(() =>
//            {
//                Log.Error(new SomeException(), "whatever");
//                Log.Error(new SomeException(), "whatever");
//                Log.Error(new SomeException(), "whatever");
//            }));
//        Assert.Contains("1 messages too many", exception.Message, StringComparison.OrdinalIgnoreCase);
//    }
//}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestEventListenerTests\ForwardAllEventsTestEventListener.cs
//-----------------------------------------------------------------------
// <copyright file="ForwardAllEventsTestEventListener.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestFSMRefTests\TestFSMRefSpec.cs
//-----------------------------------------------------------------------
// <copyright file="TestFSMRefSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestKitBaseTests\AwaitAssertTests.cs
//-----------------------------------------------------------------------
// <copyright file="AwaitAssertTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestKitBaseTests\DilatedTests.cs
//-----------------------------------------------------------------------
// <copyright file="DilatedTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestKitBaseTests\ExpectTests.cs
//-----------------------------------------------------------------------
// <copyright file="ExpectTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestKitBaseTests\ReceiveTests.cs
//-----------------------------------------------------------------------
// <copyright file="ReceiveTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\TestKitBaseTests\RemainingTests.cs
//-----------------------------------------------------------------------
// <copyright file="RemainingTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\Xunit2\TestKit_Config_Tests.cs
//-----------------------------------------------------------------------
// <copyright file="TestKit_Config_Tests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\Xunit2\TestEventListenerTests\AllTestForEventFilterBase.cs
//-----------------------------------------------------------------------
// <copyright file="AllTestForEventFilterBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable ConvertToLambdaExpression
// ReSharper restore ConvertToLambdaExpression
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\Xunit2\TestEventListenerTests\AllTestForEventFilterBase_Instances.cs
//-----------------------------------------------------------------------
// <copyright file="AllTestForEventFilterBase_Instances.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\Xunit2\TestEventListenerTests\ConfigTests.cs
//-----------------------------------------------------------------------
// <copyright file="ConfigTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\Xunit2\TestEventListenerTests\CustomEventFilterTests.cs
//-----------------------------------------------------------------------
// <copyright file="CustomEventFilterTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable ConvertToLambdaExpression
// ReSharper restore ConvertToLambdaExpression
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\Xunit2\TestEventListenerTests\DeadLettersEventFilterTests.cs
//-----------------------------------------------------------------------
// <copyright file="DeadLettersEventFilterTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable ConvertToLambdaExpression
// ReSharper restore ConvertToLambdaExpression
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\Xunit2\TestEventListenerTests\EventFilterTestBase.cs
// <copyright file="EventFilterTestBase.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used to signal that the test was successful and that we should ensure no more messages were logged
/// </summary>
//We send a ForwardAllEventsTo containing message to the TestEventListenerToForwarder logger (configured as a logger above).
//It should respond with an "OK" message when it has received the message.
// ReSharper disable once DoNotCallOverridableMethodsInConstructor
//From now on we know that all messsages will be forwarded to TestActor
//After every test we make sure no uncatched messages have been logged
//We log a Finished message. When it arrives to TestActor we know no other message has been logged.
//If we receive something else it means another message was logged, and ExpectMsg will fail
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\Xunit2\TestKitBaseTests\AwaitAssertTests.cs
//-----------------------------------------------------------------------
// <copyright file="AwaitAssertTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.TestKit.Tests\Xunit2\TestKitBaseTests\RemainingTests.cs
//-----------------------------------------------------------------------
// <copyright file="RemainingTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ActorBecomeTests.cs
//-----------------------------------------------------------------------
// <copyright file="ActorBecomeTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Given
//When
//Then
//Calling Become() does not persist the current handler, it just overwrites it, so when we call Unbecome(),
//no matter how many times, there is no persisted handler to revert to, so we'll end up with the default one
//Given
//Now OnReceive is used
//Now OnReceive2 is used
//Now OnReceive3 is used
//When
//Since we used the default Become(receive) above, i.e. Become(receive, discardOld:true)
//the OnReceive2 was overwritten, so the actor will revert to the default one, ie OnReceive
//Then
//Calling Become() does not persist the current handler, it just overwrites it, so when we call Unbecome(),
//no matter how many times, there is no persisted handler to revert to, so we'll end up with the default one
//Given
//Now OnReceive is used
//Now OnReceive2 is used
//Now OnReceive3 is used, and OnReceive2 was persisted
//When
//Since we used Become(receive, discardOld:true) the actor will revert to OnReceive2
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ActorCellTests_SerializationOfUserMessages.cs
//-----------------------------------------------------------------------
// <copyright file="ActorCellTests_SerializationOfUserMessages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ActorDslSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ActorDslSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: requires event filters
//TODO: requires event filters
//" + Sys.Name + "/user/fred/barney");
//TODO: requires proven and tested stash implementation
//Will stop the children
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ActorLifeCycleSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ActorLifeCycleSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//we need to wait for the child actor to unregister itself from the parent.
//this is done after PostStop so we have no way to wait for it
//ideas?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ActorPathSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ActorPathSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//sYstEm/pAth1/pAth2";
// "Although schemes are case insensitive, the canonical form is lowercase and documents that
//  specify schemes must do so with lowercase letters.  An implementation should accept 
//  uppercase letters as equivalent to lowercase in scheme names (e.g., allow "HTTP"
//  as well as "http") for the sake of robustness but should only produce lowercase scheme names 
//  for consistency."   rfc3986 
//In Akka, at least the system name is case-sensitive, see http://doc.akka.io/docs/akka/current/additional/faq.html#what-is-the-name-of-a-remote-actor            
//sYstEm/pAth1/pAth2");
//sYstEm@hOst:4711/pAth1/pAth2";
// "Although schemes are case insensitive, the canonical form is lowercase and documents that
//  specify schemes must do so with lowercase letters.  An implementation should accept 
//  uppercase letters as equivalent to lowercase in scheme names (e.g., allow "HTTP"
//  as well as "http") for the sake of robustness but should only produce lowercase scheme names 
//  for consistency."   rfc3986 
//In Akka, at least the system name is case-sensitive, see http://doc.akka.io/docs/akka/current/additional/faq.html#what-is-the-name-of-a-remote-actor            
//According to rfc3986 host is case insensitive, but should be produced as lowercase
//sYstEm@host:4711/pAth1/pAth2");
//sys@host:1234/some/ref";
//hallo", out ignored).ShouldBe(false);
//dd@:12", out ignored).ShouldBe(false);
//dd@h:hd", out ignored).ShouldBe(false);
//l:1/b", out ignored).ShouldBe(false);
//TODO: there must be a / after system name
//mysys/");
//mysys/user");
//mysys/user/foo");
//mysys/user/foo/bar");
//TODO: there must be a / after system name
//mysys@aaa:2552/");
//mysys@aaa:2552/user");
//mysys@aaa:2552/user/foo");
//mysys@bb:2552/");
//mysys@bb:2552/user");
//mysys@bb:2552/user/foo");
//mysys@cccc:2552/");
//mysys@cccc:2552/user");
//mysys@cccc:2552/user/foo");
//mysys@192.168.107.1:2552/");
//mysys@192.168.107.1:2552/user");
//mysys@192.168.107.1:2552/user/foo");
//mysys@aaa:2552/");
//mysys@aaa:2552/user");
//mysys@aaa:2552/user/foo");
/*
//remotesystem@localhost:8080/user",out path1);
//remotesystem/user", out path2);
//remotesystem@localhost:8080/user", out path1);
//remotesystem@localhost:8080/user", out path2);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ActorProducerPipelineTests.cs
//-----------------------------------------------------------------------
// <copyright file="ActorProducerPipelineTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// we'll send 3 int messages to stash by the actor and then stop it,
// all stashed messages should then be unstashed back and sent to dead letters
// send some messages to stash
// stop actor
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ActorRefProviderSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ActorRefProviderSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ActorRefSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ActorRefSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable EqualExpressionComparison
// ReSharper restore EqualExpressionComparison
// ReSharper disable EqualExpressionComparison
// ReSharper restore EqualExpressionComparison
// ReSharper disable EqualExpressionComparison
// ReSharper restore EqualExpressionComparison
// actors with a null sender should always write to deadletters
// will throw an exception if there's a bug
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ActorSelectionSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ActorSelectionSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable NotAccessedField.Local
// ReSharper restore NotAccessedField.Local
/*").Tell("hello3");
//xUnit 2 will have Assert.ThrowsAsync<TException>();
/// <summary>
/// Accepts a Tuple containing a string representation of an ActorPath and a message, respectively
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ActorSystemSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ActorSystemSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ActorSystemTests.cs
//-----------------------------------------------------------------------
// <copyright file="ActorSystemTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//arrange
//When we create a system manually we have to start it ourselves
//act
//assert
//arrange
//When we create a system manually we have to start it ourselves
//act
//assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\AddressSpec.cs
//-----------------------------------------------------------------------
// <copyright file="AddressSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\AskSpec.cs
//-----------------------------------------------------------------------
// <copyright file="AskSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Tests to ensure that if we wait on the result of an Ask inside an actor's receive loop
/// that we don't deadlock
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\AskTimeoutSpec.cs
//-----------------------------------------------------------------------
// <copyright file="AskSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\DeadLettersSpec.cs
//-----------------------------------------------------------------------
// <copyright file="DeadLettersSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\DeathWatchSpec.cs
//-----------------------------------------------------------------------
// <copyright file="DeathWatchSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//        protected static string GetConfig()
//        {
//            return @"
//                akka.log-dead-letters-during-shutdown = true
//                akka.actor.debug.autoreceive = true
//                akka.actor.debug.lifecycle = true
//                akka.actor.debug.event-stream = true
//                akka.actor.debug.unhandled = true
//                akka.log-dead-letters = true
//                akka.loglevel = DEBUG
//                akka.stdout-loglevel = DEBUG
//            ";
//        }
//The actor should Terminate, exchange the mailbox to a DeadLetterMailbox and forward the user message to the DeadLetterMailbox
// since Watch and Unwatch are asynchronous, we need some sync
// See issue: #61
// See issue: #61
// now the Watcher will
// - process the DeathWatchNotification and enqueue Terminated
// - process the unwatch command
// - process the Terminated
// If it receives the Terminated it will die, which in fact it should not
/// <summary>
/// Used for testing Ask / reply behaviors
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\DeployerSpec.cs
//-----------------------------------------------------------------------
// <copyright file="DeployerSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/*"" {
/*/some"" {
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\FSMTimingSpec.cs
//-----------------------------------------------------------------------
// <copyright file="FSMTimingSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//: base("akka.test.test-actor.dispatcher.type=Dispatcher" + FullDebugConfig)
//: base("akka.test.test-actor.dispatcher.type=Dispatcher" + FullDebugConfig)
//: base(FullDebugConfig)
//initializes the Finite State Machine, so it doesn't affect any of the time-sensitive tests below
//arrange
//act
//assert
//arrange
//act
//assert
//arrange
//act
//the timeout in state TestStateTimeout is 800ms, then it will change back to Initial
//assert
//arrange
//act
//assert
/// <summary>
/// receiveWhile is currently broken
/// </summary>
//FSM is suspended after processing this message and resumed 500s later
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\FSMTransitionSpec.cs
//-----------------------------------------------------------------------
// <copyright file="FSMTransitionSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//arrange
//act
//assert
//arrange
//act
//assert
//arrange
//act
//assert
//arrange
//act
//assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\InboxSpec.cs
//-----------------------------------------------------------------------
// <copyright file="InboxSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Default is 1000 but just to make sure these tests don't fail we set it
// check watch
//Fill the inbox (it can hold 1000) messages
//The inbox is full. Sending another message should result in a Warning message
//The inbox is still full. But since the warning message has already been sent, no more warnings should be sent
//Receive all messages from the inbox
//The inbox should be empty now, so receiving should result in a timeout
//Some point in the past
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\LocalActorRefProviderSpec.cs
//-----------------------------------------------------------------------
// <copyright file="LocalActorRefProviderSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Use WhenAll with empty ContinueWith to swallow all exceptions, so we can inspect the tasks afterwards.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\PatternSpec.cs
//-----------------------------------------------------------------------
// <copyright file="PatternSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//arrange
//act
//assert
//arrange
//act
//assert
//arrange
//act
//assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\PipeToSupportSpec.cs
//-----------------------------------------------------------------------
// <copyright file="PipeToSupportSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\PropsSpec.cs
//-----------------------------------------------------------------------
// <copyright file="PropsSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ReceiveActorTests.cs
//-----------------------------------------------------------------------
// <copyright file="ReceiveActorTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Given
//When
//Then
//Given
//When
//Then
//We expect a exception was thrown when the actor called Receive, and that it was sent back to us
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Just here to make sure base.PreStart isn't called
//Predicate first, when i < 5
//Predicate after, when 5 <= i < 10
//Func,            when 10 <= i < 15
//Null predicate,  when i >= 15
//The handler above should never be invoked
//Predicate first, when i < 5
//Predicate after, when 5 <= i < 10
//Func,            when 10 <= i < 15
//Null predicate,  when i >= 15
//The handler above should never be invoked
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ReceiveActorTests_Become.cs
//-----------------------------------------------------------------------
// <copyright file="ReceiveActorTests_Become.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Given
//When
//Switch to state2   
//Then
//When
//Switch to state3
//Then
//Given
//Switch to state2
//Switch to state3
//When
//Switch back to state2
//Then
//Given
//When
//Then
//When
//Switch back to state2
//Then
//When
//Switch back to state1
//Then
//When
//should still be in state1
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ReceiveActorTests_LifeCycle.cs
//-----------------------------------------------------------------------
// <copyright file="ReceiveActorTests_LifeCycle.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\ReceiveTimeoutSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ReceiveTimeoutSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: how does this prove that there was a reschedule?? see ReceiveTimeoutSpec.scala 
//This test verifies that bug #469 "ReceiveTimeout isn't cancelled when actor terminates" has been fixed
//make sure TestActor gets a notification when timeoutActor terminates
// wait for first ReceiveTimeout message, in which the latch is opened
//Stop and wait for the actor to terminate
//We should not get any messages now. If we get a message now, 
//it's a DeadLetter with ReceiveTimeout, meaning the receivetimeout wasn't cancelled.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\RelativeActorPathSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RelativeActorPathSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//ClusterSystem@127.0.0.1:2552");
//ClusterSystem@127.0.0.1:2552";
//ClusterSystem@127.0.0.1:2552/user/foo/bar/baz#1234";
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\RootGuardianActorRef_Tests.cs
//-----------------------------------------------------------------------
// <copyright file="RootGuardianActorRef_Tests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\StashMailboxSpec.cs
//-----------------------------------------------------------------------
// <copyright file="StashMailboxSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\SupervisorHierarchySpec.cs
//-----------------------------------------------------------------------
// <copyright file="SupervisorHierarchySpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Test relies on keeping children around during restart so we will not call base, 
//which by default it disposes of all children and then calls postStop()
// manager + all workers should be restarted by only killing a worker
// manager doesn't trap exits, so boss will restart manager
//We have built this hierarchy:
//     boss
//      |
//    crasher
//We send "killCrasher" to boss, which in turn will send Kill to crasher making it crash.
//Crasher will be restarted, and during PostRestart countDownMessages will count down.
//We then send another "killCrasher", which again will send Kill to crasher. It crashes,
//decider says it should be restarted but since we specified maximum 1 restart/5seconds it will be 
//permanently stopped. Boss, which watches crasher, receives Terminated, and counts down countDownMax
//Build this hierarchy:
//     boss
//      |
//    middle
//      |
//    worker
//Check everything is in place by sending ping to worker and expect it to respond with pong
//expected exception is thrown by the boss when it crashes
//Throws an exception, and then it's resumed
//verify that middle answers
//verify worker (child to middle) is up
//Build this hierarchy:
//  slowResumer
//      |
//     boss
//      |
//    middle
//      |
//    worker
//Check everything is in place by sending ping to worker and expect it to respond with pong
//expected exception is thrown by the boss when it crashes
//Let boss crash, this means any child under boss should be suspended, so we wait for worker to become suspended.                
//At this time slowresumer is currently handling the failure, in supervisestrategy, waiting for latch to be opened
//We verify that no message is handled by worker, by sending it a ping
//Normally it would respond with a pong, but since it's suspended nothing will happen.
//By counting down the latch slowResumer will continue in the supervisorstrategy and will return Resume.
//Check that all children, and especially worker is resumed. It should receive the ping and respond with a pong
//Create:
// failresumer
//    |
// failingChild
//    | (sometimes)
// workingChild
//Send failresumer some meatballs. This message will be forwarded to failingChild
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\SupervisorStrategySpecs.cs
//-----------------------------------------------------------------------
// <copyright file="SupervisorStrategySpecs.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\SystemGuardianTests.cs
//-----------------------------------------------------------------------
// <copyright file="SystemGuardianTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\Cancellation\AlreadyCancelledCancelableTests.cs
//-----------------------------------------------------------------------
// <copyright file="AlreadyCancelledCancelableTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\Cancellation\CancelableTests.cs
//-----------------------------------------------------------------------
// <copyright file="CancelableTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//HACK: Using the fact that when Cancel is called, callbacks are executed synchronously
//First callback should prevent the second one from being called
//HACK: Using the fact that when Cancel is called, callbacks are executed synchronously
//First callback should prevent the second one from being called
//HACK: Using the fact that when Cancel is called, callbacks are executed synchronously
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\Scheduler\TaskBasedScheduler_ActionScheduler_Cancellation_Tests.cs
//-----------------------------------------------------------------------
// <copyright file="DedicatedThreadScheduler_ActionScheduler_Cancellation_Tests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
// Prepare, set up actions to be fired
//Validate that no messages were sent
// Prepare, set up actions to be fired
//Validate that no messages were sent
// Prepare, set up actions to be fired
//Validate that no messages were sent
// Prepare, set up actions to be fired
//Validate that no messages were sent
// Prepare, set up actions to be fired
//Validate that no more messages were sent
// Prepare, set up actions to be fired
//Expect one message
//Validate that no messages were sent
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\Scheduler\TaskBasedScheduler_ActionScheduler_Schedule_Tests.cs
//-----------------------------------------------------------------------
// <copyright file="DedicatedThreadScheduler_ActionScheduler_Schedule_Tests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
// Prepare, set up actions to be fired
//Receive three messages, and store the time when these were received
//after three messages stop the actor and send the times to TestActor
//Expect to get a list from receiver after it has received three messages
// Prepare, set up actions to be fired
//Just check that we receives more than one message
// Prepare, set up actions to be fired
//Just check that we receives more than one message
// Prepare, set up actions to be fired
// Prepare, set up actions to be fired
//Perform the test
//Allow any scheduled actions to be fired. 
//We expect only one of the scheduled actions to actually fire
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\Scheduler\TaskBasedScheduler_TellScheduler_Cancellation_Tests.cs
//-----------------------------------------------------------------------
// <copyright file="DedicatedThreadScheduler_TellScheduler_Cancellation_Tests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
// Prepare, set up actions to be fired
//Validate that no messages were sent
// Prepare, set up actions to be fired
//Validate that no messages were sent
// Prepare, set up actions to be fired
//Validate that no messages were sent
// Prepare, set up actions to be fired
//Validate that no messages were sent
// Prepare, set up actions to be fired
//Validate that no more messages were sent
// Prepare, set up actions to be fired
//Expect one message
//Validate that no messages were sent
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\Scheduler\TaskBasedScheduler_TellScheduler_Schedule_Tests.cs
//-----------------------------------------------------------------------
// <copyright file="DedicatedThreadScheduler_TellScheduler_Schedule_Tests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
//  [Theory(Skip = "Tests that messages are sent with the specified interval, however due to inaccuracy of Task.Delay this often fails. Run this manually if you've made changes to DedicatedThreadScheduler")]
// Prepare, set up actions to be fired
//Receive three messages, and store the time when these were received
//after three messages stop the actor and send the times to TestActor
//Expect to get a list from receiver after it has received three messages
//Prepare, set up actions to be fired
//Just check that we receives more than one message
// Prepare, set up messages to be sent
// Prepare, set up actions to be fired
//Perform the test
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\Scheduler\TaskBasedScheduler_Verify_TimeProvider.cs
//-----------------------------------------------------------------------
// <copyright file="DedicatedThreadScheduler_Verify_TimeProvider.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Actor\Stash\ActorWithStashSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ActorWithStashSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//will be stashed
//forces UnstashAll
//This message will be stashed by stasher
//When stasher is stopped it should unstash message during poststop to mailbox
//the mailbox will be emptied and the messages will be sent to deadletters
//Send the props to supervisor, which will create an actor and return the ActorRef
//send a message that will be stashed
//this will crash the slave.
//During preRestart restartLatch is opened
//After that the cell will unstash "stashme", it should be received by the slave and open hasMsgLatch
//Send the props to supervisor, which will create an actor and return the ActorRef
//send messages that will be stashed
//this will crash the slave.
//send a message that should not be stashed
//During preRestart restartLatch is opened
//After that the cell will clear the stash
//So when the cell tries to unstash, it will not unstash messages. If it would TestActor
//would receive all stashme messages instead of "this should bounce back"
//Do nothing
//Do nothing
// when restartLatch is not yet open, stash all messages != "crash"                
// when restartLatch is open, must receive the unstashed message
// when restartLatch is not yet open, stash all messages != "crash"                
// when restartLatch is open we send all messages back
//Stash the Terminated message
//Unstash the Terminated message
// NOTE:
// here we should test for no exception thrown..
// but I don't know how....
// If parameter is null return false.
// If parameter cannot be cast to Point return false.
// Return true if the fields match:
// If parameter is null return false:
// Return true if the fields match:
// If both are null, or both are same instance, return true.
// If one is null, but not both, return false.
// Return true if the fields match:
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Configuration\ConfigurationSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ConfigurationSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Configuration\HoconTests.cs
//-----------------------------------------------------------------------
// <copyright file="HoconTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Added tests to conform to the HOCON spec https://github.com/typesafehub/config/blob/master/HOCON.md
//hocon = @"a= [ 1, 2, 3 ]";
//Assert.True(new[] { 1, 2, 3 }.SequenceEqual(ConfigurationFactory.ParseString(hocon).GetIntList("a")));
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Dispatch\AsyncAwaitSpec.cs
//-----------------------------------------------------------------------
// <copyright file="AsyncAwaitSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//we expect that state should not have changed due to an incoming message
//not async, blocking wait
//since this actor is blocking in the handler below, it will never
//be able to execute this section
//ask and block
//this is also safe, all tasks complete in the actor context
// Throw an exception in the ActorTaskScheduler
//LogicalContext is lost?!?
//Sleep to make sure the task is not completed when ContinueWith is called
// ContinueWith will schedule with the implicit ActorTaskScheduler
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Dispatch\DispatchersSpec.cs
//-----------------------------------------------------------------------
// <copyright file="DispatchersSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//dispatcher.ShouldBeSame(Sys.Dispatcher); //todo: add ActorSystem.Dispatcher?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Dispatch\MailboxesSpec.cs
//-----------------------------------------------------------------------
// <copyright file="MailboxesSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//pause mailbox until all messages have been told
//resume mailbox, this prevents the mailbox from running to early
//priority mailbox is best effort only
//pause mailbox until all messages have been told
// creates 50 messages with values spanning from Int32.MinValue to Int32.MaxValue
// tell the actor in reverse order
//resume mailbox, this prevents the mailbox from running to early
// expect the messages in the correct order
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Dispatch\XUnitAsyncTestsSanityCheck.cs
//-----------------------------------------------------------------------
// <copyright file="XUnitAsyncTestsSanityCheck.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Event\EventBusSpec.cs
//-----------------------------------------------------------------------
// <copyright file="EventBusSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// I used <see cref="TestActorEventBus"/> for both specs, since ActorEventBus and EventBus 
/// are even to each other at the time, spec is written.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Event\EventStreamSpec.cs
//-----------------------------------------------------------------------
// <copyright file="EventStreamSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//oh dear.. we should go for F# for this...
//should not publish
//should publish
//should publish
//"manage sub-channels using classes and traits (update on unsubscribe)"
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\IO\SimpleDnsCacheSpec.cs
//-----------------------------------------------------------------------
// <copyright file="SimpleDnsCacheSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\IO\TcpConnectionSpec.cs
//-----------------------------------------------------------------------
// <copyright file="TcpConnectionSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TODO: Implement
// JVM Akka always excpect CONNECT, which seems incorrect
// We will not receive a CONNECT if Socket.BeginConnect completed synchronously
// We therfore just igenore the CONNECT if it is in the queue
//What JVM Akka does:  InterestCallReceiver.ExpectMsg((int)SocketAsyncOperation.Connect); 
// Only send ChannelConnectable if we did not complete synchronously 
//TODO: assert message
//TODO: Buffer.limit
//Assert.Equal(8, buffer.Limit); 
//TODO: Buffer.limit
//Assert.Equal(buffer, buffer.Limit());
//TODO: Fix bug when empty write is used
//Tcp.Write.Create(ByteString.Empty, new Ack(3)),
//writer.ExpectMsg(new Ack(3));
//TODO: SmallRcvBuffer
// TODO: declare ConnectionResetByPeerMessage
//x.ClientSideChannel.Socket.Poll(3000, SelectMode.SelectWrite).ShouldBe(true);  // In .NET we cant select on 'Connectable' (I think)
//TODO: Investigate why this is not reuired in JVM Akka
//protected readonly SocketAsyncEventArgsPool pool = new SocketAsyncEventArgsPool(100, SocketChannel.Select);
// JVM Akka always excpect CONNECT, which seems incorrect
// We will not receive a CONNECT if Socket.BeginConnect completed synchronously
// We therfore just igenore the CONNECT if it is in the queue
//What JVM Akka does:  InterestCallReceiver.ExpectMsg((int)SocketAsyncOperation.Connect); 
// Only send ChannelConnectable if we did not complete synchronously 
//TODO: compare full endpoint, not only port
//TODO: Impliment
// TODO: Do we need to handle expection like JVM?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\IO\TcpIntegrationSpec.cs
//-----------------------------------------------------------------------
// <copyright file="TcpIntegrationSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// a "random" endpoint hopefully unavailable since it's in the test-net IP range
// expecting CommandFailed or no reply (within timeout)
//TODO: check endpoint
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\IO\TcpListenerSpec.cs
//-----------------------------------------------------------------------
// <copyright file="TcpListenerSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// since the batch-accept-limit is 2 we must only receive 2 accepted connections
// and pick up the last remaining connection on the next ChannelAcceptable
// No more accepts are allowed now
// There is still one token remaining, accepting
// Tokens are depleted now
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\IO\UdpConnectedIntegrationSpec.cs
//-----------------------------------------------------------------------
// <copyright file="UdpConnectedIntegrationSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\IO\UdpIntegrationSpec.cs
//-----------------------------------------------------------------------
// <copyright file="UdpIntegrationSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\MatchHandler\CachedMatchCompilerTests.cs
//-----------------------------------------------------------------------
// <copyright file="CachedMatchCompilerTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\MatchHandler\MatchBuilderSignatureTests.cs
//-----------------------------------------------------------------------
// <copyright file="MatchBuilderSignatureTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\MatchHandler\MatchExpressionBuilder_BuildLambdaExpression_Tests.cs
//-----------------------------------------------------------------------
// <copyright file="MatchExpressionBuilder_BuildLambdaExpression_Tests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Handle a string with one action
//Build the expression
//Verify returned arguments
//Compile the expression and test it
//Handle a string with one action
//Build the expression
//Verify returned arguments
//Compile the expression and test it
//Handle a string with one action
//Build the expression
//Verify returned arguments
//Compile the expression and test it
//Handle a string with one action
//Build the expression
//Verify returned arguments
//Compile the expression and test it
//Handle a string with one action
//Handle an int with one action
//Build the expression
//Verify returned arguments
//Compile the expression and test it
//Handle a string with one action
//Handle an int with one action
//Build the expression
//Verify returned arguments
//Compile the expression and test it
//Handle a string with one action
//Handle an int with one action
//Build the expression
//Verify returned arguments
//Compile the expression and test it
//15 is the maximum number of arguments without having to put actions/funcs/predicates in an object array.
//This comes from BuildLambdaExpression builds a Func, and Funcs may only have 16 input args: Func<T1,...,T16,TResult>
//T1-argument is reserved for the obligatory value argument, which leaves us with 15 arguments to be used for the
//actions/funcs/predicates
//Handle a string with one action
//Handle an int with one action
//Build the expression
//Verify returned arguments
//Last argument should not be an object[]
//Compile the expression and test it
//15 is the maximum number of arguments without having to put actions/funcs/predicates in an object array.
//This comes from BuildLambdaExpression builds a Func, and Funcs may only have 16 input args: Func<T1,...,T16,TResult>
//T1-argument is reserved for the obligatory value argument, which leaves us with 15 arguments to be used for the
//actions/funcs/predicates. If we use more than that T16-argument will be an object[] containing the rest
//Handle a string with one action
//Handle an int with one action
//Build the expression
//Verify returned arguments
//Compile the expression and test it
//Handle a string with one action
//Build the expression
//Verify returned arguments
//Compile the expression and test it
//Handle a string with one action
//Build the expression
//Verify returned arguments
//Compile the expression and test it
//Handle a string with one action
//Build the expression
//Verify returned arguments
//Compile the expression and test it
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\MatchHandler\MatchExpressionBuilder_CreateArgumentValuesArray_Tests.cs
//-----------------------------------------------------------------------
// <copyright file="MatchExpressionBuilder_CreateArgumentValuesArray_Tests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once InconsistentNaming
//Last value should be the extraArgs object[]
// Extra args should contain 2 values (argument 14 and 15)
//Last value should be the extraArgs object[]
// Extra args should contain 16 values (argument 14 to 29)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\MatchHandler\MatchHandlerBuilderTests.cs
//-----------------------------------------------------------------------
// <copyright file="MatchHandlerBuilderTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//As we have added a handler that matches everything, adding another handler is pointless, so
//the builder should throw an exception.
//As we have added a handler that matches everything, adding another handler is pointless, so
//the builder should throw an exception.
//Although we have added a handler that matches objects, the predicate makes it uncertain if all objects matches
//so adding a handler is ok.
//As we have built, no more handlers should be accepted
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\MatchHandler\PartialActionBuilderTests.cs
//-----------------------------------------------------------------------
// <copyright file="PartialActionBuilderTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Pattern\BackoffSupervisorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="BackoffSupervisorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// new instance
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Pattern\CircuitBreakerSpec.cs
//-----------------------------------------------------------------------
// <copyright file="CircuitBreakerSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once UnusedVariable
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Routing\BroadcastSpec.cs
//-----------------------------------------------------------------------
// <copyright file="BroadcastSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Routing\ConsistentHashingRouterSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ConsistentHashingRouterSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//create pool router with two routees
//kill off the actor
//might take some time for the deathwatch to get processed
//verify that a different actor now owns this hash range
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Routing\ListenerSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ListenerSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//arrange
//act
//assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Routing\RandomSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RandomSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Routing\ResizerSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ResizerSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Used to test resizers for <see cref="Pool"/> routers.
/// 
/// Based upon https://github.com/akka/akka/blob/master/akka-actor-tests/src/test/scala/akka/routing/ResizerSpec.scala
/// </summary>
// ReSharper disable once RedundantArgumentDefaultValue (exposing the values we're testing makes this test understandable.)
// ReSharper disable RedundantArgumentDefaultValue (exposing the values we're testing makes this test understandable.)
// ReSharper restore RedundantArgumentDefaultValue
//messagesPerResize is 10 so there is no risk of additional resize
//messagesPerResize is 10 so there is no risk of additional resize
//first message should create the minimum number of routees
//sending too quickly will result in skipped resize due to many resizeInProgress conflicts
// 2 more should go through without triggering more
// a whole bunch should max it out
//done
// put some pressure on the router
// let it cool down
//trigger resize
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Routing\RoundRobinSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RoundRobinSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Routing\RoutingSpec.cs
//-----------------------------------------------------------------------
// <copyright file="RoutingSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Await.ready(latch, remainingOrDefault); //TODO: what is remainingOrDefault
// expect no Terminated
//            val routerProps = Props[TestActor].withRouter(
//  ScatterGatherFirstCompletedRouter(
//    routees = names map { context.actorOf(Props(new TestActor), _) },
//    within = 5 seconds))
//1 to actors foreach { i ⇒ context.actorOf(routerProps, id + i).tell(CurrentRoutees, testActor) }
/*
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Routing\ScatterGatherFirstCompletedSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ScatterGatherFirstCompletedSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/*val routedActor = system.actorOf(Props[TestActor].withRouter(
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Routing\SmallestMailboxSpec.cs
//-----------------------------------------------------------------------
// <copyright file="SmallestMailboxSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Routing\TailChoppingSpec.cs
//-----------------------------------------------------------------------
// <copyright file="TailChoppingSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Serialization\SerializationSpec.cs
//-----------------------------------------------------------------------
// <copyright file="SerializationSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//     Assert.True(message.Equals(deserialized));
//sys@localhost:9000/user/actor";
//sys@localhost:9000/user/actor";
//TODO: find out why this fails on build server
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\TestUtils\Comparable.cs
//-----------------------------------------------------------------------
// <copyright file="Comparable.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\TestUtils\PropsWithName.cs
//-----------------------------------------------------------------------
// <copyright file="PropsWithName.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\TestUtils\Supervisor.cs
//-----------------------------------------------------------------------
// <copyright file="Supervisor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/**
// need to override the default of stopping all children upon restart, tests rely on keeping them around
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Util\ByteStringSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ByteStringSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// TODO: Should we use the FsCheck.XUnit integration when they upgrade to xUnit 2
/// </summary>
// TODO: Align with JVM Akka Generator
// TODO: What should we do with null string?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Util\CollectionExtensionsSpec.cs
//-----------------------------------------------------------------------
// <copyright file="CollectionExtensionsSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Util\ContinuousEnumeratorSpec.cs
//-----------------------------------------------------------------------
// <copyright file="ContinuousEnumeratorSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Tests to ensure that <see cref="ContinuousEnumerator{T}"/> works as expected.
/// </summary>
//move the iterator around the array length
//move the iterator, twice past the array length for good measure
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Util\PatternSpec.cs
//-----------------------------------------------------------------------
// <copyright file="PatternSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Util\SwitchTests.cs
//-----------------------------------------------------------------------
// <copyright file="SwitchTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Util\TypeExtensionsTests.cs
//-----------------------------------------------------------------------
// <copyright file="TypeExtensionsTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Util\Internal\InterlockedSpinTests.cs
//-----------------------------------------------------------------------
// <copyright file="InterlockedSpinTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//This is what we want to test:
//  sharedVariable = ""
//  Fork to two threads:
//  THREAD 1                               THREAD 2
//                                         Call InterlockedSpin.Swap
//                                             It calls updateWhenSignaled(0)
//                                                Signal thread 1 it can do it's work, and wait for it
//  set sharedVariable = "-"
//  signal thread 2 it can continue
//  and wait for it.
//                                                 return "updated" from updateWhenSignaled
//                                             Interlocked.CompareExchange will update sharedVariable to "updated" if it still is ""
//                                               which it isn't so it will fail. It will then loop.
//                                             Call updateWhenSignaled("-")
//                                                 return "updated" from updateWhenSignaled
//                                             Interlocked.CompareExchange will update sharedVariable to "updated" if it still is "-"
//                                               which it is, and we return.
//  Test that sharedVariable="updated"												 
//  Test that updateWhenSignaled was called twice
//Signal THREAD 1 to update sharedVariable
//Wait for THREAD 1
//Wait for THREAD 2 to enter updateWhenSignaled
//Signal THREAD 1 it can continue in updateWhenSignaled
//Wait for THREAD 1
//This is what we want to test:
//  sharedVariable = ""
//  Fork to two threads:
//  THREAD 1                               THREAD 2
//                                         Call InterlockedSpin.Swap
//                                             It calls updateWhenSignaled(0)
//                                                Signal thread 1 it can do it's work, and wait for it
//  set sharedVariable = "-"
//  signal thread 2 it can continue
//  and wait for it.
//                                                 return "updated" from updateWhenSignaled
//                                             Interlocked.CompareExchange will update sharedVariable to "updated" if it still is ""
//                                               which it isn't so it will fail. It will then loop.
//                                             Call updateWhenSignaled("-")
//                                                 return "updated" from updateWhenSignaled
//                                             Interlocked.CompareExchange will update sharedVariable to "updated" if it still is "-"
//                                               which it is, and we return.
//  Test that sharedVariable="updated"												 
//  Test that updateWhenSignaled was called twice
//Signal THREAD 1 to update sharedVariable
//Wait for THREAD 1
//Wait for THREAD 2 to enter updateWhenSignaled
//Signal THREAD 1 it can continue in updateWhenSignaled
//Wait for THREAD 1
//This is what we want to test:
//  sharedVariable = ""
//  Fork to two threads:
//  THREAD 1                               THREAD 2
//                                         Call InterlockedSpin.Swap
//                                             It calls updateWhenSignaled(0)
//                                                Signal thread 1 it can do it's work, and wait for it
//  set sharedVariable = "-"
//  signal thread 2 it can continue
//  and wait for it.
//                                                 Since value=="" we do not want to break
//                                                 return <false,"updated","update"> from updateWhenSignaled
//                                             Interlocked.CompareExchange will update sharedVariable to "updated" if it still is ""
//                                               which it isn't so it will fail. It will then loop.
//                                             Call updateWhenSignaled("-")
//                                                 Since value!="" we want to break
//                                                 return <true,"updated","break"> from updateWhenSignaled
//                                             Since first item in tuple==true, we break and return item 3: "break"
//  Test that sharedVariable="-"												 
//  Test that updateWhenSignaled was called twice
//  Test that return from updateWhenSignaled is "break"
//Signal to start-thread that we have entered the update method (it will chang
//Wait to be signalled
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Util\Internal\Collections\ImmutableAvlTreeMapTests.cs
//-----------------------------------------------------------------------
// <copyright file="ImmutableAvlTreeMapTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Util\Internal\Collections\ImmutableAvlTreeTests.cs
//-----------------------------------------------------------------------
// <copyright file="ImmutableAvlTreeTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Should not fail:
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests\Util\Internal\Collections\IteratorTests.cs
//-----------------------------------------------------------------------
// <copyright file="IteratorTests.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Performance\Actor\ActorMemoryFootprintSpec.cs
/// <summary>
/// Tests the default memory footprint of an Akka.NET actor
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Performance\Actor\ActorPathSpec.cs
/// <summary>
///     Performance specifications for <see cref="ActorPath" />
/// </summary>
//million op / second
//Sys/user/foo");
//Sys@localhost:9091/user/foo");
//Sys/user/foo", out target);
//Sys@localhost:9091/user/foo", out target);
//Sys/user/foo", out target);
//Sys@locahost:9101/user/foo", out target);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Performance\Actor\ActorThroughputSpecBase.cs
/// <summary>
///     Base class used to test the performance of different <see cref="ActorBase" /> implementations
/// </summary>
//wait up to a second
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Performance\Actor\AddressSpec.cs
/// <summary>
/// Tests for verifying the throughput and memory of various <see cref="Address"/>-related
/// operations.
/// </summary>
//million op / second
//sys@localhost:9091");
//sys");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Performance\Actor\MinimalActorRefThroughputSpec.cs
/// <summary>
/// Not thread-safe, but called by a single thread in the benchmark
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Performance\Actor\ReceiveActorThroughputSpec.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Performance\Actor\UntypedActorThroughputSpec.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Performance\Dispatch\MailboxMemoryFootprintSpec.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Performance\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Shared.Internals\ActorDslExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="ActorDslExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Shared.Internals\AkkaSpec.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaSpec.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once CheckNamespace
//AkkaSpec is not part of TestKit
//TODO: Check next line. 
//TODO: Check if this really is needed:
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Shared.Internals\AkkaSpecExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="AkkaSpecExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once CheckNamespace
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Shared.Internals\AskExtensions.cs
//-----------------------------------------------------------------------
// <copyright file="AskExtensions.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once CheckNamespace
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Shared.Internals\TestReceiveActor.cs
//-----------------------------------------------------------------------
// <copyright file="TestReceiveActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once CheckNamespace
/// <summary>
/// Just like <see cref="ReceiveActor"/>. Adds a Receive-overload that allows you to write code like:
/// <code>Receive("the message", m => ... );</code>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Shared.Internals\Helpers\XAssert.cs
//-----------------------------------------------------------------------
// <copyright file="XAssert.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// ReSharper disable once CheckNamespace
/// <summary>
/// Fails the test with the specified reason.
/// </summary>
/// <summary>
/// Asserts that both arguments are the same reference.
/// </summary>
//need to flatten AggregateExceptions
//We'll never reach this line, since calling Fail will throw an exception.
/// <summary>
/// Assert passes if two sequences are equal, regardless of the ordering of the items.
/// 
/// Equivalent of http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.collectionassert.areequivalent.aspx
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\Akka.Tests.Shared.Internals\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\core\protobuf\TestConductorProtocol.cs
//-----------------------------------------------------------------------
// <copyright file="TestConductorProtocol.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Chat\ChatClient\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//MyServer@localhost:8081/user/ChatServer");
//MyServer@localhost:8081/user/ChatServer");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Chat\ChatClient\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Chat\ChatMessages\Messages.cs
//-----------------------------------------------------------------------
// <copyright file="Messages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Chat\ChatMessages\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Chat\ChatServer\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//  Console.WriteLine("User {0} said {1}",message.Username , message.Text);
//   Console.WriteLine("User {0} has connected", message.Username);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Chat\ChatServer\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterSharding\ClusterSharding.Node\Printer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterSharding\ClusterSharding.Node\Program.cs
// you may need to remove SQLite database file from bin/Debug or bin/Release in case when unexpected crash happened
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterSharding\ClusterSharding.Node\AutomaticJoin\AutomaticCluster.cs
/// <summary>
/// Extension for Akka.NET cluster to establish cluster automatically through shared sqlite store.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterSharding\ClusterSharding.Node\AutomaticJoin\DBHelper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterSharding\ClusterSharding.Node\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterTools\ClusterToolsExample.Node\Program.cs
//RunClusterSingletonClient(system);
//RunClusterClient(system);
/// <summary>
/// Creates a proxy to communicate with cluster singleton initialized by the seed.
/// </summary>
/// <summary>
/// Creates an <see cref="EchoReceiver"/> actor which subscribes to the distributed pub/sub topic.
/// This topic is filled with messages from the cluster seed job.
/// </summary>
/// <summary>
/// Creates a cluster client, that allows to connect to cluster even thou current actor system is not part of it.
/// </summary>
//NOTE: to properly run cluster client set up actor ref provider for nodes on `provider = "Akka.Remote.RemoteActorRefProvider, Akka.Remote"`
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterTools\ClusterToolsExample.Node\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterTools\ClusterToolsExample.Seed\Program.cs
//RunClusterSingletonSeed(system);
//RunClusterClientSeed(system);
/// <summary>
/// Initializes cluster singleton of the <see cref="WorkerManager"/> actor.
/// </summary>
/// <param name="system"></param>
/// <summary>
/// Starts a job, which publishes <see cref="Echo"/> message to distributed cluster pub sub in 5 sec periods.
/// </summary>
/// <summary>
/// Starts a job, which establishes cluster client receptionist for target <see cref="EchoReceiver"/> actor,
/// making it visible from outside of the cluster.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterTools\ClusterToolsExample.Seed\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterTools\ClusterToolsExample.Shared\Echo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterTools\ClusterToolsExample.Shared\Messages.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterTools\ClusterToolsExample.Shared\Worker.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterTools\ClusterToolsExample.Shared\WorkerManager.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterTools\ClusterToolsExample.Shared\WorkLoadCounter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\ClusterTools\ClusterToolsExample.Shared\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Roles\Samples.Cluster.Transformation\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//starting 2 frontend nodes and 3 backend nodes
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Roles\Samples.Cluster.Transformation\TransformationBackend.cs
//-----------------------------------------------------------------------
// <copyright file="TransformationBackend.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Need to subscribe to cluster changes
/// </summary>
/// <summary>
/// Re-subscribe on restart
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Roles\Samples.Cluster.Transformation\TransformationFrontend.cs
//-----------------------------------------------------------------------
// <copyright file="TransformationFrontend.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Roles\Samples.Cluster.Transformation\TransformationMessages.cs
//-----------------------------------------------------------------------
// <copyright file="TransformationMessages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Roles\Samples.Cluster.Transformation\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Routing\Samples.Cluster.ConsistentHashRouting\BackendActor.cs
//-----------------------------------------------------------------------
// <copyright file="BackendActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Routing\Samples.Cluster.ConsistentHashRouting\FrontendActor.cs
//-----------------------------------------------------------------------
// <copyright file="FrontendActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Need to subscribe to cluster changes
/// </summary>
/// <summary>
/// Re-subscribe on restart
/// </summary>
//ready to begin routing messages to back-end
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Routing\Samples.Cluster.ConsistentHashRouting\Messages.cs
//-----------------------------------------------------------------------
// <copyright file="Messages.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Routing\Samples.Cluster.ConsistentHashRouting\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Routing\Samples.Cluster.ConsistentHashRouting\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Samples.Cluster.Simple\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Override the configuration of the port
//create an Akka system
//create an actor that handles cluster domain events
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Samples.Cluster.Simple\SimpleClusterListener.cs
//-----------------------------------------------------------------------
// <copyright file="SimpleClusterListener.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Need to subscribe to cluster changes
/// </summary>
/// <summary>
/// Re-subscribe on restart
/// </summary>
//IGNORE                
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Samples.Cluster.Simple\SimpleClusterListener2.cs
//-----------------------------------------------------------------------
// <copyright file="SimpleClusterListener2.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Need to subscribe to cluster changes
/// </summary>
/// <summary>
/// Re-subscribe on restart
/// </summary>
//IGNORE                
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Cluster\Samples.Cluster.Simple\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\FaultTolerance\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// start the work and listen on progress
// note that the listener is used as sender of the tell,
// i.e. it will receive replies from the worker
// Listens on progress from the worker and shuts down the system when enough work has been done.
// If we don't get any progress within 15 seconds then the service is unavailable
// No progress within 15 seconds, ServiceUnavailable
// Worker performs some work when it receives the Start message. It will
// continuously notify the sender of the Start message of current Progress.
// The Worker supervise the CounterService.
// The sender of the initial Start message will continuously be notified about progress
// Stop the CounterService child if it throws ServiceUnavailable
// Send current progress to the initial sender
// Adds the value received in Increment message to a persistent counter.
// Replies with CurrentCount when it is asked for CurrentCount. CounterService
// supervise Storage and Counter.
// Restart the storage child when StorageException is thrown.
// After 3 restarts within 5 seconds it will be stopped.
// The child storage is restarted in case of failure, but after 3 restarts,
// and still failing it will be stopped. Better to back-off than
// continuously failing. When it has been stopped we will schedule a
// Reconnect after a delay. Watch the child so we receive Terminated message
// when it has been terminated.
// Tell the counter, if any, to use the new storage
// We need the initial value to be able to operate
// Reply from Storage of the initial value, now we can create the Counter
// Tell the counter to use current storage
// and send the buffered backlog to the counter
// After 3 restarts the storage child is stopped.
// We receive Terminated because we watch the child, see InitStorage.
// Tell the counter that there is no storage for the moment
// Try to re-establish storage after while
// Re-establish storage after the scheduled delay
// We need the initial value from storage before we can start delegate to
// the counter. Before that we place the messages in a backlog, to be sent
// to the counter when it is initialized.
// The in memory count variable that will send current value to the Storage,
// if there is any storage available at the moment.
// Delegate dangerous work, to protect our valuable state.
// We can continue without storage.
// Saves key/value pairs to persistent storage when receiving Store message.
// Replies with current value when receiving Get message. Will throw
// StorageException if the underlying data store is out of order.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\FaultTolerance\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\HelloWorld\HelloAkka\Greet.cs
//-----------------------------------------------------------------------
// <copyright file="Greet.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Immutable message type that actor will respond to
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\HelloWorld\HelloAkka\GreetingActor.cs
//-----------------------------------------------------------------------
// <copyright file="GreetingActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// The actor class
/// </summary>
// Tell the actor to respond to the Greet message
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\HelloWorld\HelloAkka\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// create a new actor system (a container for actors)
// create actor and get a reference to it.
// this will be an "ActorRef", which is not a 
// reference to the actual actor instance
// but rather a client or proxy to it
// send a message to the actor
// prevent the application from exiting before message is handled
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\HelloWorld\HelloAkka\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\PersistenceExample\AtLeastOnceDeliveryExampleActor.cs
//-----------------------------------------------------------------------
// <copyright file="AtLeastOnceDeliveryExampleActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// AtLeastOnceDelivery will repeat sending messages, unless confirmed by deliveryId
/// 
/// By default, in-memory Journal is used, so this won't survive system restarts. 
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\PersistenceExample\ExamplePersistentActor.cs
//-----------------------------------------------------------------------
// <copyright file="ExamplePersistentActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\PersistenceExample\ExamplePersistentFailingActor.cs
//-----------------------------------------------------------------------
// <copyright file="ExamplePersistentFailingActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\PersistenceExample\ExampleView.cs
//-----------------------------------------------------------------------
// <copyright file="ExampleView.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\PersistenceExample\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//SqlServerPersistence.Init(system);
//FailingActorExample(system);
//SnapshotedActor(system);
//ViewExample(system);
//making sure delivery stops before send other commands
// send two messages (a, b) and persist them
// make a snapshot: a, b will be stored in durable memory
// send next two messages - those will be cleared, since MemoryJournal is not "persistent"
// print internal actor's state
// result after first run should be like:
// Current actor's state: d, c, b, a
// after second run:
// Offered state (from snapshot): b, a      - taken from the snapshot
// Current actor's state: d, c, b, a, b, a  - 2 last messages loaded from the snapshot, rest send in this run
// after third run:
// Offered state (from snapshot): b, a, b, a        - taken from the snapshot
// Current actor's state: d, c, b, a, b, a, b, a    - 4 last messages loaded from the snapshot, rest send in this run
// etc...
// restart and recovery
// Will print in a first run (i.e. with empty journal):
// Received: a
// Received: a, b
// Received: a, b, c
// create a persistent actor, using LocalSnapshotStore and MemoryJournal
// all commands are stacked in internal actor's state as a list
// save current actor state using LocalSnapshotStore (it will be serialized and stored inside file on example bin/snapshots folder)
// add one more message, this one is not snapshoted and won't be persisted (because of MemoryJournal characteristics)
// print current actor state
// on first run displayed state should be: 
// buzz-3, bar-2, baz-1, foo-0 
// (numbers denotes current actor's sequence numbers for each stored event)
// on the second run: 
// buzz-6, bar-5, baz-4, foo-3, bar-2, baz-1, foo-0
// (sequence numbers are continuously increasing taken from last snapshot, 
// also buzz-3 event isn't present since it's has been called after snapshot request,
// and MemoryJournal will destroy stored events on program stop)
// on next run's etc...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\PersistenceExample\SnapshotedExampleActor.cs
//-----------------------------------------------------------------------
// <copyright file="SnapshotedExampleActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\PersistenceExample\ViewExampleActor.cs
//-----------------------------------------------------------------------
// <copyright file="ViewExampleActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\PersistenceExample\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\RemoteDeploy\Shared\SomeActor.cs
//-----------------------------------------------------------------------
// <copyright file="SomeActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\RemoteDeploy\Shared\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\RemoteDeploy\System1\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//system2@localhost:8080""
//create a local group router (see config)
//create a remote deployed actor
//these messages should reach the workers via the routed local ref
//this should reach the remote deployed ref
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\RemoteDeploy\System1\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\RemoteDeploy\System2\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//testing connectivity
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\RemoteDeploy\System2\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Routing\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//MySystem/user/Worker1"" #testing full path
//or: var actor = system.ActorOf(new Props().WithRouter(new RoundRobinGroup("user/Worker1", "user/Worker2", "user/Worker3", "user/Worker4")));
//or: var actor = system.ActorOf(new Props().WithRouter(new RoundRobinGroup("user/Worker1", "user/Worker2", "user/Worker3", "user/Worker4")));
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Routing\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\MainForm.cs
//-----------------------------------------------------------------------
// <copyright file="MainForm.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//dispatch on GUI thread
//new DispatcherActor(DataAvailable, StatusChange)
//Do nothing
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\MainForm.Designer.cs
//-----------------------------------------------------------------------
// <copyright file="MainForm.Designer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Required designer variable.
/// </summary>
/// <summary>
/// Clean up any resources being used.
/// </summary>
/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
/// <summary>
/// Required method for Designer support - do not modify
/// the contents of this method with the code editor.
/// </summary>
// 
// txtSymbols
// 
// 
// label1
// 
// 
// btn_Go
// 
// 
// lstDownloadedStocks
// 
// 
// label2
// 
// 
// label3
// 
// 
// lblCurrentStock
// 
// 
// lblPrice
// 
// 
// txtQuote
// 
// 
// lblNews
// 
// 
// lstNews
// 
// 
// activityStatus
// 
// 
// tsStatusLabel
// 
// 
// MainForm
// 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\Actors\DispatcherActor.cs
//-----------------------------------------------------------------------
// <copyright file="DispatcherActor.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Root actor used by the application
/// </summary>
//tell the sender to shut down
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\Actors\TickerActors.cs
//-----------------------------------------------------------------------
// <copyright file="TickerActors.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//Actor responsible for fetching a stock
//these will get initialized during create/recreate
//Finished processing! send the parent the full data payload
//Finished processing! send the parent the full data payload
//request failed for whatever reason, 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\Actors\Messages\CompletedHeadlinesDownload.cs
//-----------------------------------------------------------------------
// <copyright file="CompletedHeadlinesDownload.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\Actors\Messages\CompletedStockQuoteDownload.cs
//-----------------------------------------------------------------------
// <copyright file="CompletedStockQuoteDownload.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\Actors\Messages\DownloadSymbolData.cs
//-----------------------------------------------------------------------
// <copyright file="DownloadSymbolData.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\Actors\Messages\Failure.cs
//-----------------------------------------------------------------------
// <copyright file="Failure.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\Actors\Messages\FullStockData.cs
//-----------------------------------------------------------------------
// <copyright file="FullStockData.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\Properties\Resources.Designer.cs
//-----------------------------------------------------------------------
// <copyright file="Resources.Designer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
/// <summary>
///   Overrides the current thread's CurrentUICulture property for all
///   resource lookups using this strongly typed resource class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\Properties\Settings.Designer.cs
//-----------------------------------------------------------------------
// <copyright file="Settings.Designer.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\YahooFinance\StockQuoteModels.cs
//-----------------------------------------------------------------------
// <copyright file="StockQuoteModels.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/// <summary>
/// Generated from http://json2csharp.com/#
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\Stocks\SymbolLookup\YahooFinance\StockUriHelper.cs
//-----------------------------------------------------------------------
// <copyright file="StockUriHelper.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//query.yahooapis.com/v1/public/yql?q=" +
//datatables.org/alltableswithkeys&format=json";
//finance.yahoo.com/rss/headline?s={0}";
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\TcpEchoService.Server\Actors.cs
//-----------------------------------------------------------------------
// <copyright file="Actors.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// To behave as TCP listener, actor should be able to handle Tcp.Connected messages
// we want to know when the connection dies (without using Tcp.ConnectionClosed)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\TcpEchoService.Server\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\TcpEchoService.Server\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\TimeServer\TimeClient\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
//TimeServer@localhost:9391/user/time");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\TimeServer\TimeClient\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\TimeServer\TimeServer\Program.cs
//-----------------------------------------------------------------------
// <copyright file="Program.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\akka.net\src\examples\TimeServer\TimeServer\Properties\AssemblyInfo.cs
//-----------------------------------------------------------------------
// <copyright file="AssemblyInfo.cs" company="Akka.NET Project">
//     Copyright (C) 2009-2015 Typesafe Inc. <http://www.typesafe.com>
//     Copyright (C) 2013-2015 Akka.NET project <https://github.com/akkadotnet/akka.net>
// </copyright>
//-----------------------------------------------------------------------
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\docs\conf.py
# -*- coding: utf-8 -*-
#
# AutoMapper documentation build configuration file, created by
# sphinx-quickstart on Thu Oct 05 09:44:33 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))
# -- General configuration ------------------------------------------------
# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'
# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
# Add any paths that contain templates here, relative to this directory.
# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
# The master toctree document.
# General information about the project.
# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
# The full version, including alpha/beta/rc tags.
# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
# The name of the Pygments (syntax highlighting) style to use.
# If true, `todo` and `todoList` produce output, else they produce nothing.
# -- Options for HTML output ----------------------------------------------
# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
# needs 'show_related': True theme option to display
# -- Options for HTMLHelp output ------------------------------------------
# Output file base name for HTML help builder.
# -- Options for LaTeX output ---------------------------------------------
# The paper size ('letterpaper' or 'a4paper').
#
# 'papersize': 'letterpaper',
# The font size ('10pt', '11pt' or '12pt').
#
# 'pointsize': '10pt',
# Additional stuff for the LaTeX preamble.
#
# 'preamble': '',
# Latex figure (float) alignment
#
# 'figure_align': 'htbp',
# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
# -- Options for manual page output ---------------------------------------
# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
# -- Options for Texinfo output -------------------------------------------
# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\AdvancedConfiguration.cs
/// <summary>
/// Add Action called against the IConfigurationProvider before it gets sealed
/// </summary>
/// <summary>
/// Add an action to be called when validating the configuration.
/// </summary>
/// <param name="validator">the validation callback</param>
/// <summary>
/// How many levels deep should AutoMapper try to inline the execution plan for child classes.
/// See <a href="http://automapper.readthedocs.io/en/latest/Understanding-your-mapping.html">the wiki</a> for details.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\AssemblyInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\AutoMapperConfigurationException.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\AutoMapperMappingException.cs
//
// For guidelines regarding the creation of new exception types, see
//    http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpgenref/html/cpconerrorraisinghandlingguidelines.asp
// and
//    http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dncscol/html/csharp07192001.asp
//
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ConfigurationValidator.cs
// Maps with no match get mapped at runtime yolo
// when we don't know what the source type is, bail
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ConstructorMap.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ConstructorParameterMap.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\DuplicateTypeMapConfigurationException.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ExpressionExtensions.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IConfigurationProvider.cs
/// <summary>
/// Get all configured type maps created
/// </summary>
/// <returns>All configured type maps</returns>
/// <summary>
/// Find the <see cref="TypeMap"/> for the configured source and destination type
/// </summary>
/// <param name="sourceType">Configured source type</param>
/// <param name="destinationType">Configured destination type</param>
/// <returns>Type map configuration</returns>
/// <summary>
/// Find the <see cref="TypeMap"/> for the configured type pair
/// </summary>
/// <param name="typePair">Type pair</param>
/// <returns>Type map configuration</returns>
/// <summary>
/// Find the <see cref="TypeMap"/> for the configured source and destination type
/// </summary>
/// <typeparam name="TSource">Source type</typeparam>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <returns>Type map configuration</returns>
/// <summary>
/// Resolve the <see cref="TypeMap"/> for the configured source and destination type, checking parent types
/// </summary>
/// <param name="sourceType">Configured source type</param>
/// <param name="destinationType">Configured destination type</param>
/// <returns>Type map configuration</returns>
/// <summary>
/// Resolve the <see cref="TypeMap"/> for the configured source and destination type, checking parent types
/// </summary>
/// <param name="sourceType">Configured source type</param>
/// <param name="destinationType">Configured destination type</param>
/// <param name="inlineConfiguration">Inline type map configuration if exists</param>
/// <returns>Type map configuration</returns>
/// <summary>
/// Resolve the <see cref="TypeMap"/> for the configured type pair, checking parent types
/// </summary>
/// <param name="typePair">Type pair</param>
/// <param name="inlineConfiguration">Inline type map configuration if exists</param>
/// <returns>Type map configuration</returns>
/// <summary>
/// Resolve the <see cref="TypeMap"/> for the configured type pair, checking parent types
/// </summary>
/// <param name="typePair">Type pair</param>
/// <returns>Type map configuration</returns>
/// <summary>
/// Dry run all configured type maps and throw <see cref="AutoMapperConfigurationException"/> for each problem
/// </summary>
/// <summary>
/// Dry run single type map
/// </summary>
/// <param name="typeMap">Type map to check</param>
/// <summary>
/// Dry run all type maps in given profile
/// </summary>
/// <param name="profileName">Profile name of type maps to test</param>
/// <summary>
/// Dry run all type maps in given profile
/// </summary>
/// <typeparam name="TProfile">Profile type</typeparam>
/// <summary>
/// Get all configured mappers
/// </summary>
/// <returns>List of mappers</returns>
/// <summary>
/// Find a matching object mapper.
/// </summary>
/// <param name="types">the types to match</param>
/// <returns>the matching mapper or null</returns>
/// <summary>
/// Factory method to create formatters, resolvers and type converters
/// </summary>
/// <summary>
/// Allows to enable null-value propagation for query mapping.
/// <remarks>Some providers (such as EntityFrameworkQueryVisitor) do not work with this feature enabled!</remarks>
/// </summary>
/// <summary>
/// Create a mapper instance based on this configuration. Mapper instances are lightweight and can be created as needed.
/// </summary>
/// <returns>The mapper instance</returns>
/// <summary>
/// Create a mapper instance with the specified service constructor to be used for resolvers and type converters.
/// </summary>
/// <param name="serviceCtor">Service factory to create services</param>
/// <returns>The mapper instance</returns>
/// <summary>
/// Compile all underlying mapping expressions to cached delegates.
/// Use if you want AutoMapper to compile all mappings up front instead of deferring expression compilation for each first map.
/// </summary>
/// <summary>
/// Builds the execution plan used to map the source to destination.
/// Useful to understand what exactly is happening during mapping.
/// See <a href="http://automapper.readthedocs.io/en/latest/Understanding-your-mapping.html">the wiki</a> for details.
/// </summary>
/// <param name="sourceType">the runtime type of the source object</param>
/// <param name="destinationType">the runtime type of the destination object</param>
/// <returns>the execution plan</returns>
/// <summary>
/// Builds the execution plan used to map the source to destination.
/// Useful to understand what exactly is happening during mapping.
/// See <a href="http://automapper.readthedocs.io/en/latest/Understanding-your-mapping.html">the wiki</a> for details.
/// </summary>
/// <param name="mapRequest">The source/destination map request</param>
/// <returns>the execution plan</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ICtorParamConfigurationExpression.cs
/// <summary>
/// Map constructor parameter from member expression
/// </summary>
/// <typeparam name="TMember">Member type</typeparam>
/// <param name="sourceMember">Member expression</param>
/// <summary>
/// Map constructor parameter from custom func
/// </summary>
/// <param name="resolver">Custom func</param>
/// <summary>
/// Map constructor parameter from custom func that has access to <see cref="ResolutionContext"/>
/// </summary>
/// <param name="resolver">Custom func</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IgnoreMapAttribute.cs
/// <summary>
/// Ignore this member for validation and skip during mapping
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IMapper.cs
/// <summary>
/// Execute a mapping from the source object to a new destination object.
/// The source type is inferred from the source object.
/// </summary>
/// <typeparam name="TDestination">Destination type to create</typeparam>
/// <param name="source">Source object to map from</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to a new destination object with supplied mapping options.
/// </summary>
/// <typeparam name="TDestination">Destination type to create</typeparam>
/// <param name="source">Source object to map from</param>
/// <param name="opts">Mapping options</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to a new destination object.
/// </summary>
/// <typeparam name="TSource">Source type to use, regardless of the runtime type</typeparam>
/// <typeparam name="TDestination">Destination type to create</typeparam>
/// <param name="source">Source object to map from</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to a new destination object with supplied mapping options.
/// </summary>
/// <typeparam name="TSource">Source type to use</typeparam>
/// <typeparam name="TDestination">Destination type to create</typeparam>
/// <param name="source">Source object to map from</param>
/// <param name="opts">Mapping options</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to the existing destination object.
/// </summary>
/// <typeparam name="TSource">Source type to use</typeparam>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <param name="source">Source object to map from</param>
/// <param name="destination">Destination object to map into</param>
/// <returns>The mapped destination object, same instance as the <paramref name="destination"/> object</returns>
/// <summary>
/// Execute a mapping from the source object to the existing destination object with supplied mapping options.
/// </summary>
/// <typeparam name="TSource">Source type to use</typeparam>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <param name="source">Source object to map from</param>
/// <param name="destination">Destination object to map into</param>
/// <param name="opts">Mapping options</param>
/// <returns>The mapped destination object, same instance as the <paramref name="destination"/> object</returns>
/// <summary>
/// Execute a mapping from the source object to a new destination object with explicit <see cref="System.Type"/> objects
/// </summary>
/// <param name="source">Source object to map from</param>
/// <param name="sourceType">Source type to use</param>
/// <param name="destinationType">Destination type to create</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to a new destination object with explicit <see cref="System.Type"/> objects and supplied mapping options.
/// </summary>
/// <param name="source">Source object to map from</param>
/// <param name="sourceType">Source type to use</param>
/// <param name="destinationType">Destination type to create</param>
/// <param name="opts">Mapping options</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to existing destination object with explicit <see cref="System.Type"/> objects
/// </summary>
/// <param name="source">Source object to map from</param>
/// <param name="destination">Destination object to map into</param>
/// <param name="sourceType">Source type to use</param>
/// <param name="destinationType">Destination type to use</param>
/// <returns>Mapped destination object, same instance as the <paramref name="destination"/> object</returns>
/// <summary>
/// Execute a mapping from the source object to existing destination object with supplied mapping options and explicit <see cref="System.Type"/> objects
/// </summary>
/// <param name="source">Source object to map from</param>
/// <param name="destination">Destination object to map into</param>
/// <param name="sourceType">Source type to use</param>
/// <param name="destinationType">Destination type to use</param>
/// <param name="opts">Mapping options</param>
/// <returns>Mapped destination object, same instance as the <paramref name="destination"/> object</returns>
/// <summary>
/// Configuration provider for performing maps
/// </summary>
/// <summary>
/// Factory method for creating runtime instances of converters, resolvers etc.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IMapperConfigurationExpression.cs
/// <summary>
/// Create missing type maps during mapping, if necessary
/// </summary>
/// <summary>
/// Add an existing profile
/// </summary>
/// <param name="profile">Profile to add</param>
/// <summary>
/// Add an existing profile type. Profile will be instantiated and added to the configuration.
/// </summary>
/// <typeparam name="TProfile">Profile type</typeparam>
/// <summary>
/// Add an existing profile type. Profile will be instantiated and added to the configuration.
/// </summary>
/// <param name="profileType">Profile type</param>
/// <summary>
/// Add profiles contained in assemblies
/// </summary>
/// <param name="assembliesToScan">Assemblies containing profiles</param>
/// <summary>
/// Add profiles contained in assemblies
/// </summary>
/// <param name="assembliesToScan">Assemblies containing profiles</param>
/// <summary>
/// Add profiles contained in assemblies
/// </summary>
/// <param name="assemblyNamesToScan">Assembly names to load and scan containing profiles</param>
/// <summary>
/// Add profiles contained in assemblies
/// </summary>
/// <param name="assemblyNamesToScan">Assembly names to load and scan containing profiles</param>
/// <summary>
/// Add profiles contained in assemblies
/// </summary>
/// <param name="typesFromAssembliesContainingProfiles">Types from assemblies containing profiles</param>
/// <summary>
/// Add profiles contained in assemblies
/// </summary>
/// <param name="typesFromAssembliesContainingProfiles">Types from assemblies containing profiles</param>
/// <summary>
/// Supply a factory method callback for creating resolvers and type converters
/// </summary>
/// <param name="constructor">Factory method</param>
/// <summary>
/// Create a named profile with the supplied configuration
/// </summary>
/// <param name="profileName">Profile name, must be unique</param>
/// <param name="config">Profile configuration</param>
/// <summary>
/// Object mappers
/// </summary>
/// <summary>
/// Advance Configuration
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IMappingAction.cs
/// <summary>
/// Custom mapping action
/// </summary>
/// <typeparam name="TSource">Source type</typeparam>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <summary>
/// Implementors can modify both the source and destination objects
/// </summary>
/// <param name="source">Source object</param>
/// <param name="destination">Destination object</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IMappingExpression.cs
/// <summary>
/// Mapping configuration options for non-generic maps
/// </summary>
/// <summary>
/// Preserve object identity. Useful for circular references.
/// </summary>
/// <returns></returns>
/// <summary>
/// Customize configuration for individual constructor parameter
/// </summary>
/// <param name="ctorParamName">Constructor parameter name</param>
/// <param name="paramOptions">Options</param>
/// <returns>Itself</returns>
/// <summary>
/// Create a type mapping from the destination to the source type, using the destination members as validation.
/// </summary>
/// <returns>Itself</returns>
/// <summary>
/// Replace the original runtime instance with a new source instance. Useful when ORMs return proxy types with no relationships to runtime types.
/// The returned source object will be mapped instead of what was supplied in the original source object.
/// </summary>
/// <param name="substituteFunc">Substitution function</param>
/// <returns>New source object to map.</returns>
/// <summary>
/// Construct the destination object using the service locator
/// </summary>
/// <returns>Itself</returns>
/// <summary>
/// For self-referential types, limit recurse depth.
/// Enables PreserveReferences.
/// </summary>
/// <param name="depth">Number of levels to limit to</param>
/// <returns>Itself</returns>
/// <summary>
/// Supply a custom instantiation expression for the destination type for LINQ projection
/// </summary>
/// <param name="ctor">Callback to create the destination type given the source object</param>
/// <returns>Itself</returns>
/// <summary>
/// Supply a custom instantiation function for the destination type, based on the entire resolution context
/// </summary>
/// <param name="ctor">Callback to create the destination type given the source object and current resolution context</param>
/// <returns>Itself</returns>
/// <summary>
/// Supply a custom instantiation function for the destination type
/// </summary>
/// <param name="ctor">Callback to create the destination type given the source object</param>
/// <returns>Itself</returns>
/// <summary>
/// Skip member mapping and use a custom expression during LINQ projection
/// </summary>
/// <param name="projectionExpression">Projection expression</param>
/// <summary>
/// Customize configuration for all members
/// </summary>
/// <param name="memberOptions">Callback for member options</param>
/// <summary>
/// Customize configuration for members not previously configured
/// </summary>
/// <param name="memberOptions">Callback for member options</param>
/// <summary>
/// Customize configuration for an individual source member
/// </summary>
/// <param name="sourceMemberName">Source member name</param>
/// <param name="memberOptions">Callback for member configuration options</param>
/// <returns>Itself</returns>
/// <summary>
/// Skip normal member mapping and convert using a <see cref="ITypeConverter{TSource,TDestination}"/> instantiated during mapping
/// </summary>
/// <typeparam name="TTypeConverter">Type converter type</typeparam>
/// <summary>
/// Skip normal member mapping and convert using a <see cref="ITypeConverter{TSource,TDestination}"/> instantiated during mapping
/// Use this method if you need to specify the converter type at runtime
/// </summary>
/// <param name="typeConverterType">Type converter type</param>
/// <summary>
/// Override the destination type mapping for looking up configuration and instantiation
/// </summary>
/// <param name="typeOverride"></param>
/// <summary>
/// Customize individual members
/// </summary>
/// <param name="name">Name of the member</param>
/// <param name="memberOptions">Callback for configuring member</param>
/// <returns>Itself</returns>
/// <summary>
/// Include this configuration in derived types' maps
/// </summary>
/// <param name="derivedSourceType">Derived source type</param>
/// <param name="derivedDestinationType">Derived destination type</param>
/// <returns>Itself</returns>
/// <summary>
/// Ignores all destination properties that have either a private or protected setter, forcing the mapper to respect encapsulation (note: order matters, so place this before explicit configuration of any properties with an inaccessible setter)
/// </summary>
/// <returns>Itself</returns>
/// <summary>
/// When using ReverseMap, ignores all source properties that have either a private or protected setter, keeping the reverse mapping consistent with the forward mapping (note: destination properties with an inaccessible setter may still be mapped unless IgnoreAllPropertiesWithAnInaccessibleSetter is also used)
/// </summary>
/// <returns>Itself</returns>
/// <summary>
/// Include the base type map's configuration in this map
/// </summary>
/// <param name="sourceBase">Base source type</param>
/// <param name="destinationBase">Base destination type</param>
/// <returns></returns>
/// <summary>
/// Execute a custom function to the source and/or destination types before member mapping
/// </summary>
/// <param name="beforeFunction">Callback for the source/destination types</param>
/// <returns>Itself</returns>
/// <summary>
/// Execute a custom mapping action before member mapping
/// </summary>
/// <typeparam name="TMappingAction">Mapping action type instantiated during mapping</typeparam>
/// <returns>Itself</returns>
/// <summary>
/// Execute a custom function to the source and/or destination types after member mapping
/// </summary>
/// <param name="afterFunction">Callback for the source/destination types</param>
/// <returns>Itself</returns>
/// <summary>
/// Execute a custom mapping action after member mapping
/// </summary>
/// <typeparam name="TMappingAction">Mapping action type instantiated during mapping</typeparam>
/// <returns>Itself</returns>
/// <summary>
/// Specify which member list to validate
/// </summary>
/// <param name="memberList">Member list to validate</param>
/// <returns>Itself</returns>
/// <summary>
/// Mapping configuration options
/// </summary>
/// <typeparam name="TSource">Source type</typeparam>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <summary>
/// Customize configuration for a path inside the destination object.
/// </summary>
/// <param name="destinationMember">Expression to the destination subobject</param>
/// <param name="memberOptions">Callback for member options</param>
/// <returns>Itself</returns>
/// <summary>
/// Preserve object identity. Useful for circular references.
/// </summary>
/// <returns></returns>
/// <summary>
/// Customize configuration for members not previously configured
/// </summary>
/// <param name="memberOptions">Callback for member options</param>
/// <summary>
/// Customize configuration for individual member
/// </summary>
/// <param name="destinationMember">Expression to the top-level destination member. This must be a member on the <typeparamref name="TDestination"/>TDestination</param> type
/// <param name="memberOptions">Callback for member options</param>
/// <returns>Itself</returns>
/// <summary>
/// Customize configuration for individual member. Used when the name isn't known at compile-time
/// </summary>
/// <param name="name">Destination member name</param>
/// <param name="memberOptions">Callback for member options</param>
/// <returns></returns>
/// <summary>
/// Customize configuration for all members
/// </summary>
/// <param name="memberOptions">Callback for member options</param>
/// <summary>
/// Ignores all <typeparamref name="TDestination"/> properties that have either a private or protected setter, forcing the mapper to respect encapsulation (note: order matters, so place this before explicit configuration of any properties with an inaccessible setter)
/// </summary>
/// <returns>Itself</returns>
/// <summary>
/// When using ReverseMap, ignores all <typeparamref name="TSource"/> properties that have either a private or protected setter, keeping the reverse mapping consistent with the forward mapping (note: <typeparamref name="TDestination"/> properties with an inaccessible setter may still be mapped unless IgnoreAllPropertiesWithAnInaccessibleSetter is also used)
/// </summary>
/// <returns>Itself</returns>
/// <summary>
/// Include this configuration in derived types' maps
/// </summary>
/// <typeparam name="TOtherSource">Derived source type</typeparam>
/// <typeparam name="TOtherDestination">Derived destination type</typeparam>
/// <returns>Itself</returns>
/// <summary>
/// Include the base type map's configuration in this map
/// </summary>
/// <typeparam name="TSourceBase">Base source type</typeparam>
/// <typeparam name="TDestinationBase">Base destination type</typeparam>
/// <returns>Itself</returns>
/// <summary>
/// Include this configuration in derived types' maps
/// </summary>
/// <param name="derivedSourceType">Derived source type</param>
/// <param name="derivedDestinationType">Derived destination type</param>
/// <returns>Itself</returns>
/// <summary>
/// Skip member mapping and use a custom expression during LINQ projection
/// </summary>
/// <param name="projectionExpression">Projection expression</param>
/// <summary>
/// Skip member mapping and use a custom function to convert to the destination type
/// </summary>
/// <param name="mappingFunction">Callback to convert from source type to destination type</param>
/// <summary>
/// Skip member mapping and use a custom function to convert to the destination type
/// </summary>
/// <param name="mappingFunction">Callback to convert from source type to destination type, including destination object</param>
/// <summary>
/// Skip member mapping and use a custom function to convert to the destination type
/// </summary>
/// <param name="mappingFunction">Callback to convert from source type to destination type, with source, destination and context</param>
/// <summary>
/// Skip member mapping and use a custom type converter instance to convert to the destination type
/// </summary>
/// <param name="converter">Type converter instance</param>
/// <summary>
/// Skip member mapping and use a custom type converter instance to convert to the destination type
/// </summary>
/// <typeparam name="TTypeConverter">Type converter type</typeparam>
/// <summary>
/// Execute a custom function to the source and/or destination types before member mapping
/// </summary>
/// <param name="beforeFunction">Callback for the source/destination types</param>
/// <returns>Itself</returns>
/// <summary>
/// Execute a custom function to the source and/or destination types before member mapping
/// </summary>
/// <param name="beforeFunction">Callback for the source/destination types</param>
/// <returns>Itself</returns>
/// <summary>
/// Execute a custom mapping action before member mapping
/// </summary>
/// <typeparam name="TMappingAction">Mapping action type instantiated during mapping</typeparam>
/// <returns>Itself</returns>
/// <summary>
/// Execute a custom function to the source and/or destination types after member mapping
/// </summary>
/// <param name="afterFunction">Callback for the source/destination types</param>
/// <returns>Itself</returns>
/// <summary>
/// Execute a custom function to the source and/or destination types after member mapping
/// </summary>
/// <param name="afterFunction">Callback for the source/destination types</param>
/// <returns>Itself</returns>
/// <summary>
/// Execute a custom mapping action after member mapping
/// </summary>
/// <typeparam name="TMappingAction">Mapping action type instantiated during mapping</typeparam>
/// <returns>Itself</returns>
/// <summary>
/// Supply a custom instantiation function for the destination type
/// </summary>
/// <param name="ctor">Callback to create the destination type given the source object</param>
/// <returns>Itself</returns>
/// <summary>
/// Supply a custom instantiation expression for the destination type for LINQ projection
/// </summary>
/// <param name="ctor">Callback to create the destination type given the source object</param>
/// <returns>Itself</returns>
/// <summary>
/// Supply a custom instantiation function for the destination type, based on the entire resolution context
/// </summary>
/// <param name="ctor">Callback to create the destination type given the current resolution context</param>
/// <returns>Itself</returns>
/// <summary>
/// Override the destination type mapping for looking up configuration and instantiation
/// </summary>
/// <typeparam name="T">Destination type to use</typeparam>
/// <summary>
/// For self-referential types, limit recurse depth.
/// Enables PreserveReferences.
/// </summary>
/// <param name="depth">Number of levels to limit to</param>
/// <returns>Itself</returns>
/// <summary>
/// Construct the destination object using the service locator
/// </summary>
/// <returns>Itself</returns>
/// <summary>
/// Create a type mapping from the destination to the source type, using the <typeparamref name="TDestination"/> members as validation
/// </summary>
/// <returns>Itself</returns>
/// <summary>
/// Customize configuration for an individual source member
/// </summary>
/// <param name="sourceMember">Expression to source member. Must be a member of the <typeparamref name="TSource"/> type</param>
/// <param name="memberOptions">Callback for member configuration options</param>
/// <returns>Itself</returns>
/// <summary>
/// Customize configuration for an individual source member. Member name not known until runtime
/// </summary>
/// <param name="sourceMemberName">Expression to source member. Must be a member of the <typeparamref name="TSource"/> type</param>
/// <param name="memberOptions">Callback for member configuration options</param>
/// <returns>Itself</returns>
/// <summary>
/// Replace the original runtime instance with a new source instance. Useful when ORMs return proxy types with no relationships to runtime types.
/// The returned source object will be mapped instead of what was supplied in the original source object.
/// </summary>
/// <param name="substituteFunc">Substitution function</param>
/// <returns>New source object to map.</returns>
/// <summary>
/// Customize configuration for individual constructor parameter
/// </summary>
/// <param name="ctorParamName">Constructor parameter name</param>
/// <param name="paramOptions">Options</param>
/// <returns>Itself</returns>
/// <summary>
/// Disable constructor validation. During mapping this map is used against an existing destination object and never constructed itself.
/// </summary>
/// <returns>Itself</returns>
/// <summary>
/// Apply a transformation function after any resolved destination member value with the given type
/// </summary>
/// <typeparam name="TValue">Value type to match and transform</typeparam>
/// <param name="transformer">Transformation expression</param>
/// <returns>Itself</returns>
/// <summary>
/// Specify which member list to validate
/// </summary>
/// <param name="memberList">Member list to validate</param>
/// <returns>Itself</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IMappingOperationOptions.cs
/// <summary>
/// Options for a single map operation
/// </summary>
/// <summary>
/// Construct services using this callback. Use this for child/nested containers
/// </summary>
/// <param name="constructor"></param>
/// <summary>
/// Add context items to be accessed at map time inside an <see cref="IValueResolver{TSource, TDestination, TMember}"/> or <see cref="ITypeConverter{TSource, TDestination}"/>
/// </summary>
/// <summary>
/// Execute a custom function to the source and/or destination types before member mapping
/// </summary>
/// <param name="beforeFunction">Callback for the source/destination types</param>
/// <summary>
/// Execute a custom function to the source and/or destination types after member mapping
/// </summary>
/// <param name="afterFunction">Callback for the source/destination types</param>
/// <summary>
/// Execute a custom function to the source and/or destination types before member mapping
/// </summary>
/// <param name="beforeFunction">Callback for the source/destination types</param>
/// <summary>
/// Execute a custom function to the source and/or destination types after member mapping
/// </summary>
/// <param name="afterFunction">Callback for the source/destination types</param>
/// <summary>
/// Configure inline map
/// </summary>
/// <returns>Mapping configuration expression</returns>
/// <summary>
/// Configure inline map with member list to validate
/// </summary>
/// <param name="memberList">Member list to validate for the inline map</param>
/// <returns>Mapping configuration expression</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IMemberConfigurationExpression.cs
/// <summary>
/// Member configuration options
/// </summary>
/// <typeparam name="TSource">Source type for this member</typeparam>
/// <typeparam name="TMember">Type for this member</typeparam>
/// <typeparam name="TDestination">Destination type for this map</typeparam>
/// <summary>
/// Do not precompute the execution plan for this member, just map it at runtime.
/// Simplifies the execution plan by not inlining.
/// </summary>
/// <summary>
/// Substitute a custom value when the source member resolves as null
/// </summary>
/// <param name="nullSubstitute">Value to use</param>
/// <summary>
/// Resolve destination member using a custom value resolver
/// </summary>
/// <typeparam name="TValueResolver">Value resolver type</typeparam>
/// <returns>Value resolver configuration options</returns>
/// <summary>
/// Resolve destination member using a custom value resolver from a source member
/// </summary>
/// <typeparam name="TValueResolver">Value resolver type</typeparam>
/// <typeparam name="TSourceMember">Source member to supply</typeparam>
/// <returns>Value resolver configuration options</returns>
/// <summary>
/// Resolve destination member using a custom value resolver from a source member
/// </summary>
/// <typeparam name="TValueResolver">Value resolver type</typeparam>
/// <typeparam name="TSourceMember">Source member to supply</typeparam>
/// <param name="sourceMemberName">Source member name</param>
/// <returns>Value resolver configuration options</returns>
/// <summary>
/// Resolve destination member using a custom value resolver instance
/// </summary>
/// <param name="valueResolver">Value resolver instance to use</param>
/// <returns>Resolution expression</returns>
/// <summary>
/// Resolve destination member using a custom value resolver instance
/// </summary>
/// <param name="valueResolver">Value resolver instance to use</param>
/// <param name="sourceMember">Source member to supply to value resolver</param>
/// <returns>Resolution expression</returns>
/// <summary>
/// Resolve destination member using a custom value resolver callback. Used instead of MapFrom when not simply redirecting a source member
/// This method cannot be used in conjunction with LINQ query projection
/// </summary>
/// <param name="resolver">Callback function to resolve against source type</param>
/// <summary>
/// Resolve destination member using a custom value resolver callback. Used instead of MapFrom when not simply redirecting a source member
/// Access both the source object and destination member for additional mapping, context items
/// This method cannot be used in conjunction with LINQ query projection
/// </summary>
/// <param name="resolver">Callback function to resolve against source type</param>
/// <summary>
/// Resolve destination member using a custom value resolver callback. Used instead of MapFrom when not simply redirecting a source member
/// Access both the source object and destination member for additional mapping, context items
/// This method cannot be used in conjunction with LINQ query projection
/// </summary>
/// <param name="resolver">Callback function to resolve against source type</param>
/// <summary>
/// Resolve destination member using a custom value resolver callback. Used instead of MapFrom when not simply redirecting a source member
/// Access both the source object and current resolution context for additional mapping, context items
/// This method cannot be used in conjunction with LINQ query projection
/// </summary>
/// <param name="resolver">Callback function to resolve against source type</param>
/// <summary>
/// Specify the source member to map from. Can only reference a member on the <typeparamref name="TSource"/> type
/// This method can be used in mapping to LINQ query projections, while ResolveUsing cannot.
/// Any null reference exceptions in this expression will be ignored (similar to flattening behavior)
/// </summary>
/// <typeparam name="TSourceMember">Member type of the source member to use</typeparam>
/// <param name="sourceMember">Expression referencing the source member to map against</param>
/// <summary>
/// Specify the source member to map from. Can only reference a member on the <typeparamref name="TSource"/> type
/// This method can be used in mapping to LINQ query projections, while ResolveUsing cannot.
/// Any null reference exceptions in this expression will be ignored (similar to flattening behavior)
/// </summary>
/// <param name="property">Propertyname referencing the source member to map against</param>
/// <summary>
/// Ignore this member for configuration validation and skip during mapping
/// </summary>
/// <summary>
/// Allow this member to be null. This prevents generating a check condition for it.
/// </summary>
/// <summary>
/// Supply a custom mapping order instead of what the .NET runtime returns
/// </summary>
/// <param name="mappingOrder">Mapping order value</param>
/// <summary>
/// Use the destination value instead of mapping from the source value or creating a new instance
/// </summary>
/// <summary>
/// Use a custom value
/// </summary>
/// <typeparam name="TValue">Value type</typeparam>
/// <param name="value">Value to use</param>
/// <summary>
/// Conditionally map this member against the source, destination, source and destination members
/// </summary>
/// <param name="condition">Condition to evaluate using the source object</param>
/// <summary>
/// Conditionally map this member
/// </summary>
/// <param name="condition">Condition to evaluate using the source object</param>
/// <summary>
/// Conditionally map this member
/// </summary>
/// <param name="condition">Condition to evaluate using the source object</param>
/// <summary>
/// Conditionally map this member
/// </summary>
/// <param name="condition">Condition to evaluate using the source object</param>
/// <summary>
/// Conditionally map this member
/// </summary>
/// <param name="condition">Condition to evaluate using the source object</param>
/// <summary>
/// Conditionally map this member, evaluated before accessing the source value
/// </summary>
/// <param name="condition">Condition to evaluate using the source object</param>
/// <summary>
/// Conditionally map this member, evaluated before accessing the source value
/// </summary>
/// <param name="condition">Condition to evaluate using the current resolution context</param>
/// <summary>
/// Conditionally map this member, evaluated before accessing the source value
/// </summary>
/// <param name="condition">Condition to evaluate using the source object and the current resolution context</param>
/// <summary>
/// Conditionally map this member, evaluated before accessing the source value
/// </summary>
/// <param name="condition">Condition to evaluate using the source object, the destination object, and the current resolution context</param>
/// <summary>
/// Ignore this member for LINQ projections unless explicitly expanded during projection
/// </summary>
/// <summary>
/// The destination member being configured.
/// </summary>
/// <summary>
/// Apply a transformation function after any resolved destination member value with the given type
/// </summary>
/// <param name="transformer">Transformation expression</param>
/// <summary>
/// Configuration options for an individual member
/// </summary>
/// <summary>
/// Resolve destination member using a custom value resolver. Used when the value resolver is not known at compile-time
/// </summary>
/// <param name="valueResolverType">Value resolver type</param>
/// <returns>Value resolver configuration options</returns>
/// <summary>
/// Resolve destination member using a custom value resolver. Used when the value resolver is not known at compile-time
/// </summary>
/// <param name="valueResolverType">Value resolver type</param>
/// <param name="memberName">Member to supply to value resolver</param>
/// <returns>Value resolver configuration options</returns>
/// <summary>
/// Resolve destination member using a custom value resolver instance
/// </summary>
/// <param name="valueResolver">Value resolver instance to use</param>
/// <param name="memberName">Source member to supply to value resolver</param>
/// <returns>Resolution expression</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\INamingConvention.cs
/// <summary>
/// Defines a naming convention strategy
/// </summary>
/// <summary>
/// Regular expression on how to tokenize a member
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IObjectMapper.cs
/// <summary>
/// Mapping execution strategy, as a chain of responsibility
/// </summary>
/// <summary>
/// When true, the mapping engine will use this mapper as the strategy
/// </summary>
/// <param name="context">Resolution context</param>
/// <returns>Is match</returns>
/// <summary>
/// Builds a mapping expression equivalent to the base Map method
/// </summary>
/// <param name="configurationProvider"></param>
/// <param name="profileMap"></param>
/// <param name="propertyMap"></param>
/// <param name="sourceExpression">Source parameter</param>
/// <param name="destExpression">Destination parameter</param>
/// <param name="contextExpression">ResulotionContext parameter</param>
/// <returns>Map expression</returns>
/// <summary>
/// Base class for simple object mappers that don't want to use expressions.
/// </summary>
/// <typeparam name="TSource">type of the source</typeparam>
/// <typeparam name="TDestination">type of the destination</typeparam>
/// <summary>
/// When true, the mapping engine will use this mapper as the strategy
/// </summary>
/// <param name="context">Resolution context</param>
/// <returns>Is match</returns>
/// <summary>
/// Performs conversion from source to destination type
/// </summary>
/// <param name="source">Source object</param>
/// <param name="destination">Destination object</param>
/// <param name="sourceType">The compile time type of the source object</param>
/// <param name="destinationType">The compile time type of the destination object</param>
/// <param name="context">Resolution context</param>
/// <returns>Destination object</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IObjectMapperInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IPathConfigurationExpression.cs
/// <summary>
/// Member configuration options
/// </summary>
/// <typeparam name="TSource">Source type for this member</typeparam>
/// <typeparam name="TDestination">Destination type for this map</typeparam>
/// <typeparam name="TMember">Type for this member</typeparam>
/// <summary>
/// Specify the source member to map from. Can only reference a member on the <typeparamref name="TSource"/> type
/// This method can be used in mapping to LINQ query projections, while ResolveUsing cannot.
/// Any null reference exceptions in this expression will be ignored (similar to flattening behavior)
/// </summary>
/// <typeparam name="TSourceMember">Member type of the source member to use</typeparam>
/// <param name="sourceMember">Expression referencing the source member to map against</param>
/// <summary>
/// Ignore this member for configuration validation and skip during mapping
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IProfileExpression.cs
/// <summary>
/// Configuration for profile-specific maps
/// </summary>
/// <summary>
/// Disable constructor mapping. Use this if you don't intend to have AutoMapper try to map to constructors
/// </summary>
/// <summary>
/// Creates a mapping configuration from the <typeparamref name="TSource"/> type to the <typeparamref name="TDestination"/> type
/// </summary>
/// <typeparam name="TSource">Source type</typeparam>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <returns>Mapping expression for more configuration options</returns>
/// <summary>
/// Creates a mapping configuration from the <typeparamref name="TSource"/> type to the <typeparamref name="TDestination"/> type.
/// Specify the member list to validate against during configuration validation.
/// </summary>
/// <typeparam name="TSource">Source type</typeparam>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <param name="memberList">Member list to validate</param>
/// <returns>Mapping expression for more configuration options</returns>
/// <summary>
/// Create a mapping configuration from the source type to the destination type.
/// Use this method when the source and destination type are known at runtime and not compile time.
/// </summary>
/// <param name="sourceType">Source type</param>
/// <param name="destinationType">Destination type</param>
/// <returns>Mapping expression for more configuration options</returns>
/// <summary>
/// Creates a mapping configuration from the source type to the destination type.
/// Specify the member list to validate against during configuration validation.
/// </summary>
/// <param name="sourceType">Source type</param>
/// <param name="destinationType">Destination type</param>
/// <param name="memberList">Member list to validate</param>
/// <returns>Mapping expression for more configuration options</returns>
/// <summary>
/// Clear the list of recognized prefixes.
/// </summary>
/// <summary>
/// Recognize a list of prefixes to be removed from source member names when matching
/// </summary>
/// <param name="prefixes">List of prefixes</param>
/// <summary>
/// Recognize a list of postfixes to be removed from source member names when matching
/// </summary>
/// <param name="postfixes">List of postfixes</param>
/// <summary>
/// Provide an alias for a member name when matching source member names
/// </summary>
/// <param name="original">Original member name</param>
/// <param name="alias">Alias to match against</param>
/// <summary>
/// Provide a new value for a part of a members name
/// </summary>
/// <param name="original">Original member value</param>
/// <param name="newValue">New member value</param>
/// <summary>
/// Recognize a list of prefixes to be removed from destination member names when matching
/// </summary>
/// <param name="prefixes">List of prefixes</param>
/// <summary>
/// Recognize a list of postfixes to be removed from destination member names when matching
/// </summary>
/// <param name="postfixes">List of postfixes</param>
/// <summary>
/// Add a property name to globally ignore. Matches against the beginning of the property names.
/// </summary>
/// <param name="propertyNameStartingWith">Property name to match against</param>
/// <summary>
/// Allow null destination values. If false, destination objects will be created for deep object graphs. Default true.
/// </summary>
/// <summary>
/// Allow null destination collections. If true, null source collections result in null destination collections. Default false.
/// </summary>
/// <summary>
/// Allows to enable null-value propagation for query mapping. 
/// <remarks>Some providers (such as EntityFrameworkQueryVisitor) do not work with this feature enabled!</remarks>
/// </summary>
/// <summary>
/// Naming convention for source members
/// </summary>
/// <summary>
/// Naming convention for destination members
/// </summary>
/// <summary>
/// Specify common configuration for all type maps.
/// </summary>
/// <param name="configuration">configuration callback</param>
/// <summary>
/// Customize configuration for all members across all maps
/// </summary>
/// <param name="condition">Condition</param>
/// <param name="memberOptions">Callback for member options. Use the property map for conditional maps.</param>
/// <summary>
/// Include extension methods against source members for matching destination members to. Default source extension methods from <see cref="System.Linq.Enumerable"/>
/// </summary>
/// <param name="type">Static type that contains extension methods</param>
/// <summary>
/// Value transformers. Modify the list directly or use <see cref="ValueTransformerConfigurationExtensions.Add{TValue}"/>
/// </summary>
/// <summary>
/// Validate maps created dynamically/inline on the first map. Defaults to true.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IResolutionExpression.cs
/// <summary>
/// Custom resolver options
/// </summary>
/// <typeparam name="TSource">Source type</typeparam>
/// <summary>
/// Use the specified member as the input to the resolver instead of the root <typeparamref name="TSource"/> object
/// </summary>
/// <param name="sourceMember">Expression for the source member</param>
/// <summary>
/// Custom resolver options
/// </summary>
/// <summary>
/// Use the supplied member as the input to the resolver instead of the root source object
/// </summary>
/// <param name="sourcePropertyName">Property name to use</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IResolverConfigurationExpression.cs
/// <summary>
/// Custom resolver options
/// </summary>
/// <typeparam name="TSource">Source type</typeparam>
/// <summary>
/// Use the specified member as the input to the resolver instead of the root <typeparamref name="TSource"/> object
/// </summary>
/// <param name="sourceMember">Expression for the source member</param>
/// <returns>Itself</returns>
/// <summary>
/// Use the specified member as the input to the resolver instead of the root <typeparamref name="TSource"/> object
/// </summary>
/// <param name="sourcePropertyName">Name of the source member</param>
/// <returns>Itself</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ISourceMemberConfigurationExpression.cs
/// <summary>
/// Source member configuration options
/// </summary>
/// <summary>
/// Ignore this member for configuration validation and skip during mapping
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ITypeConverter.cs
/// <summary>
/// Converts source type to destination type instead of normal member mapping
/// </summary>
/// <typeparam name="TSource">Source type</typeparam>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <summary>
/// Performs conversion from source to destination type
/// </summary>
/// <param name="source">Source object</param>
/// <param name="destination">Destination object</param>
/// <param name="context">Resolution context</param>
/// <returns>Destination object</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\IValueResolver.cs
/// <summary>
/// Extension point to provide custom resolution for a destination value
/// </summary>
/// <summary>
/// Implementors use source object to provide a destination object.
/// </summary>
/// <param name="source">Source object</param>
/// <param name="destination">Destination object, if exists</param>
/// <param name="destMember">Destination member</param>
/// <param name="context">The context of the mapping</param>
/// <returns>Result, typically build from the source resolution result</returns>
/// <summary>
/// Extension point to provide custom resolution for a destination value
/// </summary>
/// <summary>
/// Implementors use source object to provide a destination object.
/// </summary>
/// <param name="source">Source object</param>
/// <param name="destination">Destination object, if exists</param>
/// <param name="sourceMember">Source member</param>
/// <param name="destMember">Destination member</param>
/// <param name="context">The context of the mapping</param>
/// <returns>Result, typically build from the source resolution result</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\LockingConcurrentDictionary.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\LowerUnderscoreNamingConvention.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mapper.cs
/// <summary>
/// Configuration provider for performing maps
/// </summary>
/// <summary>
/// Static mapper instance. You can also create a <see cref="Mapper"/> instance directly using the <see cref="Configuration"/> instance.
/// </summary>
/// <summary>
/// Initialize static configuration instance
/// </summary>
/// <param name="config">Configuration action</param>
/// <summary>
/// Initialize static configuration instance
/// </summary>
/// <param name="config">Configuration action</param>
/// <summary>
/// Resets the mapper configuration. Not intended for production use, but for testing scenarios.
/// </summary>
/// <summary>
/// Execute a mapping from the source object to a new destination object.
/// The source type is inferred from the source object.
/// </summary>
/// <typeparam name="TDestination">Destination type to create</typeparam>
/// <param name="source">Source object to map from</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to a new destination object with supplied mapping options.
/// </summary>
/// <typeparam name="TDestination">Destination type to create</typeparam>
/// <param name="source">Source object to map from</param>
/// <param name="opts">Mapping options</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to a new destination object.
/// </summary>
/// <typeparam name="TSource">Source type to use, regardless of the runtime type</typeparam>
/// <typeparam name="TDestination">Destination type to create</typeparam>
/// <param name="source">Source object to map from</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to a new destination object with supplied mapping options.
/// </summary>
/// <typeparam name="TSource">Source type to use</typeparam>
/// <typeparam name="TDestination">Destination type to create</typeparam>
/// <param name="source">Source object to map from</param>
/// <param name="opts">Mapping options</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to the existing destination object.
/// </summary>
/// <typeparam name="TSource">Source type to use</typeparam>
/// <typeparam name="TDestination">Dsetination type</typeparam>
/// <param name="source">Source object to map from</param>
/// <param name="destination">Destination object to map into</param>
/// <returns>The mapped destination object, same instance as the <paramref name="destination"/> object</returns>
/// <summary>
/// Execute a mapping from the source object to the existing destination object with supplied mapping options.
/// </summary>
/// <typeparam name="TSource">Source type to use</typeparam>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <param name="source">Source object to map from</param>
/// <param name="destination">Destination object to map into</param>
/// <param name="opts">Mapping options</param>
/// <returns>The mapped destination object, same instance as the <paramref name="destination"/> object</returns>
/// <summary>
/// Execute a mapping from the source object to a new destination object with explicit <see cref="System.Type"/> objects
/// </summary>
/// <param name="source">Source object to map from</param>
/// <param name="sourceType">Source type to use</param>
/// <param name="destinationType">Destination type to create</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to a new destination object with explicit <see cref="System.Type"/> objects and supplied mapping options.
/// </summary>
/// <param name="source">Source object to map from</param>
/// <param name="sourceType">Source type to use</param>
/// <param name="destinationType">Destination type to create</param>
/// <param name="opts">Mapping options</param>
/// <returns>Mapped destination object</returns>
/// <summary>
/// Execute a mapping from the source object to existing destination object with explicit <see cref="System.Type"/> objects
/// </summary>
/// <param name="source">Source object to map from</param>
/// <param name="destination">Destination object to map into</param>
/// <param name="sourceType">Source type to use</param>
/// <param name="destinationType">Destination type to use</param>
/// <returns>Mapped destination object, same instance as the <paramref name="destination"/> object</returns>
/// <summary>
/// Execute a mapping from the source object to existing destination object with supplied mapping options and explicit <see cref="System.Type"/> objects
/// </summary>
/// <param name="source">Source object to map from</param>
/// <param name="destination">Destination object to map into</param>
/// <param name="sourceType">Source type to use</param>
/// <param name="destinationType">Destination type to use</param>
/// <param name="opts">Mapping options</param>
/// <returns>Mapped destination object, same instance as the <paramref name="destination"/> object</returns>
/// <summary>
/// Dry run all configured type maps and throw <see cref="AutoMapperConfigurationException"/> for each problem
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\MapperConfiguration.cs
// if it's a dynamically created type map, we need to seal it outside GetTypeMap to handle recursion
// we want the exact map the user included, but we could instantiate an open generic
// Invoking a delegate here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\MapperConfigurationExpressionValidator.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\MappingOperationOptions.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\MemberList.cs
/// <summary>
/// Member list to check for configuration validation
/// </summary>
/// <summary>
/// Check that all destination members are mapped
/// </summary>
/// <summary>
/// Check that all source members are mapped
/// </summary>
/// <summary>
/// Check neither source nor destination members, skipping validation
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\PascalCaseNamingConvention.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\PathMap.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Profile.cs
/// <summary>
///     Provides a named configuration for maps. Naming conventions become scoped per profile.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ProfileMap.cs
// Favor more specific destination matches,
// then more specific source matches
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\PropertyMap.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ReflectionExtensions.cs
/// <summary>
/// if targetType is oldType, method will return newType
/// if targetType is not oldType, method will return targetType
/// if targetType is generic type with oldType arguments, method will replace all oldType arguments on newType
/// </summary>
/// <param name="targetType"></param>
/// <param name="oldType"></param>
/// <param name="newType"></param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ResolutionContext.cs
/// <summary>
/// Context information regarding resolution of a destination value
/// </summary>
/// <summary>
/// Mapping operation options
/// </summary>
/// <summary>
/// Instance cache for resolving circular references
/// </summary>
/// <summary>
/// Instance cache for resolving keeping track of depth
/// </summary>
/// <summary>
/// Current mapper
/// </summary>
/// <summary>
/// Current configuration
/// </summary>
/// <summary>
/// Context items from <see cref="Options"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\TypeDetails.cs
/// <summary>
/// Contains cached reflection information for easy retrieval
/// </summary>
// Multiple types may define the same property (e.g. the class and multiple interfaces) - filter this to one of those properties
// group properties of the same name together
// add FieldInfo objects back
// Multiple types may define the same property (e.g. the class and multiple interfaces) - filter this to one of those properties
// group properties of the same name together
// favor the first property that can both read & write - otherwise pick the first one
//.OfType<MemberInfo>() // cast back to MemberInfo so we can add back FieldInfo objects
// add FieldInfo objects back
// Scan all types for public properties and fields
// filter out null types (e.g. type.BaseType == null)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\TypeExtensions.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\TypeMap.cs
/// <summary>
/// Main configuration object holding all mapping configuration for a source and destination type
/// </summary>
//find a ctor with only optional args
// This might need to be fixed for multiple derived source types to different dest types
//Include BeforeMap
//Include AfterMap
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\TypeMapFactory.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\TypePair.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ValueResolverConfiguration.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\ValueTransformerConfiguration.cs
/// <summary>
/// Apply a transformation function after any resolved destination member value with the given type
/// </summary>
/// <typeparam name="TValue">Value type to match and transform</typeparam>
/// <param name="valueTransformers">Value transformer list</param>
/// <param name="transformer">Transformation expression</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\IConfiguration.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\IProfileConfiguration.cs
/// <summary>
/// Contains profile-specific configuration
/// </summary>
/// <summary>
/// Source extension methods included for search
/// </summary>
/// <summary>
/// Specify which properties should be mapped.
/// By default only public properties are mapped.
/// </summary>
/// <summary>
/// Specify which fields should be mapped.
/// By default only public fields are mapped.
/// </summary>
/// <summary>
/// Specify which constructors should be considered for the destination objects.
/// By default all constructors are considered.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\IPropertyMapConfiguration.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\ITypeMapConfiguration.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\MapperConfigurationExpression.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\MappingExpression.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\MemberConfigurationExpression.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\MemberPath.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\PathConfigurationExpression.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\PrimitiveExtensions.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\ResolutionExpression.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\SourceMappingExpression.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\SourceMemberConfig.cs
/// <summary>
/// Contains member configuration relating to source members
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\AllMemberInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\CaseInsensitiveName.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\CaseSensitiveName.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\DefaultMember.cs
// Source Destination Mapper
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\DefaultName.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\IChildMemberConfiguration.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\IGetTypeInfoMembers.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\IMemberConfiguration.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\IParentSourceToDestinationNameMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\ISourceToDestinationNameMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\MapToAttribute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\MemberConfiguration.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\MemberNameReplacer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\NameSplitMember.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\ParentSourceToDestinationNameMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\PrePostfixName.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\ReplaceName.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\SourceToDestinationMapperAttribute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Conventions\SourceToDestinationNameMapperAttributesMember.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Configuration\Internal\PrimitiveHelper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Execution\DelegateFactory.cs
//find a ctor with only optional args
//get all optional default values
//create the ctor expression
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Execution\ExpressionBuilder.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Execution\PropertyDescription.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Execution\PropertyEmitter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Execution\ProxyBase.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Execution\ProxyGenerator.cs
// first we collect all properties, those with setters before getters in order to enable less specific redundant getters
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Execution\TypeDescription.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Execution\TypeMapPlanBuilder.cs
// (src, dest, ctxt) => ((ITypeConverter<TSource, TDest>)ctxt.Options.CreateInstance<TypeConverterType>()).ToType(src, ctxt);
// We're invoking a delegate here to make it have the right accessibility
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Internal\ExpressionFactory.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Internal\MemberVisitor.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Internal\ReflectionHelper.cs
/// <summary>
/// if targetType is oldType, method will return newType
/// if targetType is not oldType, method will return targetType
/// if targetType is generic type with oldType arguments, method will replace all oldType arguments on newType
/// </summary>
/// <param name="targetType"></param>
/// <param name="oldType"></param>
/// <param name="newType"></param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\ArrayCopyMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\ArrayMapper.cs
//var count = source.Count();
//var array = new TDestination[count];
//int i = 0;
//foreach (var item in source)
//    array[i++] = newItemFunc(item, context);
//return array;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\AssignableMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\CollectionMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\ConvertMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\CreateMapBasedOnCriteriaMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\DictionaryMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\EnumerableMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\EnumerableMapperBase.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\EnumerableToDictionaryMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\EnumToEnumMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\EnumToStringMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\EnumToUnderlyingTypeMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\ExplicitConversionOperatorMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\FlagsEnumMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\FromDynamicMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\FromStringDictionaryMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\HashSetMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\ImplicitConversionOperatorMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\MapperRegistry.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\MultidimensionalArrayMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\NameValueCollectionMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\NullableDestinationMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\NullableSourceMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\ReadOnlyCollectionMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\StringMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\StringToEnumMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\ToDynamicMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\ToStringDictionaryMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\TypeConverterMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\UnderlyingTypeToEnumMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\Internal\CollectionMapperExpressionFactory.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\Mappers\Internal\ElementTypeHelper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\ExpressionBuilder.cs
// perform null-propagation if this feature is enabled.
// perform null-propagation if this feature is enabled.
// this is the input parameter of this expression with name <variableName>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\ExpressionRequest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\ExpressionResolutionResult.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Extensions.cs
/// <summary>
/// Queryable extensions for AutoMapper
/// </summary>
/// <summary>
/// Maps a queryable expression of a source type to a queryable expression of a destination type
/// </summary>
/// <typeparam name="TSource">Source type</typeparam>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <param name="sourceQuery">Source queryable</param>
/// <param name="destQuery">Destination queryable</param>
/// <returns>Mapped destination queryable</returns>
/// <summary>
/// Maps a queryable expression of a source type to a queryable expression of a destination type
/// </summary>
/// <typeparam name="TSource">Source type</typeparam>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <param name="sourceQuery">Source queryable</param>
/// <param name="destQuery">Destination queryable</param>
/// <param name="config"></param>
/// <returns>Mapped destination queryable</returns>
/// <summary>
/// Extension method to project from a queryable using the provided mapping engine
/// </summary>
/// <remarks>Projections are only calculated once and cached</remarks>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <param name="source">Queryable source</param>
/// <param name="parameters">Optional parameter object for parameterized mapping expressions</param>
/// <param name="membersToExpand">Explicit members to expand</param>
/// <returns>Expression to project into</returns>
/// <summary>
/// Extension method to project from a queryable using the provided mapping engine
/// </summary>
/// <remarks>Projections are only calculated once and cached</remarks>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <param name="source">Queryable source</param>
/// <param name="configuration">Mapper configuration</param>
/// <param name="parameters">Optional parameter object for parameterized mapping expressions</param>
/// <param name="membersToExpand">Explicit members to expand</param>
/// <returns>Expression to project into</returns>
/// <summary>
/// Extension method to project from a queryable using the provided mapping engine
/// </summary>
/// <remarks>Projections are only calculated once and cached</remarks>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <param name="source">Queryable source</param>
/// <param name="configuration">Mapper configuration</param>
/// <param name="membersToExpand">Explicit members to expand</param>
/// <returns>Expression to project into</returns>
/// <summary>
/// Extension method to project from a queryable using the provided mapping engine
/// </summary>
/// <remarks>Projections are only calculated once and cached</remarks>
/// <typeparam name="TDestination">Destination type</typeparam>
/// <param name="source">Queryable source</param>
/// <param name="membersToExpand">Explicit members to expand</param>
/// <returns>Expression to project into</returns>
/// <summary>
/// Projects the source type to the destination type given the mapping configuration
/// </summary>
/// <typeparam name="TDestination">Destination type to map to</typeparam>
/// <param name="source">Queryable source</param>
/// <param name="parameters">Optional parameter object for parameterized mapping expressions</param>
/// <param name="membersToExpand">Explicit members to expand</param>
/// <returns>Queryable result, use queryable extension methods to project and execute result</returns>
/// <summary>
/// Projects the source type to the destination type given the mapping configuration
/// </summary>
/// <typeparam name="TDestination">Destination type to map to</typeparam>
/// <param name="source">Queryable source</param>
/// <param name="configuration">Mapper configuration</param>
/// <param name="parameters">Optional parameter object for parameterized mapping expressions</param>
/// <param name="membersToExpand">Explicit members to expand</param>
/// <returns>Queryable result, use queryable extension methods to project and execute result</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\IExpressionBinder.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\IExpressionResultConverter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\IProjectionExpression.cs
/// <summary>
/// Continuation to execute projection
/// </summary>
/// <summary>
/// Projects the source type to the destination type given the mapping configuration
/// </summary>
/// <typeparam name="TResult">Destination type to map to</typeparam>
/// <param name="parameters">Optional parameter object for parameterized mapping expressions</param>
/// <returns>Queryable result, use queryable extension methods to project and execute result</returns>
/// <summary>
/// Projects the source type to the destination type given the mapping configuration
/// </summary>
/// <typeparam name="TResult">Destination type to map to</typeparam>
/// <param name="parameters">Optional parameter object for parameterized mapping expressions</param>
/// <returns>Queryable result, use queryable extension methods to project and execute result</returns>
/// <summary>
/// Projects the source type to the destination type given the mapping configuration
/// </summary>
/// <typeparam name="TResult">Destination type to map to</typeparam>
/// <param name="parameters">Optional parameter object for parameterized mapping expressions</param>
/// <param name="membersToExpand">Explicit members to expand</param>
/// <returns>Queryable result, use queryable extension methods to project and execute result</returns>
/// <summary>
/// Projects the source type to the destination type given the mapping configuration
/// </summary>
/// <typeparam name="TResult">Destination type to map to</typeparam>
/// <param name="parameters">Parameters for parameterized mapping expressions</param>
/// <param name="membersToExpand">Explicit members to expand</param>
/// <returns>Queryable result, use queryable extension methods to project and execute result</returns>
/// <summary>
/// Projects the source type to the destination type given the mapping configuration
/// </summary>
/// <typeparam name="TResult">Destination type to map to</typeparam>
/// <param name="membersToExpand">>Explicit members to expand</param>
/// <param name="parameters">Optional parameter object for parameterized mapping expressions</param>
/// <returns>Queryable result, use queryable extension methods to project and execute result</returns>
/// <summary>
/// Projects the source type to the destination type given the mapping configuration
/// </summary>
/// <typeparam name="TResult">Destination type to map to</typeparam>
/// <param name="membersToExpand">>Explicit members to expand</param>
/// <param name="parameters">Parameters for parameterized mapping expressions</param>
/// <returns>Queryable result, use queryable extension methods to project and execute result</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\NullsafeQueryRewriter.cs
/*
/// <summary>
/// Expression visitor for making member access null-safe.
/// </summary>
/// <remarks>
/// NullSafeQueryRewriter is copied from the NeinLinq project, licensed under the MIT license.
/// Copyright (c) 2014-2018 Axel Heer.
/// See https://github.com/axelheer/nein-linq/blob/master/src/NeinLinq/NullsafeQueryRewriter.cs
/// </remarks>
/// <inheritdoc />
// insert null-check before accessing property or field
/// <inheritdoc />
// insert null-check before invoking instance method
// insert null-check before invoking extension method
// coalesce instead, a bit intrusive but fast...
// target can be null, which is why we are actually here...
// expression can be default or null, which is basically the same...
// in method call results and constant values we trust to avoid too much conditions...
// default values for generic collections
// default value for arrays
// try if an instance of this collection would suffice
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\ProjectionExpression.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\AssignableExpressionBinder.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\CustomProjectionExpressionBinder.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\EnumerableExpressionBinder.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\MappedTypeExpressionBinder.cs
// Handles null source property so it will not create an object with possible non-nullable properties 
// which would result in an exception.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\MemberAccessQueryMapperVisitor.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\MemberGetterExpressionResultConverter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\MemberResolverExpressionResultConverter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\NullableDestinationExpressionBinder.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\NullableSourceExpressionBinder.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\QueryMapperHelper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\QueryMapperVisitor.cs
// OData Client DataServiceQuery initial expression node type
// It is data source of queryable object instance
// Convert Right expression value to left expr type
// It is needed when PropertyMap is changing type of property
// for typical orderby expression, a unaryexpression is used that contains a 
// func which in turn defines the type of the field that has to be used for ordering/sorting
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\AutoMapper\QueryableExtensions\Impl\StringExpressionBinder.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\Benchmark\BenchEngine.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\Benchmark\FlatteningMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\Benchmark\HiPerfTimer.cs
// Constructor
// high-performance counter not supported
// Start the timer
// lets do the waiting threads there work
// Stop the timer
// Returns the duration of the timer (in seconds)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\Benchmark\IObjectToObjectMapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\Benchmark\Program.cs
//[assembly: SecurityTransparent]
//[assembly: SecurityRules(SecurityRuleSet.Level2, SkipVerificationInFullTrust = true)]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\ChildClassTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\ICollectionAggregateProjections.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\IEnumerableAggregateProjections.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\NullSubstitute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\BuiltInTypes\ByteArray.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\BuiltInTypes\NullableToNonNullable.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\BuiltInTypes\ProjectEnumerableOfIntToList.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\BuiltInTypes\ProjectUsing.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\CustomMapFrom\CustomMapFromTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\CustomMapFrom\MapObjectPropertyFromSubQuery.cs
// Source Types
// Dest Types
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\ExplicitExpansion\ExpandCollections.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\ExplicitExpansion\ExpandCollectionsWithStrings.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\ExplicitExpansion\ExpandMembersPath.cs
//This is the trouble mapping
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\ExplicitExpansion\NestedExplicitExpand.cs
//This is the trouble mapping
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\ExplicitExpansion\NestedExplicitExpandWithFields.cs
//This is the trouble mapping
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\ExplicitExpansion\ProjectAndAllowNullCollections.cs
// { Bars = new List<Bar>() };
// { Bars = new List<Bar>() };
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\ExplicitExpansion\ProjectionWithExplicitExpansion.cs
// sqlSelect.ShouldContain($"FROM [dbo].[{tableName}] AS");
// Example of Reference Type
// Example of Value Type mapped to appropriate Nullable
// ???
// ???
// ???
// ???
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\Infrastructure\TestDbConfiguration.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\Inheritance\DerivedComplexTypes.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\Inheritance\OverrideDestinationMappingsTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\Inheritance\ProjectToAbstractType.cs
//Data Objects
//        public virtual ICollection<ValiditySignDayType> Signs { get; set; }
//        ICollection<IValiditySignDayType> Signs { get; internal set; } = ImmutableList<IValiditySignDayType>.Empty;
//Domain Models
//.ForMember(d => d.DayType, opt => opt.Ignore());
//Include to mapping -> this causes the exception!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\Inheritance\ProxyTests.cs
//  public int CourseId { get; set; }
//  public int CourseId { get; set; }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\Inheritance\QueryableInterfaceInheritanceIssue.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\MaxDepth\MaxDepthWithCollections.cs
//cfg.AllowNullDestinationValues = false;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\MaxDepth\NavigationPropertySO.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\MaxDepth\NestedDtos.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\Parameterization\ParameterizedQueries.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\ProjectionOrder\ProjectionOrderTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\IntegrationTests\ValueTransformers\ValueTransformerTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ArraysAndLists.cs
// here not the EnumerableMapper is used, but just the AssignableMapper!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\AssemblyScanning.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\AssertionExtensions.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\AutoMapperSpecBase.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\AutoMapperTester.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\BasicFlattening.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\BeforeAfterMapping.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\BidirectionalRelationships.cs
//public class When_mapping_to_a_destination_with_a_bidirectional_parent_one_to_many_child_relationship_using_CustomMapper_StackOverflow : AutoMapperSpecBase
//{
//    private ParentDto _dto;
//    private ParentModel _parent;
//    protected override void Establish_context()
//    {
//        _parent = new ParentModel
//            {
//                ID = 2
//            };
//        List<ChildModel> childModels = new List<ChildModel>
//            {
//                new ChildModel
//                    {
//                        ID = 1,
//                        Parent = _parent
//                    }
//            };
//        Dictionary<int, ParentModel> parents = childModels.ToDictionary(x => x.ID, x => x.Parent);
//        Mapper.CreateMap<int, ParentDto>().ConvertUsing(new ChildIdToParentDtoConverter(parents));
//        Mapper.CreateMap<int, List<ChildDto>>().ConvertUsing(new ParentIdToChildDtoListConverter(childModels));
//        Mapper.CreateMap<ParentModel, ParentDto>()
//            .ForMember(dest => dest.Children, opt => opt.MapFrom(src => src.ID));
//        Mapper.CreateMap<ChildModel, ChildDto>();
//        config.AssertConfigurationIsValid();
//    }
//    protected override void Because_of()
//    {
//        _dto = Mapper.Map<ParentModel, ParentDto>(_parent);
//    }
//    [Fact(Skip = "This test breaks the Test Runner")]
//    public void Should_preserve_the_parent_child_relationship_on_the_destination()
//    {
//        _dto.Children[0].Parent.ID.ShouldBe(_dto.ID);
//    }
//    public class ChildIdToParentDtoConverter : ITypeConverter<int, ParentDto>
//    {
//        private readonly Dictionary<int, ParentModel> _parentModels;
//        public ChildIdToParentDtoConverter(Dictionary<int, ParentModel> parentModels)
//        {
//            _parentModels = parentModels;
//        }
//        public ParentDto Convert(int childId)
//        {
//            ParentModel parentModel = _parentModels[childId];
//            MappingEngine mappingEngine = (MappingEngine)Mapper.Engine;
//            return mappingEngine.Map<ParentModel, ParentDto>(parentModel);
//        }
//    }
//    public class ParentIdToChildDtoListConverter : ITypeConverter<int, List<ChildDto>>
//    {
//        private readonly IList<ChildModel> _childModels;
//        public ParentIdToChildDtoListConverter(IList<ChildModel> childModels)
//        {
//            _childModels = childModels;
//        }
//        protected override List<ChildDto> ConvertCore(int childId)
//        {
//            List<ChildModel> childModels = _childModels.Where(x => x.Parent.ID == childId).ToList();
//            MappingEngine mappingEngine = (MappingEngine)Mapper.Engine;
//            return mappingEngine.Map<List<ChildModel>, List<ChildDto>>(childModels);
//        }
//    }
//    public class ParentModel
//    {
//        public int ID { get; set; }
//    }
//    public class ChildModel
//    {
//        public int ID { get; set; }
//        public ParentModel Parent { get; set; }
//    }
//    public class ParentDto
//    {
//        public int ID { get; set; }
//        public List<ChildDto> Children { get; set; }
//    }
//    public class ChildDto
//    {
//        public int ID { get; set; }
//        public ParentDto Parent { get; set; }
//    }
//}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\BidirectionalRelationshipsWithoutPR.cs
//public class When_mapping_to_a_destination_with_a_bidirectional_parent_one_to_many_child_relationship_using_CustomMapper_StackOverflow : AutoMapperSpecBase
//{
//    private ParentDto _dto;
//    private ParentModel _parent;
//    protected override void Establish_context()
//    {
//        _parent = new ParentModel
//            {
//                ID = 2
//            };
//        List<ChildModel> childModels = new List<ChildModel>
//            {
//                new ChildModel
//                    {
//                        ID = 1,
//                        Parent = _parent
//                    }
//            };
//        Dictionary<int, ParentModel> parents = childModels.ToDictionary(x => x.ID, x => x.Parent);
//        Mapper.CreateMap<int, ParentDto>().ConvertUsing(new ChildIdToParentDtoConverter(parents));
//        Mapper.CreateMap<int, List<ChildDto>>().ConvertUsing(new ParentIdToChildDtoListConverter(childModels));
//        Mapper.CreateMap<ParentModel, ParentDto>()
//            .ForMember(dest => dest.Children, opt => opt.MapFrom(src => src.ID));
//        Mapper.CreateMap<ChildModel, ChildDto>();
//        config.AssertConfigurationIsValid();
//    }
//    protected override void Because_of()
//    {
//        _dto = Mapper.Map<ParentModel, ParentDto>(_parent);
//    }
//    [Fact(Skip = "This test breaks the Test Runner")]
//    public void Should_preserve_the_parent_child_relationship_on_the_destination()
//    {
//        _dto.Children[0].Parent.ID.ShouldBe(_dto.ID);
//    }
//    public class ChildIdToParentDtoConverter : ITypeConverter<int, ParentDto>
//    {
//        private readonly Dictionary<int, ParentModel> _parentModels;
//        public ChildIdToParentDtoConverter(Dictionary<int, ParentModel> parentModels)
//        {
//            _parentModels = parentModels;
//        }
//        public ParentDto Convert(int childId)
//        {
//            ParentModel parentModel = _parentModels[childId];
//            MappingEngine mappingEngine = (MappingEngine)Mapper.Engine;
//            return mappingEngine.Map<ParentModel, ParentDto>(parentModel);
//        }
//    }
//    public class ParentIdToChildDtoListConverter : ITypeConverter<int, List<ChildDto>>
//    {
//        private readonly IList<ChildModel> _childModels;
//        public ParentIdToChildDtoListConverter(IList<ChildModel> childModels)
//        {
//            _childModels = childModels;
//        }
//        protected override List<ChildDto> ConvertCore(int childId)
//        {
//            List<ChildModel> childModels = _childModels.Where(x => x.Parent.ID == childId).ToList();
//            MappingEngine mappingEngine = (MappingEngine)Mapper.Engine;
//            return mappingEngine.Map<List<ChildModel>, List<ChildDto>>(childModels);
//        }
//    }
//    public class ParentModel
//    {
//        public int ID { get; set; }
//    }
//    public class ChildModel
//    {
//        public int ID { get; set; }
//        public ParentModel Parent { get; set; }
//    }
//    public class ParentDto
//    {
//        public int ID { get; set; }
//        public List<ChildDto> Children { get; set; }
//    }
//    public class ChildDto
//    {
//        public int ID { get; set; }
//        public ParentDto Parent { get; set; }
//    }
//}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\BuildExecutionPlan.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\CollectionMapping.cs
// Problem
// Problem
// initially results in the following exception:
// ----> System.InvalidCastException : Unable to cast object of type 'System.Collections.Specialized.NameValueCollection' to type 'System.Collections.IList'.
// this was fixed by adding NameValueCollectionMapper to the MapperRegistry.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ConditionalMapping.cs
// justification: if the mapping works one way, it should work in reverse
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ConfigCompilation.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ConfigurationRules.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ConfigurationValidation.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Constructors.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ContextItems.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ConvensionTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ConversionOperators.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\CustomCollectionTester.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\CustomMapping.cs
//.ForMember(d => d.Value, o => o.ResolveUsing(s=>_guid));
//.ForMember(dest => dest.Number, opt => opt.ResolveUsing<CustomResolver, string>(src => src.NumberValue))
// destination = { Ident: 1, Number: 0 /* should be 13 */, ChildField: "alpha" }
/* should be 13 */, ChildField: "alpha" }
// AutoMapper tries to map source to this constructor's parameter,
// but does not take its member configuration into account
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Dictionaries.cs
//[Explicit("Need to resolve the assignable collection bug as well")]
//public class When_mapping_to_a_non_generic_dictionary : AutoMapperSpecBase
//{
//    private Destination _result;
//    public class Source
//    {
//        public Hashtable Values { get; set; }
//    }
//    public class Destination
//    {
//        public IDictionary Values { get; set; }
//    }
//    protected override void Establish_context()
//    {
//        Mapper.CreateMap<Source, Destination>();
//    }
//    protected override void Because_of()
//    {
//        var source = new Source
//            {
//                Values = new Hashtable
//                    {
//                        {"Key1", "Value1"},
//                        {"Key2", 4}
//                    }
//            };
//        _result = Mapper.Map<Source, Destination>(source);
//    }
//    [Fact]
//    public void Should_map_the_source_dictionary_with_all_keys_and_values_preserved()
//    {
//        _result.Values.Count.ShouldBe(2);
//        _result.Values["Key1"].ShouldBe("Value1");
//        _result.Values["Key2"].ShouldBe(4);
//    }
//}
// A wrapper for an IDictionary that implements IDictionary<TKey, TValue>
//
// The important difference from a standard generic BCL dictionary is that:
//
// ((IEnumerable)GenericWrappedDictionary).GetEnumerator() returns DictionaryEntrys
// GenericWrappedDictionary.GetEnumerator() returns KeyValuePairs
//
// This behaviour is demonstrated by NHibernate's PersistentGenericMap
// (which wraps a nongeneric PersistentMap).
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\DynamicMapping.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Enumerations.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\EnumToNullableEnum.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ExplicitMapperCreation.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ExpressionBridge.cs
//.ConvertUsing(x => ProductTypeDto.GetProdType(x));
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ExtensionMethods.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\FillingExistingDestination.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ForAllMaps.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ForAllMembers.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ForAllOtherMembers.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ForPath.cs
// destination types
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\General.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\IgnoreAllPropertiesWithAnInaccessibleSetterTests.cs
// Arrange
// Act
// Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\IgnoreAllTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Indexers.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\InterfaceMapping.cs
//and following mappings:
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Internationalization.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingExceptions.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingOrder.cs
// must be defined before property "One" to fail
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MapToAttributeTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MaxDepthTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MaxExecutionPlanDepth.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MemberNameReplacers.cs
//Mapper.AddMemberConvention().AddName<ReplaceName>(_ => _.AddReplace("A", "Ä").AddReplace("i", "í").AddReplace("Airline", "Airlina")).SetMemberInfo<FieldPropertyMemberInfo>();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MemberResolution.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\NestedContainers.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\NullBehavior.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ObjectSubstitution.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\OpenGenerics.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Profiles.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\PropertyMapContexts.cs
//using System;
//using Xunit;
//using Shouldly;
//namespace AutoMapper.UnitTests
//{
//    public class CustomValueResolverIsNotSuppliedWithContextPropertyMap
//    {
//        public class Source
//        {
//            public string CodeValue1 { get; set; }
//            public string CodeValue2 { get; set; }
//        }
//        public class DestinationDto
//        {
//            public CodeValueDto CodeValue1 { get; set; }
//            public CodeValueDto CodeValue2 { get; set; }
//        }
//        public class CodeValueDto
//        {
//            public string Code { get; set; }
//            public string Title { get; set; }
//            public string Type { get; set; }
//        }
//        public class CodeValueDtoResolver : IValueResolver
//        {
//            public object Resolve(object source, ResolutionContext context)
//            {
//                var propertyMap = context.PropertyMap;
//                propertyMap.ShouldNotBeNull();
//                var codeValueTypeId = propertyMap.SourceMember.DeclaringType.Name + ":" + propertyMap.SourceMember.Name;
//                return LookupCodeValue(codeValueTypeId, "" + source);
//            }
//            private CodeValueDto LookupCodeValue(string codeValueTypeId, string code)
//            {
//                switch (codeValueTypeId + "==" + code)
//                {
//                    case "Source:CodeValue1==Value1":
//                        return new CodeValueDto { Code = "" + code, Title = "lookup value for Value1==1" };
//                    case "Source:CodeValue2==Value1":
//                        return new CodeValueDto { Code = "" + code, Title = "lookup value for Value2==1" };
//                    default:
//                        throw new InvalidOperationException();
//                }
//            }
//        }
//        [Fact]
//        public void CustomValueResolver_Should_Be_Supplied_With_Current_PropertyMap()
//        {
//            var config = new MapperConfiguration(cfg => cfg.CreateMap<Source, DestinationDto>()
//              .ForMember(x => x.CodeValue1, o => o.ResolveUsing<CodeValueDtoResolver>().FromMember(y => y.CodeValue1))
//              .ForMember(x => x.CodeValue2, o => o.ResolveUsing<CodeValueDtoResolver>().FromMember(y => y.CodeValue2)));
//            var src = new Source { CodeValue1 = "Value1", CodeValue2 = "Value1" };
//            var dest = config.CreateMapper().Map<Source, DestinationDto>(src);
//            dest.CodeValue1.Title.ShouldBe("lookup value for Value1==1");
//            dest.CodeValue2.Title.ShouldBe("lookup value for Value2==1");
//        }
//    }
//}________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Regression.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ReverseMapping.cs
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ReverseMapWithoutPreserveReferences.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ReverseMapWithPreserveReferences.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\SeparateConfiguration.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ShouldUseConstructor.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\StaticMapping.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\TesterExtensions.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\TypeConverters.cs
// only needed for the xUnitRunner without AppDomains
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\TypeExtensionsTests.cs
//                typeof(Foo).GetProperties().Length.ShouldBe(4);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\UsingEngineInsideMap.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ValueTransformers.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\ValueTypes.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\When_using_ConfigurationExpression_Advanced.cs
// Nullable so can see a false state
// If sealed _typeMapCache is filled and should be able to Resolve tye TypeMap
// If not sealed _typeMapCache is empty and should return null
// Prove that sealed actualy seals
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\AddingConfigurationForNonMatchingDestinationMemberBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\AfterMapNestedObjects.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\AllowNullCollectionsAssignableArray.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\AllowNullDestinationValuesBugs.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\AssertConfigurationIsValidNullables.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\AssignableCollectionBug.cs
// arrange
// act
// assert
// in 3.1.0 source.Images.Count is 1
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\AutoMapperInheritanceProblemDemo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\BaseMapWithIncludesAndUnincludedMappings.cs
// Throws invalid cast exception trying to convert BDTO2 to BDTO
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CannotConvertEnumToNullable.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CannotMapICollectionToAggregateSumDestination.cs
// arrange
// act
// do nothing
// assert
// arrange
// act
// assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CannotProjectIEnumerableToAggregateDestinations.cs
// arrange
// act
// assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CannotProjectStringToNullableEnum.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CaseSensitivityBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CollectionBaseClassGetConvention.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CollectionMapperMapsISetIncorrectly.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CollectionsNullability.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CollectionWhere.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ConditionBug.cs
//;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ConstructorParameterNamedType.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ConstructUsingReturnsNull.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ContextValuesIncorrect.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ConventionCreateMapsWithCircularReference.cs
//cfg.CreateMap<User, UserPoco>().ReverseMap();
//cfg.CreateMap<Role, RolePoco>().ReverseMap();
//cfg.CreateMap<UsersInRole, UsersInRolePoco>().ReverseMap();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ConvertMapperThreading.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CreateMapExpressionWithIgnoredPropertyBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CustomConverters.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\CustomIEnumerableBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\DeepCloningBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\DeepInheritanceIssue.cs
// THROWS
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\DestinationCtorCalledTwice.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\DestinationValueInitializedByCtorBug.cs
/* Remove the line below and the mapping works correctly*/
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\DuplicateExtensionMethods.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\DuplicateValuesBug.cs
// This causes the problem
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\DuplicateValuesBugWithoutPR.cs
// This causes the problem
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\DynamicMapArrays.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\EFCollections.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\EmptyNullSubstituteBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\EnumConditionsBug.cs
// will throw
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\EnumMatchingOnValue.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ExistingArrays.cs
// remove this line will get it fixed. 
// remove this line will get it fixed. 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ForAllMembersAndDoNotUseDestinationValue.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\GenericTypeConverter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\GuidTryExpression.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\IgnoreAll.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\IncludeBaseInheritance.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\IncludeInheritance.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\InitializeNRE.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\InterfaceMultipleInheritance.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\InterfaceSelfMappingBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\InternalProperties.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\IntToNullableDecimal.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\JsonNet.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\LazyCollectionMapping.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ListSourceMapperBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapExpandoObjectProperty.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapFromClosureBug.cs
// Act
// Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapOverloadsWithDynamic.cs
// The SubSettings property is another ExpandoObject.
// Create another object we will map onto the one above. 
// Notice that we do not set a Colour or SubColour property.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MappingInheritance.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MappingToAReadOnlyCollection.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MemberNamedTypeBug.cs
// Since the name of the parameter is 'type', Automapper.TypeMapFactory chooses SourceClass.GetType()
// to fulfill the dependency, causing an InvalidCastException during Mapper.Map()
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MissingMapping.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MultidimensionalArrays.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MultipleInterfaceInheritance.cs
// everything works well if IItem doesn't inherit ISome.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MultipleTypeConverterInterfaces.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MultiThreadingIssues.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NamingConventions.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NestedMappingProjectionsExplicitExpanding.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NonExistingProperty.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullableBytesAndEnums.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullableConverterBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullableDateTime.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullableEnums.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullableEnumToNullableValueType.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullableIntToNullableDecimal.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullableIntToNullableEnum.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullablePropertiesBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullableResolveUsing.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullableToInvalid.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullableUntypedMapFrom.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullArrayBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullSubstituteInnerClass.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullSubstituteType.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\NullToString.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ObjectEnumToObjectEnum.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ObjectTypeMapFailure.cs
// fails
// succeeds
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\OneSourceWithMultipleDestinationsAndPreserveReferences.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\OneSourceWithMultipleDestinationsWithoutPR.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ParentChildResolversBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\PreserveReferencesSameDestination.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ProjectCollectionsBug.cs
//config.AssertConfigurationIsValid();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ProjectConstructorParameters.cs
//_dest = Mapper.Map<Source, SourceDto>(source);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ProjectUsingTheQueriedEntity.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\PropertyNamedType.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ReadOnlyCollectionMappingBug.cs
// Bug #511
// https://github.com/AutoMapper/AutoMapper/issues/511
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ReadOnlyFieldMappingBug.cs
// BUG. ArgumentException : Expression must be writeable
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\RecognizeDestinationPostfixes.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\RecognizeIxesBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\RemovePrefixes.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\RepeatedMappingConfigurationTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ReportMissingInclude.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\ReverseMapReplaceMemberName.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\SamePropertyNameOnParentAndChildClasses.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\SelectiveConfigurationValidation.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\SequenceContainsNoElementsTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\SetterOnlyBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\StructMapping.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\SubclassMappings.cs
// Works
// Fails
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\TargetISet.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\TypeMapIncludeBaseTypes.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\UseDestinationValue.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\WithoutPreserveReferencesSameDestination.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\BaseEntity.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\BaseEntityDTO.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity10.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity11.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity12.cs
//this.Entities20 = new Entity20();
//this.Entities14 = new Entity14();
//this.Entities16 = new Entity16();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity13.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity14.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity15.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity16.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity17.cs
//this.Entities20 = new Entity20();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity18.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity19.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity20.cs
//this.Entities8 = new Entity8();
//this.Entities26 = new Entity26();
//this.Entities12 = new Entity12();
//this.Entities17 = new Entity17();
//this.Entities21 = new Entity21();
//this.Entities16 = new Entity16();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity21.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity22.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity23.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity24.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity25.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity26.cs
//this.Entities20 = new Entity20();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity3.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity4.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity5.cs
//this.Entities6 = new Entity6();
//this.TimeSlots = new Entity23();
//this.Entities5 = new Entity5();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity6.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity7.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity8.cs
//this.Entities20 = new Entity20();
//this.Entities22 = new Entity22();
//this.Entities3 = new Entity3();
//this.Entities11 = new Entity11();
//this.Entities17 = new Entity17();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\Entity9.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO10.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO11.cs
//this.Entities10 = new EntityDTO10();
//this.Entities8 = new EntityDTO8();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO12.cs
//this.Entities20 = new EntityDTO20();
//this.Entities14 = new EntityDTO14();
//Entities16 = new EntityDTO16();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO13.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO14.cs
//public Address Address { get; set; }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO15.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO16.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO17.cs
//this.Entities20 = new EntityDTO20();
//this.Entities8 = new EntityDTO8();
//this.Entities5 = new EntityDTO5();
//this.Entities18 = new EntityDTO18();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO18.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO19.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO20.cs
//TODO Remove comments
//this.Entities8 = new EntityDTO8();
//this.Entities26 = new EntityDTO26();
//this.Entities12 = new EntityDTO12();
//this.Entities17 = new EntityDTO17();
//this.Entities21 = new EntityDTO21();
//this.Entities16 = new EntityDTO16();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO21.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO22.cs
//this.Entities20 = new EntityDTO20();
//this.Entities24 = new EntityDTO24();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO23.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO24.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO25.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO26.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO3.cs
//this.Entities4 = new EntityDTO4();
//this.Entities8 = new EntityDTO8();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO4.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO5.cs
//this.Entities6 = new EntityDTO6();
//this.TimeSlots = new EntityDTO23();
//this.Entities5 = new EntityDTO5();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO6.cs
//this.Entities12 = new EntityDTO12();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO7.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO8.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\EntityDTO9.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntime\MapAtRuntime.cs
//cfg.ForAllPropertyMaps(p => !p.SourceType.IsValueType(), (pm, o) => o.MapAtRuntime());
//List of objects performing slow
//Entity1
//Entity17
//Entity25
//Entity19
//Entity15
//Entity13
//Entity7
//Entity5
//Entity2
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\BaseEntity.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\BaseEntityDTO.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity10.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity11.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity12.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity13.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity14.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity15.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity16.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity17.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity18.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity19.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity20.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity21.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity22.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity23.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity24.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity25.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity26.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity3.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity4.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity5.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity6.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity7.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity8.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\Entity9.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO10.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO11.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO12.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO13.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO14.cs
//public Address Address { get; set; }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO15.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO16.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO17.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO18.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO19.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO20.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO21.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO22.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO23.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO24.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO25.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO26.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO3.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO4.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO5.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO6.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO7.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO8.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\EntityDTO9.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Bug\MapAtRuntimeWithCollections\MapAtRuntimeWithCollections.cs
//cfg.ForAllPropertyMaps(p => !p.SourceType.IsValueType(), (pm, o) => o.MapAtRuntime());
//List of objects performing slow
//Entity1
//Entity17
//Entity25
//Entity19
//Entity15
//Entity13
//Entity7
//Entity5
//Entity2
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\IMappingExpression\ForCtorParam.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\IMappingExpression\NonGenericConstructorTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\IMappingExpression\NonGenericProjectEnumTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\IMappingExpression\NonGenericResolveUsing.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\IMappingExpression\NonGenericReverseMapping.cs
//Arrange
//Act
//Assert
//Arrange
//Act
//Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Internal\CreateProxyThreading.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Internal\DelegateFactoryTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Internal\GenerateSimilarType.cs
// this is broken in .NET Core 1.1 see https://github.com/dotnet/corefx/issues/7596
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Internal\NullConstructorParameter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Internal\PrimitiveExtensionsTester.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Internal\QueryMapperHelperTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Mappers\ConvertMapperTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Mappers\CustomMapperTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Mappers\DynamicMapperTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Mappers\NameValueCollectionMapperTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Mappers\ReadOnlyCollectionMapperTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Mappers\StringDictionaryMapperTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Mappers\TypeHelperTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\ApplyIncludeBaseRecursively.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\ConventionMappedCollectionShouldMapBaseTypes.cs
// Getting an exception casting from SpecificItemDto to GeneralItemDto 
// because it is selecting too specific a mapping for the collection.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\IgnoreShouldBeInherited.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\IgnoreShouldBeInheritedIfConventionCannotMap.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\IncludeBaseBug.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\IncludeBaseShouldNotCreateMaps.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\IncludeBaseShouldValidateTypes.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\IncludeBaseWithNonGenericUsage.cs
// It does not matter if generic type is <String> or <>, result is the same.
// It does not matter if generic type is <String> or <>, result is the same.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\IncludedBaseMappingShouldInheritBaseMappings.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\IncludedMappingShouldInheritBaseMappings.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\InheritanceWithoutIncludeShouldWork.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\MapToBaseClass.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\MultipleInheritedBaseMappingsOfSameTypeFails.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\OpenGenericsWithInheritance.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\OverrideIgnore.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\PreserveReferencesWithInheritance.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\PropertyOnMappingShouldResolveMostSpecificType.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\ReverseMapWithInclude.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\ShouldInheritBeforeAndAfterMap.cs
// arrange
// act
// assert
// arrange
// act
// assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\ShouldSupportOnlyDestinationTypeBeingDerived.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\MappingInheritance\SourceValidationWithInheritance.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\BindersAndResultConverters.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\ConstructorTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\ExplicitExpansion.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\ExplicitValues.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\GenericsTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\InheritedMaps.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\MapFromTest.cs
//null reference exception here
//ArgumentNullException here
//ArgumentNullException here
//ArgumentNullException here
//ArgumentNullException here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\MembersToExpand_ExpressionArray.cs
// Example of Reference Type
// Example of Value Type mapped to appropriate Nullable
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\MoreExplanatoryExceptionTests.cs
// Arrange
// Act
// Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\NestedAndArraysTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\NestedExpressionsMapFromTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\NonGenericQueryableTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\NullableItemsTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\NullSubstitutes.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\ParameterizedQueriesTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\PrimitiveArraysTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\ProjectCollectionEnumerableTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\ProjectCollectionListTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\ProjectEnumerableToArrayTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\ProjectEnumTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\ProjectionTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\ProjectTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Projection\ToStringTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Tests\MapperTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Tests\TypeInfoSpecs.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\AutoMapper\src\UnitTests\Tests\TypeMapFactorySpecs.cs
//mappingOptions.SourceMemberNamingConvention = new PascalCaseNamingConvention();
//mappingOptions.DestinationMemberNamingConvention = new PascalCaseNamingConvention();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\IPlugin.cs
/// <summary>
/// The Ember Media Manager plug-in interface.
/// </summary>
/// <summary>
/// The name of the plug-in.
/// </summary>
/// <summary>
/// The assembly name of the plug-in.
/// </summary>
/// <summary>
/// The plug-in version.
/// </summary>
/// <summary>
/// The plug-in manager.
/// </summary>
/// <summary>
/// Initialises the plugin.
/// </summary>
/// <param name="manager">The plugin manager.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\PluginActionContext.cs
/// <summary>
/// Context for a plugin action.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\PluginActionResult.cs
/// <summary>
/// The result of a plug-in action.
/// </summary>
/// <summary>
/// Gets a value indicating whether the action was cancelled.
/// </summary>
/// <value>
///   <c>true</c> if cancelled; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Gets a value indicating whether this action chain should be broken.
/// </summary>
/// <value>
///   <c>true</c> if the action chain should be broken; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Gets the result of the action.
/// </summary>
/// <summary>
/// Gets any exception thrown by the action.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="PluginActionResult"/> class.
/// </summary>
/// <param name="cancelled">if set to <c>true</c> this action was cancelled.</param>
/// <param name="breakChain">if set to <c>true</c> this action chain should be broken.</param>
/// <param name="result">The result.</param>
/// <param name="error">The error.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\PluginBase.cs
/// <summary>
/// A basic implementation of the plug-in interface.
/// </summary>
/// <summary>
/// The name of the plug-in.
/// </summary>
/// <summary>
/// The assembly name of the plug-in.
/// </summary>
/// <summary>
/// The plug-in version.
/// </summary>
/// <summary>
/// The plug-in manager.
/// </summary>
/// <summary>
/// Initialises the plugin.
/// </summary>
/// <param name="manager">The plugin manager.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\PluginManager.cs
/// <summary>
/// The plug-in manager for Ember Media Manager.
/// </summary>
/// <summary>
/// Occurs when a plugin wants to show a form on the UI thread.
/// </summary>
/// <summary>
/// Gets the loaded plug-ins.
/// </summary>
/// <summary>
/// Gets the Ember.Plugins settings.
/// </summary>
/// <summary>
/// Gets the movie scraper.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="PluginManager"/> class.
/// </summary>
/// <summary>
/// Loads and initialise plug-ins listed in the configuration file.
/// </summary>
// Plug-ins loaded by Ember.Plugins.PluginSectionHandler
/// <summary>
/// Show a form on the UI thread.
/// </summary>
/// <param name="plugin">The plugin making the call.</param>
/// <param name="form">The form to show.</param>
/// <param name="asDialog">if set to <c>true</c> as show as a dialog.</param>
/// <summary>
/// Gets a value indicating whether the plug-in manager has been disposed of.
/// </summary>
/// <value>
/// 	<c>true</c> if this instance has been disposed of; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Releases any resources used by the plug-in manager or the loaded plug-ins that implement IDisposable.
/// </summary>
/// <summary>
/// Releases unmanaged and - optionally - managed resources
/// </summary>
/// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
// Free other state (managed objects).
// Free your own state (unmanaged objects).
// Set large fields to null.
/// <summary>
/// Releases unmanaged resources and performs other cleanup operations before the
/// <see cref="PluginManager"/> is reclaimed by garbage collection.
/// </summary>
/// <summary>
/// A container for a plug-in.
/// </summary>
/// <summary>
/// Gets the plug-in.
/// </summary>
/// <summary>
/// Gets or sets a value indicating whether this <see cref="EmberPlugin"/> is enabled.
/// </summary>
/// <value>
///   <c>true</c> if enabled; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Gets or sets the order this plug-in is called.
/// </summary>
/// <value>
/// The order this plug-in is called..
/// </value>
/// <summary>
/// Initializes a new instance of the <see cref="EmberPlugin"/> class.
/// </summary>
/// <param name="plugin">The plug-in.</param>
/// <param name="enabled">if set to <c>true</c> the plug-in is enabled.</param>
/// <param name="order">The order this plug-in is called.</param>
/// <summary>
/// Compares the current object with another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
/// Value
/// Meaning
/// Less than zero
/// This object is less than the <paramref name="other"/> parameter.
/// Zero
/// This object is equal to <paramref name="other"/>.
/// Greater than zero
/// This object is greater than <paramref name="other"/>.
/// </returns>
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\PluginSectionHandler.cs
/// <summary>
/// A class to parse plugins section from Application Config
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="PluginSectionHandler"/> class.
/// </summary>
/// <summary>
/// Creates a configuration section handler.
/// </summary>
/// <param name="parent">Parent object.</param>
/// <param name="configContext">Configuration context object.</param>
/// <param name="section">Section XML node.</param>
/// <returns>
/// The created section handler object.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Utility.cs
/// <summary>
/// Utility Methods
/// </summary>
/// <summary>
/// Combines multiple path elements.
/// </summary>
/// <param name="paths">Paths to combine.</param>
/// <returns>The combined path.</returns>
/// <summary>
/// Sanitises an IMDb ID.
/// </summary>
/// <param name="imdbId">The IMDb ID.</param>
/// <returns>An IMDb ID in the proper format or an empty string if it's invalid.</returns>
/// <remarks>This won't be needed in the future once the EmberAPI code has been cleaned up.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Dummy\DummyPlugin.cs
/// <summary>
/// The name of the plug-in.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Ember\EmberWorkAroundPlugin.cs
/// <summary>
/// The name of the plug-in.
/// </summary>
/// <summary>
/// Fixes the title and year before scraping movie info.
/// </summary>
/// <param name="context">The context.</param>
/// <returns></returns>
// Check for titles that end with the, a or an that should be at the
// start of the title.
// if year is unset try and scrape it from the file name.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Events\MovieScraper.cs
/// <summary>
/// Delegate for PreMovieInfoScraperAction.
/// </summary>
/// <param name="context">The context.</param>
/// <returns></returns>
/// <summary>
/// Delegate for PostMovieInfoScraperAction.
/// </summary>
/// <param name="result">The result.</param>
/// <returns></returns>
/// <summary>
/// Delegate for PreMovieImageScraperAction.
/// </summary>
/// <param name="context">The context.</param>
/// <returns></returns>
/// <summary>
/// Delegate for PostMovieImageScraperAction.
/// </summary>
/// <param name="result">The result.</param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Events\ShowFormOnUIThread.cs
/// <summary>
/// A delegate to show a form on the UI thread.
/// </summary>
/// <param name="sender">The plugin making the call.</param>
/// <param name="e">The <see cref="ShowFormOnUIThreadEventArgs"/> instance containing the event data.</param>
/// <summary>
/// Event arguments for ShowFormOnUIThreadHandler
/// </summary>
/// <summary>
/// Gets the form to be shown.
/// </summary>
/// <summary>
/// Gets a value indicating whether the form should be show as a dialog.
/// </summary>
/// <value>
///   <c>true</c> if it should be shown as a dialog; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Initializes a new instance of the <see cref="ShowFormOnUIThreadEventArgs"/> class.
/// </summary>
/// <param name="form">The form to be shown.</param>
/// <param name="asDialog">if set to <c>true</c> as dialog.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Properties\Settings.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Scraper\Exceptions.cs
/// <summary>
/// Exception thrown when a scrape has been cancelled.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Scraper\ImageScrapeActionContext.cs
/// <summary>
/// The type of image scrape to perform.
/// </summary>
/// <summary>
/// Scrape a poster.
/// </summary>
/// <summary>
/// Scrape fanart.
/// </summary>
/// <summary>
/// Context for image scraper actions.
/// </summary>
/// <summary>
/// Gets the type of image scrape to perform.
/// </summary>
/// <value>
/// The type of image scrape to perform.
/// </value>
/// <summary>
/// Initializes a new instance of the <see cref="ImageScrapeActionContext"/> class.
/// </summary>
/// <param name="imageScrapeType">Type of the image scrape.</param>
/// <param name="scrapeType">Type of the scrape.</param>
/// <param name="askIfMultipleResults">if set to <c>true</c> [ask if multiple results].</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Scraper\IMovieImageScraper.cs
/// <summary>
/// Defines a movie image scraper.
/// </summary>
/// <summary>
/// Scrapes the movie posters.
/// </summary>
/// <param name="context">The context.</param>
/// <returns></returns>
/// <summary>
/// Context for a movie image scraper action.
/// </summary>
/// <summary>
/// Gets the movie.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="MovieImageScraperActionContext"/> class.
/// </summary>
/// <param name="dbMovie">The movie.</param>
/// <param name="scrapeType">The type of scrape to perform.</param>
/// <param name="askIfMultipleResults">if set to <c>true</c> ask the user to select a movie if multiple results are found.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Scraper\IMovieInfoScraper.cs
/// <summary>
/// Defines a movie information scraper.
/// </summary>
/// <summary>
/// Scrapes the movie info.
/// </summary>
/// <param name="context">The context.</param>
/// <returns></returns>
/// <summary>
/// Context for a movie information scraper action.
/// </summary>
/// <summary>
/// Gets the movie.
/// </summary>
/// <summary>
/// Gets the global scraper options.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="MovieInfoScraperActionContext"/> class.
/// </summary>
/// <param name="dbMovie">The movie.</param>
/// <param name="scrapeType">The type of scrape to perform.</param>
/// <param name="askIfMultipleResults">if set to <c>true</c> ask the user to select a movie if multiple results are found.</param>
/// <param name="options">The global scraper options.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Scraper\ITVImageScraper.cs
/// <summary>
/// Defines a TV show image scraper.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Scraper\ITVInfoScraper.cs
/// <summary>
/// Defines a TV show information scraper.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Scraper\MovieScraperManager.cs
/// <summary>
/// The main interface for calling movie scraper plug-ins.
/// </summary>
/// <summary>
/// Occurs before movie information is scraped.
/// </summary>
/// <summary>
/// Occurs after movie information is scraped.
/// </summary>
/// <summary>
/// Occurs before movie poster is scraped.
/// </summary>
/// <summary>
/// Occurs after movie poster is scraped.
/// </summary>
/// <summary>
/// Scrapes the movie info.
/// </summary>
/// <param name="context">The context.</param>
/// <returns></returns>
/// <summary>
/// Scrapes the movie posters.
/// </summary>
/// <param name="context">The context.</param>
/// <returns></returns>
/// <summary>
/// Gets a value indicating whether the plug-in manager has been disposed of.
/// </summary>
/// <value>
/// 	<c>true</c> if this instance has been disposed of; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Releases resources used by this object.
/// </summary>
/// <summary>
/// Releases unmanaged and - optionally - managed resources
/// </summary>
/// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
// Free other state (managed objects).
// Free your own state (unmanaged objects).
// Set large fields to null.
/// <summary>
/// Releases unmanaged resources and performs other cleanup operations before the
/// <see cref="PluginManager"/> is reclaimed by garbage collection.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Ember-MM\Ember.Plugins\Scraper\ScraperActionContext.cs
/// <summary>
/// The type of scrape to perform.
/// </summary>
/// <summary>
/// A manual scraped.
/// </summary>
/// <summary>
/// An automatic scrape.
/// </summary>
/// <summary>
/// Context for scraper actions.
/// </summary>
/// <summary>
/// Gets the type of scrape to perform.
/// </summary>
/// <value>
/// The type of scrape to perform.
/// </value>
/// <summary>
/// Gets a value indicating whether to ask or select the best match if multiple results are returned.
/// </summary>
/// <value>
/// 	<c>true</c> if the user should be asked to select a movie if multiple results are found; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Initializes a new instance of the <see cref="ScraperActionContext"/> class.
/// </summary>
/// <param name="scrapeType">The type of scrape to perform.</param>
/// <param name="askIfMultipleResults">if set to <c>true</c> ask the user to select a movie if multiple results are found.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\AssemblyInfo.cs
// <auto-generated>
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\autogenerated_comment.cs
// this is in no way <auto-generated
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\autogenerated_comment2.cs
// this is <autogenerated
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\autogenerated_comment3.cs
// Generated by the protocol buffer compiler. DO NOT EDIT!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\autogenerated_comment4.cs
/*
//github.com/swagger-api/swagger-codegen.git
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\class.designer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\class.g.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\class.g.something.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\class.generated.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\class_generated.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\compiler_generated.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\compiler_generated_attr.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\debugger_non_user_code.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\debugger_non_user_code_attr.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\generated_code_attr.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\generated_code_attr2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\generated_region.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\generated_region_2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\handwritten.cs
// this file does not get ignored
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\GeneratedCode\TEMPORARYGENERATEDFILE_class.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\ManuallyAddedNoncompliantIssues\IntentionalFindings\AssemblyInfo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\ManuallyAddedNoncompliantIssues\IntentionalFindings\S2251.cs
/*
// 'i' is incremented and will never reach 'stop condition'
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\ManuallyAddedNoncompliantIssues\IntentionalFindings\S2479.cs
/*
// this string contains a \u200B character
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\ManuallyAddedNoncompliantIssues\IntentionalFindings\S2857.cs
/*
// will generate S1128
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\ManuallyAddedNoncompliantIssues\IntentionalFindings\S3949.cs
// Noncompliant {{There is a path on which this operation always overflows}}
// Noncompliant {{There is a path on which this operation always overflows}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\ManuallyAddedNoncompliantIssues\IntentionalFindings\S4487.cs
/*
// unread field
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\ManuallyAddedNoncompliantIssues\IntentionalFindings\S4635.cs
/*
// A new string is going to be created by 'Substring'.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\ManuallyAddedNoncompliantIssues\IntentionalFindings\S4830.cs
/*
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\ManuallyAddedNoncompliantIssues\IntentionalFindings\S5547.cs
/*
//Noncompliant: Triple DES is vulnerable to meet-in-the-middle attack
//Noncompliant: DES works with 56-bit keys allow attacks via exhaustive search
//Noncompliant: RC2 is vulnerable to a related-key attack
//Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\SharedAssemblyInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\AfterPipeline.cs
/// <summary>
/// Wraps a sync delegate into it's async form
/// </summary>
/// <param name="pipelineItem">Sync pipeline item instance</param>
/// <returns>Async pipeline item instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\AsyncNamedPipelineBase.cs
/// <summary>
/// Pipeline items to execute
/// </summary>
/// <summary>
/// Gets the current pipeline items
/// </summary>
/// <summary>
/// Gets the current pipeline item delegates
/// </summary>
/// <summary>
/// Add an item to the start of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <summary>
/// Add an item to the start of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <summary>
/// Add an item to the start of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <param name="replaceInPlace">
/// Whether to replace an existing item with the same name in its current place,
/// rather than at the position requested. Defaults to false.
/// </param>
/// <summary>
/// Add an item to the start of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <param name="replaceInPlace">
/// Whether to replace an existing item with the same name in its current place,
/// rather than at the position requested. Defaults to false.
/// </param>
/// <summary>
/// Add an item to the end of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <summary>
/// Add an item to the end of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <summary>
/// Add an item to the end of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <param name="replaceInPlace">
/// Whether to replace an existing item with the same name in its current place,
/// rather than at the position requested. Defaults to false.
/// </param>
/// <summary>
/// Add an item to the end of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <param name="replaceInPlace">
/// Whether to replace an existing item with the same name in its current place,
/// rather than at the position requested. Defaults to false.
/// </param>
/// <summary>
/// Add an item to a specific place in the pipeline.
/// </summary>
/// <param name="index">Index to add at</param>
/// <param name="item">Item to add</param>
/// <summary>
/// Add an item to a specific place in the pipeline.
/// </summary>
/// <param name="index">Index to add at</param>
/// <param name="item">Item to add</param>
/// <summary>
/// Add an item to a specific place in the pipeline.
/// </summary>
/// <param name="index">Index to add at</param>
/// <param name="item">Item to add</param>
/// <param name="replaceInPlace">
/// Whether to replace an existing item with the same name in its current place,
/// rather than at the position requested. Defaults to false.
/// </param>
/// <summary>
/// Add an item to a specific place in the pipeline.
/// </summary>
/// <param name="index">Index to add at</param>
/// <param name="item">Item to add</param>
/// <param name="replaceInPlace">
/// Whether to replace an existing item with the same name in its current place,
/// rather than at the position requested. Defaults to false.
/// </param>
/// <summary>
/// Insert an item before a named item.
/// If the named item does not exist the item is inserted at the start of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert before</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Insert an item before a named item.
/// If the named item does not exist the item is inserted at the start of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert before</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Insert an item before a named item.
/// If the named item does not exist the item is inserted at the start of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert before</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Insert an item before a named item.
/// If the named item does not exist the item is inserted at the start of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert before</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Insert an item after a named item.
/// If the named item does not exist the item is inserted at the end of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert after</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Insert an item after a named item.
/// If the named item does not exist the item is inserted at the end of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert after</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Insert an item after a named item.
/// If the named item does not exist the item is inserted at the end of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert after</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Insert an item after a named item.
/// If the named item does not exist the item is inserted at the end of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert after</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Remove a named pipeline item
/// </summary>
/// <param name="name">Name</param>
/// <returns>Index of item that was removed or -1 if nothing removed</returns>
/// <summary>
/// Wraps a sync delegate into it's async form
/// </summary>
/// <param name="syncDelegate">Sync pipeline instance</param>
/// <returns>Async pipeline instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\BeforePipeline.cs
/// <summary>
/// Wraps a sync delegate into it's async form
/// </summary>
/// <param name="pipelineItem">Sync pipeline item instance</param>
/// <returns>Async pipeline item instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DefaultNancyBootstrapper.cs
/// <summary>
/// TinyIoC bootstrapper - registers default route resolver and registers itself as
/// INancyModuleCatalog for resolving modules but behavior can be overridden if required.
/// </summary>
/// <summary>
/// Default assemblies that are ignored for autoregister
/// </summary>
/// <summary>
/// Gets the assemblies to ignore when autoregistering the application container
/// Return true from the delegate to ignore that particular assembly, returning false
/// does not mean the assembly *will* be included, a true from another delegate will
/// take precedence.
/// </summary>
/// <summary>
/// Configures the container using AutoRegister followed by registration
/// of default INancyModuleCatalog and IRouteResolver.
/// </summary>
/// <param name="container">Container instance</param>
/// <summary>
/// Resolve INancyEngine
/// </summary>
/// <returns>INancyEngine implementation</returns>
/// <summary>
/// Create a default, unconfigured, container
/// </summary>
/// <returns>Container instance</returns>
/// <summary>
/// Registers an <see cref="INancyEnvironment"/> instance in the container.
/// </summary>
/// <param name="container">The container to register into.</param>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance to register.</param>
/// <summary>
/// Register the bootstrapper's implemented types into the container.
/// This is necessary so a user can pass in a populated container but not have
/// to take the responsibility of registering things like INancyModuleCatalog manually.
/// </summary>
/// <param name="applicationContainer">Application container to register into</param>
/// <summary>
/// Register the default implementations of internally used types into the container as singletons
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="typeRegistrations">Type registrations to register</param>
/// <summary>
/// Register the various collections into the container as singletons to later be resolved
/// by IEnumerable{Type} constructor dependencies.
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="collectionTypeRegistrations">Collection type registrations to register</param>
/// <summary>
/// Register the given module types into the container
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="moduleRegistrationTypes">NancyModule types</param>
/// <summary>
/// Register the given instances into the container
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="instanceRegistrations">Instance registration types</param>
/// <summary>
/// Creates a per request child/nested container
/// </summary>
/// <param name="context">Current context</param>
/// <returns>Request container instance</returns>
/// <summary>
/// Gets the <see cref="INancyEnvironmentConfigurator"/> used by th.
/// </summary>
/// <returns>An <see cref="INancyEnvironmentConfigurator"/> instance.</returns>
/// <summary>
/// Gets the diagnostics for initialization
/// </summary>
/// <returns>IDiagnostics implementation</returns>
/// <summary>
/// Gets all registered startup tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IApplicationStartup"/> instances. </returns>
/// <summary>
/// Gets all registered request startup tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IRequestStartup"/> instances.</returns>
/// <summary>
/// Gets all registered application registration tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IRegistrations"/> instances.</returns>
/// <summary>
/// Get the <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <returns>An configured <see cref="INancyEnvironment"/> instance.</returns>
/// <remarks>The boostrapper must be initialised (<see cref="INancyBootstrapper.Initialise"/>) prior to calling this.</remarks>
/// <summary>
/// Retrieve all module instances from the container
/// </summary>
/// <param name="container">Container to use</param>
/// <returns>Collection of NancyModule instances</returns>
/// <summary>
/// Retrieve a specific module instance from the container
/// </summary>
/// <param name="container">Container to use</param>
/// <param name="moduleType">Type of the module</param>
/// <returns>NancyModule instance</returns>
/// <summary>
/// Executes auto registration with the given container.
/// </summary>
/// <param name="container">Container instance</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DefaultNancyContextFactory.cs
/// <summary>
/// Creates NancyContext instances
/// </summary>
/// <summary>
/// Creates a new instance of the <see cref="DefaultNancyContextFactory"/> class.
/// </summary>
/// <param name="cultureService">An <see cref="ICultureService"/> instance.</param>
/// <param name="requestTraceFactory">An <see cref="IRequestTraceFactory"/> instance.</param>
/// <param name="textResource">An <see cref="ITextResource"/> instance.</param>
/// <summary>
/// Create a new <see cref="NancyContext"/> instance.
/// </summary>
/// <returns>A <see cref="NancyContext"/> instance.</returns>
// Move this to DefaultRequestTrace.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DefaultObjectSerializer.cs
/// <summary>
/// Serialize an object
/// </summary>
/// <param name="sourceObject">Source object</param>
/// <returns>Serialised object string</returns>
/// <summary>
/// Deserialize an object string
/// </summary>
/// <param name="sourceString">Source object string</param>
/// <returns>Deserialized object</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DefaultResponseFormatter.cs
/// <summary>
/// The default implementation of the <see cref="IResponseFormatter"/> interface.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultResponseFormatter"/> class.
/// </summary>
/// <param name="rootPathProvider">The <see cref="IRootPathProvider"/> that should be used by the instance.</param>
/// <param name="context">The <see cref="NancyContext"/> that should be used by the instance.</param>
/// <param name="serializerFactory">An <see cref="ISerializerFactory" /> instance"/>.</param>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
/// <summary>
/// Gets all <see cref="ISerializerFactory"/> factory.
/// </summary>
/// <summary>
/// Gets the context for which the response is being formatted.
/// </summary>
/// <value>A <see cref="NancyContext"/> instance.</value>
/// <summary>
/// Gets the <see cref="INancyEnvironment"/>.
/// </summary>
/// <value>An <see cref="INancyEnvironment"/> instance.</value>
/// <summary>
/// Gets the root path of the application.
/// </summary>
/// <value>A <see cref="string"/> containing the root path.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DefaultResponseFormatterFactory.cs
/// <summary>
/// The default implementation of the <see cref="IResponseFormatterFactory"/> interface.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultResponseFormatter"/> class.
/// </summary>
/// <param name="rootPathProvider">An <see cref="IRootPathProvider"/> instance.</param>
/// <param name="serializerFactory">An <see cref="ISerializerFactory"/> instance.</param>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
/// <summary>
/// Creates a new <see cref="IResponseFormatter"/> instance.
/// </summary>
/// <param name="context">The <see cref="NancyContext"/> instance that should be used by the response formatter.</param>
/// <returns>An <see cref="IResponseFormatter"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DefaultRootPathProvider.cs
/// <summary>
/// Default implementation of <see cref="IRootPathProvider"/>.
/// </summary>
/// <summary>
/// Returns the root folder path of the current Nancy application.
/// </summary>
/// <returns>A <see cref="string"/> containing the path of the root folder.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DefaultRuntimeEnvironmentInformation.cs
/// <summary>
/// Default implementation of the <see cref="IRuntimeEnvironmentInformation"/> interface.
/// </summary>
/// <summary>
/// Gets a value indicating if the application is running in debug mode.
/// </summary>
/// <returns><see langword="true"/> if the application is running in debug mode, otherwise <see langword="false"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DefaultSerializerFactory.cs
/// <summary>
/// Default implementation of the <see cref="ISerializerFactory"/> interface.
/// </summary>
/// <remarks>This implementation will ignore the default implementations (those found in the Nancy assembly) unless no other match could be made.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultSerializerFactory"/> class,
/// with the provided <paramref name="serializers"/>.
/// </summary>
/// <param name="serializers">The <see cref="ISerializer"/> implementations that should be available to the factory.</param>
/// <summary>
/// Gets the <see cref="ISerializer"/> implementation that can serialize the provided <paramref name="mediaRange"/>.
/// </summary>
/// <param name="mediaRange">The <see cref="MediaRange"/> to get a serializer for.</param>
/// <returns>An <see cref="ISerializer"/> instance, or <see langword="null" /> if not match was found.</returns>
/// <exception cref="InvalidOperationException">If more than one <see cref="ISerializer"/> (not counting the default serializers) matched the provided media range.</exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DefaultStaticContentProvider.cs
/// <summary>
/// The default static content provider that uses <see cref="StaticContentsConventions"/>
/// to determine what static content to serve.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultStaticContentProvider"/> class, using the
/// provided <paramref name="rootPathProvider"/> and <paramref name="conventions"/>.
/// </summary>
/// <param name="rootPathProvider">The current root path provider.</param>
/// <param name="conventions">The static content conventions.</param>
/// <summary>
/// Gets the static content response, if possible.
/// </summary>
/// <param name="context">Current context</param>
/// <returns>Response if serving content, null otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DisabledStaticContentProvider.cs
/// <summary>
/// A "disabled" static content provider - always returns null
/// so no content is served.
/// </summary>
/// <summary>
/// Gets the static content response, if possible.
/// </summary>
/// <param name="context">Current context</param>
/// <returns>Response if serving content, null otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DynamicDictionary.cs
/// <summary>
/// A dictionary that supports dynamic access.
/// </summary>
/// <summary>
/// Returns an empty dynamic dictionary.
/// </summary>
/// <value>A <see cref="DynamicDictionary"/> instance.</value>
/// <summary>
/// Creates a dynamic dictionary from an <see cref="IDictionary{TKey,TValue}"/> instance.
/// </summary>
/// <param name="values">An <see cref="IDictionary{TKey,TValue}"/> instance, that the dynamic dictionary should be created from.</param>
/// <returns>An <see cref="DynamicDictionary"/> instance.</returns>
/// <summary>
/// Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
/// </summary>
/// <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
/// <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param><param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
/// <summary>
/// Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
/// </summary>
/// <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
/// <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param><param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
/// <summary>
/// Returns the enumeration of all dynamic member names.
/// </summary>
/// <returns>A <see cref="IEnumerable{T}"/> that contains dynamic member names.</returns>
/// <summary>
/// Returns the enumeration of all dynamic member names.
/// </summary>
/// <returns>A <see cref="IEnumerable{T}"/> that contains dynamic member names.</returns>
/// <summary>
/// Returns the enumeration of all dynamic member names.
/// </summary>
/// <returns>A <see cref="IEnumerator"/> that contains dynamic member names.</returns>
/// <summary>
/// Gets or sets the <see cref="DynamicDictionaryValue"/> with the specified name.
/// </summary>
/// <value>A <see cref="DynamicDictionaryValue"/> instance containing a value.</value>
/// <summary>
/// Indicates whether the current <see cref="DynamicDictionary"/> is equal to another object of the same type.
/// </summary>
/// <returns><see langword="true"/> if the current instance is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.</returns>
/// <param name="other">An <see cref="DynamicDictionary"/> instance to compare with this instance.</param>
/// <summary>
/// Determines whether the specified <see cref="System.Object"/> is equal to this instance.
/// </summary>
/// <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
/// <returns><see langword="true"/> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.</returns>
/// <summary>
/// Returns an enumerator that iterates through the collection.
/// </summary>
/// <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
/// <summary>
/// Returns a hash code for this <see cref="DynamicDictionary"/>.
/// </summary>
/// <returns> A hash code for this <see cref="DynamicDictionary"/>, suitable for use in hashing algorithms and data structures like a hash table.</returns>
/// <summary>
/// Adds an element with the provided key and value to the <see cref="DynamicDictionary"/>.
/// </summary>
/// <param name="key">The object to use as the key of the element to add.</param>
/// <param name="value">The object to use as the value of the element to add.</param>
/// <summary>
/// Adds an item to the <see cref="DynamicDictionary"/>.
/// </summary>
/// <param name="item">The object to add to the <see cref="DynamicDictionary"/>.</param>
/// <summary>
/// Determines whether the <see cref="DynamicDictionary"/> contains an element with the specified key.
/// </summary>
/// <returns><see langword="true" /> if the <see cref="DynamicDictionary"/> contains an element with the key; otherwise, <see langword="false" />.
/// </returns>
/// <param name="key">The key to locate in the <see cref="DynamicDictionary"/>.</param>
/// <summary>
/// Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="DynamicDictionary"/>.
/// </summary>
/// <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="DynamicDictionary"/>.</returns>
/// <summary>
/// Gets the value associated with the specified key.
/// </summary>
/// <returns><see langword="true" /> if the <see cref="DynamicDictionary"/> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
/// <param name="key">The key whose value to get.</param>
/// <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
/// <summary>
/// Removes all items from the <see cref="DynamicDictionary"/>.
/// </summary>
/// <summary>
/// Gets the number of elements contained in the <see cref="DynamicDictionary"/>.
/// </summary>
/// <returns>The number of elements contained in the <see cref="DynamicDictionary"/>.</returns>
/// <summary>
/// Determines whether the <see cref="DynamicDictionary"/> contains a specific value.
/// </summary>
/// <returns><see langword="true" /> if <paramref name="item"/> is found in the <see cref="DynamicDictionary"/>; otherwise, <see langword="false" />.
/// </returns>
/// <param name="item">The object to locate in the <see cref="DynamicDictionary"/>.</param>
/// <summary>
/// Copies the elements of the <see cref="DynamicDictionary"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
/// </summary>
/// <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the <see cref="DynamicDictionary"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
/// <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
/// <summary>
/// Gets a value indicating whether the <see cref="DynamicDictionary"/> is read-only.
/// </summary>
/// <returns>Always returns <see langword="false" />.</returns>
/// <summary>
/// Removes the element with the specified key from the <see cref="DynamicDictionary"/>.
/// </summary>
/// <returns><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</returns>
/// <param name="key">The key of the element to remove.</param>
/// <summary>
/// Removes the first occurrence of a specific object from the <see cref="DynamicDictionary"/>.
/// </summary>
/// <returns><see langword="true" /> if <paramref name="item"/> was successfully removed from the <see cref="DynamicDictionary"/>; otherwise, <see langword="false" />.</returns>
/// <param name="item">The object to remove from the <see cref="DynamicDictionary"/>.</param>
/// <summary>
/// Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="DynamicDictionary"/>.
/// </summary>
/// <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="DynamicDictionary"/>.</returns>
/// <summary>
/// Gets a typed Dictionary of <see cref="T:Dictionary{String, Object}" /> from <see cref="DynamicDictionary"/>
/// </summary>
/// <returns>Gets a typed Dictionary of <see cref="T:Dictionary{String, Object}" /> from <see cref="DynamicDictionary"/></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\DynamicDictionaryValue.cs
/// <summary>
/// Initializes a new instance of the <see cref="DynamicDictionaryValue"/> class.
/// </summary>
/// <param name="value">The value to store in the instance</param>
/// <summary>
/// Gets a value indicating whether this instance has value.
/// </summary>
/// <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
/// <remarks><see langword="null"/> is considered as not being a value.</remarks>
/// <summary>
/// Gets the inner value
/// </summary>
/// <summary>
/// Returns a default value if Value is null
/// </summary>
/// <typeparam name="T">When no default value is supplied, required to supply the default type</typeparam>
/// <param name="defaultValue">Optional parameter for default value, if not given it returns default of type T</param>
/// <returns>If value is not null, value is returned, else default value is returned</returns>
/// <summary>
/// Attempts to convert the value to type of T, failing to do so will return the defaultValue.
/// </summary>
/// <typeparam name="T">When no default value is supplied, required to supply the default type</typeparam>
/// <param name="defaultValue">Optional parameter for default value, if not given it returns default of type T</param>
/// <returns>If value is not null, value is returned, else default value is returned</returns>
// check for direct cast
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <returns><c>true</c> if the current object is equal to the <paramref name="compareValue"/> parameter; otherwise, <c>false</c>.
/// </returns>
/// <param name="compareValue">An <see cref="DynamicDictionaryValue"/> to compare with this instance.</param>
/// <summary>
/// Determines whether the specified <see cref="object"/> is equal to the current <see cref="object"/>.
/// </summary>
/// <returns><c>true</c> if the specified <see cref="object"/> is equal to the current <see cref="DynamicDictionaryValue"/>; otherwise, <c>false</c>.</returns>
/// <param name="compareValue">The <see cref="object"/> to compare with the current <see cref="DynamicDictionaryValue"/>.</param>
/// <summary>
/// Serves as a hash function for a particular type.
/// </summary>
/// <returns>A hash code for the current instance.</returns>
/// <summary>
/// Provides implementation for binary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as addition and multiplication.
/// </summary>
/// <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>. If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
/// <param name="binder">Provides information about the binary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType"/> object. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, binder.Operation returns ExpressionType.Add.</param><param name="arg">The right operand for the binary operation. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, <paramref name="arg"/> is equal to second.</param><param name="result">The result of the binary operation.</param>
/// <summary>
/// Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
/// </summary>
/// <returns><c>true</c> if the operation is successful; otherwise, <c>false</c>. If this method returns <c>false</c>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
/// <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param><param name="result">The result of the type conversion operation.</param>
// handles enum to enum assignments
// handles number to enum assignments
/// <summary>
/// Returns the <see cref="T:System.TypeCode"/> for this instance.
/// </summary>
/// <returns>
/// The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
/// </returns>
/// <filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// A Boolean value equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// A Unicode character equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// An 8-bit signed integer equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// An 8-bit unsigned integer equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// An 16-bit signed integer equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// An 16-bit unsigned integer equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// An 32-bit signed integer equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// An 32-bit unsigned integer equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// An 64-bit signed integer equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// An 64-bit unsigned integer equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// A single-precision floating-point number equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// A double-precision floating-point number equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// A <see cref="T:System.String"/> instance equivalent to the value of this instance.
/// </returns>
/// <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
/// <summary>
/// Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific formatting information.
/// </summary>
/// <returns>
/// An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.
/// </returns>
/// <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted. </param><param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ErrorPipeline.cs
/// <summary>
/// <para>
/// A simple pipeline for on-error hooks.
/// Hooks will be executed until either a hook returns a response, or every
/// hook has been executed.
/// </para>
/// <para>
/// Can be implictly cast to/from the on-error hook delegate signature
/// (Func NancyContext, Exception, Response) for assigning to NancyEngine or for building
/// composite pipelines.
/// </para>
/// </summary>
/// <summary>
/// Invoke the pipeline. Each item will be invoked in turn until either an
/// item returns a Response, or all items have been invoked.
/// </summary>
/// <param name="context">
/// The current context to pass to the items.
/// </param>
/// <param name="ex">
/// The exception currently being handled by the error pipeline
/// </param>
/// <returns>
/// Response from an item invocation, or null if no response was generated.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\FormatterExtensions.cs
/// <summary>
/// Various extensions to return different responses form a <see cref="NancyModule"/>.
/// </summary>
/// <summary>
/// Sends the file at <paramref name="applicationRelativeFilePath"/> to the
/// agent, using <paramref name="contentType"/> for the <c>Content-Type</c> header.
/// </summary>
/// <param name="formatter">The formatter.</param>
/// <param name="applicationRelativeFilePath">The application relative file path.</param>
/// <param name="contentType">Value for the <c>Content-Type</c> header.</param>
/// <summary>
/// Sends the file at <paramref name="applicationRelativeFilePath"/> to the
/// agent, using the file extension and <see cref="MimeTypes.GetMimeType"/>
/// to determine the <c>Content-Type</c> header.
/// </summary>
/// <param name="formatter">The formatter.</param>
/// <param name="applicationRelativeFilePath">The application relative file path.</param>
/// <summary>
/// Returns the <paramref name="contents"/> string to the
/// agent, using <paramref name="contentType"/> and <paramref name="encoding"/>
/// for the <c>Content-Type</c> header.
/// </summary>
/// <param name="formatter">The formatter.</param>
/// <param name="contents">The contents of the response.</param>
/// <param name="contentType">Value for the <c>Content-Type</c> header.</param>
/// <param name="encoding">The encoding to use.</param>
/// <summary>
/// Returns the <paramref name="contents"/> string to the
/// agent, using <c>text/plain</c> and <paramref name="encoding"/>
/// for the <c>Content-Type</c> header.
/// </summary>
/// <param name="formatter">The formatter.</param>
/// <param name="contents">The contents of the response.</param>
/// <param name="encoding">The encoding to use.</param>
/// <summary>
/// Returns the <paramref name="contents"/> string to the
/// agent, using <paramref name="contentType"/> for the <c>Content-Type</c> header.
/// </summary>
/// <param name="formatter">The formatter.</param>
/// <param name="contents">The contents of the response.</param>
/// <param name="contentType">Value for the <c>Content-Type</c> header.</param>
/// <summary>
/// Returns the <paramref name="contents"/> string as a <c>text/plain</c> response to the agent.
/// </summary>
/// <param name="formatter">The formatter.</param>
/// <param name="contents">The contents of the response.</param>
/// <summary>
/// Serializes the <paramref name="model"/> to JSON and returns it to the
/// agent, optionally using the <paramref name="statusCode"/>.
/// </summary>
/// <typeparam name="TModel">The type of the model.</typeparam>
/// <param name="formatter">The formatter.</param>
/// <param name="model">The model to serialize.</param>
/// <param name="statusCode">The HTTP status code. Defaults to <see cref="HttpStatusCode.OK"/>.</param>
/// <summary>
/// Returns a redirect response to the agent.
/// </summary>
/// <param name="formatter">The formatter.</param>
/// <param name="location">The location to redirect to.</param>
/// <param name="type">The redirect type. See <see cref="RedirectResponse.RedirectType"/>.</param>
/// <summary>
/// Serializes the <paramref name="model"/> to XML and returns it to the
/// agent, optionally using the <paramref name="statusCode"/>.
/// </summary>
/// <typeparam name="TModel">The type of the model.</typeparam>
/// <param name="formatter">The formatter.</param>
/// <param name="model">The model to serialize.</param>
/// <param name="statusCode">The HTTP status code. Defaults to <see cref="HttpStatusCode.OK"/>.</param>
/// <summary>
/// Writes the data from the given <paramref name="stream"/> to the
/// agent, using <paramref name="contentType"/> for the <c>Content-Type</c> header.
/// </summary>
/// <param name="formatter">The formatter.</param>
/// <param name="stream">The stream to copy from.</param>
/// <param name="contentType">Value for the <c>Content-Type</c> header.</param>
/// <summary>
/// Invokes the given <paramref name="streamDelegate"/> to write the stream data to the
/// agent, using <paramref name="contentType"/> for the <c>Content-Type</c> header.
/// </summary>
/// <param name="formatter">The formatter.</param>
/// <param name="streamDelegate">A delegate returning a stream to copy from.</param>
/// <param name="contentType">Value for the <c>Content-Type</c> header.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\HeadResponse.cs
/// <summary>
/// Represents a HEAD only response.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HeadResponse"/> class.
/// </summary>
/// <param name="response">
/// The full response to create the head response from.
/// </param>
// We assume we can't seek and can't overwrite, but don't throw just in case.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\HttpFile.cs
/// <summary>
/// Represents a file that was captured in a HTTP multipart/form-data request
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HttpFile"/> class,
/// using the provided <paramref name="boundary"/>.
/// </summary>
/// <param name="boundary">The <see cref="HttpMultipartBoundary"/> that contains the file information.</param>
/// <summary>
/// Initializes a new instance of the <see cref="HttpFile"/> class,
/// using the provided values
/// </summary>
/// <paramref name="contentType">The content type of the file.</paramref>
/// <paramref name="name">The name of the file.</paramref>
/// <paramref name="value">The content of the file.</paramref>
/// <paramref name="key">The name of the field that uploaded the file.</paramref>
/// <summary>
/// Gets or sets the type of the content.
/// </summary>
/// <value>A <see cref="string"/> containing the content type of the file.</value>
/// <summary>
/// Gets or sets the name of the file.
/// </summary>
/// <value>A <see cref="string"/> containing the name of the file.</value>
/// <summary>
/// Gets or sets the form element name of this file.
/// </summary>
/// <value>A <see cref="string"/> containing the key.</value>
/// <summary>
/// Gets or sets the value stream.
/// </summary>
/// <value>A <see cref="Stream"/> containing the contents of the file.</value>
/// <remarks>This is a <see cref="HttpMultipartSubStream"/> instance that sits ontop of the request stream.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\HttpMultipart.cs
/// <summary>
/// Retrieves <see cref="HttpMultipartBoundary"/> instances from a request stream.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HttpMultipart"/> class.
/// </summary>
/// <param name="requestStream">The request stream to parse.</param>
/// <param name="boundary">The boundary marker to look for.</param>
/// <summary>
/// Gets the <see cref="HttpMultipartBoundary"/> instances from the request stream.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing the found <see cref="HttpMultipartBoundary"/> instances.</returns>
//we add two because or the \r\n before the boundary
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\HttpMultipartBoundary.cs
/// <summary>
/// Represents the content boundary of a HTTP multipart/form-data boundary in a stream.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HttpMultipartBoundary"/> class.
/// </summary>
/// <param name="boundaryStream">The stream that contains the boundary information.</param>
/// <summary>
/// Gets the contents type of the boundary value.
/// </summary>
/// <value>A <see cref="string"/> containing the name of the value if it is available; otherwise <see cref="string.Empty"/>.</value>
/// <summary>
/// Gets or the filename for the boundary value.
/// </summary>
/// <value>A <see cref="string"/> containing the filename value if it is available; otherwise <see cref="string.Empty"/>.</value>
/// <remarks>This is the RFC2047 decoded value of the filename attribute of the Content-Disposition header.</remarks>
/// <summary>
/// Gets name of the boundary value.
/// </summary>
/// <remarks>This is the RFC2047 decoded value of the name attribute of the Content-Disposition header.</remarks>
/// <summary>
/// A stream containing the value of the boundary.
/// </summary>
/// <remarks>This is the RFC2047 decoded value of the Content-Type header.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\HttpMultipartBuffer.cs
/// <summary>
/// A buffer that is used to locate a HTTP multipart/form-data boundary in a stream.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HttpMultipartBuffer"/> class.
/// </summary>
/// <param name="boundaryAsBytes">The boundary as a byte-array.</param>
/// <param name="closingBoundaryAsBytes">The closing boundary as byte-array</param>
/// <summary>
/// Gets a value indicating whether the buffer contains the same values as the boundary.
/// </summary>
/// <value><see langword="true"/> if buffer contains the same values as the boundary; otherwise, <see langword="false"/>.</value>
/// <summary>
/// Gets a value indicating whether this buffer is full.
/// </summary>
/// <value><see langword="true"/> if buffer is full; otherwise, <see langword="false"/>.</value>
/// <summary>
/// Gets the number of bytes that can be stored in the buffer.
/// </summary>
/// <value>The number of bytes that can be stored in the buffer.</value>
/// <summary>
/// Resets the buffer so that inserts happens from the start again.
/// </summary>
/// <remarks>This does not clear any previously written data, just resets the buffer position to the start. Data that is inserted after Reset has been called will overwrite old data.</remarks>
/// <summary>
/// Inserts the specified value into the buffer and advances the internal position.
/// </summary>
/// <param name="value">The value to insert into the buffer.</param>
/// <remarks>This will throw an <see cref="ArgumentOutOfRangeException"/> is you attempt to call insert more times then the <see cref="Length"/> of the buffer and <see cref="Reset"/> was not invoked.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\HttpMultipartSubStream.cs
/// <summary>
/// A decorator stream that sits on top of an existing stream and appears as a unique stream.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HttpMultipartSubStream"/> class.
/// </summary>
/// <param name="stream">The stream to create the sub-stream ontop of.</param>
/// <param name="start">The start offset on the parent stream where the sub-stream should begin.</param>
/// <param name="end">The end offset on the parent stream where the sub-stream should end.</param>
/// <summary>
/// When overridden in a derived class, gets a value indicating whether the current stream supports reading.
/// </summary>
/// <returns><see langword="true"/> if the stream supports reading; otherwise, <see langword="false"/>.</returns>
/// <summary>
/// When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
/// </summary>
/// <returns><see langword="true"/> if the stream supports seeking; otherwise, <see langword="false"/>.</returns>
/// <summary>
/// When overridden in a derived class, gets a value indicating whether the current stream supports writing.
/// </summary>
/// <returns><see langword="true"/> if the stream supports writing; otherwise, <see langword="false"/>.</returns>
/// <summary>
/// When overridden in a derived class, gets the length in bytes of the stream.
/// </summary>
/// <returns>A long value representing the length of the stream in bytes.</returns>
/// <exception cref="NotSupportedException">A class derived from Stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
/// <summary>
/// When overridden in a derived class, gets or sets the position within the current stream.
/// </summary>
/// <returns>
/// The current position within the stream.
/// </returns>
/// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
/// <summary>
/// When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
/// </summary>
/// <remarks>In the <see cref="HttpMultipartSubStream"/> type this method is implemented as no-op.</remarks>
/// <summary>
/// When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
/// </summary>
/// <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. </returns>
/// <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param>
/// <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
/// <param name="count">The maximum number of bytes to be read from the current stream. </param>
/// <summary>
/// Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
/// </summary>
/// <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
/// <summary>
/// When overridden in a derived class, sets the position within the current stream.
/// </summary>
/// <returns>The new position within the current stream.</returns>
/// <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
/// <param name="origin">A value of type <see cref="SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
/// <summary>
/// When overridden in a derived class, sets the length of the current stream.
/// </summary>
/// <param name="value">The desired length of the current stream in bytes.</param>
/// <remarks>This will always throw a <see cref="InvalidOperationException"/> for the <see cref="HttpMultipartSubStream"/> type.</remarks>
/// <summary>
/// When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
/// </summary>
/// <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param>
/// <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param>
/// <param name="count">The number of bytes to be written to the current stream. </param>
/// <remarks>This will always throw a <see cref="InvalidOperationException"/> for the <see cref="HttpMultipartSubStream"/> type.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\HttpStatusCode.cs
/// <summary>
/// HTTP Status Codes
/// </summary>
/// <remarks>The values are based on the list found at http://en.wikipedia.org/wiki/List_of_HTTP_status_codes </remarks>
/// <summary>
/// 100 Continue
/// </summary>
/// <summary>
/// 101 SwitchingProtocols
/// </summary>
/// <summary>
/// 102 Processing
/// </summary>
/// <summary>
/// 103 Checkpoint
/// </summary>
/// <summary>
/// 200 OK
/// </summary>
/// <summary>
/// 201 Created
/// </summary>
/// <summary>
/// 202 Accepted
/// </summary>
/// <summary>
/// 203 NonAuthoritativeInformation
/// </summary>
/// <summary>
/// 204 NoContent
/// </summary>
/// <summary>
/// 205 ResetContent
/// </summary>
/// <summary>
/// 206 PartialContent
/// </summary>
/// <summary>
/// 207 MultipleStatus
/// </summary>
/// <summary>
/// 226 IMUsed
/// </summary>
/// <summary>
/// 300 MultipleChoices
/// </summary>
/// <summary>
/// 301 MovedPermanently
/// </summary>
/// <summary>
/// 302 Found
/// </summary>
/// <summary>
/// 303 SeeOther
/// </summary>
/// <summary>
/// 304 NotModified
/// </summary>
/// <summary>
/// 305 UseProxy
/// </summary>
/// <summary>
/// 306 SwitchProxy
/// </summary>
/// <summary>
/// 307 TemporaryRedirect
/// </summary>
/// <summary>
/// 308 ResumeIncomplete
/// </summary>
/// <summary>
/// 400 BadRequest
/// </summary>
/// <summary>
/// 401 Unauthorized
/// </summary>
/// <summary>
/// 402 PaymentRequired
/// </summary>
/// <summary>
/// 403 Forbidden
/// </summary>
/// <summary>
/// 404 NotFound
/// </summary>
/// <summary>
/// 405 MethodNotAllowed
/// </summary>
/// <summary>
/// 406 NotAcceptable
/// </summary>
/// <summary>
/// 407 ProxyAuthenticationRequired
/// </summary>
/// <summary>
/// 408 RequestTimeout
/// </summary>
/// <summary>
/// 409 Conflict
/// </summary>
/// <summary>
/// 410 Gone
/// </summary>
/// <summary>
/// 411 LengthRequired
/// </summary>
/// <summary>
/// 412 PreconditionFailed
/// </summary>
/// <summary>
/// 413 RequestEntityTooLarge
/// </summary>
/// <summary>
/// 414 RequestUriTooLong
/// </summary>
/// <summary>
/// 415 UnsupportedMediaType
/// </summary>
/// <summary>
/// 416 RequestedRangeNotSatisfiable
/// </summary>
/// <summary>
/// 417 ExpectationFailed
/// </summary>
/// <summary>
/// 418 ImATeapot
/// </summary>
/// <summary>
/// 420 Enhance Your Calm
/// </summary>
/// <summary>
/// 422 UnprocessableEntity
/// </summary>
/// <summary>
/// 423 Locked
/// </summary>
/// <summary>
/// 424 FailedDependency
/// </summary>
/// <summary>
/// 425 UnorderedCollection
/// </summary>
/// <summary>
/// 426 UpgradeRequired
/// </summary>
/// <summary>
/// 429 Too Many Requests
/// </summary>
/// <summary>
/// 444 NoResponse
/// </summary>
/// <summary>
/// 449 RetryWith
/// </summary>
/// <summary>
/// 450 BlockedByWindowsParentalControls
/// </summary>
/// <summary>
/// 451 UnavailableForLegalReasons
/// </summary>
/// <summary>
/// 499 ClientClosedRequest
/// </summary>
/// <summary>
/// 500 InternalServerError
/// </summary>
/// <summary>
/// 501 NotImplemented
/// </summary>
/// <summary>
/// 502 BadGateway
/// </summary>
/// <summary>
/// 503 ServiceUnavailable
/// </summary>
/// <summary>
/// 504 GatewayTimeout
/// </summary>
/// <summary>
/// 505 HttpVersionNotSupported
/// </summary>
/// <summary>
/// 506 VariantAlsoNegotiates
/// </summary>
/// <summary>
/// 507 InsufficientStorage
/// </summary>
/// <summary>
/// 509 BandwidthLimitExceeded
/// </summary>
/// <summary>
/// 510 NotExtended
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IHideObjectMembers.cs
/// <summary>
/// Helper interface used to hide the base <see cref="object"/>  members from the fluent API to make it much cleaner
/// in Visual Studio intellisense.
/// </summary>
/// <remarks>Created by Daniel Cazzulino http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx</remarks>
/// <summary>
/// Hides the <see cref="Equals"/> method.
/// </summary>
/// <summary>
/// Hides the <see cref="GetHashCode"/> method.
/// </summary>
/// <summary>
/// Hides the <see cref="GetType"/> method.
/// </summary>
/// <summary>
/// Hides the <see cref="ToString"/> method.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\INancyContextFactory.cs
/// <summary>
/// Creates NancyContext instances
/// </summary>
/// <summary>
/// Create a new NancyContext
/// </summary>
/// <returns>NancyContext instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\INancyEngine.cs
/// <summary>
/// Defines the functionality of an engine that can handle Nancy <see cref="Request"/>s.
/// </summary>
/// <summary>
/// Factory for creating an <see cref="IPipelines"/> instance for a incoming request.
/// </summary>
/// <value>An <see cref="IPipelines"/> instance.</value>
/// <summary>
/// Handles an incoming <see cref="Request"/> async.
/// </summary>
/// <param name="request">An <see cref="Request"/> instance, containing the information about the current request.</param>
/// <param name="preRequest">Delegate to call before the request is processed</param>
/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
/// <returns>The task object representing the asynchronous operation.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\INancyModule.cs
/// <summary>
/// Nancy module base interface
/// Defines all the properties / behaviour needed by Nancy internally
/// </summary>
/// <summary><para>
/// The post-request hook
/// </para><para>
/// The post-request hook is called after the response is created by the route execution.
/// It can be used to rewrite the response or add/remove items from the context.
/// </para></summary>
/// <summary><para>
/// The pre-request hook
/// </para><para>
/// The PreRequest hook is called prior to executing a route. If any item in the
/// pre-request pipeline returns a response then the route is not executed and the
/// response is returned.
/// </para></summary>
/// <summary><para>
/// The error hook
/// </para><para>
/// The error hook is called if an exception is thrown at any time during executing
/// the PreRequest hook, a route and the PostRequest hook. It can be used to set
/// the response and/or finish any ongoing tasks (close database session, etc).
/// </para></summary>
/// <summary>
/// Gets or sets the current Nancy context
/// </summary><value>A <see cref="T:Nancy.NancyContext" /> instance.</value>
/// <summary>
/// An extension point for adding support for formatting response contents.
/// </summary><value>This property will always return <see langword="null" /> because it acts as an extension point.</value><remarks>Extension methods to this property should always return <see cref="P:Nancy.NancyModuleBase.Response" /> or one of the types that can implicitly be types into a <see cref="P:Nancy.NancyModuleBase.Response" />.</remarks>
/// <summary>
/// Gets or sets the model binder locator
/// </summary>
/// <summary>
/// Gets or sets the model validation result
/// </summary>
/// <summary>
/// Gets or sets the validator locator.
/// </summary>
/// <summary>
/// Gets or sets an <see cref="Request" /> instance that represents the current request.
/// </summary><value>An <see cref="Request" /> instance.</value>
/// <summary>
/// The extension point for accessing the view engines in Nancy.
/// </summary><value>An <see cref="T:Nancy.ViewEngines.IViewFactory" /> instance.</value><remarks>This is automatically set by Nancy at runtime.</remarks>
/// <summary>
/// Get the root path of the routes in the current module.
/// </summary><value>A <see cref="T:System.String" /> containing the root path of the module or <see langword="null" /> if no root path should be used.</value><remarks>All routes will be relative to this root path.</remarks>
/// <summary>
/// Gets all declared routes by the module.
/// </summary><value>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance, containing all <see cref="T:Nancy.Routing.Route" /> instances declared by the module.</value>
/// <summary>
/// Gets or sets the dynamic object used to locate text resources.
/// </summary>
/// <summary>
/// Renders a view from inside a route handler.
/// </summary>
/// <value>A <see cref="ViewRenderer"/> instance that is used to determine which view that should be rendered.</value>
/// <summary>
/// Used to negotiate the content returned based on Accepts header.
/// </summary>
/// <value>A <see cref="Negotiator"/> instance that is used to negotiate the content returned.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\INancyModuleCatalog.cs
/// <summary>
/// Catalog of <see cref="INancyModule"/> instances.
/// </summary>
/// <summary>
/// Get all NancyModule implementation instances - should be per-request lifetime
/// </summary>
/// <param name="context">The current context</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="INancyModule"/> instances.</returns>
/// <summary>
/// Retrieves a specific <see cref="INancyModule"/> implementation - should be per-request lifetime
/// </summary>
/// <param name="moduleType">Module type</param>
/// <param name="context">The current context</param>
/// <returns>The <see cref="INancyModule"/> instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IncludeInNancyAssemblyScanningAttribute.cs
/// <summary>
/// Add this attribute to an assembly to make sure
/// it is included in Nancy's assembly scanning.
/// </summary>
/// <example>
/// Apply the attribute, typically in AssemblyInfo.(cs|fs|vb), as follows:
/// <code>[assembly: IncludeInNancyAssemblyScanning]</code>
/// </example>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IObjectSerializer.cs
/// <summary>
/// De/Serialisation for cookie objects
/// </summary>
/// <summary>
/// Serialize an object
/// </summary>
/// <param name="sourceObject">Source object</param>
/// <returns>Serialised object string</returns>
/// <summary>
/// Deserialize an object string
/// </summary>
/// <param name="sourceString">Source object string</param>
/// <returns>Deserialized object</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IObjectSerializerSelector.cs
/// <summary>
/// Allows setting of the serializer for session object storage
/// </summary>
/// <summary>
/// Using the specified serializer
/// </summary>
/// <param name="newSerializer">Serializer to use</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IResourceAssemblyProvider.cs
/// <summary>
/// Defines the functionality for retrieving which assemblies that should be used by Nancy.
/// </summary>
/// <summary>
/// Gets a list of assemblies that should be scanned.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="Assembly"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IResponseFormatter.cs
/// <summary>
/// An extension point for adding support for formatting response contents. No members should be added to this interface without good reason.
/// </summary>
/// <remarks>Extension methods to this interface should always return <see cref="Response"/> or one of the types that can implicitly be types into a <see cref="Response"/>.</remarks>
/// <summary>
/// Gets all <see cref="ISerializerFactory"/> factory.
/// </summary>
/// <summary>
/// Gets the context for which the response is being formatted.
/// </summary>
/// <value>A <see cref="NancyContext"/> instance.</value>
/// <summary>
/// Gets the <see cref="INancyEnvironment"/>.
/// </summary>
/// <value>An <see cref="INancyEnvironment"/> instance.</value>
/// <summary>
/// Gets the root path of the application.
/// </summary>
/// <value>A <see cref="string"/> containing the root path.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IResponseFormatterFactory.cs
/// <summary>
/// Defines the functionality of a <see cref="IResponseFormatter"/> factory.
/// </summary>
/// <summary>
/// Creates a new <see cref="IResponseFormatter"/> instance.
/// </summary>
/// <param name="context">The <see cref="NancyContext"/> instance that should be used by the response formatter.</param>
/// <returns>An <see cref="IResponseFormatter"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IRootPathProvider.cs
/// <summary>
/// Defines the functionality to retrieve the root folder path of the current Nancy application.
/// </summary>
/// <summary>
/// Returns the root folder path of the current Nancy application.
/// </summary>
/// <returns>A <see cref="string"/> containing the path of the root folder.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IRuntimeEnvironmentInformation.cs
/// <summary>
/// Defines functionality for getting information about the runtime execution environment.
/// </summary>
/// <summary>
/// Gets a value indicating if the application is running in debug mode.
/// </summary>
/// <returns><see langword="true"/> if the application is running in debug mode, otherwise <see langword="false"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ISerializer.cs
/// <summary>
/// Defines the functionality for providing serialization support.
/// </summary>
/// <summary>
/// Whether the serializer can serialize the content type
/// </summary>
/// <param name="mediaRange">Content type to serialise</param>
/// <returns>True if supported, false otherwise</returns>
/// <summary>
/// Gets the list of extensions that the serializer can handle.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> of extensions if any are available, otherwise an empty enumerable.</value>
/// <summary>
/// Serialize the given model with the given contentType
/// </summary>
/// <param name="mediaRange">Content type to serialize into</param>
/// <param name="model">Model to serialize</param>
/// <param name="outputStream">Output stream to serialize to</param>
/// <returns>Serialised object</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ISerializerFactory.cs
/// <summary>
/// Defines the functionality of an <see cref="ISerializer"/> factory.
/// </summary>
/// <summary>
/// Gets the <see cref="ISerializer"/> implementation that can serialize the provided <paramref name="mediaRange"/>.
/// </summary>
/// <param name="mediaRange">The <see cref="MediaRange"/> to get a serializer for.</param>
/// <returns>An <see cref="ISerializer"/> instance, or <see langword="null" /> if not match was found.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IStaticContentProvider.cs
/// <summary>
/// Provides static content delivery
/// </summary>
/// <summary>
/// Gets the static content response, if possible.
/// </summary>
/// <param name="context">Current context</param>
/// <returns>Response if serving content, null otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IStatusCodeHandler.cs
/// <summary>
/// Provides informative responses for particular HTTP status codes
/// </summary>
/// <summary>
/// Check if the error handler can handle errors of the provided status code.
/// </summary>
/// <param name="statusCode">Status code</param>
/// <param name="context">The <see cref="NancyContext"/> instance of the current request.</param>
/// <returns>True if handled, false otherwise</returns>
/// <summary>
/// Handle the error code
/// </summary>
/// <param name="statusCode">Status code</param>
/// <param name="context">Current context</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Jsonp.cs
/// <summary>
/// Handles JSONP requests.
/// </summary>
/// <summary>
/// Enable JSONP support in the application
/// </summary>
/// <param name="pipelines">Application Pipeline to Hook into</param>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
/// <summary>
/// Disable JSONP support in the application
/// </summary>
/// <param name="pipelines">Application Pipeline to Hook into</param>
/// <summary>
/// Transmogrify original response and apply JSONP Padding
/// </summary>
/// <param name="context">Current Nancy Context</param>
// grab original contents for running later
// set content type to application/javascript so browsers can handle it by default
// http://stackoverflow.com/questions/111302/best-content-type-to-serve-jsonp
// disposing of stream is handled elsewhere
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\JsonpApplicationStartup.cs
/// <summary>
/// Enables JSONP support at application startup.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="JsonpApplicationStartup"/> class,
/// with the provided <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
/// <summary>
/// Perform any initialisation tasks
/// </summary>
/// <param name="pipelines">Application pipelines</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\MimeTypes.cs
//
// Nancy.MimeTypes
//
// Authors:
//	Gonzalo Paniagua Javier (gonzalo@ximian.com)
//
// (C) 2002 Ximian, Inc (http://www.ximian.com)
// (C) 2003-2009 Novell, Inc (http://novell.com)
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Office Formats
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\NamedPipelineBase.cs
/// <summary>
/// Pipeline items to execute
/// </summary>
/// <summary>
/// Gets the current pipeline items
/// </summary>
/// <summary>
/// Gets the current pipeline item delegates
/// </summary>
/// <summary>
/// Add an item to the start of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <summary>
/// Add an item to the start of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <param name="replaceInPlace">
/// Whether to replace an existing item with the same name in its current place,
/// rather than at the position requested. Defaults to false.
/// </param>
/// <summary>
/// Add an item to the end of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <summary>
/// Add an item to the end of the pipeline
/// </summary>
/// <param name="item">Item to add</param>
/// <param name="replaceInPlace">
/// Whether to replace an existing item with the same name in its current place,
/// rather than at the position requested. Defaults to false.
/// </param>
/// <summary>
/// Add an item to a specific place in the pipeline.
/// </summary>
/// <param name="index">Index to add at</param>
/// <param name="item">Item to add</param>
/// <summary>
/// Add an item to a specific place in the pipeline.
/// </summary>
/// <param name="index">Index to add at</param>
/// <param name="item">Item to add</param>
/// <param name="replaceInPlace">
/// Whether to replace an existing item with the same name in its current place,
/// rather than at the position requested. Defaults to false.
/// </param>
/// <summary>
/// Insert an item before a named item.
/// If the named item does not exist the item is inserted at the start of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert before</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Insert an item before a named item.
/// If the named item does not exist the item is inserted at the start of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert before</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Insert an item after a named item.
/// If the named item does not exist the item is inserted at the end of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert after</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Insert an item after a named item.
/// If the named item does not exist the item is inserted at the end of the pipeline.
/// </summary>
/// <param name="name">Name of the item to insert after</param>
/// <param name="item">Item to insert</param>
/// <summary>
/// Remove a named pipeline item
/// </summary>
/// <param name="name">Name</param>
/// <returns>Index of item that was removed or -1 if nothing removed</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\NancyContext.cs
/// <summary>
/// Nancy context.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyContext"/> class.
/// </summary>
// TODO - potentially additional logic to lock to ip etc?
/// <summary>
/// Gets the dictionary for storage of per-request items. Disposable items will be disposed when the context is.
/// </summary>
/// <summary>
/// Gets or sets the resolved route
/// </summary>
/// <summary>
/// Gets or sets the parameters for the resolved route
/// </summary>
/// <summary>
/// Gets or sets the incoming request
/// </summary>
/// <summary>
/// Gets or sets the outgoing response
/// </summary>
/// <summary>
/// Gets or sets the current user
/// </summary>
/// <summary>
/// Diagnostic request tracing
/// </summary>
/// <summary>
/// Gets a value indicating whether control panel access is enabled for this request
/// </summary>
/// <summary>
/// Non-model specific data for rendering in the response
/// </summary>
/// <summary>
/// Gets or sets the model validation result.
/// </summary>
/// <summary>
/// Gets or sets the context's culture
/// </summary>
/// <summary>
/// Context of content negotiation (if relevant)
/// </summary>
/// <summary>
/// Gets or sets the dynamic object used to locate text resources.
/// </summary>
/// <summary>
/// Disposes any disposable items in the <see cref="Items"/> dictionary.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\NancyEngine.cs
/// <summary>
/// Default engine for handling Nancy <see cref="Request"/>s.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyEngine"/> class.
/// </summary>
/// <param name="dispatcher">An <see cref="IRouteResolver"/> instance that will be used to resolve a route, from the modules, that matches the incoming <see cref="Request"/>.</param>
/// <param name="contextFactory">A factory for creating contexts</param>
/// <param name="statusCodeHandlers">Error handlers</param>
/// <param name="requestTracing">The request tracing instance.</param>
/// <param name="staticContentProvider">The provider to use for serving static content</param>
/// <param name="negotiator">The response negotiator.</param>
/// <summary>
/// Factory for creating an <see cref="IPipelines"/> instance for a incoming request.
/// </summary>
/// <value>An <see cref="IPipelines"/> instance.</value>
/// <summary>
/// Handles an incoming <see cref="Request"/> async.
/// </summary>
/// <param name="request">An <see cref="Request"/> instance, containing the information about the current request.</param>
/// <param name="preRequest">Delegate to call before the request is processed</param>
/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
/// <returns>The task object representing the asynchronous operation.</returns>
/// <summary>
/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\NancyEngineExtensions.cs
/// <summary>
/// Handles an incoming <see cref="Request"/>.
/// </summary>
/// <param name="nancyEngine">The <see cref="INancyEngine"/> instance.</param>
/// <param name="request">An <see cref="Request"/> instance, containing the information about the current request.</param>
/// <returns>A <see cref="NancyContext"/> instance containing the request/response context.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\NancyModule.cs
/// <summary>
/// Basic class containing the functionality for defining routes and actions in Nancy.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyModule"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyModule"/> class.
/// </summary>
/// <param name="modulePath">A <see cref="string"/> containing the root relative path that all paths in the module will be a subset of.</param>
/// <summary>
/// Non-model specific data for rendering in the response
/// </summary>
/// <summary>
/// Gets <see cref="RouteBuilder"/> for declaring actions for DELETE requests.
/// </summary>
/// <value>A <see cref="RouteBuilder"/> instance.</value>
/// <summary>
/// Gets <see cref="RouteBuilder"/> for declaring actions for GET requests.
/// </summary>
/// <value>A <see cref="RouteBuilder"/> instance.</value>
/// <summary>
/// Gets <see cref="RouteBuilder"/> for declaring actions for HEAD requests.
/// </summary>
/// <value>A <see cref="RouteBuilder"/> instance.</value>
/// <summary>
/// Gets <see cref="RouteBuilder"/> for declaring actions for OPTIONS requests.
/// </summary>
/// <value>A <see cref="RouteBuilder"/> instance.</value>
/// <summary>
/// Gets <see cref="RouteBuilder"/> for declaring actions for PATCH requests.
/// </summary>
/// <value>A <see cref="RouteBuilder"/> instance.</value>
/// <summary>
/// Gets <see cref="RouteBuilder"/> for declaring actions for POST requests.
/// </summary>
/// <value>A <see cref="RouteBuilder"/> instance.</value>
/// <summary>
/// Gets <see cref="RouteBuilder"/> for declaring actions for PUT requests.
/// </summary>
/// <value>A <see cref="RouteBuilder"/> instance.</value>
/// <summary>
/// Get the root path of the routes in the current module.
/// </summary>
/// <value>
/// A <see cref="T:System.String" /> containing the root path of the module or <see langword="null" />
/// if no root path should be used.</value><remarks>All routes will be relative to this root path.
/// </remarks>
/// <summary>
/// Gets all declared routes by the module.
/// </summary>
/// <value>A <see cref="IEnumerable{T}"/> instance, containing all <see cref="Route"/> instances declared by the module.</value>
/// <remarks>This is automatically set by Nancy at runtime.</remarks>
/// <summary>
/// Gets the current session.
/// </summary>
/// <summary>
/// Renders a view from inside a route handler.
/// </summary>
/// <value>A <see cref="ViewRenderer"/> instance that is used to determine which view that should be rendered.</value>
/// <summary>
/// Used to negotiate the content returned based on Accepts header.
/// </summary>
/// <value>A <see cref="Negotiator"/> instance that is used to negotiate the content returned.</value>
/// <summary>
/// Gets or sets the validator locator.
/// </summary>
/// <remarks>This is automatically set by Nancy at runtime.</remarks>
/// <summary>
/// Gets or sets an <see cref="Request"/> instance that represents the current request.
/// </summary>
/// <value>An <see cref="Request"/> instance.</value>
/// <summary>
/// The extension point for accessing the view engines in Nancy.
/// </summary><value>An <see cref="IViewFactory" /> instance.</value>
/// <remarks>This is automatically set by Nancy at runtime.</remarks>
/// <summary><para>
/// The post-request hook
/// </para><para>
/// The post-request hook is called after the response is created by the route execution.
/// It can be used to rewrite the response or add/remove items from the context.
/// </para>
/// <remarks>This is automatically set by Nancy at runtime.</remarks>
/// </summary>
/// <summary>
/// <para>
/// The pre-request hook
/// </para>
/// <para>
/// The PreRequest hook is called prior to executing a route. If any item in the
/// pre-request pipeline returns a response then the route is not executed and the
/// response is returned.
/// </para>
/// <remarks>This is automatically set by Nancy at runtime.</remarks>
/// </summary>
/// <summary>
/// <para>
/// The error hook
/// </para>
/// <para>
/// The error hook is called if an exception is thrown at any time during executing
/// the PreRequest hook, a route and the PostRequest hook. It can be used to set
/// the response and/or finish any ongoing tasks (close database session, etc).
/// </para>
/// <remarks>This is automatically set by Nancy at runtime.</remarks>
/// </summary>
/// <summary>
/// Gets or sets the current Nancy context
/// </summary>
/// <value>A <see cref="NancyContext" /> instance.</value>
/// <remarks>This is automatically set by Nancy at runtime.</remarks>
/// <summary>
/// An extension point for adding support for formatting response contents.
/// </summary><value>This property will always return <see langword="null" /> because it acts as an extension point.</value><remarks>Extension methods to this property should always return <see cref="P:Nancy.NancyModuleBase.Response" /> or one of the types that can implicitly be types into a <see cref="P:Nancy.NancyModuleBase.Response" />.</remarks>
/// <summary>
/// Gets or sets the model binder locator
/// </summary>
/// <remarks>This is automatically set by Nancy at runtime.</remarks>
/// <summary>
/// Gets or sets the model validation result
/// </summary>
/// <remarks>This is automatically set by Nancy at runtime when you run validation.</remarks>
/// <summary>
/// Helper class for configuring a route handler in a module.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RouteBuilder"/> class.
/// </summary>
/// <param name="method">The HTTP request method that the route should be available for.</param>
/// <param name="parentModule">The <see cref="INancyModule"/> that the route is being configured for.</param>
/// <summary>
/// Defines a Nancy route for the specified <paramref name="path"/>.
/// </summary>
/// <value>A delegate that is used to invoke the route.</value>
/// <summary>
/// Defines a Nancy route for the specified <paramref name="path"/> and <paramref name="condition"/>.
/// </summary>
/// <value>A delegate that is used to invoke the route.</value>
/// <summary>
/// Defines an async route for the specified <paramref name="path"/>
/// </summary>
/// <summary>
/// Defines an async route for the specified <paramref name="path"/> and <paramref name="condition"/>.
/// </summary>
/// <summary>
/// Defines a Nancy route for the specified <paramref name="path"/> and <paramref name="name"/>
/// </summary>
/// <value>A delegate that is used to invoke the route.</value>
/// <summary>
/// Defines a Nancy route for the specified <paramref name="path"/>, <paramref name="condition"/> and <paramref name="name"/>
/// </summary>
/// <value>A delegate that is used to invoke the route.</value>
/// <summary>
/// Defines an async route for the specified <paramref name="path"/> and <paramref name="name"/>
/// </summary>
/// <summary>
/// Defines an async route for the specified <paramref name="path"/>, <paramref name="condition"/> and <paramref name="name"/>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\NegotiatorExtensions.cs
/// <summary>
/// Add a cookie to the response.
/// </summary>
/// <param name="negotiator">The <see cref="Negotiator"/> instance.</param>
/// <param name="cookie">The <see cref="INancyCookie"/> instance that should be added.</param>
/// <returns>The modified <see cref="Negotiator"/> instance.</returns>
/// <summary>
/// Add a collection of cookies to the response.
/// </summary>
/// <param name="negotiator">The <see cref="Negotiator"/> instance.</param>
/// <param name="cookies">The <see cref="INancyCookie"/> instances that should be added.</param>
/// <returns>The modified <see cref="Negotiator"/> instance.</returns>
/// <summary>
/// Add a header to the response
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="header">Header name</param>
/// <param name="value">Header value</param>
/// <returns>Modified negotiator</returns>
/// <summary>
/// Add a content type to the response
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="contentType">Content type value</param>
/// <returns>Modified negotiator</returns>
/// <summary>
/// Adds headers to the response using anonymous types
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="headers">
/// Array of headers - each header should be an anonymous type with two string properties
/// 'Header' and 'Value' to represent the header name and its value.
/// </param>
/// <returns>Modified negotiator</returns>
/// <summary>
/// Adds headers to the response using anonymous types
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="headers">
/// Array of headers - each header should be a Tuple with two string elements 
/// for header name and header value
/// </param>
/// <returns>Modified negotiator</returns>
/// <summary>
/// Allows the response to be negotiated with any processors available for any content type
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <returns>Modified negotiator</returns>
/*");
/// <summary>
/// Allows the response to be negotiated with a specific media range
/// This will remove the wildcard range if it is already specified
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="mediaRange">Media range to add</param>
/// <returns>Modified negotiator</returns>
/// <summary>
/// Uses the specified model as the default model for negotiation
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="model">Model object</param>
/// <returns>Modified negotiator</returns>
/// <summary>
/// Uses the specified view for html output
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="viewName">View name</param>
/// <returns>Modified negotiator</returns>
/// <summary>
/// Sets the model to use for a particular media range.
/// Will also add the MediaRange to the allowed list
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="range">Range to match against</param>
/// <param name="model">Model object</param>
/// <returns>Updated negotiator object</returns>
/// <summary>
/// Sets the model to use for a particular media range.
/// Will also add the MediaRange to the allowed list
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="range">Range to match against</param>
/// <param name="modelFactory">Model factory for returning the model object</param>
/// <returns>Updated negotiator object</returns>
/// <summary>
/// Sets the <see cref="Response"/> to use for a particular media range.
/// Will also add the MediaRange to the allowed list
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="range">Range to match against</param>
/// <param name="response">A <see cref="Response"/> object</param>
/// <returns>Updated negotiator object</returns>
/// <summary>
/// Sets the <see cref="Response"/> to use for a particular media range.
/// Will also add the MediaRange to the allowed list
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="range">Range to match against</param>
/// <param name="responseFactory">Factory for returning the <see cref="Response"/> object</param>
/// <returns>Updated negotiator object</returns>
/// <summary>
/// Sets the status code that should be assigned to the final response.
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="statusCode">The status code that should be used.</param>
/// <returns>Updated negotiator object</returns>
/// <summary>
/// Sets the description of the status code that should be assigned to the final response.
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="reasonPhrase">The status code description that should be used.</param>
/// <returns>Updated negotiator object</returns>
/// <summary>
/// Sets the status code that should be assigned to the final response.
/// </summary>
/// <param name="negotiator">Negotiator object</param>
/// <param name="statusCode">The status code that should be used.</param>
/// <returns>Updated negotiator object</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\NotFoundResponse.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\PipelineItem.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Request.cs
/// <summary>
/// Encapsulates HTTP-request information to an Nancy application.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Request"/> class.
/// </summary>
/// <param name="method">The HTTP data transfer method used by the client.</param>
/// <param name="path">The path of the requested resource, relative to the "Nancy root". This should not include the scheme, host name, or query portion of the URI.</param>
/// <param name="scheme">The HTTP protocol that was used by the client.</param>
/// <summary>
/// Initializes a new instance of the <see cref="Request"/> class.
/// </summary>
/// <param name="method">The HTTP data transfer method used by the client.</param>
/// <param name="url">The <see cref="Url"/> of the requested resource</param>
/// <param name="headers">The headers that was passed in by the client.</param>
/// <param name="body">The <see cref="Stream"/> that represents the incoming HTTP body.</param>
/// <param name="ip">The client's IP address</param>
/// <param name="certificate">The client's certificate when present.</param>
/// <param name="protocolVersion">The HTTP protocol version.</param>
/// <summary>
/// Gets the certificate sent by the client.
/// </summary>
/// <summary>
/// Gets the HTTP protocol version.
/// </summary>
/// <summary>
/// Gets the IP address of the client
/// </summary>
/// <summary>
/// Gets or sets the HTTP data transfer method used by the client.
/// </summary>
/// <value>The method.</value>
/// <summary>
/// Gets the url
/// </summary>
/// <summary>
/// Gets the request path, relative to the base path.
/// Used for route matching etc.
/// </summary>
/// <summary>
/// Gets the query string data of the requested resource.
/// </summary>
/// <value>A <see cref="DynamicDictionary"/>instance, containing the key/value pairs of query string data.</value>
/// <summary>
/// Gets a <see cref="RequestStream"/> that can be used to read the incoming HTTP body
/// </summary>
/// <value>A <see cref="RequestStream"/> object representing the incoming HTTP body.</value>
/// <summary>
/// Gets the request cookies.
/// </summary>
/// <summary>
/// Gets the current session.
/// </summary>
/// <summary>
/// Gets the cookie data from the request header if it exists
/// </summary>
/// <returns>Cookies dictionary</returns>
//Cookie attribute
/// <summary>
/// Gets a collection of files sent by the client-
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> instance, containing an <see cref="HttpFile"/> instance for each uploaded file.</value>
/// <summary>
/// Gets the form data of the request.
/// </summary>
/// <value>A <see cref="DynamicDictionary"/>instance, containing the key/value pairs of form data.</value>
/// <remarks>Currently Nancy will only parse form data sent using the application/x-www-url-encoded mime-type.</remarks>
/// <summary>
/// Gets the HTTP headers sent by the client.
/// </summary>
/// <value>An <see cref="IDictionary{TKey,TValue}"/> containing the name and values of the headers.</value>
/// <remarks>The values are stored in an <see cref="IEnumerable{T}"/> of string to be compliant with multi-value headers.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\RequestExecutionException.cs
/// <summary>
/// Exception that is thrown when an unhandled exception occurred during
/// the execution of the current request.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RequestExecutionException"/>, with
/// the specified <paramref name="innerException"/>.
/// </summary>
/// <param name="innerException"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\RequestHeaders.cs
/// <summary>
/// Provides strongly-typed access to HTTP request headers.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RequestHeaders"/> class.
/// </summary>
/// <param name="headers">The headers.</param>
/// <summary>
/// Content-types that are acceptable.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains the header values if they are available; otherwise it will be empty.</value>
/// <summary>
/// Character sets that are acceptable.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains the header values if they are available; otherwise it will be empty.</value>
/// <summary>
/// Acceptable encodings.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains the header values if they are available; otherwise it will be empty.</value>
/// <summary>
/// Acceptable languages for response.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains the header values if they are available; otherwise it will be empty.</value>
/// <summary>
/// Authorization header value for request.
/// </summary>
/// <value>A <see cref="string"/> containing the header value if it is available; otherwise <see cref="string.Empty"/>.</value>
/// <summary>
/// Used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains the header values if they are available; otherwise it will be empty.</value>
/// <summary>
/// Contains name/value pairs of information stored for that URL.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains <see cref="INancyCookie"/> instances if they are available; otherwise it will be empty.</value>
/// <summary>
/// What type of connection the user-agent would prefer.
/// </summary>
/// <value>A <see cref="string"/> containing the header value if it is available; otherwise <see cref="string.Empty"/>.</value>
/// <summary>
/// The length of the request body in octets (8-bit bytes).
/// </summary>
/// <value>The length of the contents if it is available; otherwise 0.</value>
/// <summary>
/// The mime type of the body of the request (used with POST and PUT requests).
/// </summary>
/// <value>A <see cref="string"/> containing the header value if it is available; otherwise <see cref="string.Empty"/>.</value>
/// <summary>
/// The date and time that the message was sent.
/// </summary>
/// <value>A <see cref="DateTime"/> instance that specifies when the message was sent. If not available then <see cref="DateTime.MinValue"/> will be returned.</value>
/// <summary>
/// The domain name of the server (for virtual hosting), mandatory since HTTP/1.1
/// </summary>
/// <value>A <see cref="string"/> containing the header value if it is available; otherwise <see cref="string.Empty"/>.</value>
/// <summary>
/// Only perform the action if the client supplied entity matches the same entity on the server. This is mainly for methods like PUT to only update a resource if it has not been modified since the user last updated it.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains the header values if they are available; otherwise it will be empty.</value>
/// <summary>
/// Allows a 304 Not Modified to be returned if content is unchanged
/// </summary>
/// <value>A <see cref="DateTime"/> instance that specifies when the requested resource must have been changed since. If not available then <see cref="DateTime.MinValue"/> will be returned.</value>
/// <summary>
/// Allows a 304 Not Modified to be returned if content is unchanged
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains the header values if they are available; otherwise it will be empty.</value>
/// <summary>
/// If the entity is unchanged, send me the part(s) that I am missing; otherwise, send me the entire new entity.
/// </summary>
/// <value>A <see cref="string"/> containing the header value if it is available; otherwise <see cref="string.Empty"/>.</value>
/// <summary>
/// Only send the response if the entity has not been modified since a specific time.
/// </summary>
/// <value>A <see cref="DateTime"/> instance that specifies when the requested resource may not have been changed since. If not available then <see cref="DateTime.MinValue"/> will be returned.</value>
/// <summary>
/// Gets the names of the available request headers.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> containing the names of the headers.</value>
/// <summary>
/// Limit the number of times the message can be forwarded through proxies or gateways.
/// </summary>
/// <value>The number of the maximum allowed number of forwards if it is available; otherwise 0.</value>
/// <summary>
/// This is the address of the previous web page from which a link to the currently requested page was followed.
/// </summary>
/// <value>A <see cref="string"/> containing the header value if it is available; otherwise <see cref="string.Empty"/>.</value>
/// <summary>
/// The user agent string of the user agent
/// </summary>
/// <value>A <see cref="string"/> containing the header value if it is available; otherwise <see cref="string.Empty"/>.</value>
/// <summary>
/// Gets all the header values.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains all the header values.</value>
/// <summary>
/// Returns an enumerator that iterates through the collection.
/// </summary>
/// <returns>A <see cref="IEnumerator{T}"/> that can be used to iterate through the collection.</returns>
/// <summary>
/// Returns an enumerator that iterates through a collection.
/// </summary>
/// <returns>An <see cref="IEnumerator"/> object that can be used to iterate through the collection.</returns>
/// <summary>
/// Gets the values for the header identified by the <paramref name="name"/> parameter.
/// </summary>
/// <param name="name">The name of the header to return the values for.</param>
/// <returns>An <see cref="IEnumerable{T}"/> that contains the values for the header. If the header is not defined then <see cref="Enumerable.Empty{TResult}"/> is returned.</returns>
// note CultureInfo.InvariantCulture is ignored
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ResourceAssemblyProvider.cs
/// <summary>
/// Default set of assemblies that should be scanned for items (views, text, content etc)
/// embedded as resources.
/// </summary>
/// <remarks>The default convention will scan all assemblies that references another assemblies that has a name that starts with Nancy*</remarks>
/// <summary>
/// Gets a list of assemblies that should be scanned for views.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="Assembly"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Response.cs
/// <summary>
/// Encapsulates HTTP-response information from an Nancy operation.
/// </summary>
/// <summary>
/// Null object representing no body
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Response"/> class.
/// </summary>
/// <summary>
/// Gets or sets the type of the content.
/// </summary>
/// <value>The type of the content.</value>
/// <remarks>The default value is <c>text/html</c>.</remarks>
/// <summary>
/// Gets the delegate that will render contents to the response stream.
/// </summary>
/// <value>An <see cref="Action{T}"/> delegate, containing the code that will render contents to the response stream.</value>
/// <remarks>The host of Nancy will pass in the output stream after the response has been handed back to it by Nancy.</remarks>
/// <summary>
/// Gets the collection of HTTP response headers that should be sent back to the client.
/// </summary>
/// <value>An <see cref="IDictionary{TKey,TValue}"/> instance, containing the key/value pair of headers.</value>
/// <summary>
/// Gets or sets the HTTP status code that should be sent back to the client.
/// </summary>
/// <value>A <see cref="HttpStatusCode"/> value.</value>
/// <summary>
/// Gets or sets a text description of the HTTP status code returned to the client.
/// </summary>
/// <value>The HTTP status code description.</value>
/// <summary>
/// Gets the <see cref="INancyCookie"/> instances that are associated with the response.
/// </summary>
/// <value>A <see cref="IList{T}"/> instance, containing <see cref="INancyCookie"/> instances.</value>
/// <summary>
/// Executes at the end of the nancy execution pipeline and before control is passed back to the hosting.
/// Can be used to pre-render/validate views while still inside the main pipeline/error handling.
/// </summary>
/// <param name="context">Nancy context</param>
/// <returns>Task for completion/erroring</returns>
/// <summary>
/// Implicitly cast an <see cref="HttpStatusCode"/> value to a <see cref="Response"/> instance, with the <see cref="StatusCode"/>
/// set to the value of the <see cref="HttpStatusCode"/>.
/// </summary>
/// <param name="statusCode">The <see cref="HttpStatusCode"/> value that is being cast from.</param>
/// <returns>A <see cref="Response"/> instance.</returns>
/// <summary>
/// Implicitly cast an int value to a <see cref="Response"/> instance, with the <see cref="StatusCode"/>
/// set to the value of the int.
/// </summary>
/// <param name="statusCode">The int value that is being cast from.</param>
/// <returns>A <see cref="Response"/> instance.</returns>
/// <summary>
/// Implicitly cast an string instance to a <see cref="Response"/> instance, with the <see cref="Contents"/>
/// set to the value of the string.
/// </summary>
/// <param name="contents">The string that is being cast from.</param>
/// <returns>A <see cref="Response"/> instance.</returns>
/// <summary>
/// Implicitly cast an <see cref="Action{T}"/>, where T is a <see cref="Stream"/>, instance to
/// a <see cref="Response"/> instance, with the <see cref="Contents"/> set to the value of the action.
/// </summary>
/// <param name="streamFactory">The <see cref="Action{T}"/> instance that is being cast from.</param>
/// <returns>A <see cref="Response"/> instance.</returns>
/// <summary>
/// Implicitly cast a <see cref="DynamicDictionaryValue"/> instance to a <see cref="Response"/> instance,
/// with the <see cref="Contents"/> set to the value of the <see cref="DynamicDictionaryValue"/>.
/// </summary>
/// <param name="value">The <see cref="DynamicDictionaryValue"/> instance that is being cast from.</param>
/// <returns>A <see cref="Response"/> instance.</returns>
/// <summary>
/// Converts a string content value to a response action.
/// </summary>
/// <param name="contents">The string containing the content.</param>
/// <returns>A response action that will write the content of the string to the response stream.</returns>
/// <summary>
/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
/// </summary>
/// <remarks>This method can be overridden in sub-classes to dispose of response specific resources.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ResponseExtensions.cs
/// <summary>
/// Containing extensions for the <see cref="Response"/> object.
/// </summary>
/// <summary>
/// Force the response to be downloaded as an attachment
/// </summary>
/// <param name="response">Response object</param>
/// <param name="fileName">Filename for the download</param>
/// <param name="contentType">Optional content type</param>
/// <returns>Modified Response object</returns>
/// <summary>
/// Adds a <see cref="INancyCookie"/> to the response.
/// </summary>
/// <param name="response">Response object</param>
/// <param name="name">The name of the cookie.</param>
/// <param name="value">The value of the cookie.</param>
/// <returns>The <see cref="Response"/> instance.</returns>
/// <summary>
/// Adds a <see cref="INancyCookie"/> to the response.
/// </summary>
/// <param name="response">Response object</param>
/// <param name="name">The name of the cookie.</param>
/// <param name="value">The value of the cookie.</param>
/// <param name="expires">The expiration date of the cookie. Can be <see langword="null" /> if it should expire at the end of the session.</param>
/// <returns>The <see cref="Response"/> instance.</returns>
/// <summary>
/// Adds a <see cref="INancyCookie"/> to the response.
/// </summary>
/// <param name="response">Response object</param>
/// <param name="name">The name of the cookie.</param>
/// <param name="value">The value of the cookie.</param>
/// <param name="expires">The expiration date of the cookie. Can be <see langword="null" /> if it should expire at the end of the session.</param>
/// <param name="domain">The domain of the cookie.</param>
/// <param name="path">The path of the cookie.</param>
/// <returns>The <see cref="Response"/> instance.</returns>
/// <summary>
/// Adds a <see cref="INancyCookie"/> to the response.
/// </summary>
/// <param name="response">Response object</param>
/// <param name="nancyCookie">A <see cref="INancyCookie"/> instance.</param>
/// <returns></returns>
/// <summary>
/// Add a header to the response
/// </summary>
/// <param name="response">Response object</param>
/// <param name="header">Header name</param>
/// <param name="value">Header value</param>
/// <returns>Modified response</returns>
/// <summary>
/// Adds headers to the response using anonymous types
/// </summary>
/// <param name="response">Response object</param>
/// <param name="headers">
/// Array of headers - each header should be an anonymous type with two string properties 
/// 'Header' and 'Value' to represent the header name and its value.
/// </param>
/// <returns>Modified response</returns>
/// <summary>
/// Adds headers to the response using anonymous types
/// </summary>
/// <param name="response">Response object</param>
/// <param name="headers">
/// Array of headers - each header should be a Tuple with two string elements 
/// for header name and header value
/// </param>
/// <returns>Modified response</returns>
/// <summary>
/// Sets the content type of the response
/// </summary>
/// <param name="response">Response object</param>
/// <param name="contentType">The type of the content</param>
/// <returns>Modified response</returns>
/// <summary>
/// Sets the status code of the response
/// </summary>
/// <param name="response">Response object</param>
/// <param name="statusCode">The http status code</param>
/// <returns>Modified response</returns>
/// <summary>
/// Sets the status code of the response
/// </summary>
/// <param name="response">Response object</param>
/// <param name="statusCode">The http status code</param>
/// <returns>Modified response</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\RootPathApplicationStartup.cs
/// <summary>
/// Assigns the root path of the application whom ever needs it.
/// </summary>
/// <remarks>This task is run at application startup.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="RootPathApplicationStartup"/> class.
/// </summary>
/// <param name="rootPathProvider">An <see cref="IRootPathProvider"/> instance.</param>
/// <summary>
/// Perform any initialisation tasks
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\StaticConfiguration.cs
/// <summary>
/// Gets or sets a value indicating whether or not to disable traces in error messages
/// </summary>
/// <summary>
/// Gets or sets a value indicating whether or not to respond with 405 responses
/// </summary>
/// <summary>
/// Gets or sets a value indicating whether or not to enable case sensitivity in query, parameters (DynamicDictionary) and model binding. Enable this to conform with RFC3986.
/// </summary>
/// <summary>
/// Gets or sets a value indicating whether or not to route HEAD requests explicitly.
/// </summary>
/// <summary>
/// Gets a value indicating whether we are running in debug mode or not.
/// Checks the entry assembly to see whether it has been built in debug mode.
/// If anything goes wrong it returns false.
/// </summary>
/// <summary>
/// Gets or sets the limit on the number of query string variables, form fields,
/// or multipart sections in a request.
/// </summary>
//Get all non-nancy assemblies, and select the custom attributes
//if there are any, then return the IsJITTrackingEnabled
//else if the collection is empty it returns false
// Evil catch all - don't want to blow up trying to detect debug mode!
/// <summary>
/// Gets or sets a value indicating whether or not to enable request tracing
/// </summary>
/// <summary>
/// Gets or sets a value indicating whether or not to disable request stream switching
/// </summary>
/// <summary>
/// Gets or sets a value indicating whether this <see cref="Nancy.StaticConfiguration"/> allow file stream
/// upload async due to mono issues before v4.  Uploads of over 80mb would result in extra padded chars to the filestream corrupting the file.
/// </summary>
/// <value><c>true</c> if allow file stream upload async; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets or sets a value indicating whether or not to enable runtime view discovery
/// Defaults to True in debug mode and False in release mode
/// </summary>
/// <summary>
/// Gets or sets a value indicating whether or not to allow runtime changes of views
/// Defaults to True in debug mode and False in release mode
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\StaticContent.cs
/// <summary>
/// Registers the static contents hook in the application pipeline at startup.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="StaticContent"/> class, using the
/// provided <paramref name="rootPathProvider"/> and <paramref name="conventions"/>.
/// </summary>
/// <param name="rootPathProvider">The current root path provider.</param>
/// <param name="conventions">The static content conventions.</param>
/// <summary>
/// Perform any initialisation tasks
/// </summary>
/// <summary>
/// Enable "manual" static content.
/// Only use this if you want to manually configure a pipeline hook to have static
/// content server, for example, after authentication.
/// </summary>
/// <param name="pipelines">The pipelines to hook into</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Url.cs
/// <summary>
/// Represents a full Url of the form scheme://hostname:port/basepath/path?query
/// </summary>
/// <remarks>Since this is for  internal use, and fragments are not passed to the server, fragments are not supported.</remarks>
/// <summary>
/// Creates an instance of the <see cref="Url" /> class
/// </summary>
/// <summary>
/// Creates an instance of the <see cref="Url" /> class
/// </summary>
/// <param name="url">A <see cref="string" /> containing a URL.</param>
/// <summary>
/// Gets or sets the HTTP protocol used by the client.
/// </summary>
/// <value>The protocol.</value>
/// <summary>
/// Gets the hostname of the request
/// </summary>
/// <summary>
/// Gets the port name of the request
/// </summary>
/// <summary>
/// Gets the base path of the request i.e. the "Nancy root"
/// </summary>
/// <summary>
/// Gets the path of the request, relative to the base path
/// This property drives the route matching
/// </summary>
/// <summary>
/// Gets the querystring data of the requested resource.
/// </summary>
/// <summary>
/// Gets the domain part of the request
/// </summary>
/// <summary>
/// Gets whether the url is secure or not.
/// </summary>
/// <summary>
/// Clones the url.
/// </summary>
/// <returns>Returns a new cloned instance of the url.</returns>
/// <summary>
/// Clones the url.
/// </summary>
/// <returns>Returns a new cloned instance of the url.</returns>
/// <summary>
/// Casts the current <see cref="Url"/> instance to a <see cref="string"/> instance.
/// </summary>
/// <param name="url">The instance that should be cast.</param>
/// <returns>A <see cref="string"/> representation of the <paramref name="url"/>.</returns>
/// <summary>
/// Casts the current <see cref="string"/> instance to a <see cref="Url"/> instance.
/// </summary>
/// <param name="url">The instance that should be cast.</param>
/// <returns>An <see cref="Url"/> representation of the <paramref name="url"/>.</returns>
/// <summary>
/// Casts the current <see cref="Url"/> instance to a <see cref="Uri"/> instance.
/// </summary>
/// <param name="url">The instance that should be cast.</param>
/// <returns>An <see cref="Uri"/> representation of the <paramref name="url"/>.</returns>
/// <summary>
/// Casts a <see cref="Uri"/> instance to a <see cref="Url"/> instance
/// </summary>
/// <param name="uri">The instance that should be cast.</param>
/// <returns>An <see cref="Url"/> representation of the <paramref name="uri"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewRenderer.cs
/// <summary>
/// Helper class for rendering a view from a route handler.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ViewRenderer"/> class.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> instance that is rendering the view.</param>
/// <summary>
/// Renders the view with its name resolved from the model type, and model defined by the <paramref name="model"/> parameter.
/// </summary>
/// <param name="model">The model that should be passed into the view.</param>
/// <returns>A delegate that can be invoked with the <see cref="Stream"/> that the view should be rendered to.</returns>
/// <remarks>The view name is model.GetType().Name with any Model suffix removed.</remarks>
/// <summary>
/// Renders the view with the name defined by the <paramref name="viewName"/> parameter.
/// </summary>
/// <param name="viewName">The name of the view to render.</param>
/// <returns>A delegate that can be invoked with the <see cref="Stream"/> that the view should be rendered to.</returns>
/// <remarks>The extension in the view name is optional. If it is omitted, then Nancy will try to resolve which of the available engines that should be used to render the view.</remarks>
/// <summary>
/// Renders the view with the name and model defined by the <paramref name="viewName"/> and <paramref name="model"/> parameters.
/// </summary>
/// <param name="viewName">The name of the view to render.</param>
/// <param name="model">The model that should be passed into the view.</param>
/// <returns>A delegate that can be invoked with the <see cref="Stream"/> that the view should be rendered to.</returns>
/// <remarks>The extension in the view name is optional. If it is omitted, then Nancy will try to resolve which of the available engines that should be used to render the view.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\AppDomainAssemblyTypeScanner.cs
/// <summary>
/// Scans the app domain for assemblies and types
/// </summary>
/// <summary>
/// Nancy core assembly
/// </summary>
/// <summary>
/// App domain type cache
/// </summary>
/// <summary>
/// App domain assemblies cache
/// </summary>
/// <summary>
/// Indicates whether the all Assemblies, that references a Nancy assembly, have already been loaded
/// </summary>
/// <summary>
/// The default assemblies for scanning.
/// Includes the nancy assembly and anything referencing a nancy assembly
/// </summary>
/// <summary>
/// Gets or sets a set of rules for which assemblies are scanned
/// Defaults to just assemblies that have references to nancy, and nancy
/// itself.
/// Each item in the enumerable is a delegate that takes the assembly and
/// returns true if it is to be included. Returning false doesn't mean it won't
/// be included as a true from another delegate will take precedence.
/// </summary>
/// <summary>
/// Gets app domain types.
/// </summary>
/// <summary>
/// Gets app domain types.
/// </summary>
/// <summary>
/// Add assemblies to the list of assemblies to scan for Nancy types
/// </summary>
/// <param name="assemblyNames">One or more assembly names</param>
/// <summary>
/// Add assemblies to the list of assemblies to scan for Nancy types
/// </summary>
/// <param name="assemblies">One of more assemblies</param>
/// <summary>
/// Add predicates for determining which assemblies to scan for Nancy types
/// </summary>
/// <param name="predicates">One or more predicates</param>
/// <summary>
/// Load assemblies from a the app domain base directory matching a given wildcard.
/// Assemblies will only be loaded if they aren't already in the appdomain.
/// </summary>
/// <param name="wildcardFilename">Wildcard to match the assemblies to load</param>
/// <summary>
/// Load assemblies from a given directory matching a given wildcard.
/// Assemblies will only be loaded if they aren't already in the appdomain.
/// </summary>
/// <param name="containingDirectory">Directory containing the assemblies</param>
/// <param name="wildcardFilename">Wildcard to match the assemblies to load</param>
/// <summary>
/// Refreshes the type cache if additional assemblies have been loaded.
/// Note: This is called automatically if assemblies are loaded using LoadAssemblies.
/// </summary>
/// <summary>
/// Updates the assembly cache from the appdomain
/// </summary>
/// <summary>
/// Loads any assembly that references a Nancy assembly.
/// </summary>
//the assembly maybe it's not managed code
//the assembly might already be loaded
/// <summary>
/// Gets all types implementing a particular interface/base class
/// </summary>
/// <param name="type">Type to search for</param>
/// <returns>An <see cref="IEnumerable{T}"/> of types.</returns>
/// <remarks>Will scan with <see cref="ScanMode.All"/>.</remarks>
/// <summary>
/// Gets all types implementing a particular interface/base class
/// </summary>
/// <param name="type">Type to search for</param>
/// <param name="mode">A <see cref="ScanMode"/> value to determine which type set to scan in.</param>
/// <returns>An <see cref="IEnumerable{T}"/> of types.</returns>
//mode == ScanMode.All
/// <summary>
/// Gets all types implementing a particular interface/base class
/// </summary>
/// <typeparam name="TType">Type to search for</typeparam>
/// <returns>An <see cref="IEnumerable{T}"/> of types.</returns>
/// <remarks>Will scan with <see cref="ScanMode.All"/>.</remarks>
/// <summary>
/// Gets all types implementing a particular interface/base class
/// </summary>
/// <typeparam name="TType">Type to search for</typeparam>
/// <param name="mode">A <see cref="ScanMode"/> value to determine which type set to scan in.</param>
/// <returns>An <see cref="IEnumerable{T}"/> of types.</returns>
/// <summary>
/// Returns the directories containing dll files. It uses the default convention as stated by microsoft.
/// </summary>
/// <see href="http://msdn.microsoft.com/en-us/library/system.appdomainsetup.privatebinpathprobe.aspx"/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\BootstrapperException.cs
/// <summary>
/// Exception that is raised from inside the <see cref="NancyBootstrapperBase{T}"/> type or one of
/// the inheriting types.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BootstrapperException"/> class, with
/// the provided <paramref name="message"/>.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="BootstrapperException"/> class, with
/// the provided <paramref name="message"/> and <paramref name="innerException"/>.
/// </summary>
/// <param name="message">The error message that explains the reason for the exception.</param>
/// <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
/// <summary>
/// Initializes a new instance of the <see cref="MultipleRootPathProvidersLocatedException"/> class.
/// </summary>
/// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\CollectionTypeRegistration.cs
/// <summary>
/// Represents a type to be registered multiple times into the
/// container to later be resolved using an IEnumerable{RegistrationType}
/// constructor dependency.
/// </summary>
/// <summary>
/// Represents a type to be registered multiple times into the
/// container to later be resolved using an IEnumerable{RegistrationType}
/// constructor dependency.
/// </summary>
/// <param name="registrationType">Registration type i.e. IMyInterface</param>
/// <param name="implementationTypes">Collection of implementation type i.e. MyClassThatImplementsIMyInterface</param>
/// <param name="lifetime">Lifetime to register the type as</param>
/// <summary>
/// Collection of implementation type i.e. MyClassThatImplementsIMyInterface
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\ContainerRegistration.cs
/// <summary>
/// Base class for container registrations
/// </summary>
/// <summary>
/// Gets the lifetime of the registration
/// </summary>
/// <summary>
/// Registration type i.e. IMyInterface
/// </summary>
/// <summary>
/// Checks if all implementation types are assignable from the registration type, otherwise throws an exception.
/// </summary>
/// <param name="types">The implementation types.</param>
/// <exception cref="ArgumentException">One or more of the implementation types is not assignable from the registration type.</exception>
/// <exception cref="InvalidOperationException">The <see cref="RegistrationType"/> property must be assigned before the method is invoked.</exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\FavIconApplicationStartup.cs
/// <summary>
/// Application startup task that attempts to locate a favicon. The startup will first scan all
/// folders in the path defined by the provided <see cref="IRootPathProvider"/> and if it cannot
/// find one, it will fall back and use the default favicon that is embedded in the Nancy.dll file.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="FavIconApplicationStartup"/> class, with the
/// provided <see cref="IRootPathProvider"/> instance.
/// </summary>
/// <param name="rootPathProvider">The <see cref="IRootPathProvider"/> that should be used to scan for a favicon.</param>
/// <summary>
/// Gets the default favicon
/// </summary>
/// <value>A byte array, containing a favicon.ico file.</value>
/// <summary>
/// Perform any initialisation tasks
/// </summary>
/// <param name="pipelines">Application pipelines</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\IApplicationStartup.cs
/// <summary>
/// Provides a hook to execute code during application startup.
/// </summary>
/// <summary>
/// Perform any initialisation tasks
/// </summary>
/// <param name="pipelines">Application pipelines</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\INancyBootstrapper.cs
/// <summary>
/// Bootstrapper for the Nancy Engine
/// </summary>
/// <summary>
/// Initialise the bootstrapper.
/// </summary>
/// <remarks>Must be called prior to <see cref="GetEngine"/> and <see cref="GetEnvironment"/>.</remarks>
/// <summary>
/// Gets the configured <see cref="INancyEngine"/>.
/// </summary>
/// <returns>An configured <see cref="INancyEngine"/> instance.</returns>
/// <remarks>The boostrapper must be initialised (<see cref="Initialise"/>) prior to calling this.</remarks>
/// <summary>
/// Get the <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <returns>An configured <see cref="INancyEnvironment"/> instance.</returns>
/// <remarks>The boostrapper must be initialised (<see cref="Initialise"/>) prior to calling this.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\InstanceRegistration.cs
/// <summary>
/// Represents an instance to be registered into the container
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="InstanceRegistration"/> class.
/// </summary>
/// <param name="registrationType">The registration type.</param>
/// <param name="implementation">The implementation.</param>
/// <summary>
/// Implementation object instance i.e. instance of MyClassThatImplementsIMyInterface
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\IPipelines.cs
/// <summary>
/// <para>
/// The pre-request hook
/// </para>
/// <para>
/// The PreRequest hook is called prior to processing a request. If a hook returns
/// a non-null response then processing is aborted and the response provided is
/// returned.
/// </para>
/// </summary>
/// <summary>
/// <para>
/// The post-request hook
/// </para>
/// <para>
/// The post-request hook is called after the response is created. It can be used
/// to rewrite the response or add/remove items from the context.
/// </para>
/// </summary>
/// <summary>
/// <para>
/// The error hook
/// </para>
/// <para>
/// The error hook is called if an exception is thrown at any time during the pipeline.
/// If no error hook exists a standard InternalServerError response is returned
/// </para>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\IRegistrations.cs
/// <summary>
/// Provides a hook to perform registrations during application startup.
/// </summary>
/// <summary>
/// Gets the type registrations to register for this startup task
/// </summary>
/// <summary>
/// Gets the collection registrations to register for this startup task
/// </summary>
/// <summary>
/// Gets the instance registrations to register for this startup task
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\IRequestStartup.cs
/// <summary>
/// Provides a hook to execute code during request startup.
/// </summary>
/// <summary>
/// Perform any initialisation tasks
/// </summary>
/// <param name="pipelines">Application pipelines</param>
/// <param name="context">The current context</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\Lifetime.cs
/// <summary>
/// Represents the lifetime of a container registration
/// </summary>
/// <summary>
/// Transient lifetime - each request to the container for
/// the type will result in a new version being returned.
/// </summary>
/// <summary>
/// Singleton - each request to the container for the type
/// will result in the same instance being returned.
/// </summary>
/// <summary>
/// PerRequest - within the context of each request each request
/// for the type will result in the same instance being returned.
/// Different requests will have different versions.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\ModuleRegistrationType.cs
/// <summary>
/// Represents a module type for registration into a container
/// </summary>
/// <param name="moduleType">Type of the module</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\MultipleRootPathProvidersLocatedException.cs
/// <summary>
/// Exception raised when the <see cref="NancyBootstrapperBase{T}"/> discovers more than one
/// <see cref="IRootPathProvider"/> implementation in the loaded assemblies.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="MultipleRootPathProvidersLocatedException"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="MultipleRootPathProvidersLocatedException"/> class.
/// </summary>
/// <param name="message">The message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the <see cref="MultipleRootPathProvidersLocatedException"/> class.
/// </summary>
/// <param name="message">The error message that explains the reason for the exception.</param>
/// <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
/// <summary>
/// Initializes a new instance of the <see cref="MultipleRootPathProvidersLocatedException"/> class.
/// </summary>
/// <param name="providerTypes">The provider types.</param>
/// <summary>
/// Initializes a new instance of the <see cref="MultipleRootPathProvidersLocatedException"/> class.
/// </summary>
/// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
/// <summary>
/// Gets the provider types.
/// </summary>
/// <value>
/// The provider types.
/// </value>
/// <summary>
/// Stores the provider types.
/// </summary>
/// <param name="providerTypes">The provider types.</param>
/// <summary>
/// Returns a more friendly and informative message if the list of providers is available.
/// </summary>
/// <remarks>
/// Message generated will be of the format:
/// <example>
/// More than one IRootPathProvider was found:
///    Nancy.Tests.Functional.Tests.CustomRootPathProvider2
///    Nancy.Tests.Functional.Tests.CustomRootPathProvider
/// and since we do not know which one you want to use, you need to override the RootPathProvider property on your bootstrapper and specify which one to use. Sorry for the inconvenience.
/// </example>
/// </remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\NancyBootstrapperBase.cs
/// <summary>
/// Nancy bootstrapper base class
/// </summary>
/// <typeparam name="TContainer">IoC container type</typeparam>
/// <summary>
/// Stores whether the bootstrapper has been initialised
/// prior to calling GetEngine.
/// </summary>
/// <summary>
/// Stores whether the bootstrapper is in the process of
/// being disposed.
/// </summary>
/// <summary>
/// Stores the <see cref="IRootPathProvider"/> used by Nancy
/// </summary>
/// <summary>
/// Default Nancy conventions
/// </summary>
/// <summary>
/// Internal configuration
/// </summary>
/// <summary>
/// Application pipelines.
/// Pipelines are "cloned" per request so they can be modified
/// at the request level.
/// </summary>
/// <summary>
/// Nancy modules - built on startup from the app domain scanner
/// </summary>
/// <summary>
/// Cache of request startup task types
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyBootstrapperBase{TContainer}"/> class.
/// </summary>
/// <summary>
/// Gets the Container instance - automatically set during initialise.
/// </summary>
/// <summary>
/// Nancy internal configuration
/// </summary>
/// <summary>
/// Nancy conventions
/// </summary>
/// <summary>
/// Gets all available module types
/// </summary>
// Shouldn't need thread safety here?
/// <summary>
/// Gets the available view engine types
/// </summary>
/// <summary>
/// Gets the available custom model binders
/// </summary>
/// <summary>
/// Gets the available custom type converters
/// </summary>
/// <summary>
/// Gets the available custom body deserializers
/// </summary>
/// <summary>
/// Gets all application startup tasks
/// </summary>
/// <summary>
/// Gets all request startup tasks
/// </summary>
/// <summary>
/// Gets all registration tasks
/// </summary>
/// <summary>
/// Gets the root path provider
/// </summary>
/// <summary>
/// Gets the validator factories.
/// </summary>
/// <summary>
/// Gets the default favicon
/// </summary>
/// <summary>
/// Gets the cryptography configuration
/// </summary>
/// <summary>
/// Initialise the bootstrapper. Must be called prior to GetEngine.
/// </summary>
// We need to call this to fix an issue with assemblies that are referenced by DI not being loaded
// TODO - should this be after initialiseinternal?
/// <summary>
/// Configures the Nancy environment
/// </summary>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance to configure</param>
/// <summary>
/// Gets the <see cref="INancyEnvironmentConfigurator"/> used by th.
/// </summary>
/// <returns>An <see cref="INancyEnvironmentConfigurator"/> instance.</returns>
/// <summary>
/// Gets the diagnostics for initialisation
/// </summary>
/// <returns>IDiagnostics implementation</returns>
/// <summary>
/// Gets all registered application startup tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IApplicationStartup"/> instances.</returns>
/// <summary>
/// Registers and resolves all request startup tasks
/// </summary>
/// <param name="container">Container to use</param>
/// <param name="requestStartupTypes">Types to register</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IRequestStartup"/> instances.</returns>
/// <summary>
/// Gets all registered application registration tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IRegistrations"/> instances.</returns>
/// <summary>
/// Get all NancyModule implementation instances
/// </summary>
/// <param name="context">The current context</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="INancyModule"/> instances.</returns>
/// <summary>
/// Retrieves a specific <see cref="INancyModule"/> implementation - should be per-request lifetime
/// </summary>
/// <param name="moduleType">Module type</param>
/// <param name="context">The current context</param>
/// <returns>The <see cref="INancyModule"/> instance</returns>
/// <summary>
/// Gets the configured INancyEngine
/// </summary>
/// <returns>Configured INancyEngine</returns>
/// <summary>
/// Get the <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <returns>An configured <see cref="INancyEnvironment"/> instance.</returns>
/// <remarks>The boostrapper must be initialised (<see cref="INancyBootstrapper.Initialise"/>) prior to calling this.</remarks>
/// <summary>
/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
/// </summary>
/// <filterpriority>2</filterpriority>
// Prevent StackOverflowException if ApplicationContainer.Dispose re-triggers this Dispose
// Only dispose if we're initialised, prevents possible issue with recursive disposing.
/// <summary>
/// Hides Equals from the overrides list
/// </summary>
/// <param name="obj">Object to compare</param>
/// <returns>Boolean indicating equality</returns>
/// <summary>
/// Hides GetHashCode from the overrides list
/// </summary>
/// <returns>Hash code integer</returns>
/// <summary>
/// Creates and initializes the request pipelines.
/// </summary>
/// <param name="context">The <see cref="NancyContext"/> used by the request.</param>
/// <returns>An <see cref="IPipelines"/> instance.</returns>
/// <summary>
/// Hides ToString from the overrides list
/// </summary>
/// <returns>String representation</returns>
/// <summary>
/// Initialise the bootstrapper - can be used for adding pre/post hooks and
/// any other initialisation tasks that aren't specifically container setup
/// related
/// </summary>
/// <param name="container">Container instance for resolving types if required.</param>
/// <summary>
/// Initialise the request - can be used for adding pre/post hooks and
/// any other per-request initialisation tasks that aren't specifically container setup
/// related
/// </summary>
/// <param name="container">Container</param>
/// <param name="pipelines">Current pipelines</param>
/// <param name="context">Current context</param>
/// <summary>
/// Configure the application level container with any additional registrations.
/// </summary>
/// <param name="existingContainer">Container instance</param>
/// <summary>
/// Overrides/configures Nancy's conventions
/// </summary>
/// <param name="nancyConventions">Convention object instance</param>
/// <summary>
/// Releases unmanaged and - optionally - managed resources.
/// </summary>
/// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
/// <summary>
/// Resolve INancyEngine
/// </summary>
/// <returns>INancyEngine implementation</returns>
/// <summary>
/// Gets the application level container
/// </summary>
/// <returns>Container instance</returns>
/// <summary>
/// Registers an <see cref="INancyEnvironment"/> instance in the container.
/// </summary>
/// <param name="container">The container to register into.</param>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance to register.</param>
/// <summary>
/// Register the bootstrapper's implemented types into the container.
/// This is necessary so a user can pass in a populated container but not have
/// to take the responsibility of registering things like INancyModuleCatalog manually.
/// </summary>
/// <param name="applicationContainer">Application container to register into</param>
/// <summary>
/// Register the default implementations of internally used types into the container as singletons
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="typeRegistrations">Type registrations to register</param>
/// <summary>
/// Register the various collections into the container as singletons to later be resolved
/// by IEnumerable{Type} constructor dependencies.
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="collectionTypeRegistrationsn">Collection type registrations to register</param>
/// <summary>
/// Register the given module types into the container
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="moduleRegistrationTypes">NancyModule types</param>
/// <summary>
/// Register the given instances into the container
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="instanceRegistrations">Instance registration types</param>
/// <summary>
/// Gets additional required type registrations
/// that don't form part of the core Nancy configuration
/// </summary>
/// <returns>Collection of TypeRegistration types</returns>
/// <summary>
/// Gets any additional instance registrations that need to
/// be registered into the container
/// </summary>
/// <returns>Collection of InstanceRegistration types</returns>
/// <summary>
/// Creates a list of types for the collection types that are
/// required to be registered in the application scope.
/// </summary>
/// <returns>Collection of CollectionTypeRegistration types</returns>
/// <summary>
/// Takes the registration tasks and calls the relevant methods to register them
/// </summary>
/// <param name="registrationTasks">Registration tasks</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\NancyBootstrapperLocator.cs
/// <summary>
/// Class for locating an INancyBootstrapper implementation.
///
/// Will search the app domain for a non-abstract one, and if it can't find one
/// it will use the default nancy one that uses TinyIoC.
/// </summary>
/// <summary>
/// Gets the located bootstrapper
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\NancyBootstrapperWithRequestContainerBase.cs
/// <summary>
/// Nancy bootstrapper base with per-request container support.
/// Stores/retrieves the child container in the context to ensure that
/// only one child container is stored per request, and that the child
/// container will be disposed at the end of the request.
/// </summary>
/// <typeparam name="TContainer">IoC container type</typeparam>
/// <summary>
/// Context key for storing the child container in the context
/// </summary>
/// <summary>
/// Stores the module registrations to be registered into the request container
/// </summary>
/// <summary>
/// Stores the per-request type registrations
/// </summary>
/// <summary>
/// Stores the per-request collection registrations
/// </summary>
/// <summary>
/// Gets the context key for storing the child container in the context
/// </summary>
/// <summary>
/// Get all <see cref="INancyModule"/> implementation instances
/// </summary>
/// <param name="context">The current context</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="INancyModule"/> instances.</returns>
/// <summary>
/// Retrieves a specific <see cref="INancyModule"/> implementation - should be per-request lifetime
/// </summary>
/// <param name="moduleType">Module type</param>
/// <param name="context">The current context</param>
/// <returns>The <see cref="INancyModule"/> instance</returns>
/// <summary>
/// Creates and initializes the request pipelines.
/// </summary>
/// <param name="context">The <see cref="NancyContext"/> used by the request.</param>
/// <returns>An <see cref="IPipelines"/> instance.</returns>
/// <summary>
/// Takes the registration tasks and calls the relevant methods to register them
/// </summary>
/// <param name="registrationTasks">Registration tasks</param>
/// <summary>
/// Gets the per-request container
/// </summary>
/// <param name="context">Current context</param>
/// <returns>Request container instance</returns>
/// <summary>
/// Configure the request container
/// </summary>
/// <param name="container">Request container instance</param>
/// <param name="context"></param>
/// <summary>
/// Register the given module types into the container
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="moduleRegistrationTypes">NancyModule types</param>
/// <summary>
/// Creates a per request child/nested container
/// </summary>
/// <param name="context">Current context</param>
/// <returns>Request container instance</returns>
/// <summary>
/// Register the given module types into the request container
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="moduleRegistrationTypes">NancyModule types</param>
/// <summary>
/// Retrieve all module instances from the container
/// </summary>
/// <param name="container">Container to use</param>
/// <returns>Collection of NancyModule instances</returns>
/// <summary>
/// Retrieve a specific module instance from the container
/// </summary>
/// <param name="container">Container to use</param>
/// <param name="moduleType">Type of the module</param>
/// <returns>NancyModule instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\NancyInternalConfiguration.cs
/// <summary>
/// Configuration class for Nancy's internals.
/// Contains implementation types/configuration for Nancy that usually
/// do not require overriding in "general use".
/// </summary>
/// <summary>
/// Gets the Nancy default configuration
/// </summary>
/// <summary>
/// Gets a value indicating whether the configuration is valid.
/// </summary>
/// <summary>
/// Default Nancy configuration with specific overloads
/// </summary>
/// <param name="configurationBuilder">Configuration builder for overriding the default configuration properties.</param>
/// <returns>Nancy configuration instance</returns>
/// <summary>
/// Returns the configuration types as a TypeRegistration collection
/// </summary>
/// <returns>TypeRegistration collection representing the configuration types</returns>
/// <summary>
/// Returns the collection configuration types as a CollectionTypeRegistration collection
/// </summary>
/// <returns>CollectionTypeRegistration collection representing the configuration types</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\Pipelines.cs
/// <summary>
/// Default implementation of the Nancy pipelines
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Pipelines"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Pipelines"/> class and clones the hooks from
/// the provided <see cref="IPipelines"/> instance.
/// </summary>
/// <summary>
/// <para>
/// The pre-request hook
/// </para>
/// <para>
/// The PreRequest hook is called prior to processing a request. If a hook returns
/// a non-null response then processing is aborted and the response provided is
/// returned.
/// </para>
/// </summary>
/// <summary>
/// <para>
/// The post-request hook
/// </para>
/// <para>
/// The post-request hook is called after the response is created. It can be used
/// to rewrite the response or add/remove items from the context.
/// </para>
/// </summary>
/// <summary>
/// <para>
/// The error hook
/// </para>
/// <para>
/// The error hook is called if an exception is thrown at any time during the pipeline.
/// If no error hook exists a standard InternalServerError response is returned
/// </para>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\Registrations.cs
/// <summary>
/// Helper class for providing application registrations
/// </summary>
/// <summary>
/// Gets the collection registrations to register for this startup task
/// </summary>
/// <summary>
/// Gets the instance registrations to register for this startup task
/// </summary>
/// <summary>
/// Gets the type registrations to register for this startup task
/// </summary>
/// <summary>
/// Scans for the implementation of <typeparamref name="TRegistration"/> and registers it.
/// </summary>
/// <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
/// <typeparam name="TRegistration">The <see cref="Type"/> to scan for and register as.</typeparam>
/// <summary>
/// Scans for all implementations of <typeparamref name="TRegistration"/> and registers them.
/// </summary>
/// <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
/// <typeparam name="TRegistration">The <see cref="Type"/> to scan for and register as.</typeparam>
/// <summary>
/// Registers the types provided by the <paramref name="defaultImplementations"/> parameters
/// as <typeparamref name="TRegistration"/>.
/// </summary>
/// <typeparam name="TRegistration">The <see cref="Type"/> to register as.</typeparam>
/// <param name="defaultImplementations">The types to register.</param>
/// <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
/// <summary>
/// Registers the type provided by the <paramref name="implementation"/> parameter
/// as <typeparamref name="TRegistration"/>.
/// </summary>
/// <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
/// <typeparam name="TRegistration">The <see cref="Type"/> to register as.</typeparam>
/// <param name="implementation">The <see cref="Type"/> to register as <typeparamref name="TRegistration"/>.</param>
/// <summary>
/// Registers an instance as <typeparamref name="TRegistration"/>.
/// </summary>
/// <typeparam name="TRegistration">The <see cref="Type"/> to register as.</typeparam>
/// <param name="instance">The instance to register.</param>
/// <summary>
/// Scans for a <see cref="Type"/> that implements <typeparamref name="TRegistration"/>. If found, then it
/// will be used for the registration, else it will use <paramref name="defaultImplementation"/>.
/// </summary>
/// <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
/// <typeparam name="TRegistration">The <see cref="Type"/> to register as.</typeparam>
/// <param name="defaultImplementation">The implementation of <typeparamref name="TRegistration"/> that will be use if no other implementation can be found.</param>
/// <remarks>
/// When scanning, it will exclude the assembly that the <see cref="Registrations"/> instance is defined in and it will also ignore
/// the type specified by <paramref name="defaultImplementation"/>.
/// </remarks>
/// <summary>
/// Scans for an implementation of <typeparamref name="TRegistration"/> and registers it if found. If no implementation could
/// be found, it will retrieve an instance of <typeparamref name="TRegistration"/> using the provided <paramref name="defaultImplementationFactory"/>,
/// which will be used in the registration.
/// </summary>
/// <typeparam name="TRegistration">The <see cref="Type"/> to register as.</typeparam>
/// <param name="defaultImplementationFactory">Factory that provides an instance of <typeparamref name="TRegistration"/>.</param>
/// <remarks>When scanning, it will exclude the assembly that the <see cref="Registrations"/> instance is defined in</remarks>
/// <summary>
/// Scans for all implementations of <typeparamref name="TRegistration"/>. If no implementations could be found, then it
/// will register the types specified by <paramref name="defaultImplementations"/>.
/// </summary>
/// <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
/// <typeparam name="TRegistration">The <see cref="Type"/> to register as.</typeparam>
/// <param name="defaultImplementations">The types to register if non could be located while scanning.</param>
/// <remarks>
/// When scanning, it will exclude the assembly that the <see cref="Registrations"/> instance is defined in and it will also ignore
/// the types specified by <paramref name="defaultImplementations"/>.
/// </remarks>
/// <summary>
/// Scans for all implementations of <typeparamref name="TRegistration"/> and registers them, followed by the
/// types defined by the <paramref name="defaultImplementations"/> parameter.
/// </summary>
/// <typeparam name="TRegistration">The <see cref="Type"/> to register as.</typeparam>
/// <param name="defaultImplementations">The types to register last.</param>
/// <param name="lifetime">Lifetime of the registration, defaults to singleton</param>
/// <remarks>
/// When scanning, it will exclude the assembly that the <see cref="Registrations"/> instance is defined in and it will also ignore
/// the types specified by <paramref name="defaultImplementations"/>.
/// </remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\ScanMode.cs
/// <summary>
/// Determines which set of types that the <see cref="AppDomainAssemblyTypeScanner"/> should scan in.
/// </summary>
/// <summary>
/// All available types.
/// </summary>
/// <summary>
/// Only in types that are defined in the Nancy assembly.
/// </summary>
/// <summary>
/// Only types that are defined outside the Nancy assembly.
/// </summary>
/// <summary>
/// Only Namespaces that starts with 'Nancy'
/// </summary>
/// <summary>
/// Only Namespaces that does not start with Nancy
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Bootstrapper\TypeRegistration.cs
/// <summary>
/// Represents a type to be registered into the container
/// </summary>
/// <summary>
/// Represents a type to be registered into the container
/// </summary>
/// <param name="registrationType">Registration type i.e. IMyInterface</param>
/// <param name="implementationType">Implementation type i.e. MyClassThatImplementsIMyInterface</param>
/// <param name="lifetime">Lifetime to register the type as</param>
/// <summary>
/// Implementation type i.e. MyClassThatImplementsIMyInterface
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Configuration\DefaultNancyEnvironment.cs
/// <summary>
/// Default implementation of the <see cref="INancyEnvironment"/> interface.
/// </summary>
/// <summary>
/// Returns an enumerator that iterates through the environment.
/// </summary>
/// <returns>A <see cref="Dictionary{TKey,TValue}.Enumerator"/> that can be used to iterate through the environment.</returns>
/// <summary>
/// Returns an enumerator that iterates through the environment.
/// </summary>
/// <returns> An <see cref="IEnumerator"/> object that can be used to iterate through the environment.</returns>
/// <summary>
/// Gets the number of elements in the environment.
/// </summary>
/// <returns>The number of elements in the environment.</returns>
/// <summary>
/// Determines whether the environment contains an element that has the specified key.
/// </summary>
/// <returns><see langword="true"/> if the environment contains an element that has the specified key; otherwise, <see langword="false"/>.
/// </returns>
/// <param name="key">The key to retrieve.</param>
/// <summary>
/// Gets the value that is associated with the specified key.
/// </summary>
/// <returns><see langword="true"/> if the environment contains an element that has the specified key; otherwise, <see langword="false"/>.</returns>
/// <param name="key">The key to locate.</param>
/// <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
/// <summary>
/// Gets the element that has the specified key in the environment.
/// </summary>
/// <returns>The element that has the specified key in the environment.</returns>
/// <param name="key">The key to locate.</param>
/// <summary>
/// Gets an enumerable collection that contains the keys in the environment.
/// </summary>
/// <returns>An enumerable collection that contains the keys in the environment.</returns>
/// <summary>
/// Gets an enumerable collection that contains the values in the environment.
/// </summary>
/// <returns>An enumerable collection that contains the values in the environment.</returns>
/// <summary>
/// Adds a <paramref name="value"/>, using a provided <paramref name="key"/>, to the environment.
/// </summary>
/// <typeparam name="T">The <see cref="Type"/> of the value to add.</typeparam>
/// <param name="key">The key to store the value as.</param>
/// <param name="value">The value to store in the environment.</param>
/// <summary>
/// Gets the value that is associated with the specified key.
/// </summary>
/// <typeparam name="T">The <see cref="Type"/> of the value to retrieve.</typeparam>
/// <param name="key">The key to get the value for.</param>
/// <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
/// <returns><see langword="true" /> if the value could be retrieved, otherwise <see langword="false" />.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Configuration\DefaultNancyEnvironmentConfigurator.cs
/// <summary>
/// Default implementation of the <see cref="INancyEnvironmentConfigurator"/> interface.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultNancyEnvironmentConfigurator"/> class.
/// </summary>
/// <param name="factory">The <see cref="INancyEnvironmentFactory"/> instance to use when configuring an environment.</param>
/// <param name="defaultConfigurationProviders"><see cref="INancyDefaultConfigurationProvider"/> instances that should be used during the configuration of the environment.</param>
/// <summary>
/// Configures an <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <param name="configuration">The configuration to apply to the environment.</param>
/// <returns>An <see cref="INancyEnvironment"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Configuration\DefaultNancyEnvironmentFactory.cs
/// <summary>
/// Default implementation of the <see cref="INancyEnvironmentFactory"/> interface.
/// </summary>
/// <remarks>Creates instances of the <see cref="DefaultNancyEnvironment"/> type.</remarks>
/// <summary>
/// Creates a new <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <returns>A <see cref="INancyEnvironment"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Configuration\INancyDefaultConfigurationProvider.cs
/// <summary>
/// Defines the functionality for providing default configuration values to the <see cref="INancyEnvironment"/>.
/// </summary>
/// <summary>
/// Gets the default configuration instance to register in the <see cref="INancyEnvironment"/>.
/// </summary>
/// <returns>The configuration instance</returns>
/// <summary>
/// Gets the key that will be used to store the configuration object in the <see cref="INancyEnvironment"/>.
/// </summary>
/// <returns>A <see cref="string"/> containing the key.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Configuration\INancyEnvironment.cs
/// <summary>
/// Defines the functionality of a Nancy environment.
/// </summary>
/// <summary>
/// Adds a <paramref name="value"/>, using a provided <paramref name="key"/>, to the environment.
/// </summary>
/// <typeparam name="T">The <see cref="Type"/> of the value to add.</typeparam>
/// <param name="key">The key to store the value as.</param>
/// <param name="value">The value to store in the environment.</param>
/// <summary>
/// Gets the value that is associated with the specified key.
/// </summary>
/// <typeparam name="T">The <see cref="Type"/> of the value to retrieve.</typeparam>
/// <param name="key">The key to get the value for.</param>
/// <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
/// <returns><see langword="true" /> if the value could be retrieved, otherwise <see langword="false" />.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Configuration\INancyEnvironmentConfigurator.cs
/// <summary>
/// Defines the functionality for applying configuration to an <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <summary>
/// Configures an <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <param name="configuration">The configuration to apply to the environment.</param>
/// <returns>An <see cref="INancyEnvironment"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Configuration\INancyEnvironmentExtensions.cs
/// <summary>
/// Contains extensions for the <see cref="INancyEnvironment"/> type.
/// </summary>
/// <summary>
/// Adds a value to the environment, using the full name of the type defined by <typeparamref name="T"/> as the key.
/// </summary>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance.</param>
/// <param name="value">The value to store in the environment.</param>
/// <typeparam name="T">The <see cref="Type"/> of the value to store in the environment.</typeparam>
/// <summary>
/// Gets a value from the environment, using the full name of the type defined by <typeparamref name="T"/> as the key.
/// </summary>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance.</param>
/// <typeparam name="T">The <see cref="Type"/> of the value to retreive from the environment.</typeparam>
/// <returns></returns>
/// <summary>
/// Gets a value from the environment, using the provided <paramref name="key"/>.
/// </summary>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance.</param>
/// <param name="key">The key to retrieve the value for.</param>
/// <typeparam name="T">The <see cref="Type"/> of the value to retreive from the environment.</typeparam>
/// <returns>The stored value.</returns>
/// <summary>
/// Gets a value from the environment, using the full name of the type defined by <typeparamref name="T"/> as the key. If
/// the value could not be found, then a provided default value is returned.
/// </summary>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance.</param>
/// <param name="defaultValue">The value to return if no stored value could be found.</param>
/// <typeparam name="T">The <see cref="Type"/> of the value to retreive from the environment.</typeparam>
/// <returns>The stored value.</returns>
/// <summary>
/// Gets a value from the environment, using the provided <paramref name="key"/>. If the value could not be found, then
/// a provided default value is returned.
/// </summary>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance.</param>
/// <param name="key">The key to retrieve the value for.</param>
/// <param name="defaultValue">The value to return if no stored value could be found.</param>
/// <typeparam name="T">The <see cref="Type"/> of the value to retreive from the environment.</typeparam>
/// <returns>The stored value.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Configuration\INancyEnvironmentFactory.cs
/// <summary>
/// Defines the functionality for creating a <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <summary>
/// Creates a new <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <returns>A <see cref="INancyEnvironment"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Configuration\NancyDefaultConfigurationProvider.cs
/// <summary>
/// Default (abstract) implementation of <see cref="INancyDefaultConfigurationProvider" /> interface.
/// </summary>
/// <typeparam name="T">The type of the configuration object.</typeparam>
/// <summary>
/// Gets the default configuration instance to register in the <see cref="INancyEnvironment"/>.
/// </summary>
/// <returns>The configuration instance</returns>
/// <summary>
/// Gets the default configuration instance to register in the <see cref="INancyEnvironment"/>.
/// </summary>
/// <returns>The configuration instance</returns>
/// <summary>
/// Gets the full type name of <typeparamref name="T"/>.
/// </summary>
/// <returns>A <see cref="string"/> containing the key.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\AcceptHeaderCoercionConventions.cs
/// <summary>
/// Collection of accept header coercions
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\BuiltInAcceptHeaderCoercions.cs
/// <summary>
/// Built in functions for coercing accept headers.
/// <seealso cref="DefaultAcceptHeaderCoercionConventions"/>
/// </summary>
/*", 0.9m) };
/// <summary>
/// Adds a default accept header if there isn't one.
/// </summary>
/// <param name="currentAcceptHeaders">Current headers</param>
/// <param name="context">Context</param>
/// <returns>Modified headers or original if no modification required</returns>
/// <summary>
/// Replaces the accept header of stupid browsers that request XML instead
/// of HTML.
/// </summary>
/// <param name="currentAcceptHeaders">Current headers</param>
/// <param name="context">Context</param>
/// <returns>Modified headers or original if no modification required</returns>
/// <summary>
/// Boosts the priority of HTML for browsers that ask for xml and html with the
/// same priority.
/// </summary>
/// <param name="currentAcceptHeaders">Current headers</param>
/// <param name="context">Context</param>
/// <returns>Modified headers or original if no modification required</returns>
// If there's one or less accept headers then we can't be a stupid
// browser so just bail out early
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\BuiltInCultureConventions.cs
/// <summary>
/// Built in functions for determining current culture
/// <seealso cref="DefaultCultureConventions"/>
/// </summary>
/// <summary>
/// Gets a set of all valid cultures
/// </summary>
/// <summary>
/// Checks to see if the Form has a CurrentCulture key.
/// </summary>
/// <param name="context">NancyContext</param>
/// <returns>CultureInfo if found in Form otherwise null</returns>
/// <summary>
/// Checks to see if the first argument in the Path can be used to make a CultureInfo.
/// </summary>
/// <param name="context">NancyContext</param>
/// <returns>CultureInfo if found in Path otherwise null</returns>
/// <summary>
/// Checks to see if the AcceptLanguage in the Headers can be used to make a CultureInfo. Uses highest weighted if multiple defined.
/// </summary>
/// <param name="context">NancyContext</param>
/// <returns>CultureInfo if found in Headers otherwise null</returns>
/// <summary>
/// Checks to see if the Session has a CurrentCulture key
/// </summary>
/// <param name="context">NancyContext</param>
/// <returns>CultureInfo if found in Session otherwise null</returns>
/// <summary>
/// Checks to see if the Cookies has a CurrentCulture key
/// </summary>
/// <param name="context">NancyContext</param>
/// <returns>CultureInfo if found in Cookies otherwise null</returns>
/// <summary>
/// Uses the Thread.CurrentThread.CurrentCulture
/// </summary>
/// <param name="context">NancyContext</param>
/// <returns>CultureInfo from CurrentThread</returns>
/// <summary>
/// Validates culture name
/// </summary>
/// <param name="name">Culture name eg\en-GB</param>
/// <returns>True/False if valid culture</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\CultureConventions.cs
/// <summary>
/// Collection class for static culture conventions
/// </summary>
/// <summary>
/// Creates a new instance of CultureConventions
/// </summary>
/// <param name="conventions"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\DefaultAcceptHeaderCoercionConventions.cs
/// <summary>
/// Wires up the default conventions for the accept header coercion
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\DefaultCultureConventions.cs
/// <summary>
/// Initialise culture conventions
/// </summary>
/// <param name="conventions"></param>
/// <summary>
/// Determine if culture conventions are valid
/// </summary>
/// <param name="conventions"></param>
/// <returns></returns>
/// <summary>
/// Setup default conventions
/// </summary>
/// <param name="conventions"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\DefaultStaticContentsConventions.cs
/// <summary>
/// Defines the default static contents conventions.
/// </summary>
/// <summary>
/// Initialise any conventions this class "owns".
/// </summary>
/// <param name="conventions">Convention object instance.</param>
/// <summary>
/// Asserts that the conventions that this class "owns" are valid
/// </summary>
/// <param name="conventions">Conventions object instance.</param>
/// <returns>Tuple containing true/false for valid/invalid, and any error messages.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\DefaultViewLocationConventions.cs
/// <summary>
/// Defines the default static contents conventions.
/// </summary>
/// <summary>
/// Initialise any conventions this class "owns".
/// </summary>
/// <param name="conventions">Convention object instance.</param>
/// <summary>
/// Asserts that the conventions that this class "owns" are valid.
/// </summary>
/// <param name="conventions">Conventions object instance.</param>
/// <returns>Tuple containing true/false for valid/invalid, and any error messages.</returns>
// 0 Handles: views / *modulepath* / *modulename* / *viewname*
// 1 Handles: *modulepath* / *modulename* / *viewname*
// 2 Handles: views / *modulepath* / *viewname*
// 3 Handles: *modulepath* / *viewname*
// 4 Handles: views / *modulename* / *viewname*
// 5 Handles: *modulename* / *viewname*
// 6 Handles: views / *viewname*
// 7 Handles: *viewname*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\IConvention.cs
/// <summary>
/// Provides Nancy convention defaults and validation
/// </summary>
/// <summary>
/// Initialise any conventions this class "owns"
/// </summary>
/// <param name="conventions">Convention object instance</param>
/// <summary>
/// Asserts that the conventions that this class "owns" are valid
/// </summary>
/// <param name="conventions">Conventions object instance</param>
/// <returns>Tuple containing true/false for valid/invalid, and any error messages</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\NancyConventions.cs
/// <summary>
/// Nancy configurable conventions
/// </summary>
/// <summary>
/// Discovered conventions
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyConventions"/> class.
/// </summary>
/// <summary>
/// Gets or sets the conventions for locating view templates
/// </summary>
/// <summary>
/// Gets or sets the conventions for locating and serving static content
/// </summary>
/// <summary>
/// Gets or sets the conventions for coercing accept headers from their source
/// values to the real values for content negotiation
/// <seealso cref="BuiltInAcceptHeaderCoercions"/>
/// </summary>
/// <summary>
/// Gets or sets the conventions for determining request culture
/// </summary>
/// <summary>
/// Validates the conventions
/// </summary>
/// <returns>A tuple containing a flag indicating validity, and any error messages</returns>
/// <summary>
/// Gets the instance registrations for registering into the container
/// </summary>
/// <returns>Enumeration of InstanceRegistration types</returns>
/// <summary>
/// Locates all the default conventions and calls them in
/// turn to build up the default conventions.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\StaticContentConventionBuilder.cs
/// <summary>
/// Helper class for defining directory-based conventions for static contents.
/// </summary>
/// <summary>
/// Adds a directory-based convention for static convention.
/// </summary>
/// <param name="requestedPath">The path that should be matched with the request.</param>
/// <param name="contentPath">The path to where the content is stored in your application, relative to the root. If this is <see langword="null" /> then it will be the same as <paramref name="requestedPath"/>.</param>
/// <param name="allowedExtensions">A list of extensions that is valid for the conventions. If not supplied, all extensions are valid.</param>
/// <returns>A <see cref="GenericFileResponse"/> instance for the requested static contents if it was found, otherwise <see langword="null"/>.</returns>
/// <summary>
/// Adds a file-based convention for static convention.
/// </summary>
/// <param name="requestedFile">The file that should be matched with the request.</param>
/// <param name="contentFile">The file that should be served when the requested path is matched.</param>
/// <summary>
/// Returns whether the given filename is contained within the content folder
/// </summary>
/// <param name="contentRootPath">Content root path</param>
/// <param name="fileName">Filename requested</param>
/// <returns>True if contained within the content root, false otherwise</returns>
/// <summary>
/// Used to uniquely identify a request. Needed for when two Nancy applications want to serve up static content of the same
/// name from within the same AppDomain.
/// </summary>
/// <summary>
/// The path of the static content for which this response is being issued
/// </summary>
/// <summary>
/// The root folder path of the Nancy application for which this response will be issued
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\StaticContentHelper.cs
/// <summary>
/// Nancy static convention helper
/// </summary>
/// <summary>
/// Extension method for NancyConventions
/// <code>
/// conventions.MapStaticContent((File, Directory) =>
/// {
///     File["/page.js"] = "page.js";
///     Directory["/images"] = "images";
/// });
/// </code>
/// </summary>
/// <param name="conventions">The conventions to add to.</param>
/// <param name="staticConventions">The callback method allows you to describe the static content</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\StaticContentsConventions.cs
/// <summary>
/// Collection class for static content conventions
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\StaticContentsConventionsExtensions.cs
/// <summary>
/// Extension methods to adding static content conventions.
/// </summary>
/// <summary>
/// Adds a directory-based convention for static convention.
/// </summary>
/// <param name="conventions">The conventions to add to.</param>
/// <param name="requestedPath">The path that should be matched with the request.</param>
/// <param name="contentPath">The path to where the content is stored in your application, relative to the root. If this is <see langword="null" /> then it will be the same as <paramref name="requestedPath"/>.</param>
/// <param name="allowedExtensions">A list of extensions that is valid for the conventions. If not supplied, all extensions are valid.</param>
/// <summary>
/// Adds a directory-based convention for static convention.
/// </summary>
/// <param name="conventions">The conventions to add to.</param>
/// <param name="requestedFile">The file that should be matched with the request.</param>
/// <param name="contentFile">The file that should be served when the requested path is matched.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\StaticDirectoryContent.cs
/// <summary>
/// Nancy static directory convention helper
/// </summary>
/// <summary>
/// Creates a new instance of StaticDirectoryContent
/// </summary>
/// <param name="conventions">NancyConventions, to which static directories get added</param>
/// <summary>
/// Adds a new static directory to the nancy conventions
/// </summary>
/// <param name="requestDirectory">The route of the file</param>
/// <param name="allowedExtensions">A list of extensions that is valid for the conventions. If not supplied, all extensions are valid</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\StaticFileContent.cs
/// <summary>
/// Nancy static file convention helper
/// </summary>
/// <summary>
/// Creates a new instance of StaticFileContent
/// </summary>
/// <param name="conventions">NancyConventions, to which static files get added</param>
/// <summary>
/// Adds a new static file to the nancy conventions
/// </summary>
/// <param name="requestFile">The route of the file</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Conventions\ViewLocationConventions.cs
/// <summary>
/// This is a wrapper around the type
/// <c>IEnumerable&lt;Func&lt;string, object, ViewLocationContext, string&gt;&gt;</c> and its
/// only purpose is to make Ninject happy which was throwing an exception
/// when constructor injecting this type.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cookies\INancyCookie.cs
/// <summary>
/// The domain to restrict the cookie to
/// </summary>
/// <summary>
/// When the cookie should expire
/// </summary>
/// <value>A <see cref="DateTime"/> instance containing the date and time when the cookie should expire; otherwise <see langword="null"/> if it should expire at the end of the session.</value>
/// <summary>
/// The name of the cookie
/// </summary>
/// <summary>
/// Gets the encoded name of the cookie
/// </summary>
/// <summary>
/// The path to restrict the cookie to
/// </summary>
/// <summary>
/// The value of the cookie
/// </summary>
/// <summary>
/// Gets the encoded value of the cookie
/// </summary>
/// <summary>
/// Whether the cookie is http only
/// </summary>
/// <summary>
/// Whether the cookie is secure (i.e. HTTPS only)
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cookies\NancyCookie.cs
/// <summary>
/// Default cookie implementation for Nancy.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyCookie"/> class.
/// </summary>
/// <param name="name">The name of the cookie.</param>
/// <param name="value">The value of the cookie.</param>
/// <summary>
/// Initializes a new instance of the <see cref="NancyCookie"/> class.
/// </summary>
/// <param name="name">The name of the cookie.</param>
/// <param name="value">The value of the cookie.</param>
/// <param name="expires">The expiration date of the cookie. Can be <see langword="null" /> if it should expire at the end of the session.</param>
/// <summary>
/// Initializes a new instance of the <see cref="NancyCookie"/> class.
/// </summary>
/// <param name="name">The name of the cookie.</param>
/// <param name="value">The value of the cookie.</param>
/// <param name="httpOnly">Whether the cookie is http only.</param>
/// <summary>
/// Initializes a new instance of the <see cref="NancyCookie"/> class.
/// </summary>
/// <param name="name">The name of the cookie.</param>
/// <param name="value">The value of the cookie.</param>
/// <param name="httpOnly">Whether the cookie is http only.</param>
/// <param name="secure">Whether the cookie is secure (i.e. HTTPS only).</param>
/// <summary>
/// Initializes a new instance of the <see cref="NancyCookie"/> class.
/// </summary>
/// <param name="name">The name of the cookie.</param>
/// <param name="value">The value of the cookie.</param>
/// <param name="httpOnly">Whether the cookie is http only.</param>
/// <param name="secure">Whether the cookie is secure (i.e. HTTPS only).</param>
/// <param name="expires">The expiration date of the cookie. Can be <see langword="null" /> if it should expire at the end of the session.</param>
/// <summary>
/// The domain to restrict the cookie to
/// </summary>
/// <summary>
/// When the cookie should expire
/// </summary>
/// <value>A <see cref="DateTime"/> instance containing the date and time when the cookie should expire; otherwise <see langword="null"/> if it should expire at the end of the session.</value>
/// <summary>
/// The name of the cookie
/// </summary>
/// <summary>
/// Gets the encoded name of the cookie
/// </summary>
/// <summary>
/// The path to restrict the cookie to
/// </summary>
/// <summary>
/// The value of the cookie
/// </summary>
/// <summary>
/// Gets the encoded value of the cookie
/// </summary>
/// <summary>
/// Whether the cookie is http only
/// </summary>
/// <summary>
/// Whether the cookie is secure (i.e. HTTPS only)
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cryptography\Base64Helpers.cs
/// <summary>
/// Calculates how long a byte array of X length will be after base64 encoding
/// </summary>
/// <param name="normalLength">The normal, 8bit per byte, length of the byte array</param>
/// <returns>Base64 encoded length</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cryptography\CryptographyConfiguration.cs
/// <summary>
/// Cryptographic setup for classes that use encryption and HMAC
/// </summary>
/// <summary>
/// Creates a new instance of the CryptographyConfiguration class
/// </summary>
/// <param name="encryptionProvider">Encryption provider</param>
/// <param name="hmacProvider">HMAC provider</param>
/// <summary>
/// Gets the default configuration - Rijndael encryption, HMACSHA256 HMAC, random keys
/// </summary>
/// <summary>
/// Gets configuration with no encryption and HMACSHA256 HMAC with a random key
/// </summary>
/// <summary>
/// Gets the encryption provider
/// </summary>
/// <summary>
/// Gets the hmac provider
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cryptography\DefaultHmacProvider.cs
/// <summary>
/// Provides SHA-256 HMACs
/// </summary>
/// <summary>
/// HMAC length
/// </summary>
/// <summary>
/// Preferred key size for HMACSHA256
/// </summary>
/// <summary>
/// Key
/// </summary>
/// <summary>
/// Creates a new instance of the DefaultHmacProvider type
/// </summary>
/// <param name="keyGenerator">Key generator to use to generate the key</param>
/// <summary>
/// Gets the length of the HMAC signature
/// </summary>
/// <summary>
/// Create a hmac from the given data using the given passPhrase
/// </summary>
/// <param name="data">Data to create hmac from</param>
/// <returns>String representation of the hmac</returns>
/// <summary>
/// Create a hmac from the given data
/// </summary>
/// <param name="data">Data to create hmac from</param>
/// <returns>Hmac bytes</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cryptography\HmacComparer.cs
/// <summary>
/// Compare two hmac byte arrays without any early exits
/// </summary>
/// <param name="hmac1">First hmac</param>
/// <param name="hmac2">Second hmac</param>
/// <param name="hashLength">Expected length of the hash</param>
/// <returns>True if equal, false otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cryptography\IEncryptionProvider.cs
/// <summary>
/// Provides symmetrical encryption support
/// </summary>
/// <summary>
/// Encrypt and base64 encode the string
/// </summary>
/// <param name="data">Data to encrypt</param>
/// <returns>Encrypted string</returns>
/// <summary>
/// Decrypt string
/// </summary>
/// <param name="data">Data to decrypt</param>
/// <returns>Decrypted string</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cryptography\IHmacProvider.cs
/// <summary>
/// Creates Hash-based Message Authentication Codes (HMACs)
/// </summary>
/// <summary>
/// Gets the length of the HMAC signature in bytes
/// </summary>
/// <summary>
/// Create a hmac from the given data
/// </summary>
/// <param name="data">Data to create hmac from</param>
/// <returns>Hmac bytes</returns>
/// <summary>
/// Create a hmac from the given data
/// </summary>
/// <param name="data">Data to create hmac from</param>
/// <returns>Hmac bytes</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cryptography\IKeyGenerator.cs
/// <summary>
/// Provides key byte generation
/// </summary>
/// <summary>
/// Generate a sequence of bytes
/// </summary>
/// <param name="count">Number of bytes to return</param>
/// <returns>Array <see paramref="count"/> bytes</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cryptography\NoEncryptionProvider.cs
/// <summary>
/// A "no op" encryption provider
/// Useful for debugging or performance.
/// </summary>
/// <summary>
/// Encrypt data
/// </summary>
/// <param name="data">Data to encrypt</param>
/// <returns>Encrypted string</returns>
/// <summary>
/// Decrypt string
/// </summary>
/// <param name="data">Data to decrypt</param>
/// <returns>Decrypted string</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cryptography\PassphraseKeyGenerator.cs
/// <summary>
/// Provides key generation using PBKDF2 / Rfc2898
/// NOTE: the salt is static so the passphrase should be long and complex
/// (As the bytes are generated at app startup, because it's too slow to do per
/// request, so the salt cannot be randomly generated and stored)
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="PassphraseKeyGenerator"/> class, with
/// the provided <paramref name="passphrase"/>, <paramref name="salt"/> and optional
/// number of <paramref name="iterations"/>
/// </summary>
/// <param name="passphrase">The passphrase that should be used.</param>
/// <param name="salt">The salt</param>
/// <param name="iterations">The number of iterations. The default value is 10000.</param>
/// <summary>
/// Generate a sequence of bytes
/// </summary>
/// <param name="count">Number of bytes to return</param>
/// <returns>Array <see paramref="count"/> bytes</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cryptography\RandomKeyGenerator.cs
/// <summary>
/// Generates random secure keys using RNGCryptoServiceProvider
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Cryptography\RijndaelEncryptionProvider.cs
/// <summary>
/// Default encryption provider using Rijndael
/// </summary>
/// <summary>
/// Creates a new instance of the RijndaelEncryptionProvider class
/// </summary>
/// <param name="keyGenerator">Key generator to use to generate the key and iv</param>
/// <summary>
/// Encrypt data
/// </summary>
/// <param name="data">Data to encrypt</param>
/// <returns>Encrypted string</returns>
/// <summary>
/// Decrypt string
/// </summary>
/// <param name="data">Data to decrypt</param>
/// <returns>Decrypted string</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Culture\DefaultCultureService.cs
/// <summary>
/// Determines current culture for context
/// </summary>
/// <summary>
/// Creates a new instance of DefaultCultureService
/// </summary>
/// <param name="cultureConventions">CultureConventions to use for determining culture</param>
/// <summary>
/// Determine current culture for NancyContext
/// </summary>
/// <param name="context">NancyContext</param>
/// <returns>CultureInfo</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Culture\ICultureService.cs
/// <summary>
/// Provides current culture for Nancy context
/// </summary>
/// <summary>
/// Determine current culture for NancyContext
/// </summary>
/// <param name="context">NancyContext</param>
/// <returns>CultureInfo</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\ConcurrentLimitedCollection.cs
/// <summary>
/// Provides a thread safe, limited size, collection of objects
/// If the collection is full the oldest item gets removed.
/// </summary>
/// <typeparam name="T">Type to store</typeparam>
/// <summary>
/// Creates a new instance of the ConcurrentLimitedCollection class
/// </summary>
/// <param name="maxSize">Maximum size for the collection</param>
/// <summary>
/// Returns an enumerator that iterates through the collection.
/// </summary>
/// <returns>
/// A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
/// </returns>
/// <filterpriority>1</filterpriority>
/// <summary>
/// Returns an enumerator that iterates through a collection.
/// </summary>
/// <returns>
/// An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
/// </returns>
/// <filterpriority>2</filterpriority>
/// <summary>
/// Adds an item to the collection.
/// If the collection is full, the oldest item is removed and the new item
/// is added to the end of the collection.
/// </summary>
/// <param name="item">Item to add</param>
/// <summary>
/// Clear the collection
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DefaultDiagnostics.cs
/// <summary>
/// Wires up the diagnostics support at application startup.
/// </summary>
/// <summary>
/// Creates a new instance of the <see cref="DefaultDiagnostics"/> class.
/// </summary>
/// <param name="diagnosticProviders"></param>
/// <param name="rootPathProvider"></param>
/// <param name="requestTracing"></param>
/// <param name="configuration"></param>
/// <param name="modelBinderLocator"></param>
/// <param name="responseProcessors"></param>
/// <param name="routeSegmentConstraints"></param>
/// <param name="cultureService"></param>
/// <param name="requestTraceFactory"></param>
/// <param name="routeMetadataProviders"></param>
/// <param name="textResource"></param>
/// <summary>
/// Initialize diagnostics
/// </summary>
/// <param name="pipelines">Application pipelines</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DefaultDiagnosticsConfigurationProvider.cs
/// <summary>
/// Provides the default configuration for <see cref="DiagnosticsConfiguration"/>.
/// </summary>
/// <summary>
/// Gets the default configuration instance to register in the <see cref="INancyEnvironment"/>.
/// </summary>
/// <returns>The configuration instance</returns>
/// <remarks>Will return <see cref="DiagnosticsConfiguration.Default"/></remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DefaultRequestTrace.cs
/// <summary>
/// The default implementation of the <see cref="IRequestTrace"/> interface.
/// </summary>
/// <summary>
/// Gets the generic item store.
/// </summary>
/// <value>An <see cref="IDictionary{TKey,TValue}"/> instance containing the items.</value>
/// <summary>
/// Gets or sets the information about the request.
/// </summary>
/// <value>An <see cref="RequestData"/> instance.</value>
/// <summary>
/// Gets or sets the information about the response.
/// </summary>
/// <value>An <see cref="ResponseData"/> instance.</value>
/// <summary>
/// Gets or sets the trace log.
/// </summary>
/// <value>A <see cref="ITraceLog"/> instance.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DefaultRequestTraceFactory.cs
/// <summary>
/// Default implementation of the <see cref="IRequestTraceFactory"/> interface.
/// </summary>
/// <summary>
/// Creates an <see cref="IRequestTrace"/> instance.
/// </summary>
/// <param name="request">A <see cref="Request"/> instance.</param>
/// <returns>An <see cref="IRequestTrace"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DefaultRequestTracing.cs
/// <summary>
/// Default implementation of the <see cref="IRequestTracing"/> interface.
/// </summary>
/// <summary>
/// Adds the <see cref="IRequestTrace"/>, of the provided, <see cref="NancyContext"/> to the trace log.
/// </summary>
/// <param name="sessionId">The identifier of the trace.</param>
/// <param name="context">A <see cref="NancyContext"/> instance.</param>
/// <summary>
/// Clears the trace log.
/// </summary>
/// <summary>
/// Creates a new trace session.
/// </summary>
/// <returns>A <see cref="Guid"/> which represents the identifier of the new trace session.</returns>
// TODO - remove above method and return guid from here?
/// <summary>
/// Gets all the available <see cref="RequestTraceSession"/> instances.
/// </summary>
/// <returns></returns>
/// <summary>
/// Checks if the provided <paramref name="sessionId"/> is valid or not.
/// </summary>
/// <param name="sessionId">A <see cref="Guid"/> representing the session to check.</param>
/// <returns><see langword="true"/> if the session is valid, otherwise <see langword="false"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DefaultTraceLog.cs
/// <summary>
/// Default implementation of the <see cref="ITraceLog"/> interface.
/// </summary>
/// <summary>
/// Creates a new instance of the <see cref="DefaultTraceLog"/> class.
/// </summary>
/// <summary>
/// Write to the log
/// </summary>
/// <param name="logDelegate">Log writing delegate</param>
/// <summary>
/// Returns a string that represents the current object.
/// </summary>
/// <returns>
/// A string that represents the current object.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DescriptionAttribute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DiagnosticModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DiagnosticsConfiguration.cs
/// <summary>
/// Configuration for the diagnostics dashboard.
/// </summary>
/// <summary>
/// A default instance of the <see cref="DiagnosticsConfiguration"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DiagnosticsConfiguration"/> class
/// </summary>
/// <param name="password">Password used to secure the dashboard.</param>
/// <param name="path">Relative path of the dashboard.</param>
/// <param name="cookieName">Name of the cookie to store diagnostics information.</param>
/// <param name="slidingTimeout">Number of minutes that expiry of the diagnostics dashboard.</param>
/// <param name="cryptographyConfiguration">Cryptography config to use for securing the dashboard.</param>
/// <summary>
/// Gets or sets the name of the cookie used by the diagnostics dashboard.
/// </summary>
/// <remarks>The default is __ncd</remarks>
/// <summary>
/// Gets or sets the cryptography config to use for securing the diagnostics dashboard
/// </summary>
/// <remarks>The default is <see cref="CryptographyConfiguration.Default"/></remarks>
/// <summary>
/// Gets or sets password for accessing the diagnostics screen.
/// </summary>
/// <remarks>The default value is <see langword="null" />.</remarks>
/// <summary>
/// Gets or sets the path that the diagnostics dashboard will be accessible on.
/// </summary>
/// <remarks>The default is /_Nancy.</remarks>
/// <summary>
/// The number of minutes that expiry of the diagnostics dashboard. Will be extended each time it is used.
/// </summary>
/// <remarks>The default is 15 minutes.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DiagnosticsConfigurationExtensions.cs
/// <summary>
/// Contains <see cref="DiagnosticsConfiguration"/> configuration extensions for <see cref="INancyEnvironment"/>.
/// </summary>
/// <summary>
/// Configures diagnostics.
/// </summary>
/// <param name="environment"><see cref="INancyEnvironment"/> that should be configured.</param>
/// <param name="password">Password used to secure the dashboard.</param>
/// <param name="path">Relative path of the dashboard.</param>
/// <param name="cookieName">Name of the cookie to store diagnostics information.</param>
/// <param name="slidingTimeout">Number of minutes that expiry of the diagnostics dashboard.</param>
/// <param name="cryptographyConfiguration">Cryptography config to use for securing the dashboard.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DiagnosticsHook.cs
/// <summary>
/// Pipeline hook to handle diagnostics dashboard requests.
/// </summary>
/// <summary>
/// Enables the diagnostics dashboard and will intercept all requests that are passed to
/// the condigured paths.
/// </summary>
/// <summary>
/// Gets a special <see cref="INancyEnvironment"/> instance that is separate from the
/// one used by the application.
/// </summary>
/// <returns></returns>
// Don't care about async here, so just get the result
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DiagnosticsModuleBuilder.cs
/// <summary>
/// Builds a fully configured <see cref="INancyModule"/> instance, based upon the provided <paramref name="module"/>.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> that should be configured.</param>
/// <param name="context">The current request context.</param>
/// <returns>A fully configured <see cref="INancyModule"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DiagnosticsModuleCatalog.cs
/// <summary>
/// Get all NancyModule implementation instances - should be per-request lifetime
/// </summary>
/// <param name="context">The current context</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="INancyModule"/> instances.</returns>
/// <summary>
/// Retrieves a specific <see cref="INancyModule"/> implementation - should be per-request lifetime
/// </summary>
/// <param name="moduleType">Module type</param>
/// <param name="context">The current context</param>
/// <returns>The <see cref="INancyModule"/> instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DiagnosticsSerializerFactory.cs
/// <summary>
/// Gets the <see cref="ISerializer"/> implementation that can serialize the provided <paramref name="mediaRange"/>.
/// </summary>
/// <param name="mediaRange">The <see cref="MediaRange"/> to get a serializer for.</param>
/// <returns>An <see cref="ISerializer"/> instance, or <see langword="null" /> if not match was found.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DiagnosticsSession.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DiagnosticsViewRenderer.cs
/// <summary>
/// Renders diagnostics views from embedded resources.
/// </summary>
/// <summary>
/// Creates a new instance of the <see cref="DiagnosticsViewRenderer"/> class.
/// </summary>
/// <param name="context">A <see cref="NancyContext"/> instance.</param>
/// <summary>
/// Renders the diagnostics view with the provided <paramref name="name"/>.
/// </summary>
/// <param name="name">The name of the view to render.</param>
/// <returns>A <see cref="Response"/> of the rendered view.</returns>
/// <summary>
/// Renders the diagnostics view with the provided <paramref name="name"/> and <paramref name="model"/>.
/// </summary>
/// <param name="name">The name of the view to render.</param>
/// <param name="model">The model that should be passed to the view engine during rendering.</param>
/// <returns>A <see cref="Response"/> of the rendered view.</returns>
/// <summary>
/// Locates a view based on the provided information.
/// </summary>
/// <param name="viewName">The name of the view to locate.</param>
/// <param name="model">The model that will be used with the view.</param>
/// <param name="viewLocationContext">A <see cref="ViewLocationContext"/> instance, containing information about the context for which the view is being located.</param>
/// <returns>A <see cref="ViewLocationResult"/> instance if the view could be found, otherwise <see langword="null"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\DisabledDiagnostics.cs
/// <summary>
/// Implementation of the <see cref="IDiagnostics"/> interface that does nothing.
/// </summary>
/// <summary>
/// Initialise diagnostics
/// </summary>
/// <param name="pipelines">Application pipelines</param>
// Do nothing :-)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\IDiagnostics.cs
/// <summary>
/// Initialise diagnostics
/// </summary>
/// <param name="pipelines">Application pipelines</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\IDiagnosticsProvider.cs
/// <summary>
/// Defines the functionality a diagnostics provider.
/// </summary>
/// <summary>
/// Gets the name of the provider.
/// </summary>
/// <value>A <see cref="string"/> containing the name of the provider.</value>
/// <summary>
/// Gets the description of the provider.
/// </summary>
/// <value>A <see cref="string"/> containing the description of the provider.</value>
/// <summary>
/// Gets the object that contains the interactive diagnostics methods.
/// </summary>
/// <value>An instance of the interactive diagnostics object.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\IInteractiveDiagnostics.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\InteractiveDiagnostic.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\InteractiveDiagnosticMethod.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\InteractiveDiagnostics.cs
// Exclude only the TestingDiagnosticProvider
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\IRequestTrace.cs
/// <summary>
/// Defines the functionality for tracing a request.
/// </summary>
/// <summary>
/// Gets or sets the generic item store.
/// </summary>
/// <value>An <see cref="IDictionary{TKey,TValue}"/> instance containing the items.</value>
/// <summary>
/// Gets or sets the information about the request.
/// </summary>
/// <value>An <see cref="RequestData"/> instance.</value>
/// <summary>
/// Gets or sets the information about the response.
/// </summary>
/// <value>An <see cref="ResponseData"/> instance.</value>
/// <summary>
/// Gets the trace log.
/// </summary>
/// <value>A <see cref="ITraceLog"/> instance.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\IRequestTraceFactory.cs
/// <summary>
/// Defines the functionality for creating an <see cref="IRequestTrace"/> instance.
/// </summary>
/// <summary>
/// Creates an <see cref="IRequestTrace"/> instance.
/// </summary>
/// <param name="request">A <see cref="Request"/> instance.</param>
/// <returns>An <see cref="IRequestTrace"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\IRequestTracing.cs
/// <summary>
/// Defines the functionality for request tracing.
/// </summary>
/// <summary>
/// Adds the <see cref="IRequestTrace"/>, of the provided, <see cref="NancyContext"/> to the trace log.
/// </summary>
/// <param name="sessionId">The identifier of the trace.</param>
/// <param name="context">A <see cref="NancyContext"/> instance.</param>
/// <summary>
/// Clears the trace log.
/// </summary>
/// <summary>
/// Creates a new trace session.
/// </summary>
/// <returns>A <see cref="Guid"/> which represents the identifier of the new trace session.</returns>
/// <summary>
/// Gets all the available <see cref="RequestTraceSession"/> instances.
/// </summary>
/// <returns></returns>
/// <summary>
/// Checks if the provided <paramref name="sessionId"/> is valid or not.
/// </summary>
/// <param name="sessionId">A <see cref="Guid"/> representing the session to check.</param>
/// <returns><see langword="true"/> if the session is valid, otherwise <see langword="false"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\ITraceLog.cs
/// <summary>
/// Provides request trace logging.
/// Uses a delegate to write to the log, rather than creating strings regardless
/// of whether the log is enabled or not.
/// </summary>
/// <summary>
/// Write to the log
/// </summary>
/// <param name="logDelegate">Log writing delegate</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\NullLog.cs
/// <summary>
/// Implementation of <see cref="ITraceLog"/> that does not log anything.
/// </summary>
/// <summary>
/// Write to the log
/// </summary>
/// <param name="logDelegate">Log writing delegate</param>
/// <summary>
/// Returns a string that represents the current object.
/// </summary>
/// <returns>
/// A string that represents the current object.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\RequestData.cs
/// <summary>
/// Stores request trace information about the request.
/// </summary>
/// <summary>
/// Gets or sets the content type of the request.
/// </summary>
/// <value>A <see cref="string"/> containing the content type.</value>
/// <summary>
/// Gets or sets the headers of the request.
/// </summary>
/// <value>A <see cref="RequestHeaders"/> instance containing the headers.</value>
/// <summary>
/// Gets the HTTP verb of the request.
/// </summary>
/// <value>A <see cref="string"/> containing the HTTP verb.</value>
/// <summary>
/// Gets or sets the <see cref="Url"/> that was requested.
/// </summary>
/// <summary>
/// Implicitly casts a <see cref="Request"/> instance into a <see cref="RequestData"/> instance.
/// </summary>
/// <param name="request">A <see cref="Request"/> instance.</param>
/// <returns>A <see cref="RequestData"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\RequestTraceSession.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\ResponseData.cs
/// <summary>
/// Stores request trace information about the response.
/// </summary>
/// <summary>
/// Gets or sets the content type of the response.
/// </summary>
/// <value>A <see cref="string"/> containing the content type.</value>
/// <summary>
/// Gets or sets the headers of the response.
/// </summary>
/// <value>A <see cref="IDictionary{TKey,TValue}"/> instance containing the headers.</value>
/// <summary>
/// Gets or sets the <see cref="HttpStatusCode"/> of the response.
/// </summary>
/// <summary>
/// Gets or sets the <see cref="Type"/> of the response.
/// </summary>
/// <value>A <see cref="Type"/> instance.</value>
/// <summary>
/// Implicitly casts a <see cref="Response"/> instance into a <see cref="ResponseData"/> instance.
/// </summary>
/// <param name="response">A <see cref="Response"/> instance.</param>
/// <returns>A <see cref="ResponseData"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\TemplateAttribute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\TestingDiagnosticProvider.cs
/// <summary>
/// Gets the name of the provider.
/// </summary>
/// <value>A <see cref="string"/> containing the name of the provider.</value>
/// <summary>
/// Gets the description of the provider.
/// </summary>
/// <value>A <see cref="string"/> containing the description of the provider.</value>
/// <summary>
/// Gets the object that contains the interactive diagnostics methods.
/// </summary>
/// <value>An instance of the interactive diagnostics object.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\Modules\InfoModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\Modules\InteractiveModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\Modules\MainModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\Modules\SettingsModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Diagnostics\Modules\TraceModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ErrorHandling\DefaultStatusCodeHandler.cs
/// <summary>
/// Default error handler
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultStatusCodeHandler"/> type.
/// </summary>
/// <param name="responseNegotiator">The response negotiator.</param>
/// <summary>
/// Whether the status code is handled
/// </summary>
/// <param name="statusCode">Status code</param>
/// <param name="context">The <see cref="NancyContext"/> instance of the current request.</param>
/// <returns>True if handled, false otherwise</returns>
/// <summary>
/// Handle the error code
/// </summary>
/// <param name="statusCode">Status code</param>
/// <param name="context">The <see cref="NancyContext"/> instance of the current request.</param>
/// <returns>Nancy Response</returns>
// Reset negotiation context to avoid any downstream cast exceptions
// from swapping a view model with a `DefaultStatusCodeHandlerResult`
// No view will be found for `DefaultStatusCodeHandlerResult`
// because it is rendered from embedded resources below
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ErrorHandling\RouteExecutionEarlyExitException.cs
/// <summary>
/// Here Be Dragons - Using an exception for flow control to hotwire route execution.
/// It can be useful to call a method inside a route definition and have that method
/// immediately return a response (such as for authentication). This exception is used
/// to allow that flow.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RouteExecutionEarlyExitException"/> class.
/// </summary>
/// <param name="response">
/// The response.
/// </param>
/// <param name="reason">
/// The reason for the early exit.
/// </param>
/// <summary>
/// Gets or sets the reason for the early exit
/// </summary>
/// <summary>
/// Gets or sets the response
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Extensions\AssemblyExtensions.cs
/// <summary>
/// Assembly extension methods
/// </summary>
/// <summary>
/// Gets exported types from an assembly and catches common errors
/// that occur when running under test runners.
/// </summary>
/// <param name="assembly">Assembly to retrieve from</param>
/// <returns>An array of types</returns>
// probably assembly version conflict
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Extensions\CollectionExtensions.cs
/// <summary>
/// Containing extensions for the collection objects.
/// </summary>
/// <summary>
/// Converts a <see cref="NameValueCollection"/> to a <see cref="IDictionary{TKey,TValue}"/> instance.
/// </summary>
/// <param name="source">The <see cref="NameValueCollection"/> to convert.</param>
/// <returns>An <see cref="IDictionary{TKey,TValue}"/> instance.</returns>
/// <summary>
/// Converts an <see cref="IDictionary{TKey,TValue}"/> instance to a <see cref="NameValueCollection"/> instance.
/// </summary>
/// <param name="source">The <see cref="IDictionary{TKey,TValue}"/> instance to convert.</param>
/// <returns>A <see cref="NameValueCollection"/> instance.</returns>
/// <summary>
/// Merges a collection of <see cref="IDictionary{TKey,TValue}"/> instances into a single one.
/// </summary>
/// <param name="dictionaries">The list of <see cref="IDictionary{TKey,TValue}"/> instances to merge.</param>
/// <returns>An <see cref="IDictionary{TKey,TValue}"/> instance containing the keys and values from the other instances.</returns>
/// <summary>
/// Filters a collection based on a provided key selector.
/// </summary>
/// <param name="source">The collection filter.</param>
/// <param name="keySelector">The predicate to filter by.</param>
/// <typeparam name="TSource">The type of the collection to filter.</typeparam>
/// <typeparam name="TKey">The type of the key to filter by.</typeparam>
/// <returns>A <see cref="IEnumerable{T}"/> instance with the filtered values.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Extensions\ContextExtensions.cs
/// <summary>
/// Containing extensions for the <see cref="NancyContext"/> object
/// </summary>
/// <summary>
/// Ascertains if a request originated from an Ajax request or not.
/// </summary>
/// <param name="context">The current nancy context</param>
/// <returns>True if the request was done using ajax, false otherwise</returns>
/// <summary>
/// Expands a path to take into account a base path (if any)
/// </summary>
/// <param name="context">Nancy context</param>
/// <param name="path">Path to expand</param>
/// <returns>Expanded path</returns>
/// <summary>
/// Returns a redirect response with the redirect path expanded to take into
/// account a base path (if any)
/// </summary>
/// <param name="context">Nancy context</param>
/// <param name="path">Path to redirect to</param>
/// <returns>Redirect response</returns>
/// <summary>
/// Retrieves exception details from the context, if any exist
/// </summary>
/// <param name="context">Nancy context</param>
/// <returns>Exception details</returns>
/// <summary>
/// Get a thrown exception from the context.
/// </summary>
/// <param name="context">The context.</param>
/// <returns>The thrown exception or <c>null</c> if not exception has been thrown.</returns>
/// <summary>
/// Get a thrown exception of the given type from the context.
/// </summary>
/// <typeparam name="T">The type of exception to get.</typeparam>
/// <param name="context">The context.</param>
/// <returns>The thrown exception or <c>null</c> if not exception has been thrown.</returns>
/// <summary>
/// Tries to get a thrown exception from the context.
/// </summary>
/// <param name="context">The context.</param>
/// <param name="exception">The thrown exception.</param>
/// <returns><c>true</c> if an exception has been thrown during the request, <c>false</c> otherwise.</returns>
/// <summary>
/// Tries to get a thrown exception of the given type from the context.
/// </summary>
/// <typeparam name="T">The type of exception to get.</typeparam>
/// <param name="context">The context.</param>
/// <param name="exception">The thrown exception.</param>
/// <returns><c>true</c> if an exception of the given type has been thrown during the request, <c>false</c> otherwise.</returns>
/// <summary>
/// Shortcut extension method for writing trace information
/// </summary>
/// <param name="context">Nancy context</param>
/// <param name="logDelegate">Log delegate</param>
/// <summary>
/// Returns a boolean indicating whether a given url string is local or not
/// </summary>
/// <param name="context">Nancy context</param>
/// <param name="url">Url string (relative or absolute)</param>
/// <returns>True if local, false otherwise</returns>
// Mono does not populate the uri.Host correctly when url
// is in //hostname format causing the simple check to fail.
//{0}", currentHostName);
//") || url.StartsWith(localFormat);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Extensions\ModelValidationErrorExtensions.cs
/// <summary>
/// Containing extensions for the <see cref="ModelValidationResult.Errors"/> property.
/// </summary>
/// <summary>
/// Adds a new <see cref="ModelValidationError"/> to the validation results.
/// </summary>
/// <param name="errors">A reference to the <see cref="ModelValidationResult.Errors"/> property.</param>
/// <param name="name">The name of the property.</param>
/// <param name="errorMessage">The validation error message.</param>
/// <returns>A reference to the <see cref="ModelValidationResult.Errors"/> property.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Extensions\ModuleExtensions.cs
/// <summary>
/// Containing extensions for <see cref="INancyModule"/> implementations.
/// </summary>
/// <summary>
/// A regular expression used to manipulate parameterized route segments.
/// </summary>
/// <value>A <see cref="Regex"/> object.</value>
/// <summary>
/// Extracts the friendly name of a Nancy module given its type.
/// </summary>
/// <param name="module">The module instance</param>
/// <returns>A string containing the name of the parameter.</returns>
/// <exception cref="FormatException"></exception>
/// <summary>
/// Returns a boolean indicating whether the route is executing, or whether the module is
/// being constructed.
/// </summary>
/// <param name="module">The module instance</param>
/// <returns>True if the route is being executed, false if the module is being constructed</returns>
/// <summary>
/// Adds the before delegate to the Before pipeline if the module is not currently executing,
/// or executes the delegate directly and returns any response returned if it is.
/// Uses <see cref="RouteExecutionEarlyExitException"/>
/// </summary>
/// <param name="module">Current module</param>
/// <param name="beforeDelegate">Delegate to add or execute</param>
/// <param name="earlyExitReason">Optional reason for the early exit (if necessary)</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Extensions\RequestExtensions.cs
/// <summary>
/// Containing extensions for the <see cref="Request"/> object
/// </summary>
/// <summary>
/// An extension method making it easy to check if the request was done using ajax
/// </summary>
/// <param name="request">The request made by client</param>
/// <returns><see langword="true" /> if the request was done using ajax, otherwise <see langword="false"/>.</returns>
/// <summary>
/// Gets a value indicating whether the request is local.
/// </summary>
/// <param name="request">The request made by client</param>
/// <returns><see langword="true" /> if the request is local, otherwise <see langword="false"/>.</returns>
// Invalid or relative Request.Url string
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Extensions\RequestStreamExtensions.cs
/// <summary>
/// Extensions for RequestStream.
/// </summary>
/// <summary>
/// Gets the request body as a string.
/// </summary>
/// <param name="stream">The request body stream.</param>
/// <param name="encoding">The encoding to use, <see cref="Encoding.UTF8"/> by default.</param>
/// <returns>The request body as a <see cref="string"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Extensions\StreamExtensions.cs
/// <summary>
/// Containing extensions for the <see cref="Stream"/> object.
/// </summary>
/// <summary>
/// Buffer size for copy operations
/// </summary>
/// <summary>
/// Copies the contents between two <see cref="Stream"/> instances in an async fashion.
/// </summary>
/// <param name="source">The source stream to copy from.</param>
/// <param name="destination">The destination stream to copy to.</param>
/// <param name="onComplete">Delegate that should be invoked when the operation has completed. Will pass the source, destination and exception (if one was thrown) to the function. Can pass in <see langword="null" />.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Extensions\StringExtensions.cs
/// <summary>
/// Containing extensions for the <see cref="string"/> object.
/// </summary>
/// <summary>
/// A regular expression used to manipulate parameterized route segments.
/// </summary>
/// <value>A <see cref="Regex"/> object.</value>
/// <summary>
/// Extracts information about the parameters in the <paramref name="segment"/>.
/// </summary>
/// <param name="segment">The segment that the information should be extracted from.</param>
/// <returns>An <see cref="IEnumerable{T}"/>, containing <see cref="ParameterSegmentInformation"/> instances for the parameters in the segment.</returns>
/// <summary>
/// Checks if a segment contains any parameters.
/// </summary>
/// <param name="segment">The segment to check for parameters.</param>
/// <returns>true if the segment contains a parameter; otherwise false.</returns>
/// <remarks>A parameter is defined as a string which is surrounded by a pair of curly brackets.</remarks>
/// <exception cref="ArgumentException">The provided value for the segment parameter was null or empty.</exception>
/// <summary>
/// Gets a dynamic dictionary back from a Uri query string
/// </summary>
/// <param name="queryString">The query string to extract values from</param>
/// <returns>A dynamic dictionary containing the query string values</returns>
/// <summary>
/// Converts the value from PascalCase to camelCase.
/// </summary>
/// <param name="value">The value.</param>
/// <returns>System.String.</returns>
/// <summary>
/// Converts the value from camelCase to PascalCase.
/// </summary>
/// <param name="value">The value.</param>
/// <returns>System.String.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Extensions\TypeExtensions.cs
/// <summary>
/// Containing extensions for the <see cref="Type"/> object.
/// </summary>
/// <summary>
/// Gets the path of the assembly that contains the provided type.
/// </summary>
/// <param name="source">The <see cref="Type"/> to look up the assembly path for.</param>
/// <returns>A string containing the path of the assembly that contains the type.</returns>
/// <summary>
/// Checks if a type is an array or not
/// </summary>
/// <param name="source">The type to check.</param>
/// <returns><see langword="true" /> if the type is an array, otherwise <see langword="false" />.</returns>
/// <summary>
/// Determines whether the <paramref name="genericType"/> is assignable from
/// <paramref name="givenType"/> taking into account generic definitions
/// </summary>
/// <remarks>
/// Borrowed from: http://tmont.com/blargh/2011/3/determining-if-an-open-generic-type-isassignablefrom-a-type
/// </remarks>
/// <summary>
/// Checks if a type is an collection or not
/// </summary>
/// <param name="source">The type to check.</param>
/// <returns><see langword="true" /> if the type is an collection, otherwise <see langword="false" />.</returns>
/// <summary>
/// Checks if a type is enumerable or not
/// </summary>
/// <param name="source">The type to check.</param>
/// <returns><see langword="true" /> if the type is an enumerable, otherwise <see langword="false" />.</returns>
/// <summary>
/// Determines if a type is numeric.  Nullable numeric types are considered numeric.
/// </summary>
/// <remarks>
/// Boolean is not considered numeric.
/// </remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Helpers\CacheHelpers.cs
/// <summary>
/// Helper class for caching related functions
/// </summary>
/// <summary>
/// Returns whether to return a not modified response, based on the etag and last modified date
/// of the resource, and the current nancy context
/// </summary>
/// <param name="etag">Current resource etag, or null</param>
/// <param name="lastModified">Current resource last modified, or null</param>
/// <param name="context">Current nancy context</param>
/// <returns>True if not modified should be sent, false otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Helpers\ExceptionExtensions.cs
//If we have more than one exception in the AggregateException
//we have to send all exceptions back in order not to swallow any exceptions.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Helpers\HttpEncoder.cs
//
// Authors:
//   Patrik Torstensson (Patrik.Torstensson@labs2.com)
//   Wictor Wiln (decode/encode functions) (wictor@ibizkit.se)
//   Tim Coleman (tim@timcoleman.com)
//   Gonzalo Paniagua Javier (gonzalo@ximian.com)
//   Marek Habersack <mhabersack@novell.com>
//
// (C) 2005-2010 Novell, Inc (http://novell.com/)
//
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 0 -> nothing,
// 1 -> right after '&'
// 2 -> between '&' and ';' but no '#'
// 3 -> '#' found after '&' and getting numbers
//FIXME: what happens when there is an internal error?
//if (!isUnicode)
//	throw new ArgumentOutOfRangeException ("c", c, "c must be less than 256");
// Build the hash table of HTML entity references.  This list comes
// from the HTML 4.01 W3C recommendation.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Helpers\HttpUtility.cs
//
// System.Web.HttpUtility
//
// Authors:
//   Patrik Torstensson (Patrik.Torstensson@labs2.com)
//   Wictor Wiln (decode/encode functions) (wictor@ibizkit.se)
//   Tim Coleman (tim@timcoleman.com)
//   Gonzalo Paniagua Javier (gonzalo@ximian.com)
//
// Copyright (C) 2005-2010 Novell, Inc (http://www.novell.com)
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Constructors
// unicode hex sequence
// avoided GetByteCount call
/// <summary>
/// Decodes an HTML-encoded string and returns the decoded string.
/// </summary>
/// <param name="s">The HTML string to decode. </param>
/// <returns>The decoded text.</returns>
/// <summary>
/// Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
/// </summary>
/// <param name="s">The HTML string to decode</param>
/// <param name="output">The TextWriter output stream containing the decoded string. </param>
/// <summary>
/// HTML-encodes a string and sends the resulting output to a TextWriter output stream.
/// </summary>
/// <param name="s">The string to encode. </param>
/// <param name="output">The TextWriter output stream containing the encoded string. </param>
// Methods
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Helpers\ReflectionUtils.cs
// Copyright (c) 2007 James Newton-King
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
/// <summary>
/// Gets the type of the typed list's items.
/// </summary>
/// <param name="type">The type.</param>
/// <returns>The type of the typed list's items.</returns>
/// <summary>
/// Determines whether the member is an indexed property.
/// </summary>
/// <param name="member">The member.</param>
/// <returns>
/// 	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
/// </returns>
/// <summary>
/// Determines whether the property is an indexed property.
/// </summary>
/// <param name="property">The property.</param>
/// <returns>
/// 	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
/// </returns>
/// <summary>
/// Gets the member's value on the object.
/// </summary>
/// <param name="member">The member.</param>
/// <param name="target">The target object.</param>
/// <returns>The member's value on the object.</returns>
/// <summary>
/// Sets the member's value on the target object.
/// </summary>
/// <param name="member">The member.</param>
/// <param name="target">The target.</param>
/// <param name="value">The value.</param>
/// <summary>
/// Determines whether the specified MemberInfo can be read.
/// </summary>
/// <param name="member">The MemberInfo to determine whether can be read.</param>
/// <returns>
/// 	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
/// </returns>
/// <summary>
/// Determines whether the specified MemberInfo can be set.
/// </summary>
/// <param name="member">The MemberInfo to determine whether can be set.</param>
/// <returns>
/// 	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Helpers\TaskHelpers.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IO\RequestStream.cs
/// <summary>
/// A <see cref="Stream"/> decorator that can handle moving the stream out from memory and on to disk when the contents reaches a certain length.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RequestStream"/> class.
/// </summary>
/// <param name="expectedLength">The expected length of the contents in the stream.</param>
/// <param name="thresholdLength">The content length that will trigger the stream to be moved out of memory.</param>
/// <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RequestStream"/> class.
/// </summary>
/// <param name="stream">The <see cref="Stream"/> that should be handled by the request stream</param>
/// <param name="expectedLength">The expected length of the contents in the stream.</param>
/// <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RequestStream"/> class.
/// </summary>
/// <param name="expectedLength">The expected length of the contents in the stream.</param>
/// <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RequestStream"/> class.
/// </summary>
/// <param name="stream">The <see cref="Stream"/> that should be handled by the request stream</param>
/// <param name="expectedLength">The expected length of the contents in the stream.</param>
/// <param name="thresholdLength">The content length that will trigger the stream to be moved out of memory.</param>
/// <param name="disableStreamSwitching">if set to <see langword="true"/> the stream will never explicitly be moved to disk.</param>
/// <summary>
/// Gets a value indicating whether the current stream supports reading.
/// </summary>
/// <returns>Always returns <see langword="true"/>.</returns>
/// <summary>
/// Gets a value indicating whether the current stream supports seeking.
/// </summary>
/// <returns>Always returns <see langword="true"/>.</returns>
/// <summary>
/// Gets a value that determines whether the current stream can time out.
/// </summary>
/// <returns>Always returns <see langword="false"/>.</returns>
/// <summary>
/// Gets a value indicating whether the current stream supports writing.
/// </summary>
/// <returns>Always returns <see langword="true"/>.</returns>
/// <summary>
/// Gets the length in bytes of the stream.
/// </summary>
/// <returns>A long value representing the length of the stream in bytes.</returns>
/// <summary>
/// Gets a value indicating whether the current stream is stored in memory.
/// </summary>
/// <value><see langword="true"/> if the stream is stored in memory; otherwise, <see langword="false"/>.</value>
/// <remarks>The stream is moved to disk when either the length of the contents or expected content length exceeds the threshold specified in the constructor.</remarks>
/// <summary>
/// Gets or sets the position within the current stream.
/// </summary>
/// <returns>The current position within the stream.</returns>
/// <summary>
/// Begins an asynchronous read operation.
/// </summary>
/// <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns>
/// <param name="buffer">The buffer to read the data into. </param>
/// <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param>
/// <param name="count">The maximum number of bytes to read. </param>
/// <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
/// <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param>
/// <summary>
/// Begins an asynchronous write operation.
/// </summary>
/// <returns>An <see cref="IAsyncResult"/> that represents the asynchronous write, which could still be pending.</returns>
/// <param name="buffer">The buffer to write data from. </param>
/// <param name="offset">The byte offset in <paramref name="buffer"/> from which to begin writing. </param>
/// <param name="count">The maximum number of bytes to write. </param>
/// <param name="callback">An optional asynchronous callback, to be called when the write is complete. </param>
/// <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
/// <summary>
/// Waits for the pending asynchronous read to complete.
/// </summary>
/// <returns>
/// The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
/// </returns>
/// <param name="asyncResult">The reference to the pending asynchronous request to finish. </param>
/// <summary>
/// Ends an asynchronous write operation.
/// </summary>
/// <param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param>
/// <summary>
/// Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
/// </summary>
/// <summary>
/// Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
/// </summary>
/// <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
/// <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param>
/// <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. </param>
/// <param name="count">The maximum number of bytes to be read from the current stream. </param>
/// <summary>
/// Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
/// </summary>
/// <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
/// <summary>
/// Sets the position within the current stream.
/// </summary>
/// <returns>The new position within the current stream.</returns>
/// <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param>
/// <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param>
/// <summary>
/// Sets the length of the current stream.
/// </summary>
/// <param name="value">The desired length of the current stream in bytes. </param>
/// <exception cref="NotSupportedException">The stream does not support having it's length set.</exception>
/// <remarks>This functionality is not supported by the <see cref="RequestStream"/> type and will always throw <see cref="NotSupportedException"/>.</remarks>
/// <summary>
/// Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
/// </summary>
/// <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param>
/// <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param>
/// <param name="count">The number of bytes to be written to the current stream. </param>
// Close the stream here as closing it every time we call
// MoveStreamContentsToFileStream causes an (ObjectDisposedException)
// in NancyWcfGenericService - webRequest.UriTemplateMatch
// we could use Path.GetTempFilePath() but this is problematic on Windows and more so on Mono
// symptoms will show when this method has been called > 65k times
// see docs: https://msdn.microsoft.com/en-us/library/system.io.path.gettempfilename(v=vs.110).aspx
// comments on Win32 implementation: https://msdn.microsoft.com/en-us/library/windows/desktop/aa364991(v=vs.85).aspx
// mono implementation: https://github.com/mono/mono/blob/master/mcs/class/corlib/System.IO/Path.cs#L490
// Seek to 0 if we can, although if we can't seek, and we've already written (if the size is unknown) then
// we are screwed anyway, and some streams that don't support seek also don't let you read the position so
// there's no real way to check :-/
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\IO\UnclosableStreamWrapper.cs
/// <summary>
/// To close the unclosable stream..
/// To fight the unbeatable foe..
/// To bear with unbearable sorrow..
/// To run where the brave dare not go..
/// </summary>
/// <summary>
/// The wrapped stream
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="UnclosableStreamWrapper"/> class.
/// </summary>
/// <param name="baseStream">The base stream to wrap.</param>
/// <summary>
/// Gets the base stream that the wrapper is wrapping
/// </summary>
/// <summary>
/// When overridden in a derived class, gets a value indicating whether the current stream supports reading.
/// </summary>
/// <returns>
/// true if the stream supports reading; otherwise, false.
/// </returns>
/// <filterpriority>1</filterpriority>
/// <summary>
/// When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
/// </summary>
/// <returns>
/// true if the stream supports seeking; otherwise, false.
/// </returns>
/// <filterpriority>1</filterpriority>
/// <summary>
/// When overridden in a derived class, gets a value indicating whether the current stream supports writing.
/// </summary>
/// <returns>
/// true if the stream supports writing; otherwise, false.
/// </returns>
/// <filterpriority>1</filterpriority>
/// <summary>
/// When overridden in a derived class, gets the length in bytes of the stream.
/// </summary>
/// <returns>
/// A long value representing the length of the stream in bytes.
/// </returns>
/// <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
/// <summary>
/// When overridden in a derived class, gets or sets the position within the current stream.
/// </summary>
/// <returns>
/// The current position within the stream.
/// </returns>
/// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
/// <summary>
/// Gets a value that determines whether the current stream can time out.
/// </summary>
/// <returns>
/// A value that determines whether the current stream can time out.
/// </returns>
/// <filterpriority>2</filterpriority>
/// <summary>
/// Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. 
/// </summary>
/// <returns>
/// A value, in milliseconds, that determines how long the stream will attempt to read before timing out.
/// </returns>
/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.ReadTimeout"/> method always throws an <see cref="T:System.InvalidOperationException"/>. </exception><filterpriority>2</filterpriority>
/// <summary>
/// Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. 
/// </summary>
/// <returns>
/// A value, in milliseconds, that determines how long the stream will attempt to write before timing out.
/// </returns>
/// <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.WriteTimeout"/> method always throws an <see cref="T:System.InvalidOperationException"/>. </exception><filterpriority>2</filterpriority>
/// <summary>
/// Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
/// </summary>
/// <filterpriority>1</filterpriority>
/// <summary>
/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
/// </summary>
/// <filterpriority>2</filterpriority>
/// <summary>
/// When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
/// </summary>
/// <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
/// <summary>
/// When overridden in a derived class, sets the position within the current stream.
/// </summary>
/// <returns>
/// The new position within the current stream.
/// </returns>
/// <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param><param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
/// <summary>
/// When overridden in a derived class, sets the length of the current stream.
/// </summary>
/// <param name="value">The desired length of the current stream in bytes. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
/// <summary>
/// When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
/// </summary>
/// <returns>
/// The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
/// </returns>
/// <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. </param><param name="count">The maximum number of bytes to be read from the current stream. </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
/// <summary>
/// When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
/// </summary>
/// <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param><param name="count">The number of bytes to be written to the current stream. </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support writing. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
/// <summary>
/// Begins an asynchronous read operation.
/// </summary>
/// <returns>
/// An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.
/// </returns>
/// <param name="buffer">The buffer to read the data into. </param><param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param><param name="count">The maximum number of bytes to read. </param><param name="callback">An optional asynchronous callback, to be called when the read is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception><filterpriority>2</filterpriority>
/// <summary>
/// Begins an asynchronous write operation.
/// </summary>
/// <returns>
/// An IAsyncResult that represents the asynchronous write, which could still be pending.
/// </returns>
/// <param name="buffer">The buffer to write data from. </param><param name="offset">The byte offset in <paramref name="buffer"/> from which to begin writing. </param><param name="count">The maximum number of bytes to write. </param><param name="callback">An optional asynchronous callback, to be called when the write is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous write past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the write operation. </exception><filterpriority>2</filterpriority>
/// <summary>
/// Waits for the pending asynchronous read to complete.
/// </summary>
/// <returns>
/// The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
/// </returns>
/// <param name="asyncResult">The reference to the pending asynchronous request to finish. </param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream. </exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
/// <summary>
/// Ends an asynchronous write operation.
/// </summary>
/// <param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream. </exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
/// <summary>
/// Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
/// </summary>
/// <returns>
/// The unsigned byte cast to an Int32, or -1 if at the end of the stream.
/// </returns>
/// <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
/// <summary>
/// Writes a byte to the current position in the stream and advances the position within the stream by one byte.
/// </summary>
/// <param name="value">The byte to write to the stream. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
/// <summary>
/// Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
/// </summary>
/// <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\DefaultJsonConfigurationProvider.cs
/// <summary>
/// Provides the default configuration for <see cref="JsonConfiguration"/>.
/// </summary>
/// <summary>
/// Gets the default configuration instance to register in the <see cref="INancyEnvironment"/>.
/// </summary>
/// <returns>The configuration instance</returns>
/// <remarks>Will return <see cref="JsonConfiguration.Default"/></remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\JavaScriptConverter.cs
//
// JavaScriptConverter.cs
//
// Author:
//   Igor Zelmanovich <igorz@mainsoft.com>
//
// (C) 2007 Mainsoft, Inc.  http://www.mainsoft.com
//
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\JavaScriptPrimitiveConverter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\JavaScriptSerializer.cs
//
// JavaScriptSerializer.cs
//
// Author:
//   Konstantin Triger <kostat@mainsoft.com>
//
// (C) 2007 Mainsoft, Inc.  http://www.mainsoft.com
//
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/*
//bugzilla.novell.com/show_bug.cgi?id=328836)
// non-generic typed list
// generic list
// already Evaluated
//must evaluate value
//must evaluate value
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\JavaScriptTypeResolver.cs
//
// JavaScriptTypeResolver.cs
//
// Author:
//   Igor Zelmanovich <igorz@mainsoft.com>
//
// (C) 2007 Mainsoft, Inc.  http://www.mainsoft.com
//
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\Json.cs
//
// Json.cs
//
// Author:
//   Marek Habersack <mhabersack@novell.com>
//
// (C) 2008 Novell, Inc.  http://novell.com/
//
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/// <summary>
/// Attempts to detect if the content type is JSON.
/// Supports:
///   application/json
///   text/json
///   [something]+json
/// Matches are case insensitive to try and be as "accepting" as possible.
/// </summary>
/// <param name="contentType">Request content type</param>
/// <returns>True if content type is JSON, false otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\JsonConfiguration.cs
/// <summary>
/// Configuration for JSON serialization.
/// </summary>
/// <summary>
/// A default instance of the <see cref="JsonConfiguration"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="JsonConfiguration"/> class.
/// </summary>
/// <param name="useIso8601DateFormat"><see langword="true"/> if ISO-8601 date formats should be used, otherwise <see langword="false"/>.</param>
/// <param name="maxJsonLength">The maximum allowed lenght for the JSON output.</param>
/// <param name="maxRecursions">The maximum number of recrusions allowed by the serializer.</param>
/// <param name="defaultEncoding">The default <see cref="Encoding"/> that should be used by the serializer.</param>
/// <param name="converters">List of <see cref="JavaScriptConverter"/> instances.</param>
/// <param name="primitiveConverters">List of <see cref="JavaScriptPrimitiveConverter"/> instances.</param>
/// <param name="retainCasing"><see langword="true"/> if the name casing should be retained during serialization, otherwise <see langword="false"/>.</param>
/// <summary>
/// Max length of JSON output.
/// </summary>
/// <remarks>The default is 102400.</remarks>
/// <summary>
/// Maximum number of recursions.
/// </summary>
/// <remarks>The default is 100.</remarks>
/// <summary>
/// Gets the default <see cref="Encoding"/> for JSON responses.
/// </summary>
/// <remarks>The default is <see langword="Encoding.UTF8" />.</remarks>
/// <summary>
/// Gets or sets the type converters that should be used.
/// </summary>
/// <remarks>The default is <see cref="TimeSpanConverter"/> and <see cref="TupleConverter"/>.</remarks>
/// <summary>
/// Gets or sets the converters used for primitive types.
/// </summary>
/// <remarks>The default are no converters.</remarks>
/// <summary>
/// Gets or sets if C# casing should be retained or if camel-casing should be enforeced.
/// </summary>
/// <remarks>The default is <see langword="false"/>.</remarks>
/// <summary>
/// Gets or sets if ISO-860 date formats should be used or not.
/// </summary>
/// <remarks>The default is <see langword="false"/>.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\JsonConfigurationExtensions.cs
/// <summary>
/// Contains <see cref="DiagnosticsConfiguration"/> configuration extensions for <see cref="INancyEnvironment"/>.
/// </summary>
/// <summary>
/// Configures JSON serialization.
/// </summary>
/// <param name="environment"><see cref="INancyEnvironment"/> that should be configured.</param>
/// <param name="useIso8601DateFormat"><see langword="true" /> if ISO-860 date formats should be used, otherwise <see langword="false" />.</param>
/// <param name="maxJsonLength">Max length of JSON output.</param>
/// <param name="maxRecursions">Maximum number of recursions.</param>
/// <param name="defaultEncoding">The <see cref="Encoding"/> that should be as a default.</param>
/// <param name="converters">List of <see cref="JavaScriptConverter"/> that should be used.</param>
/// <param name="primitiveConverters">List of <see cref="JavaScriptPrimitiveConverter"/> that should be used.</param>
/// <param name="retainCasing"><see langword="true" /> if C# casing should be retained, otherwise <see langword="false" /> to use camel-casing.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\JsonDeserializer.cs
//
// JsonDeserializer.cs
//
// Author:
//   Marek Habersack <mhabersack@novell.com>
//
// (C) 2008 Novell, Inc.  http://novell.com/
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Code is based on JSON_checker (http://www.json.org/JSON_checker/) and JSON_parser
// (http://fara.cs.uni-potsdam.de/~jsg/json_parser/) C sources. License for the original code
// follows:
/*
/* Universal error constant */
/*
/* space */
/* other whitespace */
/* {  */
/* } */
/* [ */
/* ] */
/* : */
/* , */
/* " */
/* \ */
/* / */
/* + */
/* - */
/* . */
/* 0 */
/* 123456789 */
/* a */
/* b */
/* c */
/* d */
/* e */
/* f */
/* l */
/* n */
/* r */
/* s */
/* t */
/* u */
/* ABCDF */
/* E */
/* everything else */
/* * */
/* I */
/* i */
/* y */
/* N */
/* The state codes. */
/* start    */
/* ok       */
/* object   */
/* key      */
/* colon    */
/* value    */
/* array    */
/* string   */
/* escape   */
/* u1       */
/* u2       */
/* u3       */
/* u4       */
/* minus    */
/* zero     */
/* integer  */
/* fraction */
/* e        */
/* ex       */
/* exp      */
/* tr       */
/* tru      */
/* true     */
/* fa       */
/* fal      */
/* fals     */
/* false    */
/* nu       */
/* nul      */
/* null     */
/* *.* *eE* */
/* invalid input */
/* unquoted key name */
/* ignore during unquoted key name construction */
/* In */
/* Inf */
/* Infi */
/* Infin */
/* Infini */
/* Infinit */
/* Infinity */
/* Na */
/* NaN */
/* Actions */
/* false */
/* false */
/* null */
/* double detected by exponent e E */
/* double detected by fraction . */
/* string begin */
/* integer detected by minus */
/* integer detected by zero */
/* integer detected by 1-9 */
/* next char is escaped */
/* Unicode character read */
/* string end */
/* array begin */
/* array end */
/* object start */
/* object end */
/* empty object */
/* comma */
/* colon action */
/* integer detected by plus */
/* unquoted key name begin */
/* unquoted key name end */
/* Infinity */
/* NaN */
/*
/*
/*start    GO*/ {GO,GO,OS,__,AB,__,__,__,SB,__,__,PX,MX,__,ZX,IX,__,__,__,__,__,FA,__,__,__,__,TR,__,__,__,__,__,I1,__,__,V1},
/*ok       OK*/ {OK,OK,__,OE,__,AE,__,CM,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*object   OB*/ {OB,OB,__,EO,__,__,__,__,SB,__,__,__,KB,__,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,__,KB,KB,KB,KB},
/*key      KE*/ {KE,KE,__,__,__,__,__,__,SB,__,__,__,KB,__,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,KB,__,KB,KB,KB,KB},
/*colon    CO*/ {CO,CO,__,__,__,__,CA,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*value    VA*/ {VA,VA,OS,__,AB,__,__,__,SB,__,__,PX,MX,__,ZX,IX,__,__,__,__,__,FA,__,NU,__,__,TR,__,__,__,__,__,I1,__,__,V1},
/*array    AR*/ {AR,AR,OS,__,AB,AE,__,__,SB,__,__,PX,MX,__,ZX,IX,__,__,__,__,__,FA,__,NU,__,__,TR,__,__,__,__,__,I1,__,__,V1},
/*string   ST*/ {ST,__,ST,ST,ST,ST,ST,ST,SE,EX,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST,ST},
/*escape   ES*/ {__,__,__,__,__,__,__,__,ST,ST,ST,__,__,__,__,__,__,ST,__,__,__,ST,__,ST,ST,__,ST,U1,__,__,__,__,__,__,__,__},
/*u1       U1*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,U2,U2,U2,U2,U2,U2,U2,U2,__,__,__,__,__,__,U2,U2,__,__,__,__,__,__},
/*u2       U2*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,U3,U3,U3,U3,U3,U3,U3,U3,__,__,__,__,__,__,U3,U3,__,__,__,__,__,__},
/*u3       U3*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,U4,U4,U4,U4,U4,U4,U4,U4,__,__,__,__,__,__,U4,U4,__,__,__,__,__,__},
/*u4       U4*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,UC,UC,UC,UC,UC,UC,UC,UC,__,__,__,__,__,__,UC,UC,__,__,__,__,__,__},
/*minus    MI*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,ZE,IN,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,I1,__,__,__},
/*zero     ZE*/ {OK,OK,__,OE,__,AE,__,CM,__,__,__,__,__,DF,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*int      IN*/ {OK,OK,__,OE,__,AE,__,CM,__,__,__,__,__,DF,IN,IN,__,__,__,__,DE,__,__,__,__,__,__,__,__,DE,__,__,__,__,__,__},
/*frac     FR*/ {OK,OK,__,OE,__,AE,__,CM,__,__,__,__,__,__,FR,FR,__,__,__,__,E1,__,__,__,__,__,__,__,__,E1,__,__,__,__,__,__},
/*e        E1*/ {__,__,__,__,__,__,__,__,__,__,__,E2,E2,__,E3,E3,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*ex       E2*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,E3,E3,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*exp      E3*/ {OK,OK,__,OE,__,AE,__,CM,__,__,__,__,__,__,E3,E3,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*tr       T1*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,T2,__,__,__,__,__,__,__,__,__,__,__},
/*tru      T2*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,T3,__,__,__,__,__,__,__,__},
/*true     T3*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,OK,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*fa       F1*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,F2,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*fal      F2*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,F3,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*fals     F3*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,F4,__,__,__,__,__,__,__,__,__,__},
/*false    F4*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,OK,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*nu       N1*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,N2,__,__,__,__,__,__,__,__},
/*nul      N2*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,N3,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*null     N3*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,OK,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*_.       FX*/ {OK,OK,__,OE,__,AE,__,CM,__,__,__,__,__,__,FR,FR,__,__,__,__,E1,__,__,__,__,__,__,__,__,E1,__,__,__,__,__,__},
/*inval.   IV*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*unq.key  UK*/ {UI,UI,__,__,__,__,UE,__,__,__,__,UK,UK,UK,UK,UK,UK,UK,UK,UK,UK,UK,UK,UK,UK,UK,UK,UK,UK,UK,UK,__,UK,UK,UK,UK},
/*unq.ign. UI*/ {UI,UI,__,__,__,__,UE,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*i1       I1*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,I2,__,__,__,__,__,__,__,__,__,__,__,__},
/*i2       I2*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,I3,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*i3       I3*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,I4,__,__},
/*i4       I4*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,I5,__,__,__,__,__,__,__,__,__,__,__,__},
/*i5       I5*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,I6,__,__},
/*i6       I6*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,I7,__,__,__,__,__,__,__,__,__},
/*i7       I7*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,IF,__},
/*v1       V1*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,V2,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__},
/*v2       V2*/ {__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,NN},
/* MS AJAX.NET JSON parser promotes big integers to double */
/* An action to perform */
/* Unicode character */
/* Escaped character */
/* integer detected by minus */
/* integer detected by plus */
/* integer detected by zero */
/* integer detected by 1-9 */
/* floating point number detected by exponent*/
/* floating point number detected by fraction */
/* string begin " or ' */
/* unquoted key name begin */
/* unquoted key name end ':' */
/* n */
/* f */
/* t */
/* empty } */
/* } */
/* ] */
/* { */
/* [ */
/* string end " or ' */
/* A stand-alone string */
/* the rest of input is invalid */
/* , */
// With MS.AJAX, a comma resets the recursion depth
/* : */
// With MS.AJAX a colon increases recursion depth
/* Infinity */
/* NaN */
/* A stand-alone NaN/Infinity */
/* the rest of input is invalid */
/* MS AJAX.NET silently overwrites existing currentKey value */
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\JsonSerializer.cs
//
// JsonSerializer.cs
//
// Author:
//   Marek Habersack <mhabersack@novell.com>
//
// (C) 2008 Novell, Inc.  http://novell.com/
//
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Recurse in order that there be one place in the code that handles null values.
// To avoid confusion, treat "Unspecified" datetimes as Local -- just like the WCF datetime format does as well.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\ScriptIgnoreAttribute.cs
//
// ScriptIgnoreAttribute.cs
//
// Author:
//   Igor Zelmanovich <igorz@mainsoft.com>
//
// (C) 2007 Mainsoft, Inc.  http://www.mainsoft.com
//
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\StringBuilderExtensions.cs
//
// StringBuilderExtensions.cs
//
// Author:
//   Marek Habersack <mhabersack@novell.com>
//
// (C) 2008 Novell, Inc.  http://novell.com/
//
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\Converters\TimeSpanConverter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Json\Converters\TupleConverter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Localization\ITextResource.cs
/// <summary>
/// Used to return string values
/// </summary>
/// <summary>
/// Gets a translation based on the provided key.
/// </summary>
/// <param name="key">The key to look up the translation for.</param>
/// <param name="context">The current <see cref="NancyContext"/> instance.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Localization\ResourceBasedTextResource.cs
/// <summary>
/// Resource based implementation of <see cref="ITextResource"/>
/// </summary>
/// <summary>
/// Initializes a new instance of <see cref="ResourceBasedTextResource"/> to read strings from *.resx files
/// </summary>
/// <param name="resourceAssemblyProvider">The <see cref="IResourceAssemblyProvider"/> that should be used when scanning.</param>
/// <summary>
/// Used to return a string value from *.resx files
/// </summary>
/// <param name="key">The key to look for in the resource file</param>
/// <param name="context">The <see cref="NancyContext"/> used to determine the culture for returning culture specific values.</param>
/// <returns>Returns a string value from culture specific or default file or null if key does not exist as determined by <see cref="ResourceManager"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Localization\TextResourceFinder.cs
/// <summary>
/// Returns text from an implemented ITextResource
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="TextResourceFinder"/> class.
/// </summary>
/// <param name="textResource">The <see cref="ITextResource"/> that should be used by the TextResourceFinder</param>
/// <param name="context">The <see cref="NancyContext"/> that should be used by the TextResourceFinder</param>
/// <summary>
/// Gets the <see cref="ITextResource"/> that is being used to locate texts.
/// </summary>
/// <value>An <see cref="ITextResource"/> instance.</value>
/// <summary>
/// Finds text resource
/// </summary>
/// <param name="binder">GetMemberBinder with dynamic text key</param>
/// <param name="result">Text item</param>
/// <returns>Returns a value or a non existing value from the <see cref="ITextResource"/> implementation</returns>
/// <summary>
/// Gets a translation based on the provided key.
/// </summary>
/// <param name="key">The key to look up the translation for.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\BindingConfig.cs
/// <summary>
/// Configurations that controls the behavior of the binder at runtime.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BindingConfig"/> class.
/// </summary>
/// <summary>
/// Binding configuration that permits that the binder overwrites non-default values.
/// </summary>
/// <summary>
/// Default binding configuration.
/// </summary>
/// <summary>
/// Gets or sets whether the binder should be happy once it has bound to the request body. In this case,
/// request and context parameters will not be bound to. If there is no body and this option is enabled,
/// no binding will take place at all.
/// </summary>
/// <value><see langword="true" /> if the binder will stop once the body has been bound, otherwise <see langword="false" />.</value>
/// <summary>
/// Gets or sets whether binding error should be ignored and the binder should continue with the next property.
/// </summary>
/// <remarks>Setting this property to <see langword="true" /> means that no <see cref="ModelBindingException"/> will be thrown if an error occurs.</remarks>
/// <value><see langword="true" />If the binder should ignore errors, otherwise <see langword="false" />.</value>
/// <summary>
/// Gets or sets whether the binder is allowed to overwrite properties that does not have a default value.
/// </summary>
/// <value><see langword="true" /> if the binder is allowed to overwrite non-default values, otherwise <see langword="false" />.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\BindingContext.cs
/// <summary>
/// Model binding context object
/// </summary>
/// <summary>
/// The binding configuration
/// </summary>
/// <summary>
/// Current Nancy context
/// </summary>
/// <summary>
/// Binding destination type
/// </summary>
/// <summary>
/// The generic type of a collection is only used when DestinationType is a enumerable.
/// </summary>
/// <summary>
/// The current model object (or null for body deserialization)
/// </summary>
/// <summary>
/// DestinationType properties that are not black listed
/// </summary>
/// <summary>
/// The incoming data fields
/// </summary>
/// <summary>
/// Available type converters - user converters followed by any defaults
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\BindingDefaults.cs
/// <summary>
/// Provides default binding converters/deserializers
/// The defaults have less precedence than any user supplied ones
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BindingDefaults"/> class,
/// with the provided <see cref="INancyEnvironment"/>.
/// </summary>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
// Ordering is important - for now we will new just these up
// as the binding defaults class itself is replaceable if necessary,
// and none of defaults have any dependencies.
/// <summary>
/// Gets the default type converters
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> of <see cref="ITypeConverter"/> instances.</value>
/// <summary>
/// Gets the default type converters
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> of <see cref="IBodyDeserializer"/> instances.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\BindingMemberInfo.cs
/// <summary>
/// Represents a bindable member of a type, which can be a property or a field.
/// </summary>
/// <summary>
/// Gets a reference to the MemberInfo that this BindingMemberInfo represents. This can be a property or a field.
/// </summary>
/// <summary>
/// Gets the name of the property or field represented by this BindingMemberInfo.
/// </summary>
/// <summary>
/// Gets the data type of the property or field represented by this BindingMemberInfo.
/// </summary>
/// <summary>
/// Constructs a BindingMemberInfo instance for a property.
/// </summary>
/// <param name="propertyInfo">The bindable property to represent.</param>
/// <summary>
/// Constructs a BindingMemberInfo instance for a field.
/// </summary>
/// <param name="fieldInfo">The bindable field to represent.</param>
/// <summary>
/// Gets the value from a specified object associated with the property or field represented by this BindingMemberInfo.
/// </summary>
/// <param name="sourceObject">The object whose property or field should be retrieved.</param>
/// <returns>The value for this BindingMemberInfo's property or field in the specified object.</returns>
/// <summary>
/// Sets the value from a specified object associated with the property or field represented by this BindingMemberInfo.
/// </summary>
/// <param name="destinationObject">The object whose property or field should be assigned.</param>
/// <param name="newValue">The value to assign in the specified object to this BindingMemberInfo's property or field.</param>
/// <inherit-doc/>
/// <summary>
/// Compares two BindingMemberInfo's with eachother on their respective values rather then their reference
/// </summary>
/// <param name="obj">the other BindingMemberInfo</param>
/// <returns>true when they are equal and false otherwise</returns>
/// <inherit-doc/>
/// <summary>
/// Returns an enumerable sequence of bindable properties for the specified type.
/// </summary>
/// <typeparam name="T">The type to enumerate.</typeparam>
/// <returns>Bindable properties.</returns>
/// <summary>
/// Returns an enumerable sequence of bindable properties for the specified type.
/// </summary>
/// <param name="type">The type to enumerate.</param>
/// <returns>Bindable properties.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\DefaultBinder.cs
/// <summary>
/// Default binder - used as a fallback when a specific modelbinder
/// is not available.
/// </summary>
/// <summary>
/// Bind to the given model type
/// </summary>
/// <param name="context">Current context</param>
/// <param name="modelType">Model type to bind to</param>
/// <param name="instance">Optional existing instance</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blackList">Blacklisted binding property names</param>
/// <returns>Bound model</returns>
//make sure it has a generic type
/// <summary>
/// Gets the number of distinct indexes from context:
///
/// i.e:
///  IntProperty_5
///  StringProperty_5
///  IntProperty_7
///  StringProperty_8
///  You'll end up with a list of 3 matches: 5,7,8
///
/// </summary>
/// <param name="context">Current Context </param>
/// <returns>An int containing the number of elements</returns>
// If the instance specified in the binder contains the n-th element use that
// If the instance specified in the binder contains the n-th element use that otherwise make a new one.
// TODO - catch reflection exceptions?
//make sure instance has a Add method. Otherwise call `.ToList`
//else just make a list
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\DefaultFieldNameConverter.cs
/// <summary>
/// Default field name converter
/// Converts camel case to pascal case
/// </summary>
/// <summary>
/// Converts a field name to a property name
/// </summary>
/// <param name="fieldName">Field name</param>
/// <returns>Property name</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\DefaultModelBinderLocator.cs
/// <summary>
/// Locates model binders for a particular model
/// </summary>
/// <summary>
/// Available model binders
/// </summary>
/// <summary>
/// Default model binder to fall back on
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultModelBinderLocator"/> class.
/// </summary>
/// <param name="binders">Available model binders</param>
/// <param name="fallbackBinder">Fallback binder</param>
/// <summary>
/// Gets a binder for the given type
/// </summary>
/// <param name="modelType">Destination type to bind to</param>
/// <param name="context">The <see cref="NancyContext"/> instance of the current request.</param>
/// <returns>IModelBinder instance or null if none found</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\DynamicModelBinderAdapter.cs
/// <summary>
/// Provides wiring up of a model binder when cast to a destination type
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DynamicModelBinderAdapter"/> class.
/// </summary>
/// <param name="locator">Model binder locator</param>
/// <param name="context">Nancy context</param>
/// <param name="instance">Optional existing instance, or null</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blacklistedProperties">Blacklisted property names</param>
/// <summary>
/// Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
/// </summary>
/// <returns>
/// true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
/// </returns>
/// <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Type returns the <see cref="T:System.String"/> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param><param name="result">The result of the type conversion operation.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\ExpressionExtensions.cs
/// <summary>
/// Contains extension methods for the <see cref="Expression"/> type.
/// </summary>
/// <summary>
/// Retrieves the member that an expression is defined for.
/// </summary>
/// <param name="expression">The expression to retrieve the member from.</param>
/// <returns>A <see cref="MemberInfo"/> instance if the member could be found; otherwise <see langword="null"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\IBinder.cs
/// <summary>
/// Binds incoming request data to a model type
/// </summary>
/// <summary>
/// Bind to the given model type
/// </summary>
/// <param name="context">Current context</param>
/// <param name="modelType">Model type to bind to</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blackList">Blacklisted property names</param>
/// <param name="instance">Existing instance of the object</param>
/// <returns>Bound model</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\IBodyDeserializer.cs
/// <summary>
/// Provides a way to deserialize the contents of a request
/// into a bound model.
/// </summary>
/// <summary>
/// Whether the deserializer can deserialize the content type
/// </summary>
/// <param name="mediaRange">Content type to deserialize</param>
/// <param name="context">Current <see cref="BindingContext"/>.</param>
/// <returns>True if supported, false otherwise</returns>
/// <summary>
/// Deserialize the request body to a model
/// </summary>
/// <param name="mediaRange">Content type to deserialize</param>
/// <param name="bodyStream">Request body stream</param>
/// <param name="context">Current <see cref="BindingContext"/>.</param>
/// <returns>Model instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\IFieldNameConverter.cs
/// <summary>
/// Provides the capability to supply a convention to
/// convert form field names to property names if required.
/// </summary>
/// <summary>
/// Converts a field name to a property name
/// </summary>
/// <param name="fieldName">Field name</param>
/// <returns>Property name</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\IModelBinder.cs
/// <summary>
/// Provides a way to bind an incoming request, via the context, to a model type
/// </summary>
/// <summary>
/// Whether the binder can bind to the given model type
/// </summary>
/// <param name="modelType">Required model type</param>
/// <returns>True if binding is possible, false otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\IModelBinderLocator.cs
/// <summary>
/// Locates model binders for a particular model
/// </summary>
/// <summary>
/// Gets a binder for the given type
/// </summary>
/// <param name="modelType">Destination type to bind to</param>
/// <param name="context">The <see cref="NancyContext"/> instance of the current request.</param>
/// <returns>IModelBinder instance or null if none found</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\ITypeConverter.cs
/// <summary>
/// Provides a way to convert from the incoming string representation
/// of a type to the type itself.
/// </summary>
/// <summary>
/// Whether the converter can convert to the destination type
/// </summary>
/// <param name="destinationType">Destination type</param>
/// <param name="context">The current binding context</param>
/// <returns>True if conversion supported, false otherwise</returns>
/// <summary>
/// Convert the string representation to the destination type
/// </summary>
/// <param name="input">Input string</param>
/// <param name="destinationType">Destination type</param>
/// <param name="context">Current context</param>
/// <returns>Converted object of the destination type</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\ModelBindingException.cs
/// <summary>
/// Represents an exception when attempting to bind to a model
/// </summary>
/// <summary>
/// Gets all failures
/// </summary>
/// <summary>
/// Gets the model type, which caused the exception
/// </summary>
/// <summary>
/// Initializes a new instance of the ModelBindingException class with a specified model type,
/// property name and the original exception, which caused the problem
/// </summary>
/// <param name="boundType">the model type to bind to</param>
/// <param name="propertyBindingExceptions">the original exceptions, thrown while binding the property</param>
/// <param name="innerException">The inner exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ModelBindingException" /> class with serialized data.
/// </summary>
/// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\ModuleExtensions.cs
/// <summary>
/// Parses an array of expressions like <code>t =&gt; t.Property</code> to a list of strings containing the property names;
/// </summary>
/// <typeparam name="T">Type of the model</typeparam>
/// <param name="expressions">Expressions that tell which property should be ignored</param>
/// <returns>Array of strings containing the names of the properties.</returns>
/// <summary>
/// Bind the incoming request to a model
/// </summary>
/// <param name="module">Current module</param>
/// <param name="blacklistedProperties">Property names to blacklist from binding</param>
/// <returns>Model adapter - cast to a model type to bind it</returns>
/// <summary>
/// Bind the incoming request to a model
/// </summary>
/// <param name="module">Current module</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blacklistedProperties">Property names to blacklist from binding</param>
/// <returns>Model adapter - cast to a model type to bind it</returns>
/// <summary>
/// Bind the incoming request to a model
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <returns>Bound model instance</returns>
/// <summary>
/// Bind the incoming request to a model
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="blacklistedProperties">Property names to blacklist from binding</param>
/// <returns>Bound model instance</returns>
/// <summary>
/// Bind the incoming request to a model
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
/// <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
/// <returns>Bound model instance</returns>
/// <summary>
/// Bind the incoming request to a model and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="blacklistedProperties">Property names to blacklist from binding</param>
/// <returns>Bound model instance</returns>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
/// <summary>
/// Bind the incoming request to a model and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
/// <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
/// <returns>Bound model instance</returns>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
/// <summary>
/// Bind the incoming request to a model and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <returns>Bound model instance</returns>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
/// <summary>
/// Bind the incoming request to a model
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <returns>Bound model instance</returns>
/// <summary>
/// Bind the incoming request to a model
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blacklistedProperties">Property names to blacklist from binding</param>
/// <returns>Bound model instance</returns>
/// <summary>
/// Bind the incoming request to a model
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blacklistedProperty">Expressions that tell which property should be ignored</param>
/// <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
/// <returns>Bound model instance</returns>
/// <summary>
/// Bind the incoming request to a model
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
/// <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
/// <returns>Bound model instance</returns>
/// <summary>
/// Bind the incoming request to a model and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blacklistedProperties">Property names to blacklist from binding</param>
/// <returns>Bound model instance</returns>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
/// <summary>
/// Bind the incoming request to a model and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
/// <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
/// <returns>Bound model instance</returns>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
/// <summary>
/// Bind the incoming request to a model and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <returns>Bound model instance</returns>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
/// <summary>
/// Bind the incoming request to an existing instance
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <param name="blacklistedProperties">Property names to blacklist from binding</param>
/// <summary>
/// Bind the incoming request to an existing instance
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
/// <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
/// <summary>
/// Bind the incoming request to an existing instance
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <summary>
/// Bind the incoming request to an existing instance and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <param name="blacklistedProperties">Property names to blacklist from binding</param>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
/// <summary>
/// Bind the incoming request to an existing instance and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
/// <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
/// <summary>
/// Bind the incoming request to an existing instance and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
/// <summary>
/// Bind the incoming request to an existing instance
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blacklistedProperties">Property names to blacklist from binding</param>
/// <summary>
/// Bind the incoming request to an existing instance
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
/// <example>this.Bind&lt;Person&gt;(p =&gt; p.Name, p =&gt; p.Age)</example>
/// <summary>
/// Bind the incoming request to an existing instance
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <summary>
/// Bind the incoming request to an existing instance and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blacklistedProperties">Property names to blacklist from binding</param>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
/// <summary>
/// Bind the incoming request to an existing instance and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blacklistedProperties">Expressions that tell which property should be ignored</param>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
/// <example>this.BindToAndValidate(person, config, p =&gt; p.Name, p =&gt; p.Age)</example>
/// <summary>
/// Bind the incoming request to an existing instance and validate
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <param name="module">Current module</param>
/// <param name="instance">The class instance to bind properties to</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <remarks><see cref="ModelValidationResult"/> is stored in NancyModule.ModelValidationResult and NancyContext.ModelValidationResult.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\PropertyBindingException.cs
/// <summary>
/// Gets the property name for which the bind failed
/// </summary>
/// <summary>
/// Gets the value which was attempted to be assigned to the property
/// </summary>
/// <summary>
/// Creates new instance
/// </summary>
/// <param name="propertyName">the name of the property which failed to bind</param>
/// <param name="attemptedValue">the value attempted to set</param>
/// <param name="innerException">the underlying exception</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\DefaultBodyDeserializers\JsonBodyDeserializer.cs
/// <summary>
/// Deserializes request bodies in JSON format
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="JsonBodyDeserializer"/>,
/// with the provided <paramref name="environment"/>.
/// </summary>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
/// <summary>
/// Whether the deserializer can deserialize the content type
/// </summary>
/// <param name="mediaRange">Content type to deserialize</param>
/// <param name="context">Current <see cref="BindingContext"/>.</param>
/// <returns>True if supported, false otherwise</returns>
/// <summary>
/// Deserialize the request body to a model
/// </summary>
/// <param name="mediaRange">Content type to deserialize</param>
/// <param name="bodyStream">Request body stream</param>
/// <param name="context">Current context</param>
/// <returns>Model instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\DefaultBodyDeserializers\XmlBodyDeserializer.cs
/// <summary>
/// Deserializes request bodies in XML format
/// </summary>
/// <summary>
/// Whether the deserializer can deserialize the content type
/// </summary>
/// <param name="mediaRange">Content type to deserialize</param>
/// <param name="context">Current <see cref="BindingContext"/>.</param>
/// <returns>True if supported, false otherwise</returns>
/// <summary>
/// Deserialize the request body to a model
/// </summary>
/// <param name="mediaRange">Content type to deserialize</param>
/// <param name="bodyStream">Request body stream</param>
/// <param name="context">Current <see cref="BindingContext"/>.</param>
/// <returns>Model instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\DefaultConverters\CollectionConverter.cs
/// <summary>
/// Converter for handling enumerable types
/// </summary>
/// <summary>
/// Whether the converter can convert to the destination type
/// </summary>
/// <param name="destinationType">Destination type</param>
/// <param name="context">The current binding context</param>
/// <returns>True if conversion supported, false otherwise</returns>
/// <summary>
/// Convert the string representation to the destination type
/// </summary>
/// <param name="input">Input string</param>
/// <param name="destinationType">Destination type</param>
/// <param name="context">Current context</param>
/// <returns>Converted object of the destination type</returns>
// Strategy, schmategy ;-)
// Use ToList rather than AsEnumerable to make sure the collection
// is materialised and converters are called as appropriate.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\DefaultConverters\DateTimeConverter.cs
/// <summary>
/// Converter for datetime types
/// </summary>
/// <summary>
/// Whether the converter can convert to the destination type
/// </summary>
/// <param name="destinationType">Destination type</param>
/// <param name="context">The current binding context</param>
/// <returns>True if conversion supported, false otherwise</returns>
/// <summary>
/// Convert the string representation to the destination type
/// </summary>
/// <param name="input">Input string</param>
/// <param name="destinationType">Destination type</param>
/// <param name="context">Current context</param>
/// <returns>Converted object of the destination type</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\DefaultConverters\FallbackConverter.cs
/// <summary>
/// A fallback converter that uses TypeDescriptor.GetConverter to try
/// and convert the value.
/// </summary>
/// <summary>
/// Whether the converter can convert to the destination type
/// </summary>
/// <param name="destinationType">Destination type</param>
/// <param name="context">The current binding context</param>
/// <returns>True if conversion supported, false otherwise</returns>
/// <summary>
/// Convert the string representation to the destination type
/// </summary>
/// <param name="input">Input string</param>
/// <param name="destinationType">Destination type</param>
/// <param name="context">Current context</param>
/// <returns>Converted object of the destination type</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ModelBinding\DefaultConverters\NumericConverter.cs
/// <summary>
/// Converter for numeric types
/// </summary>
/// <summary>
/// Whether the converter can convert to the destination type
/// </summary>
/// <param name="destinationType">Destination type</param>
/// <param name="context">The current binding context</param>
/// <returns>True if conversion supported, false otherwise</returns>
/// <summary>
/// Convert the string representation to the destination type
/// </summary>
/// <param name="input">Input string</param>
/// <param name="destinationType">Destination type</param>
/// <param name="context">Current context</param>
/// <returns>Converted object of the destination type</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Owin\DelegateExtensions.cs
/// <summary>
/// OWIN extensions for the delegate-based approach.
/// </summary>
/// <summary>
/// Adds Nancy to the OWIN pipeline.
/// </summary>
/// <param name="builder">The application builder delegate.</param>
/// <param name="action">A configuration builder action.</param>
/// <returns>The application builder delegate.</returns>
/// <summary>
/// Adds Nancy to the OWIN pipeline.
/// </summary>
/// <param name="builder">The application builder delegate.</param>
/// <param name="options">The Nancy options.</param>
/// <returns>The application builder delegate.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Owin\NancyContextExtensions.cs
/// <summary>
/// OWIN extensions for the NancyContext.
/// </summary>
/// <summary>
/// Gets the OWIN environment dictionary.
/// </summary>
/// <param name="context">The Nancy context.</param>
/// <returns>The OWIN environment dictionary.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Owin\NancyMiddleware.cs
/// <summary>
/// Nancy middleware for OWIN.
/// </summary>
/// <summary>
/// The request environment key
/// </summary>
/// <summary>
/// Use Nancy in an OWIN pipeline
/// </summary>
/// <param name="configuration">A delegate to configure the <see cref="NancyOptions"/>.</param>
/// <returns>An OWIN middleware delegate.</returns>
/// <summary>
/// Use Nancy in an OWIN pipeline
/// </summary>
/// <param name="options">An <see cref="NancyOptions"/> to configure the Nancy middleware</param>
/// <returns>An OWIN middleware delegate.</returns>
/// <summary>
/// Gets a delegate to handle converting a nancy response
/// to the format required by OWIN and signals that the we are
/// now complete.
/// </summary>
/// <param name="context">The Nancy Context.</param>
/// <param name="environment">OWIN environment.</param>
/// <param name="next">The next stage in the OWIN pipeline.</param>
/// <param name="performPassThrough">A predicate that will allow the caller to determine if the request passes through to the 
/// next stage in the owin pipeline.</param>
/// <returns>Delegate</returns>
// OWIN 1.1
// check for Katana User
/// <summary>
/// Creates the Nancy URL
/// </summary>
/// <param name="owinRequestHost">OWIN Hostname</param>
/// <param name="owinRequestScheme">OWIN Scheme</param>
/// <param name="owinRequestPathBase">OWIN Base path</param>
/// <param name="owinRequestPath">OWIN Path</param>
/// <param name="owinRequestQueryString">OWIN Querystring</param>
/// <returns></returns>
/// <summary>
/// Gets a delegate to store the OWIN environment and flow the user into the NancyContext
/// </summary>
/// <param name="environment">OWIN Environment</param>
/// <returns>Delegate</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Owin\NancyOptions.cs
/// <summary>
/// Options for hosting Nancy with OWIN.
/// </summary>
/// <summary>
/// Gets or sets the bootstrapper. If none is set, NancyBootstrapperLocator.Bootstrapper is used.
/// </summary>
/// <summary>
/// Gets or sets the delegate that determines if NancyMiddleware performs pass through.
/// </summary>
/// <summary>
/// Gets or sets a value indicating whether to request a client certificate or not.
/// Defaults to false.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Owin\NancyOptionsExtensions.cs
/// <summary>
/// Extensions for the NancyOptions class.
/// </summary>
/// <summary>
/// Tells the NancyMiddleware to pass through when
/// response has one of the given status codes.
/// </summary>
/// <param name="nancyOptions">The Nancy options.</param>
/// <param name="httpStatusCode">The HTTP status code.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\DefaultJsonSerializer.cs
/// <summary>
/// Default <see cref="ISerializer"/> implementation for JSON serialization.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultJsonSerializer"/> class,
/// with the provided <see cref="INancyEnvironment"/>.
/// </summary>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
/// <summary>
/// Whether the serializer can serialize the content type
/// </summary>
/// <param name="mediaRange">Content type to serialise</param>
/// <returns>True if supported, false otherwise</returns>
/// <summary>
/// Gets the list of extensions that the serializer can handle.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> of extensions if any are available, otherwise an empty enumerable.</value>
/// <summary>
/// Set to true to retain the casing used in the C# code in produced JSON.
/// Set to false to use camelCasig in the produced JSON.
/// False by default.
/// </summary>
/// <summary>
/// Set to true to use the ISO8601 format for datetimes in produced JSON.
/// Set to false to use the WCF \/Date()\/ format in the produced JSON.
/// True by default.
/// </summary>
/// <summary>
/// Serialize the given model with the given contentType
/// </summary>
/// <param name="mediaRange">Content type to serialize into</param>
/// <param name="model">Model to serialize</param>
/// <param name="outputStream">Stream to serialize to</param>
/// <returns>Serialised object</returns>
/// <summary>
/// Attempts to detect if the content type is JSON.
/// Supports:
///   application/json
///   text/json
///   application/vnd[something]+json
/// Matches are case insentitive to try and be as "accepting" as possible.
/// </summary>
/// <param name="contentType">Request content type</param>
/// <returns>True if content type is JSON, false otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\DefaultXmlSerializer.cs
/// <summary>
/// Default <see cref="ISerializer"/> implementation for XML serialization.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultXmlSerializer"/> class,
/// with the provided <see cref="INancyEnvironment"/>.
/// </summary>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
/// <summary>
/// Whether the serializer can serialize the content type
/// </summary>
/// <param name="mediaRange">Content type to serialise</param>
/// <returns>True if supported, false otherwise</returns>
/// <summary>
/// Gets the list of extensions that the serializer can handle.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> of extensions if any are available, otherwise an empty enumerable.</value>
/// <summary>
/// Serialize the given model with the given contentType
/// </summary>
/// <param name="mediaRange">Content type to serialize into</param>
/// <param name="model">Model to serialize</param>
/// <param name="outputStream">Output stream to serialize to</param>
/// <returns>Serialised object</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\EmbeddedFileResponse.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\GenericFileResponse.cs
/// <summary>
/// A response representing a file.
/// </summary>
/// <remarks>If the response contains an invalid file (not found, empty name, missing extension and so on) the status code of the response will be set to <see cref="HttpStatusCode.NotFound"/>.</remarks>
/// <summary>
/// Represents a list of "base paths" where it is safe to
/// serve files from.
/// Attempting to server a file outside of these safe paths
/// will fail with a 404.
/// </summary>
/// <summary>
///  Size of buffer for transmitting file. Default size 4 Mb
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="GenericFileResponse"/> for the file specified
/// by the <paramref name="filePath"/> parameter.
/// </summary>
/// <param name="filePath">The name of the file, including path relative to the root of the application, that should be returned.</param>
/// <remarks>The <see cref="MimeTypes.GetMimeType"/> method will be used to determine the mimetype of the file and will be used as the content-type of the response. If no match if found the content-type will be set to application/octet-stream.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="GenericFileResponse"/> for the file specified
/// by the <paramref name="filePath"/> parameter.
/// </summary>
/// <param name="filePath">The name of the file, including path relative to the root of the application, that should be returned.</param>
/// <remarks>The <see cref="MimeTypes.GetMimeType"/> method will be used to determine the mimetype of the file and will be used as the content-type of the response. If no match if found the content-type will be set to application/octet-stream.</remarks>
/// <param name="context">Current context</param>
/// <summary>
/// Initializes a new instance of the <see cref="GenericFileResponse"/> for the file specified
/// by the <paramref name="filePath"/> parameter and the content-type specified by the <paramref name="contentType"/> parameter.
/// </summary>
/// <param name="filePath">The name of the file, including path relative to the root of the application, that should be returned.</param>
/// <param name="contentType">The content-type of the response.</param>
/// <param name="context">Current context</param>
/// <summary>
/// Gets the filename of the file response
/// </summary>
/// <value>A string containing the name of the file.</value>
// TODO - set a standard caching time and/or public?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\HtmlResponse.cs
/// <summary>
/// Represents a HTML (text/html) response
/// </summary>
/// <summary>
/// Creates a new instance of the HtmlResponse class
/// </summary>
/// <param name="statusCode">Status code - defaults to OK</param>
/// <param name="contents">Response body delegate - defaults to empty if null</param>
/// <param name="headers">Headers if required</param>
/// <param name="cookies">Cookies if required</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\JsonResponse.cs
/// <summary>
/// Represents a JSON response of the type <typeparamref name="TModel"/>.
/// </summary>
/// <typeparam name="TModel">The type of the model.</typeparam>
/// <summary>
/// Initializes a new instance of the <see cref="JsonResponse{TModel}"/> class,
/// with the provided <paramref name="model"/>, <paramref name="serializer"/>
/// and <paramref name="environment"/>.
/// </summary>
/// <param name="model">The model that should be returned as JSON.</param>
/// <param name="serializer">The <see cref="ISerializer"/> to use for the serialization.</param>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
/// <summary>
/// Represents a JSON response
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="JsonResponse{TModel}"/> class,
/// with the provided <paramref name="model"/>, <paramref name="serializer"/>
/// and <paramref name="environment"/>.
/// </summary>
/// <param name="model">The model that should be returned as JSON.</param>
/// <param name="serializer">The <see cref="ISerializer"/> to use for the serialization.</param>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\MaterialisingResponse.cs
/// <summary>
/// Takes an existing response and materialises the body.
/// Can be used as a wrapper to force execution of the deferred body for
/// error checking etc.
/// Copies the existing response into memory, so use with caution.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\NegotiatedResponse.cs
/// <summary>
/// Response that indicates that the response format should be negotiated between the client and the server.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NegotiatedResponse"/> response for the
/// provided <paramref name="value"/>.
/// </summary>
/// <param name="value">The response value that should be negotiated.</param>
/// <summary>
/// Gets or sets the value that should be negotiated.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\NotAcceptableResponse.cs
/// <summary>
/// Response with status code 406 (Not Acceptable).
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NotAcceptableResponse"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\RedirectResponse.cs
/// <summary>
/// A response representing an HTTP redirect
/// <seealso cref="Nancy.Extensions.ContextExtensions.ToFullPath"/>
/// <seealso cref="Nancy.Extensions.ContextExtensions.GetRedirect"/>
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RedirectResponse"/> class.
/// </summary>
/// <param name="location">Location to redirect to</param>
/// <param name="type">Type of redirection to perform</param>
/// <summary>
/// Which type of redirect
/// </summary>
/// <summary>
/// HTTP 301 - All future requests should be to this URL
/// </summary>
/// <summary>
/// HTTP 307 - Redirect this request but allow future requests to the original URL
/// </summary>
/// <summary>
/// HTTP 303 - Redirect this request using an HTTP GET
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\StreamResponse.cs
/// <summary>
/// Response that returns the contents of a stream of a given content-type.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="StreamResponse"/> class with the
/// provided stream provider and content-type.
/// </summary>
/// <param name="source">The value producer for the response.</param>
/// <param name="contentType">The content-type of the stream contents.</param>
/// <summary>
/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\TextResponse.cs
/// <summary>
/// Represents a text (text/plain) response
/// </summary>
/// <summary>
/// Creates a new instance of the TextResponse class
/// </summary>
/// <param name="contents">Text content - defaults to empty if null</param>
/// <param name="contentType">Content Type - defaults to text/plain</param>
/// <param name="encoding">String encoding - UTF8 if null</param>
/// <summary>
/// Creates a new instance of the TextResponse class
/// </summary>
/// <param name="statusCode">Status code - defaults to OK</param>
/// <param name="contents">Text content - defaults to empty if null</param>
/// <param name="encoding">String encoding - UTF8 if null</param>
/// <param name="headers">Headers if required</param>
/// <param name="cookies">Cookies if required</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\XmlResponse.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\DefaultResponseNegotiator.cs
/// <summary>
/// The default implementation for a response negotiator.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultResponseNegotiator"/> class.
/// </summary>
/// <param name="processors">The response processors.</param>
/// <param name="coercionConventions">The Accept header coercion conventions.</param>
/// <summary>
/// Negotiates the response based on the given result and context.
/// </summary>
/// <param name="routeResult">The route result.</param>
/// <param name="context">The context.</param>
/// <returns>A <see cref="Response" />.</returns>
/// <summary>
/// Tries to cast the dynamic result to a <see cref="Response"/>.
/// </summary>
/// <param name="routeResult">The result.</param>
/// <param name="response">The response.</param>
/// <returns><c>true</c> if the result is a <see cref="Response"/>, <c>false</c> otherwise.</returns>
// This code has to be designed this way in order for the cast operator overloads
// to be called in the correct way. It cannot be replaced by the as-operator.
/// <summary>
/// Gets a <see cref="NegotiationContext"/> based on the given result and context.
/// </summary>
/// <param name="routeResult">The route result.</param>
/// <param name="context">The context.</param>
/// <returns>A <see cref="NegotiationContext"/>.</returns>
/// <summary>
/// Gets the coerced accept headers based on the <see cref="AcceptHeaderCoercionConventions"/>.
/// </summary>
/// <param name="context">The context.</param>
/// <returns>IEnumerable{Tuple{System.String, System.Decimal}}.</returns>
/// <summary>
/// Gets compatible response processors by header.
/// </summary>
/// <param name="acceptHeader">The accept header.</param>
/// <param name="model">The model.</param>
/// <param name="context">The context.</param>
/// <returns>IEnumerable{Tuple{IResponseProcessor, ProcessorMatch}}.</returns>
/// <summary>
/// Creates a response from the compatible headers.
/// </summary>
/// <param name="compatibleHeaders">The compatible headers.</param>
/// <param name="negotiationContext">The negotiation context.</param>
/// <param name="context">The context.</param>
/// <returns>A <see cref="Response"/>.</returns>
/// <summary>
/// Prioritizes the response processors and tries to negotiate a response.
/// </summary>
/// <param name="compatibleHeaders">The compatible headers.</param>
/// <param name="negotiationContext">The negotiation context.</param>
/// <param name="context">The context.</param>
/// <returns>Response.</returns>
/// <summary>
/// Adds a link header to the <see cref="Response"/>.
/// </summary>
/// <param name="compatibleHeaders">The compatible headers.</param>
/// <param name="response">The response.</param>
/// <param name="requestUrl">The request URL.</param>
/// <summary>
/// Gets the link processors based on the compatible headers and content-type.
/// </summary>
/// <param name="compatibleHeaders">The compatible headers.</param>
/// <param name="contentType">The content-type of the response.</param>
/// <returns>Dictionary{System.String, MediaRange}.</returns>
/// <summary>
/// Creates the link header with the different media ranges.
/// </summary>
/// <param name="requestUrl">The request URL.</param>
/// <param name="linkProcessors">The link processors.</param>
/// <returns>The link header.</returns>
/// <summary>
/// Adds the content type header from the <see cref="NegotiationContext"/> to the <see cref="Response"/>.
/// </summary>
/// <param name="negotiationContext">The negotiation context.</param>
/// <param name="response">The response.</param>
/// <summary>
/// Adds the negotiated headers from the <see cref="NegotiationContext"/> to the <see cref="Response"/>.
/// </summary>
/// <param name="negotiationContext">The negotiation context.</param>
/// <param name="response">The response.</param>
/// <summary>
/// Sets the status code from the <see cref="NegotiationContext"/> on the <see cref="Response"/>.
/// </summary>
/// <param name="negotiationContext">The negotiation context.</param>
/// <param name="response">The response.</param>
/// <summary>
/// Sets the reason phrase from the <see cref="NegotiationContext"/> on the <see cref="Response"/>.
/// </summary>
/// <param name="negotiationContext">The negotiation context.</param>
/// <param name="response">The response.</param>
/// <summary>
/// Adds the cookies from the <see cref="NegotiationContext"/> to the <see cref="Response"/>.
/// </summary>
/// <param name="negotiationContext">The negotiation context.</param>
/// <param name="response">The response.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\IResponseNegotiator.cs
/// <summary>
/// Creates a response from a given result and context.
/// </summary>
/// <summary>
/// Negotiates the response based on the given result and context.
/// </summary>
/// <param name="routeResult">The route result.</param>
/// <param name="context">The context.</param>
/// <returns>A <see cref="Response"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\IResponseProcessor.cs
/// <summary>
/// Content negotiation response processor
/// </summary>
/// <summary>
/// Gets a set of mappings that map a given extension (such as .json)
/// to a media range that can be sent to the client in a vary header.
/// </summary>
/// <summary>
/// Determines whether the processor can handle a given content type and model.
/// </summary>
/// <param name="requestedMediaRange">Content type requested by the client.</param>
/// <param name="model">The model for the given media range.</param>
/// <param name="context">The nancy context.</param>
/// <returns>A <see cref="ProcessorMatch"/> result that determines the priority of the processor.</returns>
/// <summary>
/// Process the response.
/// </summary>
/// <param name="requestedMediaRange">Content type requested by the client.</param>
/// <param name="model">The model for the given media range.</param>
/// <param name="context">The nancy context.</param>
/// <returns>A <see cref="Response"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\JsonProcessor.cs
/// <summary>
/// Processes the model for json media types and extension.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="JsonProcessor"/> class,
/// with the provided <paramref name="serializers"/>.
/// </summary>
/// <param name="serializers">The serializes that the processor will use to process the request.</param>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
/// <summary>
/// Gets a set of mappings that map a given extension (such as .json)
/// to a media range that can be sent to the client in a vary header.
/// </summary>
/// <summary>
/// Determines whether the processor can handle a given content type and model
/// </summary>
/// <param name="requestedMediaRange">Content type requested by the client</param>
/// <param name="model">The model for the given media range</param>
/// <param name="context">The nancy context</param>
/// <returns>A ProcessorMatch result that determines the priority of the processor</returns>
/// <summary>
/// Process the response
/// </summary>
/// <param name="requestedMediaRange">Content type requested by the client</param>
/// <param name="model">The model for the given media range</param>
/// <param name="context">The nancy context</param>
/// <returns>A response</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\MatchResult.cs
/// <summary>
/// Represents whether a processor has matched/can handle processing the response.
/// Values are of increasing priority.
/// </summary>
/// <summary>
/// No match, nothing to see here, move along
/// </summary>
/// <summary>
/// Will accept anything
/// </summary>
/// <summary>
/// Matched, but in a non-specific way such as a wildcard match or fallback
/// </summary>
/// <summary>
/// Exact specific match
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\MediaRange.cs
/// <summary>
/// Represents a media range from an accept header
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="MediaRange"/> class from a string representation of a media range
/// </summary>
/// <param name="contentType">the content type</param>
/*";
/// <summary>
/// Initializes a new instance of the <see cref="MediaRange"/> class.
/// </summary>
/// <summary>
/// Media range type
/// </summary>
/// <summary>
/// Media range subtype
/// </summary>
/// <summary>
/// Media range parameters
/// </summary>
/// <summary>
/// Gets a value indicating if the media range is the */* wildcard
/* wildcard
/// </summary>
/// <summary>
/// Whether or not a media range matches another, taking into account wildcards
/// </summary>
/// <param name="other">Other media range</param>
/// <returns>True if matching, false if not</returns>
/// <summary>
/// Whether or not a media range matches another, taking into account wildcards and parameters
/// </summary>
/// <param name="other">Other media range</param>
/// <returns>True if matching, false if not</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\MediaRangeParameters.cs
/// <summary>
/// Provides strongly-typed access to media range parameters.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="MediaRangeParameters"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="MediaRangeParameters"/> class.
/// </summary>
/// <param name="parameters">The parameters.</param>
/// <summary>
/// Gets the names of the available parameters.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> containing the names of the parameters.</value>
/// <summary>
/// Gets all the parameters values.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains all the parameters values.</value>
/// <summary>
/// Returns an enumerator that iterates through the collection.
/// </summary>
/// <returns>A <see cref="IEnumerator{T}"/> that can be used to iterate through the collection.</returns>
/// <summary>
/// Whether or not a set of media range parameters matches another, regardless of order
/// </summary>
/// <param name="other">Other media range parameters</param>
/// <returns>True if matching, false if not</returns>
/// <summary>
/// Returns an enumerator that iterates through a collection.
/// </summary>
/// <returns>An <see cref="IEnumerator"/> object that can be used to iterate through the collection.</returns>
/// <summary>
/// Gets the value for the parameter identified by the <paramref name="name"/> parameter.
/// </summary>
/// <param name="name">The name of the parameter to return the value for.</param>
/// <returns>The value for the parameter. If the parameter is not defined then null is returned.</returns>
/// <summary>
/// Creates a MediaRangeParameters collection from a "a=1,b=2" string
/// </summary>
/// <param name="parameters"></param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\MediaType.cs
/// <summary>
/// Represents a media type or subtype in a <see cref="MediaRange"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="MediaType"/> class for the media type part.
/// </summary>
/// <param name="type"></param>
/// <summary>
/// Gets a value indicating whether the media type is a wildcard or not
/// </summary>
/// <value><see langword="true" /> if the media type is a wildcard, otherwise <see langword="false" />.</value>
/// <summary>
/// Matched the media type with another media type.
/// </summary>
/// <param name="other">The media type that should be matched against.</param>
/// <returns><see langword="true" /> if the media types match, otherwise <see langword="false" />.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\NegotiationContext.cs
/// <summary>
/// Context for content negotiation.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NegotiationContext"/> class.
/// </summary>
/*" });
/// <summary>
/// Gets or sets additional cookies to assign to the response.
/// </summary>
/// <value>An <see cref="IList{T}"/> of <see cref="INancyCookie"/> instances.</value>
/// <summary>
/// Gets or sets the default model that will be used if a content type specific model is not specified.
/// </summary>
/// <value>The default model instance.</value>
/// <summary>
/// Gets or sets the additional response headers required.
/// </summary>
/// <value>An <see cref="IDictionary{TKey,TValue}"/> containing the headers.</value>
/// <summary>
/// Gets or sets the model mappings for media ranges.
/// </summary>
/// <value>An <see cref="IDictionary{TKey,TValue}"/> containing the media range model mappings.</value>
/// <summary>
/// The name of the <see cref="INancyModule"/> that is locating a view.
/// </summary>
/// <value>A <see cref="string"/> containing the name of the module.</value>
/// <summary>
/// The module path of the <see cref="INancyModule"/> that is locating a view.
/// </summary>
/// <value>A <see cref="string"/> containing the module path.</value>
/// <summary>
/// Gets or sets allowed media ranges.
/// </summary>
/// <value>A list of the allowed media ranges.</value>
/// <summary>
/// Gets or sets the status code of the response.
/// </summary>
/// <value>A <see cref="HttpStatusCode"/> value.</value>
/// <summary>
/// Gets or sets a text description of the HTTP status code returned to the client.
/// </summary>
/// <value>The HTTP status code description.</value>
/// <summary>
/// Gets or sets the view name if one is required.
/// </summary>
/// <value>The name of the view that should be rendered.</value>
/// <summary>
/// Gets the correct model for the given media range
/// </summary>
/// <param name="mediaRange">The <see cref="MediaRange"/> to get the model for.</param>
/// <returns>The model for the provided <paramref name="mediaRange"/> if it has been mapped, otherwise the <see cref="DefaultModel"/> will be returned.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\Negotiator.cs
// TODO - this perhaps should be an interface, along with the view thing above
// that would then wrap this to give more granular extension point for things like
// AsNegotiated
/// <summary>
/// Initializes a new instance of the <see cref="Negotiator"/> class,
/// with the provided <paramref name="context"/>.
/// </summary>
/// <param name="context">The context that should be negotiated.</param>
/// <summary>
/// Gets the <see cref="NegotiationContext"/> used by the negotiator.
/// </summary>
/// <value>A <see cref="NegotiationContext"/> instance.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\ProcessorMatch.cs
/// <summary>
/// Represents whether a processor has matched / can handle a requested response
/// </summary>
/// <summary>
/// A <see cref="ProcessorMatch"/> with both <see cref="ModelResult"/> and <see cref="RequestedContentTypeResult"/> set to <see cref="MatchResult.NoMatch"/>.
/// </summary>
/// <summary>
/// Gets or sets the match result based on the content type
/// </summary>
/// <summary>
/// Gets or sets the match result based on the model
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\ResponseProcessor.cs
/// <summary>
/// Processes negotiated responses of model type <see cref="Response"/>.
/// </summary>
/// <summary>
/// Gets a set of mappings that map a given extension (such as .json)
/// to a media range that can be sent to the client in a vary header.
/// </summary>
/// <summary>
/// Determines whether the processor can handle a given content type and model.
/// </summary>
/// <param name="requestedMediaRange">Content type requested by the client.</param>
/// <param name="model">The model for the given media range.</param>
/// <param name="context">The nancy context.</param>
/// <returns>A <see cref="ProcessorMatch"/> result that determines the priority of the processor.</returns>
/// <summary>
/// Process the response.
/// </summary>
/// <param name="requestedMediaRange">Content type requested by the client.</param>
/// <param name="model">The model for the given media range.</param>
/// <param name="context">The nancy context.</param>
/// <returns>A <see cref="Response"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\ViewProcessor.cs
/// <summary>
/// Processes the model for view requests.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ViewProcessor"/> class,
/// with the provided <paramref name="viewFactory"/>.
/// </summary>
/// <param name="viewFactory">The view factory that should be used to render views.</param>
/// <summary>
/// Gets a set of mappings that map a given extension (such as .json)
/// to a media range that can be sent to the client in a vary header.
/// </summary>
/// <summary>
/// Determines whether the processor can handle a given content type and model.
/// </summary>
/// <param name="requestedMediaRange">Content type requested by the client.</param>
/// <param name="model">The model for the given media range.</param>
/// <param name="context">The nancy context.</param>
/// <returns>A <see cref="ProcessorMatch"/> result that determines the priority of the processor.</returns>
/// <summary>
/// Process the response.
/// </summary>
/// <param name="requestedMediaRange">Content type requested by the client.</param>
/// <param name="model">The model for the given media range.</param>
/// <param name="context">The nancy context.</param>
/// <returns>A <see cref="Response"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Responses\Negotiation\XmlProcessor.cs
/// <summary>
/// Processes the model for xml media types and extension.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="XmlProcessor"/> class,
/// with the provided <see paramref="serializers"/>.
/// </summary>
/// <param name="serializers">The serializes that the processor will use to process the request.</param>
/// <summary>
/// Gets a set of mappings that map a given extension (such as .json)
/// to a media range that can be sent to the client in a vary header.
/// </summary>
/// <summary>
/// Determines whether the processor can handle a given content type and model.
/// </summary>
/// <param name="requestedMediaRange">Content type requested by the client.</param>
/// <param name="model">The model for the given media range.</param>
/// <param name="context">The nancy context.</param>
/// <returns>A <see cref="ProcessorMatch"/> result that determines the priority of the processor.</returns>
/// <summary>
/// Process the response.
/// </summary>
/// <param name="requestedMediaRange">Content type requested by the client.</param>
/// <param name="model">The model for the given media range.</param>
/// <param name="context">The nancy context.</param>
/// <returns>A <see cref="Response"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\DefaultNancyModuleBuilder.cs
/// <summary>
/// Default implementation for building a full configured <see cref="INancyModule"/> instance.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultNancyModuleBuilder"/> class.
/// </summary>
/// <param name="viewFactory">The <see cref="IViewFactory"/> instance that should be assigned to the module.</param>
/// <param name="responseFormatterFactory">An <see cref="IResponseFormatterFactory"/> instance that should be used to create a response formatter for the module.</param>
/// <param name="modelBinderLocator">A <see cref="IModelBinderLocator"/> instance that should be assigned to the module.</param>
/// <param name="validatorLocator">A <see cref="IModelValidatorLocator"/> instance that should be assigned to the module.</param>
/// <summary>
/// Builds a fully configured <see cref="INancyModule"/> instance, based upon the provided <paramref name="module"/>.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> that should be configured.</param>
/// <param name="context">The current request context.</param>
/// <returns>A fully configured <see cref="INancyModule"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\DefaultRequestDispatcher.cs
/// <summary>
/// Default implementation of a request dispatcher.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultRequestDispatcher"/> class, with
/// the provided <paramref name="routeResolver"/>, <paramref name="responseProcessors"/> and <paramref name="routeInvoker"/>.
/// </summary>
/// <param name="routeResolver"></param>
/// <param name="responseProcessors"></param>
/// <param name="routeInvoker"></param>
/// <param name="negotiator"></param>
/// <summary>
/// Dispatches a requests.
/// </summary>
/// <param name="context">The <see cref="NancyContext"/> for the current request.</param>
/// <param name="cancellationToken">A cancellation token.</param>
// TODO - May need to make this run off context rather than response .. seems a bit icky currently
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\DefaultRouteCacheProvider.cs
/// <summary>
/// It's not safe for a module to take a dependency on the cache (cyclic dependency)
///
/// We provide an IRouteCacheProvider instead - the default implementation uses
/// TinyIoC'd Func based lazy factory.
/// </summary>
/// <summary>
/// Gets the name of the provider.
/// </summary>
/// <value>A <see cref="string"/> containing the name of the provider.</value>
/// <summary>
/// Gets the description of the provider.
/// </summary>
/// <value>A <see cref="string"/> containing the description of the provider.</value>
/// <summary>
/// Gets the object that contains the interactive diagnostics methods.
/// </summary>
/// <value>An instance of the interactive diagnostics object.</value>
/// <summary>
/// Initializes a new instance of the DefaultRouteCacheProvider class.
/// </summary>
/// <param name="routeCacheFactory"></param>
/// <summary>
/// Gets an instance of the route cache.
/// </summary>
/// <returns>An <see cref="IRouteCache"/> instance.</returns>
// ReSharper disable once UnusedMember.Local
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\DefaultRouteDescriptionProvider.cs
/// <summary>
/// Default implementation of the <see cref="IRouteDescriptionProvider"/> interface. Will look for
/// route descriptions in resource files. The resource files should have the same name as the module
/// for which it defines routes.
/// </summary>
/// <summary>
/// Get the description for a route.
/// </summary>
/// <param name="module">The module that the route is defined in.</param>
/// <param name="path">The path of the route that the description should be retrieved for.</param>
/// <returns>A <see cref="string"/> containing the description of the route if it could be found, otherwise <see cref="string.Empty"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\DefaultRouteInvoker.cs
/// <summary>
/// Default route invoker implementation.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultRouteInvoker"/> class.
/// </summary>
/// <param name="negotiator">The response negotiator.</param>
/// <summary>
/// Invokes the specified <paramref name="route"/> with the provided <paramref name="parameters"/>.
/// </summary>
/// <param name="route">The route that should be invoked.</param>
/// <param name="cancellationToken">Cancellation token</param>
/// <param name="parameters">The parameters that the route should be invoked with.</param>
/// <param name="context">The context of the route that is being invoked.</param>
/// <returns>A <see cref="Response"/> instance that represents the result of the invoked route.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\DefaultRoutePatternMatcher.cs
/// <summary>
/// Default implementation of a route pattern matcher.
/// </summary>
/// <summary>
/// Attempts to match a requested path with a route pattern.
/// </summary>
/// <param name="requestedPath">The path that was requested.</param>
/// <param name="routePath">The route pattern that the requested path should be attempted to be matched with.</param>
/// <param name="segments"></param>
/// <param name="context">The <see cref="NancyContext"/> instance for the current request.</param>
/// <returns>An <see cref="IRoutePatternMatchResult"/> instance, containing the outcome of the match.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\DefaultRouteResolver.cs
/// <summary>
/// Default implementation of the <see cref="IRouteResolver"/> interface.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultRouteResolver"/> class, using
/// the provided <paramref name="catalog"/>, <paramref name="moduleBuilder"/>,
/// <paramref name="routeCache"/> and <paramref name="trie"/>.
/// </summary>
/// <param name="catalog">A <see cref="INancyModuleCatalog"/> instance.</param>
/// <param name="moduleBuilder">A <see cref="INancyModuleBuilder"/> instance.</param>
/// <param name="routeCache">A <see cref="IRouteCache"/> instance.</param>
/// <param name="trie">A <see cref="IRouteResolverTrie"/> instance.</param>
/// <summary>
/// Gets the route, and the corresponding parameter dictionary from the URL
/// </summary>
/// <param name="context">Current context</param>
/// <returns>A <see cref="ResolveResult"/> containing the resolved route information.</returns>
// Sort in descending order
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\DefaultRouteSegmentExtractor.cs
/// <summary>
/// Default implementation of the <see cref="IRouteSegmentExtractor"/> interface.
/// </summary>
/// <summary>
/// Extracts the segments from the <paramref name="path"/>;
/// </summary>
/// <param name="path">The path that the segments should be extracted from.</param>
/// <returns>An <see cref="IEnumerable{T}"/>, containing the extracted segments.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\INancyModuleBuilder.cs
/// <summary>
/// Defines the functionality to build a fully configured NancyModule instance.
/// </summary>
/// <summary>
/// Builds a fully configured <see cref="INancyModule"/> instance, based upon the provided <paramref name="module"/>.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> that should be configured.</param>
/// <param name="context">The current request context.</param>
/// <returns>A fully configured <see cref="INancyModule"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\IRequestDispatcher.cs
/// <summary>
/// Functionality for processing an incoming request.
/// </summary>
/// <summary>
/// Dispatches a requests.
/// </summary>
/// <param name="context">The <see cref="NancyContext"/> for the current request.</param>
/// <param name="cancellationToken">Cancellation token</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\IRouteCache.cs
/// <summary>
/// Contains a cache of all routes registered in the system
/// </summary>
/// <summary>
/// Gets a boolean value that indicates of the cache is empty or not.
/// </summary>
/// <returns><see langword="true"/> if the cache is empty, otherwise <see langword="false"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\IRouteCacheProvider.cs
/// <summary>
/// It's not safe for a module to take a dependency on the cache (cyclic dependency)
///
/// We provide an <see cref="IRouteCacheProvider"/> instead.
///
/// It is *not* safe to call GetCache() inside a NancyModule constructor, although that shouldn't be necessary anyway.
/// </summary>
/// <summary>
/// Gets an instance of the route cache.
/// </summary>
/// <returns>An <see cref="IRouteCache"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\IRouteDescriptionProvider.cs
/// <summary>
/// Defines the functionality for retrieving a description for a specific route.
/// </summary>
/// <summary>
/// Get the description for a route.
/// </summary>
/// <param name="module">The module that the route is defined in.</param>
/// <param name="path">The path of the route that the description should be retrieved for.</param>
/// <returns>A <see cref="string"/> containing the description of the route if it could be found, otherwise <see cref="string.Empty"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\IRouteInvoker.cs
/// <summary>
/// Defines the functionality for invoking a <see cref="Route"/> and returning a <see cref="Response"/>
/// </summary>
/// <summary>
/// Invokes the specified <paramref name="route"/> with the provided <paramref name="parameters"/>.
/// </summary>
/// <param name="route">The route that should be invoked.</param>
/// <param name="cancellationToken">Cancellation token</param>
/// <param name="parameters">The parameters that the route should be invoked with.</param>
/// <param name="context">The context of the route that is being invoked.</param>
/// <returns>A <see cref="Response"/> instance that represents the result of the invoked route.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\IRouteMetadataProvider.cs
/// <summary>
/// Defines the functionality for retrieving metadata for routes.
/// </summary>
/// <summary>
/// Gets the <see cref="Type"/> of the metadata that is created by the provider.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> instance that the route is declared in.</param>
/// <param name="routeDescription">A <see cref="RouteDescription"/> for the route.</param>
/// <returns>A <see cref="Type"/> instance, or <see langword="null" /> if nothing is found.</returns>
/// <summary>
/// Gets the metadata for the provided route.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> instance that the route is declared in.</param>
/// <param name="routeDescription">A <see cref="RouteDescription"/> for the route.</param>
/// <returns>An object representing the metadata for the given route, or <see langword="null" /> if nothing is found.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\IRoutePatternMatcher.cs
/// <summary>
/// Defined the functionality that is required by a route pattern matcher.
/// </summary>
/// <remarks>Implement this interface if you want to support a custom route syntax.</remarks>
/// <summary>
/// Attempts to match a requested path with a route pattern.
/// </summary>
/// <param name="requestedPath">The path that was requested.</param>
/// <param name="routePath">The route pattern that the requested path should be attempted to be matched with.</param>
/// <param name="segments"> </param>
/// <param name="context">The <see cref="NancyContext"/> instance for the current request.</param>
/// <returns>An <see cref="IRoutePatternMatchResult"/> instance, containing the outcome of the match.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\IRoutePatternMatchResult.cs
/// <summary>
/// Defines the functionality that is required by a route pattern match result.
/// </summary>
/// <summary>
/// Gets the <see cref="NancyContext"/> that was active when the result was produced.
/// </summary>
/// <value>A <see cref="NancyContext"/> instance.</value>
/// <summary>
/// Gets a value indicating whether or not a match was made.
/// </summary>
/// <value><see langword="true"/> if a match was made; otherwise <see langword="false"/>.</value>
/// <summary>
/// The parameters that could be captured in the route.
/// </summary>
/// <value>A <see cref="DynamicDictionary"/> instance containing the captured parameters and values.</value>
/// <remarks>Should be empty if <see cref="IsMatch"/> is <see langword="false"/>.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\IRouteResolver.cs
/// <summary>
/// Returns a route that matches the request
/// </summary>
/// <summary>
/// Gets the route, and the corresponding parameter dictionary from the URL
/// </summary>
/// <param name="context">Current context</param>
/// <returns>A <see cref="ResolveResult"/> containing the resolved route information.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\IRouteSegmentExtractor.cs
/// <summary>
/// Defines the functionality for extracting the individual segments from a route path.
/// </summary>
/// <summary>
/// Extracts the segments from the <paramref name="path"/>;
/// </summary>
/// <param name="path">The path that the segments should be extracted from.</param>
/// <returns>An <see cref="IEnumerable{T}"/>, containing the extracted segments.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\MethodNotAllowedRoute.cs
/// <summary>
/// Route that is returned when the path could be matched but it was for the wrong request method.
/// </summary>
/// <remarks>This is equal to sending back the 405 HTTP status code.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="MethodNotAllowedRoute"/> type, for the
/// specified <paramref name="path"/>, <paramref name="method"/> and <paramref name="allowedMethods"/>.
/// </summary>
/// <param name="path">The path of the route.</param>
/// <param name="method">The HTTP method of the route.</param>
/// <param name="allowedMethods">The HTTP methods that can be used to invoke the route.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\NotFoundRoute.cs
/// <summary>
/// Route that is returned when the path could not be matched.
/// </summary>
/// <remarks>This is equal to sending back the 404 HTTP status code.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="NotFoundRoute"/> type, for the
/// specified <paramref name="path"/> and <paramref name="method"/>.
/// </summary>
/// <param name="method">The HTTP method of the route.</param>
/// <param name="path">The path of the route.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\OptionsRoute.cs
/// <summary>
/// Route that is returned when the path could be matched but, the method was OPTIONS and there was no user defined handler for OPTIONS.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\ParameterSegmentInformation.cs
/// <summary>
/// Information about a segment parameter.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ParameterSegmentInformation"/> class.
/// </summary>
/// <param name="name">The name of the parameter</param>
/// <param name="defaultValue">The default value, if any, of the parameter.</param>
/// <param name="isOptional"><see langword="true"/> if the parameter is optional, otherwise <see langword="false" />.</param>
/// <summary>
/// Gets the default value for the parameter.
/// </summary>
/// <summary>
/// Gets the full name of the segment.
/// </summary>
/// <remarks>Returns a string in one of the formats: {name}, {name?}, {name?defaultValue} depending on the kind of parameter.</remarks>
/// <summary>
/// Gets whether or not the parameter is optional.
/// </summary>
/// <value><see langword="true"/> if the parameter is optional, otherwise <see langword="false" />.</value>
/// <summary>
/// Gets the name of the parameter.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\ResolveResult.cs
/// <summary>
/// A class representing a route resolution result
/// </summary>
/// <summary>
/// Gets or sets the route
/// </summary>
/// <summary>
/// Gets or sets the captured parameters
/// </summary>
/// <summary>
/// Gets or sets the before module pipeline
/// </summary>
/// <summary>
/// Gets or sets the after module pipeline
/// </summary>
/// <summary>
/// Gets or sets the on error module pipeline
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Route.cs
/// <summary>
/// Stores information about a declared route in Nancy.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Route"/> type, with the specified <see cref="RouteDescription"/>.
/// </summary>
/// <param name="description"></param>
/// <param name="action">The action that should take place when the route is invoked.</param>
/// <summary>
/// Initializes a new instance of the <see cref="Route"/> type, with the specified definition.
/// </summary>
/// <param name="name">Route name</param>
/// <param name="method">The HTTP method that the route is declared for.</param>
/// <param name="path">The path that the route is declared for.</param>
/// <param name="condition">A condition that needs to be satisfied inorder for the route to be eligible for invocation.</param>
/// <param name="action">The action that should take place when the route is invoked.</param>
/// <summary>
/// Initializes a new instance of the <see cref="Route"/> type, with the specified definition.
/// </summary>
/// <param name="method">The HTTP method that the route is declared for.</param>
/// <param name="path">The path that the route is declared for.</param>
/// <param name="condition">A condition that needs to be satisfied inorder for the route to be eligiable for invocation.</param>
/// <param name="action">The action that should take place when the route is invoked.</param>
/// <summary>
/// Gets or sets the action that should take place when the route is invoked.
/// </summary>
/// <value>A <see cref="Func{T,K}"/> that represents the action of the route.</value>
/// <summary>
/// Gets the description of the route.
/// </summary>
/// <value>A <see cref="RouteDescription"/> instance.</value>
/// <summary>
/// Invokes the route with the provided <paramref name="parameters"/>.
/// </summary>
/// <param name="parameters">A <see cref="DynamicDictionary"/> that contains the parameters that should be passed to the route.</param>
/// <param name="cancellationToken">Cancellation token</param>
/// <returns>A (hot) task of <see cref="Response"/> instance.</returns>
/// <summary>
/// Creates a route from a sync delegate signature
/// </summary>
/// <param name="description"></param>
/// <param name="syncFunc">The action that should take place when the route is invoked.</param>
/// <returns>A Route instance</returns>
/// <summary>
/// Creates a route from a sync delegate signature
/// </summary>
/// <param name="method">The HTTP method that the route is declared for.</param>
/// <param name="path">The path that the route is declared for.</param>
/// <param name="condition">A condition that needs to be satisfied inorder for the route to be eligiable for invocation.</param>
/// <param name="syncFunc">The action that should take place when the route is invoked.</param>
/// <returns>A Route instance</returns>
/// <summary>
/// Creates a route from a sync delegate signature
/// </summary>
/// <param name="name">Route name</param>
/// <param name="method">The HTTP method that the route is declared for.</param>
/// <param name="path">The path that the route is declared for.</param>
/// <param name="condition">A condition that needs to be satisfied inorder for the route to be eligible for invocation.</param>
/// <param name="syncFunc">The action that should take place when the route is invoked.</param>
/// <returns>A Route instance</returns>
/// <summary>
/// Wraps a sync delegate in a delegate that returns a task
/// </summary>
/// <param name="syncFunc">Sync delegate</param>
/// <returns>Task wrapped version</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\RouteCache.cs
/// <summary>
/// Caches information about all the available routes that was discovered by the bootstrapper.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RouteCache"/> class.
/// </summary>
/// <param name="moduleCatalog">The <see cref="INancyModuleCatalog"/> that should be used by the cache.</param>
/// <param name="contextFactory">The <see cref="INancyContextFactory"/> that should be used to create a context instance.</param>
/// <param name="routeSegmentExtractor"> </param>
/// <param name="cultureService"></param>
/// <param name="routeMetadataProviders"></param>
/// <param name="routeDescriptionProvider"></param>
/// <summary>
/// Gets a boolean value that indicates of the cache is empty or not.
/// </summary>
/// <returns><see langword="true"/> if the cache is empty, otherwise <see langword="false"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\RouteCacheExtensions.cs
/// <summary>
/// Contains extensions for the <see cref="IRouteCache"/> type.
/// </summary>
/// <summary>
/// Retrieves metadata for all declared routes.
/// </summary>
/// <typeparam name="TMetadata">The type of the metadata to retrieve.</typeparam>
/// <param name="cache">The <see cref="IRouteCache"/> to retrieve the metadata.</param>
/// <returns>An <see cref="IEnumerable{T}"/> containing instances of the <typeparamref name="TMetadata"/> type.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\RouteDescription.cs
/// <summary>
/// Represents the various parts of a route lambda.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RouteDescription"/> class.
/// </summary>
/// <param name="name">Route name</param>
/// <param name="method">The request method of the route.</param>
/// <param name="path">The path that the route will be invoked for.</param>
/// <param name="condition">The condition that has to be fulfilled for the route to be a valid match.</param>
/// <summary>
/// The name of the route
/// </summary>
/// <summary>
/// The condition that has to be fulfilled inorder for the route to be a valid match.
/// </summary>
/// <value>A function that evaluates the condition when a <see cref="NancyContext"/> instance is passed in.</value>
/// <summary>
/// The description of what the route is for.
/// </summary>
/// <value>A <see cref="string"/> containing the description of the route.</value>
/// <summary>
/// Gets or sets the metadata information for a route.
/// </summary>
/// <value>A <see cref="RouteMetadata"/> instance.</value>
/// <summary>
/// Gets the method of the route.
/// </summary>
/// <value>A <see cref="string"/> containing the method of the route.</value>
/// <summary>
/// Gets the path that the route will be invoked for.
/// </summary>
/// <value>A <see cref="string"/> containing the path of the route.</value>
/// <summary>
/// Gets or set the segments, for the route, that was returned by the <see cref="IRouteSegmentExtractor"/>.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/>, containing the segments for the route.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\RouteMetadata.cs
/// <summary>
/// Stores metadata created by <see cref="IRouteMetadataProvider"/> instances.
/// </summary>
/// <summary>
/// Creates a new instance of the <see cref="RouteMetadata"/> class.
/// </summary>
/// <param name="metadata">An <see cref="IDictionary{TKey,TValue}"/> containing the metadata, organised by the type that it is stored in.</param>
/// <summary>
/// Gets the raw metadata <see cref="IDictionary{TKey,TValue}"/>.
/// </summary>
/// <value>An <see cref="IDictionary{TKey,TValue}"/> instance.</value>
/// <summary>
/// Gets a boolean that indicates if the specific type of metadata is stored.
/// </summary>
/// <typeparam name="TMetadata">The type of the metadata to check for.</typeparam>
/// <returns><see langword="true"/> if metadata, of the requested type is stored, otherwise <see langword="false"/>.</returns>
/// <summary>
/// Retrieves metadata of the provided type.
/// </summary>
/// <typeparam name="TMetadata">The type of the metadata to retrieve.</typeparam>
/// <returns>The metadata instance if available, otherwise <see langword="null"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\RouteMetadataProvider.cs
/// <summary>
/// Defines the functionality for retrieving metadata for routes.
/// </summary>
/// <typeparam name="TMetadata">The metadata type.</typeparam>
/// <summary>
/// Gets the <see cref="Type"/> of the metadata that is created by the provider.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> instance that the route is declared in.</param>
/// <param name="routeDescription">A <see cref="RouteDescription"/> for the route.</param>
/// <returns>A <see cref="Type"/> instance, or null if none are found.</returns>
/// <summary>
/// Gets the metadata for the provided route.
/// </summary>
/// <param name="module">The <see cref="INancyModule" /> instance that the route is declared in.</param>
/// <param name="routeDescription">A <see cref="RouteDescription" /> for the route.</param>
/// <returns>An instance of <typeparamref name="TMetadata"/>.</returns>
/// <summary>
/// Gets the metadata for the provided route.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> instance that the route is declared in.</param>
/// <param name="routeDescription">A <see cref="RouteDescription"/> for the route.</param>
/// <returns>An instance of <typeparamref name="TMetadata"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\RoutePatternMatchResult.cs
/// <summary>
/// The default implementation of a route pattern matching result.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RoutePatternMatchResult"/> class.
/// </summary>
/// <param name="isMatch">A <see cref="bool"/> value indicating if the result was a match or not.</param>
/// <param name="parameters">A <see cref="DynamicDictionary"/> instance containing the parameters and values that was captured in the match.</param>
/// <param name="context">The <see cref="NancyContext"/> instance of the current request.</param>
/// <summary>
/// Gets the <see cref="NancyContext"/> that was active when the result was produced.
/// </summary>
/// <value>A <see cref="NancyContext"/> instance.</value>
/// <summary>
/// Gets a value indicating whether or not a match was made.
/// </summary>
/// <value><see langword="true"/> if a match was made; otherwise <see langword="false"/>.</value>
/// <summary>
/// The parameters that could be captured in the route.
/// </summary>
/// <value>A <see cref="DynamicDictionary"/> instance containing the captured parameters and values.</value>
/// <remarks>Should be empty if <see cref="IRoutePatternMatchResult.IsMatch"/> is <see langword="false"/>.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\AlphaRouteSegmentConstraint.cs
/// <summary>
/// Constraint for alphabetical route segments.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\BoolRouteSegmentConstraint.cs
/// <summary>
/// Constraint for <see cref="bool"/> route segments.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\CustomDateTimeRouteSegmentConstraint.cs
/// <summary>
/// Constraint for <see cref="DateTime"/> route segments with custom format.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\DateTimeRouteSegmentConstraint.cs
/// <summary>
/// Constraint for <see cref="DateTime"/> route segments.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\DecimalRouteSegmentConstraint.cs
/// <summary>
/// Constraint for <see cref="decimal"/> route segments.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\GuidRouteSegmentConstraint.cs
/// <summary>
/// Constraint for <see cref="Guid"/> route segments.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\IntRouteSegmentConstraint.cs
/// <summary>
/// Constraint for <see cref="int"/> route segments.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\IRouteSegmentConstraint.cs
/// <summary>
/// Defines the functionality to constrain route matching.
/// </summary>
/// <summary>
/// Determines whether the given constraint should be matched.
/// </summary>
/// <param name="constraint">The route constraint.</param>
/// <returns><c>true</c> if the constraint matches, <c>false</c> otherwise.</returns>
/// <summary>
/// Matches the segment and parameter name against the constraint.
/// </summary>
/// <param name="constraint">The constraint.</param>
/// <param name="segment">The segment.</param>
/// <param name="parameterName">Name of the parameter.</param>
/// <returns>A <see cref="SegmentMatch"/> containing information about the captured parameters.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\LengthRouteSegmentConstraint.cs
/// <summary>
/// Constraint for route segments with a specific length.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\LongRouteSegmentConstraint.cs
/// <summary>
/// Constraint for <see cref="long"/> route segments.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\MaxLengthRouteSegmentConstraint.cs
/// <summary>
/// Constraint for route segments with a maximum length.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\MaxRouteSegmentConstraint.cs
/// <summary>
/// Constraint for <see cref="int"/> route segments with a maximum value.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\MinLengthRouteSegmentConstraint.cs
/// <summary>
/// Constraint for route segments with a minimum length.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\MinRouteSegmentConstraint.cs
/// <summary>
/// Constraint for <see cref="int"/> route segments with a minimum length.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\ParameterizedRouteSegmentConstraintBase.cs
/// <summary>
/// Convenience class for implementing a route segment constraint that expects parameters.
/// </summary>
/// <typeparam name="T">The type of parameter to capture.</typeparam>
/// <summary>
/// Tries to parse an integer using <see cref="CultureInfo.InvariantCulture"/>.
/// </summary>
/// <param name="string">The string value.</param>
/// <param name="result">The resulting integer.</param>
/// <returns><c>true</c> if the parsing was successful, <c>false</c> otherwise.</returns>
/// <summary>
/// Tries to match the given segment and parameters against the constraint.
/// </summary>
/// <param name="segment">The segment to match.</param>
/// <param name="parameters">The parameters to match.</param>
/// <param name="matchedValue">The matched value.</param>
/// <returns><c>true</c> if the segment and parameters matches the constraint, <c>false</c> otherwise.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\RangeRouteSegmentConstraint.cs
/// <summary>
/// Constraint for <see cref="int"/> route segments with value within a specified range.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\RouteSegmentConstraintBase.cs
/// <summary>
/// Convenience class for implementing a route segment constraint.
/// </summary>
/// <typeparam name="T">The type of parameter to capture.</typeparam>
/// <summary>
/// Gets the name of the constraint, i.e. "int".
/// </summary>
/// <value>The constraint's name.</value>
/// <summary>
/// Tries to match the given segment against the constraint.
/// </summary>
/// <param name="constraint">The constraint.</param>
/// <param name="segment">The segment to match.</param>
/// <param name="matchedValue">The matched value.</param>
/// <returns><c>true</c> if the segment matches the constraint, <c>false</c> otherwise.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Constraints\VersionRouteSegmentConstraint.cs
/// <summary>
/// Constraint for version route segments.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\IRouteResolverTrie.cs
/// <summary>
/// Trie structure for resolving routes
/// </summary>
/// <summary>
/// Build the trie from the route cache
/// </summary>
/// <param name="cache">The route cache</param>
/// <summary>
/// Get all matches for the given method and path
/// </summary>
/// <param name="method">HTTP method</param>
/// <param name="path">Requested path</param>
/// <param name="context">Current Nancy context</param>
/// <returns>An array of <see cref="MatchResult"/> elements</returns>
/// <summary>
/// Get all method options for the given path
/// </summary>
/// <param name="path">Requested path</param>
/// <param name="context">Current Nancy context</param>
/// <returns>A collection of strings, each representing an allowed method</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\ITrieNodeFactory.cs
/// <summary>
/// Factory for creating trie nodes from route definition segments
/// </summary>
/// <summary>
/// Gets the correct Trie node type for the given segment
/// </summary>
/// <param name="parent">Parent node</param>
/// <param name="segment">Segment</param>
/// <returns>Corresponding TrieNode instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\MatchResult.cs
/// <summary>
/// Match result for a matched route
/// </summary>
/// <summary>
/// Gets or sets the captured parameters
/// </summary>
/// <summary>
/// Gets the "no match" <see cref="MatchResult"/>
/// </summary>
/// <summary>
/// Gets the "no matches" <see cref="MatchResult"/> collection
/// </summary>
/// <summary>
/// Compares the current object with another object of the same type.
/// </summary>
/// <returns>
/// A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
/// </returns>
/// <param name="other">An object to compare with this object.</param>
// Length of the route takes precedence over score
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\NodeData.cs
/// <summary>
/// Represents a route that ends at a particular node.
/// We store/calculate as much as we can at build time to save
/// time during route matching.
/// </summary>
/// <summary>
/// Gets or sets the module type from the matching module
/// </summary>
/// <summary>
/// Gets or sets the route method
/// </summary>
/// <summary>
/// Gets or sets the index in the module routing table
/// </summary>
/// <summary>
/// Gets or sets the number of segments in the route
/// </summary>
/// <summary>
/// Gets or sets the route score
/// </summary>
/// <summary>
/// Gets or sets the route condition delegate
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\NodeDataExtensions.cs
/// <summary>
/// Helpers methods for NodeData
/// </summary>
/// <summary>
/// Converts a <see cref="NodeData"/> instance into a <see cref="MatchResult"/>
/// </summary>
/// <param name="data">Node data</param>
/// <param name="parameters">Captured parameters</param>
/// <returns>A <see cref="MatchResult"/> instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\RouteResolverTrie.cs
/// <summary>
/// The default route resolution trie
/// </summary>
/// <summary>
/// Build the trie from the route cache
/// </summary>
/// <param name="cache">The route cache</param>
/// <summary>
/// Get all matches for the given method and path
/// </summary>
/// <param name="method">HTTP method</param>
/// <param name="path">Requested path</param>
/// <param name="context">Current Nancy context</param>
/// <returns>An array of <see cref="MatchResult"/> elements</returns>
// TODO -concurrent if allowing updates?
/// <summary>
/// Get all method options for the given path
/// </summary>
/// <param name="path">Requested path</param>
/// <param name="context">Current Nancy context</param>
/// <returns>A collection of strings, each representing an allowed method</returns>
/// <summary>
/// Returns a string that represents the current object.
/// </summary>
/// <returns>
/// A string that represents the current object.
/// </returns>
/// <filterpriority>2</filterpriority>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\SegmentMatch.cs
/// <summary>
/// A segment match result
/// </summary>
/// <summary>
/// Gets a value indicating whether the match was successful or not
/// </summary>
/// <summary>
/// Gets a <see cref="SegmentMatch"/> representing "no match"
/// </summary>
/// <summary>
/// Gets the captured parameters from the match, if the match was successful
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\TrieNodeFactory.cs
/// <summary>
/// Factory for creating the correct type of TrieNode
/// </summary>
/// <summary>
/// Gets the correct Trie node type for the given segment
/// </summary>
/// <param name="parent">Parent node</param>
/// <param name="segment">Segment</param>
/// <returns>TrieNode instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\Nodes\CaptureNode.cs
/// <summary>
/// A node for standard captures e.g. {foo}
/// </summary>
/// <summary>
/// Score for this node
/// </summary>
/// <summary>
/// Matches the segment for a requested route
/// </summary>
/// <param name="segment">Segment string</param>
/// <returns>A <see cref="SegmentMatch"/> instance representing the result of the match</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\Nodes\CaptureNodeWithConstraint.cs
/// <summary>
/// A node for constraint captures e.g. {foo:alpha}, {foo:datetime}
/// </summary>
/// <summary>
/// Score for this node
/// </summary>
/// <summary>
/// Matches the segment for a requested route
/// </summary>
/// <param name="segment">Segment string</param>
/// <returns>A <see cref="SegmentMatch"/> instance representing the result of the match</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\Nodes\CaptureNodeWithDefaultValue.cs
/// <summary>
/// A capture node with a default value e.g. {foo?default}
/// </summary>
/// <summary>
/// Score for this node
/// </summary>
/// <summary>
/// Add a new route to the trie
/// Adds itself as a normal capture node, but also sets a default capture
/// on the parent and adds this node's children as children of the parent
/// too (so it can effectively be "skipped" during matching)
/// </summary>
/// <param name="segments">The segments of the route definition</param>
/// <param name="currentIndex">Current index in the segments array</param>
/// <param name="currentScore">Current score for this route</param>
/// <param name="nodeCount">Number of nodes added for this route</param>
/// <param name="moduleType">The module key the route comes from</param>
/// <param name="routeIndex">The route index in the module</param>
/// <param name="routeDescription">The route description</param>
// Keep the same index, reduce the node count and the score
/// <summary>
/// Matches the segment for a requested route
/// </summary>
/// <param name="segment">Segment string</param>
/// <returns>A <see cref="SegmentMatch"/> instance representing the result of the match</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\Nodes\CaptureNodeWithMultipleParameters.cs
/// <summary>
/// A node multiple standard captures combined with a literal e.g. {id}.png.{thing}.{otherthing}
/// </summary>
/// <summary>
/// Captures parameters within segments that contain literals.
///     i.e:
///         /{file}.{name}
///         /{file}.html
///         /{major}.{minor}.{revision}B{build}
/// </summary>
/// <param name="parent">The parent node</param>
/// <param name="segment">The segment to match upon</param>
/// <param name="nodeFactory">The factory</param>
/// <param name="routeSegmentConstraints"></param>
/// <summary>
/// Determines whether this TrieNode should be used for the given segment.
/// </summary>
/// <param name="segment">The route segment</param>
/// <returns>a boolean</returns>
/// <summary>
/// Score for this node
/// </summary>
/// <summary>
/// Matches the segment for a requested route
/// </summary>
/// <param name="segment">Segment string</param>
/// <returns>A <see cref="SegmentMatch"/> instance representing the result of the match</returns>
/// <summary>
/// Extracts the parameter name and the literals for the segment
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\Nodes\GreedyCaptureNode.cs
/// <summary>
/// A greedy capture node e.g. {greedy*}
/// e.g. /foo/bar/{greedy*} - this node will be hit for /foo/bar/[anything that doesn't match another route], but
/// not for just /foo/bar
/// e.g. /foo/{greedy*}/bar - this node will be hit for /foo/[anything that doesn't match another route]/bar
/// </summary>
/// <summary>
/// Score for this node
/// </summary>
/// <summary>
/// Gets all matches for a given requested route
/// Overridden to handle greedy capturing
/// </summary>
/// <param name="segments">Requested route segments</param>
/// <param name="currentIndex">Current index in the route segments</param>
/// <param name="capturedParameters">Currently captured parameters</param>
/// <param name="context">Current Nancy context</param>
/// <returns>A collection of <see cref="MatchResult"/> objects</returns>
/// <summary>
/// Matches the segment for a requested route
/// Not-required or called for this node type
/// </summary>
/// <param name="segment">Segment string</param>
/// <returns>A <see cref="SegmentMatch"/> instance representing the result of the match</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\Nodes\GreedyRegExCaptureNode.cs
/// <summary>
/// A greedy regular expression capture node e.g. ^(?&lt;id>\d{0,100})$
/// For use on an entire route path, regular expression must be surrounded by ^( )$
/// e.g. @"^(?:(?&lt;id>videos/\d{1,10})(?:/{0,1}(?&lt;slug>.*)))$"
/// This will match for a Url like /videos/123/some-random-slug
/// and capture 'videos/123' and 'some-random-slug'
/// </summary>
/// <summary>
/// Score for this node
/// </summary>
/// <summary>
/// Gets all matches for a given requested route
/// Overridden to handle greedy capturing
/// </summary>
/// <param name="segments">Requested route segments</param>
/// <param name="currentIndex">Current index in the route segments</param>
/// <param name="capturedParameters">Currently captured parameters</param>
/// <param name="context">Current Nancy context</param>
/// <returns>A collection of <see cref="MatchResult"/> objects</returns>
/// <summary>
/// Matches the segment for a requested route
/// Not-required or called for this node type
/// </summary>
/// <param name="segment">Segment string</param>
/// <returns>A <see cref="SegmentMatch"/> instance representing the result of the match</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\Nodes\LiteralNode.cs
/// <summary>
/// Literal string node e.g. goo
/// </summary>
/// <summary>
/// Score for this node
/// </summary>
/// <summary>
/// Matches the segment for a requested route
/// </summary>
/// <param name="segment">Segment string</param>
/// <returns>A <see cref="SegmentMatch"/> instance representing the result of the match</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\Nodes\OptionalCaptureNode.cs
/// <summary>
/// An optional capture node e.g. {foo?}
/// </summary>
/// <summary>
/// Score for this node
/// </summary>
/// <summary>
/// Add a new route to the trie
/// Adds itself as a normal capture node, but also adds this node's
/// children as children of the parent too
/// (so it can effectively be "skipped" during matching)
/// </summary>
/// <param name="segments">The segments of the route definition</param>
/// <param name="currentIndex">Current index in the segments array</param>
/// <param name="currentScore">Current score for this route</param>
/// <param name="nodeCount">Number of nodes added for this route</param>
/// <param name="moduleType">The module key the route comes from</param>
/// <param name="routeIndex">The route index in the module</param>
/// <param name="routeDescription">The route description</param>
// Keep the same index, reduce the node count and the score
/// <summary>
/// Matches the segment for a requested route
/// </summary>
/// <param name="segment">Segment string</param>
/// <returns>A <see cref="SegmentMatch"/> instance representing the result of the match</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\Nodes\RegExNode.cs
/// <summary>
/// A regular expression capture node e.g. (?&lt;foo>\d{2,4})
/// </summary>
/// <summary>
/// Score for this node
/// </summary>
/// <summary>
/// Matches the segment for a requested route
/// </summary>
/// <param name="segment">Segment string</param>
/// <returns>A <see cref="SegmentMatch"/> instance representing the result of the match</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\Nodes\RootNode.cs
/// <summary>
/// Root node of a trie
/// </summary>
/// <summary>
/// Score for this node
/// </summary>
/// <summary>
/// Gets all matches for a given requested route
/// </summary>
/// <param name="segments">Requested route segments</param>
/// <param name="currentIndex">Current index in the route segments</param>
/// <param name="capturedParameters">Currently captured parameters</param>
/// <param name="context">Current Nancy context</param>
/// <returns>A collection of <see cref="MatchResult"/> objects</returns>
/// <summary>
/// Matches the segment for a requested route
/// </summary>
/// <param name="segment">Segment string</param>
/// <returns>A <see cref="SegmentMatch"/> instance representing the result of the match</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Routing\Trie\Nodes\TrieNode.cs
/// <summary>
/// A base class representing a node in the route trie
/// </summary>
/// <summary>
/// Gets or sets the parent node
/// </summary>
/// <summary>
/// Gets or sets the segment from the route definition that this node represents
/// </summary>
/// <summary>
/// Gets or sets the children of this node
/// </summary>
/// <summary>
/// Gets or sets the node data stored at this node, which will be converted
/// into the <see cref="MatchResult"/> if a match is found
/// </summary>
/// <summary>
/// Additional parameters to set that can be determined at trie build time
/// </summary>
/// <summary>
/// Score for this node
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="TrieNode"/> class
/// </summary>
/// <param name="parent">Parent node</param>
/// <param name="segment">Segment of the route definition</param>
/// <param name="nodeFactory">Factory for creating new nodes</param>
/// <summary>
/// Add a new route to the trie
/// </summary>
/// <param name="segments">The segments of the route definition</param>
/// <param name="moduleType">The module key the route comes from</param>
/// <param name="routeIndex">The route index in the module</param>
/// <param name="routeDescription">The route description</param>
/// <summary>
/// Add a new route to the trie
/// </summary>
/// <param name="segments">The segments of the route definition</param>
/// <param name="currentIndex">Current index in the segments array</param>
/// <param name="currentScore">Current score for this route</param>
/// <param name="nodeCount">Number of nodes added for this route</param>
/// <param name="moduleType">The module key the route comes from</param>
/// <param name="routeIndex">The route index in the module</param>
/// <param name="routeDescription">The route description</param>
/// <summary>
/// Gets all matches for a given requested route
/// </summary>
/// <param name="segments">Requested route segments</param>
/// <param name="context">Current Nancy context</param>
/// <returns>A collection of <see cref="MatchResult"/> objects</returns>
/// <summary>
/// Gets all matches for a given requested route
/// </summary>
/// <param name="segments">Requested route segments</param>
/// <param name="currentIndex">Current index in the route segments</param>
/// <param name="capturedParameters">Currently captured parameters</param>
/// <param name="context">Current Nancy context</param>
/// <returns>A collection of <see cref="MatchResult"/> objects</returns>
/// <summary>
/// Gets a string representation of all routes
/// </summary>
/// <returns>Collection of strings, each representing a route</returns>
/// <summary>
/// Build the node data that will be used to create the <see cref="MatchResult"/>
/// We calculate/store as much as possible at build time to reduce match time.
/// </summary>
/// <param name="nodeCount">Number of nodes in the route</param>
/// <param name="score">Score for the route</param>
/// <param name="moduleType">The module key the route comes from</param>
/// <param name="routeIndex">The route index in the module</param>
/// <param name="routeDescription">The route description</param>
/// <returns>A NodeData instance</returns>
/// <summary>
/// Returns whether we are at the end of the segments
/// </summary>
/// <param name="segments">Route segments</param>
/// <param name="currentIndex">Current index</param>
/// <returns>True if no more segments left, false otherwise</returns>
/// <summary>
/// Build the results collection from the captured parameters if
/// this node is the end result
/// </summary>
/// <param name="capturedParameters">Currently captured parameters</param>
/// <param name="localCaptures">Parameters captured by the local matching</param>
/// <returns>Array of <see cref="MatchResult"/> objects corresponding to each set of <see cref="NodeData"/> stored at this node</returns>
/// <summary>
/// Gets all the matches from this node's children
/// </summary>
/// <param name="segments">Requested route segments</param>
/// <param name="currentIndex">Current index</param>
/// <param name="capturedParameters">Currently captured parameters</param>
/// <param name="localCaptures">Parameters captured by the local matching</param>
/// <param name="context">Current Nancy context</param>
/// <returns>Collection of <see cref="MatchResult"/> objects</returns>
/// <summary>
/// Matches the segment for a requested route
/// </summary>
/// <param name="segment">Segment string</param>
/// <returns>A <see cref="SegmentMatch"/> instance representing the result of the match</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\ClaimsPrincipalExtensions.cs
/// <summary>
/// Extension methods for working with IUserIdentity.
/// </summary>
/// <summary>
/// Tests if the user is authenticated.
/// </summary>
/// <param name="user">User to be verified</param>
/// <returns>True if the user is authenticated, false otherwise</returns>
/// <summary>
/// Tests if the user has all of the required claims.
/// </summary>
/// <param name="user">User to be verified</param>
/// <param name="requiredClaims">Claims the user needs to have</param>
/// <returns>True if the user has all of the required claims, false otherwise</returns>
/// <summary>
/// Tests if the user has at least one of the required claims.
/// </summary>
/// <param name="user">User to be verified</param>
/// <param name="requiredClaims">Claims the user needs to have at least one of</param>
/// <returns>True if the user has at least one of the required claims, false otherwise</returns>
/// <summary>
/// Tests if the user has claims that satisfy the supplied validation function.
/// </summary>
/// <param name="user">User to be verified</param>
/// <param name="isValid">Validation function to be called with the authenticated
/// users claims</param>
/// <returns>True if the user does pass the supplied validation function, false otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\Csrf.cs
/// <summary>
/// Csrf protection methods
/// </summary>
/// <summary>
/// Enables Csrf token generation.
/// This is disabled by default.
/// </summary>
/// <param name="pipelines">Application pipelines</param>
/// <summary>
/// Disable csrf token generation
/// </summary>
/// <param name="pipelines">Application pipelines</param>
/// <summary>
/// Creates a new csrf token for this response with an optional salt.
/// Only necessary if a particular route requires a new token for each request.
/// </summary>
/// <param name="module">Nancy module</param>
/// <returns></returns>
/// <summary>
/// Creates a new csrf token with an optional salt.
/// Does not store the token in context.
/// </summary>
/// <returns>The generated token</returns>
/// <summary>
/// Validate that the incoming request has valid CSRF tokens.
/// Throws <see cref="CsrfValidationException"/> if validation fails.
/// </summary>
/// <param name="module">Module object</param>
/// <param name="validityPeriod">Optional validity period before it times out</param>
/// <exception cref="CsrfValidationException">If validation fails</exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\CsrfApplicationStartup.cs
/// <summary>
/// Wires up the CSRF (anti-forgery token) support at application startup.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="CsrfApplicationStartup"/> class, using the
/// provided <paramref name="cryptographyConfiguration"/>, <paramref name="objectSerializer"/> and <paramref name="tokenValidator"/>.
/// </summary>
/// <param name="cryptographyConfiguration">The cryptographic configuration to use.</param>
/// <param name="objectSerializer">The serializer that should be used.</param>
/// <param name="tokenValidator">The token validator that should be used.</param>
/// <summary>
/// Gets the configured crypto config
/// </summary>
/// <summary>
/// Gets the configured object serialiser
/// </summary>
/// <summary>
/// Gets the configured token validator
/// </summary>
/// <summary>
/// Perform any initialisation tasks
/// </summary>
/// <param name="pipelines">Application pipelines</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\CsrfToken.cs
/// <summary>
/// Represents a Csrf protection token
/// </summary>
/// <summary>
/// The default key for the csrf cookie/form value/querystring value
/// </summary>
/// <summary>
/// Randomly generated bytes
/// </summary>
/// <summary>
/// Date and time the token was created
/// </summary>
/// <summary>
/// Tamper prevention hmac
/// </summary>
/// <summary>
/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
/// </summary>
/// <returns>
/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
/// </returns>
/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
/// <summary>
/// Serves as a hash function for a particular type.
/// </summary>
/// <returns>
/// A hash code for the current <see cref="T:System.Object"/>.
/// </returns>
/// <filterpriority>2</filterpriority>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\CsrfTokenExtensions.cs
/// <summary>
/// Gets a byte array representation of the csrf token for generating
/// hmacs
/// </summary>
/// <param name="token">Token</param>
/// <returns>Byte array representing the token</returns>
/// <summary>
/// Calculates and sets the Hmac property on a given token
/// </summary>
/// <param name="token">Token</param>
/// <param name="hmacProvider">Hmac provider to use</param>
/// <returns>Hmac bytes</returns>
/// <summary>
/// Creates random bytes for the csrf token
/// </summary>
/// <returns>Random byte array</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\CsrfTokenValidationResult.cs
/// <summary>
/// Result of Csrf Token validation
/// </summary>
/// <summary>
/// Validated ok
/// </summary>
/// <summary>
/// One or both of the tokens appears to have been tampered with
/// </summary>
/// <summary>
/// One or both of the tokens are missing
/// </summary>
/// <summary>
/// Tokens to not match
/// </summary>
/// <summary>
/// Token is valid, but has expired
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\CsrfValidationException.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\DefaultCsrfTokenValidator.cs
/// <summary>
/// The default implementation of the <see cref="ICsrfTokenValidator"/> interface.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultCsrfTokenValidator"/> class,
/// using the provided <paramref name="cryptoConfig"/>.
/// </summary>
/// <param name="cryptoConfig">The <see cref="CryptographyConfiguration"/> that should be used.</param>
/// <summary>
/// Validates a pair of tokens
/// </summary>
/// <param name="tokenOne">First token (usually from either a form post or querystring)</param>
/// <param name="tokenTwo">Second token (usually from a cookie)</param>
/// <param name="validityPeriod">Optional period that the tokens are valid for</param>
/// <returns>Token validation result</returns>
/// <summary>
/// Validates that a cookie token is still valid with the current configuration / keys
/// </summary>
/// <param name="cookieToken">Token to validate</param>
/// <returns>True if valid, false otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\ICsrfTokenValidator.cs
/// <summary>
/// Validates Csrf tokens
/// </summary>
/// <summary>
/// Validates a pair of tokens
/// </summary>
/// <param name="tokenOne">First token (usually from either a form post or querystring)</param>
/// <param name="tokenTwo">Second token (usually from a cookie)</param>
/// <param name="validityPeriod">Optional period that the tokens are valid for</param>
/// <returns>Token validation result</returns>
/// <summary>
/// Validates that a cookie token is still valid with the current configuration / keys
/// </summary>
/// <param name="cookieToken">Token to validate</param>
/// <returns>True if valid, false otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\ModuleSecurity.cs
/// <summary>
/// Some simple helpers give some nice authentication syntax in the modules.
/// </summary>
/// <summary>
/// This module requires authentication
/// </summary>
/// <param name="module">Module to enable</param>
/// <summary>
/// This module requires authentication and certain claims to be present.
/// </summary>
/// <param name="module">Module to enable</param>
/// <param name="requiredClaims">Claim(s) required</param>
/// <summary>
/// This module requires authentication and any one of certain claims to be present.
/// </summary>
/// <param name="module">Module to enable</param>
/// <param name="requiredClaims">Claim(s) required</param>
/// <summary>
/// This module requires https.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> that requires HTTPS.</param>
/// <summary>
/// This module requires https.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> that requires HTTPS.</param>
/// <param name="redirect"><see langword="true"/> if the user should be redirected to HTTPS (no port number) if the incoming request was made using HTTP, otherwise <see langword="false"/> if <see cref="HttpStatusCode.Forbidden"/> should be returned.</param>
/// <summary>
/// This module requires https.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> that requires HTTPS.</param>
/// <param name="redirect"><see langword="true"/> if the user should be redirected to HTTPS if the incoming request was made using HTTP, otherwise <see langword="false"/> if <see cref="HttpStatusCode.Forbidden"/> should be returned.</param>
/// <param name="httpsPort">The HTTPS port number to use</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\SecurityHooks.cs
/// <summary>
/// Hooks to be used in a request pipeline.
/// </summary>
/// <summary>
/// Creates a hook to be used in a pipeline before a route handler to ensure that
/// the request was made by an authenticated user.
/// </summary>
/// <returns>Hook that returns an Unauthorized response if not authenticated in,
/// null otherwise</returns>
/// <summary>
/// Creates a hook to be used in a pipeline before a route handler to ensure
/// that the request was made by an authenticated user having the required claims.
/// </summary>
/// <param name="claims">Claims the authenticated user needs to have</param>
/// <returns>Hook that returns an Unauthorized response if the user is not
/// authenticated or does not have the required claims, null otherwise</returns>
/// <summary>
/// Creates a hook to be used in a pipeline before a route handler to ensure
/// that the request was made by an authenticated user having at least one of
/// the required claims.
/// </summary>
/// <param name="claims">Claims the authenticated user needs to have at least one of</param>
/// <returns>Hook that returns an Unauthorized response if the user is not
/// authenticated or does not have at least one of the required claims, null
/// otherwise</returns>
/// <summary>
/// Creates a hook to be used in a pipeline before a route handler to ensure
/// that the request was made by an authenticated user whose claims satisfy the
/// supplied validation function.
/// </summary>
/// <param name="isValid">Validation function to be called with the authenticated
/// users claims</param>
/// <returns>Hook that returns an Unauthorized response if the user is not
/// authenticated or does not pass the supplied validation function, null
/// otherwise</returns>
/// <summary>
/// Creates a hook to be used in a pipeline before a route handler to ensure that
/// the request satisfies a specific test.
/// </summary>
/// <param name="test">Test that must return true for the request to continue</param>
/// <returns>Hook that returns an Unauthorized response if the test fails, null otherwise</returns>
/// <summary>
/// Creates a hook to be used in a pipeline before a route handler to ensure that
/// the request satisfies a specific test.
/// </summary>
/// <param name="test">Test that must return true for the request to continue</param>
/// <returns>Hook that returns an Forbidden response if the test fails, null otherwise</returns>
/// <summary>
/// Creates a hook to be used in a pipeline before a route handler to ensure that
/// the request satisfies a specific test.
/// </summary>
/// <param name="statusCode">HttpStatusCode to use for the response</param>
/// <param name="test">Test that must return true for the request to continue</param>
/// <returns>Hook that returns a response with a specific HttpStatusCode if the test fails, null otherwise</returns>
/// <summary>
/// Creates a hook to be used in a pipeline before a route handler to ensure that
/// the resource is served over HTTPS
/// </summary>
/// <param name="redirect"><see langword="true"/> if the user should be redirected to HTTPS (no port number) if the incoming request was made using HTTP, otherwise <see langword="false"/> if <see cref="HttpStatusCode.Forbidden"/> should be returned.</param>
/// <param name="httpsPort">The HTTPS port number to use</param>
/// <returns>Hook that returns a <see cref="RedirectResponse"/> with the Url scheme set to HTTPS,
/// or a <see cref="Response"/> with a <see cref="HttpStatusCode.Forbidden"/> status code if <c>redirect</c> is false or the method is not GET,
/// null otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Security\SSLProxy.cs
/// <summary>
/// Allows a BeforeRequest hook to change Url to HTTPS if X-Forwarded-Proto header present
/// </summary>
/// <summary>
/// Checks for Forwarded or X-Forwarded-Proto header and if so makes current url scheme https
/// </summary>
/// <param name="pipelines">Application pipelines</param>
//X-Forwarded-Proto: https
//RFC7239
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Session\CookieBasedSessions.cs
/// <summary>
/// Cookie based session storage
/// </summary>
/// <summary>
/// Gets the cookie name that the session is stored in
/// </summary>
/// <value>Cookie name</value>
/// <summary>
/// Initializes a new instance of the <see cref="CookieBasedSessions"/> class.
/// </summary>
/// <param name="encryptionProvider">The encryption provider.</param>
/// <param name="hmacProvider">The hmac provider</param>
/// <param name="objectSerializer">Session object serializer to use</param>
/// <summary>
/// Initializes a new instance of the <see cref="CookieBasedSessions"/> class.
/// </summary>
/// <param name="configuration">Cookie based sessions configuration.</param>
/// <summary>
/// Initialise and add cookie based session hooks to the application pipeline
/// </summary>
/// <param name="pipelines">Application pipelines</param>
/// <param name="configuration">Cookie based sessions configuration.</param>
/// <returns>Formatter selector for choosing a non-default serializer</returns>
/// <summary>
/// Initialise and add cookie based session hooks to the application pipeline
/// </summary>
/// <param name="pipelines">Application pipelines</param>
/// <param name="cryptographyConfiguration">Cryptography configuration</param>
/// <returns>Formatter selector for choosing a non-default serializer</returns>
/// <summary>
/// Initialise and add cookie based session hooks to the application pipeline with the default encryption provider.
/// </summary>
/// <param name="pipelines">Application pipelines</param>
/// <returns>Formatter selector for choosing a non-default serializer</returns>
/// <summary>
/// Using the specified serializer
/// </summary>
/// <param name="newSerializer">Formatter to use</param>
/// <summary>
/// Save the session into the response
/// </summary>
/// <param name="session">Session to save</param>
/// <param name="response">Response to save into</param>
/// <summary>
/// Loads the session from the request
/// </summary>
/// <param name="request">Request to load from</param>
/// <returns>ISession containing the load session values</returns>
/// <summary>
/// Saves the request session into the response
/// </summary>
/// <param name="context">Nancy context</param>
/// <param name="sessionStore">Session store</param>
/// <summary>
/// Loads the request session
/// </summary>
/// <param name="context">Nancy context</param>
/// <param name="sessionStore">Session store</param>
/// <returns>Always returns null</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Session\CookieBasedSessionsConfiguration.cs
/// <summary>
/// Configuration options for cookie based sessions
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="CookieBasedSessionsConfiguration"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="CookieBasedSessionsConfiguration"/> class.
/// </summary>
/// <summary>
/// Gets or sets the cryptography configuration
/// </summary>
/// <summary>
/// Formatter for de/serializing the session objects
/// </summary>
/// <summary>
/// Cookie name for storing session information
/// </summary>
/// <summary>
/// Gets or sets the domain of the session cookie
/// </summary>
/// <summary>
/// Gets or sets the path of the session cookie
/// </summary>
/// <summary>
/// Gets a value indicating whether the configuration is valid or not.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Session\ISession.cs
/// <summary>
/// Defines the interface for a session
/// </summary>
/// <summary>
/// The number of session values
/// </summary>
/// <returns></returns>
/// <summary>
/// Deletes the session and all associated information
/// </summary>
/// <summary>
/// Deletes the specific key from the session
/// </summary>
/// <summary>
/// Retrieves the value from the session
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Session\NullSessionProvider.cs
/// <summary>
/// Returns an enumerator that iterates through the collection.
/// </summary>
/// <returns>
/// A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
/// </returns>
/// <filterpriority>1</filterpriority>
/// <summary>
/// Returns an enumerator that iterates through a collection.
/// </summary>
/// <returns>
/// An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
/// </returns>
/// <filterpriority>2</filterpriority>
/// <summary>
/// The number of session values
/// </summary>
/// <returns></returns>
/// <summary>
/// Deletes the session and all associated information
/// </summary>
/// <summary>
/// Deletes the specific key from the session
/// </summary>
/// <summary>
/// Retrieves the value from the session
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Session\Session.cs
/// <summary>
/// Session implementation
/// </summary>
/// <summary>
/// Gets the number of items stored
/// </summary>
/// <summary>
/// Deletes all items
/// </summary>
/// <summary>
/// Delete an item with the given key
/// </summary>
/// <param name="key">Key to delete</param>
/// <summary>
/// Gets or sets values
/// </summary>
/// <param name="key">The key whos value to get or set</param>
/// <returns>The value, or null or the key didn't exist</returns>
/// <summary>
/// Gets whether the session has changed
/// </summary>
/// <summary>
/// Returns an enumerator that iterates through a collection.
/// </summary>
/// <returns>
/// An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
/// </returns>
/// <filterpriority>2</filterpriority>
/// <summary>
/// Returns an enumerator that iterates through the collection.
/// </summary>
/// <returns>
/// A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
/// </returns>
/// <filterpriority>1</filterpriority>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\TinyIoc\TinyIoC.cs
//===============================================================================
// TinyIoC
//
// An easy to use, hassle free, Inversion of Control Container for small projects
// and beginners alike.
//
// https://github.com/grumpydev/TinyIoC
//===============================================================================
// Copyright © Steven Robbins.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
// Uncomment this line if you want the container to automatically
// register the TinyMessenger messenger/event aggregator
//#define TINYMESSENGER
// Preprocessor directives for enabling/disabling functionality
// depending on platform features. If the platform has an appropriate
// #DEFINE then these should be set automatically below.
// Platform supports System.Linq.Expressions
// Platform supports compiling expressions
// Platform supports getting all assemblies from the AppDomain object
// Platform supports GetConstructors on unbound generic types
// Platform supports GetParameters on open generics
// Platform supports resolving open generics
// Platform supports ReaderWriterLockSlim
//// NETFX_CORE
//#if NETFX_CORE
//#endif
// CompactFramework / Windows Phone 7
// By default does not support System.Linq.Expressions.
// AppDomain object does not support enumerating all assemblies in the app domain.
// PocketPC has a bizarre limitation on enumerating parameters on unbound generic methods.
// We need to use a slower workaround in that case.
//#if NETFX_CORE
//		/// <summary>
//		/// Gets a generic method from a type given the method name, generic types and parameter types
//		/// </summary>
//		/// <param name="sourceType">Source type</param>
//		/// <param name="methodName">Name of the method</param>
//		/// <param name="genericTypes">Generic types to use to make the method generic</param>
//		/// <param name="parameterTypes">Method parameters</param>
//		/// <returns>MethodInfo or null if no matches found</returns>
//		/// <exception cref="System.Reflection.AmbiguousMatchException"/>
//		/// <exception cref="System.ArgumentException"/>
//		public static MethodInfo GetGenericMethod(this Type sourceType, string methodName, Type[] genericTypes, Type[] parameterTypes)
//		{
//			MethodInfo method;
//			var cacheKey = new GenericMethodCacheKey(sourceType, methodName, genericTypes, parameterTypes);
//			// Shouldn't need any additional locking
//			// we don't care if we do the method info generation
//			// more than once before it gets cached.
//			if (!_genericMethodCache.TryGetValue(cacheKey, out method))
//			{
//				method = GetMethod(sourceType, methodName, genericTypes, parameterTypes);
//				_genericMethodCache[cacheKey] = method;
//			}
//			return method;
//		}
//#else
/// <summary>
/// Gets a generic method from a type given the method name, binding flags, generic types and parameter types
/// </summary>
/// <param name="sourceType">Source type</param>
/// <param name="bindingFlags">Binding flags</param>
/// <param name="methodName">Name of the method</param>
/// <param name="genericTypes">Generic types to use to make the method generic</param>
/// <param name="parameterTypes">Method parameters</param>
/// <returns>MethodInfo or null if no matches found</returns>
/// <exception cref="System.Reflection.AmbiguousMatchException"/>
/// <exception cref="System.ArgumentException"/>
// Shouldn't need any additional locking
// we don't care if we do the method info generation
// more than once before it gets cached.
//#endif
// @mbrit - 2012-05-22 - shim for ForEach call on List<T>...
/// <summary>
/// Name/Value pairs for specifying "user" parameters when resolving
/// </summary>
/// <summary>
/// Attempt to resolve type, even if the type isn't registered.
/// 
/// Registered types/options will always take precedence.
/// </summary>
/// <summary>
/// Fail resolution if type not explicitly registered
/// </summary>
/// <summary>
/// Attempt to resolve unregistered type if requested type is generic
/// and no registration exists for the specific generic parameters used.
/// 
/// Registered types/options will always take precedence.
/// </summary>
/// <summary>
/// Resolution settings
/// </summary>
/// <summary>
/// Gets the default options (attempt resolution of unregistered types, fail on named resolution if name not found)
/// </summary>
/// <summary>
/// Preconfigured option for attempting resolution of unregistered types and failing on named resolution if name not found
/// </summary>
/// <summary>
/// Preconfigured option for failing on resolving unregistered types and on named resolution if name not found
/// </summary>
/// <summary>
/// Preconfigured option for failing on resolving unregistered types, but attempting unnamed resolution if name not found
/// </summary>
// @mbrit - 2012-05-30 - in WinRT, this should be done async...
// ignore exceptions here...
/// <summary>
/// Registration options for "fluent" API
/// </summary>
/// <summary>
/// Make registration a singleton (single instance) if possible
/// </summary>
/// <returns>RegisterOptions</returns>
/// <exception cref="TinyIoCInstantiationTypeException"></exception>
/// <summary>
/// Make registration multi-instance if possible
/// </summary>
/// <returns>RegisterOptions</returns>
/// <exception cref="TinyIoCInstantiationTypeException"></exception>
/// <summary>
/// Make registration hold a weak reference if possible
/// </summary>
/// <returns>RegisterOptions</returns>
/// <exception cref="TinyIoCInstantiationTypeException"></exception>
/// <summary>
/// Make registration hold a strong reference if possible
/// </summary>
/// <returns>RegisterOptions</returns>
/// <exception cref="TinyIoCInstantiationTypeException"></exception>
/// <summary>
/// Switches to a custom lifetime manager factory if possible.
/// 
/// Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
/// </summary>
/// <param name="instance">RegisterOptions instance</param>
/// <param name="lifetimeProvider">Custom lifetime manager</param>
/// <param name="errorString">Error string to display if switch fails</param>
/// <returns>RegisterOptions</returns>
/// <summary>
/// Registration options for "fluent" API when registering multiple implementations
/// </summary>
/// <summary>
/// Initializes a new instance of the MultiRegisterOptions class.
/// </summary>
/// <param name="registerOptions">Registration options</param>
/// <summary>
/// Make registration a singleton (single instance) if possible
/// </summary>
/// <returns>RegisterOptions</returns>
/// <exception cref="TinyIoCInstantiationTypeException"></exception>
/// <summary>
/// Make registration multi-instance if possible
/// </summary>
/// <returns>MultiRegisterOptions</returns>
/// <exception cref="TinyIoCInstantiationTypeException"></exception>
/// <summary>
/// Switches to a custom lifetime manager factory if possible.
/// 
/// Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
/// </summary>
/// <param name="instance">MultiRegisterOptions instance</param>
/// <param name="lifetimeProvider">Custom lifetime manager</param>
/// <param name="errorString">Error string to display if switch fails</param>
/// <returns>MultiRegisterOptions</returns>
/// <summary>
/// Attempt to automatically register all non-generic classes and interfaces in the current app domain.
/// 
/// If more than one class implements an interface then only one implementation will be registered
/// although no error will be thrown.
/// </summary>
/// <summary>
/// Attempt to automatically register all non-generic classes and interfaces in the current app domain.
/// Types will only be registered if they pass the supplied registration predicate.
/// 
/// If more than one class implements an interface then only one implementation will be registered
/// although no error will be thrown.
/// </summary>
/// <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
/// <summary>
/// Attempt to automatically register all non-generic classes and interfaces in the current app domain.
/// </summary>
/// <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
/// <exception cref="TinyIoCAutoRegistrationException"/>
/// <summary>
/// Attempt to automatically register all non-generic classes and interfaces in the current app domain.
/// Types will only be registered if they pass the supplied registration predicate.
/// </summary>
/// <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
/// <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
/// <exception cref="TinyIoCAutoRegistrationException"/>
/// <summary>
/// Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
/// 
/// If more than one class implements an interface then only one implementation will be registered
/// although no error will be thrown.
/// </summary>
/// <param name="assemblies">Assemblies to process</param>
/// <summary>
/// Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
/// Types will only be registered if they pass the supplied registration predicate.
/// 
/// If more than one class implements an interface then only one implementation will be registered
/// although no error will be thrown.
/// </summary>
/// <param name="assemblies">Assemblies to process</param>
/// <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
/// <summary>
/// Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
/// </summary>
/// <param name="assemblies">Assemblies to process</param>
/// <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
/// <exception cref="TinyIoCAutoRegistrationException"/>
/// <summary>
/// Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
/// Types will only be registered if they pass the supplied registration predicate.
/// </summary>
/// <param name="assemblies">Assemblies to process</param>
/// <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
/// <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
/// <exception cref="TinyIoCAutoRegistrationException"/>
/// <summary>
/// Creates/replaces a container class registration with default options.
/// </summary>
/// <param name="registerType">Type to register</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a named container class registration with default options.
/// </summary>
/// <param name="registerType">Type to register</param>
/// <param name="name">Name of registration</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a container class registration with a given implementation and default options.
/// </summary>
/// <param name="registerType">Type to register</param>
/// <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a named container class registration with a given implementation and default options.
/// </summary>
/// <param name="registerType">Type to register</param>
/// <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
/// <param name="name">Name of registration</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a container class registration with a specific, strong referenced, instance.
/// </summary>
/// <param name="registerType">Type to register</param>
/// <param name="instance">Instance of RegisterType to register</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a named container class registration with a specific, strong referenced, instance.
/// </summary>
/// <param name="registerType">Type to register</param>
/// <param name="instance">Instance of RegisterType to register</param>
/// <param name="name">Name of registration</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a container class registration with a specific, strong referenced, instance.
/// </summary>
/// <param name="registerType">Type to register</param>
/// <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
/// <param name="instance">Instance of RegisterImplementation to register</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a named container class registration with a specific, strong referenced, instance.
/// </summary>
/// <param name="registerType">Type to register</param>
/// <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
/// <param name="instance">Instance of RegisterImplementation to register</param>
/// <param name="name">Name of registration</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a container class registration with a user specified factory
/// </summary>
/// <param name="registerType">Type to register</param>
/// <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a container class registration with a user specified factory
/// </summary>
/// <param name="registerType">Type to register</param>
/// <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
/// <param name="name">Name of registation</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a container class registration with default options.
/// </summary>
/// <typeparam name="RegisterImplementation">Type to register</typeparam>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a named container class registration with default options.
/// </summary>
/// <typeparam name="RegisterImplementation">Type to register</typeparam>
/// <param name="name">Name of registration</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a container class registration with a given implementation and default options.
/// </summary>
/// <typeparam name="RegisterType">Type to register</typeparam>
/// <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a named container class registration with a given implementation and default options.
/// </summary>
/// <typeparam name="RegisterType">Type to register</typeparam>
/// <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
/// <param name="name">Name of registration</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a container class registration with a specific, strong referenced, instance.
/// </summary>
/// <typeparam name="RegisterType">Type to register</typeparam>
/// <param name="instance">Instance of RegisterType to register</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a named container class registration with a specific, strong referenced, instance.
/// </summary>
/// <typeparam name="RegisterType">Type to register</typeparam>
/// <param name="instance">Instance of RegisterType to register</param>
/// <param name="name">Name of registration</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a container class registration with a specific, strong referenced, instance.
/// </summary>
/// <typeparam name="RegisterType">Type to register</typeparam>
/// <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
/// <param name="instance">Instance of RegisterImplementation to register</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a named container class registration with a specific, strong referenced, instance.
/// </summary>
/// <typeparam name="RegisterType">Type to register</typeparam>
/// <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
/// <param name="instance">Instance of RegisterImplementation to register</param>
/// <param name="name">Name of registration</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a container class registration with a user specified factory
/// </summary>
/// <typeparam name="RegisterType">Type to register</typeparam>
/// <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Creates/replaces a named container class registration with a user specified factory
/// </summary>
/// <typeparam name="RegisterType">Type to register</typeparam>
/// <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
/// <param name="name">Name of registation</param>
/// <returns>RegisterOptions for fluent API</returns>
/// <summary>
/// Register multiple implementations of a type.
/// 
/// Internally this registers each implementation using the full name of the class as its registration name.
/// </summary>
/// <typeparam name="RegisterType">Type that each implementation implements</typeparam>
/// <param name="implementationTypes">Types that implement RegisterType</param>
/// <returns>MultiRegisterOptions for the fluent API</returns>
/// <summary>
/// Register multiple implementations of a type.
/// 
/// Internally this registers each implementation using the full name of the class as its registration name.
/// </summary>
/// <param name="registrationType">Type that each implementation implements</param>
/// <param name="implementationTypes">Types that implement RegisterType</param>
/// <returns>MultiRegisterOptions for the fluent API</returns>
//#if NETFX_CORE
//				if (!registrationType.GetTypeInfo().IsAssignableFrom(type.GetTypeInfo()))
//#else
//#endif
/// <summary>
/// Attempts to resolve a type using default options.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using specified options.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="options">Resolution options</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using default options and the supplied name.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using supplied options and  name.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <param name="options">Resolution options</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using default options and the supplied constructor parameters.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using specified options and the supplied constructor parameters.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="options">Resolution options</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using default options and the supplied constructor parameters and name.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="name">Name of registration</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a named type using specified options and the supplied constructor parameters.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="options">Resolution options</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using default options.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using specified options.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="options">Resolution options</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using default options and the supplied name.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using supplied options and  name.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <param name="options">Resolution options</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using default options and the supplied constructor parameters.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="parameters">User specified constructor parameters</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using specified options and the supplied constructor parameters.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="options">Resolution options</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a type using default options and the supplied constructor parameters and name.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="name">Name of registration</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to resolve a named type using specified options and the supplied constructor parameters.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="options">Resolution options</param>
/// <returns>Instance of type</returns>
/// <exception cref="TinyIoCResolutionException">Unable to resolve the type.</exception>
/// <summary>
/// Attempts to predict whether a given type can be resolved with default options.
///
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given named type can be resolved with default options.
///
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given type can be resolved with the specified options.
///
/// Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <param name="options">Resolution options</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given named type can be resolved with the specified options.
///
/// Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <param name="options">Resolution options</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// 
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="parameters">User supplied named parameter overloads</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// 
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User supplied named parameter overloads</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// 
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="parameters">User supplied named parameter overloads</param>
/// <param name="options">Resolution options</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// 
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <param name="resolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User supplied named parameter overloads</param>
/// <param name="options">Resolution options</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given type can be resolved with default options.
///
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given named type can be resolved with default options.
///
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given type can be resolved with the specified options.
///
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <param name="options">Resolution options</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given named type can be resolved with the specified options.
///
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <param name="options">Resolution options</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// 
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="parameters">User supplied named parameter overloads</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// 
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User supplied named parameter overloads</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// 
/// Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="parameters">User supplied named parameter overloads</param>
/// <param name="options">Resolution options</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
///
/// Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
/// All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
/// 
/// Note: Resolution may still fail if user defined factory registations fail to construct objects when called.
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User supplied named parameter overloads</param>
/// <param name="options">Resolution options</param>
/// <returns>Bool indicating whether the type can be resolved</returns>
/// <summary>
/// Attemps to resolve a type using the default options
/// </summary>
/// <param name="ResolveType">Type to resolve</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved sucessfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the given options
/// </summary>
/// <param name="ResolveType">Type to resolve</param>
/// <param name="options">Resolution options</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved sucessfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the default options and given name
/// </summary>
/// <param name="ResolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the given options and name
/// </summary>
/// <param name="ResolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <param name="options">Resolution options</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved sucessfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the default options and supplied constructor parameters
/// </summary>
/// <param name="ResolveType">Type to resolve</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved sucessfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the default options and supplied name and constructor parameters
/// </summary>
/// <param name="ResolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the supplied options and constructor parameters
/// </summary>
/// <param name="ResolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="options">Resolution options</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the supplied name, options and constructor parameters
/// </summary>
/// <param name="ResolveType">Type to resolve</param>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="options">Resolution options</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the default options
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the given options
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="options">Resolution options</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the default options and given name
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the given options and name
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <param name="options">Resolution options</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the default options and supplied constructor parameters
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the default options and supplied name and constructor parameters
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the supplied options and constructor parameters
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="options">Resolution options</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Attemps to resolve a type using the supplied name, options and constructor parameters
/// </summary>
/// <typeparam name="ResolveType">Type to resolve</typeparam>
/// <param name="name">Name of registration</param>
/// <param name="parameters">User specified constructor parameters</param>
/// <param name="options">Resolution options</param>
/// <param name="resolvedType">Resolved type or default if resolve fails</param>
/// <returns>True if resolved successfully, false otherwise</returns>
/// <summary>
/// Returns all registrations of a type
/// </summary>
/// <param name="ResolveType">Type to resolveAll</param>
/// <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
/// <returns>IEnumerable</returns>
/// <summary>
/// Returns all registrations of a type, both named and unnamed
/// </summary>
/// <param name="ResolveType">Type to resolveAll</param>
/// <returns>IEnumerable</returns>
/// <summary>
/// Returns all registrations of a type
/// </summary>
/// <typeparam name="ResolveType">Type to resolveAll</typeparam>
/// <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
/// <returns>IEnumerable</returns>
/// <summary>
/// Returns all registrations of a type, both named and unnamed
/// </summary>
/// <typeparam name="ResolveType">Type to resolveAll</typeparam>
/// <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
/// <returns>IEnumerable</returns>
/// <summary>
/// Attempts to resolve all public property dependencies on the given object.
/// </summary>
/// <param name="input">Object to "build up"</param>
/// <summary>
/// Attempts to resolve all public property dependencies on the given object using the given resolve options.
/// </summary>
/// <param name="input">Object to "build up"</param>
/// <param name="resolveOptions">Resolve options to use</param>
/// <summary>
/// Provides custom lifetime management for ASP.Net per-request lifetimes etc.
/// </summary>
/// <summary>
/// Gets the stored object if it exists, or null if not
/// </summary>
/// <returns>Object instance or null</returns>
/// <summary>
/// Store the object
/// </summary>
/// <param name="value">Object to store</param>
/// <summary>
/// Release the object
/// </summary>
/// <summary>
/// Whether to assume this factory successfully constructs its objects
/// 
/// Generally set to true for delegate style factories as CanResolve cannot delve
/// into the delegates they contain.
/// </summary>
/// <summary>
/// The type the factory instantiates
/// </summary>
/// <summary>
/// Constructor to use, if specified
/// </summary>
/// <summary>
/// Create the type
/// </summary>
/// <param name="requestedType">Type user requested to be resolved</param>
/// <param name="container">Container that requested the creation</param>
/// <param name="parameters">Any user parameters passed</param>
/// <param name="options"></param>
/// <returns></returns>
/// <summary>
/// IObjectFactory that creates new instances of types for each resolution
/// </summary>
//#if NETFX_CORE
//				if (registerImplementation.GetTypeInfo().IsAbstract() || registerImplementation.GetTypeInfo().IsInterface())
//					throw new TinyIoCRegistrationTypeException(registerImplementation, "MultiInstanceFactory");
//#else
//#endif
/// <summary>
/// IObjectFactory that invokes a specified delegate to construct the object
/// </summary>
/// <summary>
/// IObjectFactory that invokes a specified delegate to construct the object
/// Holds the delegate using a weak reference
/// </summary>
/// <summary>
/// Stores an particular instance to return for a type
/// </summary>
/// <summary>
/// Stores an particular instance to return for a type
/// 
/// Stores the instance with a weak reference
/// </summary>
/// <summary>
/// A factory that lazy instantiates a type and always returns the same instance
/// </summary>
//#if NETFX_CORE
//				if (registerImplementation.GetTypeInfo().IsAbstract() || registerImplementation.GetTypeInfo().IsInterface())
//#else
//#endif
// We make sure that the singleton is constructed before the child container takes the factory.
// Otherwise the results would vary depending on whether or not the parent container had resolved
// the type before the child container does.
/// <summary>
/// A factory that offloads lifetime to an external lifetime provider
/// </summary>
//#if NETFX_CORE
//				if (registerImplementation.GetTypeInfo().IsAbstract() || registerImplementation.GetTypeInfo().IsInterface())
//#else
//#endif
// We make sure that the singleton is constructed before the child container takes the factory.
// Otherwise the results would vary depending on whether or not the parent container had resolved
// the type before the child container does.
/// <summary>
/// Lazy created Singleton instance of the container for simple scenarios
/// </summary>
// Ignore methods we can't access - added for Silverlight
// Ignore methods we can't access - added for Silverlight
// TODO - find a better way to remove "system" assemblies from the auto registration
// TODO - find a better way to remove "system" types from the auto registration
// Only register the TinyMessenger singleton if we are the root container
//#if NETFX_CORE
//			if (registerType.GetTypeInfo().IsInterface() || registerType.GetTypeInfo().IsAbstract())
//#else
//#endif
// Fail if requesting named resolution and settings set to fail if unresolved
// Or bubble up if we have a parent
// Attemped unnamed fallback container resolution if relevant and requested
// Check if type is an automatic lazy factory request
// Check if type is an IEnumerable<ResolveType>
// Attempt unregistered construction if possible and requested
// If we cant', bubble if we have a parent
// Bubble resolution up the container tree if we have a parent
// Just a func
// 2 parameter func with string as first parameter (name)
//#if NETFX_CORE
//			if ((genericType == typeof(Func<,>) && type.GetTypeInfo().GenericTypeArguments[0] == typeof(string)))
//#else
//#endif
// 3 parameter func with string as first parameter (name) and IDictionary<string, object> as second (parameters)
//#if NETFX_CORE
//			if ((genericType == typeof(Func<,,>) && type.GetTypeInfo().GenericTypeArguments[0] == typeof(string) && type.GetTypeInfo().GenericTypeArguments[1] == typeof(IDictionary<String, object>)))
//#else
//#endif
// Attempt container resolution
// Attempt container resolution of open generic
// Attempt to get a factory from parent if we can
// Fail if requesting named resolution and settings set to fail if unresolved
// Attemped unnamed fallback container resolution if relevant and requested
// Attempt to construct an automatic lazy factory if possible
// Attempt unregistered construction if possible and requested
// Unable to resolve - throw
//#if NETFX_CORE
//			Type[] genericArguments = type.GetTypeInfo().GenericTypeArguments.ToArray();
//#else
//#endif
// Just a func
//#if NETFX_CORE
//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => !mi.GetParameters().Any());
//#else
//#endif
// 2 parameter func with string as first parameter (name)
//#if NETFX_CORE
//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 1 && mi.GetParameters()[0].GetType() == typeof(String));
//#else
//#endif
// 3 parameter func with string as first parameter (name) and IDictionary<string, object> as second (parameters)
//#if NETFX_CORE
//			if ((genericType == typeof(Func<,,>) && type.GenericTypeArguments[0] == typeof(string) && type.GenericTypeArguments[1] == typeof(IDictionary<string, object>)))
//#else
//#endif
//#if NETFX_CORE
//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads));
//#else
//#endif
//#if NETFX_CORE
//			var genericResolveAllMethod = this.GetType().GetGenericMethod("ResolveAll", type.GenericTypeArguments, new[] { typeof(bool) });
//#else
//#endif
//#if NETFX_CORE                
//				if (parameter.ParameterType.GetTypeInfo().IsPrimitive && !isParameterOverload)
//#else
//#endif
//#if NETFX_CORE
//			if (type.GetTypeInfo().IsValueType)
//#else
//#endif
// Get constructors in reverse order based on the number of parameters
// i.e. be as "greedy" as possible so we satify the most amount of dependencies possible
//#if NETFX_CORE
//			return type.GetTypeInfo().DeclaredConstructors.OrderByDescending(ctor => ctor.GetParameters().Count());
//#else
//#endif
// Try and get the best constructor that we can construct
// if we can't construct any then get the constructor
// with the least number of parameters so we can throw a meaningful
// resolve exception
// If a constructor parameter can't be resolved
// it will throw, so wrap it and throw that this can't
// be resolved.
// We could lock the cache here, but there's no real side
// effect to two threads creating the same ObjectConstructor
// at the same time, compared to the cost of a lock for 
// every creation.
//#if NETFX_CORE
//			var properties = from property in input.GetType().GetTypeInfo().DeclaredProperties
//							 where (property.GetMethod != null) && (property.SetMethod != null) && !property.PropertyType.GetTypeInfo().IsValueType
//							 select property;
//#else
//#endif
// Catch any resolution errors and ignore them
//#if NETFX_CORE
//			var registerTypeDef = registerType.GetTypeInfo();
//			var registerImplementationDef = registerImplementation.GetTypeInfo();
//			if (!registerTypeDef.IsGenericTypeDefinition)
//			{
//				if (!registerTypeDef.IsAssignableFrom(registerImplementationDef))
//					return false;
//			}
//			else
//			{
//				if (registerTypeDef.IsInterface())
//				{
//					if (!registerImplementationDef.ImplementedInterfaces.Any(t => t.GetTypeInfo().Name == registerTypeDef.Name))
//						return false;
//				}
//				else if (registerTypeDef.IsAbstract() && registerImplementationDef.BaseType() != registerType)
//				{
//					return false;
//				}
//			}
//#else
//#endif
// reverse shim for WinRT SR changes...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\CompositeValidator.cs
/// <summary>
/// A composite validator to combine other validators.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="CompositeValidator"/> class.
/// </summary>
/// <param name="validators">The validators.</param>
/// <param name="modelType">The type of the model that is being validated.</param>
/// <summary>
/// Gets the description of the validator.
/// </summary>
/// <summary>
/// The type of the model that is being validated by the validator.
/// </summary>
/// <summary>
/// Validates the specified instance.
/// </summary>
/// <param name="instance">The instance that should be validated.</param>
/// <param name="context">The <see cref="NancyContext"/> of the current request.</param>
/// <returns>A <see cref="ModelValidationResult"/> with the result of the validation.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\DefaultValidatorLocator.cs
/// <summary>
/// The default Nancy implementation of IValidatorLocator.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultValidatorLocator"/> class.
/// </summary>
/// <param name="factories">The factories.</param>
/// <summary>
/// Gets a validator for a given type.
/// </summary>
/// <param name="type">The type to validate.</param>
/// <returns>An <see cref="IModelValidator"/> instance or <see langword="null"/> if none found.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\IModelValidator.cs
/// <summary>
/// Provides a way to validate a type as well as a description to use for client-side validation.
/// </summary>
/// <summary>
/// Gets the description of the validator.
/// </summary>
/// <summary>
/// Gets the <see cref="Type"/> of the model that is being validated by the validator.
/// </summary>
/// <summary>
/// Validates the specified instance.
/// </summary>
/// <param name="instance">The instance that should be validated.</param>
/// <param name="context">The <see cref="NancyContext"/> of the current request.</param>
/// <returns>A <see cref="ModelValidationResult"/> with the result of the validation.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\IModelValidatorFactory.cs
/// <summary>
/// Creates instances of IValidator.
/// </summary>
/// <summary>
/// Creates a validator for the given type.
/// </summary>
/// <param name="type">The type.</param>
/// <returns>A validator for the given type or null if none exists.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\IModelValidatorLocator.cs
/// <summary>
/// Locates a validator for a given type.
/// </summary>
/// <summary>
/// Gets a validator for a given type.
/// </summary>
/// <param name="type">The type to validate.</param>
/// <returns>An <see cref="IModelValidator"/> instance or <see langword="null"/> if none found.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\ModelValidationDescriptor.cs
/// <summary>
/// A description of the rules a validator provides.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationDescriptor"/> class.
/// </summary>
/// <param name="rules">The rules that describes the model.</param>
/// <param name="modelType">The type of the model that the rules are defined for.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationDescriptor"/> class.
/// </summary>
/// <param name="rules">The rules that describes the model, grouped by member name.</param>
/// <param name="modelType">The type of the model that the rules are defined for.</param>
/// <summary>
/// The type of the model that is being described.
/// </summary>
/// <summary>
/// Gets the rules.
/// </summary>
/// <value>An <see cref="IDictionary{TKey,TValue}"/> instance that contains <see cref="ModelValidationRule"/> instances grouped by property name.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\ModelValidationError.cs
/// <summary>
/// Represents a model validation error.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationError"/> class.
/// </summary>
/// <param name="memberName">Name of the member that the error describes.</param>
/// <param name="errorMessage"></param>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationError"/> class.
/// </summary>
/// <param name="memberNames">The member names that the error describes.</param>
/// <param name="errorMessage"></param>
/// <summary>
/// Gets the member names that are a part of the error.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains the name of the members.</value>
/// <summary>
/// 
/// </summary>
/// <summary>
/// Implicitly cast a validation error to a string.
/// </summary>
/// <param name="error">The <see cref="ModelValidationError"/> that should be cast.</param>
/// <returns>A <see cref="string"/> containing the validation error description.</returns>
/// <summary>
/// Returns the <see cref="ErrorMessage"/>.
/// </summary>
/// <returns>A string containing the error message.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\ModelValidationException.cs
/// <summary>
/// Exception that is thrown during problems with model validation.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationException"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationException"/> class,
/// with the provided <paramref name="message"/>.
/// </summary>
/// <param name="message">The error message that explains the reason for the exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationException"/> class,
/// with the provided <paramref name="message"/> and <paramref name="innerException"/>
/// </summary>
/// <param name="message">The error message that explains the reason for the exception.</param>
/// <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\ModelValidationResult.cs
/// <summary>
/// Represents the result of a model validation.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationResult"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationResult"/> class.
/// </summary>
/// <param name="errors">The <see cref="ModelValidationError"/> instances that makes up the result.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationResult"/> class.
/// </summary>
/// <param name="errors">The <see cref="ModelValidationError"/> instances that makes up the result, grouped by member name.</param>
/// <summary>
/// Gets the errors.
/// </summary>
/// <value>An <see cref="IDictionary{TKey,TValue}"/> instance that contains <see cref="ModelValidationError"/> instances grouped by property name.</value>
/// <summary>
/// Gets a clean representation of the errors.
/// </summary>
/// <returns></returns>
/// <summary>
/// Gets a value indicating whether the validated instance is valid or not.
/// </summary>
/// <value><see langword="true"/> if the validated instance is valid; otherwise, <see langword="false"/>.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\ModelValidationRule.cs
/// <summary>
/// A description of a validation rule.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationRule"/> class.
/// </summary>
/// <param name="ruleType">Type of the rule.</param>
/// <param name="errorMessageFormatter">The error message formatter.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ModelValidationRule"/> class.
/// </summary>
/// <param name="ruleType">Type of the rule.</param>
/// <param name="errorMessageFormatter">The error message formatter.</param>
/// <param name="memberNames">Name of the member.</param>
/// <summary>
/// Gets the names of the members this rule validates.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> that contains the name of the member.</value>
/// <summary>
/// Gets the type of the rule.
/// </summary>
/// <value>The type of the rule.</value>
/// <summary>
/// Gets the error message that this rule will provide upon error.
/// </summary>
/// <param name="name">The name.</param>
/// <returns>The error message.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\ModuleExtensions.cs
/// <summary>
/// Extensions to <see cref="INancyModule"/> for validation.
/// </summary>
/// <summary>
/// Performs validation on the specified <paramref name="instance"/>.
/// </summary>
/// <typeparam name="T">The type of the <paramref name="instance"/> that is being validated.</typeparam>
/// <param name="module">The module that the validation is performed from.</param>
/// <param name="instance">The instance that is being validated.</param>
/// <returns>A <see cref="ModelValidationResult"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\Rules\ComparisonOperator.cs
/// <summary>
/// Specifies the validation comparison operators used by the <see cref="ComparisonValidationRule"/> type.
/// </summary>
/// <summary>
/// A comparison for greater than.
/// </summary>
/// <summary>
/// A comparison for greater than or equal to.
/// </summary>
/// <summary>
/// A comparison for less than.
/// </summary>
/// <summary>
/// A comparison for less than or equal to.
/// </summary>
/// <summary>
/// A comparison for equality.
/// </summary>
/// <summary>
/// A comparison for inequality.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\Rules\ComparisonValidationRule.cs
/// <summary>
/// Implementation of <see cref="ModelValidationRule"/> for comparing two values using a
/// provided <see cref="ComparisonOperator"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ComparisonValidationRule"/> class.
/// </summary>
/// <param name="errorMessageFormatter">The error message formatter.</param>
/// <param name="memberNames">The member names.</param>
/// <param name="operator">The <see cref="ComparisonOperator"/> that should be used when comparing values.</param>
/// <param name="value">Gets the value to compare against.</param>
/// <summary>
/// The <see cref="ComparisonOperator"/> that should be used when comparing values.
/// </summary>
/// <value>A <see cref="ComparisonOperator"/> value.</value>
/// <summary>
/// Gets the value to compare against.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\Rules\NotEmptyValidationRule.cs
/// <summary>
/// Implementation of <see cref="ModelValidationRule"/> for ensuring a string does not
/// contain an empty value.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NotEmptyValidationRule"/> class.
/// </summary>
/// <param name="errorMessageFormatter">The error message formatter.</param>
/// <param name="memberNames">The member names.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\Rules\NotNullValidationRule.cs
/// <summary>
/// Implementation of <see cref="ModelValidationRule"/> for ensuring a string is not null.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NotNullValidationRule"/> class.
/// </summary>
/// <param name="errorMessageFormatter">The error message formatter.</param>
/// <param name="memberNames">The member names.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\Rules\RegexValidationRule.cs
/// <summary>
/// Implementation of <see cref="ModelValidationRule"/> for ensuring a string matches the
/// pattern which is defined by a regex.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RegexValidationRule"/> class.
/// </summary>
/// <param name="errorMessageFormatter">The error message formatter.</param>
/// <param name="memberNames">The member names.</param>
/// <param name="pattern">The regex pattern that should be used to check for a match.</param>
/// <summary>
/// The regex pattern that should be used to check for a match.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Validation\Rules\StringLengthValidationRule.cs
/// <summary>
/// Implementation of <see cref="ModelValidationRule"/> for ensuring that the length of a string
/// is withing the specified range.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="StringLengthValidationRule"/> class.
/// </summary>
/// <param name="errorMessageFormatter">The error message formatter.</param>
/// <param name="memberNames">The member names.</param>
/// <param name="minLength">Minimum allowed length of the string</param>
/// <param name="maxLength">Maximum allowed length of the string</param>
/// <summary>
/// Gets the length of the min.
/// </summary>
/// <value>The length of the min.</value>
/// <summary>
/// Gets the length of the max.
/// </summary>
/// <value>The length of the max.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\AmbiguousViewsException.cs
/// <summary>
/// Thrown when multiple <see cref="ViewLocationResult"/> instances describe the exact same view.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AmbiguousViewsException"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AmbiguousViewsException"/> class.
/// </summary>
/// <param name="message">The message that should be displayed with the exception.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\DefaultFileSystemReader.cs
/// <summary>
/// Default implementation for retrieving information about views that are stored on the file system.
/// </summary>
/// <summary>
/// Gets information about view that are stored in folders below the applications root path.
/// </summary>
/// <param name="path">The path of the folder where the views should be looked for.</param>
/// <param name="supportedViewExtensions">A list of view extensions to look for.</param>
/// <returns>An <see cref="IEnumerable{T}"/> containing view locations and contents readers.</returns>
/// <summary>
/// Gets the last modified time for the file specified
/// </summary>
/// <param name="filename">Filename</param>
/// <returns>Time the file was last modified</returns>
/// <summary>
/// Gets information about specific views that are stored in folders below the applications root path.
/// </summary>
/// <param name="path">The path of the folder where the views should be looked for.</param>
/// <param name="viewName">Name of the view to search for</param>
/// <param name="supportedViewExtensions">A list of view extensions to look for.</param>
/// <returns>An <see cref="IEnumerable{T}"/> containing view locations and contents readers.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\DefaultRenderContext.cs
/// <summary>
/// Default render context implementation.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultRenderContext"/> class.
/// </summary>
/// <param name="viewResolver"></param>
/// <param name="viewCache"></param>
/// <param name="textResource"></param>
/// <param name="viewLocationContext"></param>
/// <summary>
/// Gets the context of the current request.
/// </summary>
/// <value>A <see cref="NancyContext"/> instance.</value>
/// <summary>
/// Gets the view cache that is used by Nancy.
/// </summary>
/// <value>An <see cref="IViewCache"/> instance.</value>
/// <summary>
/// Gets the text resource for localisation
/// </summary>
/// <summary>
/// Gets the text resource finder for localisation
/// </summary>
/// <summary>
/// Parses a path and returns an absolute url path, taking into account
/// base directory etc.
/// </summary>
/// <param name="input">Input url such as ~/styles/main.css</param>
/// <returns>Parsed absolute url path</returns>
/// <summary>
/// HTML encodes a string.
/// </summary>
/// <param name="input">The string that should be HTML encoded.</param>
/// <returns>A HTML encoded <see cref="string"/>.</returns>
/// <summary>
/// Locates a view that matches the provided <paramref name="viewName"/> and <paramref name="model"/>.
/// </summary>
/// <param name="viewName">The name of the view that should be located.</param>
/// <param name="model">The model that should be used when locating the view.</param>
/// <returns>A <see cref="ViewLocationResult"/> instance if the view could be located; otherwise, <see langword="null"/>.</returns>
/// <summary>
/// Generates a Csrf token.
/// The token should be stored in a cookie and the form as a hidden field.
/// In both cases the name should be the key of the returned key value pair.
/// </summary>
/// <returns>A tuple containing the name (cookie name and form/querystring name) and value</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\DefaultRenderContextFactory.cs
/// <summary>
/// Default render context factory implementation.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultRenderContextFactory"/> class.
/// </summary>
/// <param name="viewCache">The view cache that should be used by the created render context.</param>
/// <param name="viewResolver">The view resolver that should be used by the created render context.</param>
/// <param name="textResource">The <see cref="ITextResource"/> that should be used by the engine.</param>
/// <summary>
/// Gets a <see cref="IRenderContext"/> for the specified <see cref="ViewLocationContext"/>.
/// </summary>
/// <param name="viewLocationContext">The <see cref="ViewLocationContext"/> for which the context should be created.</param>
/// <returns>A <see cref="IRenderContext"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\DefaultResourceReader.cs
/// <summary>
/// Default implementation for extracting view information form an assembly.
/// </summary>
/// <summary>
/// Gets information about the resources that are embedded in the assembly.
/// </summary>
/// <param name="assembly">The <see cref="Assembly"/> to retrieve view information from.</param>
/// <param name="supportedViewEngineExtensions">A list of view extensions to look for.</param>
/// <returns>A <see cref="IList{T}"/> of resource locations and content readers.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\DefaultViewCache.cs
/// <summary>
/// View cache that supports expiring content if it is stale
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultViewCache"/> class.
/// </summary>
/// <summary>
/// Gets or adds a view from the cache.
/// </summary>
/// <typeparam name="TCompiledView">The type of the cached view instance.</typeparam>
/// <param name="viewLocationResult">A <see cref="ViewLocationResult"/> instance that describes the view that is being added or retrieved from the cache.</param>
/// <param name="valueFactory">A function that produces the value that should be added to the cache in case it does not already exist.</param>
/// <returns>An instance of the type specified by the <typeparamref name="TCompiledView"/> type.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\DefaultViewFactory.cs
/// <summary>
/// The default implementation for how views are resolved and rendered by Nancy.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultViewFactory"/> class.
/// </summary>
/// <param name="viewResolver">An <see cref="IViewResolver"/> instance that should be used to resolve the location of a view.</param>
/// <param name="viewEngines">An <see cref="IEnumerable{T}"/> instance containing the <see cref="IViewEngine"/> instances that should be able to be used to render a view</param>
/// <param name="renderContextFactory">A <see cref="IRenderContextFactory"/> instance that should be used to create an <see cref="IRenderContext"/> when a view is rendered.</param>
/// <param name="conventions">An <see cref="ViewLocationConventions"/> instance that should be used to resolve all possible view locations </param>
/// <param name="rootPathProvider">An <see cref="IRootPathProvider"/> instance.</param>
/// <summary>
/// Renders the view with the name and model defined by the <paramref name="viewName"/> and <paramref name="model"/> parameters.
/// </summary>
/// <param name="viewName">The name of the view to render.</param>
/// <param name="model">The model that should be passed into the view.</param>
/// <param name="viewLocationContext">A <see cref="ViewLocationContext"/> instance, containing information about the context for which the view is being rendered.</param>
/// <returns>A delegate that can be invoked with the <see cref="Stream"/> that the view should be rendered to.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\DefaultViewLocator.cs
/// <summary>
/// The default implementation for how views are located by Nancy.
/// </summary>
// No need to lock here, we get constructed on app startup
/// <summary>
/// Gets the location of the view defined by the <paramref name="viewName"/> parameter.
/// </summary>
/// <param name="viewName">Name of the view to locate.</param>
/// <param name="context">The <see cref="NancyContext"/> instance for the current request.</param>
/// <returns>A <see cref="ViewLocationResult"/> instance if the view could be located; otherwise <see langword="null"/>.</returns>
// If we can't do runtime discovery there's no need to lock anything
// as we can assume our cache is immutable.
/// <summary>
/// Gets all the views that are currently discovered
/// Note: this is *not* the recommended way to deal with the view locator
/// as it doesn't allow for runtime discovery of views with the
/// <see cref="StaticConfiguration.Caching"/> settings.
/// </summary>
/// <returns>A collection of <see cref="ViewLocationResult"/> instances</returns>
// Make a copy to avoid any modification issues
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\DefaultViewRenderer.cs
/// <summary>
/// Default implementation of the <see cref="IViewRenderer"/> interface.
/// </summary>
/// <summary>
/// Initializes an instance of the <see cref="DefaultViewRenderer"/> type, with
/// the provided <paramref name="factory"/>.
/// </summary>
/// <param name="factory">The <see cref="IViewFactory"/> that should be used to render the views.</param>
/// <summary>
/// Renders a view to a response object, bypassing content negotiation.
/// </summary>
/// <param name="context">Current Nancy context</param>
/// <param name="viewName">View name</param>
/// <param name="model">Model object (or null)</param>
/// <returns>Response object containing the rendered view (if found)</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\DefaultViewResolver.cs
/// <summary>
/// Default implementation on how views are resolved by Nancy.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultViewResolver"/> class.
/// </summary>
/// <param name="viewLocator">The view locator that should be used to locate views.</param>
/// <param name="conventions">The conventions that the view resolver should use to figure out where to look for views.</param>
/// <summary>
/// Locates a view based on the provided information.
/// </summary>
/// <param name="viewName">The name of the view to locate.</param>
/// <param name="model">The model that will be used with the view.</param>
/// <param name="viewLocationContext">A <see cref="ViewLocationContext"/> instance, containing information about the context for which the view is being located.</param>
/// <returns>A <see cref="ViewLocationResult"/> instance if the view could be found, otherwise <see langword="null"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\Extensions.cs
/// <summary>
/// Contains miscellaneous extension methods.
/// </summary>
/// <summary>
/// Checks if the evaluated instance is an anonymous
/// </summary>
/// <param name="source">The object instance to check.</param>
/// <returns><see langword="true"/> if the object is an anonymous type; otherwise <see langword="false"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\FileSystemViewLocationProvider.cs
/// <summary>
/// Contains the functionality for locating a view that is located on the file system.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="FileSystemViewLocationProvider"/> class.
/// </summary>
/// <param name="rootPathProvider">A <see cref="IRootPathProvider"/> instance.</param>
/// <remarks>Creating an instance using this constructor will result in the <see cref="DefaultFileSystemReader"/> being used internally.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="FileSystemViewLocationProvider"/> class.
/// </summary>
/// <param name="rootPathProvider">A <see cref="IRootPathProvider"/> instance.</param>
/// <param name="fileSystemReader">An <see cref="IFileSystemReader"/> instance that should be used when retrieving view information from the file system.</param>
/// <summary>
/// Returns an <see cref="ViewLocationResult"/> instance for all the views that could be located by the provider.
/// </summary>
/// <param name="supportedViewExtensions">An <see cref="IEnumerable{T}"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ViewLocationResult"/> instances for the located views.</returns>
/// <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
/// <summary>
/// Returns an <see cref="ViewLocationResult"/> instance for all the views matching the viewName that could be located by the provider.
/// </summary>
/// <param name="supportedViewExtensions">An <see cref="IEnumerable{T}"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
/// <param name="viewName">The name of the view to try and find</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ViewLocationResult"/> instances for the located views.</returns>
/// <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\FileSystemViewLocationResult.cs
/// <summary>
/// View location result for file system based views.
/// Supports detecting if the contents have changed since it
/// was last read.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ViewLocationResult"/> class.
/// </summary>
/// <param name="location">The location of where the view was found.</param>
/// <param name="name">The name of the view.</param>
/// <param name="extension">The file extension of the located view.</param>
/// <param name="contents">A <see cref="TextReader"/> that can be used to read the contents of the located view.</param>
/// <param name="fullFilename">Full filename of the file</param>
/// <param name="fileSystem">An <see cref="IFileSystemReader"/> instance that should be used when retrieving view information from the file system.</param>
/// <summary>
/// Gets a value indicating whether the current item is stale
/// </summary>
/// <returns>True if stale, false otherwise</returns>
/// <summary>
/// Wraps the real contents delegate to set the last modified date first
/// </summary>
/// <returns>TextReader to read the file</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\IFileSystemReader.cs
/// <summary>
/// Defines the functionality for retrieving information about views that are stored on the file system.
/// </summary>
/// <summary>
/// Gets information about view that are stored in folders below the applications root path.
/// </summary>
/// <param name="path">The path of the folder where the views should be looked for.</param>
/// <param name="supportedViewExtensions">A list of view extensions to look for.</param>
/// <returns>An <see cref="IEnumerable{T}"/> containing view locations and contents readers.</returns>
/// <summary>
/// Gets the last modified time for the file specified
/// </summary>
/// <param name="filename">Filename</param>
/// <returns>Time the file was last modified</returns>
/// <summary>
/// Gets information about specific views that are stored in folders below the applications root path.
/// </summary>
/// <param name="path">The path of the folder where the views should be looked for.</param>
/// <param name="viewName">Name of the view to search for</param>
/// <param name="supportedViewExtensions">A list of view extensions to look for.</param>
/// <returns>An <see cref="IEnumerable{T}"/> containing view locations and contents readers.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\IRenderContext.cs
/// <summary>
/// Defines the functionality of the context that is passed into a view engine when the view is requested to be rendered.
/// </summary>
/// <summary>
/// Gets the context of the current request.
/// </summary>
/// <value>A <see cref="NancyContext"/> instance.</value>
/// <summary>
/// Gets the view cache that is used by Nancy.
/// </summary>
/// <value>An <see cref="IViewCache"/> instance.</value>
/// <summary>
/// Gets the text resource for localisation
/// </summary>
/// <summary>
/// Gets the text resource finder for localisation
/// </summary>
/// <summary>
/// Parses a path and returns an absolute url path, taking into account
/// base directory etc.
/// </summary>
/// <param name="input">Input url such as ~/styles/main.css</param>
/// <returns>Parsed absolute url path</returns>
/// <summary>
/// HTML encodes a string.
/// </summary>
/// <param name="input">The string that should be HTML encoded.</param>
/// <returns>A HTML encoded <see cref="string"/>.</returns>
/// <summary>
/// Locates a view that matches the provided <paramref name="viewName"/> and <paramref name="model"/>.
/// </summary>
/// <param name="viewName">The name of the view that should be located.</param>
/// <param name="model">The model that should be used when locating the view.</param>
/// <returns>A <see cref="ViewLocationResult"/> instance if the view could be located; otherwise, <see langword="null"/>.</returns>
/// <summary>
/// Gets the current Csrf token.
/// The token should be stored in a cookie and the form as a hidden field.
/// In both cases the name should be the key of the returned key value pair.
/// </summary>
/// <returns>A tuple containing the name (cookie name and form/querystring name) and value</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\IRenderContextFactory.cs
/// <summary>
/// Defines the functionality required to manufacture <see cref="IRenderContext"/> instances.
/// </summary>
/// <summary>
/// Gets a <see cref="IRenderContext"/> for the specified <see cref="ViewLocationContext"/>.
/// </summary>
/// <param name="viewLocationContext">The <see cref="ViewLocationContext"/> for which the context should be created.</param>
/// <returns>A <see cref="IRenderContext"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\IResourceReader.cs
/// <summary>
/// Defines the functionality of a reader that extracts embedded views from an assembly.
/// </summary>
/// <summary>
/// Gets information about the resources that are embedded in the assembly.
/// </summary>
/// <param name="assembly">The <see cref="Assembly"/> to retrieve view information from.</param>
/// <param name="supportedViewEngineExtensions">A list of view extensions to look for.</param>
/// <returns>A <see cref="IList{T}"/> of resource locations and content readers.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\IViewCache.cs
/// <summary>
/// Defines the functionality of a Nancy view cache.
/// </summary>
/// <summary>
/// Gets or adds a view from the cache.
/// </summary>
/// <typeparam name="TCompiledView">The type of the cached view instance.</typeparam>
/// <param name="viewLocationResult">A <see cref="ViewLocationResult"/> instance that describes the view that is being added or retrieved from the cache.</param>
/// <param name="valueFactory">A function that produces the value that should be added to the cache in case it does not already exist.</param>
/// <returns>An instance of the type specified by the <typeparamref name="TCompiledView"/> type.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\IViewEngine.cs
/// <summary>
/// Defines the functionality that a view engine must support to be integrated into Nancy.
/// </summary>
/// <summary>
/// Gets the extensions file extensions that are supported by the view engine.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> instance containing the extensions.</value>
/// <remarks>The extensions should not have a leading dot in the name.</remarks>
/// <summary>
/// Initialise the view engine (if necessary)
/// </summary>
/// <param name="viewEngineStartupContext">Startup context</param>
/// <summary>
/// Renders the view.
/// </summary>
/// <param name="viewLocationResult">A <see cref="ViewLocationResult"/> instance, containing information on how to get the view template.</param>
/// <param name="model">The model that should be passed into the view</param>
/// <param name="renderContext"></param>
/// <returns>A response</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\IViewFactory.cs
/// <summary>
/// Defines the functionality used by a <see cref="INancyModule"/> to render a view to the response.
/// </summary>
/// <summary>
/// Renders the view with the name and model defined by the <paramref name="viewName"/> and <paramref name="model"/> parameters.
/// </summary>
/// <param name="viewName">The name of the view to render.</param>
/// <param name="model">The module path of the module that is rendering the view.</param>
/// <param name="viewLocationContext">A <see cref="ViewLocationContext"/> instance, containing information about the context for which the view is being rendered.</param>
/// <returns>A response.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\IViewLocationProvider.cs
/// <summary>
/// Defines the functionality used by Nancy to located a view.
/// </summary>
/// <summary>
/// Returns an <see cref="ViewLocationResult"/> instance for all the views that could be located by the provider.
/// </summary>
/// <param name="supportedViewExtensions">An <see cref="IEnumerable{T}"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ViewLocationResult"/> instances for the located views.</returns>
/// <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
/// <summary>
/// Returns an <see cref="ViewLocationResult"/> instance for all the views matching the viewName that could be located by the provider.
/// </summary>
/// <param name="supportedViewExtensions">An <see cref="IEnumerable{T}"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
/// <param name="location">Location of the view</param>
/// <param name="viewName">The name of the view to try and find</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ViewLocationResult"/> instances for the located views.</returns>
/// <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\IViewLocator.cs
/// <summary>
/// Defines the functionality for locating the requested view.
/// </summary>
/// <summary>
/// Gets the location of the view defined by the <paramref name="viewName"/> parameter.
/// </summary>
/// <param name="viewName">Name of the view to locate.</param>
/// <param name="context">The <see cref="NancyContext"/> instance for the current request.</param>
/// <returns>A <see cref="ViewLocationResult"/> instance if the view could be located; otherwise <see langword="null"/>.</returns>
/// <summary>
/// Gets all the views that are currently discovered
/// Note: this is *not* the recommended way to deal with the view locator
/// as it doesn't allow for runtime discovery of views with the
/// <see cref="StaticConfiguration.Caching"/> settings.
/// </summary>
/// <returns>A collection of <see cref="ViewLocationResult"/> instances</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\IViewRenderer.cs
/// <summary>
/// Interface for manually rendering views to a Response object, rather
/// than going through content negotiation.
/// </summary>
/// <summary>
/// Renders a view to a response object, bypassing content negotiation.
/// </summary>
/// <param name="context">Current Nancy context</param>
/// <param name="viewName">View name</param>
/// <param name="model">Model object (or null)</param>
/// <returns>Response object containing the rendered view (if found)</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\IViewResolver.cs
/// <summary>
/// Defines the functionality for resolving the requested view.
/// </summary>
/// <summary>
/// Locates a view based on the provided information.
/// </summary>
/// <param name="viewName">The name of the view to locate.</param>
/// <param name="model">The model that will be used with the view.</param>
/// <param name="viewLocationContext">A <see cref="ViewLocationContext"/> instance, containing information about the context for which the view is being located.</param>
/// <returns>A <see cref="ViewLocationResult"/> instance if the view could be found, otherwise <see langword="null"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\ResourceViewLocationProvider.cs
/// <summary>
/// Contains the functionality for locating a view that has been embedded into an assembly resource.
/// </summary>
/// <summary>
/// User-configured root namespaces for assemblies.
/// </summary>
/// <summary>
/// A list of assemblies to ignore when scanning for embedded views.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ResourceViewLocationProvider"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ResourceViewLocationProvider"/> class.
/// </summary>
/// <param name="resourceReader">An <see cref="IResourceReader"/> instance that should be used when extracting embedded views.</param>
/// <param name="resourceAssemblyProvider">An <see cref="IResourceAssemblyProvider"/> instance that should be used to determine which assemblies to scan for embedded views.</param>
/// <summary>
/// Returns an <see cref="ViewLocationResult"/> instance for all the views that could be located by the provider.
/// </summary>
/// <param name="supportedViewExtensions">An <see cref="IEnumerable{T}"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ViewLocationResult"/> instances for the located views.</returns>
/// <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
/// <summary>
/// Returns an <see cref="ViewLocationResult"/> instance for all the views matching the viewName that could be located by the provider.
/// </summary>
/// <param name="supportedViewExtensions">An <see cref="IEnumerable{T}"/> instance, containing the view engine file extensions that is supported by the running instance of Nancy.</param>
/// <param name="viewName">The name of the view to try and find</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ViewLocationResult"/> instances for the located views.</returns>
/// <remarks>If no views could be located, this method should return an empty enumerable, never <see langword="null"/>.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\ViewEngineApplicationStartup.cs
/// <summary>
/// Calls the initialize method on all <see cref="IViewEngine"/> implementations, at application startup.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ViewEngineApplicationStartup"/> class, with the
/// provided <paramref name="viewEngines"/>, <paramref name="viewCache"/> and <paramref name="viewLocator"/>.
/// </summary>
/// <param name="viewEngines">The available view engines.</param>
/// <param name="viewCache">The view cache.</param>
/// <param name="viewLocator">The view locator.</param>
/// <summary>
/// Perform any initialisation tasks
/// </summary>
/// <param name="pipelines">Application pipelines</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\ViewEngineStartupContext.cs
/// <summary>
/// Context passed to each view engine on startup
/// </summary>
/// <summary>
/// Gets the Nancy view cache - can be used to precompile views at startup
/// if necessary.
/// </summary>
/// <summary>
/// Gets the Nancy view locator
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\ViewLocationContext.cs
/// <summary>
/// The context for which a view is being located.
/// </summary>
/// <summary>
/// The module path of the <see cref="INancyModule"/> that is locating a view.
/// </summary>
/// <value>A <see cref="string"/> containing the module path.</value>
/// <summary>
/// The name of the <see cref="INancyModule"/> that is locating a view.
/// </summary>
/// <value>A <see cref="string"/> containing the name of the module.</value>
/// <summary>
/// The request/response context
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\ViewLocationResult.cs
/// <summary>
/// Contains the result of an attempt to locate a view.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ViewLocationResult"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ViewLocationResult"/> class.
/// </summary>
/// <param name="location">The location of where the view was found.</param>
/// <param name="name">The name of the view.</param>
/// <param name="extension">The file extension of the located view.</param>
/// <param name="contents">A <see cref="TextReader"/> that can be used to read the contents of the located view.</param>
/// <summary>
/// Gets a function that produces a reader for retrieving the contents of the view.
/// </summary>
/// <value>A <see cref="Func{T}"/> instance that can be used to produce a reader for retrieving the contents of the view.</value>
/// <summary>
/// Gets the extension of the view that was located.
/// </summary>
/// <value>A <see cref="string"/> containing the extension of the view that was located.</value>
/// <remarks>The extension should not contain a leading dot.</remarks>
/// <summary>
/// Gets the location of where the view was found.
/// </summary>
/// <value>A <see cref="string"/> containing the location of the view.</value>
/// <summary>
/// Gets the full name of the view that was found
/// </summary>
/// <value>A <see cref="string"/> containing the name of the view.</value>
/// <summary>
/// Gets a value indicating whether the current item is stale
/// </summary>
/// <returns>True if stale, false otherwise</returns>
/// <summary>
/// Indicates whether the current object is equal to another object of the same type.
/// </summary>
/// <returns><see langword="true"/> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.</returns>
/// <param name="other">An <see cref="ViewLocationResult"/> to compare with this instance.</param>
/// <summary>
/// Determines whether the specified <see cref="object"/> is equal to the current <see cref="object"/>.
/// </summary>
/// <returns><see langword="true"/> if the specified <see cref="object"/> is equal to the current <see cref="object"/>; otherwise, <see langword="false"/>.</returns>
/// <param name="obj">The <see cref="object"/> to compare with the current <see cref="object"/>.</param>
/// <summary>
/// Serves as a hash function for a particular type.
/// </summary>
/// <returns>A hash code for the current <see cref="ViewLocationResult"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\ViewNotFoundException.cs
/// <summary>
/// Exception that is thrown when a view could not be located.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ViewNotFoundException"/>.
/// </summary>
/// <param name="viewName">The name of the view that was being located.</param>
/// <param name="availableViewEngineExtensions">List of available view extensions that can be rendered by the available view engines.</param>
/// <param name="inspectedLocations">The locations that were inspected for the view.</param>
/// <param name="rootPathProvider">An <see cref="IRootPathProvider"/> instance.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ViewNotFoundException"/>.
/// </summary>
/// <param name="viewName">The name of the view that was being located.</param>
/// <param name="availableViewEngineExtensions">List of available view extensions that can be rendered by the available view engines.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ViewNotFoundException"/>
/// </summary>
/// <param name="msg">A message describing the problem</param>
/// <summary>
/// Gets a message that describes the current exception.
/// </summary>
/// <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\ViewRenderException.cs
/// <summary>
/// An exception that indicates the view could not be rendered
/// </summary>
/// <summary>
/// Create an instance of <see cref="ViewRenderException"/>
/// </summary>
/// <param name="msg">A description of the rendering problem</param>
/// <summary>
/// Create an instance of <see cref="ViewRenderException"/>
/// </summary>
/// <param name="msg">A description of the rendering problem</param>
/// <param name="innerException">The exception that is the cause of the current exception.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\SuperSimpleViewEngine\ISuperSimpleViewEngineMatcher.cs
/// <summary>
/// Matches and modifies the content of a rendered SuperSimpleViewEngine view.
/// </summary>
/// <summary>
/// Invokes the matcher on the content of the rendered view.
/// </summary>
/// <param name="content">The content of the rendered view.</param>
/// <param name="model">The model that was passed to the view.</param>
/// <param name="host">The <see cref="IViewEngineHost"/> host.</param>
/// <returns>The modified version of the view.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\SuperSimpleViewEngine\IViewEngineHost.cs
/// <summary>
/// Provides the view engine with utility functions for
/// encoding, locating partial view templates etc.
/// </summary>
/// <summary>
/// Context object of the host application.
/// </summary>
/// <value>An instance of the context object from the host.</value>
/// <summary>
/// Html "safe" encode a string
/// </summary>
/// <param name="input">Input string</param>
/// <returns>Encoded string</returns>
/// <summary>
/// Get the contents of a template
/// </summary>
/// <param name="templateName">Name/location of the template</param>
/// <param name="model">Model to use to locate the template via conventions</param>
/// <returns>Contents of the template, or null if not found</returns>
/// <summary>
/// Gets a uri string for a named route
/// </summary>
/// <param name="name">Named route name</param>
/// <param name="parameters">Parameters to use to expand the uri string</param>
/// <returns>Expanded uri string, or null if not found</returns>
/// <summary>
/// Expands a path to include any base paths
/// </summary>
/// <param name="path">Path to expand</param>
/// <returns>Expanded path</returns>
/// <summary>
/// Get the anti forgery token form element
/// </summary>
/// <returns>String containing the form element</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\SuperSimpleViewEngine\NancyViewEngineHost.cs
/// <summary>
/// Initializes a new instance of the <see cref="NancyViewEngineHost"/> class.
/// </summary>
/// <param name="renderContext">
/// The render context.
/// </param>
/// <summary>
/// Context object of the host application.
/// </summary>
/// <value>An instance of the context object from the host.</value>
/// <summary>
/// Html "safe" encode a string
/// </summary>
/// <param name="input">Input string</param>
/// <returns>Encoded string</returns>
/// <summary>
/// Get the contents of a template
/// </summary>
/// <param name="templateName">Name/location of the template</param>
/// <param name="model">Model to use to locate the template via conventions</param>
/// <returns>Contents of the template, or null if not found</returns>
/// <summary>
/// Gets a uri string for a named route
/// </summary>
/// <param name="name">Named route name</param>
/// <param name="parameters">Parameters to use to expand the uri string</param>
/// <returns>Expanded uri string, or null if not found</returns>
/// <summary>
/// Expands a path to include any base paths
/// </summary>
/// <param name="path">Path to expand</param>
/// <returns>Expanded path</returns>
/// <summary>
/// Get the anti forgery token form element
/// </summary>
/// <returns>String containing the form element</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngine.cs
/// <summary>
/// A super-simple view engine
/// </summary>
/// <summary>
/// Compiled Regex for viewbag substitutions
/// </summary>
/// <summary>
/// Compiled Regex for single substitutions
/// </summary>
/// <summary>
/// Compiled Regex for context subsituations
/// </summary>
/// <summary>
/// Compiled Regex for each blocks
/// </summary>
/// <summary>
/// Compiled Regex for each block current substitutions
/// </summary>
/// <summary>
/// Compiled Regex for if blocks
/// </summary>
/// <summary>
/// Compiled regex for partial blocks
/// </summary>
/// <summary>
/// Compiled RegEx for section block declarations
/// </summary>
/// <summary>
/// Compiled RegEx for section block contents
/// </summary>
/// <summary>
/// Compiled RegEx for master page declaration
/// </summary>
/// <summary>
/// Compiled RegEx for path expansion
/// </summary>
/// <summary>
/// Compiled RegEx for path expansion in attribute values
/// </summary>
/// <summary>
/// Compiled RegEx for the CSRF anti forgery token
/// </summary>
/// <summary>
/// View engine transform processors
/// </summary>
/// <summary>
/// View engine extensions
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="SuperSimpleViewEngine"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="SuperSimpleViewEngine"/> class, using
/// the provided <see cref="ISuperSimpleViewEngineMatcher"/> extensions.
/// </summary>
/// <param name="matchers">The matchers to use with the engine.</param>
/// <summary>
/// Renders a template
/// </summary>
/// <param name="template">The template to render.</param>
/// <param name="model">The model to user for rendering.</param>
/// <param name="host">The view engine host</param>
/// <returns>A string containing the expanded template.</returns>
/// <summary>
/// <para>
/// Gets a property value from the given model.
/// </para>
/// <para>
/// Anonymous types, standard types and ExpandoObject are supported.
/// Arbitrary dynamics (implementing IDynamicMetaObjectProvider) are not, unless
/// they also implement IDictionary string, object for accessing properties.
/// </para>
/// </summary>
/// <param name="model">The model.</param>
/// <param name="propertyName">The property name to evaluate.</param>
/// <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
/// <exception cref="ArgumentException">Model type is not supported.</exception>
/// <summary>
/// A property extractor for standard types.
/// </summary>
/// <param name="model">The model.</param>
/// <param name="propertyName">The property name.</param>
/// <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
/// <summary>
/// A property extractor designed for ExpandoObject, but also for any
/// type that implements IDictionary string object for accessing its
/// properties.
/// </summary>
/// <param name="model">The model.</param>
/// <param name="propertyName">The property name.</param>
/// <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
/// <summary>
/// Gets an IEnumerable of capture group values
/// </summary>
/// <param name="m">The match to use.</param>
/// <param name="groupName">Group name containing the capture group.</param>
/// <returns>IEnumerable of capture group values as strings.</returns>
/// <summary>
/// Gets a property value from a collection of nested parameter names
/// </summary>
/// <param name="model">The model containing properties.</param>
/// <param name="parameters">A collection of nested parameters (e.g. User, Name</param>
/// <returns>Tuple - Item1 being a bool for whether the evaluation was successful, Item2 being the value.</returns>
/// <summary>
/// Gets the predicate result for an If or IfNot block
/// </summary>
/// <param name="item">The item to evaluate</param>
/// <param name="properties">Property list to evaluate</param>
/// <param name="nullCheck">Whether to check for null, rather than straight boolean</param>
/// <returns>Bool representing the predicate result</returns>
/// <summary>
/// Returns the predicate result if the substitionObject is a valid bool
/// </summary>
/// <param name="substitutionObject">The substitution object.</param>
/// <param name="nullCheck"></param>
/// <returns>Bool value of the substitutionObject, or false if unable to cast.</returns>
/// <summary>
/// Returns the predicate result if the substitionObject is a valid ICollection
/// </summary>
/// <param name="substitutionObject">The substitution object.</param>
/// <returns>Bool value of the whether the ICollection has items, or false if unable to cast.</returns>
/// <summary>
/// Performs single @ViewBag.PropertyName substitutions.
/// </summary>
/// <param name="template">The template.</param>
/// <param name="model">This parameter is not used, the model is based on the "host.Context.ViewBag".</param>
/// <param name="host">View engine host</param>
/// <returns>Template with @ViewBag.PropertyName blocks expanded.</returns>
/// <summary>
/// Performs single @Model.PropertyName substitutions.
/// </summary>
/// <param name="template">The template.</param>
/// <param name="model">The model.</param>
/// <param name="host">View engine host</param>
/// <returns>Template with @Model.PropertyName blocks expanded.</returns>
/// <summary>
/// Performs single @Context.PropertyName substitutions.
/// </summary>
/// <param name="template">The template.</param>
/// <param name="model">The model.</param>
/// <param name="host">View engine host</param>
/// <returns>Template with @Context.PropertyName blocks expanded.</returns>
/// <summary>
/// Performs @Each.PropertyName substitutions
/// </summary>
/// <param name="template">The template.</param>
/// <param name="model">The model.</param>
/// <param name="host">View engine host</param>
/// <returns>Template with @Each.PropertyName blocks expanded.</returns>
/// <summary>
/// Expand a @Current match inside an @Each iterator
/// </summary>
/// <param name="contents">Contents of the @Each block</param>
/// <param name="item">Current item from the @Each enumerable</param>
/// <param name="host">View engine host</param>
/// <returns>String result of the expansion of the @Each.</returns>
/// <summary>
/// Performs @If.PropertyName and @IfNot.PropertyName substitutions
/// </summary>
/// <param name="template">The template.</param>
/// <param name="model">The model.</param>
/// <param name="host">View engine host</param>
/// <returns>Template with @If.PropertyName @IfNot.PropertyName blocks removed/expanded.</returns>
/// <summary>
/// Perform path expansion substitutions
/// </summary>
/// <param name="template">The template.</param>
/// <param name="model">The model.</param>
/// <param name="host">View engine host</param>
/// <returns>Template with paths expanded</returns>
/// <summary>
/// Perform CSRF anti forgery token expansions
/// </summary>
/// <param name="template">The template.</param>
/// <param name="model">The model.</param>
/// <param name="host">View engine host</param>
/// <returns>Template with anti forgery tokens expanded</returns>
/// <summary>
/// Perform @Partial partial view expansion
/// </summary>
/// <param name="template">The template.</param>
/// <param name="model">The model.</param>
/// <param name="host">View engine host</param>
/// <returns>Template with partials expanded</returns>
/// <summary>
/// Invokes the master page rendering with current sections if necessary
/// </summary>
/// <param name="template">The template.</param>
/// <param name="model">The model.</param>
/// <param name="host">View engine host</param>
/// <returns>Template with master page applied and sections substituted</returns>
/// <summary>
/// Renders a master page - does a normal render then replaces any section tags with sections passed in
/// </summary>
/// <param name="masterTemplate">The master page template</param>
/// <param name="sections">Dictionary of section contents</param>
/// <param name="model">The model.</param>
/// <param name="host">View engine host</param>
/// <returns>Template with the master page applied and sections substituted</returns>
/// <summary>
/// Gets the master page name, if one is specified
/// </summary>
/// <param name="template">The template</param>
/// <returns>Master page name or String.Empty</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngineRegistrations.cs
/// <summary>
/// Performs application registrations for the SuperSimpleViewEngine.
/// </summary>
/// <summary>
/// Gets the type registrations to register for this startup task
/// </summary>
/// <summary>
/// Gets the collection registrations to register for this startup task
/// </summary>
/// <summary>
/// Gets the instance registrations to register for this startup task
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\ViewEngines\SuperSimpleViewEngine\SuperSimpleViewEngineWrapper.cs
/// <summary>
/// Nancy IViewEngine wrapper for the super simple view engine
/// </summary>
/// <summary>
/// Extensions that the view engine supports
/// </summary>
/// <summary>
/// The engine itself
/// </summary>
/// <summary>
/// Gets the extensions file extensions that are supported by the view engine.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> instance containing the extensions.</value>
/// <remarks>The extensions should not have a leading dot in the name.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="SuperSimpleViewEngineWrapper"/> class, using
/// the provided <see cref="ISuperSimpleViewEngineMatcher"/> extensions.
/// </summary>
/// <param name="matchers">The matchers to use with the engine.</param>
/// <summary>
/// Initialise the view engine (if necessary)
/// </summary>
/// <param name="viewEngineStartupContext">Startup context</param>
/// <summary>
/// Renders the view.
/// </summary>
/// <param name="viewLocationResult">A <see cref="ViewLocationResult"/> instance, containing information on how to get the view template.</param>
/// <param name="model">The model that should be passed into the view</param>
/// <param name="renderContext">An <see cref="IRenderContext"/> instance.</param>
/// <returns>A response</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Xml\DefaultXmlConfigurationProvider.cs
/// <summary>
/// Provides the default configuration for <see cref="XmlConfiguration"/>.
/// </summary>
/// <summary>
/// Gets the default configuration instance to register in the <see cref="INancyEnvironment"/>.
/// </summary>
/// <returns>The configuration instance</returns>
/// <remarks>Will return <see cref="XmlConfiguration.Default"/>.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Xml\XmlConfiguration.cs
/// <summary>
/// Configuration for XML serialization.
/// </summary>
/// <summary>
/// A default instance of the <see cref="XmlConfiguration"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="XmlConfiguration"/> class.
/// </summary>
/// <param name="encodingEnabled"><see langword="true" /> if encoding should be enabled, otherwise <see langword="false" />.</param>
/// <param name="defaultEncoding">The <see cref="Encoding"/> that should be used.</param>
/// <summary>
/// Gets whether character encoding should be enabled, or not, for XML responses.
/// </summary>
/// <value><see langword="true" /> if encoding is enabled, otherwise <see langword="false" />.</value>
/// <remarks>The default value is <see langword="false" />.</remarks>
/// <summary>
/// Gets the default encoding for XML responses.
/// </summary>
/// <value>The <see cref="Encoding"/> used by default.</value>
/// <remarks>The default value is <see langword="Encoding.UTF8" />.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy\Xml\XmlConfigurationExtensions.cs
/// <summary>
/// Contains <see cref="XmlConfiguration"/> configuration extensions for <see cref="INancyEnvironment"/>.
/// </summary>
/// <summary>
/// Configures <see cref="XmlConfiguration"/>.
/// </summary>
/// <param name="environment"><see cref="INancyEnvironment"/> that should be configured.</param>
/// <param name="enableEncoding"><see langword="true"/> if encoding should be enabled, otherwise <see langword="false"/>.</param>
/// <param name="defaultEncoding">The default <see cref="Encoding"/>.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Basic\BasicAuthentication.cs
/// <summary>
/// Nancy basic authentication implementation
/// </summary>
/// <summary>
/// Enables basic authentication for the application
/// </summary>
/// <param name="pipelines">Pipelines to add handlers to (usually "this")</param>
/// <param name="configuration">Forms authentication configuration</param>
/// <summary>
/// Enables basic authentication for a module
/// </summary>
/// <param name="module">Module to add handlers to (usually "this")</param>
/// <param name="configuration">Forms authentication configuration</param>
/// <summary>
/// Gets the pre request hook for loading the authenticated user's details
/// from the auth header.
/// </summary>
/// <param name="configuration">Basic authentication configuration to use</param>
/// <returns>Pre request hook delegate</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Basic\BasicAuthenticationConfiguration.cs
/// <summary>
/// Configuration options for forms authentication
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BasicAuthenticationConfiguration"/> class.
/// </summary>
/// <param name="userValidator">A valid instance of <see cref="IUserValidator"/> class</param>
/// <param name="realm">Basic authentication realm</param>
/// <param name="userPromptBehaviour">Control when the browser should be instructed to prompt for credentials</param>
/// <summary>
/// Gets the user validator
/// </summary>
/// <summary>
/// Gets the basic authentication realm
/// </summary>
/// <summary>
/// Determines when the browser should prompt the user for credentials
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Basic\BasicHttpExtensions.cs
/// <summary>
/// Some simple helpers give some nice authentication syntax in the modules.
/// </summary>
/// <summary>
/// Module requires basic authentication
/// </summary>
/// <param name="module">Module to enable</param>
/// <param name="configuration">Basic authentication configuration</param>
/// <summary>
/// Module requires basic authentication
/// </summary>
/// <param name="pipeline">Bootstrapper to enable</param>
/// <param name="configuration">Basic authentication configuration</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Basic\IUserValidator.cs
/// <summary>
/// Provides a way to validate the username and password
/// </summary>
/// <summary>
/// Validates the username and password
/// </summary>
/// <param name="username">Username</param>
/// <param name="password">Password</param>
/// <returns>A value representing the authenticated user, null if the user was not authenticated.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Basic\UserPromptBehaviour.cs
/// <summary>
/// Options to control when the browser prompts the user for credentials
/// </summary>
/// <summary>
/// Never present user with login prompt
/// </summary>
/// <summary>
/// Always present user with login prompt
/// </summary>
/// <summary>
/// Only prompt the user for credentials on non-ajax requests
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Basic.Tests\BasicAuthenticationConfigurationFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Basic.Tests\BasicAuthenticationFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Forms\FormsAuthentication.cs
/// <summary>
/// Nancy forms authentication implementation
/// </summary>
// TODO - would prefer not to hold this here, but the redirect response needs it
/// <summary>
/// Gets or sets the forms authentication cookie name
/// </summary>
/// <summary>
/// Enables forms authentication for the application
/// </summary>
/// <param name="pipelines">Pipelines to add handlers to (usually "this")</param>
/// <param name="configuration">Forms authentication configuration</param>
/// <summary>
/// Enables forms authentication for a module
/// </summary>
/// <param name="module">Module to add handlers to (usually "this")</param>
/// <param name="configuration">Forms authentication configuration</param>
/// <summary>
/// Creates a response that sets the authentication cookie and redirects
/// the user back to where they came from.
/// </summary>
/// <param name="context">Current context</param>
/// <param name="userIdentifier">User identifier guid</param>
/// <param name="cookieExpiry">Optional expiry date for the cookie (for 'Remember me')</param>
/// <param name="fallbackRedirectUrl">Url to redirect to if none in the querystring</param>
/// <returns>Nancy response with redirect.</returns>
/// <summary>
/// Logs the user in.
/// </summary>
/// <param name="userIdentifier">User identifier guid</param>
/// <param name="cookieExpiry">Optional expiry date for the cookie (for 'Remember me')</param>
/// <returns>Nancy response with status <see cref="HttpStatusCode.OK"/></returns>
/// <summary>
/// Logs the user out and redirects them to a URL
/// </summary>
/// <param name="context">Current context</param>
/// <param name="redirectUrl">URL to redirect to</param>
/// <returns>Nancy response</returns>
/// <summary>
/// Logs the user out.
/// </summary>
/// <returns>Nancy response</returns>
/// <summary>
/// Gets the pre request hook for loading the authenticated user's details
/// from the cookie.
/// </summary>
/// <param name="configuration">Forms authentication configuration to use</param>
/// <returns>Pre request hook delegate</returns>
/// <summary>
/// Gets the post request hook for redirecting to the login page
/// </summary>
/// <param name="configuration">Forms authentication configuration to use</param>
/// <returns>Post request hook delegate</returns>
/// <summary>
/// Gets the authenticated user GUID from the incoming request cookie if it exists
/// and is valid.
/// </summary>
/// <param name="context">Current context</param>
/// <param name="configuration">Current configuration</param>
/// <returns>Returns user guid, or Guid.Empty if not present or invalid</returns>
/// <summary>
/// Build the forms authentication cookie
/// </summary>
/// <param name="userIdentifier">Authenticated user identifier</param>
/// <param name="cookieExpiry">Optional expiry date for the cookie (for 'Remember me')</param>
/// <param name="configuration">Current configuration</param>
/// <returns>Nancy cookie instance</returns>
/// <summary>
/// Builds a cookie for logging a user out
/// </summary>
/// <param name="configuration">Current configuration</param>
/// <returns>Nancy cookie instance</returns>
/// <summary>
/// Encrypt and sign the cookie contents
/// </summary>
/// <param name="cookieValue">Plain text cookie value</param>
/// <param name="configuration">Current configuration</param>
/// <returns>Encrypted and signed string</returns>
/// <summary>
/// Generate a hmac for the encrypted cookie string
/// </summary>
/// <param name="encryptedCookie">Encrypted cookie string</param>
/// <param name="configuration">Current configuration</param>
/// <returns>Hmac byte array</returns>
/// <summary>
/// Decrypt and validate an encrypted and signed cookie value
/// </summary>
/// <param name="cookieValue">Encrypted and signed cookie value</param>
/// <param name="configuration">Current configuration</param>
/// <returns>Decrypted value, or empty on error or if failed validation</returns>
// Check the hmacs, but don't early exit if they don't match
// Only return the decrypted result if the hmac was ok
/// <summary>
/// Gets the redirect query string key from <see cref="FormsAuthenticationConfiguration"/>
/// </summary>
/// <param name="configuration">The forms authentication configuration.</param>
/// <returns>Redirect Querystring key</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Forms\FormsAuthenticationConfiguration.cs
/// <summary>
/// Configuration options for forms authentication
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="FormsAuthenticationConfiguration"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="FormsAuthenticationConfiguration"/> class.
/// </summary>
/// <param name="cryptographyConfiguration">Cryptography configuration</param>
/// <summary>
/// Gets or sets the forms authentication query string key for storing the return url
/// </summary>
/// <summary>
/// Gets or sets the redirect url for pages that require authentication
/// </summary>
/// <summary>
/// Gets or sets the username/identifier mapper
/// </summary>
/// <summary>
/// Gets or sets RequiresSSL property
/// </summary>
/// <value>The flag that indicates whether SSL is required</value>
/// <summary>
/// Gets or sets whether to redirect to login page during unauthorized access.
/// </summary>
/// <summary>
/// Gets or sets the domain of the auth cookie
/// </summary>
/// <summary>
/// Gets or sets the path of the auth cookie
/// </summary>
/// <summary>
/// Gets or sets the cryptography configuration
/// </summary>
/// <summary>
/// Ensures the configuration is valid or not.
/// </summary>
/// <exception cref="InvalidOperationException" />
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Forms\IUserMapper.cs
/// <summary>
/// Provides a mapping between forms auth guid identifiers and
/// real usernames
/// </summary>
/// <summary>
/// Get the real username from an identifier
/// </summary>
/// <param name="identifier">User identifier</param>
/// <param name="context">The current NancyFx context</param>
/// <returns>Matching populated IUserIdentity object, or empty</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Forms\ModuleExtensions.cs
/// <summary>
/// Module extensions for login/logout of forms auth
/// </summary>
/// <summary>
/// Logs the user in and returns either an empty 200 response for ajax requests, or a redirect response for non-ajax. <seealso cref="RequestExtensions.IsAjaxRequest"/>
/// </summary>
/// <param name="module">Nancy module</param>
/// <param name="userIdentifier">User identifier guid</param>
/// <param name="cookieExpiry">Optional expiry date for the cookie (for 'Remember me')</param>
/// <param name="fallbackRedirectUrl">Url to redirect to if none in the querystring</param>
/// <returns>Nancy response with redirect if request was not ajax, otherwise with OK.</returns>
/// <summary>
/// Logs the user in with the given user guid and redirects.
/// </summary>
/// <param name="module">Nancy module</param>
/// <param name="userIdentifier">User identifier guid</param>
/// <param name="cookieExpiry">Optional expiry date for the cookie (for 'Remember me')</param>
/// <param name="fallbackRedirectUrl">Url to redirect to if none in the querystring</param>
/// <returns>Nancy response instance</returns>
/// <summary>
/// Logs the user in with the given user guid and returns ok response.
/// </summary>
/// <param name="module">Nancy module</param>
/// <param name="userIdentifier">User identifier guid</param>
/// <param name="cookieExpiry">Optional expiry date for the cookie (for 'Remember me')</param>
/// <returns>Nancy response instance</returns>
/// <summary>
/// Logs the user out and returns either an empty 200 response for ajax requests, or a redirect response for non-ajax. <seealso cref="RequestExtensions.IsAjaxRequest"/>
/// </summary>
/// <param name="module">Nancy module</param>
/// <param name="redirectUrl">URL to redirect to</param>
/// <returns>Nancy response with redirect if request was not ajax, otherwise with OK.</returns>
/// <summary>
/// Logs the user out and redirects
/// </summary>
/// <param name="module">Nancy module</param>
/// <param name="redirectUrl">URL to redirect to</param>
/// <returns>Nancy response instance</returns>
/// <summary>
/// Logs the user out without a redirect
/// </summary>
/// <param name="module">Nancy module</param>
/// <returns>Nancy response instance</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Forms.Tests\FormsAuthenticationConfigurationFixture.cs
// Given, When, Then
// Given
// When, Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Forms.Tests\FormsAuthenticationFixture.cs
// Given
// When
// Then
// Given
// When
// Then
//Given
//When
//Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
//Given
//When
//Then
// Given
// When
// Then
// Given
// When
// Then
//moo.com/";
//moo.com/";
//Given
//When
//Then
//Given
//When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Stateless\StatelessAuthentication.cs
/// <summary>
/// Nancy stateless authentication implementation
/// </summary>
/// <summary>
/// Enables stateless authentication for the application
/// </summary>
/// <param name="pipelines">Pipelines to add handlers to (usually "this")</param>
/// <param name="configuration">Stateless authentication configuration</param>
/// <summary>
/// Enables stateless authentication for a module
/// </summary>
/// <param name="module">Module to add handlers to (usually "this")</param>
/// <param name="configuration">Stateless authentication configuration</param>
/// <summary>
/// Gets the pre request hook for loading the authenticated user's details
/// from apikey given in request.
/// </summary>
/// <param name="configuration">Stateless authentication configuration to use</param>
/// <returns>Pre request hook delegate</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Authentication.Stateless\StatelessAuthenticationConfiguration.cs
/// <summary>
/// Configuration options for stateless authentication
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="StatelessAuthenticationConfiguration"/> class.
/// </summary>
/// <summary>
/// Gets a value indicating whether the configuration is valid or not.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Async\MainModule.cs
//nancyfx.org");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Async\Program.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication\AnotherVerySecureModule.cs
/// <summary>
/// A module that only people with SuperSecure clearance are allowed to access
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication\AuthenticationBootstrapper.cs
// In reality you would use a pre-built authentication/claims provider
// World's-worse-authentication (TM)
// Pull the username out of the querystring if it exists
// and build claims from it
// If status code comes back as Unauthorized then
// forward the user to the login page
/// <summary>
/// Build claims based on username
/// </summary>
/// <param name="userName">Current username</param>
/// <returns>IEnumerable of claims</returns>
// Only bob can have access to SuperSecure
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication\MainModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication\SecureModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication\Models\UserModel.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Basic\AuthenticationBootstrapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Basic\MainModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Basic\SecureModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Basic\UserValidator.cs
// Not recognised => anonymous.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Forms\FormsAuthBootstrapper.cs
// We don't call "base" here to prevent auto-discovery of
// types/dependencies
// Here we register our user mapper as a per-request singleton.
// As this is now per-request we could inject a request scoped
// database "context" or other request scoped services.
// At request startup we modify the request pipelines to
// include forms authentication - passing in our now request
// scoped user name mapper.
//
// The pipelines passed in here are specific to this request,
// so we can add/remove/update items in them as we please.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Forms\MainModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Forms\PartlySecureModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Forms\SecureModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Forms\UserDatabase.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Forms\Models\UserModel.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Forms.TestingDemo\LoginFixture.cs
// Given, When
// Given, When
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Forms.TestingDemo\TestBootstrapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Stateless\AuthModule.cs
//the Post["/login"] method is used mainly to fetch the api key for subsequent calls
//do something to destroy the api key, maybe?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Stateless\RootModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Stateless\SecureModule.cs
//by this time, the api key should have already been pulled out of our querystring
//and, using the api key, an identity assigned to our NancyContext
//Context.CurrentUser was set by StatelessAuthentication earlier in the pipeline
//return the secure information in a json response
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Stateless\StatelessAuthBootstrapper.cs
// At request startup we modify the request pipelines to
// include stateless authentication
//
// Configuring stateless authentication is simple. Just use the
// NancyContext to get the apiKey. Then, use the apiKey to get
// your user's identity.
//for now, we will pull the apiKey from the querystring,
//but you can pull it from any part of the NancyContext
//get the user identity however you choose to (for now, using a static class/method)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Stateless\UserDatabase.cs
//try to get a user from the "database" that matches the given username and password
//now that the user is validated, create an api key that can be used for subsequent requests
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Authentication.Stateless\Models\UserModel.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Bootstrapper.Aspnet\ApplicationDependencyClass.cs
/// <summary>
/// A module dependency that will have an application lifetime scope.
/// </summary>
/// <summary>
/// Initializes a new instance of the RequestDependencyClass class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Bootstrapper.Aspnet\Bootstrapper.cs
// Register our app dependency as a normal singleton
// Register our per-request dependency as a per-request singleton
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Bootstrapper.Aspnet\DependencyModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Bootstrapper.Aspnet\IApplicationDependency.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Bootstrapper.Aspnet\IRequestDependency.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Bootstrapper.Aspnet\RequestDependencyClass.cs
/// <summary>
/// A module dependency that will have a per-request lifetime scope.
/// </summary>
/// <summary>
/// Initializes a new instance of the RequestDependencyClass class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Bootstrapper.Aspnet\Models\RatPack.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Bootstrapper.Aspnet\Models\RatPackWithDependencyText.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Caching\CachedResponse.cs
/// <summary>
/// Wraps a regular response in a cached response
/// The cached response invokes the old response and stores it as a string.
/// Obviously this only works for ASCII text based responses, so don't use this
/// in a real application :-)
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Caching\CachingBootstrapper.cs
/// <summary>
/// Check to see if we have a cache entry - if we do, see if it has expired or not,
/// if it hasn't then return it, otherwise return null;
/// </summary>
/// <param name="context">Current context</param>
/// <returns>Request or null</returns>
/// <summary>
/// Adds the current response to the cache if required
/// Only stores by Path and stores the response in a dictionary.
/// Do not use this as an actual cache :-)
/// </summary>
/// <param name="context">Current context</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Caching\MainModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Caching\CachingExtensions\ContextExtensions.cs
/// <summary>
/// Enable output caching for this route
/// </summary>
/// <param name="context">Current context</param>
/// <param name="seconds">Seconds to cache for</param>
/// <summary>
/// Disable the output cache for this route
/// </summary>
/// <param name="context">Current context</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ConstraintRouting\ConstraintRoutingModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ConstraintRouting\EmailRouteSegmentConstraint.cs
// Using @jchannon logic for validating e-mail address
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.CustomModule\DemoBootstrapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.CustomModule\MainModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.CustomModule\NancyRouteAttribute.cs
/// <summary>
/// The method for the route
/// </summary>
/// <summary>
/// The path for the route
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.CustomModule\UglifiedNancyModule.cs
/// <summary>
/// A custom INancyModule implementation that uses
/// attributes on methods (eugh!) to define routes.
/// Nobody in their right mind would write a web framework
/// that uses attributes for routing ;-)
/// </summary>
// Run through all the methods on the class looking
// for our attribute. If we were to do this for a real
// app we'd be checking parameters and return types etc
// but for simplicity we won't bother here.
/// <summary>
/// Wraps a sync delegate in a delegate that returns a task
/// </summary>
/// <param name="syncFunc">Sync delegate</param>
/// <returns>Task wrapped version</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\ApplicationDependencyClass.cs
/// <summary>
/// A module dependency that will have an application lifetime scope.
/// </summary>
/// <summary>
/// Initializes a new instance of the RequestDependencyClass class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\CustomStatusHandler.cs
/// <summary>
/// Check if the error handler can handle errors of the provided status code.
/// </summary>
/// <param name="statusCode">Status code</param>
/// <param name="context">The <see cref="NancyContext"/> instance of the current request.</param>
/// <returns>True if handled, false otherwise</returns>
/// <summary>
/// Handle the error code
/// </summary>
/// <param name="statusCode">Status code</param>
/// <param name="context">Current context</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\DefaultRouteMetadataProvider.cs
// Returns object so you can have you own application-specific
// metadata for your routes.
// Return the same metadata for all routes in this sample
// You would use the Path & Method of the routeDescription
// to determine route specific metadata
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\DemoBootstrapper.cs
// Overriding this just to show how it works, not actually necessary as autoregister
// takes care of it all.
// We don't call base because we don't want autoregister
// we just register our one known dependency as an application level singleton
// Override with a valid password (albeit a really really bad one!)
// to enable the diagnostics dashboard
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\DependencyModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\HereBeAResponseYouScurvyDog.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\IApplicationDependency.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\IRequestDependency.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\MainModule.cs
// Create a new one because we have an expiry to check
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\MyConfig.cs
/// <summary>
/// Sample custom configuration type. It is good practise (but not required)
/// to make your config objects immutable.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\MyConfigExtensions.cs
/// <summary>
/// Illustrates how you can create custom environment configurations by hanging
/// extension methods on INancyEnvironment and sticking custom configuration
/// objects into environment.
/// </summary>
// Using the full type name of the type to avoid collisions
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\Piratizer4000.cs
/// <summary>
/// Pirate dictionary be plundered from Davie Reed ( http://nifty.stanford.edu/2004/TalkLikeAPirate/pirate3.html )
/// Yarrr!
/// </summary>
// TODO - turn this into a non-horrible regex ;-)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\PngSerializer.cs
/// <summary>
/// If you request /negotiated with an accept header with the value image/png you will get an image back
/// </summary>
/// <summary>
/// Whether the serializer can serialize the content type
/// </summary>
/// <param name="mediaRange">Content type to serialise</param>
/// <returns>True if supported, false otherwise</returns>
/// <summary>
/// Gets the list of extensions that the serializer can handle.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> of extensions if any are available, otherwise an empty enumerable.</value>
/// <summary>
/// Serialize the given model with the given contentType
/// </summary>
/// <param name="mediaRange">Content type to serialize into</param>
/// <param name="model">Model to serialize</param>
/// <param name="outputStream">Output stream to serialize to</param>
/// <returns>Serialised object</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\RequestDependencyClass.cs
/// <summary>
/// A module dependency that will have a per-request lifetime scope.
/// </summary>
/// <summary>
/// Initializes a new instance of the RequestDependencyClass class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\Metadata\MainMetadataModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\Metadata\MyUberRouteMetadata.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\Models\Payload.cs
/// <summary>
/// Initializes a new instance of the <see cref="T:System.Object"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\Models\RatPack.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\Models\RatPackWithDependencyText.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\Models\Razor2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\Models\SomeViewModel.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Aspnet\Resources\Menu.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
/// <summary>
///   Overrides the current thread's CurrentUICulture property for all
///   resource lookups using this strongly typed resource class.
/// </summary>
/// <summary>
///   Looks up a localized string similar to This is the home link.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Owin\MainModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Owin\Startup.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Owin\Models\Index.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Self\Program.cs
//localhost:8888/nancy/"), new Uri("http://127.0.0.1:8898/nancy/"), new Uri("http://localhost:8889/nancytoo/")))
//localhost:8888/nancy/. Press enter to stop");
//localhost:8888/nancy/");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Self\TestModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Hosting.Self\Models\Index.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.MarkdownViewEngine\Model\BlogModel.cs
// invalid chars
// convert multiple spaces into one space   
// cut and trim it   
// hyphens   
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.MarkdownViewEngine\Modules\HomeModule.cs
//Allow for future posts to be lined up but don't show
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ModelBinding\CustomersModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ModelBinding\EventsModule.cs
// Blacklist location
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ModelBinding\JsonModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ModelBinding\MainModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ModelBinding\ModelBindingBootstrapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ModelBinding\XmlModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ModelBinding\Database\DB.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ModelBinding\ModelBinders\CustomerModelBinder.cs
/// <summary>
/// Sample model binder that manually binds customer models
/// </summary>
/// <summary>
/// Whether the binder can bind to the given model type
/// </summary>
/// <param name="modelType">Required model type</param>
/// <returns>True if binding is possible, false otherwise</returns>
/// <summary>
/// Bind to the given model type
/// </summary>
/// <param name="context">Current context</param>
/// <param name="modelType">Model type to bind to</param>
/// <param name="instance">Optional existing instance</param>
/// <param name="configuration">The <see cref="BindingConfig"/> that should be applied during binding.</param>
/// <param name="blackList">Blacklisted property names</param>
/// <returns>Bound model</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ModelBinding\Models\Customer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ModelBinding\Models\Event.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.ModelBinding\Models\User.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Razor.Localization\CustomResourceAssemblyProvider.cs
/// <summary>
/// Use a custom <see cref="IResourceAssemblyProvider"/> because the default one ignores any
/// assembly that starts with Nancy*. For normal applications this is not required to
/// implement.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Razor.Localization\DemoBootstrapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Razor.Localization\Modules\HomeModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Razor.Localization\Resources\Text.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
/// <summary>
///   Overrides the current thread's CurrentUICulture property for all
///   resource lookups using this strongly typed resource class.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Hello Sir.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.SparkViewEngine\MainModule.cs
/// <summary>
/// Initializes a new instance of the <see cref="INancyModule"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.SparkViewEngine\FifthElement\FifthElementModule.cs
/// <summary>
/// Initializes a new instance of the <see cref="INancyModule"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.SuperSimpleViewEngine\MainModule.cs
/// <summary>
/// Initializes a new instance of the <see cref="INancyModule"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.SuperSimpleViewEngine\Models\MainModel.cs
/// <summary>
/// Initializes a new instance of the <see cref="T:System.Object"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="T:System.Object"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Validation\CustomersModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Validation\MainModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Validation\ProductsModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Validation\ValidationBootstrapper.cs
// Disable auto-registration so that we can make sure that the
// application registrations are preformed correctly by each of
// the validation projects. This is for testing purposes only
// and is not required to perform in your own project.
//base.ConfigureApplicationContainer(container);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Validation\Database\DB.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Validation\Models\Customer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Validation\Models\OddLengthStringAttribute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Validation\Models\OddLengthStringAttributeAdapter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Demo.Validation\Models\Product.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Embedded\Conventions\EmbeddedStaticContentConventionBuilder.cs
/// <summary>
/// Adds a directory-based convention for embedded static convention.
/// </summary>
/// <param name="requestedPath">The path that should be matched with the request.</param>
/// <param name="contentPath">The path to where the content is stored in your application, relative to the root. If this is <see langword="null" /> then it will be the same as <paramref name="requestedPath"/>.</param>
/// <param name="allowedExtensions">A list of extensions that is valid for the conventions. If not supplied, all extensions are valid.</param>
/// <returns>A <see cref="EmbeddedFileResponse"/> instance for the requested embedded static contents if it was found, otherwise <see langword="null"/>.</returns>
// Resolve relative paths by using c:\ as a fake root path
/// <summary>
/// Returns whether the given filename is contained within the content folder
/// </summary>
/// <param name="contentRootPath">Content root path</param>
/// <param name="fileName">Filename requested</param>
/// <returns>True if contained within the content root, false otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Embedded.Tests\Unit\EmbeddedStaticContentConventionBuilderFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Encryption.MachineKey\MachineKeyCryptographyConfigurations.cs
/// <summary>
/// Helpers for creating crypto configs from machine.config crypto types
/// </summary>
/// <summary>
/// Gets the default configuration for machinekey encryption.
/// Uses the machine key for both encryption and hmac generation
/// </summary>
/// <summary>
/// Gets the configuration to use machine key for HMAC, but no encryption
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Encryption.MachineKey\MachineKeyEncryptionProvider.cs
/// <summary>
/// An encryption provider that uses the ASP.Net MachineKey
/// </summary>
/// <summary>
/// Encrypt and base64 encode the string
/// </summary>
/// <param name="data">Data to encrypt</param>
/// <returns>Encrypted string</returns>
/// <summary>
/// Decrypt string
/// </summary>
/// <param name="data">Data to decrypt</param>
/// <returns>Decrypted string</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Encryption.MachineKey\MachineKeyHmacProvider.cs
/// <summary>
/// A HMAC provider using the ASP.Net Machine key
/// 
/// This is hacky as anything because of all kinds of horrible
/// internal sealed nonsense inside the framework.
/// </summary>
/// <summary>
/// Gets the length of the HMAC signature in bytes
/// </summary>
/// <summary>
/// Create a hmac from the given data
/// </summary>
/// <param name="data">Data to create hmac from</param>
/// <returns>Hmac bytes</returns>
/// <summary>
/// Create a hmac from the given data
/// </summary>
/// <param name="data">Data to create hmac from</param>
/// <returns>Hmac bytes</returns>
/// <summary>
/// Uses reflection to get the hmac length that machine key will generate
/// </summary>
// Yucky reflection because it doesn't expose this for some reason :(
/// <summary>
/// Converts a string of "hex bytes" to actual bytes.
/// We could just use the same method as .net does but
/// like a lot of useful things in .net, it's internal.
/// </summary>
/// <param name="data">String of hex bytes</param>
/// <returns>Actual byte array</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Encryption.MachineKey.Tests\MachineConfigEncryptionProviderFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Encryption.MachineKey.Tests\MachineKeyHmacProviderFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Aspnet\AspNetRootPathProvider.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Aspnet\BootstrapperEntry.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Aspnet\DefaultNancyAspNetBootstrapper.cs
/// <summary>
/// TinyIoC ASP.Net Bootstrapper
/// No child container support because per-request is handled by the AsPerRequestSingleton option
/// </summary>
/// <summary>
/// Gets the diagnostics for initialisation
/// </summary>
/// <returns>IDiagnostics implementation</returns>
/// <summary>
/// Gets all request startup tasks
/// </summary>
/// <summary>
/// Gets all registered startup tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IApplicationStartup"/> instances. </returns>
/// <summary>
/// Resolves all request startup tasks
/// </summary>
/// <param name="container">Container to use</param>
/// <param name="requestStartupTypes">Types to register - not used</param>
/// <returns>An <see cref="System.Collections.Generic.IEnumerable{T}"/> instance containing <see cref="IRequestStartup"/> instances.</returns>
/// <summary>
/// Gets all registered application registration tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IRegistrations"/> instances.</returns>
/// <summary>
/// Get all NancyModule implementation instances - should be multi-instance
/// </summary>
/// <param name="context">Current request context</param>
/// <returns>IEnumerable of INancyModule</returns>
/// <summary>
/// Retrieves a specific <see cref="INancyModule"/> implementation - should be per-request lifetime
/// </summary>
/// <param name="moduleType">Module type</param>
/// <param name="context">The current context</param>
/// <returns>The <see cref="INancyModule"/> instance</returns>
/// <summary>
/// Creates and initializes the request pipelines.
/// </summary>
/// <param name="context">The <see cref="NancyContext"/> used by the request.</param>
/// <returns>An <see cref="IPipelines"/> instance.</returns>
/// <summary>
/// Configures the container using AutoRegister followed by registration
/// of default INancyModuleCatalog and IRouteResolver.
/// </summary>
/// <param name="container">Container instance</param>
/// <summary>
/// Resolve INancyEngine
/// </summary>
/// <returns>INancyEngine implementation</returns>
/// <summary>
/// Create a default, unconfigured, container
/// </summary>
/// <returns>Container instance</returns>
/// <summary>
/// Register the bootstrapper's implemented types into the container.
/// This is necessary so a user can pass in a populated container but not have
/// to take the responsibility of registering things like INancyModuleCatalog manually.
/// </summary>
/// <param name="applicationContainer">Application container to register into</param>
/// <summary>
/// Registers an <see cref="INancyEnvironment"/> instance in the container.
/// </summary>
/// <param name="container">The container to register into.</param>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance to register.</param>
/// <summary>
/// Gets the <see cref="INancyEnvironmentConfigurator"/> used by the application.
/// </summary>
/// <returns>An <see cref="INancyEnvironmentConfigurator"/> instance.</returns>
/// <summary>
/// Get the <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <returns>An configured <see cref="INancyEnvironment"/> instance.</returns>
/// <remarks>The boostrapper must be initialised (<see cref="INancyBootstrapper.Initialise"/>) prior to calling this.</remarks>
/// <summary>
/// Register the default implementations of internally used types into the container as singletons
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="typeRegistrations">Type registrations to register</param>
/// <summary>
/// Register the various collections into the container as singletons to later be resolved
/// by IEnumerable{Type} constructor dependencies.
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="collectionTypeRegistrations">Collection type registrations to register</param>
/// <summary>
/// Register the given module types into the container
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="moduleRegistrationTypes">NancyModule types</param>
/// <summary>
/// Register the given instances into the container
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="instanceRegistrations">Instance registration types</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Aspnet\NancyFxSection.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Aspnet\NancyHandler.cs
/// <summary>
/// Bridges the communication between Nancy and ASP.NET based hosting.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyHandler"/> type for the specified <paramref name="engine"/>.
/// </summary>
/// <param name="engine">An <see cref="INancyEngine"/> instance, that should be used by the handler.</param>
/// <summary>
/// Processes the ASP.NET request with Nancy.
/// </summary>
/// <param name="httpContext">The <see cref="HttpContextBase"/> of the request.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Aspnet\NancyHttpRequestHandler.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Aspnet\NancyResponseStream.cs
/// <summary>
/// A wrapper around an AspNet OutputStream that defers .Flush() to the parent HttpResponseBase
/// </summary>
/// <summary>
/// Calls Flush() on the wrapped HttpResponseBase
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Aspnet\TinyIoCAspNetExtensions.cs
/// <summary>
/// Registers the dependency as per request lifetime
/// </summary>
/// <param name="registerOptions">Register options</param>
/// <returns>Register options</returns>
/// <summary>
/// Registers each item in the collection as per request lifetime
/// </summary>
/// <param name="registerOptions">Register options</param>
/// <returns>Register options</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Aspnet.Tests\NancyHandlerFixture.cs
//www.foo.com"));
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
//ihatedummydata.com/about"));
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self\AutomaticUrlReservationCreationFailureException.cs
/// <summary>
/// Exception for when automatic address reservation creation fails.
/// Provides the user with manual instructions.
/// </summary>
/// <summary>
/// Gets a message that describes the current exception.
/// </summary>
/// <returns>
/// The error message that explains the reason for the exception, or an empty string("").
/// </returns>
/// <filterpriority>1</filterpriority>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self\FileSystemRootPathProvider.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self\HostConfiguration.cs
/// <summary>
/// Host configuration for the self host
/// </summary>
/// <summary>
/// Gets or sets a property that determines if localhost uris are 
/// rewritten to htp://+:port/ style uris to allow for listening on 
/// all ports, but requiring either a url reservation, or admin
/// access
/// Defaults to true.
/// </summary>
/// <summary>
/// Configuration around automatically creating url reservations
/// </summary>
/// <summary>
/// Gets or sets a property that determines if Transfer-Encoding: Chunked is allowed
/// for the response instead of Content-Length (default: true).
/// </summary>
/// <summary>
/// Gets or sets a property that provides a callback to be called
/// if there's an unhandled exception in the self host.
/// Note: this will *not* be called for normal nancy Exceptions
/// that are handled by the Nancy handlers.
/// Defaults to writing to debug out.
/// </summary>
/// <summary>
/// Gets or sets a property that determines whether client certificates
/// are enabled or not.
/// When set to true the self host will request a client certificate if the 
/// request is running over SSL.
/// Defaults to false.
/// </summary>
/// <summary>
/// Gets or sets a property determining if base uri matching can fall back to just
/// using Authority (Schema + Host + Port) as base uri if it cannot match anything in
/// the known list. This should only be set to True if you have issues with port forwarding
/// (e.g. on Azure).
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self\IgnoredHeaders.cs
/// <summary>
///     A helper class that checks for a header against a list of headers that should be ignored
///     when populating the headers of an <see cref="T:System.Net.HttpListenerResponse"/> object.
/// </summary>
/// <summary>
///     Determines if a header is ignored when populating the headers of an
///     <see cref="T:System.Net.HttpListenerResponse"/> object.
/// </summary>
/// <param name="headerName">The name of the header.</param>
/// <returns><c>true</c> if the header is ignored; otherwise, <c>false</c>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self\NancyHost.cs
/// <summary>
/// Allows to host Nancy server inside any application - console or windows service.
/// </summary>
/// <remarks>
/// NancyHost uses <see cref="System.Net.HttpListener"/> internally. Therefore, it requires full .net 4.0 profile (not client profile)
/// to run. <see cref="Start"/> will launch a thread that will listen for requests and then process them. Each request is processed in
/// its own execution thread. NancyHost needs <see cref="SerializableAttribute"/> in order to be used from another appdomain under
/// mono. Working with AppDomains is necessary if you want to unload the dependencies that come with NancyHost.
/// </remarks>
/// <summary>
/// Initializes a new instance of the <see cref="NancyHost"/> class for the specified <paramref name="baseUris"/>.
/// Uses the default configuration
/// </summary>
/// <param name="baseUris">The <see cref="Uri"/>s that the host will listen to.</param>
/// <summary>
/// Initializes a new instance of the <see cref="NancyHost"/> class for the specified <paramref name="baseUris"/>.
/// Uses the specified configuration.
/// </summary>
/// <param name="baseUris">The <see cref="Uri"/>s that the host will listen to.</param>
/// <param name="configuration">Configuration to use</param>
/// <summary>
/// Initializes a new instance of the <see cref="NancyHost"/> class for the specified <paramref name="baseUris"/>, using
/// the provided <paramref name="bootstrapper"/>.
/// Uses the default configuration
/// </summary>
/// <param name="bootstrapper">The bootstrapper that should be used to handle the request.</param>
/// <param name="baseUris">The <see cref="Uri"/>s that the host will listen to.</param>
/// <summary>
/// Initializes a new instance of the <see cref="NancyHost"/> class for the specified <paramref name="baseUris"/>, using
/// the provided <paramref name="bootstrapper"/>.
/// Uses the specified configuration.
/// </summary>
/// <param name="bootstrapper">The bootstrapper that should be used to handle the request.</param>
/// <param name="configuration">Configuration to use</param>
/// <param name="baseUris">The <see cref="Uri"/>s that the host will listen to.</param>
/// <summary>
/// Initializes a new instance of the <see cref="NancyHost"/> class for the specified <paramref name="baseUri"/>, using
/// the provided <paramref name="bootstrapper"/>.
/// Uses the default configuration
/// </summary>
/// <param name="baseUri">The <see cref="Uri"/> that the host will listen to.</param>
/// <param name="bootstrapper">The bootstrapper that should be used to handle the request.</param>
/// <summary>
/// Initializes a new instance of the <see cref="NancyHost"/> class for the specified <paramref name="baseUri"/>, using
/// the provided <paramref name="bootstrapper"/>.
/// Uses the specified configuration.
/// </summary>
/// <param name="baseUri">The <see cref="Uri"/> that the host will listen to.</param>
/// <param name="bootstrapper">The bootstrapper that should be used to handle the request.</param>
/// <param name="configuration">Configuration to use</param>
/// <summary>
/// Stops the host if it is running.
/// </summary>
/// <summary>
/// Start listening for incoming requests with the given configuration
/// </summary>
// if the listener fails to start, it gets disposed;
// so we need a new one, each time.
/// <summary>
/// Stop listening for incoming requests.
/// </summary>
// NOTE: For HTTP/2 we want fieldCount = 1,
// otherwise (HTTP/1.0 and HTTP/1.1) we want fieldCount = 2
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self\NetSh.cs
/// <summary>
/// Executes NetSh commands
/// </summary>
/// <summary>
/// Add a url reservation
/// </summary>
/// <param name="url">Url to add</param>
/// <param name="user">User to add the reservation for</param>
/// <returns>True if successful, false otherwise.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self\UacHelper.cs
/// <summary>
/// Helpers for UAC
/// </summary>
/// <summary>
/// Run an executable elevated
/// </summary>
/// <param name="file">File to execute</param>
/// <param name="args">Arguments to pass to the executable</param>
/// <returns>True if successful, false otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self\UriExtensions.cs
/// <summary>
/// Extension methods for working with <see cref="Uri"/> instances.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self\UrlReservations.cs
/// <summary>
/// Configuration for automatic url reservation creation
/// </summary>
/// <summary>
/// Gets or sets a value indicating whether url reservations
/// are automatically created when necessary.
/// Defaults to false.
/// </summary>
/// <summary>
/// Gets or sets a value for the user to use to create the url reservations for.
/// Defaults to the "Everyone" group.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self.Tests\IsCaseInstensitiveBaseOfFixture.cs
//host/path/path/file");
//host/path/path/");
//localhost/path/path/");
// Given, When
//host/path/path/file/"));
// Then
// Given, When
//host/path/path/file#fragment"));
// Then
// Given, When
//host/path/path/file/MoreDir/"));
// Then
// Given, When
//host/path/path/file/OtherFile?Query"));
// Then
// Given, When
//host/path/path/file/"));
// Then
// Given, When
//host/path/path/file"));
// Then
// Given, When
//host/path/path/file"));
// Then
// Given, When
//otherhost/path/path/file"));
// Then
// Given, When
//otherhost:8080/path/path/file"));
// Then
// Given, When
//Host/path/path/file"));
// Then
// Given, When
//host/path/path"));
// Then
// Given, When
//host/path/path?query"));
// Then
// Given, When
//host/path/path#Fragment"));
// Then
// Given, When
//host/path/path2/"));
// Then
// Given, When
//Host/path/path/"));
// Then
// Given, When
//host/Path/PATH/"));
// Then
// Given, When
//OtherHost/path/path/file"));
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self.Tests\MakeAppLocalPathFixture.cs
// Given
//host/base/");
// When
//host/base/rel"));
// Then
// Given
//host/base/");
// When
//host/base/"));
// Then
// Given
//host/base/");
// When
//host/base"));
// Then
// Given
//host/base/");
// When
//host/base/ReL"));
// Then
// Given
//host/");
// When
//host/rel/file"));
// Then
// Given
//host/");
// When
//host"));
// Then
// Given
//host/base/");
// When
//host/Base/rel"));
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self.Tests\NancySelfHostFixture.cs
/// <remarks>
/// These tests attempt to listen on port 1234, and so require either administrative
/// privileges or that a command similar to the following has been run with
/// administrative privileges:
/// <code>netsh http add urlacl url=http://+:1234/base user=DOMAIN\user</code>
/// See http://msdn.microsoft.com/en-us/library/ms733768.aspx for more information.
/// </remarks>
//localhost:1234/base/");
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Will throw because it returns 404 - don't care.
// Then
// Given
//localhost/"));
// When
// Then
//+:80/");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Hosting.Self.Tests\TestModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules\DefaultMetadataModuleConventions.cs
/// <summary>
/// This is a wrapper around the type
/// 'IEnumerable{Func{INancyModule, IEnumerable{IMetadataModule}, IMetadataModule}}' and its
/// only purpose is to make Ninject happy which was throwing an exception
/// when constructor injecting this type.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultMetadataModuleConventions"/> class.
/// </summary>
// 0 Handles: ./BlahModule -> ./BlahMetadataModule
// 1 Handles: ./BlahModule -> ./Metadata/BlahMetadataModule
// 2 Handles: ./Modules/BlahModule -> ../Metadata/BlahMetadataModule
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules\DefaultMetadataModuleResolver.cs
/// <summary>
/// Default implementation on how metadata modules are resolved by Nancy.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultMetadataModuleResolver"/> class.
/// </summary>
/// <param name="conventions">The conventions that the resolver should use to determine which metadata module to return.</param>
/// <param name="metadataModules">The metadata modules to use resolve against.</param>
/// <summary>
/// Resolves a metadata module instance based on the provided information.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/>.</param>
/// <returns>An <see cref="IMetadataModule"/> instance if one could be found, otherwise <see langword="null"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules\IMetadataModule.cs
/// <summary>
/// Defines facilities for obtaining metadata for a given <see cref="RouteDescription"/>.
/// </summary>
/// <summary>
/// Gets the <see cref="Type"/> of metadata the <see cref="IMetadataModule"/> returns.
/// </summary>
/// <summary>
/// Returns metadata for the given <see cref="RouteDescription"/>.
/// </summary>
/// <param name="description">The route to obtain metadata for.</param>
/// <returns>An instance of <see cref="MetadataType"/> if one exists, otherwise null.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules\IMetadataModuleResolver.cs
/// <summary>
/// Defines the functionality for resolving the metadata module for a given <see cref="INancyModule"/>.
/// </summary>
/// <summary>
/// Resolves a metadata module instance based on the provided information.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/>.</param>
/// <returns>An <see cref="IMetadataModule"/> instance if one could be found, otherwise <see langword="null"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules\MetadataModule.cs
/// <summary>
/// Base class containing the functionality for obtaining metadata for a given <see cref="RouteDescription"/>.
/// </summary>
/// <summary>
/// Gets <see cref="RouteMetadataBuilder"/> for describing routes.
/// </summary>
/// <value>A <see cref="RouteMetadataBuilder"/> instance.</value>
/// <summary>
/// Gets the <see cref="Type"/> of metadata based on <typeparamref name="TMetadata" />.
/// </summary>
/// <summary>
/// Returns metadata for the given <see cref="RouteDescription"/>.
/// </summary>
/// <param name="description">The route to obtain metadata for.</param>
/// <returns>An instance of <see cref="MetadataType"/> if one exists, otherwise null.</returns>
/// <summary>
/// Helper class for configuring a route metadata handler in a module.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RouteMetadataBuilder"/> class.
/// </summary>
/// <param name="metadataModule">The <see cref="MetadataModule{TMetadata}"/> that the route is being configured for.</param>
/// <summary>
/// Describes metadata for a route with the specified <paramref name="name"/>.
/// </summary>
/// <value>A delegate that is used to return the route metadata.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules\MetadataModuleRegistrations.cs
/// <summary>
/// Performs application registations for metadata modules.
/// </summary>
/// <summary>
/// Creates a new instance of the <see cref="MetadataModuleRegistrations"/> class, that performs
/// the default registrations of the metadata modules types.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules\MetadataModuleRouteMetadataProvider.cs
/// <summary>
/// Provides metadata for routes by obtaining it from <see cref="IMetadataModule"/> instances associated with <see cref="INancyModule"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="MetadataModuleRouteMetadataProvider"/> class.
/// </summary>
/// <param name="resolver">Resolves <see cref="IMetadataModule"/> instances.</param>
/// <summary>
/// Gets the <see cref="Type"/> of the metadata that is created by the provider.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> instance that the route is declared in.</param>
/// <param name="routeDescription">A <see cref="RouteDescription"/> for the route.</param>
/// <returns>A <see cref="Type"/> instance, or null if none are found.</returns>
/// <summary>
/// Gets the metadata for the provided route by obtaining it from an associated <see cref="IMetadataModule"/>.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> instance that the route is declared in.</param>
/// <param name="routeDescription">A <see cref="RouteDescription"/> for the route.</param>
/// <returns>An object representing the metadata for the given route, or null if none are found.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules.Tests\DefaultMetadataModuleConventionsFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules.Tests\FakeNancyMetadataModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules.Tests\FakeNancyModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules.Tests\MetadataModuleFixture.cs
// Given
// When
// Then
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules.Tests\MetadataModuleRouteMetadataProviderFixture.cs
// Given
// Then
// Given
// Then
// Given
// Then
// Given
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules.Tests\Metadata\FakeNancyMetadataModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Metadata.Modules.Tests\Modules\FakeNancyModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Owin\AppBuilderExtensions.cs
// ReSharper disable CheckNamespace
// ReSharper restore CheckNamespace
/// <summary>
/// OWIN extensions for Nancy
/// </summary>
/// <summary>
/// Adds Nancy to the OWIN pipeline.
/// </summary>
/// <param name="builder">The application builder.</param>
/// <param name="options">The Nancy options.</param>
/// <returns>IAppBuilder.</returns>
/// <summary>
/// Adds Nancy to the OWIN pipeline.
/// </summary>
/// <param name="builder">The application builder.</param>
/// <param name="configuration">A configuration builder action.</param>
/// <returns>IAppBuilder.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Owin.Tests\AppBuilderExtensionsFixture.cs
// Given
// When
//localhost/")).Result;
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\Accept.cs
/// <summary>
/// Constants for accept header media ranges
/// </summary>
/// <summary>
/// Json media range
/// </summary>
/// <value>application/json</value>
/// <summary>
/// Html media range
/// </summary>
/// <value>text/html</value>
/// <summary>
/// Text media range
/// </summary>
/// <value>>text/plain</value>
/// <summary>
/// Xml media range
/// </summary>
/// <value>application/xml</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\AndConnector.cs
/// <summary>
/// Initializes a new instance of the <see cref="AndConnector{TSource}"/> class.
/// </summary>
/// <param name="source">
/// Source object
/// </param>
/// <summary>
/// And
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\AssertEqualityComparer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\AssertException.cs
/// <summary>
/// Exception that is thrown by assert extensions.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AssertException"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="AssertException"/> class.
/// </summary>
/// <param name="message">The exception message.</param>
/// <summary>
/// Initializes a new instance of the <see cref="AssertException"/> class.
/// </summary>
/// <param name="message">The exception message.</param>
/// <param name="innerException">The inner exception.</param>
/// <summary>
/// Initializes a new instance of the <see cref="AssertException"/> class.
/// </summary>
/// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
/// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
/// <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
/// <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\AssertExtensions.cs
/// <summary>
/// Defines assert extensions for HTML validation.
/// </summary>
/// <summary>
/// Asserts that an element should exist at least once
/// </summary>
/// <summary>
/// Asserts that an element should exist at least once
/// </summary>
/// <summary>
/// Asserts that an element does not exist
/// </summary>
/// <summary>
/// Asserts that an element or element should exist one, and only once
/// </summary>
/// <summary>
/// Asserts that an element or element should exist exactly the specified number of times
/// <param name="expectedNumberOfOccurrences">The expected number of times the element should exist</param>
/// </summary>
/// <summary>
/// Asserts that an element should be of a specific class
/// </summary>
/// <summary>
/// Asserts that all elements should be of a specific class
/// </summary>
/// <summary>
/// Asserts that a node contains the specified text
/// </summary>
/// <summary>
/// Asserts that every node contains the specified text
/// </summary>
/// <summary>
/// Asserts that any node contains the specified text
/// </summary>
/// <summary>
/// Asserts that an element has a specific attribute
/// </summary>
/// <summary>
/// Asserts that an element has a specific attribute with a specified value
/// </summary>
/// <summary>
/// Asserts that an element has a specific attribute
/// </summary>
/// <summary>
/// Asserts that an element has a specific attribute with a specified value
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\Asserts.cs
/// <summary>
/// Contains method for verifying the results of a test.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\Browser.cs
/// <summary>
/// Provides the capability of executing a request with Nancy, using a specific configuration provided by an <see cref="INancyBootstrapper"/> instance.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Browser"/> class, with the
/// provided <see cref="ConfigurableBootstrapper"/> configuration.
/// </summary>
/// <param name="action">The <see cref="ConfigurableBootstrapper"/> configuration that should be used by the bootstrapper.</param>
/// <param name="defaults">The default <see cref="BrowserContext"/> that should be used in a all requests through this browser object.</param>
/// <summary>
/// Initializes a new instance of the <see cref="Browser"/> class.
/// </summary>
/// <param name="bootstrapper">A <see cref="INancyBootstrapper"/> instance that determines the Nancy configuration that should be used by the browser.</param>
/// <param name="defaults">The default <see cref="BrowserContext"/> that should be used in a all requests through this browser object.</param>
/// <summary>
/// Performs a DELETE request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a DELETE request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a GET request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a GET request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a HEAD request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a HEAD request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a OPTIONS request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a OPTIONS request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a PATCH request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a PATCH request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a POST request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a POST request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a PUT request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a PUT request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a request of the HTTP <paramref name="method"/>, on the given <paramref name="url"/>, using the
/// provided <paramref name="browserContext"/> configuration.
/// </summary>
/// <param name="method">HTTP method to send the request as.</param>
/// <param name="url">The URl of the request.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a request of the HTTP <paramref name="method"/>, on the given <paramref name="path"/>, using the
/// provided <paramref name="browserContext"/> configuration.
/// </summary>
/// <param name="method">HTTP method to send the request as.</param>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\BrowserContext.cs
/// <summary>
/// Defines the context that a <see cref="Browser"/> instance should run under.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BrowserContext"/> class,
/// with the provided <see cref="INancyEnvironment"/>.
/// </summary>
/// <param name="environment">An <see cref="INancyEnvironment"/> instance.</param>
/// <summary>
/// Gets the <see cref="INancyEnvironment"/> instance used by the <see cref="Browser"/>.
/// </summary>
/// <value>An <see cref="INancyEnvironment"/> instance.</value>
/// <summary>
/// Gets or sets the that should be sent with the HTTP request.
/// </summary>
/// <value>A <see cref="Stream"/> that contains the body that should be sent with the HTTP request.</value>
/// <summary>
/// Gets or sets the protocol that should be sent with the HTTP request.
/// </summary>
/// <value>A <see cref="string"/> contains the protocol that should be sent with the HTTP request..</value>
/// <summary>
/// Gets or sets the querystring
/// </summary>
/// <summary>
/// Gets or sets the user host name
/// </summary>
/// <summary>
/// Gets or sets the user host address
/// </summary>
/// <summary>
/// Gets or sets the ClientCertificate
/// </summary>
/// <summary>
/// Gets or sets the body string
/// </summary>
/// <summary>
/// Gets or sets the form values string
/// </summary>
/// <summary>
/// Gets or sets the headers that should be sent with the HTTP request.
/// </summary>
/// <value>An <see cref="IDictionary{TKey,TValue}"/> instance that contains the headers that should be sent with the HTTP request.</value>
/// <summary>
/// Adds a body to the HTTP request.
/// </summary>
/// <param name="body">A string that should be used as the HTTP request body.</param>
/// <summary>
/// Adds a body to the HTTP request.
/// </summary>
/// <param name="body">A string that should be used as the HTTP request body.</param>
/// <param name="contentType">Content type of the HTTP request body.</param>
/// <summary>
/// Adds a body to the HTTP request.
/// </summary>
/// <param name="body">A stream that should be used as the HTTP request body.</param>
/// <param name="contentType">Content type of the HTTP request body. Defaults to 'application/octet-stream'</param>
/// <summary>
/// Adds an application/x-www-form-urlencoded form value.
/// </summary>
/// <param name="key">The name of the form element.</param>
/// <param name="value">The value of the form element.</param>
/// <summary>
/// Adds a header to the HTTP request.
/// </summary>
/// <param name="name">The name of the header.</param>
/// <param name="value">The value of the header.</param>
/// <summary>
/// Configures the request to be sent over HTTP.
/// </summary>
/// <summary>
/// Configures the request to be sent over HTTPS.
/// </summary>
/// <summary>
/// Adds a query string entry
/// </summary>
/// <summary>
/// Sets the user host address.
/// </summary>
/// <summary>
/// Sets the host name.
/// </summary>
/// <param name="hostName">is the host name of request url string</param>
/// <summary>
/// Sets the ClientCertificate to a default embedded certificate
/// <remarks>The default certificate is embedded using the Nancy.Testing.Nancy Testing Cert.pfx resource name (secured with password "nancy")</remarks>
/// </summary>
/// <summary>
/// Sets the ClientCertificate
/// </summary>
/// <param name="certificate">the certificate in bytes</param>
/// <summary>
/// Sets the ClientCertificate
/// </summary>
/// <param name="certificate">the certificate</param>
/// <summary>
/// Find a certificate in a store on the computer.
/// </summary>
/// <param name="storeLocation">The location of the store (LocalMachine, CurrentUser)</param>
/// <param name="storeName">The name of the store (e.q. My)</param>
/// <param name="findType">By which field you want to find the certificate (Commonname, Thumbprint, etc)</param>
/// <param name="findBy">The "Common name" or "thumbprint" you are looking for</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\BrowserContextExtensions.cs
/// <summary>
/// Defines extensions for the <see cref="BrowserContext"/> type.
/// </summary>
/// <summary>
/// Adds a multipart/form-data encoded request body to the <see cref="Browser"/>, using the default boundary name.
/// </summary>
/// <param name="browserContext">The <see cref="BrowserContext"/> that the data should be added to.</param>
/// <param name="multipartFormData">The multipart/form-data encoded data that should be added.</param>
/// <summary>
/// Adds a multipart/form-data encoded request body to the <see cref="Browser"/>.
/// </summary>
/// <param name="browserContext">The <see cref="BrowserContext"/> that the data should be added to.</param>
/// <param name="multipartFormData">The multipart/form-data encoded data that should be added.</param>
/// <param name="boundaryName">The name of the boundary to be used</param>
/// <summary>
/// Adds a application/json request body to the <see cref="Browser"/>.
/// </summary>
/// <param name="browserContext">The <see cref="BrowserContext"/> that the data should be added to.</param>
/// <param name="model">The model to be serialized to json.</param>
/// <param name="serializer">Optionally opt in to using a different JSON serializer.</param>
/// <summary>
/// Adds a application/xml request body to the <see cref="Browser"/>.
/// </summary>
/// <param name="browserContext">The <see cref="BrowserContext"/> that the data should be added to.</param>
/// <param name="model">The model to be serialized to xml.</param>
/// <param name="serializer">Optionally opt in to using a different XML serializer.</param>
/// <summary>
/// Adds basic authorization credentials to the headers of the <see cref="Browser"/>.
/// </summary>
/// <param name="browserContext">The <see cref="BrowserContext"/> that the data should be added to.</param>
/// <param name="username">The username to be encoded.</param>
/// <param name="password">The password to be encoded.</param>
/// <summary>
/// Adds a cookie to the headers of the <see cref="Browser"/>.
/// </summary>
/// <param name="browserContext">The <see cref="BrowserContext"/> that the data should be added to.</param>
/// <param name="cookies">The collection of cookies to add to the cookie request header.</param>
/// <summary>
/// Adds a cookie to the headers of the <see cref="Browser"/>.
/// </summary>
/// <param name="browserContext">The <see cref="BrowserContext"/> that the data should be added to.</param>
/// <param name="key">The name of the cookie.</param>
/// <param name="value">The value of the cookie.</param>
/// <summary>
/// Adds a header to indicate this request is an "ajax request"
/// <seealso cref="RequestExtensions.IsAjaxRequest"/>
/// </summary>
/// <param name="browserContext">The <see cref="BrowserContext"/> that the data should be added to.</param>
/// <summary>
/// Adds forms authentication cookie to the headers of the <see cref="Browser"/>.
/// </summary>
/// <param name="browserContext">The <see cref="BrowserContext"/> that the data should be added to.</param>
/// <param name="userId">The user identifier</param>
/// <param name="formsAuthenticationConfiguration">Current configuration.</param>
/*")))
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\BrowserContextMultipartFormData.cs
/// <summary>
/// Contains the functionality for setting up a multipart/form-data encoded request body that should be used by an <see cref="Browser"/> instance.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BrowserContextMultipartFormData"/> class using the default boundary name
/// </summary>
/// <param name="configuration">The configuration that should be used to create the multipart/form-data encoded data.</param>
/// <summary>
/// Initializes a new instance of the <see cref="BrowserContextMultipartFormData"/> class.
/// </summary>
/// <param name="configuration">The configuration that should be used to create the multipart/form-data encoded data.</param>
/// <param name="boundaryName">Boundary name to be used</param>
/// <summary>
/// Gets the <see cref="Stream"/> that should be used by the HTTP request to pass in the multipart/form-data encoded values.
/// </summary>
/// <value>A <see cref="Stream"/> that contains the multipart/form-data encoded values.</value>
/// <summary>
/// Provides an API for configuring a multipart/form-data encoded request body.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BrowserContextMultipartFormDataConfigurator"/> class.
/// </summary>
/// <param name="body">The <see cref="Stream"/> that the values should be written to.</param>
/// <param name="boundary">The multipart/form-data boundary that should be used in the request body.</param>
/// <summary>
/// Adds a file to the request body.
/// </summary>
/// <param name="name">The name of the file http element that was used to upload the file.</param>
/// <param name="fileName">Name of the file.</param>
/// <param name="contentType">The mime type of file.</param>
/// <param name="file">The content of the file</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\BrowserResponse.cs
/// <summary>
/// The value that is returned from a route that was invoked by a <see cref="Browser"/> instance.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BrowserResponse"/> class.
/// </summary>
/// <param name="context">The <see cref="NancyContext"/> that <see cref="Browser"/> was invoked with.</param>
/// <param name="hostBrowser">Host browser object</param>
/// <param name="browserContext">An <see cref="BrowserContext"/> instance.</param>
/// <exception cref="ArgumentNullException">The value of the <paramref name="context"/> parameter was <see langword="null"/>.</exception>
/// <summary>
/// Gets the HTTP response body as a <see cref="BrowserResponseBodyWrapper"/> instance.
/// </summary>
/// <value>A <see cref="BrowserResponseBodyWrapper"/> instance.</value>
/// <summary>
/// Gets the content-type of the response.
/// </summary>
/// <value>A string containing the content-type.</value>
/// <summary>
/// Gets the context that the <see cref="Browser"/> was invoked with.
/// </summary>
/// <value>A <see cref="NancyContext"/> instance.</value>
/// <summary>
/// Gets the headers of the response.
/// </summary>
/// <value>A <see cref="IDictionary{TKey,TValue}"/> instance, that contains the response headers.</value>
/// <summary>
/// Gets the HTTP status code of the response.
/// </summary>
/// <value>A <see cref="HttpStatusCode"/> enumerable value.</value>
/// <summary>
/// Gets the description of the HTTP status code.
/// </summary>
/// <value>The HTTP status code description.</value>
/// <summary>
/// Gets the cookies from the response
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\BrowserResponseBodyWrapper.cs
/// <summary>
/// Wrapper for the HTTP response body that is used by the <see cref="BrowserResponse"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BrowserResponseBodyWrapper"/> class.
/// </summary>
/// <param name="response">The <see cref="Response"/> to wrap.</param>
/// <param name="browserContext">The <see cref="BrowserContext"/> of the request that generated the response.</param>
/// <summary>
/// Gets the content type of the wrapped response.
/// </summary>
/// <returns>A string containing the content type.</returns>
/// <summary>
/// Gets the <see cref="BrowserContext"/> of the request that generated the response.
/// </summary>
/// <value>A <see cref="BrowserContext"/> intance.</value>
/// <summary>
/// Gets a <see cref="QueryWrapper"/> for the provided <paramref name="selector"/>.
/// </summary>
/// <param name="selector">The CSS3 selector that should be applied.</param>
/// <returns>A <see cref="QueryWrapper"/> instance.</returns>
/// <summary>
/// Returns an enumerator that iterates through the collection.
/// </summary>
/// <returns>A <see cref="IEnumerator{T}"/> that can be used to iterate through the collection.</returns>
/// <summary>
/// Returns an enumerator that iterates through a collection.
/// </summary>
/// <returns>An <see cref="IEnumerator{T}"/> object that can be used to iterate through the collection.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\BrowserResponseBodyWrapperExtensions.cs
/// <summary>
/// Extension method for formatting the contents of a <see cref="BrowserResponseBodyWrapper"/>.
/// </summary>
/// <summary>
/// Gets the HTTP response body wrapped in a <see cref="Stream"/>.
/// </summary>
/// <param name="bodyWrapper">An instance of the <see cref="BrowserResponseBodyWrapper"/> that the extension should be invoked on.</param>
/// <returns>A <see cref="Stream"/> representation of the HTTP response body.</returns>
/// <summary>
/// Gets the HTTP response body wrapped in a string.
/// </summary>
/// <param name="bodyWrapper">An instance of the <see cref="BrowserResponseBodyWrapper"/> that the extension should be invoked on.</param>
/// <value>A string containing the HTTP response body.</value>
/// <summary>
/// Gets the HTTP response body as a <see cref="XmlDocument"/>
/// </summary>
/// <param name="bodyWrapper">An instance of the <see cref="BrowserResponseBodyWrapper"/> that the extension should be invoked on.</param>
/// <value>A <see cref="XmlDocument"/> representation of the HTTP response body.</value>
/// <summary>
/// Gets the deserialized representation of the JSON in the response body using the default XML body deserializer.
/// </summary>
/// <typeparam name="TModel">The type that the JSON response body should be deserialized to.</typeparam>
/// <param name="bodyWrapper">An instance of the <see cref="BrowserResponseBodyWrapper"/> that the extension should be invoked on.</param>
/// <value>A <typeparamref name="TModel"/> instance representation of the HTTP response body.</value>
/// <summary>
/// Gets the deserialized representation of the XML in the response body using the default XML body deserializer.
/// </summary>
/// <typeparam name="TModel">The type that the XML response body should be deserialized to.</typeparam>
/// <param name="bodyWrapper">An instance of the <see cref="BrowserResponseBodyWrapper"/> that the extension should be invoked on.</param>
/// <value>A <typeparamref name="TModel"/> instance representation of the HTTP response body.</value>
/// <summary>
/// Gets the deserialized representation of the response body using the specified body deserializer.
/// </summary>
/// <typeparam name="TModel">The type that the response body should be deserialized to.</typeparam>
/// <param name="bodyWrapper">An instance of the <see cref="BrowserResponseBodyWrapper"/> that the extension should be invoked on.</param>
/// <param name="bodyDeserializer">An instance of the <see cref="IBodyDeserializer"/> that should be used to deserialize the response body.</param>
/// <value>A <typeparamref name="TModel"/> instance representation of the HTTP response body.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\BrowserResponseExtensions.cs
/// <summary>
/// Defines extensions for the <see cref="BrowserResponse"/> type.
/// </summary>
/// <summary>
/// Asserts that a redirect to a certain location took place.
/// </summary>
/// <param name="response">The <see cref="BrowserResponse"/> that the assert should be made on.</param>
/// <param name="location">The location that should have been redirected to.</param>
/// <param name="stringComparer">The string comparer that should be used by the assertion. The default value is <see cref="StringComparison.Ordinal"/>.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\ConfigurableBootstrapper.cs
/// <summary>
/// A Nancy bootstrapper that can be configured with either Type or Instance overrides for all Nancy types.
/// </summary>
/// <summary>
/// Test project name suffixes that will be stripped from the test name project
/// in order to try and resolve the name of the assembly that is under test so
/// that all of its references can be loaded into the application domain.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConfigurableBootstrapper"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConfigurableBootstrapper"/> class.
/// </summary>
/// <param name="configuration">The configuration that should be used by the bootstrapper.</param>
/// <summary>
/// Configures the Nancy environment
/// </summary>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance to configure</param>
/// <summary>
/// Initialise the bootstrapper - can be used for adding pre/post hooks and
/// any other initialisation tasks that aren't specifically container setup
/// related
/// </summary>
/// <param name="container">Container instance for resolving types if required.</param>
/// <summary>
/// Initialise the request - can be used for adding pre/post hooks and
/// any other per-request initialisation tasks that aren't specifically container setup
/// related
/// </summary>
/// <param name="container">Container</param>
/// <param name="pipelines">Current pipelines</param>
/// <param name="context">Current context</param>
/// <summary>
/// Get all NancyModule implementation instances
/// </summary>
/// <param name="context">The current context</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="INancyModule"/> instances.</returns>
/// <summary>
/// Get the <see cref="INancyEnvironment"/> instance.
/// </summary>
/// <returns>An configured <see cref="INancyEnvironment"/> instance.</returns>
/// <remarks>The boostrapper must be initialised (<see cref="INancyBootstrapper.Initialise"/>) prior to calling this.</remarks>
/// <summary>
/// Retrieve a specific module instance from the container
/// </summary>
/// <param name="container">Container to use</param>
/// <param name="moduleType">Type of the module</param>
/// <returns>INancyModule instance</returns>
/// <summary>
/// Nancy internal configuration
/// </summary>
/// <summary>
/// Nancy conventions
/// </summary>
/// <summary>
/// Gets all available module types
/// </summary>
/// <summary>
/// Gets the available view engine types
/// </summary>
/// <summary>
/// Gets the available custom model binders
/// </summary>
/// <summary>
/// Gets the available custom type converters
/// </summary>
/// <summary>
/// Gets the available custom body deserializers
/// </summary>
/// <summary>
/// Gets all startup tasks
/// </summary>
/// <summary>
/// Gets all request startup tasks
/// </summary>
/// <summary>
/// Gets the root path provider
/// </summary>
/// <summary>
/// Configures the container using AutoRegister followed by registration
/// of default INancyModuleCatalog and IRouteResolver.
/// </summary>
/// <param name="container">Container instance</param>
/// <summary>
/// Creates a per request child/nested container
/// </summary>
/// <param name="context">Current context</param>
/// <returns>Request container instance</returns>
/// <summary>
/// Retrieve all module instances from the container
/// </summary>
/// <param name="container">Container to use</param>
/// <returns>Collection of INancyModule instances</returns>
/// <summary>
/// Gets the application level container
/// </summary>
/// <returns>Container instance</returns>
/// <summary>
/// Resolve INancyEngine
/// </summary>
/// <returns>INancyEngine implementation</returns>
/// <summary>
/// Gets the diagnostics for initialization
/// </summary>
/// <returns>IDiagnostics implementation</returns>
/// <summary>
/// Gets all registered startup tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IApplicationStartup"/> instances. </returns>
/// <summary>
/// Gets all registered request startup tasks
/// </summary>
/// <returns>An <see cref="System.Collections.Generic.IEnumerable{T}"/> instance containing <see cref="IRequestStartup"/> instances.</returns>
/// <summary>
/// Gets all registered application registration tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IRegistrations"/> instances.</returns>
/// <summary>
/// Register the bootstrapper's implemented types into the container.
/// This is necessary so a user can pass in a populated container but not have
/// to take the responsibility of registering things like INancyModuleCatalog manually.
/// </summary>
/// <param name="applicationContainer">Application container to register into</param>
/// <summary>
/// Register the default implementations of internally used types into the container as singletons
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="typeRegistrations">Type registrations to register</param>
/// <summary>
/// Register the various collections into the container as singletons to later be resolved
/// by IEnumerable{Type} constructor dependencies.
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="collectionTypeRegistrations">Collection type registrations to register</param>
/// <summary>
/// Register the given instances into the container
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="instanceRegistrations">Instance registration types</param>
/// <summary>
/// Register the given module types into the request container
/// </summary>
/// <param name="container">Container to register into</param>
/// <param name="moduleRegistrationTypes">NancyModule types</param>
/// <summary>
/// Gets the <see cref="INancyEnvironmentConfigurator"/> used by th.
/// </summary>
/// <returns>An <see cref="INancyEnvironmentConfigurator"/> instance.</returns>
/// <summary>
/// Registers an <see cref="INancyEnvironment"/> instance in the container.
/// </summary>
/// <param name="container">The container to register into.</param>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance to register.</param>
/// <summary>
/// <para>
/// The pre-request hook
/// </para>
/// <para>
/// The PreRequest hook is called prior to processing a request. If a hook returns
/// a non-null response then processing is aborted and the response provided is
/// returned.
/// </para>
/// </summary>
/// <summary>
/// <para>
/// The post-request hook
/// </para>
/// <para>
/// The post-request hook is called after the response is created. It can be used
/// to rewrite the response or add/remove items from the context.
/// </para>
/// </summary>
/// <summary>
/// <para>
/// The error hook
/// </para>
/// <para>
/// The error hook is called if an exception is thrown at any time during the pipeline.
/// If no error hook exists a standard InternalServerError response is returned
/// </para>
/// </summary>
/// <summary>
/// Provides an API for configuring a <see cref="ConfigurableBootstrapper"/> instance.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConfigurableBootstrapperConfigurator"/> class.
/// </summary>
/// <param name="bootstrapper">The bootstrapper that should be configured.</param>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IBinder"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IBinder"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the <see cref="INancyEnvironment"/>.
/// </summary>
/// <param name="configuration">The configuration to apply to the environment.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="INancyContextFactory"/>.
/// </summary>
/// <param name="contextFactory">The <see cref="INancyContextFactory"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// Configures the bootstrapper to create an <see cref="INancyContextFactory"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="INancyContextFactory"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="INancyDefaultConfigurationProvider"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRouteMetadataProvider"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided <see cref="INancyDefaultConfigurationProvider"/> types.
/// </summary>
/// <param name="defaultConfigurationProviders">The <see cref="INancyDefaultConfigurationProvider"/> types that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instances of <see cref="INancyDefaultConfigurationProvider"/>.
/// <param name="defaultConfigurationProvider">The <see cref="INancyDefaultConfigurationProvider"/> types that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instances of <see cref="INancyDefaultConfigurationProvider"/>.
/// </summary>
/// <param name="defaultConfigurationProviders">The <see cref="INancyDefaultConfigurationProvider"/> types that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided type as a dependency.
/// </summary>
/// <param name="type">The type of the dependency that should be used registered with the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to register the specified type as a dependency.
/// </summary>
/// <typeparam name="T">The type of the dependency that should be registered with the bootstrapper.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <remarks>This method will register the type for all the interfaces it implements and the type itself.</remarks>
/// <summary>
/// Configures the bootstrapper to use the provided instance as a dependency.
/// </summary>
/// <param name="instance">The dependency instance that should be used registered with the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <remarks>This method will register the instance for all the interfaces it implements and the type itself.</remarks>
/// <summary>
/// Configures the bootstrapper to register the specified types and instances as a dependencies.
/// </summary>
/// <param name="dependencies">An array of maps between the interfaces and instances that should be registered with the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to register the specified instances as a dependencies.
/// </summary>
/// <param name="dependencies">The instances of the dependencies that should be registered with the bootstrapper.</param>
/// <typeparam name="T">The type that the dependencies should be registered as.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided types as a dependency.
/// </summary>
/// <param name="dependencies">The types that should be used registered as dependencies with the bootstrapper.</param>
/// <typeparam name="T">The type that the dependencies should be registered as.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Enables the auto registration behavior of the bootstrapper
/// </summary>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IStatusCodeHandler"/>.
/// </summary>
/// <param name="statusCodeHandlers">The <see cref="IStatusCodeHandler"/> types that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IStatusCodeHandler"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IStatusCodeHandler"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="INancyEnvironmentConfigurator"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="INancyEnvironmentConfigurator"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="INancyEnvironmentConfigurator"/>.
/// </summary>
/// <param name="environmentConfigurator">The <see cref="INancyEnvironmentConfigurator"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="INancyEnvironmentFactory"/>.
/// </summary>
/// <param name="environmentFactory">The <see cref="INancyEnvironmentFactory"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="INancyEnvironmentFactory"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="INancyEnvironmentFactory"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IFieldNameConverter"/>.
/// </summary>
/// <param name="fieldNameConverter">The <see cref="IFieldNameConverter"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IFieldNameConverter"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IFieldNameConverter"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IModelBinderLocator"/>.
/// </summary>
/// <param name="modelBinderLocator">The <see cref="IModelBinderLocator"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IModelBinderLocator"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IModelBinderLocator"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create a <see cref="INancyModule"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="INancyModule"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to register the provided <see cref="INancyModule"/> instance.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> instance to register.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create <see cref="INancyModule"/> instances of the specified types.
/// </summary>
/// <param name="modules">The types of the <see cref="INancyModule"/> that the bootstrapper should use.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="INancyEngine"/>.
/// </summary>
/// <param name="engine">The <see cref="INancyEngine"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="INancyEngine"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="INancyEngine"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="INancyModuleBuilder"/>.
/// </summary>
/// <param name="nancyModuleBuilder">The <see cref="INancyModuleBuilder"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="INancyModuleBuilder"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="INancyModuleBuilder"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRenderContextFactory"/>.
/// </summary>
/// <param name="renderContextFactory">The <see cref="IRenderContextFactory"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRenderContextFactory"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRenderContextFactory"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRequestTraceFactory"/>.
/// </summary>
/// <param name="requestTraceFactory">The <see cref="IRequestTraceFactory"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRequestTraceFactory"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRequestTraceFactory"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IResponseFormatterFactory"/>.
/// </summary>
/// <param name="responseFormatterFactory">The <see cref="IResponseFormatterFactory"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IResponseFormatterFactory"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IResponseFormatterFactory"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRouteCache"/>.
/// </summary>
/// <param name="routeCache">The <see cref="IRouteCache"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRouteCache"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRouteCache"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRouteCacheProvider"/>.
/// </summary>
/// <param name="routeCacheProvider">The <see cref="IRouteCacheProvider"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRouteCacheProvider"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRouteCacheProvider"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRootPathProvider"/>.
/// </summary>
/// <param name="rootPathProvider">The <see cref="IRootPathProvider"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRootPathProvider"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRootPathProvider"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRoutePatternMatcher"/>.
/// </summary>
/// <param name="routePatternMatcher">The <see cref="IRoutePatternMatcher"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRouteInvoker"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRouteInvoker"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRouteInvoker"/>.
/// </summary>
/// <param name="routeInvoker">The <see cref="IRouteInvoker"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRoutePatternMatcher"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRoutePatternMatcher"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRouteResolver"/>.
/// </summary>
/// <param name="routeResolver">The <see cref="IRouteResolver"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRouteResolver"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRouteResolver"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IModelValidatorLocator"/>.
/// </summary>
/// <param name="modelValidatorLocator">The <see cref="IModelValidatorLocator"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IModelValidatorLocator"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IModelValidatorLocator"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRequestDispatcher"/>.
/// </summary>
/// <param name="requestDispatcher">The <see cref="IRequestDispatcher"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRequestDispatcher"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRequestDispatcher"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IResourceAssemblyProvider"/>.
/// </summary>
/// <param name="resourceAssemblyProvider">The <see cref="IResourceAssemblyProvider"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IResourceAssemblyProvider"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IResourceAssemblyProvider"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IResourceReader"/>.
/// </summary>
/// <param name="resourceReader">The <see cref="IResourceReader"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IResourceReader"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IResourceReader"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRouteDescriptionProvider"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRouteDescriptionProvider"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRouteDescriptionProvider"/>.
/// </summary>
/// <param name="routeDescriptionProvider">The <see cref="IRouteDescriptionProvider"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRouteMetadataProvider"/>.
/// </summary>
/// <param name="routeMetadataProviders">The <see cref="IRouteMetadataProvider"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRouteMetadataProvider"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRouteMetadataProvider"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided <see cref="IRouteMetadataProvider"/> types.
/// </summary>
/// <param name="routeMetadataProviders">The <see cref="IRouteMetadataProvider"/> types that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instances of <see cref="IRouteMetadataProvider"/>.
/// </summary>
/// <param name="routeMetadataProviders">The <see cref="IRouteMetadataProvider"/> types that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRouteSegmentExtractor"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRouteSegmentExtractor"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRouteSegmentExtractor"/>.
/// </summary>
/// <param name="routeSegmentExtractor">The <see cref="IRouteSegmentExtractor"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IResponseProcessor"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IResponseProcessor"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided <see cref="IResponseProcessor"/> types.
/// </summary>
/// <param name="responseProcessors">The <see cref="IResponseProcessor"/> types that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRuntimeEnvironmentInformation"/>.
/// </summary>
/// <param name="runtimeEnvironmentInformation">The <see cref="IRuntimeEnvironmentInformation"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRuntimeEnvironmentInformation"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRuntimeEnvironmentInformation"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="ITextResource"/>.
/// </summary>
/// <param name="textResource">The <see cref="ITextResource"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="ITextResource"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="ITextResource"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IViewCache"/>.
/// </summary>
/// <param name="viewCache">The <see cref="IViewCache"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IViewCache"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IViewCache"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IViewEngine"/>.
/// </summary>
/// <param name="viewEngine">The <see cref="IViewEngine"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IViewEngine"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IViewEngine"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided <see cref="IViewEngine"/> types.
/// </summary>
/// <param name="viewEngines">The <see cref="IViewEngine"/> types that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IViewFactory"/>.
/// </summary>
/// <param name="viewFactory">The <see cref="IViewFactory"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IViewFactory"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IViewFactory"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IViewLocationProvider"/>.
/// </summary>
/// <param name="viewLocationProvider">The <see cref="IViewLocationProvider"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IViewLocationProvider"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IViewLocationProvider"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IViewLocator"/>.
/// </summary>
/// <param name="viewLocator">The <see cref="IViewLocator"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IViewLocator"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IViewLocator"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IViewResolver"/>.
/// </summary>
/// <param name="viewResolver">The <see cref="IViewResolver"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IViewResolver"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IViewResolver"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="ICsrfTokenValidator"/>.
/// </summary>
/// <param name="tokenValidator">The <see cref="ICsrfTokenValidator"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="ICsrfTokenValidator"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="ICsrfTokenValidator"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IObjectSerializer"/>.
/// </summary>
/// <param name="objectSerializer">The <see cref="IObjectSerializer"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IObjectSerializer"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IObjectSerializer"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use a specific serializer
/// </summary>
/// <typeparam name="T">Serializer type</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use specific serializers
/// </summary>
/// <param name="serializers">Collection of serializer types</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IDiagnostics"/>.
/// </summary>
/// <param name="diagnostics">The <see cref="IDiagnostics"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IDiagnostics"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IDiagnostics"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="ICultureService "/>.
/// </summary>
/// <param name="cultureService">The <see cref="ICultureService "/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="ICultureService"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="ICultureService"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="ICultureService "/>.
/// </summary>
/// <param name="staticContentProvider">The <see cref="IStaticContentProvider "/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IStaticContentProvider"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IStaticContentProvider"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRouteResolverTrie "/>.
/// </summary>
/// <param name="routeResolverTrie">The <see cref="IStaticContentProvider "/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRouteResolverTrie"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRouteResolverTrie"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="ITrieNodeFactory "/>.
/// </summary>
/// <param name="nodeFactory">The <see cref="ITrieNodeFactory "/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="ITrieNodeFactory"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="ITrieNodeFactory"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IRouteSegmentConstraint"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IRouteSegmentConstraint"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use specific route segment constraints.
/// </summary>
/// <param name="types">Collection of route segment constraint types.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IResponseNegotiator"/>.
/// </summary>
/// <param name="negotiator">The <see cref="IResponseNegotiator"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="IResponseNegotiator"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IResponseNegotiator"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to create an <see cref="ISerializerFactory"/> instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of the <see cref="ISerializerFactory"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IResponseNegotiator"/>.
/// </summary>
/// <param name="serializer">The <see cref="IResponseNegotiator"/> instance that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IApplicationStartup"/>.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IApplicationStartup"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided <see cref="IApplicationStartup"/> types.
/// </summary>
/// <param name="applicationStartupTypes">The <see cref="IApplicationStartup"/> types that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided instance of <see cref="IRequestStartup"/>.
/// </summary>
/// <typeparam name="T">The type of the <see cref="IApplicationStartup"/> that the bootstrapper should use.</typeparam>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Configures the bootstrapper to use the provided <see cref="IRequestStartup"/> types.
/// </summary>
/// <param name="requestStartupTypes">The <see cref="IRequestStartup"/> types that should be used by the bootstrapper.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Disables automatic registration of user-defined <see cref="IApplicationStartup"/> instances. It
/// will not prevent auto-registration of implementations bundled with Nancy.
/// </summary>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Disables automatic registration of user-defined <see cref="IRequestStartup"/> instances. It
/// will not prevent auto-registration of implementations bundled with Nancy.
/// </summary>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Adds a hook to the application startup pipeline. This can be called multiple times to add
/// more hooks.
/// </summary>
/// <param name="action">The pipeline hook.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Adds a hook to the request startup pipeline. This can be called multiple times to add
/// more hooks.
/// </summary>
/// <param name="action">The pipeline hook.</param>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Disables registrations performed by <see cref="IRegistrations"/> instances.
/// </summary>
/// <returns>A reference to the current <see cref="ConfigurableBootstrapperConfigurator"/>.</returns>
/// <summary>
/// Provides the functionality to register <see cref="INancyModule"/> instances in a <see cref="INancyModuleCatalog"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConfigurableModuleCatalog"/> class.
/// </summary>
/// <summary>
/// Get all NancyModule implementation instances - should be per-request lifetime
/// </summary>
/// <param name="context">The current context</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="INancyModule"/> instances.</returns>
/// <summary>
/// Retrieves a specific <see cref="INancyModule"/> implementation - should be per-request lifetime
/// </summary>
/// <param name="moduleType">Module type</param>
/// <param name="context">The current context</param>
/// <returns>The <see cref="INancyModule"/> instance</returns>
/// <summary>
/// Registers a <see cref="INancyModule"/> instance.
/// </summary>
/// <param name="module">The <see cref="INancyModule"/> instance to register.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\ConfigurableNancyModule.cs
/// <summary>
/// Provides a way to define a Nancy module though an API.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConfigurableNancyModule"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConfigurableNancyModule"/> class.
/// </summary>
/// <param name="closure">The configuration of the module.</param>
/// <summary>
/// Initializes a new instance of the <see cref="ConfigurableNancyModule"/> class.
/// </summary>
/// <param name="modulePath">The path that all routes in the module should be relative too.</param>
/// <param name="closure">The configuration of the module.</param>
/// <summary>
/// Provides an API for configuring a <see cref="ConfigurableNancyModule"/> instance.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ConfigurableNancyModuleConfigurator"/> class.
/// </summary>
/// <param name="module">The <see cref="ConfigurableNancyModule"/> that should be configured.</param>
/// <summary>
/// Adds an after-request process pipeline to the module.
/// </summary>
/// <param name="after">An <see cref="AfterPipeline"/> instance.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <summary>
/// Adds a before-request process pipeline to the module.
/// </summary>
/// <param name="before">An <see cref="BeforePipeline"/> instance.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <summary>
/// Adds a route that is valid for DELETE requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/> and an action that returns <see cref="HttpStatusCode.OK"/>.</remarks>
/// <summary>
/// Adds a route that is valid for DELETE requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/>.</remarks>
/// <summary>
/// Adds a route that is valid for DELETE requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="condition">The condition that has to be fulfilled in order for the route to be invoked</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <summary>
/// Adds a route that is valid for GET requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/> and an action that returns <see cref="HttpStatusCode.OK"/>.</remarks>
/// <summary>
/// Adds a route that is valid for GET requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/>.</remarks>
/// <summary>
/// Adds a route that is valid for GET requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="condition">The condition that has to be fulfilled in order for the route to be invoked</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <summary>
/// Adds a route that is valid for PATCH requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/> and an action that returns <see cref="HttpStatusCode.OK"/>.</remarks>
/// <summary>
/// Adds a route that is valid for PATCH requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/>.</remarks>
/// <summary>
/// Adds a route that is valid for PATCH requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="condition">The condition that has to be fulfilled in order for the route to be invoked</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <summary>
/// Adds a route that is valid for POST requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/> and an action that returns <see cref="HttpStatusCode.OK"/>.</remarks>
/// <summary>
/// Adds a route that is valid for POST requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/>.</remarks>
/// <summary>
/// Adds a route that is valid for POST requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="condition">The condition that has to be fulfilled in order for the route to be invoked</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <summary>
/// Adds a route that is valid for PUT requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/> and an action that returns <see cref="HttpStatusCode.OK"/>.</remarks>
/// <summary>
/// Adds a route that is valid for PUT requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/>.</remarks>
/// <summary>
/// Adds a route that is valid for PUT requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="condition">The condition that has to be fulfilled in order for the route to be invoked</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <summary>
/// Adds a route that is valid for OPTIONS requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/> and an action that returns <see cref="HttpStatusCode.OK"/>.</remarks>
/// <summary>
/// Adds a route that is valid for OPTIONS requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
/// <remarks>This will add a route with a condition that is always evaluates to <see langword="true"/>.</remarks>
/// <summary>
/// Adds a route that is valid for OPTIONS requests.
/// </summary>
/// <param name="path">The path that the route should be registered for.</param>
/// <param name="condition">The condition that has to be fulfilled in order for the route to be invoked</param>
/// <param name="action">The action that should be invoked by the route.</param>
/// <returns>An instance to the current <see cref="ConfigurableNancyModuleConfigurator"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\DocumentWrapper.cs
/// <summary>
/// A basic wrapper around CsQuery
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DocumentWrapper"/> class.
/// </summary>
/// <param name="buffer">The document represented as a byte array.</param>
/// <summary>
/// Gets elements from CSS3 selectors
/// </summary>
/// <param name="selector">The CSS3 selector that should be applied.</param>
/// <returns>A <see cref="QueryWrapper"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\IBrowserContextValues.cs
/// <summary>
/// Provides an API ontop of <see cref="BrowserContext"/> for extracting values.
/// </summary>
/// <summary>
/// Gets or sets the stream that should be sent with the HTTP request.
/// </summary>
/// <value>A <see cref="Stream"/> that contains the body that should be sent with the HTTP request.</value>
/// <summary>
/// Gets or sets the body string
/// </summary>
/// <summary>
/// Gets or sets the form values string
/// </summary>
/// <remarks>If <see cref="BodyString"/> is assigned a value, the <see cref="FormValues"/> will be ignored.</remarks>
/// <summary>
/// Gets or sets the headers that should be sent with the HTTP request.
/// </summary>
/// <value>An <see cref="IDictionary{TKey,TValue}"/> instance that contains the headers that should be sent with the HTTP request.</value>
/// <summary>
/// Gets or sets the protocol that should be sent with the HTTP request.
/// </summary>
/// <value>A <see cref="string"/> contains the protocol that should be sent with the HTTP request.</value>
/// <summary>
/// Gets or sets the querystring
/// </summary>
/// <summary>
/// Gets or sets the basePath string
/// </summary>
/// <summary>
/// Gets or sets the user host address
/// </summary>
/// <summary>
/// Gets or sets the ClientCertificate
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\IndexHelper.cs
/// <summary>
/// A helper class for providing classes with "named indexers".
/// </summary>
/// <typeparam name="TKey">The indexer key type</typeparam>
/// <typeparam name="TValue">The indexer return value type.</typeparam>
/// <summary>
/// Initializes a new instance of the <see cref="IndexHelper&lt;TKey, TValue&gt;"/> class.
/// </summary>
/// <param name="indexDelegate">The index delegate.</param>
/// <summary>
/// Gets the <typeparamref name="TValue"/> with the specified key.
/// </summary>
/// <value>The value of the indexer.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\LegacyBrowser.cs
/// <summary>
/// Provides the capability of executing a request with Nancy, using a specific configuration provided by an <see cref="INancyBootstrapper"/> instance.
///  </summary>
/// <summary>
/// Initializes a new instance of the <see cref="Browser"/> class, with the
/// provided <see cref="ConfigurableBootstrapper"/> configuration.
/// </summary>
/// <param name="action">The <see cref="ConfigurableBootstrapper"/> configuration that should be used by the bootstrapper.</param>
/// <param name="defaults">The default <see cref="BrowserContext"/> that should be used in a all requests through this browser object.</param>
/// <summary>
/// Initializes a new instance of the <see cref="LegacyBrowser"/> class.
/// </summary>
/// <param name="bootstrapper">A <see cref="INancyBootstrapper"/> instance that determines the Nancy configuration that should be used by the browser.</param>
/// <param name="defaults">The default <see cref="BrowserContext"/> that should be used in a all requests through this browser object.</param>
/// <summary>
/// Performs a DELETE request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a DELETE request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a GET request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a GET request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a HEAD request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a HEAD request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a OPTIONS request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a OPTIONS request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a PATCH request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a PATCH request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a POST request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a POST request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a PUT request against Nancy.
/// </summary>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a PUT request against Nancy.
/// </summary>
/// <param name="url">The url that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a request of the HTTP <paramref name="method"/>, on the given <paramref name="url"/>, using the
/// provided <paramref name="browserContext"/> configuration.
/// </summary>
/// <param name="method">HTTP method to send the request as.</param>
/// <param name="url">The URl of the request.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
/// <summary>
/// Performs a request of the HTTP <paramref name="method"/>, on the given <paramref name="path"/>, using the
/// provided <paramref name="browserContext"/> configuration.
/// </summary>
/// <param name="method">HTTP method to send the request as.</param>
/// <param name="path">The path that is being requested.</param>
/// <param name="browserContext">An closure for providing browser context for the request.</param>
/// <returns>An <see cref="BrowserResponse"/> instance of the executed request.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\NancyContextExtensions.cs
/// <summary>
/// Defines extensions for the <see cref="NancyContext"/> type.
/// </summary>
// We only really want to generate this once, so we'll stick it in the context
// This isn't ideal, but we don't want to hide the guts of the context from the
// tests this will have to do.
/// <summary>
/// Returns the HTTP response body, of the specified <see cref="NancyContext"/>, wrapped in an <see cref="DocumentWrapper"/> instance.
/// </summary>
/// <param name="context">The <see cref="NancyContext"/> instance that the HTTP response body should be retrieved from.</param>
/// <returns>A <see cref="DocumentWrapper"/> instance, wrapping the HTTP response body of the context.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\NodeWrapper.cs
/// <summary>
/// Simple wrapper around a <see cref="DomElement"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NodeWrapper"/> class, for
/// the provided <paramref name="element"/>.
/// </summary>
/// <param name="element">The dom element that should be wrapped.</param>
/// <summary>
/// Tests for the presence of an attribute with the specified name.
/// </summary>
/// <param name="name">The name of the attribute to test for.</param>
/// <returns>True if the node contains an attribute with the specified name, false otherwise.</returns>
/// <summary>
/// Gets the inner text of the node.
/// </summary>
/// <value>A <see cref="string"/> containing the inner text of the node.</value>
/// <summary>
/// Performs an implicit conversion from <see cref="DomElement"/> to <see cref="Nancy.Testing.NodeWrapper"/>.
/// </summary>
/// <param name="node">The <see cref="DomElement"/> that should be cast.</param>
/// <returns>An <see cref="NodeWrapper"/> instance, that contains the results of the cast.</returns>
/// <summary>
/// Performs an implicit conversion from <see cref="Nancy.Testing.NodeWrapper"/> to <see cref="DomElement"/>.
/// </summary>
/// <param name="wrapper">The <see cref="NodeWrapper"/> that should be cast.</param>
/// <returns>A <see cref="DomElement"/> instance, that contains the results of the cast.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\PassThroughStatusHandler.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\PathHelper.cs
/// <summary>
/// Traverses up a directory tree
/// </summary>
/// <param name="path">Start path.</param>
/// <param name="levels">Levels to climb.</param>
/// <returns>A <see cref="string"/> containing the new path.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\QueryWrapper.cs
/// <summary>
/// Initializes a new instance of the <see cref="QueryWrapper"/> class, using
/// the provided <paramref name="document"/>.
/// </summary>
/// <param name="document">The document that should be wrapped.</param>
/// <summary>
/// Gets elements from CSS3 selectors
/// </summary>
/// <param name="selector">CSS3 selector</param>
/// <returns>A <see cref="QueryWrapper"/> instance</returns>
/// <summary>
/// Returns an enumerator that iterates through the collection.
/// </summary>
/// <returns>A <see cref="IEnumerator{T}"/> that can be used to iterate through the collection.</returns>
/// <summary>
/// Returns an enumerator that iterates through a collection.
/// </summary>
/// <returns>An <see cref="IEnumerator"/> object that can be used to iterate through the collection.</returns>
/// <summary>
/// Performs an implicit conversion from <see cref="CQ"/> to <see cref="QueryWrapper"/>.
/// </summary>
/// <param name="document">The <see cref="CQ"/> that should be cast.</param>
/// <returns>An <see cref="QueryWrapper"/> instance, that contains the results of the cast.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\StaticConfigurationContext.cs
/// <summary>
/// Helper class for running tests with <see cref="StaticConfiguration"/> setup in a certain way. This
/// class was designed to be used with a using-statement. Upon disposable the previous static configuration
/// values will be reset, leaving it in the state is was before the test.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="StaticConfigurationContext"/> class.
/// </summary>
/// <param name="closure">The configuration context.</param>
/// <summary>
/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
/// </summary>
/// <summary>
/// Helper class used to persist state of <see cref="StaticConfiguration"/> members.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\TestingViewBrowserResponseExtensions.cs
/// <summary>
/// Extension methods for easy access of the properties
/// stored in the view context by the testing view factory
/// </summary>
/// <summary>
/// Get the model on the view
/// </summary>
/// <typeparam name="TType">the type of the model</typeparam>
/// <param name="response">The <see cref="BrowserResponse"/> that the assert should be made on.</param>
/// <returns>a model of the <typeparamref name="TType">type</typeparamref></returns>
/// <remarks>This method requires that the <c>Browser</c> utilize the <see cref="TestingViewFactory"/></remarks>
/// <summary>
/// Returns the name of the view
/// </summary>
/// <param name="response">The <see cref="BrowserResponse"/> that the assert should be made on.</param>
/// <returns>the name of the view</returns>
/// <remarks>This method requires that the <c>Browser</c> utilize the <see cref="TestingViewFactory"/></remarks>
/// <summary>
/// Returns the name of the module
/// </summary>
/// <param name="response">The <see cref="BrowserResponse"/> that the assert should be made on.</param>
/// <returns>the name of the module</returns>
/// <remarks>This method requires that the <c>Browser</c> utilize the <see cref="TestingViewFactory"/></remarks>
/// <summary>
/// Returns the name of the module
/// </summary>
/// <param name="response">The <see cref="BrowserResponse"/> that the assert should be made on.</param>
/// <returns>the name of the module</returns>
/// <remarks>This method requires that the <c>Browser</c> utilize the <see cref="TestingViewFactory"/></remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\TestingViewContextKeys.cs
/// <summary>
/// The key names for where the testing view context data is stored
/// </summary>
/// <summary>
///  The key in ViewLocationContext.Item for the view model
/// </summary>
/// <summary>
///  The key in ViewLocationContext.Item for the view name
/// </summary>
/// <summary>
///  The key in ViewLocationContext.Item for the model name
/// </summary>
/// <summary>
///  The key in ViewLocationContext.Item for the module path        
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\TestingViewFactory.cs
/// <summary>
/// A view factory decorator, aimed for test,
/// that exposes some interesting properties about the generated view
/// </summary>
/// <summary>
/// Creates the view based on the view factory sent to the constructor
/// </summary>
/// <param name="viewFactory">the view factory that is decorated</param>
/// <summary>
/// Renders the view and then call into the viewfactory 
/// that the TestingViewFactory is decorating
/// </summary>
/// <param name="viewName">The name of the view to render.</param>
/// <param name="model">The module path of the module that is rendering the view.</param>
/// <param name="viewLocationContext">A <see cref="ViewLocationContext"/> instance, containing information about the context for which the view is being rendered.</param>
/// <returns>A response.</returns>
// Intercept and store interesting stuff
/// <summary>
/// The key names for where the testing view context data is stored
/// </summary>
/// <summary>
///  The key in ViewLocationContext.Item for the view model
/// </summary>
/// <summary>
///  The key in ViewLocationContext.Item for the view name
/// </summary>
/// <summary>
///  The key in ViewLocationContext.Item for the model name
/// </summary>
/// <summary>
///  The key in ViewLocationContext.Item for the module path
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\Fakes\FakeRootPathProvider.cs
/// <summary>
/// Fake root path provider - set the static <see cref="RootPath"/> property
/// </summary>
/// <summary>
/// Returns the root folder path of the current Nancy application.
/// </summary>
/// <returns>A <see cref="string"/> containing the path of the root folder.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing\Properties\Resources.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
/// <summary>
///   Overrides the current thread's CurrentUICulture property for all
///   resource lookups using this strongly typed resource class.
/// </summary>
/// <summary>
///   Looks up a localized resource of type System.Byte[].
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\AndConnectorTests.cs
// Given
// When
// Then
// Given
// When
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\AssertEqualityComparerFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\AssertExtensionsTests.cs
/// <summary>
/// Initializes a new instance of the <see cref="T:System.Object"/> class.
/// </summary>
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, when
// Then
// When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\BrowserContextExtensionsFixture.cs
// Given
// When
// Then
// Given
// When
/*");
// Then
// Given
// When
// Then
// Given
// When
/*", 1.0m);
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\BrowserDefaultsFixture.cs
// Given
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\BrowserFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
//Then
// Given
// When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given
//When
//Then
// Given
// When
// Then
// Given
// When
// Then
//Given, When
//Then
//Given, When
//Then
// Given
// When
// Then
// Given
// When
// Then
//Given/When
//Then
//Given/When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\BrowserResponseBodyWrapperExtensionsFixture.cs
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\BrowserResponseBodyWrapperFixture.cs
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\BrowserResponseExtensionsTests.cs
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\CaseSensitivityFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\ConfigurableBootstrapperDependenciesTests.cs
// Given
// When
// Assert
// Given
// When
// Assert
// Given
// When
// Assert
// Given
// When
// Assert
// Given
// When
// Then
// Given
// When
// Assert
// Given
// When
// Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\ConfigurableBootstrapperFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\ContextExtensionsTests.cs
// Given
// Yucky hardcoded stringyness
// When
// Then
// Given
// When
// Then
// Given
// Yucky hardcoded stringyness
// When
// Then
// Given
// When
// Then
// Given
// Yucky hardcoded stringyness
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\DocumentWrapperTests.cs
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\PathHelperTests.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\QueryWrapperTests.cs
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\TestingViewExtensions\GetModelExtententionsTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\TestingViewExtensions\GetModuleNameExtensionTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\TestingViewExtensions\GetModulePathExtensionMethodTests.cs
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\TestingViewExtensions\GetViewNameExtensionTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Testing.Tests\TestingViewExtensions\TestingViewFactoryTestModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\NoAppStartupsFixture.cs
// Given
// When
//Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\ShouldExtensions.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Extensions\ResponseExtensions.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeDefaultNancyBootstrapper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeHookedModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeModuleCatalog.cs
/// <summary>
/// Initializes a new instance of the FakeModuleCatalog class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeNancyModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeNancyModuleNoRoutes.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeNancyModuleWithBasePath.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeNancyModuleWithDependency.cs
/// <summary>
/// Initializes a new instance of the Dependency class.
/// </summary>
/// <summary>
/// Initializes a new instance of the FakeNancyModuleWithDependency class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeNancyModuleWithoutBasePath.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeNancyModuleWithPreAndPostHooks.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeObjectSerializer.cs
/// <summary>
/// Serialize an object
/// </summary>
/// <param name="sourceObject">Source object</param>
/// <returns>Serialised object string</returns>
/// <summary>
/// Deserialize an object string
/// </summary>
/// <param name="sourceString">Source object string</param>
/// <returns>Deserialized object</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeRequest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeRoute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeRouteCache.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeRoutePatternMatchResult.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeRouteResolver.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeViewEngine.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\FakeViewEngineHost.cs
/// <summary>
/// Html "safe" encode a string
/// </summary>
/// <param name="input">Input string</param>
/// <returns>Encoded string</returns>
/// <summary>
/// Context object of the host application.
/// </summary>
/// <value>An instance of the context object from the host.</value>
/// <summary>
/// Get the contenst of a template
/// </summary>
/// <param name="templateName">Name/location of the template</param>
/// <param name="model">Model to use to locate the template via conventions</param>
/// <returns>Contents of the template, or null if not found</returns>
/// <summary>
/// Gets a uri string for a named route
/// </summary>
/// <param name="name">Named route name</param>
/// <param name="parameters">Parameters to use to expand the uri string</param>
/// <returns>Expanded uri string, or null if not found</returns>
/// <summary>
/// Expands a path to include any base paths
/// </summary>
/// <param name="path">Path to expand</param>
/// <returns>Expanded path</returns>
/// <summary>
/// Get the anti forgery token form element
/// </summary>
/// <returns>String containin the form element</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\MockPipelines.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\Person.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\PersonWithAgeField.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\StructModel.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Fakes\ViewModel.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Helpers\CacheHelpersFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Helpers\ExceptionExtensionsFixture.cs
// Aggregate exceptions nested three levels deep.
// Only the inner exceptions of any aggregates should be returned. The inner exception
// of a non-aggregate should not be flattened.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Resources\Link.Texts.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
/// <summary>
///   Overrides the current thread's CurrentUICulture property for all
///   resource lookups using this strongly typed resource class.
/// </summary>
/// <summary>
///   Looks up a localized string similar to This is the home link.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Resources\Menu.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
/// <summary>
///   Overrides the current thread's CurrentUICulture property for all
///   resource lookups using this strongly typed resource class.
/// </summary>
/// <summary>
///   Looks up a localized string similar to This is the home link.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Resources\Menu.Texts.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
/// <summary>
///   Overrides the current thread's CurrentUICulture property for all
///   resource lookups using this strongly typed resource class.
/// </summary>
/// <summary>
///   Looks up a localized string similar to This is the home link.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Resources\Views\SuperSimpleViewEngineSampleContent.cs
//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
//www.w3.org/1999/xhtml"">
//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
//www.w3.org/1999/xhtml"">
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Responses\MaterialisingResponseFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\AfterPipelineFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\BeforePipelineFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\DefaultNancyBootstrapperBootstrapperBaseFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\DefaultNancyBootstrapperFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\DefaultNancyBootstrapperModuleCatalogFixture.cs
/// <summary>
/// Gets the catalog under test - should have ModuleTypesToRegister
/// registred as modules for resolution.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\DefaultResponseFormatterFactoryFixture.cs
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\DefaultResponseFormatterFixture.cs
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\DefaultSerializerFactoryFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When, Then
// When, Then
// When, Then
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\DynamicDictionaryFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// When
// Then
// When
// Then
// Given
// When
// Then
// When
// Then
// When
// Then
// Given
//when
//then
//Given
//When
//Then
//Given/When
//Then
//Given
//When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\DynamicDictionaryValueFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//This test is unrealistic in my opinion, but it should still call ToString on the datetime value
//Given
//When
//Then
//Given
//When
//Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ErrorPipelineFixture.cs
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\FormatterExtensionsFixture.cs
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\HeadResponseFixture.cs
// Given
//When
// Then
//When
// Then
//When
// Then
//When
// Then
//When
// Then
// Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\HttpMultipartBoundaryFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\HttpMultipartBufferFixture.cs
// Given, When, Then
// Given, When
// Then
// Given, When
// Then
// Given, When, Then
// Given, When
//Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\HttpMultipartFixture.cs
// Given
// When
// Then
// Given
// When
// Then
//http://www.freesoft.org/CIE/RFC/1521/16.htm
// Given
// When
// Then
//http://www.freesoft.org/CIE/RFC/1521/16.htm
// Given
// When
// Then
// Given
// When
// Then
//http://www.freesoft.org/CIE/RFC/1521/16.htm
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
//
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\JsonFormatterExtensionsFixtures.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\JsonSerializerFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\MimeTypesFixture.cs
// Given, When, Then
// Given, When, Then
// Given, When, Then
// Given, When, Then
// Given, When, Then
// Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModuleNameFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\NamedPipelineBaseFixture.cs
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\NancyContextFixture.cs
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\NancyCookieFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\NancyEngineFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given,
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// NOTE: Regression for removal of nancy-version from response headers
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\NancyMiddlewareFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// 2 headers because the default content-type is text/html
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
//Given
//When
//Then
// Given
// When
// Then
// Given
// When
// Then
/// <summary>
/// Sets the fake nancy engine to execute the complete callback with the given context
/// </summary>
/// <param name="context">Context to return</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\NancyModuleFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// Then
// Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\NancyOptionsExtensionsFixture.cs
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\NancyOptionsFixture.cs
// Given
//When
//Then
// Given
//When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\RequestFixture.cs
// Given
// When
// Then
// Given, When, Then
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given, when
// Then
// Given, when
// Then
// Given, when
// Then
// Given, when
// Then
// Given, when
// Then
// Given, when
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\RequestHeadersFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
//nancyfx.org" };
// When
// Then
// Given
//nancyfx.org" };
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
//www.wapforum. org/xhtml\"", "application/xhtml+xml;profile=\"http://www.wapforum. org/xhtml\"", 1.0)]
//www.wapforum. org/xhtml\"", "application/xhtml+xml;profile=\"http://www.wapforum. org/xhtml\"", 0.2)]
//www.wapforum. org/xhtml\"", "application/xhtml+xml;profile=\"http://www.wapforum. org/xhtml\"", 0.7)]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ResponseExtensionsFixture.cs
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ResponseFixture.cs
// Given
// When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Arrange
// Act
// Assert
// Arrange, Act
// Assert
// Given, When
// Then
// Arrange
// Act
// Assert
// Arrange, Act
// Assert
// Given, When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\StaticContentConventionBuilderFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\TextFormatterFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\UrlFixture.cs
// Given
// When
// Then
//");
// Given
// When
// Then
//www.nancyfx.org");
// Given
// When
// Then
//[");
// Given
// When
// Then
//127.0.0.1");
// Given
// When
// Then
//www.nancyfx.org:1234");
// Given
// When
// Then
//www.nancyfx.org:1234/base");
// Given
// When
// Then
//www.nancyfx.org:1234/base/path");
// Given
// When
// Then
//www.nancyfx.org:1234/base");
// Given
// When
// Then
//www.nancyfx.org:1234/base?foo=some%20text");
// Given
// When
// Then
//www.nancyfx.org:1234/base?foo=some%20text");
// Given
//www.nancyfx.org:1234/base?foo=some%20text#anchor";
// When
// Then
// Given
// When
// Then
//www.nancyfx.org:1234/base?foo=some%20text");
// Given
//www.nancyfx.org:1234/base?foo=some%20text#anchor");
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
//Given, When
//www.nancyfx.org:1234/base?foo=some text");
//Then
//www.nancyfx.org:1234/base?foo=some%20text", "https", "www.nancyfx.org", 1234, "/base", "?foo=some%20text")]
//nancyfx.org", "http", "nancyfx.org", 80, "/", "")]
//nancyfx.org?foo=some%20text", "http", "nancyfx.org", 80, "/", "?foo=some%20text")]
//nancyfx.org/base/admin/area?foo=some%20text", "https", "nancyfx.org", 443, "/base/admin/area", "?foo=some%20text")]
//nancyfx.org/base/admin/area", "http", "nancyfx.org", 80, "/base/admin/area", "")]
//Given
//When
//Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\XmlFormatterExtensionsFixtures.cs
//Person/FirstName").InnerText.ShouldEqual("Andy");
//Person/LastName").InnerText.ShouldEqual("Pike");
//www.w3.org/2001/XMLSchema-instance").ShouldEqual("true");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Bootstrapper\BootstrapperLocatorFixture.cs
/// <summary>
/// Internal stuff
/// </summary>
/// <summary>
/// Base
/// </summary>
/// <summary>
/// Default
/// </summary>
/// <summary>
/// Custom 
/// </summary>
/// <summary>
/// Custom 
/// </summary>
/// <summary>
/// Custom 
/// </summary>
/// <summary>
/// Another custom one
/// </summary>
/// <summary>
/// Another custom one
/// </summary>
/// <summary>
/// Another custom one
/// </summary>
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Bootstrapper\CollectionTypeRegistrationFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Bootstrapper\InstanceRegistrationFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Bootstrapper\NancyBootstrapperBaseFixture.cs
/// <summary>
/// Initializes a new instance of the NancyBootstrapperBaseFixture class.
/// </summary>
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
/// <summary>
/// Gets the diagnostics for initialisation
/// </summary>
/// <returns>IDiagnostics implementation</returns>
/// <summary>
/// Gets all registered startup tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IApplicationStartup"/> instances. </returns>
/// <summary>
/// Gets all registered application registration tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IRegistrations"/> instances.</returns>
/// <summary>
/// Get all NancyModule implementation instances
/// </summary>
/// <param name="context">The current context</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="INancyModule"/> instances.</returns>
/// <summary>
/// Register the bootstrapper's implemented types into the container.
/// This is necessary so a user can pass in a populated container but not have
/// to take the responsibility of registering things like INancyModuleCatalog manually.
/// </summary>
/// <param name="applicationContainer">Application container to register into</param>
/// <summary>
/// Gets the diagnostics for initialisation
/// </summary>
/// <returns>IDiagnostics implementation</returns>
/// <summary>
/// Gets all registered startup tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IApplicationStartup"/> instances. </returns>
/// <summary>
/// Gets all registered application registration tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IRegistrations"/> instances.</returns>
/// <summary>
/// Get all NancyModule implementation instances
/// </summary>
/// <param name="context">The current context</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="INancyModule"/> instances.</returns>
/// <summary>
/// Retrieves a specific <see cref="INancyModule"/> implementation - should be per-request lifetime
/// </summary>
/// <param name="moduleType">Module type</param>
/// <param name="context">The current context</param>
/// <returns>The <see cref="INancyModule"/> instance</returns>
/// <summary>
/// Register the bootstrapper's implemented types into the container.
/// This is necessary so a user can pass in a populated container but not have
/// to take the responsibility of registering things like INancyModuleCatalog manually.
/// </summary>
/// <param name="applicationContainer">Application container to register into</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Bootstrapper\NancyBootstrapperWithRequestContainerBaseFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
/// <summary>
/// Gets the diagnostics for initialisation
/// </summary>
/// <returns>IDiagnostics implementation</returns>
/// <summary>
/// Gets all registered startup tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IApplicationStartup"/> instances. </returns>
/// <summary>
/// Gets all registered application registration tasks
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance containing <see cref="IRegistrations"/> instances.</returns>
/// <summary>
/// Registers an <see cref="INancyEnvironment"/> instance in the container.
/// </summary>
/// <param name="container">The container to register into.</param>
/// <param name="environment">The <see cref="INancyEnvironment"/> instance to register.</param>
/// <summary>
/// Register the bootstrapper's implemented types into the container.
/// This is necessary so a user can pass in a populated container but not have
/// to take the responsibility of registering things like INancyModuleCatalog manually.
/// </summary>
/// <param name="applicationContainer">Application container to register into</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Bootstrapper\NancyInternalConfigurationFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Bootstrapper\PipelinesFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Bootstrapper\TypeRegistrationFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Bootstrapper\Base\BootstrapperBaseFixtureBase.cs
/// <summary>
/// Base class for testing the basic behaviour of a bootstrapper that
/// implements either of the two bootstrapper base classes.
/// These tests only test basic external behaviour, they are not exhaustive;
/// it is expected that additional tests specific to the bootstrapper implementation
/// are also created.
/// </summary>
// Given / When
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Bootstrapper\Base\ModuleCatalogFixtureBase.cs
/// <summary>
/// Gets the catalog under test - should have ModuleTypesToRegister
/// registred as modules for resolution.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Configuration\DefaultNancyEnvironmentConfiguratorFixture.cs
// Given, When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When, Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Configuration\DefaultNancyEnvironmentFactoryFixture.cs
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Configuration\DefaultNancyEnvironmentFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Configuration\INancyEnvironmentExtensionsFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Conventions\DefaultAcceptHeaderCoercionConventionsFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Conventions\DefaultCultureConventionsFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Conventions\DefaultStaticContentsConventionsFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Conventions\DefaultViewLocationConventionsFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Cryptography\DefaultHmacProviderFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Cryptography\HmacComparerFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Cryptography\NoEncryptionProviderFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Cryptography\RijndaelEncryptionProviderFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Culture\BuiltInCultureConventionFixture.cs
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
// Given
//When
//Then
// Given
//When
// Then
//Given
//When
//Then
//Given/When
//Then
//Given/When
//Then
//Given/When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Diagnostics\ConcurrentLimitedCollectionFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Diagnostics\CustomInteractiveDiagnosticsFixture.cs
//While this directive is redundant, it's required to build on mono 2.x to allow it to resolve the Should* extension methods
// Given
// When
// Then should see our fake provider and not the default testing provider
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Diagnostics\DefaultRequestTraceFactoryFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Diagnostics\DiagnosticsHookFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given no custom interactive diagnostic providers
// When querying the list of interactive providers
// Then we should see the fake testing provider and not the Nancy provided testing example
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Diagnostics\InteractiveDiagnosticsFixture.cs
//Given
//When
//Then
//Given
//When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ErrorHandling\DefaultStatusCodeHandlerFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Extensions\ContextExtensionsFixture.cs
// Given 
// When
// Then
// Given when
// Then
// Given when
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
//test.com/someotherpath");
// Then
// Given
// When
// Then
// Given
// When
//anothertest.com/someotherpath");
// Then
// Given
// When
//anothertest.com");
// Then
// Given
// When
//test.com");
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Extensions\RequestExtensionsFixture.cs
// Given 
// When
// Then
// Given when
// Then
// Given when
// Then
// Given when
// Then
// Given when
// Then
// Given when
// Then
// Given when
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Extensions\RequestStreamExtensionsFixture.cs
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Extensions\StringExtensionsFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Extensions\TypeExtensionsFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Helpers\HttpUtilityFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\IO\RequestStreamFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Json\JavaScriptSerializerFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// When
// Then
// When
// Then
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Json\TestConverter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Json\TestConverterType.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Json\TestData.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Json\TestPrimitiveConverter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Json\TestPrimitiveConverterType.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Json\TypeWithTuple.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Localization\ResourceBasedTextResourceFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModelBinding\BindingMemberInfoFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// ReSharper disable once InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModelBinding\DefaultBinderFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When, Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Then
// When
// Then
// Then
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
// Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
//Given
// Wham
// Then
//Given
// When
// Then
//Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// not in body, so default value
// Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
//Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModelBinding\DefaultFieldNameConverterFixture.cs
/// <summary>
/// Initializes a new instance of the <see cref="T:System.Object"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModelBinding\DefaultModelBinderLocatorFixture.cs
/// <summary>
/// Initializes a new instance of the <see cref="T:System.Object"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModelBinding\DynamicModelBinderAdapterFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModelBinding\ModelBindingExceptionFixture.cs
//When
//Then
//When
//Then
//When
//Then
//When
//then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModelBinding\PropertyBindingExceptionFixture.cs
//When
//Then
//When
//then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModelBinding\DefaultBodyDeserializers\JsonBodyDeserializerFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
//Given
//When
//Should
// TODO - fixup on mono, seems to throw inside double.parse
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModelBinding\DefaultBodyDeserializers\XmlBodyDeserializerfixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModelBinding\DefaultConverters\CollectionConverterFixture.cs
/// <summary>
/// Initializes a new instance of the <see cref="T:System.Object"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ModelBinding\DefaultConverters\FallbackConverterFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Responses\DefaultJsonSerializerFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Responses\EmbeddedFileResponseFixture.cs
// Given, when
// Then
// Given
// when
// Then
// Given, when
// Then
// Given
// when
// Then
// Given, when
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Responses\GenericFileResponseFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given, when
// Then
// Given, when
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Responses\RedirectResponseFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Responses\StreamResponseFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Responses\TextResponseFixture.cs
// Given
// When
// Then
// Given
// When
// then
// Given
// When
// then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Responses\Negotiation\MediaRangeFixture.cs
// When
// Then
// Given
// Then
// Given
// Then
// Given
// Then
// Given
// Then
// Given
// Then
// Given
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\ConstraintNodeRouteResolverFixture.cs
// Given
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\ConstraintNodeRouteScoringFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\DefaultNancyModuleBuilderFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\DefaultRequestDispatcherFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
//When
// Then
// Given
//When
// Then
// Given
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\DefaultRouteCacheProviderFixture.cs
/// <summary>
/// Initializes a new instance of the DefaultRouteCacheProviderFixture class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\DefaultRouteInvokerFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\DefaultRoutePatternMatcherFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
//Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\DefaultRouteResolverFixture.cs
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given
//When
//Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\DefaultRouteSegmentExtractorFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\NotFoundRouteFixture.cs
//Given, When, Then
//Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\RouteCacheFixture.cs
/// <summary>
/// Initializes a new instance of the RouteCacheFixture class.
/// </summary>
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\RouteDescriptionFixture.cs
//Given, When
// Then
//Given, When
// Then
//Given, When
// Then
//Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Routing\RouteFixture.cs
//Given, When
// Then
//Given, When
// Then
//Given, When
// Then
//Given, When
// Then
//Given, When
// Then
//Given
// When
// Then
//Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Security\ClaimsPrincipalExtensionsFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// store passed claims for testing assertion
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Security\CsrfFixture.cs
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Security\DefaultCsrfTokenValidatorFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Security\ModuleSecurityFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Security\SSLProxyFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Sessions\CookieBasedSessionsConfigurationFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Sessions\CookieBasedSessionsFixture.cs
//N6YyK7BwpsNPrvyHAvU1z5YzHfPT6HEowIl8mz/uUL6o+FME/Goi7RN2getMeYaPCs0fJkiMCAomnnagAy4aXN0Ak/p7Y3K/kpNAS6PvNu4aok0zVpfo1utP84GyyLomfr4urmDNFIe8PBVoKhuomxjsUOddaarHqqmN3PXOp15SPXPDxEKfpuLzhmqXnStiB8nH9qMBYI/AuLHMckDzkeESH5rQ2q2+1RgCN82PujzGhhVnBMk95ZS9k9zKCvKQa2yzVkaHqwSESyOFboU89kLAEQ0h48dtoJ2FTBs9GjsL3Z4fGogeLwjIvP8I8JF39HI+9U3PC2KnicA/bgUL/Z1paDzZYTrqQS4QSyFgy4DOxYz";
//given
//invalid Hmac
//when
//then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Sessions\DefaultSessionObjectFormatterFixture.cs
/// <summary>
/// Initializes a new instance of the <see cref="T:System.Object"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Sessions\NullSessionProviderFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Sessions\SessionFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Validation\CompositeValidatorFixture.cs
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Validation\DefaultValidatorLocatorFixture.cs
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Validation\ModuleExtensionsFixture.cs
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
//Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\Validation\ValidationResultFixture.cs
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ViewEngines\DefaultRenderContextFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then)
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ViewEngines\DefaultViewFactoryFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ViewEngines\DefaultViewLocatorFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
//var additionalView = new ViewLocationResult( "views", "index", "spark", () => null );
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ViewEngines\DefaultViewRendererFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ViewEngines\DefaultViewResolverFixture.cs
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ViewEngines\FileSystemViewLocationProviderFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ViewEngines\FileSystemViewLocationResultFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ViewEngines\ResourceViewLocationProviderFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ViewEngines\SuperSimpleViewEngineTests.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ViewEngines\ViewEngineStartupFixture.cs
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\Unit\ViewEngines\ViewNotFoundExceptionFixture.cs
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\xUnitExtensions\RecordAsync.cs
// Use xUnit's default behavior.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\xUnitExtensions\SkipException.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests\xUnitExtensions\SkippableFactAttribute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Modules\AbsoluteUrlTestModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Modules\CookieModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Modules\JsonpTestModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Modules\PerRouteAuthModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Modules\RazorTestModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Modules\RazorWithTracingTestModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Modules\SerializerTestModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Modules\SerializeTestModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Modules\ThrowingModule.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Properties\AssemblyInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\AbsoluteUrlTests.cs
//Given, When
//mydomain.com/");
//Then
//Given
//When
//Then
//Given, When
//mydomain.com/querystring?myKey=myvalue");
//Then
//Given
//When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\AsyncExceptionTests.cs
// explicitly declare the status code handler that throws, just 
// incase it's not there for some other reason.
// Force continuation on a worker thread
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\BasicRouteInvocationsFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\ContentNegotiationFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// When
// Then
// Given
// When
// Then
//www.wapforum. org/xhtml\"")]
//www.wapforum. org/xhtml\"")]
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
/// <summary>
/// Test response processor that will accept any type
/// and put the content type and model type into the
/// response body for asserting against.
/// Hacky McHackmeister but it works :-)
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\CookieFixture.cs
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\JsonpTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\ManualStaticContentTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\MemoryLeakFixture.cs
// Given
// Warm up
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\MethodRewriteFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\ModelBindingTests.cs
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\PartialViewTests.cs
// Given
// When
// Then
// If the index is not the same then the string occurs twice...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\PerRouteAuthFixture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\RouteConstraintTests.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// For testing VersionSegmentRouteConstraint
// For testing VersionSegmentRouteConstraint
// For testing VersionSegmentRouteConstraint - fallback for invalid version number
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\SerializerTests.cs
//Given & When
//Then
// Given
// When
// Then
// Given & When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\SerializeTests.cs
//Given
//When
//Then
//Given
//When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\TracingSmokeTests.cs
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Tests.Functional\Tests\ViewBagTests.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotatioins.Tests\DataAnnotationsValidatorFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotatioins.Tests\DataAnnotationValidatorFactoryFixture.cs
// Given, When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotatioins.Tests\DataAnnotationValidatorFixture.cs
// Given, When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotatioins.Tests\DefaultValidatableObjectAdapterFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotatioins.Tests\PropertyValidatorFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\DataAnnotationsRegistrations.cs
/// <summary>
/// Application registrations for Data Annotations validation types.
/// </summary>
/// <summary>
/// Creates a new instance of the <see cref="DataAnnotationsRegistrations"/> class, that performs
/// the default registrations of the Data Annotations types.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\DataAnnotationsValidator.cs
/// <summary>
/// The default Data Annotations implementation of <see cref="IModelValidator"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DataAnnotationsValidator"/> class.
/// </summary>
/// <param name="typeForValidation">The type for validation.</param>
/// <param name="factory">The <see cref="IPropertyValidatorFactory"/> instance that should be used by the validator.</param>
/// <param name="validatableObjectAdapter">The <see cref="validatableObjectAdapter"/> instance that should be used by the validator.</param>
/// <summary>
/// Gets the description of the validator.
/// </summary>
/// <returns>An <see cref="ModelValidationDescriptor"/> instance.</returns>
/// <summary>
/// Gets the <see cref="System.Type"/> of the model that is being validated by the validator.
/// </summary>
/// <summary>
/// Validates the specified instance.
/// </summary>
/// <param name="instance">The instance that should be validated.</param>
/// <param name="context">The <see cref="NancyContext"/> of the current request.</param>
/// <returns>A <see cref="ModelValidationResult"/> with the result of the validation.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\DataAnnotationsValidatorAdapter.cs
/// <summary>
/// A default implementation of an <see cref="IDataAnnotationsValidatorAdapter"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DataAnnotationsValidatorAdapter"/> class.
/// </summary>
/// <param name="ruleType">Type of the rule.</param>
// http://www.mono-project.com/Guide%3a_Porting_Winforms_Applications#Runtime_Conditionals
/// <summary>
/// Gets a boolean that indicates if the adapter can handle the
/// provided <paramref name="attribute"/>.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <returns><see langword="true" /> if the attribute can be handles, otherwise <see langword="false" />.</returns>
/// <summary>
/// Gets the rules the adapter provides.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <param name="descriptor">A <see cref="PropertyDescriptor"/> instance for the property that is being validated.</param>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
/// <summary>
/// Validates the given instance.
/// </summary>
/// <param name="instance">The instance that should be validated.</param>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <param name="descriptor">A <see cref="PropertyDescriptor"/> instance for the property that is being validated.</param>
/// <param name="context">The <see cref="NancyContext"/> of the current request.</param>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
// When running on Mono the Display attribute is not auto populated so for now we do it ourselves
// Display(Name) will auto populate the context, while DisplayName() needs to be manually set
/// <summary>
/// Gets a <see cref="ModelValidationError"/> instance based on the supplied <see cref="ValidationResult"/>.
/// </summary>
/// <param name="result">The <see cref="ValidationResult"/> to create a <see cref="ModelValidationError"/> for.</param>
/// <param name="context">The <see cref="ValidationContext"/> of the supplied <see cref="ValidationResult"/>.</param>
/// <param name="attribute">The <see cref="ValidationAttribute"/> being validated.</param>
/// <returns>A <see cref="ModelValidationError"/> of member names.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\DataAnnotationsValidatorFactory.cs
/// <summary>
/// Creates and <see cref="IModelValidator"/> for DataAnnotations.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DataAnnotationsValidatorAdapter"/> class.
/// </summary>
/// <param name="factory">The <see cref="IPropertyValidatorFactory"/> instance that should be used by the factory.</param>
/// <param name="validatableObjectAdapter">The <see cref="validatableObjectAdapter"/> instance that should be used by the factory.</param>
/// <summary>
/// Creates a data annotations <see cref="IModelValidator"/> instance for the given type.
/// </summary>
/// <param name="type">The type.</param>
/// <returns>An <see cref="IModelValidator"/> instance. If no data annotation rules were found for the specified <paramref name="type"/> then <see langword="null"/> is returned.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\DefaultPropertyValidatorFactory.cs
/// <summary>
/// Default implementation of the <see cref="IPropertyValidatorFactory"/> interface.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultPropertyValidatorFactory"/> class.
/// </summary>
/// <param name="adapters">The <see cref="IDataAnnotationsValidatorAdapter"/> instances that are available to the factory.</param>
/// <summary>
/// Gets the <see cref="PropertyValidator"/> instances for the specified <paramref name="type"/>.
/// </summary>
/// <param name="type">The <see cref="Type"/> that the validators should be retrieved for.</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="IPropertyValidator"/> objects.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\DefaultValidatableObjectAdapter.cs
/// <summary>
/// Default adapter for models that implements the <see cref="IValidatableObject"/> interface.
/// </summary>
/// <summary>
/// Validates the specified instance.
/// </summary>
/// <param name="instance">The instance.</param>
/// <param name="context1"></param>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ModelValidationError"/> objects.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\IDataAnnotationsValidatorAdapter.cs
/// <summary>
/// Adapts DataAnnotations validator attributes into Nancy Validators.
/// </summary>
/// <summary>
/// Gets a boolean that indicates if the adapter can handle the
/// provided <paramref name="attribute"/>.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <returns><see langword="true" /> if the attribute can be handles, otherwise <see langword="false" />.</returns>
/// <summary>
/// Gets the rules the adapter provides.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <param name="descriptor">A <see cref="PropertyDescriptor"/> instance for the property that is being validated.</param>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
/// <summary>
/// Validates the given instance.
/// </summary>
/// <param name="instance">The instance that should be validated.</param>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <param name="descriptor">A <see cref="PropertyDescriptor"/> instance for the property that is being validated.</param>
/// <param name="context">The <see cref="NancyContext"/> of the current request.</param>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\IPropertyValidator.cs
/// <summary>
/// Defines the functionality for validating a property.
/// </summary>
/// <summary>
/// Gets or sets the <see cref="IDataAnnotationsValidatorAdapter"/> instances that should be associated with
/// each of the <see cref="ValidationAttribute"/> that are specified for the property that is being validated.
/// </summary>
/// <summary>
/// Gets or sets the <see cref="PropertyDescriptor"/> for the property that is being validated.
/// </summary>
/// <summary>
/// Gets the validation rules for the property that is being validated.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ModelValidationRule"/> objects.</returns>
/// <summary>
/// Gets the validation result for the specified <paramref name="instance"/>.
/// </summary>
/// <param name="instance">The instance that should be validated.</param>
/// <param name="context">The <see cref="NancyContext"/> of the current request.</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ModelValidationError"/> objects.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\IPropertyValidatorFactory.cs
/// <summary>
/// Defines the functionality for retrieving <see cref="PropertyValidator"/> instances
/// from a specified <see cref="Type"/>.
/// </summary>
/// <summary>
/// Gets the <see cref="PropertyValidator"/> instances for the specified <paramref name="type"/>.
/// </summary>
/// <param name="type">The <see cref="Type"/> that the validators should be retrieved for.</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="IPropertyValidator"/> objects.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\IValidatableObjectAdapter.cs
/// <summary>
/// Defines the functionality for an adapter for models that implements the <see cref="IValidatableObject"/> interface.
/// </summary>
/// <summary>
/// Validates the given instance.
/// </summary>
/// <param name="instance">The instance.</param>
/// <param name="context">The <see cref="NancyContext"/> of the current request.</param>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\PropertyValidator.cs
/// <summary>
/// Validates a specified property against a set of Data Annotation <see cref="ValidationAttribute"/>
/// and <see cref="IDataAnnotationsValidatorAdapter"/> instances.
/// </summary>
/// <summary>
/// Gets or sets the <see cref="IDataAnnotationsValidatorAdapter"/> instances that should be associated with
/// each of the <see cref="ValidationAttribute"/> that are specified for the property that is being validated.
/// </summary>
/// <summary>
/// Gets or sets the <see cref="PropertyDescriptor"/> for the property that is being validated.
/// </summary>
/// <summary>
/// Gets the validation rules for the property that is being validated.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ModelValidationRule"/> objects.</returns>
/// <summary>
/// Gets the validation result for the specified <paramref name="instance"/>.
/// </summary>
/// <param name="instance">The instance that should be validated.</param>
/// <param name="context">The <see cref="NancyContext"/> of the current request.</param>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ModelValidationError"/> objects.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\RangeValidatorAdapter.cs
/// <summary>
/// An adapter for the <see cref="RangeAttribute"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RangeValidatorAdapter"/> class.
/// </summary>
/// <summary>
/// Gets a boolean that indicates if the adapter can handle the
/// provided <paramref name="attribute"/>.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <returns><see langword="true" /> if the attribute can be handles, otherwise <see langword="false" />.</returns>
/// <summary>
/// Gets the rules the adapter provides.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <param name="descriptor">A <see cref="PropertyDescriptor"/> instance for the property that is being validated.</param>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\RegexValidatorAdapter.cs
/// <summary>
/// An adapter for the <see cref="RegularExpressionAttribute"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RegexValidatorAdapter"/> class.
/// </summary>
/// <summary>
/// Gets a boolean that indicates if the adapter can handle the
/// provided <paramref name="attribute"/>.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <returns><see langword="true" /> if the attribute can be handles, otherwise <see langword="false" />.</returns>
/// <summary>
/// Gets the rules the adapter provides.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <param name="descriptor">A <see cref="PropertyDescriptor"/> instance for the property that is being validated.</param>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\RequiredValidatorAdapter.cs
/// <summary>
/// An adapter for the <see cref="System.ComponentModel.DataAnnotations.RequiredAttribute"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="RequiredValidatorAdapter"/> class.
/// </summary>
/// <summary>
/// Gets a boolean that indicates if the adapter can handle the
/// provided <paramref name="attribute"/>.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <returns><see langword="true" /> if the attribute can be handles, otherwise <see langword="false" />.</returns>
/// <summary>
/// Gets the rules the adapter provides.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <param name="descriptor">A <see cref="PropertyDescriptor"/> instance for the property that is being validated.</param>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.DataAnnotations\StringLengthValidatorAdapter.cs
/// <summary>
/// An adapter for the <see cref="System.ComponentModel.DataAnnotations.StringLengthAttribute"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="StringLengthValidatorAdapter"/> class.
/// </summary>
/// <summary>
/// Gets a boolean that indicates if the adapter can handle the
/// provided <paramref name="attribute"/>.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <returns><see langword="true" /> if the attribute can be handles, otherwise <see langword="false" />.</returns>
/// <summary>
/// Gets the rules the adapter provides.
/// </summary>
/// <param name="attribute">The <see cref="ValidationAttribute"/> that should be handled.</param>
/// <param name="descriptor">A <see cref="PropertyDescriptor"/> instance for the property that is being validated.</param>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\AdapterBase.cs
/// <summary>
/// Defines the core functionality of an adapter between Fluent Validation validators and Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
/// <summary>
/// Gets the name of the members that the validator applied to.
/// </summary>
/// <returns>A string containing the name of members that the validator is applied to.</returns>
/// <summary>
/// Get the formatted error message of the validator.
/// </summary>
/// <returns>A formatted error message string.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\DefaultFluentAdapterFactory.cs
/// <summary>
/// Default implementation of the <see cref="IFluentAdapterFactory"/> interface.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultFluentAdapterFactory"/> class.
/// </summary>
/// <summary>
/// Creates a <see cref="IFluentAdapter"/> instance based on the provided <paramref name="propertyValidator"/>.
/// </summary>
/// <param name="propertyValidator">The <see cref="IPropertyValidator"/> for which the adapter should be created.</param>
/// <returns>An <see cref="IFluentAdapter"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\EmailAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="EmailValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\EqualAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="EqualAdapter"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\ExactLengthAdapater.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="ExactLengthValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\ExclusiveBetweenAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="ExclusiveBetweenValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\FallbackAdapter.cs
/// <summary>
/// Implementation of <see cref="IFluentAdapterFactory"/> that will always return <see langword="false"/>
/// when <see cref="CanHandle"/> is called. This adapter will be used when no other of the available
/// adapters are able to handle the validator.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\FluentValidationRegistrations.cs
/// <summary>
/// Application registrations for Fluent Validation types.
/// </summary>
/// <summary>
/// Creates a new instance of the <see cref="FluentValidationRegistrations"/> class, that performs
/// the default registrations of the Fluent Validation types.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\FluentValidationValidator.cs
/// <summary>
/// The default Fluent Validation implementation of <see cref="IValidator"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="FluentValidationValidator"/> class for the
/// specified <see cref="IValidator"/>.
/// </summary>
/// <param name="validator">The Fluent Validation validator that should be used.</param>
/// <param name="factory">Factory for creating adapters for the type that is being validated.</param>
/// <param name="modelType">The type of the model that is being validated.</param>
/// <summary>
/// Gets the description of the validator.
/// </summary>
/// <value>A <see cref="ModelValidationDescriptor"/> instance.</value>
/// <summary>
/// Gets the <see cref="System.Type"/> of the model that is being validated by the validator.
/// </summary>
/// <summary>
/// Validates the specified instance.
/// </summary>
/// <param name="instance">The instance that should be validated.</param>
/// <param name="context">The <see cref="NancyContext"/> of the current request.</param>
/// <returns>A <see cref="ModelValidationResult"/> with the result of the validation.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\FluentValidationValidatorFactory.cs
/// <summary>
/// Creates and <see cref="IValidator"/> for Fluent Validation.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="FluentValidationValidatorFactory"/> instance, with the
/// provided <see cref="IFluentAdapterFactory"/>.
/// </summary>
/// <param name="adapterFactory">The factory that should be usdd to create <see cref="IFluentAdapter"/> instances.</param>
/// <param name="validators">The <see cref="IValidator"/> instance that are available for validation.</param>
/// <summary>
/// Creates a <see cref="IModelValidator"/> instance for the given type.
/// </summary>
/// <param name="type">The type of the model that is being validated.</param>
/// <returns>An <see cref="IModelValidator"/> instance. If no fluent validation rules were found for the specified <paramref name="type"/> then <see langword="null"/> is returned.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\GreaterThanAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="GreaterThanValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\GreaterThanOrEqualAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="GreaterThanOrEqualValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\IFluentAdapter.cs
/// <summary>
/// Defines the functionality of a Fluent Validation adapter.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Gets the <see cref="ModelValidationRule"/>'s for the Fluent Validation validator.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> instance, containing <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\IFluentAdapterFactory.cs
/// <summary>
/// Defines the functionality of a factory for creating <see cref="IFluentAdapter"/> instances.
/// </summary>
/// <summary>
/// Creates a <see cref="IFluentAdapter"/> instance based on the provided <paramref name="propertyValidator"/>.
/// </summary>
/// <param name="propertyValidator">The <see cref="IPropertyValidator"/> for which the adapter should be created.</param>
/// <returns>An <see cref="IFluentAdapter"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\InclusiveBetweenAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="InclusiveBetweenValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\LengthAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="LengthValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\LessThanAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="LessThanAdapter"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\LessThanOrEqualAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="LessThanOrEqualValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\NotEmptyAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="NotEmptyValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\NotEqualAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="NotEqualValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\NotNullAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="NotNullValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatibility with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation\RegularExpressionAdapter.cs
/// <summary>
/// Adapter between the Fluent Validation <see cref="RegularExpressionValidator"/> and the Nancy validation rules.
/// </summary>
/// <summary>
/// Gets whether or not the adapter can handle the provided <see cref="IPropertyValidator"/> instance.
/// </summary>
/// <param name="validator">The <see cref="IPropertyValidator"/> instance to check for compatability with the adapter.</param>
/// <returns><see langword="true" /> if the adapter can handle the validator, otherwise <see langword="false" />.</returns>
/// <summary>
/// Get the <see cref="ModelValidationRule"/> instances that are mapped from the fluent validation rule.
/// </summary>
/// <returns>An <see cref="IEnumerable{T}"/> of <see cref="ModelValidationRule"/> instances.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation.Tests\DefaultFluentAdapterFactoryFixture.cs
// Given
// When
// Then
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation.Tests\EmailAdapterFixture.cs
//var member =
//    typeof (ClassUnderTest).GetProperty("Email");
//var rule = 
//    new PropertyRule(member, )
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.Validation.FluentValidation.Tests\FluentValidationValidatorFactoryFixture.cs
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid\DefaultFileSystemFactory.cs
/// <summary>
/// Default implementation of the <see cref="IFileSystemFactory"/> interface.
/// </summary>
/// <remarks>This implementation always returns instances of the <see cref="LiquidNancyFileSystem"/> type.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultFileSystemFactory"/> class
/// </summary>
/// <summary>
/// Gets a <see cref="IFileSystem"/> instance for the provided <paramref name="context"/>.
/// </summary>
/// <param name="context">The context that the filesystem should be created for.</param>
/// <param name="extensions"></param>
/// <returns>An <see cref="IFileSystem"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid\DotLiquidRegistrations.cs
/// <summary>
/// Used to register the default naming conventions for the ViewEngine. The naming convention affects DotLiquid Drops and filters.
/// See <a href="https://github.com/formosatek/dotliquid/wiki/DotLiquid-Drops#tips">DotLiquid's documentation</a> on the subject for more information.
///
/// This can be overridden in a bootstrapper.
/// </summary>
/// <summary>
/// Register the <c>RubyNamingConvention</c> as the default.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid\DotLiquidViewEngine.cs
/// <summary>
/// View engine for rendering dotLiquid views.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DotLiquidViewEngine"/> class.
/// </summary>
/// <param name="namingConvention">Determines the DotLiquid naming convention that will be used for filters and Drops. This will default to the <c>RubyNamingConvention</c>.</param>
/// <remarks>The instance will use the <see cref="DefaultFileSystemFactory"/> internally.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="DotLiquidViewEngine"/> class.
/// </summary>
/// <param name="fileSystemFactory">Factory used to retrieve the <see cref="IFileSystem"/> instance that should be used by the engine.</param>
/// <param name="namingConvention">The naming convention used by filters and DotLiquid's <c>Drop</c>s</param>
/// <summary>
/// Gets the extensions file extensions that are supported by the view engine.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> instance containing the extensions.</value>
/// <remarks>The extensions should not have a leading dot in the name.</remarks>
/// <summary>
/// Initialise the view engine (if necessary)
/// </summary>
/// <param name="viewEngineStartupContext">Startup context</param>
/// <summary>
/// Renders the view.
/// </summary>
/// <param name="viewLocationResult">A <see cref="ViewLocationResult"/> instance, containing information on how to get the view template.</param>
/// <param name="model">The model that should be passed into the view</param>
/// <param name="renderContext"></param>
/// <returns>A response</returns>
// Set the parsed template
// If we got past that, we have a good response
// Syntax Exceptions cause a 500
// Build the error message
// Create the error model with a Nancy DynamicDictionary because i can ;)
// Hash up the Error model so DotLiquid will understand it
// Grab the error HTML from the embedded resource and build up the DotLiquid template.
// Build the error message
// Create the error model with a Nancy DynamicDictionary because i can ;)
// Hash up the Error model so DotLiquid will understand it
// Grab the error HTML from the embedded resource
// Build the response
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid\DynamicDrop.cs
/// <summary>
/// Initializes a new instance of the <see cref="DynamicDrop"/> class.
/// </summary>
/// <param name="model">The view model.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid\IFileSystemFactory.cs
/// <summary>
/// Factory for creating a <see cref="IFileSystem"/> instance.
/// </summary>
/// <summary>
/// Gets a <see cref="IFileSystem"/> instance for the provided <paramref name="context"/>.
/// </summary>
/// <param name="context">The context that the filesystem should be created for.</param>
/// <param name="extensions">View extensions to search for</param>
/// <returns>An <see cref="IFileSystem"/> instance.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid\LiquidNancyFileSystem.cs
/// <summary>
/// <see cref="IFileSystem"/> implementation around the Nancy templates.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="LiquidNancyFileSystem"/> class,
/// with the provided <paramref name="context"/>.
/// </summary>
/// <param name="context">The context that the engine can operate in.</param>
/// <param name="extensions"></param>
/// <summary>
/// Reads the content of the template specified by the <paramref name="templateName"/> parameter.
/// </summary>
/// <param name="context">The <see cref="Context"/> of the call.</param>
/// <param name="templateName">The name of the template to read.</param>
/// <exception cref="liquid.Exceptions.FileSystemException">The specified template could not be located.</exception>
/// <returns>The content of the template.</returns>
// Clean up the template name
// Try to find a matching template using established view conventions
// The template name does end with a valid extension, just try to find it
// The template name does not end with a valid extension, try all the possibilities
// If we found one, get the template and pass it back
// Eventually, it would be better to pass back the actual template from the cache if it's already been parsed
// Or to parse here and store it in the cache before passing it back in not
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid.Tests\DotLiquidViewEngineFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Writing the test name in snake_case is slightly ironic, no?
// Given
// When
// Then
// Given
// Construct the model for the View
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid.Tests\DynamicDropFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid.Tests\FakeModel.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid.Tests\LiquidNancyFileSystemFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid.Tests\Functional\PartialRenderingFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.DotLiquid.Tests\Functional\RootPathProvider.cs
/// <summary>
/// Returns the root folder path of the current Nancy application.
/// </summary>
/// <returns>A <see cref="string"/> containing the path of the root folder.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Markdown\MarkDownViewEngine.cs
/// <summary>
/// Viewengine for rendering Markdown
/// </summary>
/// <summary>
/// A regex for removing paragraph tags that the parser inserts on unknown content such as @Section['Content']
/// </summary>
/// <remarks>
///  &lt;p>		- matches the literal string "&lt;p>"
///  (		- creates a capture group, so that we can get the text back by backreferencing in our replacement string
///  @		- matches the literal string "@"
///  [^&lt;]*	- matches any character other than the "&lt;" character and does this any amount of times
///  )		- ends the capture group
///  &lt;/p>	- matches the literal string "&lt;/p>"
/// </remarks>
/// <summary>
/// Gets the extensions file extensions that are supported by the view engine.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> instance containing the extensions.</value>
/// <remarks>The extensions should not have a leading dot in the name.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="MarkDownViewEngine"/> class.
/// </summary>
/// <param name="engineWrapper">The <see cref="SuperSimpleViewEngine"/> that should be used by the engine.</param>
/// <summary>
/// Initialise the view engine (if necessary)
/// </summary>
/// <param name="viewEngineStartupContext">Startup context</param>
/// <summary>
/// Renders the view.
/// </summary>
/// <param name="viewLocationResult">A <see cref="ViewLocationResult"/> instance, containing information on how to get the view template.</param>
/// <param name="model">The model that should be passed into the view</param>
/// <param name="renderContext">The render context.</param>
/// <returns>A response.</returns>
/// <summary>
/// Converts the markdown.
/// </summary>
/// <returns>
/// HTML converted from markdown
/// </returns>
/// <param name='viewLocationResult'>
/// View location result.
/// </param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Markdown\MarkdownViewEngineHost.cs
/// <summary>
/// Initializes a new instance of the <see cref="MarkdownViewEngineHost"/> class.
/// </summary>
/// <param name="viewEngineHost">A decorator <see cref="IViewEngineHost"/></param>
/// <param name="renderContext">The render context.</param>
/// <param name="viewExtensions">The allowed extensions</param>
/// <summary>
/// Context object of the host application.
/// </summary>
/// <value>An instance of the context object from the host.</value>
/// <summary>
/// Html "safe" encode a string
/// </summary>
/// <param name="input">Input string</param>
/// <returns>Encoded string</returns>
/// <summary>
/// Get the contents of a template
/// </summary>
/// <param name="templateName">Name/location of the template</param>
/// <param name="model">Model to use to locate the template via conventions</param>
/// <returns>Contents of the template, or null if not found</returns>
/// <summary>
/// Gets a uri string for a named route
/// </summary>
/// <param name="name">Named route name</param>
/// <param name="parameters">Parameters to use to expand the uri string</param>
/// <returns>Expanded uri string, or null if not found</returns>
/// <summary>
/// Expands a path to include any base paths
/// </summary>
/// <param name="path">Path to expand</param>
/// <returns>Expanded path</returns>
/// <summary>
/// Get the anti forgery token form element
/// </summary>
/// <returns>String containing the form element</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Markdown\MarkdownViewengineRender.cs
/// <summary>
/// A regex for removing paragraph tags that the parser inserts on unknown content such as @Section['Content']
/// </summary>
/// <remarks>
///  &lt;p>		- matches the literal string "&lt;p>"
///  (		- creates a capture group, so that we can get the text back by backreferencing in our replacement string
///  @		- matches the literal string "@"
///  [^&lt;]*	- matches any character other than the "&lt;" character and does this any amount of times
///  )		- ends the capture group
///  &lt;/p>	- matches the literal string "&lt;/p>"
/// </remarks>
/// <summary>
/// Renders stand alone / master page
/// </summary>
/// <param name="templateContent">Template content</param>
/// <returns>HTML converted to markdown</returns>
//TODO: The "Replace" is simply for unit testing HTML/MD strings. Probably needs improving
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Markdown.Tests\MarkdownViewEngineFixture.cs
// Given
// When
// Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//code.jquery.com/jquery-latest.min.js'></script>";
//Then
//Given, When
//Then
//Given, When
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Markdown.Tests\MarkdownViewengineRenderFixture.cs
//Given
//www.w3.org/1999/xhtml'><head></head><body class='mybodyclass'>#Markdown</body></html>";
//www.w3.org/1999/xhtml'><head></head><body class='mybodyclass'><h1>Markdown</h1></body></html>";
//When            
//Then
//Given
//www.w3.org/1999/xhtml'><head></head><body>#Markdown</body></html>";
//www.w3.org/1999/xhtml'><head></head><body><h1>Markdown</h1></body></html>";
//When            
//Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Markdown.Tests\UserModel.cs
/// <summary>
/// Initializes a new instance of the <see cref="T:System.Object"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Nustache\NustacheViewEngine.cs
/// <summary>
/// View engine for rendering nustache views.
/// </summary>
/// <summary>
/// Gets the extensions file extensions that are supported by the view engine.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> instance containing the extensions.</value>
/// <remarks>The extensions should not have a leading dot in the name.</remarks>
/// <summary>
/// Initialise the view engine (if necessary)
/// </summary>
/// <param name="viewEngineStartupContext">Startup context</param>
/// <summary>
/// Renders the view.
/// </summary>
/// <param name="viewLocationResult">A <see cref="ViewLocationResult"/> instance, containing information on how to get the view template.</param>
/// <param name="model">The model that should be passed into the view</param>
/// <param name="renderContext"></param>
/// <returns>A response</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\AttributeValue.cs
/// <summary>
/// Class to represent attribute values and, more importantly, 
/// decipher them from tuple madness slightly.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\ClrTypeResolver.cs
/// <summary>
/// Converts language-specific type name into CRL Type
/// </summary>
/// <typeparam name="TSymbolType">Symbol type enum</typeparam>
/// <typeparam name="TSymbol">Symbol class</typeparam>
/// <summary>
/// Gets remaining symbols that need to be parsed
/// </summary>
/// <summary>
/// Initializes new instance of ClrTypeResolver class. 
/// Provided parameters are used to recognized specific symbols in particular language
/// </summary>
/// <param name="identifier">Symbol type for identifier</param>
/// <param name="keyword">Symbol type for keyword</param>
/// <param name="dot">Symbol type for dot ('.')</param>
/// <param name="whiteSpace">Symbol type for whitespace</param>
/// <param name="arrayBegin">Type of symbol that begins array</param>
/// <param name="arrayEnd">Type of symbol that ends array</param>
/// <summary>
/// Parses given list of symbols in order to get CLR type
/// </summary>
/// <param name="symbols">List of symbols</param>
/// <returns>CLR type</returns>
/// <summary>
/// Dequeues symbols until first symbol of first generic argument
/// </summary>
/// <returns>Returns true if move was successful</returns>
/// <summary>
/// Dequeues symbols representing separator between generic arguments
/// </summary>
/// <summary>
/// Dequeues symbols representing end of generic arguments
/// </summary>
/// <returns>Returns true if move was successful</returns>
/// <summary>
/// Gets CLR from name (keyword) used by specific language 
/// </summary>
/// <param name="typeName">Type name to resolve</param>
/// <returns>CLR type</returns>
/// <summary>
/// Resolves CLR type that is represented by this instance
/// </summary>
/// <param name="resolveType">Function that allows resolving any simple (like int or MyNamespace.SuperClass) type name to CLR type</param>
/// <returns>Resolved CLR type</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\CodeParserHelper.cs
/// <summary>
/// Throws exception says that given type was not found in any accessible assembly
/// </summary>
/// <param name="type">Type that was not found</param>
/// <summary>
/// Returns the directories containing dll files. It uses the default convention as stated by microsoft.
/// </summary>
/// <see cref="http://msdn.microsoft.com/en-us/library/system.appdomainsetup.privatebinpathprobe.aspx"/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\DefaultRazorConfiguration.cs
/// <summary>
/// 
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DefaultRazorConfiguration"/> class.
/// </summary>
/// <summary>
/// Gets a value indicating whether to automatically include the model's namespace in the generated code.
/// </summary>
/// <value>
/// 	<c>true</c> if the model's namespace should be automatically included in the generated code; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Gets the assembly names to include in the generated assembly.
/// </summary>
/// <summary>
/// Gets the default namespaces to be included in the generated code.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\EncodedHtmlString.cs
/// <summary>
/// An html string that is encoded.
/// </summary>
/// <summary>
/// Represents the empty <see cref="EncodedHtmlString"/>. This field is readonly.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="EncodedHtmlString"/> class.
/// </summary>
/// <param name="value">The encoded value.</param>
/// <summary>
/// Returns an HTML-encoded string.
/// </summary>
/// <returns>An HTML-encoded string.</returns>
/// <summary>
/// Implicitly cast a string to an <see cref="EncodedHtmlString"/> instance.
/// </summary>
/// <param name="value">The string that should be encoded.</param>
/// <returns>An <see cref="EncodedHtmlString"/> instance</returns>
/// <summary>
/// Implicitly cast an <see cref="EncodedHtmlString"/> instance to a string.
/// </summary>
/// <param name="encoded">The <see cref="EncodedHtmlString"/> instance.</param>
/// <returns>A string containing the encoded value.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\HelperResult.cs
/// <summary>
/// Helped class used by Razor to render generated code.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HelperResult"/> class,
/// with the provided <paramref name="action"/>.
/// </summary>
/// <param name="action">The action that should be used to produce the result.</param>
/// <summary>
/// Returns a HTML formatted <see cref="string"/> that represents the current <see cref="HelperResult"/>.
/// </summary>
/// <returns>A HTML formatted <see cref="string"/> that represents the current <see cref="HelperResult"/>.</returns>
/// <summary>
/// Returns a <see cref="string"/> that represents the current <see cref="HelperResult"/>.
/// </summary>
/// <returns>A <see cref="string"/> that represents the current <see cref="HelperResult"/>.</returns>
/// <summary>
/// Writes the output of the <see cref="HelperResult"/> to the provided <paramref name="writer"/>.
/// </summary>
/// <param name="writer">A <see cref="TextWriter"/> instance that the output should be written to.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\HtmlHelpers.cs
/// <summary>
/// Helpers to generate html content.
/// </summary>
/// <typeparam name="TModel">The type of the model.</typeparam>
/// <summary>
/// Initializes a new instance of the <see cref="HtmlHelpers{T}"/> class.
/// </summary>
/// <param name="engine">The razor view engine instance that the helpers are being used by.</param>
/// <param name="renderContext">The <see cref="IRenderContext"/> that the helper are being used by.</param>
/// <param name="model">The model that is used by the page where the helpers are invoked.</param>
/// <summary>
/// The model that is being used by the current view.
/// </summary>
/// <value>An instance of the view model.</value>
/// <summary>
/// Base helpers to generate html content.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="HtmlHelpers"/> class.
/// </summary>
/// <param name="engine">The razor view engine instance that the helpers are being used by.</param>
/// <param name="renderContext">The <see cref="IRenderContext"/> that the helper are being used by.</param>
/// <summary>
/// The engine that is currently rendering the view.
/// </summary>
/// <value>A <see cref="RazorViewEngine"/> instance.</value>
/// <summary>
/// The context of the current render operation.
/// </summary>
/// <value>An <see cref="IRenderContext"/> instance.</value>
/// <summary>
/// Renders a partial with the given view name.
/// </summary>
/// <param name="viewName">Name of the view.</param>
/// <returns>An <see cref="IHtmlString"/> representation of the partial.</returns>
/// <summary>
/// Renders a partial with the given view name.
/// </summary>
/// <param name="viewName">Name of the partial view.</param>
/// <param name="modelForPartial">The model that is passed to the partial.</param>
/// <returns>An <see cref="IHtmlString"/> representation of the partial.</returns>
/// <summary>
/// Returns an html string composed of raw, non-encoded text.
/// </summary>
/// <param name="text">The text.</param>
/// <returns>An <see cref="IHtmlString"/> representation of the raw text.</returns>
/// <summary>
/// Creates an anti-forgery token.
/// </summary>
/// <returns>An <see cref="IHtmlString"/> representation of the anti forgery token.</returns>
/// <summary>
/// Returns current culture name
/// </summary>
/// <summary>
/// Returns current authenticated user name
/// </summary>
/// <summary>
/// Determines if current user is authenticated
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\HtmlHelpersExtensions.cs
/// <summary>
/// Razor HTML Helper Extensions
/// </summary>
/// <summary>
/// Create a hidden input field called X-HTTP-Method-Override for the specified <paramref name="method"/>
/// </summary>
/// <typeparam name="T">The model type.</typeparam>
/// <param name="helpers">A reference to the <see cref="HtmlHelpers{TModel}"/> instance.</param>
/// <param name="method">The HTTP method to use.</param>
/// <returns>A string representation of the input field.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\IHtmlString.cs
/// <summary>
/// Returns an HTML-encoded string.
/// </summary>
/// <returns>An HTML-encoded string.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\INancyRazorView.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\IRazorConfiguration.cs
/// <summary>
/// Configuration for the razor view engine.
/// </summary>
/// <summary>
/// Gets a value indicating whether to automatically include the model's namespace in the generated code.
/// </summary>
/// <value>
///     <c>true</c> if the model's namespace should be automatically included in the generated code; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Gets the assembly names.
/// </summary>
/// <summary>
/// Gets the default namespaces.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\IRazorViewRenderer.cs
/// <summary>
/// Renders a view.
/// </summary>
/// <summary>
/// Gets the assemblies.
/// </summary>
/// <summary>
/// Gets the <see cref="SetBaseTypeCodeGenerator"/> that should be used with the renderer.
/// </summary>
/// <summary>
/// Gets the extension this view renderer supports.
/// </summary>
/// <summary>
/// Gets the host.
/// </summary>
/// <summary>
/// Gets the provider that is used to generate code.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\ModelCodeGenerator.cs
/// <summary>
/// Adds base type with model type as generic argument for Razor view class
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\NancyRazorEngineHost.cs
/// <summary>
/// A custom razor engine host responsible for decorating the existing code generators with nancy versions.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyRazorEngineHost"/> class.
/// </summary>
/// <param name="language">The language.</param>
/// <summary>
/// Decorates the code parser.
/// </summary>
/// <param name="incomingCodeParser">The incoming code parser.</param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\NancyRazorErrorView.cs
/// <summary>
/// Razor view used when compilation of the view fails.
/// </summary>
/// <summary>
/// Gets or sets the template for rendering errors.
/// The token "[DETAILS]" will be replaced by the HTML for
/// the actual error.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyRazorErrorView"/> class.
/// </summary>
/// <param name="message">The message.</param>
/// <summary>
/// Gets the message.
/// </summary>
/// <summary>
/// Executes this instance.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\NancyRazorViewBase.cs
/// <summary>
/// Default base class for nancy razor views
/// </summary>
/// <summary>
/// Base class for nancy razor views.
/// </summary>
/// <typeparam name="TModel">Model type</typeparam>
/// <summary>
/// Gets the Html helper.
/// </summary>
/// <summary>
/// Gets the model.
/// </summary>
/// <summary>
/// Gets the Url helper.
/// </summary>
/// <summary>
/// Non-model specific data for rendering in the response
/// </summary>
/// <summary>
/// Gets the body.
/// </summary>
/// <summary>
/// Gets or sets the section contents.
/// </summary>
/// <value>
/// The section contents.
/// </value>
/// <summary>
/// Gets or sets the layout.
/// </summary>
/// <value>
/// The layout.
/// </value>
/// <summary>
/// Gets a value indicating whether this instance has layout.
/// </summary>
/// <value>
/// 	<c>true</c> if this instance has layout; otherwise, <c>false</c>.
/// </value>
/// <summary>
/// Gets or sets the code.
/// </summary>
/// <value>
/// The code.
/// </value>
/// <summary>
/// Gets or sets the path.
/// </summary>
/// <value>
/// The path.
/// </value>
/// <summary>
/// Gets or sets the sections.
/// </summary>
/// <value>
/// The sections.
/// </value>
/// <summary>
/// Used to return text resources
/// </summary>
/// <summary>
/// Executes the view.
/// </summary>
/// <summary>
/// Initializes the specified engine.
/// </summary>
/// <param name="engine">The engine.</param>
/// <param name="renderContext">The render context.</param>
/// <param name="model">The model.</param>
/// <summary>
/// Gets the current <see cref="NancyContext"/> instance.
/// </summary>
/// <value>A <see cref="NancyContext"/> instance.</value>
/// <summary>
/// Gets the current <see cref="Request"/> instance.
/// </summary>
/// <value>A <see cref="Request"/> instance.</value>
/// <summary>
/// Initializes a new instance of the <see cref="NancyRazorViewBase"/> class.
/// </summary>
/// <summary>
/// Writes the results of expressions like: "@foo.Bar"
/// </summary>
/// <param name="value">The value.</param>
/// <summary>
/// Writes literals like markup: "<p>Foo</p>"
/// </summary>
/// <param name="value">The value.</param>
// encode anything that hasn't opted out of it
/// <summary>
/// Writes the provided <paramref name="value"/> to the provided <paramref name="writer"/>.
/// </summary>
/// <param name="writer">The <see cref="TextWriter"/> that should be written to.</param>
/// <param name="value">The value that should be written.</param>
/// <summary>
/// Writes the provided <paramref name="value"/>, as a literal, to the provided <paramref name="writer"/>.
/// </summary>
/// <param name="writer">The <see cref="TextWriter"/> that should be written to.</param>
/// <param name="value">The value that should be written as a literal.</param>
/// <summary>
/// Writes the provided <paramref name="value"/> to the provided <paramref name="writer"/>.
/// </summary>
/// <param name="writer">The <see cref="TextWriter"/> that should be written to.</param>
/// <param name="value">The <see cref="HelperResult"/> that should be written.</param>
/// <summary>
/// Writes the provided <paramref name="value"/>, as a literal, to the provided <paramref name="writer"/>.
/// </summary>
/// <param name="writer">The <see cref="TextWriter"/> that should be written to.</param>
/// <param name="value">The <see cref="HelperResult"/> that should be written as a literal.</param>
/// <summary>
/// Stores sections
/// </summary>
/// <param name="sectionName">Name of the section.</param>
/// <param name="action">The action.</param>
/// <summary>
/// Renders the section.
/// </summary>
/// <param name="sectionName">Name of the section.</param>
/// <returns></returns>
/// <summary>
/// Renders the section.
/// </summary>
/// <param name="sectionName">Name of the section.</param>
/// <param name="required">if set to <c>true</c> [required].</param>
/// <summary>
/// Renders the body.
/// </summary>
/// <returns></returns>
///<summary>
///Indicates if a section is defined.
///</summary>
/// <summary>
/// Executes the view.
/// </summary>
/// <param name="body">The body.</param>
/// <param name="sectionContents">The section contents.</param>
/// <summary>
/// Html encodes an object if required
/// </summary>
/// <param name="value">Object to potentially encode</param>
/// <returns>String representation, encoded if necessary</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\NonEncodedHtmlString.cs
/// <summary>
/// An html string that is not encoded.
/// </summary>
/// <summary>
/// Represents the empty <see cref="NonEncodedHtmlString"/>. This field is readonly.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NonEncodedHtmlString"/> class.
/// </summary>
/// <param name="value">The value.</param>
/// <summary>
/// Returns an HTML-encoded string.
/// </summary>
/// <returns>An HTML-encoded string.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\RazorConfigurationSection.cs
// repeat this pattern for each additional attribute you want in the <add /> tag. 
// Only the assembly="foo.dll" portion is defined in this class, and is accessed 
// via the AssemblyName property. 
// repeat this pattern for each additional attribute you want in the <add /> tag. 
// Only the assembly="foo.dll" portion is defined in this class, and is accessed 
// via the AssemblyName property. 
// this is extraneous, but I find it very useful for enumerating over a configuration collection in a type-safe manner.
// this is extraneous, but I find it very useful for enumerating over a configuration collection in a type-safe manner.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\RazorViewEngine.cs
/// <summary>
/// View engine for rendering razor views.
/// </summary>
/// <summary>
/// Gets the extensions file extensions that are supported by the view engine.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> instance containing the extensions.</value>
/// <remarks>The extensions should not have a leading dot in the name.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="RazorViewEngine"/> class.
/// </summary>
/// <param name="configuration">The <see cref="IRazorConfiguration"/> that should be used by the engine.</param>
/// <summary>
/// Initialise the view engine (if necessary)
/// </summary>
/// <param name="viewEngineStartupContext">Startup context</param>
/// <summary>
/// Renders the view.
/// </summary>
/// <param name="viewLocationResult">A <see cref="ViewLocationResult"/> instance, containing information on how to get the view template.</param>
/// <param name="model">The model that should be passed into the view</param>
/// <param name="renderContext">The render context.</param>
/// <returns>A response.</returns>
/// <summary>
/// Renders the view.
/// </summary>
/// <param name="viewLocationResult">A <see cref="ViewLocationResult"/> instance, containing information on how to get the view template.</param>
/// <param name="model">The model that should be passed into the view</param>
/// <param name="renderContext">The render context.</param>
/// <param name="isPartial">Used by HtmlHelpers to declare a view as partial</param>
/// <returns>A response.</returns>
/// <summary>
/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\RazorViewEngineApplicationStartupRegistrations.cs
/// <summary>
/// Default dependency registrations for the <see cref="RazorViewEngine"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\UrlHelpers.cs
/// <summary>
/// Helpers for url related functions.
/// </summary>
/// <typeparam name="TModel">The type of the model.</typeparam>
/// <summary>
/// Initializes a new instance of the <see cref="UrlHelpers&lt;TModel&gt;"/> class.
/// </summary>
/// <param name="razorViewEngine">The razor view engine.</param>
/// <param name="renderContext">The render context.</param>
/// <summary>
/// The engine that is currently rendering the view.
/// </summary>
/// <value>A <see cref="RazorViewEngine"/> instance.</value>
/// <summary>
/// The context of the current render operation.
/// </summary>
/// <value>An <see cref="IRenderContext"/> instance.</value>
/// <summary>
/// Retrieves the absolute url of the specified path.
/// </summary>
/// <param name="path">The path.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\CSharp\CSharpClrTypeResolver.cs
/// <summary>
/// Resolves C# type name to CLR type
/// </summary>
/// <summary>
/// Dequeues symbols '>' representing end of generic arguments
/// </summary>
/// <returns>Returns true if move was successful</returns>
/// <summary>
/// Dequeues symbol ',' and whitespace representing separator between generic arguments
/// </summary>
/// <summary>
/// equeues symbol '&lt;' representing begin of generic arguments
/// </summary>
/// <returns>Returns true if move was successful</returns>
/// <summary>
/// Gets CLR from name (keyword) used by C#
/// </summary>
/// <param name="typeName">Type name to resolve</param>
/// <returns>CLR type</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\CSharp\CSharpRazorViewRenderer.cs
/// <summary>
/// Renderer for CSharp razor files.
/// </summary>
/// <summary>
/// Gets the assemblies.
/// </summary>
/// <summary>
/// Gets the extension this view renderer supports.
/// </summary>
/// <summary>
/// Gets the <see cref="SetBaseTypeCodeGenerator"/> that should be used with the renderer.
/// </summary>
/// <summary>
/// Gets the host.
/// </summary>
/// <summary>
/// Gets the provider that is used to generate code.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="CSharpRazorViewRenderer"/> class.
/// </summary>
/// <summary>
/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
/// </summary>
/// <filterpriority>2</filterpriority>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\CSharp\NancyCSharpRazorCodeParser.cs
/// <summary>
/// Nancy razor parser for csharp files.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyCSharpRazorCodeParser"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\VisualBasic\NancyVisualBasicRazorCodeParser.cs
/// <summary>
/// Nancy razor parser for visual basic files.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyVisualBasicRazorCodeParser"/> class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\VisualBasic\VisualBasicClrTypeResolver.cs
/// <summary>
/// Resolves VB.NET type name to CLR type
/// </summary>
/// <summary>
/// Dequeues symbol ')' representing end of generic arguments
/// </summary>
/// <returns>Returns true if move was successful</returns>
/// <summary>
/// Dequeues symbol ',' and whitespace representing separator between generic arguments
/// </summary>
/// <summary>
/// Dequeues symbols '(Of' representing begin of generic arguments
/// </summary>
/// <returns>Returns true if move was successful</returns>
/// <summary>
/// Gets CLR from name (keyword) used by VB.NET
/// </summary>
/// <param name="typeName">Type name to resolve</param>
/// <returns>CLR type</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor\VisualBasic\VisualBasicRazorViewRenderer.cs
/// <summary>
/// Renderer for Visual Basic razor files.
/// </summary>
/// <summary>
/// Gets the assemblies.
/// </summary>
/// <summary>
/// Gets the extension this view renderer supports.
/// </summary>
/// <summary>
/// Gets the <see cref="SetBaseTypeCodeGenerator"/> that should be used with the renderer.
/// </summary>
/// <summary>
/// Gets the host.
/// </summary>
/// <summary>
/// Gets the provider that is used to generate code.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="VisualBasicRazorViewRenderer"/> class.
/// </summary>
/// <summary>
/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
/// </summary>
/// <filterpriority>2</filterpriority>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor.BuildProviders\NancyCSharpRazorBuildProvider.cs
/// <summary>
/// Initializes a new instance of the <see cref="NancyCSharpRazorBuildProvider"/> class.
/// </summary>
/// <summary>
/// Represents the compiler type used by a build provider to generate source code for a custom file type.
/// </summary>
/// <returns>A read-only <see cref="T:System.Web.Compilation.CompilerType"/> representing the code generator, code compiler, and compiler settings used to build source code for the virtual path. The base class returns null.</returns>
/// <summary>
/// Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.
/// </summary>
/// <param name="assemblyBuilder">The assembly builder that references the source code generated by the build provider.</param>
/// <summary>
/// Returns a type generated by the build provider from the virtual path.
/// </summary>
/// <returns>The type that is generated by the build provider for the virtual path. The base class returns null.</returns>
/// <param name="results">The compilation results for the build provider's virtual path.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor.BuildProviders\NancyVisualBasicRazorBuildProvider.cs
/// <summary>
/// Initializes a new instance of the <see cref="NancyCSharpRazorBuildProvider"/> class.
/// </summary>
/// <summary>
/// Represents the compiler type used by a build provider to generate source code for a custom file type.
/// </summary>
/// <returns>A read-only <see cref="T:System.Web.Compilation.CompilerType"/> representing the code generator, code compiler, and compiler settings used to build source code for the virtual path. The base class returns null.</returns>
/// <summary>
/// Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.
/// </summary>
/// <param name="assemblyBuilder">The assembly builder that references the source code generated by the build provider.</param>
/// <summary>
/// Returns a type generated by the build provider from the virtual path.
/// </summary>
/// <returns>The type that is generated by the build provider for the virtual path. The base class returns null.</returns>
/// <param name="results">The compilation results for the build provider's virtual path.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor.Tests\GreetingViewBase.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor.Tests\RazorViewEngineFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given, When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor.Tests\TestModel.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor.Tests\TextResourceFinderFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor.Tests.Models\Hobby.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Razor.Tests.Models\Person.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\NancyBindingProvider.cs
/// <summary>
/// Loads binding files from the application path as returned by the current <see cref="IRootPathProvider"/>.
/// </summary>
/// <remarks>This will scan all sub-folders as well.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="NancyBindingProvider"/> class, 
/// with the provided <paramref name="rootPathProvider"/>.
/// </summary>
/// <param name="rootPathProvider">The root path provider that defines where bindings should be looked for.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\NancySparkView.cs
/// <summary>
/// Non-model specific data for rendering in the response
/// </summary>
/// <summary>
/// Non-model specific data retrieved using the &lt;viewdata /&gt; tag in Spark views
/// </summary>
/// <remarks>See more on http://sparkviewengine.com/documentation/variables#Usingviewdata</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\NancyViewData.cs
/// <summary>
/// Wraps <see cref="NancySparkView.ViewBag"/> so that it can be retrieved in view by using Spark's &lt;viewdata /&gt; tag
/// </summary>
/// <example> In route add something to ViewBag:
/// <code>
/// this.ViewBag["foo"] = "bar";
/// </code>
/// In view:
/// <code>
/// &lt;viewdata foo="string" /&gt;
/// 
/// The value of foo is: ${foo}
/// </code>
/// </example>
/// <summary>
/// Initializes a new instance of <see cref="NancyViewData"/>
/// </summary>
/// <param name="view">view, whose <see cref="NancySparkView.ViewBag"/> will be used to retrieve values</param>
/// <summary>
/// Gets a view data value from the <see cref="NancySparkView.ViewBag"/>
/// </summary>
/// <param name="key"><see cref="NancySparkView.ViewBag"/> key</param>
/// <returns>null if the key wasn't present in the <see cref="NancySparkView.ViewBag"/></returns>
/// <remarks>This method is output to the generated view class when &lt;viewdata /&gt; tag is used</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\NancyViewFolder.cs
/// <summary>
/// Implementation of the IViewFolder interface to have Spark use views that's been discovered by Nancy's view locator.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="NancyViewFolder"/> class, using the provided
/// <see cref="viewEngineStartupContext"/> instance.
/// </summary>
/// <param name="viewEngineStartupContext"></param>
// No need to lock here
/// <summary>
/// Gets the source of the requested view.
/// </summary>
/// <param name="path">The view to get the source for</param>
/// <returns>A <see cref="IViewFile"/> instance.</returns>
/// <summary>
/// Lists all view for the specified <paramref name="path"/>.
/// </summary>
/// <param name="path">The path to return views for.</param>
/// <returns>An <see cref="IEnumerable{T}"/> that contains the matched views.</returns>
/// <summary>
/// Gets a value that indicates whether or not the view folder contains a specific view.
/// </summary>
/// <param name="path">The view to check for.</param>
/// <returns><see langword="true"/> if the view exists in the view folder; otherwise <see langword="false"/>.</returns>
// Horrible hack, but we have no way to get a context
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\SparkRenderContextWrapper.cs
/// <summary>
/// Wraps <see cref="IRenderContext"/> to replace tilde (~/) path resolution with Spark's native implementation. 
/// </summary>
/// <remarks>This allows the use of &lt;resources /&gt; configuration section. 
/// Read more on http://sparkviewengine.com/documentation/configuring#Sparksettingsinconfigfile</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\SparkViewEngine.cs
/// <summary>
/// View engine for rendering spark views.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="SparkViewEngine"/> class.
/// </summary>
/// <summary>
/// Gets the extensions file extensions that are supported by the view engine.
/// </summary>
/// <value>An <see cref="IEnumerable{T}"/> instance containing the extensions.</value>
/// <remarks>The extensions should not have a leading dot in the name.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\SparkViewEngineResult.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\Descriptors\BuildDescriptorParams.cs
// this object is meant to be immutable and used in a dictionary.
// the hash code will always be used so it isn't calculated just-in-time.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\Descriptors\DefaultDescriptorBuilder.cs
/*empty is a valid value*/)
/// <remarks>Apply all of the filters PotentialLocations in order</remarks>
/// <summary>
/// Simplified parser for &lt;use master=""/&gt; detection.
/// TODO: Rob G - move somewhere else when I've had some sleep - probably to Spark.Parser in Core
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\Descriptors\DescriptorFilterExtensions.cs
//public static class DescriptorFilterExtensions
//{
//    public static void AddFilter(this ISparkServiceContainer target, IDescriptorFilter filter)
//    {
//        target.GetService<IDescriptorBuilder>().AddFilter(filter);
//    }
//    public static void AddFilter(this SparkViewEngine target, IDescriptorFilter filter)
//    {
//        target.DescriptorBuilder.AddFilter(filter);
//    }
//    public static void AddFilter(this IDescriptorBuilder target, IDescriptorFilter filter)
//    {
//        if (!(target is DefaultDescriptorBuilder))
//        {
//            throw new InvalidCastException("IDescriptorFilters may only be added to DefaultDescriptorBuilder");
//        }
//        ((DefaultDescriptorBuilder) target).AddFilter(filter);
//    }
//    public static void AddFilter(this DefaultDescriptorBuilder target, IDescriptorFilter filter)
//    {
//        target.Filters.Add(filter);
//    }
//}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\Descriptors\IDescriptorBuilder.cs
/// <summary>
/// Implemented by custom descriptor builder to quickly extract additional parameters needed
/// to locate templates, like the theme or language in effect for the request
/// </summary>
/// <param name="viewLocationResult">Context information for the current request</param>
/// <returns>An in-order array of values which are meaningful to BuildDescriptor on the same implementation class</returns>
//TODO: RobG: Move to lower in the Nancy stack to allow for multi-lingual support in all views
/// <summary>
/// Given a set of MVC-specific parameters, a descriptor for the target view is created. This can
/// be a bit more expensive because the existence of files is tested at various candidate locations.
/// </summary>
/// <param name="buildDescriptorParams">Contains all of the standard and extra parameters which contribute to a descriptor</param>
/// <param name="searchedLocations">Candidate locations are added to this collection so an information-rich error may be returned</param>
/// <returns>The descriptor with all of the detected view locations in order</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark\Descriptors\IDescriptorFilter.cs
/// <summary>
/// Called frequently to extract filter-specific parameters from a request viewLocationResult. This call
/// happens on every request so should be implemented as efficiently as possible.
/// </summary>
/// <param name="viewLocationResult">The current request's action viewLocationResult</param>
/// <param name="extra">Dictionary where additional parameters should be added</param>
/// <summary>
/// The DefaultDescriptorBuilder calls this method for the filter to return a modified enumerable
/// ordered list of potential template locations. This is called only when the unique combination of action,
/// master, view, and extra have not been resolved previously.
/// </summary>
/// <param name="locations">incoming ordered list of locations</param>
/// <param name="extra">extra parameters which have been extracted</param>
/// <returns>either the original list or a new, augmented, enumerable list</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark.Tests\NancyViewFolderFixture.cs
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
// Given
// When
// Then
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark.Tests\SparkViewEngineFixture.cs
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given
// When
//Then
//Given, When
//Then
//Given, Then
//Then
//Given, When
//Then
//Given, When
//Then
//Given, When
//Then
//Given
//When
//Then
//Given
//When
//Then
//cdn.example.com/mysite/scripts/test.js""/>");
// Given
//When
// Then
//Given,
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
//Given
//When
//Then
// Given
// When
// Then
//When
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\its\sources\Nancy\src\Nancy.ViewEngines.Spark.Tests\ViewModels\FakeViewModel.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\AssemblyInfo.Shared.cs
/*
// The value should look like "Version:X.X.X.X Branch:not-set Sha1:not-set"
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\Signing.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\AbstractControlFlowGraphBuilder.cs
/*
// Remove empty blocks
// Replace successors
// Fix entry block
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\BlockIdProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\CfgAllPathValidator.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\CfgSerializer.cs
/*
// Add labels to the binary branch block successors
// shorten the text
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\CSharpControlFlowGraph.cs
/*
// historically, these have been considered as expected
// but we should be aware of what syntax we do not yet support (ToDo)
// https://github.com/SonarSource/sonar-dotnet/issues/2541
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\CSharpControlFlowGraphBuilder.cs
/*
// these look strange in the CFG:
// we ignore 'discard' parameters
// Do nothing, this is just variable assignment and the Pattern itself contains
// only the new variable(s), which are not enough to evaluate the assignment.
// The handling should be done in CSharpExplodedGraph and UcfgInstructionFactory.
// The recursive pattern has PropertyPatternClause and PositionalPatternClause which
// need to be recursively handled since they can have multiple subpatterns.
// e.g. for "o is string { Length: 5 }": RecursivePattern -> PropertyPatternClause -> ConstantPattern
// Support for PositionalPatternClause will be added by https://jira.sonarsource.com/browse/SONARSEC-791
// successor - either finally of next block after try statement
// Create a finally block that can either go to try-finally successor (happy path) or exit target (exceptional path)
// This finally block becomes current exit target stack in case we have a return inside the try/catch block
// If there is a catch with no Exception filter or equivalent we don't want to
// join the tryStatement start/end blocks with the exit block because all
// exceptions will be caught before going to finally
// try end
// happy path, no exceptions thrown
// unexpected exception thrown, go to exit (through finally if present)
// there is a return inside the `try`, thus a JumpBlock directly to the finally or exit will be created
// if an exception is thrown, it will reach the `catch` blocks
// if this try is inside another try, the `beforeTryBlock` must have edges to the outer catch & finally blocks
// otherwise, what happens before the try is not handled by any catch or finally
// Default section is always evaluated last, we are handling it first because
// the CFG is built in reverse order
// All "goto default;" will jump to this block
// Skip the default section if it contains a single default label; we already handled it
// Handle C#7 pattern matching case Block
// When there is a `throw` inside a `try`, and there is a `catch` with a filter,
// the `throw` block should point to both the `catch` and the `exit` blocks.
//// while (A) { B; }
// A
// B
//// for (A; B; C) { D; }
// C
// D
// B
// A
// Variable declaration in a foreach statement is not a VariableDeclarator, otherwise it would be added here.
// The nameof arguments are not evaluated at runtime and should not be added
// to the block as instructions
// ref arguments should be added at the end since they remove
// the constraints on the arguments after all the other arguments are evaluated
// The nameof arguments are not evaluated at runtime and should not be added
// to the block as instructions
// There are variable declarations which implicitly get a value, such as foreach (var x in xs)
/// <summary>
/// Builds a conditional expression with two successor blocks. The BuildExpression method
/// creates a tree with only one successor.
/// </summary>
// Fallback to generating an additional branch block for the if statement itself.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\IControlFlowGraph.cs
/*
/// <summary>
/// Represents a Control Flow Graph of a method or property.
/// Provides access to the entry, exit and all blocks (<see cref="Block"/>) inside the CFG.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\BinaryBranchBlock.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\BinaryBranchingSimpleBlock.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\Block.cs
/*
/// <summary>
/// Basic building blocks of a Control Flow Graph (<see cref="IControlFlowGraph"/>).
/// Holds a list of instructions which have no jumps between them.
/// </summary>
// Protected to allow extending and mocking
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\BranchBlock.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\ExitBlock.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\ForeachCollectionProducerBlock.cs
/*
// This block can't be removed by the CFG simplification, unlike the base class SimpleBlock
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\ForInitializerBlock.cs
/*
// This block can't be removed by the CFG simplification, unlike the base class SimpleBlock
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\JumpBlock.cs
/*
/// <summary>
/// If there was no jump, this block would be the successor.
/// It can be null, when it doesn't make sense. For example in case of lock statements.
/// </summary>
// JumpBlock can't be removed by the CFG simplification, unlike the base class SimpleBlock
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\LockBlock.cs
/*
// This block can't be removed by the CFG simplification, unlike the base class SimpleBlock
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\SimpleBlock.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\TemporaryBlock.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ControlFlowGraph\Blocks\UsingEndBlock.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\Helpers\CSharpSyntaxHelper.cs
/*
// This is a simplification as we don't check where the method is defined (so this could be this or base)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\Helpers\DictionaryExtensions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\Helpers\DotWriter.cs
/*
// Curly braces in the label reverse the orientation of the columns/rows
// Columns/rows are created with pipe
// New lines are inserted with \n; \r\n does not work well.
// ID [shape=record label="{<header>|<line1>\n<line2>\n...}"]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\Helpers\EnumerableExtensions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\Helpers\SemanticModelHelper.cs
/*
/// <summary>
/// Starting .NET Framework 4.6.1, we've noticed that LINQ methods aren't resolved properly, so we need to use the CandidateSymbol.
/// </summary>
/// <param name="model">Semantic model</param>
/// /// <param name="node">Node for which it gets the symbol</param>
/// <returns>
/// The symbol if resolved.
/// The first candidate symbol if resolution failed.
/// Null if no symbol was found.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\Helpers\StringExtensions.cs
/*
/// <summary>
/// Splits the input string to the list of words.
///
/// Letters and consecutive capital letters are ignored.
/// For example:
/// thisIsAName => this is a name
/// ThisIsIt => this is it
/// bin2hex => bin hex
/// HTML => h t m l
/// PEHeader => p e header
/// </summary>
/// <param name="name">A string containing words.</param>
/// <returns>A list of words (all lowercase) contained in the string.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\Properties\AssemblyInfo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\AccessorDeclarationSyntaxExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ArgumentSyntaxExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\BaseMethodDeclarationSyntaxExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
// Prior to C# 7, the ExpressionBody properties did not override a base method.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\CasePatternSwitchLabelSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ClassOrStructConstraintSyntaxExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\CommonForEachStatementSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ConstantPatternSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ConstructorDeclarationSyntaxExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\CrefParameterSyntaxExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\DeclarationExpressionSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\DeclarationPatternSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\DestructorDeclarationSyntaxExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\DiscardDesignationSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\DiscardPatternSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ForEachStatementSyntaxExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ForEachVariableStatementSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\IFieldSymbolExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ImplicitStackAllocArrayCreationExpressionSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\INamedTypeSymbolExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\IsPatternExpressionSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ISyntaxWrapper`1.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
/// <summary>
/// Represents a light-up wrapper for a type derived from a known back syntax kind <typeparamref name="T"/>.
/// </summary>
/// <typeparam name="T">The base syntax kind which is exposed in the referenced API.</typeparam>
/// <summary>
/// Gets the wrapped syntax node.
/// </summary>
/// <value>
/// The wrapped syntax node.
/// </value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ITypeParameterSymbolExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ITypeSymbolExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\LanguageVersionEx.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
// Field names should not contain underscore - Following roslyn naming conventions
// Field names should not contain underscore
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\LightupHelpers.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
// The wrappers support a null instance
// The current runtime doesn't define the target type of the conversion, so no instance of it can exist
// Avoid creating the delegate if the value already exists
// Unlike an extension method which would throw ArgumentNullException here, the light-up
// behavior needs to match behavior of the underlying property.
// Unlike an extension method which would throw ArgumentNullException here, the light-up
// behavior needs to match behavior of the underlying property.
// Unlike an extension method which would throw ArgumentNullException here, the light-up
// behavior needs to match behavior of the underlying property.
// Unlike an extension method which would throw ArgumentNullException here, the light-up
// behavior needs to match behavior of the underlying property.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\LocalDeclarationStatementSyntaxExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\LocalFunctionStatementSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\MethodKindEx.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ParenthesizedVariableDesignationSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\PatternSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\PositionalPatternClauseSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\PropertyPatternClauseSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\RangeExpressionSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\RecursivePatternSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\RefExpressionSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\RefTypeSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SeparatedSyntaxListWrapper`1.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
// Currently unused
// Currently unused
// Summary:
//     Creates a new list with the specified node added to the end.
//
// Parameters:
//   node:
//     The node to add.
// Summary:
//     Creates a new list with the specified nodes added to the end.
//
// Parameters:
//   nodes:
//     The nodes to add.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SingleVariableDesignationSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\StackAllocArrayCreationExpressionSyntaxExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SubpatternSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SwitchExpressionArmSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SwitchExpressionSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SymbolDisplayLocalOptionsEx.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SymbolDisplayMemberOptionsEx.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SymbolKindEx.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SyntaxFactoryEx.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SyntaxFactsEx.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
// Unlike an extension method which would throw ArgumentNullException here, the light-up
// behavior needs to match behavior of the underlying property.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SyntaxKindEx.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\SyntaxWrapper`1.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\ThrowExpressionSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\TupleElementSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\TupleExpressionSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\TupleTypeSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\UsingStatementSyntaxExtensions.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\VariableDesignationSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\VarPatternSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\WhenClauseSyntaxWrapper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CFG\ShimLayer\WrapperHelper.cs
// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
// Prior to C# 7, ForEachStatementSyntax was the base type for all foreach statements. If
// the CommonForEachStatementSyntax type isn't found at runtime, we fall back to using this type instead.
/// <summary>
/// Gets the type that is wrapped by the given wrapper.
/// </summary>
/// <param name="wrapperType">Type of the wrapper for which the wrapped type should be retrieved.</param>
/// <returns>The wrapped type, or null if there is no info.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\AnalyzerAdditionalFile.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\AnalyzerConfiguration.cs
/*
/// <summary>
/// Hotspot rules are not configurable (from ruleset) to prevent them from appearing in SonarLint.
/// They are enabled by default and we check if SonarLint.xml contains the rule key on CompilationStart
/// to determine whether to run the analysis or not. SonarLint.xml is added by Scanner for MSBuild
/// and not by SonarLint, hence the hotspots run only when run through the CLI.
/// </summary>
// Ignore options because we always return true for IsEnabled
/// <summary>
/// Singleton to hold the configuration for hotspot rules.
/// </summary>
/// <summary>
/// There could be many rules that check if they are enabled simultaneously and since
/// the XML loading is an IO operation (e.g. slow) we lock until it completes to prevent
/// rules from wrongly deciding that they are disabled while the XML is loaded.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\AnalyzerLanguage.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\IAnalyzerConfiguration.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\MultiValueDictionary.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\PropertyType.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\RuleAttribute.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\RuleParameterAttribute.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\SecondaryLocation.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\SyntaxNodeWithSymbol.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\WellKnownDiagnosticIds.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\FixAllProviders\BidirectionalDictionary.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Common\FixAllProviders\DocumentBasedFixAllProvider.cs
/*
//annotation is already removed from the tree
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\AbstractMethodParameterLookup.cs
/*
// ToDo: this should come from the Roslyn API (https://github.com/dotnet/roslyn/issues/9)
/// <summary>
/// Method returns array of argument syntaxes that represents all syntaxes passed to the parameter.
/// 
/// There could be multiple syntaxes for ParamArray/params.
/// There could be zero or one result for optional parameters.
/// There will be single result for normal parameters.
/// </summary>
/// <summary>
/// Method returns array of argument syntaxes that represents all syntaxes passed to the parameter.
/// 
/// There could be multiple syntaxes for ParamArray/params.
/// There could be zero or one result for optional parameters.
/// There will be single result for normal parameters.
/// <summary>
/// Method returns zero or one argument syntax that represents syntax passed to the parameter.
/// 
/// Caller must ensure that given parameter is not ParamArray/params.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\AccessorAccess.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\AnalysisContextExtensions.cs
/*
// Start action has no registered actions.
// Start action has no registered actions.
// Start action has no registered actions.
// Start action has no registered actions.
// This is the new way SonarLint will handle how and what to report...
// ... but for compatibility purposes we need to keep handling the old-fashioned way
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\AnalysisRunContext.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\AspNetMvcHelper.cs
/*
/// <summary>
/// Returns a value indicating whether the provided method symbol is a ASP.NET MVC
/// controller method.
/// </summary>
/// <summary>
/// Returns a value indicating whether the provided type symbol is a ASP.NET MVC
/// controller.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\Conditions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\DebugHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\DiagnosticAnalyzerContextHelper.cs
/*
//this is locking if the compilation is not present in the Cache.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\DiagnosticDescriptorBuilder.cs
/*
// Allow to configure the analyzers in debug mode only.
// This allows to run test selectively (for example to test only one rule)
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\DiagnosticReportHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\DictionaryExtensions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\DotWriter.cs
/*
// Curly braces in the label reverse the orientation of the columns/rows
// Columns/rows are created with pipe
// New lines are inserted with \n; \r\n does not work well.
// ID [shape=record label="{<header>|<line1>\n<line2>\n...}"]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\EnumerableExtensions.cs
/*
/// <summary>
/// Compares each element between two collections. The elements needs in the same order to be considered equal.
/// </summary>
/// <summary>
/// Applies a specified function to the corresponding elements of two sequences,
/// producing a sequence of the results. If the collections have different length
/// default(T) will be passed in the operation function for the corresponding items that
/// do not exist.
/// </summary>
/// <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
/// <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
/// <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
/// <param name="first">The first sequence to merge.</param>
/// <param name="second">The second sequence to merge.</param>
/// <param name="operation">A function that specifies how to merge the elements from the two sequences.</param>
/// <returns>An System.Collections.Generic.IEnumerable`1 that contains merged elements of
/// two input sequences.</returns>
/// <summary>
/// This is string.Join() as extension. Concatenates members of collection using specified separator between each member. Selector is used to extract string value from T for concatenation.
/// </summary>
/// <summary>
/// This is string.Join() as extension. Concatenates members of collection using specified separator between each member. Selector is used to extract integer value from T for concatenation.
/// </summary>
/// <summary>
/// This is string.Join() as extension. Concatenates members of string collection using specified separator between each member.
/// </summary>
/// <summary>
/// This is string.Join() as extension. Concatenates members of int collection using specified separator between each member.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\EnumHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\EquivalenceChecker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\GeneratedCodeRecognizer.cs
/*
// The C# version of this file can already be detected because it contains special comments
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\HotspotDiagnosticAnalyzer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\IAnalysisRunContext.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\IReportingContext.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\KnownMethods.cs
/*
// Based on Microsoft definition: https://msdn.microsoft.com/en-us/library/1y814bzs.aspx
// Adding support for new async main: https://blogs.msdn.microsoft.com/mazhou/2017/05/30/c-7-series-part-2-async-main
// vb.net is case insensitive
// This is not enough for UWP as it uses other kind of event args (e.g. ILeavingBackgroundEventArgs)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\KnownType.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\LocationHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\MemberDescriptor.cs
/*
// No need to continue looping if the symbol is null
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\NamingHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\ParameterLoader.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\ParameterLoadingAnalysisContext.cs
/*
// only collect compilation start actions and call them later
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\ParameterLoadingDiagnosticAnalyzer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\ProjectTypeHelper.cs
/*
// Legacy Xunit (v1.x)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\PropertiesHelper.cs
/*
// ignoring exception as we cannot log it
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\RemovableDeclarationCollectorBase.cs
/*
// For C#, TOwnerOfSubnodes == TDeclaration == BaseTypeDeclarationSyntax
// For VB, TOwnerOfSubnodes == TypeBlockSyntax, TDeclaration = TypeStatementSyntax
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\ReportingContext.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\SemanticModelHelper.cs
/*
// See https://github.com/dotnet/roslyn/issues/18730
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\SonarAnalysisContext.cs
/*
/// <summary>
/// SonarC# and SonarVB specific context for initializing an analyzer. This type acts as a wrapper around Roslyn
/// <see cref="AnalysisContext"/> to allow for specialized control over the analyzer.
/// Here is the list of fine-grained changes we are doing:
/// - Avoid duplicated issues when the analyzer NuGet (SonarAnalyzer) and the VSIX (SonarLint) are installed simultaneously.
/// - Allow a specific kind of rule-set for SonarLint (enable/disable a rule).
/// - Prevent reporting an issue when it was suppressed on SonarQube.
/// </summary>
/// <summary>
/// This delegate is called on all specific contexts, after the registration to the <see cref="AnalysisContext"/>, to
/// control whether or not the action should be executed.
/// </summary>
/// <remarks>
/// Currently this delegate is set by SonarLint (4.0+) when the project has the NuGet package installed to avoid
/// duplicated analysis and issues. When both the NuGet and the VSIX are available, NuGet will take precedence and VSIX
/// will be inhibited.
/// </remarks>
/// <summary>
/// This delegates control whether or not a diagnostic should be reported to Roslyn.
/// </summary>
/// <remarks>
/// Currently this delegate is set by SonarLint (older than v4.0) to provide a suppression mechanism (i.e. specific
/// issues turned off on the bound SonarQube).
/// </remarks>
/// <summary>
/// This delegate is used to supersede the default reporting action.
/// When this delegate is set, the delegate set for <see cref="ShouldDiagnosticBeReported"/> is ignored.
/// </summary>
/// <remarks>
/// Currently this delegate is set by SonarLint (4.0+) to control how the diagnostic should be reported to Roslyn
/// (including not being reported).
/// </remarks>
// cannot log the exception, so ignore it
// For each action registered on context we need to do some pre-processing before actually calling the rule.
// First, we need to ensure the rule does apply to the current scope (main vs test source).
// Second, we call an external delegate (set by SonarLint for VS) to ensure the rule should be run (usually
// the decision is made on based on whether the project contains the analyzer as NuGet).
// We don't know whether this is a Main or Test source so let's run the rule
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\SonarCodeFixProvider.cs
/*
/// This only disables code-fixes when different versions are loaded
/// In case of analyzers, <see cref="SonarAnalysisContext.IsRegisteredActionEnabled"/> is sufficient, because Roslyn only
/// creates a single instance from each assembly-version, so we can disable the VSIX analyzers
/// In case of code fix providers Roslyn creates multiple instances of the code fix providers. Which means that
/// we can only disable one of them if they are created from different assembly-versions.
/// If the VSIX and the NuGet has the same version, then code fixes show up multiple times, this ticket will fix
/// this problem: https://github.com/dotnet/roslyn/issues/4030
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\SonarDiagnosticAnalyzer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\SourceScope.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\StringExtensions.cs
/*
/// <summary>
/// Splits the input string to the list of words.
///
/// Letters and consecutive capital letters are ignored.
/// For example:
/// thisIsAName => this is a name
/// ThisIsIt => this is it
/// bin2hex => bin hex
/// HTML => h t m l
/// PEHeader => p e header
/// </summary>
/// <param name="name">A string containing words.</param>
/// <returns>A list of words (all lowercase) contained in the string.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\SymbolHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\SymbolUsage.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\SyntaxHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\SyntaxNodeAndSemanticModel.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\SyntaxNodeSymbolSemanticModelTuple.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\TaskHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\TypeHelper.cs
/*
// For is twice as fast as foreach on ImmutableArray so don't use Linq here
// For is twice as fast as foreach on ImmutableArray so don't use Linq here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\UnitTestHelper.cs
/*
// Note: useful comparison of the differing syntax across unit test frameworks
// at https://xunit.github.io/docs/comparisons
// Note: XUnit doesn't have a exception attribute
// Note: XUnit doesn't have a separate "Ignore" attribute. It has a "Skip" parameter
// on the test attribute
/// <summary>
/// List of partial names that are assumed to indicate an assertion method
/// </summary>
// xUnit does not have have attributes to identity test classes
/// <summary>
/// Returns whether the class has an attribute that marks the class
/// as an MSTest or NUnit test class (xUnit doesn't have any such attributes)
/// </summary>
/// <summary>
/// Returns the <see cref="KnownType"/> that indicates the type of the test method or
/// null if the method is not decorated with a known type.
/// </summary>
/// <remarks>We assume that a test is only marked with a single test attribute e.g.
/// not both [Fact] and [Theory]. If there are multiple attributes only one will be
/// returned.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\VbcHelper.cs
/*
/// <summary>
/// VB.Net Complier (VBC) post-process issues and will fail if the line contains the <see cref="VbNetErrorPattern"/>.
/// </summary>
/// <remarks>
/// This helper method is intended to be used only while waiting for the bug to be fixed on Microsoft side.
/// <see href="https://github.com/dotnet/roslyn/issues/5724"/>.
/// </remarks>
/// <param name="diagnostic">
/// The diagnostic to test.
/// </param>
/// <returns>
/// Returns <c>true</c> when reporting the diagnostic will trigger a VBC post-process error and <c>false</c> otherwise.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Helpers\VisualIndentHelper.cs
/*
/// <summary>
/// Helper class to determine if visually one line is more indented than another.
/// </summary>
/// <remarks>
/// If the strings contain a mix of tab and non-tab characters then the text that appears
/// most indented will depend on what the tab spacing used by IDE is.
/// </remarks>
/// <summary>
/// Returns true if it seems likely that the second indent will appear visually
/// longer than the first. The method will only return false if it there is a high
/// degree of confidence that the second input is definitely the same length or
/// shorter (i.e. low number of false positives)
/// </summary>
// If the number of indent tabs is the same then it's safe just to use the absolute number of charaters
// More tabs in first and same or more characters overall ->
// second definitely shorter
// The second string has more tabs. If it is also longer overall
// then we'll return true.
// However, if it has more tabs but fewer letters, we're not sure
// - it depends on what the tab setting is. Since we're only returning
// false if we're sure, we'll return true in that case too.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Metrics\CognitiveComplexity.cs
/*
// used to track logical operations inside parentheses
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Metrics\Distribution.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Metrics\FileComments.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Metrics\MetricsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Properties\AssemblyInfo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\AllBranchesShouldNotHaveSameImplementationBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\BinaryOperationWithIdenticalExpressionsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\BooleanCheckInvertedBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\BooleanLiteralUnnecessaryBase.cs
/*
// LogicalAnd (C#) / AndAlso (VB)
// When we have 'EXPR And True', the true literal is the redundant part
// 'EXPR And False' is always False, thus EXPR is the redundant part
// LogicalOr (C#) / OrElse (VB)
// When we have 'EXPR Or False', the false literal is the redundant part
// 'EXPR Or True' is always True, thus EXPR is the redundant part
// one side is boolean literal, the other is NOT boolean literal
// The BooleanLiteral node is highlighted
// The BooleanLiteral node and the operator are highlighted together
// Inside a binary expression, the expression that is not a boolean literal is highlighted
// e.g. for 'foo() && True', 'foo()' will be highlighted
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\CatchRethrowBase.cs
/*
// We handle differently redundant catch clauses (just throw inside) that are
// followed by a non-redundant catch clause, because if they are removed, the
// method behavior will change.
// Make sure we report only catch clauses that will not change
// the method behavior if removed.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\CertificateValidationCheckBase.cs
/*
//Cache, there might be more of them
//Validation for TryGetNonParamsSyntax, ParamArray/params and therefore array arguments are not inspected
//Report both, assignemnt as well as all implementation occurances
//HttpClientHandler.ServerCertificateCustomValidationCallback uses Func<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool>
//We're actually looking for Func<Any Sender, X509Certificate2, X509Chain, SslPolicyErrors, bool>
//And it should! T1, T2, T3, T4
//We don't care about common (Object) nor specific (HttpRequestMessage) type of Sender
//Direct delegate name
//Value arrived as a parameter
//Value passed as variable
//Validation for TryGetNonParamsSyntax, ParamArray/params and therefore array arguments are not inspected
//Declarator initializer is counted as (default) assignment as well
//Ignore all return statements with recursive call. Result depends on returns that could return compliant validator.
//If there's at leat one concurrent expression, that returns compliant delegate, then there's some logic and this scope is compliant
//Else every return statement is noncompliant
//There's noncompliant issue in this chain
//Add 2nd, 3rd, 4th etc //Secondary marker. If it is not marked already from direct Delegate name or direct Lambda occurance
//There must be at least one return, that does not return true to be compliant. There can be NULL from standalone Throw statement.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\CheckFileLicenseBase.cs
/*
// In standard text mode, we want to be sure that the matched header is on its own
// line, with nothing else on the same line.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ClassNotInstantiatableBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\CognitiveComplexityBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\CommentKeywordBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ConditionalStructureSameConditionBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ConditionalStructureSameImplementationBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ConstructorArgumentValueShouldExistBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\DangerousGetHandleShouldNotBeCalledBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\DeclareTypesInNamespacesBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\DoNotCallMethodsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\DoNotCheckZeroSizeCollectionBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\DoNotInstantiateSharedClassesBase.cs
/*
// This is equivalent to System.ComponentModel.Composition.CreationPolicy.Shared,
// but we do not want dependency on System.ComponentModel.Composition just for that.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\DoNotLockOnSharedResourceBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\DoNotNestTernaryOperatorsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\DoNotOverwriteCollectionElementsBase.cs
/*
/// <summary>
/// Returns the index or key from the provided InvocationExpression or SimpleAssignmentExpression.
/// Returns null if the provided SyntaxNode is not an InvocationExpression or SimpleAssignmentExpression.
/// </summary>
/// <summary>
/// Returns the identifier of a collection that is modified in the provided InvocationExpression
/// or SimpleAssignmentExpression. Returns null if the provided SyntaxNode is not an
/// InvocationExpression or SimpleAssignmentExpression.
/// </summary>
/// <summary>
/// Returns a value specifying whether the provided SyntaxNode is an identifier or
/// a literal (string, numeric, bool, etc.).
/// </summary>
/// <summary>
/// Returns all statements before the specified statement within the containing method.
/// This method recursively traverses all parent blocks of the provided statement.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\DoNotPassSameValueAsMultipleArgumentsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\DoNotThrowFromDestructorsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\EmptyMethodBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\EmptyNestedBlockBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\EncryptionAlgorithmsShouldBeSecureBase.cs
/*
// There exist no GCM mode with AesManaged, so any mode we set will be insecure. We do not raise
// when inside an ObjectInitializerExpression, as the issue is already raised on the constructor
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\EnumNameHasEnumSuffixBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\EnumNameShouldFollowRegexBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ExceptionConstructorShouldNotThrowBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ExpressionComplexityBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\FieldShouldNotBePublicBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\FileLinesBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\FlagsEnumWithoutInitializerBase.cs
/*
// All members initialized
// No members initialized
// Have first uninitialized member after the first initialized member, or
// Have too many uninitialized in the beginning
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\FlagsEnumZeroMemberBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\FunctionComplexityBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\FunctionNestingDepthBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\GenericInheritanceShouldNotBeRecursiveBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\HardcodedIpAddressBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\IfChainWithoutElseBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\IfCollapsibleBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\IfConditionalAlwaysTrueOrFalseBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ImplementSerializationMethodsCorrectlyBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\LineLengthBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\MarkWindowsFormsMainWithStaThreadBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\MethodOverloadsShouldBeGroupedBase.cs
/*
// Groups that should be together are defined by accessibility, abstract, static and member name #4136
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\MethodParameterUnusedBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\MethodsShouldNotHaveIdenticalImplementationsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\MethodsShouldNotHaveTooManyLinesBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\MultipleVariableDeclarationBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\MultipleVariableDeclarationCodeFixProviderBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\NameOfShouldBeUsedBase.cs
/*
// when the parameter name is inside a bigger string, we want to avoid common English words like
// "a", "then", "he", "of", "have" etc, to avoid false positives
// Is string literal or interpolated string
// handle parameters with the same name (in the IDE it can happen) - get groups of parameters
// either no parameters, or duplicated parameters
/// <summary>
/// Iterates over the string tokens (either from simple strings or from interpolated strings)
/// and returns pairs where
/// - the key is the string SyntaxToken which contains the verbatim parameter name
/// - the value is the name of the parameter which is present in the string token
/// </summary>
// given it's exact equality, there can be only one stringToken key in the dictionary
// we are looking at the words inside the string, so there can be multiple parameters matching inside the token
// stop after the first one is found
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\NonAsyncTaskShouldNotReturnNullBase.cs
/*
// IMethodSymbol also handles lambdas
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\OptionalParameterBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\OptionalParameterNotPassedToBaseCallBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ParameterAssignedToBase.cs
/*
// Same problem as in VB.NET / IsAssignmentToCatchVariable:
// parameterSymbol.DeclaringSyntaxReferences is empty for Catch syntax in VB.NET as well as for indexer syntax for C#
// https://github.com/dotnet/roslyn/issues/6209
//If we can't find the location, it's going to be FN
/// <summary>
/// Returns all nodes before the specified statement to the declaration of variable/parameter given by stopLocation.
/// This method recursively traverses all parent blocks of the provided statement.
/// </summary>
//Method declaration or Catch variable declaration, stop here and do not include this statement
//Take all from beginning, including "catch ex" on the way, down to current statement
//Reverse in order to keep the tail
//Keep the tail until "catch ex" or "int i" is found
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ParametersCorrectOrderBase.cs
/*
// for VB the symbol does not contain the method syntax reference
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\PartCreationPolicyShouldBeUsedWithExportAttributeBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\PropertiesAccessCorrectFieldBase.cs
/*
// We want to check the fields read and assigned in all properties in this class
// so this is a symbol-level rule (also means the callback is called only once
// for partial classes)
// Check that if there is a single matching field name it is used by the property
// Collect the list of fields read/written by each property
/**
/// <summary>
/// The rule decides if a property is returning/settings the expected field.
/// We decide what the expected field name should be based on a fuzzy match
/// between the field name and the property name.
/// This class hides the details of matching logic.
/// </summary>
// Calcuate and cache the standardised versions of the field names to avoid
// calculating them every time
// We're not caching the property name as only expect to be called once per property
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\PropertyGetterWithThrowBase.cs
/*
// This is the case in rethrow - see ticket #730.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\PropertyWriteOnlyBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ProvideDeserializationMethodsForOptionalFieldsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\PublicConstantFieldBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\PublicMethodWithMultidimensionalArrayBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\PureAttributeOnVoidMethodBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ReadingStandardInputBase.cs
/*
// This is syntax-only check and we can execute it first
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\RedundantNullCheckBase.cs
/*
// LogicalAnd (C#) / AndAlso (VB)
// LogicalOr (C#) / OrElse (VB)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\RedundantParenthesesBase.cs
/*
// There are always at least two parenthesized expressions
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ReversedOperatorsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\SelfAssignmentBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ShiftDynamicNotIntegerBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ShouldImplementExportedInterfacesBase.cs
/*
// it's ok to use case insensitive even for C# because if that casing is incorrect the code won't compile
// Only one argument, should be typeof expression
// Two arguments, second should be typeof expression
// Parent is AttributeListSyntax, we handle only class attributes
// Retrieve the expression inside of the typeof()/GetType() (e.g. typeof(Foo) => Foo)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\SingleStatementPerLineBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\StringConcatenationInLoopBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\SwitchCasesMinimumThreeBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\SwitchSectionShouldNotHaveTooManyStatementsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\SwitchShouldNotBeNestedBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\SwitchWithoutDefaultBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\TabCharacterBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ThreadResumeOrSuspendShouldNotBeCalledBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\ThrowReservedExceptionsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\TooManyLabelsInSwitchBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\TooManyParametersBase.cs
/*
// no information
// Not a declaration, such as Action
// P/Invoke method is defined externally.
// Do not raise
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\UnaryPrefixOperatorRepeatedBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\UnconditionalJumpStatementBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\UriShouldNotBeHardcodedBase.cs
/*
// Simplified implementation of specification listed on
// https://en.wikipedia.org/wiki/Uniform_Resource_Identifier
//.+";
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\UseShortCircuitingOperatorBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\UseShortCircuitingOperatorFixProviderBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\VariableUnusedBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\WcfNonVoidOneWayBase.cs
/*
// insensitive for VB.NET
// insensitive for VB.NET
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\BypassingAccessibilityBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\ConfiguringLoggersBase.cs
/*
// ASP.NET Core
// log4net
// NLog
// Serilog
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\ControllingPermissionsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\CreatingHashAlgorithmsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\DeliveringDebugFeaturesInProductionBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\DoNotHardcodeCredentialsBase.cs
/*
// Rule was initially implemented with everything lower (which is wrong) so we have to force lower
// before reporting to avoid new issues to appear on SQ/SC.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\EncryptingDataBase.cs
/*
// "RSA" is the base class for all RSA algorithm implementations
// RSA methods added in NET Core 2.1
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\ExecutingSqlQueriesBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\ExpandingArchivesBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\SocketsCreationBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\UsingCommandLineArgumentsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\UsingCookiesBase.cs
/*
// We already checked if ContainingType is IDictionary, but be defensive and check TypeArguments.Count
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Hotspots\UsingRegularExpressionsBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Utilities\CopyPasteTokenAnalyzerBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Utilities\FileMetadataAnalyzerBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Utilities\MetricsAnalyzerBase.cs
/*
/* for MsBuild12 support */ static MetricsInfo CalculateMetrics(MetricsBase metrics, string filePath, bool ignoreHeaderComments)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Utilities\SymbolReferenceAnalyzerBase.cs
/*
/* for MsBuild12 support */ virtual SyntaxToken? GetSetKeyword(ISymbol valuePropertySymbol)
// For the time being, we only handle identifier tokens.
// We could also handle keywords, such as this, base
/* for MsBuild12 support */ abstract SyntaxNode GetBindableParent(SyntaxToken token);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Utilities\TokenTypeAnalyzerBase.cs
/*
/* only for msbuild12 support */ TokenTypeInfo GetTokenTypeInfo(SyntaxTree syntaxTree, SemanticModel semanticModel)
// Handle preprocessor directives here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\Rules\Utilities\UtilityAnalyzerBase.cs
/*
// Make sure the folder exists
// ToDo: Remove this hardcoded hack as soon as the following ticket is fixed:
// https://jira.sonarsource.com/browse/MMF-672
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\BaseTypeContext.cs
/*
/// <summary>
/// Syntax and semantic information about an inheritance relationship
/// </summary>
/// <summary>
/// The node being analyzed - the base list syntax node
/// </summary>
/// <summary>
/// A list of all type syntax nodes for node being analyzed
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\BaseTypeTracker.cs
/*
/// <summary>
/// Checker method called by <see cref="BaseClassTracker"/> to check whether
/// an issue should be reported because of a type the class is inheriting from.
/// </summary>
/// <summary>
/// Tracker class for rules that check the inheritance tree for e.g. disallowed base classes
/// </summary>
/// <typeparam name="TSyntaxKind"></typeparam>
// We can't pass the issueLocation to the lambda directly so we need a temporary variable
/// <summary>
/// Extract the list of type syntax nodes for the base types/interface types
/// </summary>
// assume there won't be more than one matching node
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\ElementAccessContext.cs
/*
/// <summary>
/// Syntax and semantic information about a single element access
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\ElementAccessTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\FieldAccessContext.cs
/*
/// <summary>
/// Syntax and semantic information about a single Field access
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\FieldAccessTracker.cs
/*
// We register for both MemberAccess and IdentifierName and we want to
// avoid raising two times for the same identifier.
// Add any common symbol-level checks here...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\InvocationContext.cs
/*
/// <summary>
/// Syntax and semantic information about a single method invocation
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\InvocationTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\MethodDeclarationContext.cs
/*
/// <summary>
/// Syntax and semantic information about a single method declaration
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\MethodDeclarationTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\ObjectCreationContext.cs
/*
/// <summary>
/// Syntax and semantic information about a object creation
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\ObjectCreationTracker.cs
/*
// We cannot do a syntax check first because a type name can be aliased with
// a using Alias = Fully.Qualified.Name and we will generate false negative
// for new Alias()
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\PropertyAccessContext.cs
/*
/// <summary>
/// Syntax and semantic information about a single property access
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\PropertyAccessTracker.cs
/*
// We register for both MemberAccess and IdentifierName and we want to
// avoid raising two times for the same identifier.
// Add any common symbol-level checks here...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Common\SyntaxTrackers\SyntaxTrackerBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\RspecStrings.cs
//------------------------------------------------------------------------------
// This file was initially generated as a companion to RspecStrings.resx, under the name RspecStrings.Designer.cs
// Since we did not need most of it, we extracted only the used part into this file, and removed the original. 
// 
// So, you should not remove it, nor manually edit it.
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\CBDE\CbdeException.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\CBDE\CbdeHandler.cs
/*
// this is the place where the cbde executable is unpacked. It is in a temp folder
// This is used by unit tests that want to check the log (whose path is the parameter of this action) contains
// what is expected
// cbdePath is inside .sonarqube/out/<n>/
// cbdeDirectoryRoot contains mlir files and results for each assembly
// cbdeProcessSpecificPath is the $"{cbdePath}/CBDE_{pid}/" folder
// cbdeLogFile, cbdeMetricsLogFile and cbdePerfLogFile are inside cbdeProcessSpecificPath
// the cbdeExecutablePath is normally the extractedCbdeBinaryPath, but can be different in tests
// Used for test only
//  Used by unit tests
// Used by unit tests
// we are in test mode
// Roslyn/MSBuild is currently cutting exception message at the end of the line instead
// of displaying the full message. As a workaround, we replace the line ending with ' ## '.
// See https://github.com/dotnet/roslyn/issues/1455 and https://github.com/dotnet/roslyn/issues/24346
// In big projects, multiple source files can have the same name.
// We need to convert all of them to mlir. Mangling the full pathname of each file would be too long.
// We just give a number to each file haviong the same name.
// used only when doing the unit test
// the process might have exited during the loop
// we dispose the StreamWriter to unlock the log file
// we need the physical thread id to get the cpu time.
// contrary to what the deprecation warning says, in this case,
// it cannot be replaced with the ManagedThreadId property on Thread
// this is not a generic collection, so there is no linq way of doing that
// We are copying the interface of the class StopWatch
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\CBDE\MlirExporter.cs
/*
// The following syntaxes are listed in the same order as SyntaxKindEx, which in turn are in the same order as on StyleCop
// Skipping function {method.Identifier.ValueText}{GetAnonymousArgumentsString(method)}, it contains poisonous unsupported syntaxes");
// Ignore it
// An unnamed parameter cannot be used inside the function
// Special case a returning a method group that will be cast into a func
// return method group");
// break");
// continue");
// TODO : Should we transfer to a catch block if we are inside a try/catch?
// This is part of https://github.com/SonarSource/SonarCBDE/issues/111
/*
// {block.GetType().Name}");
// MLIR encodes blocks relationships in operations, not in blocks themselves
// MLIR encodes blocks relationships in operations, not in blocks themselves
// So we need to add the corresponding operations at the end...
// If we reach this point, it means the function has no return, we must manually add one
// For an if or a while, bbb.BranchingNode represent the condition, not the statement that holds the condition
// For a for, bbb.BranchingNode represents the for. Since for is a statement, not an expression, if we
// see a for, we know it's at the top level of the expression tree, so it cannot be a for inside of a if condition
// Case of a method group that will get transformed into at Func<>, but does not have a type
// {op.Dump()} ({op.Kind()})");
// A negation changing type whose source type is unknown");
// true");
// false");
// No need to write the variable, all references to it will be replaced by "unknown"
// {decl.Identifier.ValueText}");
// Initialized with unknown data");
// Some intermediate expressions have no type (member access, initialization of member...)
// and therefore, they have no real value associated to them, we can just ignore them
// {op.Dump()} ({op.Kind()})");
// {op.Dump()} ({op.Kind()})");
// We ignore the case where lhs is not a parameter or a local variable (ie field, property...) because we currently do not support these yet
// In case of an unresolved call, just skip it
// Unresolved: {id.Identifier.ValueText}");
// The entity comes from another assembly
// We can't ignore it if it is a property or a field because it may be used inside an operation (addi, subi, return...)
// So if we ignore it, the next operation will use an unknown register
// In case of a method, we can ignore it
// Identifier from another assembly: {id.Identifier.ValueText}");
// Entity from another assembly: {id.Identifier.ValueText}");
// Not sure if we can be in this situation...
// We will fetch the function only when looking at the function call itself
// In "Class.member", we are not interested in the "Class" part
// We will fetch the function only when looking at the function call itself, we just skip the identifier
// Skipped because MethodDeclarationSyntax or ClassDeclarationSyntax or NamespaceDeclarationSyntax: {id.Identifier.ValueText}");
// IPropertySymbol could be either in a getter context (we should generate unknown) or in a setter
// context (we should do nothing). However, it appears that in setter context, the CFG does not have an
// instruction for fetching the property, so we should focus only on getter context.
// Not a variable of known type: {id.Identifier.ValueText}");
// Binary expression on unsupported types {expr.Dump()}");
// Unknown operator {expr.Dump()}");
// No identifier name for binary assignment expression");
// For now we only handle IdentifierNameSyntax (not ElementAccessExpressionSyntax or other)
// Inc/Decrement of unknown identifier");
// Inc/Decrement of field or property {id.Identifier.ValueText}");
// comparison of unknown type: {op.Dump()}");
// The type is the type of the operands, not of the result, which is always i1
// TODO: We should decide which of GetLineSpan or GetMappedLineSpan is better to use
// This is part of https://github.com/SonarSource/SonarCBDE/issues/30
// Dummy variable because type of %{OpId(getAssignmentValue(op))} is incompatible");
// In some cases, we need an OpId that referes to a boolean variable, even if the variable happens not to be
// a boolean (for instance, it could be a dynamic). In such a case, we just create an unknown bool...
// Beware not to call this function in the middle of writing some text, because it can add some of its own
// Creating necessary bool for conversion");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\CBDE\MlirExporterMetrics.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\CBDE\PreservingEncodingBuffer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\CBDE\PreservingEncodingFallback.cs
/*
/// <summary>
/// C# source code can contain any character, but MLIR only handle 8-bits chars. We must therefore encode C# names
/// so that two different strings in C# always result in two different strings in the generated code (by default, all
/// unknown characters would be translated to the same one)
/// The used encoding scheme assumes that the initial string does not contain '.'
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\AttributeSyntaxSymbolMapping.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpCompilationHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpDebugOnlyCodeHelper.cs
/*
// Looking for an exact case-sensitive match
// Conditional attribute can be applied to a class, but it does nothing unless
// the class is an attribute class. So we only need to worry about whether the
// conditional attribute is on the method.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpDiagnosticAnalyzerContextHelper.cs
/*
// ToDo: PERF: do the global setting check before the per-file check.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpEquivalenceChecker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpGeneratedCodeRecognizer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpIfDirectiveHelper.cs
/*
/// <summary>
/// Returns a list of the names of #if [NAME] sections that the specified
/// node is contained in.
/// </summary>
/// <remarks>
/// Note: currently we only handle directives with simple identifiers e.g. #if FOO, #elif FOO
/// We don't handle logical operators e.g. #if !DEBUG, and we don't handle cases like
/// #if !DEBUG ... #else... :DEBUG must be true in the else case.
/// </remarks>
// If we hit an if or elif then that effective acts as an "end" for the previous if/elif block -> pop it
/// <summary>
/// Collects all of the #if, #else, #elsif and #endif directives occuring in the
/// syntax tree up to the specified node
/// </summary>
// Stop traversing once we've walked down to the terminating node
// Special case: the leading trivia of the terminating node
// could contain directives. However, we won't have processed
// these yet, as they are treated as children of the node
// even though they appear before it in the text
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpMethodParameterLookup.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpNavigationHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpOverloadHelper.cs
/*
// attempt to create the possibleOverload method symbol with same type arguments as the invocation method
// check whether has a parameter array argument which matches the invocationParameters
// parameters must have the same type
// must have same number of arguments + 1 (the argument that should be added) OR is params argument
/**
// check parameters before the last parameter
// make sure the rest of the invocation parameters match with the 'params' type
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpRemovableDeclarationCollector.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpSymbolUsageCollector.cs
/*
/// <summary>
/// Collects all symbol usages from a class declaration. Ignores symbols whose names are not present
/// in the knownSymbolNames collection for performance reasons.
/// </summary>
// Value
// (node)
// node;
// node(_) : <unexpected>
// _.node : node._
// _?.node : node?._
// Ignoring distinction assignmentExpression.IsKind(SyntaxKind.SimpleAssignmentExpression) between
// "node = _" and "node += _" both are considered as Write and rely on the parent to know if its read.
//  node = _ : _ = node
//  out Type node : out node
//  ref node
// node++
// We are visiting a ctor with no initializer and the compiler will automatically
// call the default constructor of the type if declared, or the base type if the
// current type does not declare a default constructor.
// In case there is no other explicitly called constructor in a constructor declaration
// the compiler will automatically put a call to the current class' default constructor,
// or if the declaration is the default constructor or there is no default constructor,
// the compiler will put a call the base class' default constructor.
// Call default ctor of base type
// Call default ctor of current type, or if undefined - default ctor of base type
/// <summary>
/// Given a node, it tries to get the symbol or the candidate symbols (if the compiler cannot find the symbol,
/// .e.g when the code cannot compile).
/// </summary>
/// <returns>List of symbols</returns>
// Prop = value --> set
// value = Prop --> get
// Prop += value --> get/set
// nameof(Prop) --> get/set
// Prop++ --> get/set
// All of the cases below could be parts of invocation or other expressions
// this.identifier or a.identifier or ((a)).identifier, but not identifier.other
// this?.identifier or a?.identifier or ((a))?.identifier, but not identifier?.other
// identifier or ((identifier))
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpSyntaxHelper.cs
/*
// This is a simplification as we don't check where the method is defined (so this could be this or base)
// See issue: https://github.com/SonarSource/sonar-csharp/issues/416
// Where clause excludes nodes that are not defined on the same SyntaxTree as the SemanticModel
// (because of partial definition).
// More details: https://github.com/dotnet/roslyn/issues/18730
// method()
// foo.method()
// foo?.method()
/// <summary>
/// Determines whether the node is being used as part of an expression tree
/// i.e. whether it is part of lambda being assigned to System.Linq.Expressions.Expression[TDelegate].
/// This could be a local declaration, an assignment, a field, or a property
/// </summary>
// Possible ancestors:
// * VariableDeclarationSyntax (for local variable or field),
// * PropertyDeclarationSyntax,
// * SimpleAssigmentExpression
// For those clauses, we don't know how to differentiate an expression tree from a delegate,
// so we assume we are in the (more restricted) expression tree
// creates a QualifiedNameSyntax "a.b"
// creates a QualifiedNameSyntax "a.b.c"
/// <summary>
/// Returns argument expressions for given parameter.
///
/// There can be zero, one or more results based on parameter type (Optional or ParamArray/params).
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\CSharpSyntaxWalkerHelper.cs
/*
// Roslyn walker overflows the stack when the depth of the call is around 2050.
// See https://github.com/SonarSource/sonar-dotnet/issues/2115
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\ExpressionNumericConverter.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\FlowAnalysisExtensions.cs
/*
// Roslyn/MSBuild is currently cutting exception message at the end of the line instead
// of displaying the full message. As a workaround, we replace the line ending with ' ## '.
// See https://github.com/dotnet/roslyn/issues/1455 and https://github.com/dotnet/roslyn/issues/24346
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\PatternSyntaxWrapperExtensions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\TypeDeclarationSyntaxExtensions.cs
/*
/// <summary>
/// Returns a union of all the methods and local functions from a given type declaration.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Helpers\Wrappers\IMethodDeclaration.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\LiveVariableAnalysis\Common\AbstractLiveVariableAnalysis.cs
/*
// note that on the PHP LVA impl, the `liveOut` gets cleared before being updated
// in = used + (out - assigned)
// if things have not changed, skip adding the predecessors to the workList
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\LiveVariableAnalysis\CSharp\CSharpLiveVariableAnalysis.cs
/*
// Kill (The set of variables that are assigned a value.)
// Gen (The set of variables that are used before any assignment.)
// Variable declaration in a foreach statement is not a VariableDeclarator, so handling it separately:
// Keep alive the variables declared and used in the using statement until the UsingFinalizerBlock
// Local function invocation
// Collect captured locals
// Read and write both affects liveness
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Metrics\CSharpCognitiveComplexityMetric.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Metrics\CSharpCyclomaticComplexityMetric.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Metrics\CSharpExecutableLinesMetric.cs
/*
// Check the attribute name without the attribute suffix OR the full name of the attribute
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Metrics\CSharpMetrics.cs
/*
// Roslyn does not recognize the C# "documentation" comment trivia as such
// unless you provide "/p:DocumentationFile=foo.xml" parameter to MSBuild.
// In case the documentation is not generated, we try to guess if some of
// the existing "normal" comments are actually documentation.
///");
// Non-abstract, non-interface methods
// Unexpected
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Properties\AssemblyInfo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\AbstractTypesShouldNotHaveConstructors.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\AesManagedShouldBeWithSecureMode.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\AllBranchesShouldNotHaveSameImplementation.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\AnonymousDelegateEventUnsubscribe.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ArgumentSpecifiedForCallerInfoParameter.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ArrayCovariance.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\AssertionArgsShouldBePassedInCorrectOrder.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\AssignmentInsideSubExpression.cs
/*
// not inside an expression
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\AsyncAwaitIdentifier.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\AsyncVoidMethod.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\AvoidExcessiveClassCoupling.cs
/*
/// <summary>
/// Returns all type symbols that are linked to the provided type symbol - generic constraints,
/// replaced generic types (bounded types), etc. For example:
/// void Foo(Dictionary<string, int>) will return Dictionary<T>, string and int
/// void Foo<T>(List<T>) where T : IDisposable will return List<T> and Disposable
/// void Foo<T>(Dictionary<string,List<T>>) where T : IEnumerable<int> should return Dictionary, string, List, IEnumerable and int
/// </summary>
// don't drill down in child classes, but walk the original
// don't drill down in child structs, but walk the original
// We don't use the helper method CSharpSyntaxHelper.IsNameof because it will do some extra
// semantic checks to ensure this is the real `nameof` and not a user made method.
// Here we prefer to favor fast results over accuracy (at worst we have FNs not FPs).
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\AvoidExcessiveInheritance.cs
/*
// remove the class itself
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\AvoidUnsealedAttributes.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\BeginInvokePairedWithEndInvoke.cs
/*
/// <summary>
/// This method is looking for the callback code which can be:
/// - in a identifier initializer (like a lambda)
/// - passed directly as a lambda argument
/// - passed as a new delegate instantiation (and the code can be inside the method declaration)
/// - a mix of the above
/// </summary>
/// <returns>
/// - false if callback code has been resolved and does not contain "EndInvoke",
/// - true if callback code contains "EndInvoke" or callback code has not been resolved.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\BinaryOperationWithIdenticalExpressions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\BooleanCheckInverted.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\BooleanCheckInvertedCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\BooleanLiteralUnnecessary.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\BooleanLiteralUnnecessaryCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\BreakOutsideSwitch.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CallerInformationParametersShouldBeLast.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CallToAsyncMethodShouldNotBeBlocking.cs
/*
// Thread.Sleep should not be used only in async methods
// Main methods are not subject to deadlock issue so no need to report an issue
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CastConcreteTypeToInterface.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CastShouldNotBeDuplicated.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CatchEmpty.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CatchRethrow.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CatchRethrowCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CbdeHandlerRule.cs
/*
// Note: For now, this rule actually runs only under windows and outside of SonarLint
// This functions is called for each issue found by cbde after it runs
// The logic used here is based on detecting a file which is present only when not run from SonarLint
/// The logic is copied from <see cref="SonarAnalyzer.Rules.UtilityAnalyzerBase"/>
// This function is called from CbdeHandler to check if it should run
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CertificateValidationCheck.cs
/*
//Handling of += syntax
//Handling of = syntax
//Handling of constructor parameter syntax (SslStream)
//This should be throw only by bad usage of this method, not by input dependency
//For Lambda expression extract location of the parentheses only to separate them from secondary location of "true"
//Search for parent of nested class
//Throw statements #2825. x.Expression can be NULL for standalone Throw and we need that one as well.
//LiteralExpressionSyntax or ParenthesizedExpressionSyntax like (((true)))
//Code was found guilty for lambda (...) => true
//VB.NET has more complicated logic
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CheckArgumentException.cs
/*
// do nothing
// can't check non-constant strings OR argument is not set
// paramName exists
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CheckFileLicense.cs
/*
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CheckFileLicenseCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ClassAndMethodName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ClassNotInstantiatable.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ClassShouldNotBeAbstract.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ClassWithEqualityShouldImplementIEquatable.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ClassWithOnlyStaticMember.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CognitiveComplexity.cs
/*
// Here, we only care about arrowed properties, others will be handled by the accessor.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CollectionEmptinessChecking.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CollectionPropertiesShouldBeReadOnly.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CollectionQuerySimplification.cs
/*
// ignored as it is somewhat cleaner way to cast to IEnumerable<T> and has no side effects
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CollectionsShouldImplementGenericInterface.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CommentedOutCode.cs
/*
// comment start is checked because of  https://github.com/dotnet/roslyn/issues/10003
/**", StringComparison.Ordinal) &&
///", StringComparison.Ordinal) &&
/*", StringComparison.Ordinal))
//", StringComparison.Ordinal))
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CommentKeyword.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ComparableInterfaceImplementation.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CompareNaN.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ConditionalSimplification.cs
/*
/// Equivalence handled by S1871, <see cref="ConditionalStructureSameImplementation"/>
/// handled by S2758, <see cref="TernaryOperatorPointless"/>
// expression not compared to null, or can't be null
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ConditionalSimplificationCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ConditionalsShouldStartOnNewLine.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ConditionalStructureSameCondition.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ConditionalStructureSameImplementation.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ConditionalsWithSameCondition.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ConditionEvaluatesToConstant.cs
/*
// Do not report in finally and catch blocks to avoid False Positives. To correctly solve
// this problem we would need to link all CFG blocks for catch clauses to all statements within
// the try block. This is unreasonable because it will generate tons of paths, thus making
// the debugging a hell and probably slowing down the performance.
// Bug
// Code smell
// Do not raise issue in generator functions (See #1295)
// When the constant expression is the only child of a if/while/etc. statement
// it is not reported as unreachable, but regardless we want to check if its
// parent has an unreachable branch.
// when an expression is true with "And" parent or is false with "Or" parent
// we don't have enough information to know if we have an unreachable code
// unreachable expressions
// Constant node is the only expression in an if statement condition
// This is ugly with LINQ, hence the loop
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ConsoleLogging.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ConstructorArgumentValueShouldExist.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ConstructorOverridableCall.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ConsumeValueTaskCorrectly.cs
/*
// 'await', 'AsTask', 'Result' and '.GetAwaiter().GetResult()' should be called only once on a ValueTask
// 'Result' and '.GetAwaiter().GetResult()' should be consumed inside an 'if (valueTask.IsCompletedSuccessfully)'
// when visiting a method or another member with logic inside, lambdas and local functions will be visited as well
// The key is the 'ValueTask' variable symbol, the value is a list of nodes where it is consumed
// A list of 'ValueTask' nodes on which '.Result' or '.GetAwaiter().GetResult()' has been invoked when the operation has not yet completed
// List of 'ValueTask' symbols which have been accessed for 'IsCompletedSuccessfully'
/**
/**
/**
// gets 'task' from 'this.Task.Result' or 'Foo.Task.Result'
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ControlCharacterInString.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CookieShouldBeHttpOnly.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CookieShouldBeSecure.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\CryptographicKeyShouldNotBeTooShort.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DangerousGetHandleShouldNotBeCalled.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DeadStores.cs
/*
// No need to check for ExpressionBody as it can't contain variable assignment
// 0 or 1
// +1 or -1
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DebugAssertHasNoSideEffects.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DeclareEventHandlersCorrectly.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DeclareTypesInNamespaces.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DefaultSectionShouldBeFirstOrLast.cs
/*
// default is not first...
// nor last
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DelegateSubtraction.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DisposableMemberInNonDisposableClass.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DisposableNotDisposed.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DisposableReturnedFromUsing.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DisposableTypesNeedFinalizers.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DisposeFromDispose.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DisposeNotImplementingDispose.cs
/*
// Partial classes are not processed.
// See https://github.com/dotnet/roslyn/issues/3748
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotCallAssemblyGetExecutingAssemblyMethod.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotCallAssemblyLoadInvalidMethods.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotCallExitMethods.cs
/*
// Do not report if call is inside Main.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotCallGCCollectMethod.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotCallGCSuppressFinalizeMethod.cs
/*
// We want to report on all calls not made from a method
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotCallInsecureSecurityAlgorithm.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotCallMethodsCsharpBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotCatchNullReferenceException.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotCatchSystemException.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotCheckZeroSizeCollection.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotCopyArraysInProperties.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotDecreaseMemberVisibility.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotExposeListT.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotHideBaseClassMethods.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotInstantiateSharedClasses.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotLockOnSharedResource.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotLockWeakIdentityObjects.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotMarkEnumsWithFlags.cs
/*
// The idea of this method is to get rid of invalid values for flags such as negative values and decimals
// See https://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2
// Assume otherValues is not empty and sorted Z -> A
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotNestTernaryOperators.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotNestTypesInArguments.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotOverwriteCollectionElements.cs
/*
// a.Add(x)
// InvocationExpression | a.Add(x)
//   Expression: SimpleMemberAccess
//                 Name: Add
//                 Expression: a  // we need this
//#2674 Do not raise on ICollection.Add(item)
// Ignore invocations that are on methods different than Add
// a?.Add(x)
// ConditionalExpression | a?.Add(x)
//   Expression: a // <-- we need this
//   WhenTrue: InvocationExpression | ?.Add(x)
//               Expression: MemberBinding   // <-- we are here
//                              Identifier: Add
// a.b[index]
// ElementAccess    // <-- we are here
//   Arguments: index
//   Expression: SimpleMemberAccess
//                 Expression: a
//                 Name: b  // <-- we need this
// a[index]
// ElementAccess    // <-- we are here
//   Arguments: index
//   Expression: IdentifierName
//                 Name: a  // <-- we need this
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotPassSameValueAsMultipleArguments.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotShiftByZeroOrIntSize.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotTestThisWithIsOperator.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotThrowFromDestructors.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotUseCollectionInItsOwnMethodCalls.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotUseLiteralBoolInAssertions.cs
/*
// We usually expect all comparison test methods to have one generic argument
// Since we already know we are comparing with bool, no need to check Nullable<bool>, Nullable<T> is enough
// But they can also work with Object (NUnit...)
// Other case, not handled
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotUseOutRefParameters.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotUseRandom.cs
/*
// Random has two ctors - with zero and one parameter
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DoNotWriteToStandardOutput.cs
/*
// This base class is only there to avoid duplication between the implementation of S106 and S2228
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DontMixIncrementOrDecrementWithOtherOperators.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\DotNotOverloadOperatorEqual.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EmptyCollectionsShouldNotBeEnumerated.cs
/*
// This is a .NetCore 2.0+ method on Dictionary
// Argument of the nameof expression is not pushed on stack so we need to exit the checks
// Remove collection constraint from all arguments passed to an invocation
// When invoking a collection method ...
// ... ignore some methods that are irrelevant
// Extension methods could modify the collection, hence we remove the Empty constraint if present
// ... set constraint if we are adding items
// ... notify we are accessing the collection
// When accessing elements from a collection ...
// ... set constraint if we are calling the Dictionary set accessor
// ... notify we are accessing the collection
// When any object is being created ...
// Remove collection constraint from all arguments passed to the constructor
// When a collection is being created ...
// ... try to devise what constraint could be applied by the constructor or the initializer
// When an array is being created ...
// ... try to devise what constraint could be applied by the array size or the initializer
// Only one-dimensional arrays can be empty, others are indeterminate, this can be improved in the future
// Default constructor, or constructor that specifies capacity means empty collection,
// otherwise do not apply constraint because we cannot be sure what has been passed
// as arguments.
// No items added through the initializer
// We have side effect here, but it is harmless, we only need the symbolic values
// e.g. Method(out var _)
// collections
// arrays
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EmptyMethod.cs
/*
// No need to check for ExpressionBody as arrowed methods can't be empty
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EmptyMethodCodeFixProvider.cs
/*
// Method intentionally left empty."))
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EmptyNamespace.cs
/*
// in order to let the tests work properly, we do this in a tree action
// https://github.com/dotnet/roslyn/issues/4745 was fixed in Roslyn 1.1,
// so in the IDE it should already be fine.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EmptyNamespaceCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EmptyNestedBlock.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EmptyNullableValueAccess.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EmptyStatement.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EmptyStatementCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EncryptionAlgorithmsShouldBeSecure.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EnumerableSumInUnchecked.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EnumNameHasEnumSuffix.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EnumNameShouldFollowRegex.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EnumsShouldNotBeNamedReserved.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EnumStorageNeedsToBeInt32.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EqualityOnFloatingPoint.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EqualityOnModulus.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EquatableClassShouldBeSealed.cs
/*
// Checks whether any IEquatable<T> has no implementation OR a non-virtual non-abstract implementation
// For all Equals(T) not a IEquatable<T> implementation checks if any is non-virtual
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\EventHandlerDelegateShouldHaveProperArguments.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ExceptionConstructorShouldNotThrow.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ExceptionRethrow.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ExceptionRethrowCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ExceptionShouldNotBeThrownFromUnexpectedMethods.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ExceptionsNeedStandardConstructors.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ExceptionsShouldBePublic.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ExceptionsShouldBeUsed.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ExpectedExceptionAttributeShouldNotBeUsed.cs
/*
// do not raise on empty method
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ExpressionComplexity.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ExtensionMethodShouldBeInSeparateNamespace.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ExtensionMethodShouldNotExtendObject.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FieldShadowsParentField.cs
/*
// nothing to do
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FieldShouldBeReadonly.cs
/*
// Serializable classes are ignored because the serialized fields
// cannot be readonly. [Nonserialized] fields could be readonly,
// but all fields with attribute are ignored in the ReadonlyFieldCollector.
// Partial classes are not processed.
// See https://github.com/dotnet/roslyn/issues/3748
// ref/out should be handled the same way as all other field assignments:
// If expression is (this.a.b).c, we need to return this.a
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FieldShouldBeReadonlyCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FieldShouldNotBePublic.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FieldsShouldNotBePublic.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FileLines.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FileShouldEndWithEmptyNewLine.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FinalizerShouldNotBeEmpty.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FlagsEnumWithoutInitializer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FlagsEnumZeroMember.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ForeachLoopExplicitConversion.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ForeachLoopExplicitConversionCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ForLoopConditionAlwaysFalse.cs
/*
/// <summary>
/// We try to retrieve the integer value of an expression. If the expression is an integer literal, we return its value, otherwise if
/// the expression is an identifier, we attempt to retrieve the integer value the variable was initialized with if it exists.
/// </summary>
/// <param name="variableNameToIntegerValue">A dictionary mapping variable names to the integer value they were initialized with if it exists</param>
/// <param name="expression">The expression for which we want to retrieve the integer value</param>
/// <param name="intValue">The output parameter that will hold the integer value if it is found</param>
/// <returns>true if an integer value was found for the expression, false otherwise</returns>
/// <summary>
/// Retrieves the mapping of variable names to their integer value from the variable declaration part of a for loop.
/// This will find the mapping for such cases:
/// <code>
/// for (var i = 0;;) {}
/// </code>
/// </summary>
/// <summary>
/// Retrieves the mapping of variable names to their integer value from the initializer part of a for loop.
/// This will find the mapping for such cases:
/// <code>
/// int i;
/// for (i = 0;;) {}
/// </code>
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ForLoopCounterChanged.cs
/*
/*symbol.OriginalDefinition.Name*/));
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ForLoopCounterCondition.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ForLoopIncrementSign.cs
/*
// Since the incremented variable can be on any side of the condition (i < 10 or 10 > i),
// both sides of the binary expression need to be considered.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FrameworkTypeNaming.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FunctionComplexity.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\FunctionNestingDepth.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GenericInheritanceShouldNotBeRecursive.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GenericReadonlyFieldPropertyAssignment.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GenericReadonlyFieldPropertyAssignmentCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GenericTypeParameterEmptinessChecking.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GenericTypeParameterEmptinessCheckingCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GenericTypeParameterInOut.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GenericTypeParametersRequired.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GenericTypeParameterUnused.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GetHashCodeEqualsOverride.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GetHashCodeMutable.cs
/*
// this is expected on invalid code
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GetHashCodeMutableCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GetTypeWithIsAssignableFrom.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GetTypeWithIsAssignableFromCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GotoStatement.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\GuardConditionOnEqualsOverride.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\HardcodedIpAddress.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\HttpPostControllerActionShouldValidateInput.cs
/*
// When HttpPost method doesn't have input there is no need to validate them
// There is no HttpPost attribute
// ValidateInputAttribute not set or has incorrect number of args
// ValidateInputAttribute is set but with incorrect value
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\IfChainWithoutElse.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\IfCollapsible.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\IfConditionalAlwaysTrueOrFalse.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\IfConditionalAlwaysTrueOrFalseCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ImplementIDisposableCorrectly.cs
/*
// Because of partial classes we cannot always rely on the current semantic model.
// See issue: https://github.com/SonarSource/sonar-csharp/issues/690
// Expression body has only one statement
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ImplementISerializableCorrectly.cs
/*
/*do nothing*/
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ImplementSerializationMethodsCorrectly.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\IndentSingleLineFollowingConditional.cs
/*
// Note: this rule only covers the indentation of the first line after a conditional.
// Rule 2681 covers the misleading indentation of other lines of multiline blocks (https://jira.sonarsource.com/browse/RSPEC-2681)
// Squiggle - "while (condition1 && condition2)"
// Just highlight the "do" keyword
// Squiggle - "for (...)"
// Squiggle - "foreach (...)"
// Special case for "else if" on the same line.
// In that case, we'll check that the statement is more indented then the "else", not the "if".
// Highlighting: "if (...)", or  "else if (...)" as appropriate
// Just highlight the "else" keyword
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\IndexOfCheckAgainstZero.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\InfiniteRecursion.cs
/*
// Calculate stable report location:
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\InheritedCollidingInterfaceMembers.cs
/*
/// we only want to report on events once, so we are not collecting the "remove" accessors,
/// and handle the "add" accessor reporting separately in <see cref="GetMemberDisplayName"/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\InitializeStaticFieldsInline.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\InsecureEncryptionAlgorithm.cs
/*
// S2278 was deprecated in favor of S5547. Technically, there is no difference in the C# analyzer between
// the 2 rules, but to be coherent with all the other languages, we still replace it with the new one
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\InsecureHashAlgorithm.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\InterfaceMethodsShouldBeCallableByChildTypes.cs
/*
// Allows to replace IDisposable.Dispose() with Close()
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\InterfacesShouldNotBeEmpty.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\InvalidCastToInterface.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\InvocationResolvesToOverrideWithParams.cs
/*
// Action and Func won't always resolve properly with Type
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\IssueSuppression.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\LdapConnectionShouldBeSecure.cs
/*
// The expected value is a bit from a Flags enum
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\LineLength.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\LiteralsShouldNotBePassedAsLocalizedParameters.cs
/*
// Calling to/from debug-only code
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\LiteralSuffixUpperCase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\LiteralSuffixUpperCaseCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\LossOfFractionInDivision.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MagicNumberShouldNotBeUsed.cs
/*
// It's ok to use magic numbers as part of a variable declaration
// It's ok to use magic numbers as part of a parameter declaration
// It's ok to use magic numbers as part of an enum declaration
// It's ok to use magic numbers in the GetHashCode method. Note that I am only checking the method name of the sake of simplicity
// It's ok to use magic numbers in pragma directives
// It's ok to use magic numbers in property declaration
// Inside property we consider magic numbers as exceptions in the following cases:
//   - A {get; set;} = MAGIC_NUMBER
//   - A { get { return MAGIC_NUMBER; } }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MarkAssemblyWithAssemblyVersionAttribute.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MarkAssemblyWithAttributeBase.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MarkAssemblyWithClsCompliantAttribute.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MarkAssemblyWithComVisibleAttribute.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MarkAssemblyWithNeutralResourcesLanguageAttribute.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MarkWindowsFormsMainWithStaThread.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MemberInitializedToDefault.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MemberInitializedToDefaultCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MemberInitializerRedundant.cs
/*
// Calls another ctor, which is also checked.
// Contains assignment before access
// Contains access before assignment
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MemberOverrideCallsBaseMember.cs
/*
// no getter
//check right:
//check left:
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MemberOverrideCallsBaseMemberCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MemberShadowsOuterStaticMember.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MemberShouldBeStatic.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MemberShouldNotHaveConflictingTransparencyAttributes.cs
/*
// nothing
// All parts declaring the 'SecuritySafeCriticalAttribute' are incorrect since the assembly
// itself is marked as 'SecurityCritical'.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodOverloadOptionalParameter.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodOverloadsShouldBeGrouped.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodOverrideAddsParams.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodOverrideAddsParamsCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodOverrideChangedDefaultValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodOverrideChangedDefaultValueCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodOverrideNoParams.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodOverrideNoParamsCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodParameterMissingOptional.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodParameterMissingOptionalCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodParameterUnused.cs
/*
// Don't report on empty methods
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodParameterUnusedCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodShouldBeNamedAccordingToSynchronicity.cs
/*
// NetCore 2.2+
// do nothing
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodShouldNotOnlyReturnConstant.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodsShouldNotHaveIdenticalImplementations.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodsShouldNotHaveTooManyLines.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MethodsShouldUseBaseTypes.cs
/*
// The GroupBy is useless in most of the cases but safe-guard in case of 2+ parameters with same name (invalid code).
// In this case we analyze only the first parameter (a new analysis will be triggered after fixing the names).
// nothing to do
// Do not suggest internal types that are declared in an assembly different than
// the one that's declaring the parameter. Such types should not be suggested at
// all if there is no InternalsVisibleTo attribute present in the compilation.
// Since the check for the attribute must be done in CompilationEnd thus making
// the rule unusable in Visual Studio, we will not suggest such classes and will
// generate some False Negatives.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MultilineBlocksWithoutBrace.cs
/*
//var currentIfStatement = ifStatement;
//var statement = currentIfStatement.Statement;
//while (currentIfStatement != null)
//{
//    if (currentIfStatement.Else == null)
//    {
//        return currentIfStatement.Statement;
//    }
//    statement = currentIfStatement.Else.Statement;
//    currentIfStatement = statement as IfStatementSyntax;
//}
//return statement;
// This algorithm to get the next statement can sometimes return a parent statement (for example a BlockSyntax)
// so we need to filter this case by returning if the nextStatement happens to be one ancestor of statement.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MultipleVariableDeclaration.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MultipleVariableDeclarationCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MutableFieldsShouldNotBe.cs
/*
// The field seems to be violating the rule but we should exclude the cases where the field is read-only
// and all initializations to this field are immutable
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MutableFieldsShouldNotBePublicReadonly.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\MutableFieldsShouldNotBePublicStatic.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NameOfShouldBeUsed.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NativeMethodsShouldBeWrapped.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NestedCodeBlock.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NewGuidShouldNotBeUsed.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NoExceptionsInFinally.cs
/*
// Do not call base to force the walker to stop.
// Another walker will take care of this finally clause.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NonAsyncTaskShouldNotReturnNull.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NonFlagsEnumInBitwiseOperation.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NonFlagsEnumInBitwiseOperationCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NormalizeStringsToUppercase.cs
/*
// never null when we get here
// ToLower and ToLowerInvariant are extension methods for string but not for char
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NotAssignedPrivateMember.cs
/*
/*
/// reported by <see cref="UnusedPrivateMember"/>
// Handle "expr.FieldName"
// Handle "((expr.FieldName))"
// Handle (((exp.FieldName)).Member1).Member2
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NullPointerDereference.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\NumberPatternShouldBeRegular.cs
/*
// skip the first part (1_234 => 234)
// skip the last if there is a decimal (.234_5 => 234)
// we expect to have only 1 size of pattern
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ObjectCreatedDropped.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ObjectShouldBeInitializedCorrectlyBase.cs
/*
/// <summary>
/// Gets the KnownType representing the type on which instances the rule will raise issues on.
/// </summary>
/// <summary>
/// Gets the name of the property that has to be set with allowed value in
/// order for the object to be initialized correctly.
/// </summary>
/// <summary>
/// Tests if the provided <paramref name="constantValue"/> is equal to allowed value.
/// </summary>
/// <returns>True when <paramref name="constantValue"/> is an allowed value, otherwise false.</returns>
// Ignore assignments within object initializers, they are
// reported in the ObjectCreationExpression handler
/// <summary>
/// Tests if the provided expression is a property of the <see cref="TrackedTypes"/>. Override this method
/// when the <see cref="TrackedPropertyName"/> is a indexer for example.
/// </summary>
/// <returns>True when the parameter is a property of the <see cref="TrackedTypes"/>, otherwise false.</returns>
/// <summary>
/// Tests it the provided <paramref name="argumentList"/> contains initialization of the <see cref="TrackedPropertyName"/>
/// with an allowed value. Override this method when a constructor can initialize the property value with a allowed value.
/// </summary>
/// <returns>True when the <paramref name="argumentList"/> contains initialization of <see cref="TrackedPropertyName"/>
/// with allowed value or when this constructor sets <see cref="TrackedPropertyName"/> with the
/// allowed value by default, otherwise false.</returns>
/// <summary>
/// Tests if the <paramref name="expression"/> is <see cref="TrackedPropertyName"/>.
/// </summary>
/// <returns>True if the <paramref name="expression"/> is <see cref="TrackedPropertyName"/>,
/// otherwise false.</returns>
/// <summary>
/// Tests if the expression is a constant equal to allowed value.
/// </summary>
/// <returns>True if the expression is a constant equal to allowed value,
/// otherwise false.</returns>
/// <summary>
/// Tests if the provided expression is the <see cref="TrackedTypes"/> by calling GetTypeInfo.
/// </summary>
/// <returns>True when the expression if the <see cref="TrackedTypes"/>, otherwise false.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ObjectsShouldNotBeDisposedMoreThanOnce.cs
/*
// Store the nodes that should be reported and ignore duplicate reports for the same node.
// This is needed because we generate two CFG blocks for the finally statements and even
// though the syntax nodes are the same, when there is a return inside a try/catch block
// the walked CFG paths could be different and FPs will appear.
// We need to associate the symbolic value to the symbol here first, as it hasn't been done yet, since we
// are are pre-processing the VariableDeclarator instruction
// Direct call to Dispose()
// Call to Dispose on local variable, field or this
// Special case - if the parameter symbol is "this" then resolve it to the containing type
// Checks for the 'leaveOpen' argument. It is at position 4 if present for StreamReader constructor, while it is at position 3 for StreamWriter.
// See #2491 for more details
// DisposableSymbol is null when we invoke an array element
// We should not replace Null constraint because having Disposed constraint
// implies having NotNull constraint, which is incorrect.
// Dispose is called on current instance but we don't usually store a symbol for this
// so we store it and then associate the Disposed constraint.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ObsoleteAttributesNeedExplanation.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\OperatorOverloadsShouldHaveNamedAlternatives.cs
/*
/// <summary>
/// Checks if the class containing the given operator overload contains a method with an alternative name for
/// the operator. Will return false if no methods with alternative name are present, or when the operator has
/// no alternative names.
/// </summary>
/// <returns>
/// True when the class contains at least one alternative method for the given operator, otherwise false. The
/// <see cref="operatorAlternativeMethodName" /> returns the name of the method to be added as an alternative to
/// the operator of it does not exist.
/// </returns>
// Suggest only the "main" alternatives, the "other" alternatives are to loosen the rule
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\OperatorsShouldBeOverloadedConsistently.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\OptionalParameter.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\OptionalParameterNotPassedToBaseCall.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\OptionalParameterWithDefaultValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\OptionalParameterWithDefaultValueCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\OptionalRefOutParameter.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\OptionalRefOutParameterCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\OrderByRepeated.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\OrderByRepeatedCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\OverrideGetHashCodeOnOverridingEquals.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ParameterAssignedTo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ParameterNamesInPartialMethod.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ParameterNamesShouldNotDuplicateMethodNames.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ParametersCorrectOrder.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ParameterValidationInAsyncShouldBeWrapped.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ParameterValidationInMethodWalker.cs
/*
// Local function
// Action
// Func
// Don't explore deeper if this node is equivalent to a method declaration
// When throw is like `throw new XXX` where XXX derives from ArgumentException, save location
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ParameterValidationInYieldShouldBeWrapped.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PartCreationPolicyShouldBeUsedWithExportAttribute.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PartialMethodNoImplementation.cs
/*
// from the method symbol it's not possible to tell if it's a partial method or not.
// https://github.com/dotnet/roslyn/issues/48
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PInvokesShouldNotBeVisible.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PointersShouldBePrivate.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PreferJaggedArraysOverMultidimensional.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PrivateFieldUsedAsLocalVariable.cs
/*
// We couldn't finish the exploration so we cannot take any decision
// Contains statements that READ field values. First grouped by field symbol (that is read),
// then by method/property/ctor symbol (that contains the statements)
// Contains statements that WRITE field values. First grouped by field symbol (that is written),
// then by method/property/ctor symbol (that contains the statements)
// Contains all method/property invocations grouped by the statement that contains them.
// No methods overwrite the field value
// A field is removable when no method reads it, or all methods that read it, overwrite it before reading
// However, as S4487 reports on fields that are written but not read, we only raise on the latter case
// Note that Enumerable.All() will return true if readStatements is empty. The collection
// will be empty if the field is read only in property/field initializers or returned from
// expression-bodied methods.
// Returns true when readStatement is preceded with a statement that overwrites fieldSymbol,
// or false when readStatement is preceded with an invocation of a method or property that
// overwrites fieldSymbol.
// When the readStatement is preceded with a write statement (that is also not a read statement)
// we want to report this field.
// When the readStatement is preceded with an invocation that has side effects, e.g. writes the field
// we don't want to report this field because it could be difficult or impossible to change the code.
// ArrowExpressionClauseSyntax cannot be preceded by anything...
/// <summary>
/// Returns all statements before the specified statement within the containing method.
/// This method recursively traverses all parent blocks of the provided statement.
/// </summary>
// A PseudoStatement is a Statement or an ArrowExpressionClauseSyntax (which denotes an expression-bodied member)
/// <summary>
/// Stores the statement that contains the provided field reference in one of the "reads" or "writes" collections,
/// first grouped by field symbol, then by containing method.
/// </summary>
// It is important to create the field access HashSet regardless of the statement (see the local var below)
// being null or not, because the rule will not be able to detect field reads from inline property
// or field initializers.
// If the field is not static and is not from the current instance we
// consider the reference as read.
// All of the cases below could be parts of invocation or other expressions
// this.identifier or a.identifier or ((a)).identifier, but not identifier.other
// this?.identifier or a?.identifier or ((a))?.identifier, but not identifier?.other
// identifier or ((identifier))
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PropertiesAccessCorrectField.cs
/*
// we only keep information for the first location of the symbol
// We don't handle properties with multiple returns that return different fields
// we only keep information for the first location of the symbol
// no accessor
// Special case: ignore the accessor if the only statement/expression is a throw.
// Expression-bodied syntax
// Statement-bodied syntax
// Check for direct field access: "foo"
// Check for "this.foo"
// for this.field
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PropertiesShouldBePreferred.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PropertyGetterWithThrow.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PropertyNamesShouldNotMatchGetMethods.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PropertyToAutoProperty.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PropertyWriteOnly.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ProvideDeserializationMethodsForOptionalFields.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PublicConstantField.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PublicMethodArgumentsShouldBeCheckedForNull.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PublicMethodWithMultidimensionalArray.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\PureAttributeOnVoidMethod.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ReadingStandardInput.cs
/*
/*for testing*/ ReadingStandardInput(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundancyInConstructorDestructorDeclaration.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundancyInConstructorDestructorDeclarationCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantArgument.cs
/*
// Can't use optional arguments in expression trees (CS0584), so skip those
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantArgumentCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantCast.cs
/*
// casting is necessary for multidimensional arrays
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantCastCodeFixProvider.cs
/*
//this is handled by IDE0004 code fix.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantConditionalAroundAssignment.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantConditionalAroundAssignmentCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantDeclaration.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantDeclarationCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantInheritanceList.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantInheritanceListCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantJumpStatement.cs
/*
// Not reporting inside switch, as the jumps might not be removable
// yield return cannot be redundant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantModifier.cs
/*
// only process top level type declarations
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantModifierCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantNullableTypeComparison.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantNullCheck.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantNullCheckCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantParentheses.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantParenthesesCodeFixProvider.cs
/*
// Do nothing, we don't want to mess the code if we don't find what we expect
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantParenthesesObjectsCreation.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantPropertyNamesInAnonymousClass.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantPropertyNamesInAnonymousClassCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantToCharArrayCall.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantToCharArrayCallCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantToStringCall.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RedundantToStringCallCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ReferenceEqualityCheckWhenEqualsExists.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ReferenceEqualsOnValueType.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RequireAttributeUsageAttribute.cs
/*
// System.Attribute already has AttributeUsage, we don't want to report it
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ReturnEmptyCollectionInsteadOfNull.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ReturnValueIgnored.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ReversedOperators.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\RightCurlyBraceStartsLine.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SecurityPInvokeMethodShouldNotBeCalled.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SelfAssignment.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SerializationConstructorsShouldBeSecured.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SetLocaleForDataTypes.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ShiftDynamicNotInteger.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ShortCircuitNullPointerDereference.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ShouldImplementExportedInterfaces.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SillyBitwiseOperation.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SillyBitwiseOperationCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SingleStatementPerLine.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SpecifyIFormatProviderOrCultureInfo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SpecifyStringComparison.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SqlKeywordsDelimitedBySpace.cs
/*
// We are interested in SQL keywords that start a query (so without "FROM", for example)
// The assumption is that in a chain of concatenations "a" + "b" + "c"
// the AST form is
//        +
//       / \
//      +  "c"
//     / \
//   "a" "b"
// So we start from the lower-left node which should contain the SQL start keyword
// we do the analysis only if it's a SQL keyword on the left
/**
// this is the left-most node of a concatenation chain
// collect all string literals
// we are in a binary expression, but it's not only of strings or not only concatenations
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StaticFieldInGenericClass.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StaticFieldInitializerOrder.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StaticFieldVisible.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StaticFieldWrittenFrom.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StaticFieldWrittenFromInstanceConstructor.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StaticFieldWrittenFromInstanceMember.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StaticSealedClassProtectedMembers.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StreamReadStatement.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StringConcatenationInLoop.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StringFormatValidator.cs
/*
// This is the value as defined in .Net Framework
// pattern is: index[,alignment][:formatString]
// can't check non-constant format strings
// All methods in HandledFormatMethods that do not end on Format have an overload
// with only one argument and the rule should not raise an issue
// can't statically check the override that supplies args in an array variable
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StringLiteralShouldNotBeDuplicated.cs
/*
// Ideally we would like to report at assembly/project level for the primary and all string instances for secondary
// locations. The problem is that this scenario is not yet supported on SonarQube side.
// Hence the decision to do like other languages, at class-level
// Don't report on inner instances
// Collect duplications
// Remove leading and trailing double quotes
// Report duplications
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StringOffsetMethods.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StringOperationWithoutCulture.cs
/*
// We cannot specify the culture in an expression tree
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\StringOrIntegralTypesForIndexers.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SuppressFinalizeUseless.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SuppressFinalizeUselessCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SwitchCaseFallsThroughToDefault.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SwitchCaseFallsThroughToDefaultCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SwitchCasesMinimumThree.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SwitchDefaultClauseEmpty.cs
/*
// handle comments after last label, which will normally be default:
// handle comments before break
// handle comments after break
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SwitchDefaultClauseEmptyCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SwitchSectionShouldNotHaveTooManyStatements.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SwitchShouldNotBeNested.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\SwitchWithoutDefault.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TabCharacter.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TaskConfigureAwait.cs
/*
//this rule only makes sense in libraries
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TernaryOperatorPointless.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TernaryOperatorPointlessCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TestClassShouldHaveTestMethod.cs
/*
// Only applies to MSTest.
// NUnit has equivalent attributes, but they can only be applied to classes
// marked with [SetupFixture], which cannot contain tests.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TestMethodShouldContainAssertion.cs
/*
// Checking whether an Xunit test is ignore or not needs to be done at the syntax level i.e. language-specific
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TestMethodShouldHaveCorrectSignature.cs
/*
/// <summary>
/// Validation method. Checks the supplied method and returns the error message,
/// or null if there is no issue.
/// </summary>
// We currently support three test framework, each of which supports multiple test method attribute markers, and each of which
// has differing constraints (public/private, generic/non-generic).
// Rather than writing lots of conditional code, we're using a simple table-driven approach.
// Currently we use the same validation method for all method types, but we could have a
// different validation method for each type in future if necessary.
// MSTest
// NUnit
// XUnit
// Find the first matching attribute type in the table
// Invariant - applies to all test methods
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TestMethodShouldNotBeIgnored.cs
/*
// xUnit has it's own "ignore" mechanism (by providing a (Skip = "reason") string in
// the attribute, so there is always an explanation for the test being skipped).
// Any ctor argument counts are reason phrase
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ThisShouldNotBeExposedFromConstructors.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ThreadResumeOrSuspendShouldNotBeCalled.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ThreadStaticNonStaticField.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ThreadStaticNonStaticFieldCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ThreadStaticWithInitializer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ThrowReservedExceptions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TooManyGenericParameters.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TooManyLabelsInSwitch.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TooManyParameters.cs
/*
// Base class is already not compliant so let's ignore current constructor.
// Another option could be to substract current number of parameters from base count and raise only if greater
// than threshold.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ToStringNoNull.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TrackNotImplementedException.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TryStatementsWithIdenticalCatchShouldBeMerged.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TypeExaminationOnSystemType.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TypeNamesShouldNotMatchNamespaces.cs
/*
// Based on https://msdn.microsoft.com/en-us/library/gg145045%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\TypesShouldNotExtendOutdatedBaseTypes.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UnaryPrefixOperatorRepeated.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UnaryPrefixOperatorRepeatedCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UnchangedLocalVariablesShouldBeConst.cs
/*
// Defining nullable as const raises error CS0283.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UnconditionalJumpStatement.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UninvokedEventDeclaration.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UnnecessaryUsings.cs
/*
// We visit the namespace declaration with the updated set of parent 'usings', this is needed in case of nested namespaces
/// <summary>
/// LINQ Query Syntax do not use symbols from the 'System.Linq' namespace directly, but the using directive is
/// still necessary to use the Query Syntax form.
/// </summary>
/// <summary>
/// We check the symbol of each name node found in the code. If the containing namespace of the symbol is
/// neither the current namespace or one of its parent, it is then added to the necessary namespace set, as
/// importing that namespace is indeed necessary.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UnnecessaryUsingsCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UnusedPrivateMember.cs
/*
// Collect potentially removable internal types from the project to evaluate when
// the compilation is over, depending on whether InternalsVisibleTo attribute is present
// or not.
// Collect symbols of private members that could potentially be removed
// Keep the removable internal types for when the compilation ends
// do nothing
/// <summary>
/// Collects private or internal member symbols that could potentially be removed if they are not used.
/// Members that are overridden, overridable, have specific use, etc. are not removable.
/// </summary>
// Event handlers could be added in XAML and no method reference will be generated in the .g.cs file.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UnusedPrivateMemberCodeFixProvider.cs
/*
// We only want to fix S1144 and not S4487 because for S4487 the field is written so we don't know the fix
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UnusedReturnValue.cs
/*
/// this is handled by S1144 <see cref="UnusedPrivateMember"/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UriShouldNotBeHardcoded.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseConstantsWhereAppropriate.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseCurlyBraces.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseGenericEventHandlerInstances.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseGenericWithRefParameters.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseNumericLiteralSeparator.cs
/*
// +2 for 0b
// +2 for 0x
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseParamsForVariableArguments.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseShortCircuitingOperator.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseShortCircuitingOperatorFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseStringIsNullOrEmpty.cs
/*
// x.Equals(value), where x is string.Empty, "" or const "", and value is some string
// value.Equals(x), where x is string.Empty, "" or const "", and value is some string
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseUriInsteadOfString.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseValueParameter.cs
/*
// No need to check ExpressionBody, it can't be empty
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\UseWhileLoopInstead.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ValuesUselesslyIncremented.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\ValueTypeShouldImplementIEquatable.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\VariableShadowsField.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\VariableUnused.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\VirtualEventField.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\VirtualEventFieldFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\WcfMissingContractAttribute.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\WcfNonVoidOneWay.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\BypassingAccessibility.cs
/*
/*for testing*/ BypassingAccessibility(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\ConfiguringLoggers.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\ControllingPermissions.cs
/*
/*for testing*/ ControllingPermissions(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\CreatingHashAlgorithms.cs
/*
/*for testing*/ CreatingHashAlgorithms(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\DeliveringDebugFeaturesInProduction.cs
/*
/*for testing*/ DeliveringDebugFeaturesInProduction(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\DoNotHardcodeCredentials.cs
/*
/*for testing*/ DoNotHardcodeCredentials(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\EncryptingData.cs
/*
/*for testing*/ EncryptingData(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\ExecutingSqlQueries.cs
/*
/*for testing*/ ExecutingSqlQueries(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\ExpandingArchives.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\SocketsCreation.cs
/*
/*for testing*/ SocketsCreation(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\UsingCommandLineArguments.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\UsingCookies.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Hotspots\UsingRegularExpressions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Utilities\CopyPasteTokenAnalyzer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Utilities\FileMetadataAnalyzer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Utilities\MetricsAnalyzer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Utilities\SymbolReferenceAnalyzer.cs
/*
// Based on Roslyn: http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.CSharp.Workspaces/LanguageServices/CSharpSyntaxFactsService.cs,1453
// If this node is on the left side of a member access expression, don't ascend
// further or we'll end up binding to something else.
// If this node is on the left side of a qualified name, don't ascend
// further or we'll end up binding to something else.
// If this node is the type of an object creation expression, return the
// object creation expression.
// The inside of an interpolated string is treated as its own token so we
// need to force navigation to the parent expression syntax.
// If this node is not parented by a name, we're done.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\Rules\Utilities\TokenTypeAnalyzer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\AbstractExplodedGraph.cs
/*
// Right operand of logical && and ||
// switch:
// We do not clean state when entering a using block statement, as some variables declared with "using" keywords
// may still be implicitly disposed later, even if they are not referenced anymore. State will still be cleaned
// in the "VisitSimpleBlock" of UsingEndBlock
// LVA excludes out and ref parameters
// ToDo: Remove the IFieldSymbol check when SLVS-1136 is fixed
// Captured variables are not locally scoped, they are compiled to class fields
// No filter for ref/out
// Could be either ILocalSymbol or IParameterSymbol so let's use symbol
// reached the max number of visit by program point, in the case of ForEach blocks, we take the foreach loop false branch with current program state,
// if it is not a foreach loop, newNode will be null and we will stop exploring the path
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\ConditionEvaluatedEventArgs.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\ExplodedGraphCheck.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\ExplodedGraphNode.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\InstructionProcessedEventArgs.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\ProgramPoint.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\ProgramState.cs
/*
// Only add new relationships, and ones that are on SV's that belong to a local symbol
// a <= b && a < b  ->  a < b
// a <= b && a == b  ->  a == b
// a <= b && a != b  ->  a < b
// a <= b && b <= a  ->  a == b
// SVs for live symbols
// Do not lose constraints on wrapped SV
// Relationships for live symbols (no transitivity, so both of them need to be live in order to hold any information)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicExecutionException.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\TooManyInternalStatesException.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\VisitCountExceedLimitEventArgs.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Constraints\BoolConstraint.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Constraints\CollectionCapacityConstraint.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Constraints\CollectionConstraintExtensions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Constraints\DisposableConstraint.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Constraints\NullableValueConstraint.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Constraints\ObjectConstraint.cs
/*
/* not NotNull can be Null or another NotNull */;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Constraints\StringConstraint.cs
/*
// Currently FullOrNullString and NotWhiteSpaceString  is never set as a constraint. It is there to imply the opposite of EmptyString
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Constraints\SymbolicValueConstraint.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Constraints\SymbolicValueConstraints.cs
/*
// for debugging
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Relationships\BinaryRelationship.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Relationships\ComparisonRelationship.cs
/*
// a < b and a <= b contradicts b < a
// a < b contradicts b <= a
// a < b contradicts a == b and b == a
// a <= b contradicts a >= b && a != b
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Relationships\EqualsRelationship.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Relationships\NotEqualsRelationship.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Relationships\ReferenceEqualsRelationship.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Relationships\ReferenceNotEqualsRelationship.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Relationships\ValueEqualsRelationship.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\Relationships\ValueNotEqualsRelationship.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\MemberAccessSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\NullableSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\SymbolicValue.cs
/*
// This condition is added first because the way of setting string constraints
// when the value doesnt exist is different than the other types of constraints
// It was null, and now it should be true or false
// Either same bool constraint, or previously not null, and now a bool constraint
// Currently FullOrNullString is never set as a constraint. the combination of Fullstring + NotNull is equivalent to it.
// it is used to express the oposite of EmptyString Constraint
// oldStringConstraint is never FullOrNullString or NotWhiteSpaceString
// constraints are empty Related Related
// constraints are white space Related
// constraints are mixed space Related
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\AndSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\BinarySymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\ComparisonKind.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\ComparisonSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\EqualityLikeSymbolicValue.cs
/*
/* could also be ObjectConstraint.NotNull, which can be overridden */ &&
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\EqualsSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\NotEqualsSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\OrSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\ReferenceEqualsSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\ReferenceNotEqualsSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\RelationalSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\ValueEqualsSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\ValueNotEqualsSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Binary\XorSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Unary\LogicalNotSymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\Common\SymbolicValues\Unary\UnarySymbolicValue.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\CSharp\CSharpExplodedGraph.cs
/*
// Add mandatory checks
// this is only for switch cases without a when. We handle C#7 switch case as a default BinaryBranch
// Default behavior
// Do nothing
// condition with pattern (if, do, while, for, etc.) "if (x is string s)" or "if (x is null)"
// "x is null" is equivalent to "x == null"
// "x is string s"
// VisitDeclarationPattern() expects SV_s on top of the stack, hence we pop SV_x
// Check that current execution path is not compatible with previous null constraint
// a pattern from a case section "string s"
// https://github.com/SonarSource/sonar-dotnet/issues/2937
// The 0 in 'case 0 when ...'
// Do nothing
// TupleExpressions are not yet supported: https://github.com/SonarSource/sonar-dotnet/issues/2933
// ToDo: Constraints should be set correctly
// RefExpression is not yet supported: https://github.com/SonarSource/sonar-dotnet/issues/3024
// Do nothing
// DeclarationExpression is not yet fully supported: https://github.com/SonarSource/sonar-dotnet/issues/2936
// No symbolic values are created and pushed to the stack since they are not currently used.
// See also VisitSimpleAssignment where ParenthesizedVariableDesignationSyntaxWrapper are handled.
// "var x" in "case var x when ..."
//
// VarPattern is treated the same as DeclarationPattern since both have a very similar structure:
//
// VarPattern                                   DeclarationPattern
//   - VarKeyword                                 - PredefinedType
//   - SingleVariableDesignation                  - SingleVariableDesignation
//      - IdentifierToken                             - IdentifierToken
// "x is string s" is equivalent to "s = x" and "s" should get NotNull constraint
// "x is (string s, int i)" is equivalent to "s = new string(); i = new int()" and no constraints should be added
// Push value for the discard, it will be popped when visiting the block for the
// corresponding case statement.
// "x is string s" is equivalent to "s = x"; both symbolic values should remain on stack
// associate variable with new SV
// When the pattern is "x is Type t" we know that "t != null", hence (SV != null)
// the variables in the deconstruction should not receive "Not Null" constraint
// If a check returns null, we will skip the next checks and return null
// foreach variable is not a VariableDeclarator, so we need to assign a value to it
// False succesor is the next case block. It is always enqueued without constraint
// the governing expression is always the first one so we need to pop all the values to extract it
// this is currently fine since the other values are not used by symbolic execution
// this inner loop is to give the possibility of handling the same block with different constraints/programstate.
// Add no constraint
// ToDo: Fix me when implementing SLVS-1130
// Taking a an argument by ref will remove its constraint.
// Do not change the stacked value
// There are no values added to the stack when the declaration is processed so we don't have to pop any.
// goto is not putting the expression to the CFG
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\CSharp\InvocationVisitor.cs
/*
// ToDo: IsNullOrWhiteSpace is now treated as IsNull. Add the needed string constraints to treat IsNullOrWhiteSpace correctly
// The nameof arguments are not on the stack, we just push the nameof result
// This is reached when we don't know the result of isNullOrWhiteSpaceMethod
// for example when there is a FullOrNullString constraint
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\CSharp\MemberAccesingEventArgs.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\CSharp\MemberAccessedEventArgs.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SymbolicExecution\CSharp\SymbolicValueHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SyntaxTrackers\CSharpBaseTypeTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SyntaxTrackers\CSharpElementAccessTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SyntaxTrackers\CSharpFieldAccessTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SyntaxTrackers\CSharpInvocationTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SyntaxTrackers\CSharpMethodDeclarationTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SyntaxTrackers\CSharpObjectCreationTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.CSharp\SyntaxTrackers\CSharpPropertyAccessTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\Program.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\Descriptors\QualityProfileRoot.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\Descriptors\QualityProfileRuleDescriptor.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\Descriptors\RuleDescriptorRoot.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\Descriptors\RuleDetail.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\Descriptors\RuleParameter.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\Properties\AssemblyInfo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Utilities\EnumHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Utilities\RuleDetailBuilder.cs
/*
// SonarQube before 7.3 supports only 3 types of issues: BUG, CODE_SMELL and VULNERABILITY.
// This method returns backwards compatible issue type. The type should be adjusted in
// AbstractRulesDefinition.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Utilities\RuleFinder.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Utilities\Properties\AssemblyInfo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Utilities\RuleDescriptors\RuleDetail.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Utilities\RuleDescriptors\RuleParameter.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\RspecStrings.cs
//------------------------------------------------------------------------------
// This file was initially generated as a companion to RspecStrings.resx, under the name RspecStrings.Designer.cs
// Since we did not need most of it, we extracted only the used part into this file, and removed the original. 
// 
// So, you should not remove it, nor manually edit it.
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Helpers\VisualBasicCompilationHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Helpers\VisualBasicDiagnosticAnalyzerContextHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Helpers\VisualBasicEquivalenceChecker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Helpers\VisualBasicGeneratedCodeRecognizer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Helpers\VisualBasicMethodParameterLookup.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Helpers\VisualBasicRemovableDeclarationCollector.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Helpers\VisualBasicSyntaxHelper.cs
/*
// in vb.net when using the null - conditional operator (e.g.handle?.IsClosed), the parser
// will generate a SimpleMemberAccessExpression and not a MemberBindingExpressionSyntax like for C#
// vbnet is case insensitive
// This is a simplification as we don't check where the method is defined (so this could be this or base)
/// <summary>
/// Returns argument expressions for given parameter.
///
/// There can be zero, one or more results based on parameter type (Optional or ParamArray/params).
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Helpers\VisualBasicSyntaxWalkerHelper.cs
/*
// Roslyn walker overflows the stack when the depth of the call is around 2050.
// See https://github.com/SonarSource/sonar-dotnet/issues/2115
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Metrics\VisualBasicCognitiveComplexityMetric.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Metrics\VisualBasicExecutableLinesMetric.cs
/*
// Check the attribute name without the attribute suffix OR the full name of the attribute
// The following C# constructs have no equivalent in VB.NET:
// - checked
// - unchecked
// - fixed
// - unsafe
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Metrics\VisualBasicMetrics.cs
/*
// Contrary to C#, VB.NET seems to always recognize the documentation comments.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Properties\AssemblyInfo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\AllBranchesShouldNotHaveSameImplementation.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ArrayCreationLongSyntax.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ArrayCreationLongSyntaxCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ArrayDesignatorOnVariable.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ArrayDesignatorOnVariableCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ArrayInitializationMultipleStatements.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\BinaryOperationWithIdenticalExpressions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\BooleanCheckInverted.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\BooleanLiteralUnnecessary.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\CatchRethrow.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\CertificateValidationCheck.cs
/*
//C# += equivalent:
//AddHandler situation does not exist in VB.NET. Delegate is pointer to one function only and can not have multiple handlers. It's not an event.
//Only assignment and object creation are valid cases for VB.NET
//Handling of = syntax
//Handling of constructor parameter syntax (SslStream)
//This should be throw only by bad usage of this method, not by input dependency
//For Lambda expression extract location of the parentheses only to separate them from secondary location of "true"
//Modules can't be nested. If there's one, it's the Root
//Search for parent of nested class
//Return value set by assignment to function variable/value
//And normal Return statements and throws
//Throw statements #2825. x.Expression can be NULL for standalone Throw and we need that one as well.
//LiteralExpressionSyntax or ParenthesizedExpressionSyntax like (((true)))
//Parentheses can not wrap AddressOf operand
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\CheckFileLicense.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ClassNotInstantiatable.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\CognitiveComplexity.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\CommentKeyword.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\CommentLineEnd.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ConditionalStructureSameCondition.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ConditionalStructureSameImplementation.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ConstructorArgumentValueShouldExist.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DangerousGetHandleShouldNotBeCalled.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DeclareTypesInNamespaces.cs
/*
// If declaration is an outer type that is not within a namespace block,
// make sure there is no Root Namespace set in the project
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DoNotCheckZeroSizeCollection.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DoNotInstantiateSharedClasses.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DoNotLockOnSharedResource.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DoNotNestTernaryOperators.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DoNotOverwriteCollectionElements.cs
/*
// VB is case insensitive
// In Visual Basic all collection/dictionary item sets are made through invocations
//Supported syntax structures:
// dictionary(key) = value
// dictionary.Item(key) = value
// dictionary.Add(key, value)
// list(index) = value
// list.Item(index) = value
// Possibly an indexer syntax
// Possibly in a ConditionalAccess
//#2674 Do not raise on ICollection.Add(item)
// Return the collection identifier containing the method
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DoNotPassSameValueAsMultipleArguments.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DoNotThrowFromDestructors.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DoNotUseByVal.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DoNotUseByValCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DoNotUseIif.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\DoNotUseIIfCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\EmptyMethod.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\EmptyNestedBlock.cs
/*
// The Else and ElseIf blocks are inside the MultiLineIfBlock
// The CatchBlock and FinallyBlock are inside the TryBlock
/**
// we do not throw an exception as the language can evolve over time
// verify all ElseIf except the last one
// verify all catches except the last one
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\EncryptionAlgorithmsShouldBeSecure.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\EndStatementUsage.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\EnumNameHasEnumSuffix.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\EventNameContainsBeforeOrAfter.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ExceptionConstructorShouldNotThrow.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ExitStatementUsage.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ExpressionComplexity.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\FieldShouldNotBePublic.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\FileLines.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\FlagsEnumWithoutInitializer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\FlagsEnumZeroMember.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\FunctionComplexity.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\FunctionNestingDepth.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\GenericInheritanceShouldNotBeRecursive.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\HardcodedIpAddress.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\IfChainWithoutElse.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\IfCollapsible.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\IfConditionalAlwaysTrueOrFalse.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ImplementSerializationMethodsCorrectly.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\IndexedPropertyWithMultipleParameters.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\LineContinuation.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\LineLength.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\MarkWindowsFormsMainWithStaThread.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\MethodOverloadsShouldBeGrouped.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\MethodParameterUnused.cs
/*
// Bail-out if this is not a method we want to report on
// (only based on syntax checks)
// Bail-out if this is not a method we want to report on
// (only based on symbols checks)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\MethodsShouldNotHaveIdenticalImplementations.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\MethodsShouldNotHaveTooManyLines.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\MultipleVariableDeclaration.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\MultipleVariableDeclarationCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\NameOfShouldBeUsed.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\NegatedIsExpression.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\NegatedIsExpressionCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\NonAsyncTaskShouldNotReturnNull.cs
/*
// do nothing
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\OnErrorStatement.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\OptionalParameter.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\OptionalParameterNotPassedToBaseCall.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ParameterAssignedTo.cs
/*
// this could mimic the C# variant too, but that doesn't work:
// https://github.com/dotnet/roslyn/issues/6209
// so:
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ParametersCorrectOrder.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\PartCreationPolicyShouldBeUsedWithExportAttribute.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\PropertiesAccessCorrectField.cs
/*
// we only keep information for the first location of the symbol
// The ".Parent" is to go from the accessor statement to the accessor block
// We don't handle properties with multiple returns that return different fields
// The ".Parent" is to go from the accessor statement to the accessor block
// we only keep information for the first location of the symbol
// no accessor
// Special case: ignore the accessor if the only statement/expression is a throw.
// Check for direct field access: "foo"
// Check for "this.foo"
// for Me.field
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\PropertyGetterWithThrow.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\PropertyWithArrayType.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\PropertyWriteOnly.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ProvideDeserializationMethodsForOptionalFields.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\PublicConstantField.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\PublicMethodWithMultidimensionalArray.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\PureAttributeOnVoidMethod.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ReadingStandardInput.cs
/*
/*for testing*/ ReadingStandardInput(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\RedundantExitSelect.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\RedundantNullCheck.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\RedundantParentheses.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ReversedOperators.cs
/*
// As opposed to C#, the VB operators for negation ('Not') and inequality ('<>') leave no room for confusion
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\SelfAssignment.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ShiftDynamicNotInteger.cs
/*
// x >> Nothing will not throw, so ignore
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ShouldImplementExportedInterfaces.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\SimpleDoLoop.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\SingleStatementPerLine.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\StringConcatenationInLoop.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\StringConcatenationWithPlus.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\StringConcatenationWithPlusCodeFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\SwitchCasesMinimumThree.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\SwitchSectionShouldNotHaveTooManyStatements.cs
/*
// Blocks are excluded because they contain statements (duplicating the interesting part)
// Don't count End statements
// Don't count the Do from Do...While and Do...Until
// Don't count the Next from For...Next
// Don't count single line if statements
// We will count the next statement on the line anyway
// Example:
// If foo Then bar = 2
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\SwitchShouldNotBeNested.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\SwitchWithoutDefault.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\TabCharacter.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ThreadResumeOrSuspendShouldNotBeCalled.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\ThrowReservedExceptions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\TooManyLabelsInSwitch.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\TooManyParameters.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\UnaryPrefixOperatorRepeated.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\UnconditionalJumpStatement.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\UnsignedTypesUsage.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\UriShouldNotBeHardcoded.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\UseShortCircuitingOperator.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\UseShortCircuitingOperatorFixProvider.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\UseWithStatement.cs
/*
// Only process top level member access expressions
// check previous statement if it contains
// check following statements
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\VariableUnused.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\WcfNonVoidOneWay.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\BypassingAccessibility.cs
/*
/*for testing*/ BypassingAccessibility(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\ConfiguringLoggers.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\ControllingPermissions.cs
/*
/*for testing*/ ControllingPermissions(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\CreatingHashAlgorithms.cs
/*
/*for testing*/ CreatingHashAlgorithms(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\DeliveringDebugFeaturesInProduction.cs
/*
/*for testing*/ DeliveringDebugFeaturesInProduction(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\DoNotHardcodeCredentials.cs
/*
/*for testing*/ DoNotHardcodeCredentials(IAnalyzerConfiguration analyzerConfiguration)
// We already tested the count in IsAssignedWithStringLiteral
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\EncryptingData.cs
/*
/*for testing*/ EncryptingData(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\ExecutingSqlQueries.cs
/*
/*for testing*/ ExecutingSqlQueries(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\ExpandingArchives.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\SocketsCreation.cs
/*
/*for testing*/ SocketsCreation(IAnalyzerConfiguration analyzerConfiguration)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\UsingCommandLineArguments.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\UsingCookies.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Hotspots\UsingRegularExpressions.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\ClassName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\EnumerationValueName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\EnumNameShouldFollowRegex.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\EventHandlerName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\EventName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\FieldNameChecker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\FunctionName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\IndexedPropertyName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\InterfaceName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\LocalVariableName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\NamespaceName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\ParameterName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\PrivateConstantFieldName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\PrivateFieldName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\PrivateSharedReadonlyFieldName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\PropertyName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\PublicConstantFieldName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\PublicFieldName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\PublicSharedReadonlyFieldName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Naming\TypeParameterName.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Utilities\CopyPasteTokenAnalyzer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Utilities\FileMetadataAnalyzer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Utilities\MetricsAnalyzer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Utilities\SymbolReferenceAnalyzer.cs
/*
// Based on Roslyn: http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.CSharp.Workspaces/LanguageServices/CSharpSyntaxFactsService.cs,1453
// If this node is on the left side of a member access expression, don't ascend
// further or we'll end up binding to something else.
// If this node is on the left side of a qualified name, don't ascend
// further or we'll end up binding to something else.
// If this node is the type of an object creation expression, return the
// object creation expression.
// The inside of an interpolated string is treated as its own token so we
// need to force navigation to the parent expression syntax.
// If this node is not parented by a name, we're done.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\Rules\Utilities\TokenTypeAnalyzer.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\SyntaxTrackers\VisualBasicBaseTypeTracker.cs
/*
// VB has separate Inherits and Implements keywords so the base types
// are in separate lists under different types of syntax node.
// If a class both inherits and implements then this tracker will check
// the conditions against Inherits and Implements *separately*
// i.e. the conditions will be called twice
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\SyntaxTrackers\VisualBasicElementAccessTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\SyntaxTrackers\VisualBasicFieldAccessTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\SyntaxTrackers\VisualBasicInvocationTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\SyntaxTrackers\VisualBasicMethodDeclarationTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\SyntaxTrackers\VisualBasicObjectCreationTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.VisualBasic\SyntaxTrackers\VisualBasicPropertyAccessTracker.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\src\SonarAnalyzer.Vsix\Properties\AssemblyInfo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\CBDE\CBDEArguments\CbdeArguments.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\CBDE\CBDEArguments\Properties\AssemblyInfo.cs
// Les informations générales relatives à un assembly dépendent de
// l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
// associées à un assembly.
// L'affectation de la valeur false à ComVisible rend les types invisibles dans cet assembly
// aux composants COM. Si vous devez accéder à un type dans cet assembly à partir de
// COM, affectez la valeur true à l'attribut ComVisible sur ce type.
// Le GUID suivant est pour l'ID de la typelib si ce projet est exposé à COM
// Les informations de version pour un assembly se composent des quatre valeurs suivantes :
//
//      Version principale
//      Version secondaire
//      Numéro de build
//      Révision
//
// Vous pouvez spécifier toutes les valeurs ou indiquer les numéros de build et de révision par défaut
// en utilisant '*', comme indiqué ci-dessous :
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\CBDE\CBDEFails\Program.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\CBDE\CBDEFails\Properties\AssemblyInfo.cs
// Les informations générales relatives à un assembly dépendent de
// l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
// associées à un assembly.
// L'affectation de la valeur false à ComVisible rend les types invisibles dans cet assembly
// aux composants COM. Si vous devez accéder à un type dans cet assembly à partir de
// COM, affectez la valeur true à l'attribut ComVisible sur ce type.
// Le GUID suivant est pour l'ID de la typelib si ce projet est exposé à COM
// Les informations de version pour un assembly se composent des quatre valeurs suivantes :
//
//      Version principale
//      Version secondaire
//      Numéro de build
//      Révision
//
// Vous pouvez spécifier toutes les valeurs ou indiquer les numéros de build et de révision par défaut
// en utilisant '*', comme indiqué ci-dessous :
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\CBDE\CBDESucceedsWithIncorrectResults\Program.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\CBDE\CBDESucceedsWithIncorrectResults\Properties\AssemblyInfo.cs
// Les informations générales relatives à un assembly dépendent de
// l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
// associées à un assembly.
// L'affectation de la valeur false à ComVisible rend les types invisibles dans cet assembly
// aux composants COM. Si vous devez accéder à un type dans cet assembly à partir de
// COM, affectez la valeur true à l'attribut ComVisible sur ce type.
// Le GUID suivant est pour l'ID de la typelib si ce projet est exposé à COM
// Les informations de version pour un assembly se composent des quatre valeurs suivantes :
//
//      Version principale
//      Version secondaire
//      Numéro de build
//      Révision
//
// Vous pouvez spécifier toutes les valeurs ou indiquer les numéros de build et de révision par défaut
// en utilisant '*', comme indiqué ci-dessous :
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\CBDE\CBDEWaitAndSucceeds\Program.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\CBDE\CBDEWaitAndSucceeds\Properties\AssemblyInfo.cs
// Les informations générales relatives à un assembly dépendent de
// l'ensemble d'attributs suivant. Changez les valeurs de ces attributs pour modifier les informations
// associées à un assembly.
// L'affectation de la valeur false à ComVisible rend les types invisibles dans cet assembly
// aux composants COM. Si vous devez accéder à un type dans cet assembly à partir de
// COM, affectez la valeur true à l'attribut ComVisible sur ce type.
// Le GUID suivant est pour l'ID de la typelib si ce projet est exposé à COM
// Les informations de version pour un assembly se composent des quatre valeurs suivantes :
//
//      Version principale
//      Version secondaire
//      Numéro de build
//      Révision
//
// Vous pouvez spécifier toutes les valeurs ou indiquer les numéros de build et de révision par défaut
// en utilisant '*', comme indiqué ci-dessous :
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Constants.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\FixAllDiagnosticProvider.cs
/*
/// /// <summary>
/// FixAll context with some additional information specifically for <see cref="FixAllCodeAction"/>.
/// </summary>
/// <summary>
/// Delegate to fetch diagnostics for any given document within the given fix all scope.
/// This delegate is invoked by <see cref="GetDocumentDiagnosticsAsync(Document, CancellationToken)"/> with the given <see cref="_diagnosticIds"/> as arguments.
/// </summary>
/// <summary>
/// Delegate to fetch diagnostics for any given project within the given fix all scope.
/// This delegate is invoked by <see cref="GetProjectDiagnosticsAsync(Project, CancellationToken)"/> and <see cref="GetAllDiagnosticsAsync(Project, CancellationToken)"/>
/// with the given <see cref="_diagnosticIds"/> as arguments.
/// The boolean argument to the delegate indicates whether or not to return location-based diagnostics, i.e.
/// (a) False => Return only diagnostics with <see cref="Location.None"/>.
/// (b) True => Return all project diagnostics, regardless of whether or not they have a location.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\FrameworkMetadataReference.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\NuGetMetadataReference.cs
/*
// hardcoded version
// passed version
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Verifier.cs
/*
// ToDo: add [CallerLineNumber]int lineNumber = 0
// then add ability to shift result reports with this line number
// ToDo: add [CallerLineNumber]int lineNumber = 0
// then add ability to shift result reports with this line number
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\CBDE\CbdeHandlerTest.cs
/*
// We had enough time to at least use some memory
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\CBDE\CheckMLIRWithReference.cs
/*
/// <summary>
/// This class contains tests that generate MLIR code from C# source code, then check that the generated
/// code is valid and is equal to a specified reference.
/// It is used instead of MlirExportTest when the generation result is tricky and deserves to be checked thoroughly
/// </summary>
// Set automatically by MsTest
// pred: ^bb0
// pred: ^bb1
// pred: ^bb0
// pred: ^bb1
// pred: ^bb0
// pred: ^bb1
// pred: ^bb0
// pred: ^bb1
// Not handled, but should not crash
// Not handled, but should not crash
// pred: ^bb0
// no predecessors
// pred: ^bb0
// pred: ^bb1
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\CBDE\MlirExportTest.cs
/*
/// <summary>
/// This class contains tests that generate MLIR code from C# source code, then check that the generated
/// code is valid. It does not compare the generated code to a reference.
/// </summary>
// Set automatically by MsTest
//int Cond(int i) { return i%2 == 0 ? i/2 : i*3 +1; }
// Unknown too, since we are missing library/using
// Noncompliant
//          ^^^^^^^^^
// Compliant, ignore single line blocks
// No return here
// Class
// Namespace
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\CBDE\MlirTestUtilities.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\CBDE\PreservingEncodingTest.cs
/*
// If the input string contains a point, we are no longer injective
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Common\AnalyzerAdditionalFileTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Common\AnalyzerLanguageTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Common\DistrubtionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Common\MetricsTest.cs
/*
/*hello\r\nworld*/").Should().Be(3);
/*hello\r\nworld*/").Should().Be(3);
/* ... */\n").Should().BeEquivalentTo();
// foo").NonBlank.Should().BeEquivalentTo();
// foo").NonBlank.Should().BeEquivalentTo();
// l1").NonBlank.Should().BeEquivalentTo(1);
// l1\n// l2").NonBlank.Should().BeEquivalentTo(1, 2);
/* l1 */").NonBlank.Should().BeEquivalentTo(1);
/* l1 \n l2 */").NonBlank.Should().BeEquivalentTo(1, 2);
/* l1 \n l2 */").NonBlank.Should().BeEquivalentTo(1, 2);
/// foo").NonBlank.Should().BeEquivalentTo(1);
/** foo */").NonBlank.Should().BeEquivalentTo(1);
/** foo \n \n bar */").NonBlank.Should().BeEquivalentTo(1, 3);
/** foo \r \r bar */").NonBlank.Should().BeEquivalentTo(1, 3);
/** foo \r\n \r\n bar */").NonBlank.Should().BeEquivalentTo(1, 3);
// NOSONAR").NoSonar.Should().BeEquivalentTo(1);
// ooNOSONARoo").NoSonar.Should().BeEquivalentTo(1);
// nosonar").NoSonar.Should().BeEquivalentTo();
// nOSonAr").NoSonar.Should().BeEquivalentTo();
/* NOSONAR */ /* foo*/").NoSonar.Should().BeEquivalentTo(1);
/* NOSONAR */ /* foo */").NonBlank.Should().BeEquivalentTo();
/* foo*/ /* NOSONAR */").NoSonar.Should().BeEquivalentTo(1);
/* foo*/ /* NOSONAR */").NonBlank.Should().BeEquivalentTo();
// foo").NonBlank.Should().BeEquivalentTo(1);
// foo").NonBlank.Should().BeEquivalentTo(4);
// l1").NonBlank.Should().BeEquivalentTo(1);
// l1\n// l2").NonBlank.Should().BeEquivalentTo(1, 2);
/* l1 */").NonBlank.Should().BeEquivalentTo(1);
/* l1 \n l2 */").NonBlank.Should().BeEquivalentTo(1, 2);
/* l1 \n l2 */").NonBlank.Should().BeEquivalentTo(1, 2);
/// foo").NonBlank.Should().BeEquivalentTo(1);
/** foo */").NonBlank.Should().BeEquivalentTo(1);
/** foo \n \n bar */").NonBlank.Should().BeEquivalentTo(1, 3);
/** foo \r \r bar */").NonBlank.Should().BeEquivalentTo(1, 3);
/** foo \r\n \r\n bar */").NonBlank.Should().BeEquivalentTo(1, 3);
// NOSONAR").NoSonar.Should().BeEquivalentTo(1);
// ooNOSONARoo").NoSonar.Should().BeEquivalentTo(1);
// nosonar").NoSonar.Should().BeEquivalentTo();
// nOSonAr").NoSonar.Should().BeEquivalentTo();
/* NOSONAR */ /* foo*/").NoSonar.Should().BeEquivalentTo(1);
/* NOSONAR */ /* foo */").NonBlank.Should().BeEquivalentTo();
/* foo*/ /* NOSONAR */").NoSonar.Should().BeEquivalentTo(1);
/* foo*/ /* NOSONAR */").NonBlank.Should().BeEquivalentTo();
// Is this the expected?
// Is this the expected?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Common\MultiValueDictionaryTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Common\RuleDescriptorTest.cs
/*
// SECURITY_HOTSPOTS are converted to VULNERABILITY to ensure compatiblity with old versions of SonarQube
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Common\RuleFinderTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Common\RuleTest.cs
/*
// Security hotspots are enabled by default, but they will report issues only
// when their ID is contained in SonarLint.xml
// Security hotspots are enabled by default, but they will report issues only
// when their ID is contained in SonarLint.xml
// Even if a a parametrized rule is in Sonar way profile, it is still disabled by default.
// See https://github.com/SonarSource/sonar-dotnet/issues/1274
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\ControlFlowGraph\CfgSerializerTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\ControlFlowGraph\ControlFlowGraphTest.cs
/*
// b ?? c ?? d
// is similar with "a = a ?? b;"
/// <see cref="Cfg_Coalesce_Self"/>
// is similar with "a = a ?? (b = b ?? c);"
/// <see cref="Cfg_Coalesce_MultipleAssignments"/>
// similar to a = a ?? b ?? c
/* This is equivalent to o.method */, "1", ".method(1)");
/*caught ex*/, catchBlock2 /*caught ex*/, afterFinallyBlock /*no ex*/, exit /*uncaught ex*/);
/*caught ex*/, catchBlock2 /*caught ex*/, afterFinallyBlock /*no ex*/);
/*caught ex*/, catchBlock2 /*caught ex*/, finallyBlock);
/*caught ex*/, catchBlock2 /*caught ex*/, finallyBlock /*no ex*/);
/*false*/, returnBlock /*true*/);
/*exception thrown*/, finallyBlock /*no exception*/);
/*false*/, returnBlock /*true*/);
/*caught exception thrown*/, finallyBlock);
/*false*/, returnBlock /*true*/);
/*caught exception thrown*/, afterFinallyBlock /*no exception*/, exit /*uncaught exception*/);
/*false*/, returnBlock /*true*/);
/*caught exception thrown*/, afterFinallyBlock /*no exception*/);
// this is wrong, the tryBody should not have a connection with whileStmt, it can lead to FNs
// This should be fixed in https://github.com/SonarSource/sonar-dotnet/issues/474
// CS0157 control cannot leave the body of a finally, so we cannot have jumps here
// the below is not reachable
// ToDo: this is wrong, `finally` should be connected to
// - EXIT
// - WHILE (because of `continue`)
// - afterDoWhile (because of `break`)
// This should be fixed in https://github.com/SonarSource/sonar-dotnet/issues/474
// the below is not reachable
// ToDo: it should lead to `finally` which should lead to `whileStmt`
// ToDo: it should lead to `finally` which should lead to `afterDoWhile`
// ToDo: this is weird and is basically skipped
// this block is initially created for the `insideTry`,
// and it gets replaced when seeing the `break;`
// innerAfterFinallyBlock is not generated, its instructions are in outerTryBlock
/*no ex*/, outerCatchBlock, outerFinallyBlock);
/*ex*/, outerFinallyBlock /*no ex*/);
// ToDo: this tryStatementBranch is not always used as such, or is it?
// The generated CFG is very similar to the one generated for the following conditional expression:
// return type == "a" ? 1 : (type == "b" ? 2 : 3);
// switchBlock
// caseZero
// defaultBlock
// afterSwitchBlock
// switchBlock
// firstCaseIfBlock
// trueBranchBlock
// falseBranchBlock
// defaultThrowBlock
// afterSwitchBlock
// do stuff
// RecursivePattern
// Constant Pattern
// IsPatternExpression
// VariableDeclaration
// Recursive Pattern
// Constant Pattern
// Constant Pattern
// IsPatternExpression
// VariableDeclaration
// Recursive Pattern
// Constant Pattern
// IsPatternExpression
// VariableDeclaration
// Recursive Pattern
// Constant Pattern
// IsPatternExpression
// Recursive Pattern
// Constant Pattern
// IsPatternExpression
/* RecursivePattern */, "\"WA\"" /* ConstantPattern */);
/* RecursivePattern */, "\"MN\"" /* ConstantPattern */);
// RecursivePattern
// RecursivePattern
// Constant Pattern
// Constant Pattern
// IsPatternExpression
// VariableDeclaration
// when debugging the CFG, it is useful to visualize the CFG
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\AnalysisRunContextTest.cs
/*
// Arrange
// Act & Assert
// Arrange
// Act & Assert
// Arrange
// Act & Assert
// Arrange
// Act & Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\AspNetMvcHelper_IsControllerMethod.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\AssertIgnoreScope.cs
/*
/// <summary>
/// Some of the tests cover exceptions in which we have asserts as well, we want to ignore those asserts during tests
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\BlockIdMapTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\DebugHelperTest.cs
/*
// Arrange
// Act & assert
// Reset state
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\DiagnosticAnalyzerContextHelperTest.cs
/*
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
// <autogenerated />
/*
//github.com/swagger-api/swagger-codegen.git
// Generated by the protocol buffer compiler.  DO NOT EDIT!";
// For the time being, the whole file is considered as generated
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\DiagnosticDescriptorBuilderTest.cs
/*
//rules.sonarsource.com/csharp/RSPEC-1234");
//rules.sonarsource.com/vbnet/RSPEC-1234");
// Arrange
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\DiagnosticReportHelperTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\DotWriterTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\EnumerableExtensionsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\EquivalenceCheckerTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\FluentTestHelper.cs
/*
// This allows to deal with multiple line endings
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\IfDirectiveHelperTest.cs
/*
// Arrange
// Act
// Assert
// Arrange
// literal block
// Act
// Assert
// Arrange
// opened and closed, so should not appear
// Act
// Assert
// Arrange
// trivia
// more trivia
// literal block
// more trivia
// more trivia
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// inside inactive block -> ignored
// inside inactive block -> ignored
// Act
// Assert
// Arrange
// bad directive
// bad directive
// bad directive
// bad directive
// Act
// Assert
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\MethodParameterLookupTest.cs
/*
//Self-Test of this test. If new Invocation is added to the Main(), this number has to be updated and test should be written for that case.
//TryGetNonParamsSyntax throw scenario
//Self-Test of this test. If new Invocation is added to the Main(), this number has to be updated and test should be written for that case.
//TryGetNonParamsSyntax throw scenario
//Else it's OK
//Expected contains all values {1, 2, 3} for ParamArray/params, but foreach is probing one at a time
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\MethodSignatureHelperTest.cs
/*
// Testing for calls to Console.WriteLine
// 1. Should match Console.WriteLine
// 2. Should not match call to xxx.WriteLine
// 3. Should match if Console.WriteLine is in the list of candidates
// XmlDocument derives from XmlNode
// 1. Call to node.WriteTo should only match for XmlNode
// 2. Call to doc.WriteTo should only match for XmlDocument
// XmlDocument derives from XmlNode
// 1. Call to node.WriteTo should only match for XmlNode
// 2. Call to doc.WriteTo should match for XmlDocument and XmlNode
/* no-op */ }
// Exact match should not match, but matching "derived" methods should
// <-- FALSE POSITIVE: shouldn't match since not implementing IDisposable.Dispose
/* no-op */ }
/* no-op */ }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\NavigationHelperTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\ParameterLoaderTests.cs
/*
// Arrange
// Cannot use mock because we use reflection to find properties.
// Act
// Assert
// Value from the xml file
// Arrange
// Cannot use mock because we use reflection to find properties.
// Act
// Assert
// Default value
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\ProjectTypeHelperTests.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\PropertiesHelperTest.cs
/*
// Arrange
// Act
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\SonarAnalysisContextTest.cs
/*
// ToDo: We should find a way to ack the fact the action was not run
// FIX ME: We test that a rule is enabled only by checking the issues are reported
// Verifier expects all diagnostics to increase the counter in order to check that all rules call the
// extension method and not the direct `ReportDiagnostic`.
// Because the Verifier sets the SonarAnalysisContext.ShouldDiagnosticBeReported delegate we end up in a case
// where the Debug.Assert of the AnalysisContextExtensions.ReportDiagnostic() method will raise.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\SonarAnalysisContextTest.ShouldAnalyzeGenerated.cs
/*
// Arrange
// Act
// Assert
// Not the right file so shouldn't ever try to read it
// Arrange
// Act - call ShouldAnalyzeGenerated multiple times...
// Assert
// GetText should be called every time ShouldAnalyzeGenerated is called...
// ... but we should only try to read the file once
// Arrange
// 1. Read -> no error, false returned
// should have attempted to read the file
// 2. Read again to check that the load error doesn't prevent caching from working
// should not have attempted to read the file again
// Arrange
// 1. Read both languages
// Assert
// file read once per language
// 2. Read again for VB to check VB caching
// Assert
// file should not have been read again
// We can't use Mock<SourceText> because SourceText is an abstract class
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\StringExtensionsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\SymbolHelperTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\SymbolHelperTest.IsExtensionOn.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\TestContextHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\TestHelper.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\TypeDeclarationSyntaxExtensionsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\TypeHelperTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\VbcHelperTests.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Helpers\VisualIndentHelperTest.cs
/*
// More tabs and same chars -> certain of outcome
// More tabs and more chars -> certain of outcome
// More tabs but fewer characters -> depends on tab spacing
// -> error on the side of caution and return false
// Example ITs: sources\Nancy\src\Nancy\Json\JsonDeserializer.cs #389,390, same pattern in #620,621
// "			} else if (... )"
// "				buffer.Append (ch);"
// Example ITs: "sources\Nancy\src\Nancy\TinyIoc\TinyIoC.cs, #1448,1450
// "                if (!registrationType.IsAssignableFrom(type))"
// "#endif"  <-- not part of syntax tree
// "					throw new ArgumentException(String.Format("types: The type {0} is not assignable from {1}", registrationType.FullName, type.FullName));"
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\LiveVariableAnalysis\LiveVariableAnalysisTests.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Metrics\CSharpExecutableLinesMetricTest.cs
/*
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// + 1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// +1
// excluded
// +1
// Excluded
// Excluded
// +1
// Excluded
// +1
// +1
// Excluded
// Excluded
// +1
// excluded
// +1
// +1
// excluded
// other class partial is excluded -> excluded
// +1
// other partial part of method is excluded -> excluded
// excluded
// +1
// +1
// +1
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Metrics\VisualBasicExecutableLinesMetricTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\PackagingTests\CsRuleTypeMapping.cs
/*
// The empty lines below are so the rule number aligns nicely with the line number.
//["102"],
//["111"],
//["114"],
//["115"],
//["116"],
//["117"],
//["118"],
//["119"],
//["120"],
//["123"],
//["124"],
//["128"],
//["129"],
//["130"],
//["132"],
//["133"],
//["135"],
//["136"],
//["137"],
//["139"],
//["140"],
//["141"],
//["142"],
//["143"],
//["144"],
//["145"],
//["146"],
//["147"],
//["148"],
//["149"],
//["150"],
//["151"],
//["152"],
//["153"],
//["154"],
//["155"],
//["156"],
//["157"],
//["158"],
//["159"],
//["160"],
//["161"],
//["162"],
//["163"],
//["164"],
//["165"],
//["166"],
//["167"],
//["168"],
//["169"],
//["170"],
//["171"],
//["172"],
//["173"],
//["174"],
//["175"],
//["176"],
//["177"],
//["178"],
//["179"],
//["180"],
//["181"],
//["182"],
//["183"],
//["184"],
//["185"],
//["186"],
//["187"],
//["188"],
//["189"],
//["190"],
//["191"],
//["192"],
//["193"],
//["194"],
//["195"],
//["196"],
//["197"],
//["198"],
//["199"],
//["200"],
//["201"],
//["202"],
//["203"],
//["204"],
//["205"],
//["206"],
//["207"],
//["208"],
//["209"],
//["210"],
//["211"],
//["212"],
//["213"],
//["214"],
//["215"],
//["216"],
//["217"],
//["218"],
//["219"],
//["220"],
//["221"],
//["222"],
//["223"],
//["224"],
//["225"],
//["226"],
//["227"],
//["228"],
//["229"],
//["230"],
//["231"],
//["232"],
//["233"],
//["234"],
//["235"],
//["236"],
//["237"],
//["238"],
//["239"],
//["240"],
//["241"],
//["242"],
//["243"],
//["244"],
//["245"],
//["246"],
//["247"],
//["248"],
//["249"],
//["250"],
//["251"],
//["252"],
//["253"],
//["254"],
//["255"],
//["256"],
//["257"],
//["258"],
//["259"],
//["260"],
//["261"],
//["262"],
//["263"],
//["264"],
//["265"],
//["266"],
//["267"],
//["268"],
//["269"],
//["270"],
//["271"],
//["272"],
//["273"],
//["274"],
//["275"],
//["276"],
//["277"],
//["278"],
//["279"],
//["280"],
//["281"],
//["282"],
//["283"],
//["284"],
//["285"],
//["286"],
//["287"],
//["288"],
//["289"],
//["290"],
//["291"],
//["292"],
//["293"],
//["294"],
//["295"],
//["296"],
//["297"],
//["298"],
//["299"],
//["300"],
//["301"],
//["302"],
//["303"],
//["304"],
//["305"],
//["306"],
//["307"],
//["308"],
//["309"],
//["310"],
//["311"],
//["312"],
//["313"],
//["314"],
//["315"],
//["316"],
//["317"],
//["318"],
//["319"],
//["320"],
//["321"],
//["322"],
//["323"],
//["324"],
//["325"],
//["326"],
//["327"],
//["328"],
//["329"],
//["330"],
//["331"],
//["332"],
//["333"],
//["334"],
//["335"],
//["336"],
//["337"],
//["338"],
//["339"],
//["340"],
//["341"],
//["342"],
//["343"],
//["344"],
//["345"],
//["346"],
//["347"],
//["348"],
//["349"],
//["350"],
//["351"],
//["352"],
//["353"],
//["354"],
//["355"],
//["356"],
//["357"],
//["358"],
//["359"],
//["360"],
//["361"],
//["362"],
//["363"],
//["364"],
//["365"],
//["366"],
//["367"],
//["368"],
//["369"],
//["370"],
//["371"],
//["372"],
//["373"],
//["374"],
//["375"],
//["376"],
//["377"],
//["378"],
//["379"],
//["380"],
//["381"],
//["382"],
//["383"],
//["384"],
//["385"],
//["386"],
//["387"],
//["388"],
//["389"],
//["390"],
//["391"],
//["392"],
//["393"],
//["394"],
//["395"],
//["396"],
//["397"],
//["398"],
//["399"],
//["400"],
//["401"],
//["402"],
//["403"],
//["404"],
//["405"],
//["406"],
//["407"],
//["408"],
//["409"],
//["410"],
//["411"],
//["412"],
//["413"],
//["414"],
//["415"],
//["416"],
//["417"],
//["418"],
//["419"],
//["420"],
//["421"],
//["422"],
//["423"],
//["424"],
//["425"],
//["426"],
//["427"],
//["428"],
//["429"],
//["430"],
//["431"],
//["432"],
//["433"],
//["434"],
//["435"],
//["436"],
//["437"],
//["438"],
//["439"],
//["440"],
//["441"],
//["442"],
//["443"],
//["444"],
//["445"],
//["446"],
//["447"],
//["448"],
//["449"],
//["450"],
//["451"],
//["452"],
//["453"],
//["454"],
//["455"],
//["456"],
//["457"],
//["458"],
//["459"],
//["460"],
//["461"],
//["462"],
//["463"],
//["464"],
//["465"],
//["466"],
//["467"],
//["468"],
//["469"],
//["470"],
//["471"],
//["472"],
//["473"],
//["474"],
//["475"],
//["476"],
//["477"],
//["478"],
//["479"],
//["480"],
//["481"],
//["482"],
//["483"],
//["484"],
//["485"],
//["486"],
//["487"],
//["488"],
//["489"],
//["490"],
//["491"],
//["492"],
//["493"],
//["494"],
//["495"],
//["496"],
//["497"],
//["498"],
//["499"],
//["500"],
//["501"],
//["502"],
//["503"],
//["504"],
//["505"],
//["506"],
//["507"],
//["508"],
//["509"],
//["510"],
//["511"],
//["512"],
//["513"],
//["514"],
//["515"],
//["516"],
//["517"],
//["518"],
//["519"],
//["520"],
//["521"],
//["522"],
//["523"],
//["524"],
//["525"],
//["526"],
//["527"],
//["528"],
//["529"],
//["530"],
//["531"],
//["532"],
//["533"],
//["534"],
//["535"],
//["536"],
//["537"],
//["538"],
//["539"],
//["540"],
//["541"],
//["542"],
//["543"],
//["544"],
//["545"],
//["546"],
//["547"],
//["548"],
//["549"],
//["550"],
//["551"],
//["552"],
//["553"],
//["554"],
//["555"],
//["556"],
//["557"],
//["558"],
//["559"],
//["560"],
//["561"],
//["562"],
//["563"],
//["564"],
//["565"],
//["566"],
//["567"],
//["568"],
//["569"],
//["570"],
//["571"],
//["572"],
//["573"],
//["574"],
//["575"],
//["576"],
//["577"],
//["578"],
//["579"],
//["580"],
//["581"],
//["582"],
//["583"],
//["584"],
//["585"],
//["586"],
//["587"],
//["588"],
//["589"],
//["590"],
//["591"],
//["592"],
//["593"],
//["594"],
//["595"],
//["596"],
//["597"],
//["598"],
//["599"],
//["600"],
//["601"],
//["602"],
//["603"],
//["604"],
//["605"],
//["606"],
//["607"],
//["608"],
//["609"],
//["610"],
//["611"],
//["612"],
//["613"],
//["614"],
//["615"],
//["616"],
//["617"],
//["618"],
//["619"],
//["620"],
//["621"],
//["622"],
//["623"],
//["624"],
//["625"],
//["626"],
//["627"],
//["628"],
//["629"],
//["630"],
//["631"],
//["632"],
//["633"],
//["634"],
//["635"],
//["636"],
//["637"],
//["638"],
//["639"],
//["640"],
//["641"],
//["642"],
//["643"],
//["644"],
//["645"],
//["646"],
//["647"],
//["648"],
//["649"],
//["650"],
//["651"],
//["652"],
//["653"],
//["654"],
//["655"],
//["656"],
//["657"],
//["658"],
//["659"],
//["660"],
//["661"],
//["662"],
//["663"],
//["664"],
//["665"],
//["666"],
//["667"],
//["668"],
//["669"],
//["670"],
//["671"],
//["672"],
//["673"],
//["674"],
//["675"],
//["676"],
//["677"],
//["678"],
//["679"],
//["680"],
//["681"],
//["682"],
//["683"],
//["684"],
//["685"],
//["686"],
//["687"],
//["688"],
//["689"],
//["690"],
//["691"],
//["692"],
//["693"],
//["694"],
//["695"],
//["696"],
//["697"],
//["698"],
//["699"],
//["700"],
//["701"],
//["702"],
//["703"],
//["704"],
//["705"],
//["706"],
//["707"],
//["708"],
//["709"],
//["710"],
//["711"],
//["712"],
//["713"],
//["714"],
//["715"],
//["716"],
//["717"],
//["718"],
//["719"],
//["720"],
//["721"],
//["722"],
//["723"],
//["724"],
//["725"],
//["726"],
//["727"],
//["728"],
//["729"],
//["730"],
//["731"],
//["732"],
//["733"],
//["734"],
//["735"],
//["736"],
//["737"],
//["738"],
//["739"],
//["740"],
//["741"],
//["742"],
//["743"],
//["744"],
//["745"],
//["746"],
//["747"],
//["748"],
//["749"],
//["750"],
//["751"],
//["752"],
//["753"],
//["754"],
//["755"],
//["756"],
//["757"],
//["758"],
//["759"],
//["760"],
//["761"],
//["762"],
//["763"],
//["764"],
//["765"],
//["766"],
//["767"],
//["768"],
//["769"],
//["770"],
//["771"],
//["772"],
//["773"],
//["774"],
//["775"],
//["776"],
//["777"],
//["778"],
//["779"],
//["780"],
//["781"],
//["782"],
//["783"],
//["784"],
//["785"],
//["786"],
//["787"],
//["788"],
//["789"],
//["790"],
//["791"],
//["792"],
//["793"],
//["794"],
//["795"],
//["796"],
//["797"],
//["798"],
//["799"],
//["800"],
//["801"],
//["802"],
//["803"],
//["804"],
//["805"],
//["806"],
//["807"],
//["808"],
//["809"],
//["810"],
//["811"],
//["812"],
//["813"],
//["814"],
//["815"],
//["816"],
//["817"],
//["819"],
//["820"],
//["821"],
//["822"],
//["823"],
//["824"],
//["825"],
//["826"],
//["827"],
//["828"],
//["829"],
//["830"],
//["831"],
//["832"],
//["833"],
//["834"],
//["835"],
//["836"],
//["837"],
//["838"],
//["839"],
//["840"],
//["841"],
//["842"],
//["843"],
//["844"],
//["845"],
//["846"],
//["847"],
//["848"],
//["849"],
//["850"],
//["851"],
//["852"],
//["853"],
//["854"],
//["855"],
//["856"],
//["857"],
//["858"],
//["859"],
//["860"],
//["861"],
//["862"],
//["863"],
//["864"],
//["865"],
//["866"],
//["867"],
//["868"],
//["869"],
//["870"],
//["871"],
//["872"],
//["873"],
//["874"],
//["875"],
//["876"],
//["877"],
//["878"],
//["879"],
//["880"],
//["882"],
//["883"],
//["884"],
//["885"],
//["886"],
//["887"],
//["888"],
//["889"],
//["890"],
//["891"],
//["892"],
//["893"],
//["894"],
//["895"],
//["896"],
//["897"],
//["898"],
//["899"],
//["900"],
//["901"],
//["902"],
//["903"],
//["904"],
//["905"],
//["906"],
//["908"],
//["909"],
//["910"],
//["911"],
//["912"],
//["913"],
//["914"],
//["915"],
//["916"],
//["917"],
//["918"],
//["919"],
//["920"],
//["921"],
//["922"],
//["923"],
//["924"],
//["925"],
//["926"],
//["928"],
//["929"],
//["930"],
//["931"],
//["932"],
//["933"],
//["934"],
//["935"],
//["936"],
//["937"],
//["938"],
//["939"],
//["940"],
//["941"],
//["942"],
//["943"],
//["944"],
//["945"],
//["946"],
//["947"],
//["948"],
//["949"],
//["950"],
//["951"],
//["952"],
//["953"],
//["954"],
//["955"],
//["956"],
//["957"],
//["958"],
//["959"],
//["960"],
//["961"],
//["962"],
//["963"],
//["964"],
//["965"],
//["966"],
//["967"],
//["968"],
//["969"],
//["970"],
//["971"],
//["972"],
//["973"],
//["974"],
//["975"],
//["976"],
//["977"],
//["978"],
//["979"],
//["980"],
//["981"],
//["982"],
//["983"],
//["984"],
//["985"],
//["986"],
//["987"],
//["988"],
//["989"],
//["990"],
//["991"],
//["992"],
//["993"],
//["994"],
//["995"],
//["996"],
//["997"],
//["998"],
//["999"],
//["1000"],
//["1001"],
//["1002"],
//["1003"],
//["1004"],
//["1005"],
//["1007"],
//["1008"],
//["1009"],
//["1010"],
//["1011"],
//["1012"],
//["1013"],
//["1014"],
//["1015"],
//["1016"],
//["1017"],
//["1018"],
//["1019"],
//["1020"],
//["1021"],
//["1022"],
//["1023"],
//["1024"],
//["1025"],
//["1026"],
//["1027"],
//["1028"],
//["1029"],
//["1030"],
//["1031"],
//["1032"],
//["1033"],
//["1034"],
//["1035"],
//["1036"],
//["1037"],
//["1038"],
//["1039"],
//["1040"],
//["1041"],
//["1042"],
//["1043"],
//["1044"],
//["1045"],
//["1046"],
//["1047"],
//["1049"],
//["1050"],
//["1051"],
//["1052"],
//["1053"],
//["1054"],
//["1055"],
//["1056"],
//["1057"],
//["1058"],
//["1059"],
//["1060"],
//["1061"],
//["1062"],
//["1063"],
//["1064"],
//["1065"],
//["1068"],
//["1069"],
//["1070"],
//["1071"],
//["1072"],
//["1073"],
//["1074"],
//["1076"],
//["1077"],
//["1078"],
//["1079"],
//["1080"],
//["1081"],
//["1082"],
//["1083"],
//["1084"],
//["1085"],
//["1086"],
//["1087"],
//["1088"],
//["1089"],
//["1090"],
//["1091"],
//["1092"],
//["1093"],
//["1094"],
//["1095"],
//["1096"],
//["1097"],
//["1098"],
//["1099"],
//["1100"],
//["1101"],
//["1102"],
//["1103"],
//["1105"],
//["1106"],
//["1107"],
//["1108"],
//["1111"],
//["1112"],
//["1113"],
//["1114"],
//["1115"],
//["1119"],
//["1120"],
//["1122"],
//["1124"],
//["1126"],
//["1127"],
//["1129"],
//["1130"],
//["1131"],
//["1132"],
//["1133"],
//["1136"],
//["1137"],
//["1138"],
//["1139"],
//["1140"],
//["1141"],
//["1142"],
//["1143"],
//["1146"],
//["1148"],
//["1149"],
//["1150"],
//["1152"],
//["1153"],
//["1154"],
//["1156"],
//["1157"],
//["1158"],
//["1159"],
//["1160"],
//["1161"],
//["1162"],
//["1164"],
//["1165"],
//["1166"],
//["1167"],
//["1169"],
//["1170"],
//["1171"],
//["1173"],
//["1174"],
//["1175"],
//["1176"],
//["1177"],
//["1178"],
//["1179"],
//["1180"],
//["1181"],
//["1182"],
//["1183"],
//["1184"],
//["1187"],
//["1188"],
//["1189"],
//["1190"],
//["1191"],
//["1193"],
//["1194"],
//["1195"],
//["1196"],
//["1197"],
//["1198"],
//["1201"],
//["1202"],
//["1203"],
//["1204"],
//["1205"],
//["1207"],
//["1208"],
//["1209"],
//["1211"],
//["1212"],
//["1213"],
//["1214"],
//["1216"],
//["1217"],
//["1218"],
//["1219"],
//["1220"],
//["1221"],
//["1222"],
//["1223"],
//["1224"],
//["1225"],
//["1228"],
//["1229"],
//["1230"],
//["1231"],
//["1232"],
//["1233"],
//["1234"],
//["1235"],
//["1236"],
//["1237"],
//["1238"],
//["1239"],
//["1240"],
//["1241"],
//["1242"],
//["1243"],
//["1245"],
//["1246"],
//["1247"],
//["1248"],
//["1249"],
//["1250"],
//["1251"],
//["1252"],
//["1253"],
//["1254"],
//["1255"],
//["1256"],
//["1257"],
//["1258"],
//["1259"],
//["1260"],
//["1261"],
//["1262"],
//["1263"],
//["1265"],
//["1266"],
//["1267"],
//["1268"],
//["1269"],
//["1270"],
//["1271"],
//["1272"],
//["1273"],
//["1274"],
//["1275"],
//["1276"],
//["1277"],
//["1278"],
//["1279"],
//["1280"],
//["1281"],
//["1282"],
//["1283"],
//["1284"],
//["1285"],
//["1286"],
//["1287"],
//["1288"],
//["1289"],
//["1290"],
//["1291"],
//["1292"],
//["1293"],
//["1294"],
//["1295"],
//["1296"],
//["1297"],
//["1298"],
//["1299"],
//["1300"],
//["1302"],
//["1303"],
//["1304"],
//["1305"],
//["1306"],
//["1307"],
//["1308"],
//["1310"],
//["1311"],
//["1312"],
//["1314"],
//["1315"],
//["1316"],
//["1317"],
//["1318"],
//["1319"],
//["1320"],
//["1321"],
//["1322"],
//["1323"],
//["1324"],
//["1325"],
//["1326"],
//["1327"],
//["1328"],
//["1329"],
//["1330"],
//["1331"],
//["1332"],
//["1333"],
//["1334"],
//["1335"],
//["1336"],
//["1337"],
//["1338"],
//["1339"],
//["1340"],
//["1341"],
//["1342"],
//["1343"],
//["1344"],
//["1345"],
//["1346"],
//["1347"],
//["1348"],
//["1349"],
//["1350"],
//["1351"],
//["1352"],
//["1353"],
//["1354"],
//["1355"],
//["1356"],
//["1357"],
//["1358"],
//["1359"],
//["1360"],
//["1361"],
//["1362"],
//["1363"],
//["1364"],
//["1365"],
//["1366"],
//["1367"],
//["1368"],
//["1369"],
//["1370"],
//["1371"],
//["1372"],
//["1373"],
//["1374"],
//["1375"],
//["1376"],
//["1377"],
//["1378"],
//["1379"],
//["1380"],
//["1381"],
//["1382"],
//["1383"],
//["1384"],
//["1385"],
//["1386"],
//["1387"],
//["1388"],
//["1389"],
//["1390"],
//["1391"],
//["1392"],
//["1393"],
//["1394"],
//["1395"],
//["1396"],
//["1397"],
//["1398"],
//["1399"],
//["1400"],
//["1401"],
//["1402"],
//["1403"],
//["1404"],
//["1405"],
//["1406"],
//["1407"],
//["1408"],
//["1409"],
//["1410"],
//["1411"],
//["1412"],
//["1413"],
//["1414"],
//["1415"],
//["1416"],
//["1417"],
//["1418"],
//["1419"],
//["1420"],
//["1421"],
//["1422"],
//["1423"],
//["1424"],
//["1425"],
//["1426"],
//["1427"],
//["1428"],
//["1429"],
//["1430"],
//["1431"],
//["1432"],
//["1433"],
//["1434"],
//["1435"],
//["1436"],
//["1437"],
//["1438"],
//["1439"],
//["1440"],
//["1441"],
//["1442"],
//["1443"],
//["1444"],
//["1445"],
//["1446"],
//["1447"],
//["1448"],
//["1452"],
//["1453"],
//["1454"],
//["1455"],
//["1456"],
//["1457"],
//["1458"],
//["1459"],
//["1460"],
//["1461"],
//["1462"],
//["1463"],
//["1464"],
//["1465"],
//["1466"],
//["1467"],
//["1468"],
//["1469"],
//["1470"],
//["1471"],
//["1472"],
//["1473"],
//["1474"],
//["1475"],
//["1476"],
//["1477"],
//["1478"],
//["1480"],
//["1482"],
//["1483"],
//["1484"],
//["1485"],
//["1486"],
//["1487"],
//["1488"],
//["1489"],
//["1490"],
//["1491"],
//["1492"],
//["1493"],
//["1494"],
//["1495"],
//["1496"],
//["1497"],
//["1498"],
//["1499"],
//["1500"],
//["1501"],
//["1502"],
//["1503"],
//["1504"],
//["1505"],
//["1506"],
//["1507"],
//["1508"],
//["1509"],
//["1510"],
//["1511"],
//["1512"],
//["1513"],
//["1514"],
//["1515"],
//["1516"],
//["1517"],
//["1518"],
//["1519"],
//["1520"],
//["1521"],
//["1522"],
//["1523"] = "SECURITY_HOTSPOT",
//["1524"],
//["1525"],
//["1526"],
//["1527"],
//["1528"],
//["1529"],
//["1530"],
//["1531"],
//["1532"],
//["1533"],
//["1534"],
//["1535"],
//["1536"],
//["1537"],
//["1538"],
//["1539"],
//["1540"],
//["1542"],
//["1543"],
//["1544"],
//["1545"],
//["1546"],
//["1547"],
//["1548"],
//["1549"],
//["1550"],
//["1551"],
//["1552"],
//["1553"],
//["1554"],
//["1555"],
//["1556"],
//["1557"],
//["1558"],
//["1559"],
//["1560"],
//["1561"],
//["1562"],
//["1563"],
//["1564"],
//["1565"],
//["1566"],
//["1567"],
//["1568"],
//["1569"],
//["1570"],
//["1571"],
//["1572"],
//["1573"],
//["1574"],
//["1575"],
//["1576"],
//["1577"],
//["1578"],
//["1579"],
//["1580"],
//["1581"],
//["1582"],
//["1583"],
//["1584"],
//["1585"],
//["1586"],
//["1587"],
//["1588"],
//["1589"],
//["1590"],
//["1591"],
//["1592"],
//["1593"],
//["1594"],
//["1595"],
//["1596"],
//["1597"],
//["1598"],
//["1599"],
//["1600"],
//["1601"],
//["1602"],
//["1603"],
//["1604"],
//["1605"],
//["1606"],
//["1608"],
//["1609"],
//["1610"],
//["1611"],
//["1612"],
//["1613"],
//["1614"],
//["1615"],
//["1616"],
//["1617"],
//["1618"],
//["1619"],
//["1620"],
//["1621"],
//["1622"],
//["1623"],
//["1624"],
//["1625"],
//["1626"],
//["1627"],
//["1628"],
//["1629"],
//["1630"],
//["1631"],
//["1632"],
//["1633"],
//["1634"],
//["1635"],
//["1636"],
//["1637"],
//["1638"],
//["1639"],
//["1640"],
//["1641"],
//["1642"],
//["1644"],
//["1645"],
//["1646"],
//["1647"],
//["1648"],
//["1649"],
//["1650"],
//["1651"],
//["1652"],
//["1653"],
//["1654"],
//["1655"],
//["1657"],
//["1658"],
//["1660"],
//["1661"],
//["1662"],
//["1663"],
//["1664"],
//["1665"],
//["1666"],
//["1667"],
//["1668"],
//["1669"],
//["1670"],
//["1671"],
//["1672"],
//["1673"],
//["1674"],
//["1675"],
//["1676"],
//["1677"],
//["1678"],
//["1679"],
//["1680"],
//["1681"],
//["1682"],
//["1683"],
//["1684"],
//["1685"],
//["1686"],
//["1687"],
//["1688"],
//["1689"],
//["1690"],
//["1691"],
//["1692"],
//["1693"],
//["1695"],
//["1700"],
//["1701"],
//["1702"],
//["1703"],
//["1704"],
//["1705"],
//["1706"],
//["1707"],
//["1708"],
//["1709"],
//["1710"],
//["1711"],
//["1712"],
//["1713"],
//["1714"],
//["1715"],
//["1716"],
//["1717"],
//["1718"],
//["1719"],
//["1720"],
//["1721"],
//["1722"],
//["1723"],
//["1724"],
//["1725"],
//["1726"],
//["1727"],
//["1728"],
//["1729"],
//["1730"],
//["1731"],
//["1732"],
//["1733"],
//["1734"],
//["1735"],
//["1736"],
//["1737"],
//["1738"],
//["1739"],
//["1740"],
//["1741"],
//["1742"],
//["1743"],
//["1744"],
//["1745"],
//["1746"],
//["1747"],
//["1748"],
//["1749"],
//["1750"],
//["1752"],
//["1753"],
//["1754"],
//["1755"],
//["1756"],
//["1757"],
//["1758"],
//["1759"],
//["1760"],
//["1761"],
//["1762"],
//["1763"],
//["1765"],
//["1766"],
//["1767"],
//["1768"],
//["1769"],
//["1770"],
//["1771"],
//["1772"],
//["1773"],
//["1774"],
//["1775"],
//["1776"],
//["1777"],
//["1778"],
//["1779"],
//["1780"],
//["1781"],
//["1782"],
//["1783"],
//["1784"],
//["1785"],
//["1786"],
//["1787"],
//["1788"],
//["1789"],
//["1790"],
//["1791"],
//["1792"],
//["1793"],
//["1794"],
//["1795"],
//["1796"],
//["1797"],
//["1798"],
//["1799"],
//["1800"],
//["1801"],
//["1802"],
//["1803"],
//["1804"],
//["1805"],
//["1806"],
//["1807"],
//["1808"],
//["1809"],
//["1810"],
//["1811"],
//["1812"],
//["1813"],
//["1814"],
//["1815"],
//["1816"],
//["1817"],
//["1818"],
//["1819"],
//["1820"],
//["1822"],
//["1823"],
//["1824"],
//["1825"],
//["1826"],
//["1827"],
//["1828"],
//["1829"],
//["1830"],
//["1831"],
//["1832"],
//["1833"],
//["1834"],
//["1835"],
//["1836"],
//["1837"],
//["1838"],
//["1839"],
//["1840"],
//["1841"],
//["1842"],
//["1843"],
//["1844"],
//["1845"],
//["1846"],
//["1847"],
//["1849"],
//["1850"],
//["1851"],
//["1852"],
//["1853"],
//["1855"],
//["1856"],
//["1857"],
//["1859"],
//["1860"],
//["1861"],
//["1863"],
//["1864"],
//["1865"],
//["1866"],
//["1867"],
//["1868"],
//["1869"],
//["1870"],
//["1872"],
//["1873"],
//["1874"],
//["1875"],
//["1876"],
//["1877"],
//["1878"],
//["1879"],
//["1880"],
//["1881"],
//["1882"],
//["1883"],
//["1884"],
//["1885"],
//["1886"],
//["1887"],
//["1888"],
//["1889"],
//["1890"],
//["1891"],
//["1892"],
//["1893"],
//["1894"],
//["1895"],
//["1896"],
//["1897"],
//["1898"],
//["1899"],
//["1900"],
//["1901"],
//["1902"],
//["1903"],
//["1904"],
//["1906"],
//["1907"],
//["1908"],
//["1909"],
//["1910"],
//["1911"],
//["1912"],
//["1913"],
//["1914"],
//["1915"],
//["1916"],
//["1917"],
//["1918"],
//["1919"],
//["1920"],
//["1921"],
//["1922"],
//["1923"],
//["1924"],
//["1925"],
//["1926"],
//["1927"],
//["1928"],
//["1929"],
//["1930"],
//["1931"],
//["1932"],
//["1933"],
//["1934"],
//["1935"],
//["1936"],
//["1937"],
//["1938"],
//["1941"],
//["1942"],
//["1943"],
//["1945"],
//["1946"],
//["1947"],
//["1948"],
//["1949"],
//["1950"],
//["1951"],
//["1952"],
//["1953"],
//["1954"],
//["1955"],
//["1956"],
//["1957"],
//["1958"],
//["1959"],
//["1960"],
//["1961"],
//["1962"],
//["1963"],
//["1964"],
//["1965"],
//["1966"],
//["1967"],
//["1968"],
//["1969"],
//["1970"],
//["1971"],
//["1972"],
//["1973"],
//["1974"],
//["1975"],
//["1976"],
//["1977"],
//["1978"],
//["1979"],
//["1980"],
//["1981"],
//["1982"],
//["1983"],
//["1984"],
//["1985"],
//["1986"],
//["1987"],
//["1988"],
//["1989"],
//["1990"],
//["1991"],
//["1992"],
//["1993"],
//["1995"],
//["1996"],
//["1997"],
//["1998"],
//["1999"],
//["2000"],
//["2001"],
//["2002"],
//["2003"],
//["2004"],
//["2005"],
//["2006"],
//["2007"],
//["2008"],
//["2009"],
//["2010"],
//["2011"],
//["2012"],
//["2013"],
//["2014"],
//["2015"],
//["2016"],
//["2017"],
//["2018"],
//["2019"],
//["2020"],
//["2021"],
//["2022"],
//["2023"],
//["2024"],
//["2025"],
//["2026"],
//["2027"],
//["2028"],
//["2029"],
//["2030"],
//["2031"],
//["2032"],
//["2033"],
//["2034"],
//["2035"],
//["2036"],
//["2037"],
//["2038"],
//["2039"],
//["2040"],
//["2041"],
//["2042"],
//["2043"],
//["2044"],
//["2045"],
//["2046"],
//["2047"],
//["2048"],
//["2049"],
//["2050"],
//["2051"],
//["2052"],
//["2053"],
//["2054"],
//["2055"],
//["2056"],
//["2057"],
//["2058"],
//["2059"],
//["2060"],
//["2061"],
//["2062"],
//["2063"],
//["2064"],
//["2065"],
//["2066"],
//["2067"],
//["2069"],
//["2071"],
//["2072"],
//["2073"],
//["2074"],
//["2075"],
//["2076"],
//["2078"],
//["2079"],
//["2080"],
//["2081"],
//["2082"],
//["2083"],
//["2084"],
//["2085"],
//["2086"],
//["2087"],
//["2088"],
//["2089"],
//["2090"],
//["2091"],
//["2093"],
//["2094"],
//["2095"],
//["2096"],
//["2097"],
//["2098"],
//["2099"],
//["2100"],
//["2101"],
//["2102"],
//["2103"],
//["2104"],
//["2105"],
//["2106"],
//["2107"],
//["2108"],
//["2109"],
//["2110"],
//["2111"],
//["2112"],
//["2113"],
//["2115"],
//["2116"],
//["2117"],
//["2118"],
//["2119"],
//["2120"],
//["2121"],
//["2122"],
//["2124"],
//["2125"],
//["2126"],
//["2127"],
//["2128"],
//["2129"],
//["2130"],
//["2131"],
//["2132"],
//["2133"],
//["2134"],
//["2135"],
//["2136"],
//["2137"],
//["2138"],
//["2139"],
//["2140"],
//["2141"],
//["2142"],
//["2143"],
//["2144"],
//["2145"],
//["2146"],
//["2147"],
//["2149"],
//["2150"],
//["2151"],
//["2152"],
//["2153"],
//["2154"],
//["2155"],
//["2157"],
//["2158"],
//["2159"],
//["2160"],
//["2161"],
//["2162"],
//["2163"],
//["2164"],
//["2165"],
//["2166"],
//["2167"],
//["2168"],
//["2169"],
//["2170"],
//["2171"],
//["2172"],
//["2173"],
//["2174"],
//["2175"],
//["2176"],
//["2177"],
//["2179"],
//["2180"],
//["2181"],
//["2182"],
//["2185"],
//["2186"],
//["2188"],
//["2189"],
//["2191"],
//["2192"],
//["2193"],
//["2194"],
//["2195"],
//["2196"],
//["2198"],
//["2199"],
//["2200"],
//["2202"],
//["2203"],
//["2204"],
//["2205"],
//["2206"],
//["2207"],
//["2208"],
//["2209"],
//["2210"],
//["2211"],
//["2212"],
//["2213"],
//["2214"],
//["2215"],
//["2216"],
//["2217"],
//["2218"],
//["2220"],
//["2222"],
//["2224"],
//["2226"],
//["2227"],
//["2229"],
//["2230"],
//["2231"],
//["2232"],
//["2233"],
//["2235"],
//["2236"],
//["2237"],
//["2238"],
//["2239"],
//["2240"],
//["2241"],
//["2242"],
//["2243"],
//["2244"],
//["2246"],
//["2247"],
//["2248"],
//["2249"],
//["2250"],
//["2253"],
//["2254"],
//["2256"],
//["2257"],
//["2258"],
//["2260"],
//["2261"],
//["2262"],
//["2263"],
//["2264"],
//["2265"],
//["2266"],
//["2267"],
//["2268"],
//["2269"],
//["2270"],
//["2271"],
//["2272"],
//["2273"],
//["2274"],
//["2276"],
//["2277"],
//["2279"],
//["2280"],
//["2281"],
//["2282"],
//["2283"],
//["2284"],
//["2285"],
//["2286"],
//["2287"],
//["2288"],
//["2289"],
//["2293"],
//["2294"],
//["2295"],
//["2296"],
//["2297"],
//["2298"],
//["2299"],
//["2300"],
//["2301"],
//["2303"],
//["2304"],
//["2305"],
//["2307"],
//["2308"],
//["2309"],
//["2310"],
//["2311"],
//["2312"],
//["2313"],
//["2314"],
//["2315"],
//["2316"],
//["2317"],
//["2318"],
//["2319"],
//["2320"],
//["2321"],
//["2322"],
//["2323"],
//["2324"],
//["2329"],
//["2331"],
//["2332"],
//["2334"],
//["2335"],
//["2336"],
//["2337"],
//["2338"],
//["2340"],
//["2341"],
//["2343"],
//["2347"],
//["2348"],
//["2349"],
//["2350"],
//["2351"],
//["2352"],
//["2353"],
//["2354"],
//["2355"],
//["2356"],
//["2358"],
//["2359"],
//["2361"],
//["2362"],
//["2363"],
//["2364"],
//["2366"],
//["2367"],
//["2369"],
//["2370"],
//["2371"],
//["2373"],
//["2374"],
//["2375"],
//["2377"],
//["2378"],
//["2379"],
//["2380"],
//["2381"],
//["2382"],
//["2383"],
//["2384"],
//["2385"],
//["2388"],
//["2389"],
//["2390"],
//["2391"],
//["2392"],
//["2393"],
//["2394"],
//["2395"],
//["2396"],
//["2397"],
//["2398"],
//["2399"],
//["2400"],
//["2401"],
//["2402"],
//["2403"],
//["2404"],
//["2405"],
//["2406"],
//["2407"],
//["2408"],
//["2409"],
//["2410"],
//["2411"],
//["2412"],
//["2413"],
//["2414"],
//["2415"],
//["2416"],
//["2417"],
//["2418"],
//["2419"],
//["2420"],
//["2421"],
//["2422"],
//["2423"],
//["2424"],
//["2425"],
//["2426"],
//["2427"],
//["2428"],
//["2429"],
//["2430"],
//["2431"],
//["2432"],
//["2433"],
//["2434"],
//["2435"],
//["2438"],
//["2439"],
//["2440"],
//["2441"],
//["2442"],
//["2443"],
//["2444"],
//["2445"],
//["2446"],
//["2447"],
//["2448"],
//["2449"],
//["2450"],
//["2451"],
//["2452"],
//["2453"],
//["2454"],
//["2455"],
//["2456"],
//["2457"],
//["2458"],
//["2459"],
//["2460"],
//["2461"],
//["2462"],
//["2463"],
//["2464"],
//["2465"],
//["2466"],
//["2467"],
//["2468"],
//["2469"],
//["2470"],
//["2471"],
//["2472"],
//["2473"],
//["2474"],
//["2475"],
//["2476"],
//["2477"],
//["2478"],
//["2480"],
//["2481"],
//["2482"],
//["2483"],
//["2484"],
//["2485"],
//["2487"],
//["2488"],
//["2489"],
//["2490"],
//["2491"],
//["2492"],
//["2493"],
//["2494"],
//["2495"],
//["2496"],
//["2497"],
//["2498"],
//["2499"],
//["2500"],
//["2501"],
//["2502"],
//["2503"],
//["2504"],
//["2505"],
//["2506"],
//["2507"],
//["2508"],
//["2509"],
//["2510"],
//["2511"],
//["2512"],
//["2513"],
//["2514"],
//["2515"],
//["2516"],
//["2517"],
//["2518"],
//["2519"],
//["2520"],
//["2521"],
//["2522"],
//["2523"],
//["2524"],
//["2525"],
//["2526"],
//["2527"],
//["2528"],
//["2529"],
//["2530"],
//["2531"],
//["2532"],
//["2533"],
//["2534"],
//["2535"],
//["2536"],
//["2537"],
//["2538"],
//["2539"],
//["2540"],
//["2541"],
//["2542"],
//["2543"],
//["2544"],
//["2545"],
//["2546"],
//["2547"],
//["2548"],
//["2549"],
//["2550"],
//["2552"],
//["2553"],
//["2554"],
//["2555"],
//["2556"],
//["2557"],
//["2558"],
//["2559"],
//["2560"],
//["2561"],
//["2562"],
//["2563"],
//["2564"],
//["2565"],
//["2566"],
//["2567"],
//["2568"],
//["2569"],
//["2570"],
//["2571"],
//["2572"],
//["2573"],
//["2574"],
//["2575"],
//["2576"],
//["2577"],
//["2578"],
//["2579"],
//["2580"],
//["2581"],
//["2582"],
//["2584"],
//["2585"],
//["2586"],
//["2587"],
//["2588"],
//["2590"],
//["2591"],
//["2592"],
//["2593"],
//["2594"],
//["2595"],
//["2596"],
//["2597"],
//["2598"],
//["2599"],
//["2600"],
//["2601"],
//["2602"],
//["2603"],
//["2604"],
//["2605"],
//["2606"],
//["2607"],
//["2608"],
//["2609"],
//["2610"],
//["2611"],
//["2612"],
//["2613"],
//["2614"],
//["2615"],
//["2616"],
//["2617"],
//["2618"],
//["2619"],
//["2620"],
//["2621"],
//["2622"],
//["2623"],
//["2624"],
//["2625"],
//["2626"],
//["2627"],
//["2628"],
//["2629"],
//["2630"],
//["2631"],
//["2632"],
//["2633"],
//["2634"],
//["2635"],
//["2636"],
//["2637"],
//["2638"],
//["2639"],
//["2640"],
//["2641"],
//["2642"],
//["2643"],
//["2644"],
//["2645"],
//["2646"],
//["2647"],
//["2648"],
//["2649"],
//["2650"],
//["2651"],
//["2652"],
//["2653"],
//["2654"],
//["2655"],
//["2656"],
//["2657"],
//["2658"],
//["2659"],
//["2660"],
//["2661"],
//["2662"],
//["2663"],
//["2664"],
//["2665"],
//["2666"],
//["2667"],
//["2668"],
//["2669"],
//["2670"],
//["2671"],
//["2672"],
//["2673"],
//["2675"],
//["2676"],
//["2677"],
//["2678"],
//["2679"],
//["2680"],
//["2682"],
//["2683"],
//["2684"],
//["2685"],
//["2686"],
//["2687"],
//["2689"],
//["2690"],
//["2691"],
//["2693"],
//["2694"],
//["2695"],
//["2697"],
//["2698"],
//["2700"],
//["2702"],
//["2703"],
//["2704"],
//["2705"],
//["2706"],
//["2707"],
//["2708"],
//["2709"],
//["2710"],
//["2711"],
//["2712"],
//["2713"],
//["2714"],
//["2715"],
//["2716"],
//["2717"],
//["2718"],
//["2719"],
//["2720"],
//["2721"],
//["2722"],
//["2723"],
//["2724"],
//["2725"],
//["2726"],
//["2727"],
//["2728"],
//["2729"],
//["2730"],
//["2731"],
//["2732"],
//["2733"],
//["2734"],
//["2735"],
//["2736"],
//["2738"],
//["2739"],
//["2740"],
//["2741"],
//["2742"],
//["2744"],
//["2745"],
//["2746"],
//["2747"],
//["2748"],
//["2749"],
//["2750"],
//["2751"],
//["2752"],
//["2753"],
//["2754"],
//["2755"],
//["2756"],
//["2759"],
//["2762"],
//["2763"],
//["2764"],
//["2765"],
//["2766"],
//["2767"],
//["2768"],
//["2769"],
//["2770"],
//["2771"],
//["2772"],
//["2773"],
//["2774"],
//["2775"],
//["2776"],
//["2777"],
//["2778"],
//["2779"],
//["2780"],
//["2781"],
//["2782"],
//["2783"],
//["2784"],
//["2785"],
//["2786"],
//["2787"],
//["2788"],
//["2789"],
//["2790"],
//["2791"],
//["2792"],
//["2793"],
//["2794"],
//["2795"],
//["2796"],
//["2797"],
//["2798"],
//["2799"],
//["2800"],
//["2801"],
//["2802"],
//["2803"],
//["2804"],
//["2805"],
//["2806"],
//["2807"],
//["2808"],
//["2809"],
//["2810"],
//["2811"],
//["2812"],
//["2813"],
//["2814"],
//["2815"],
//["2816"],
//["2817"],
//["2818"],
//["2819"],
//["2820"],
//["2821"],
//["2822"],
//["2823"],
//["2824"],
//["2825"],
//["2826"],
//["2827"],
//["2828"],
//["2829"],
//["2830"],
//["2831"],
//["2832"],
//["2833"],
//["2834"],
//["2835"],
//["2836"],
//["2837"],
//["2838"],
//["2839"],
//["2840"],
//["2841"],
//["2842"],
//["2843"],
//["2844"],
//["2845"],
//["2846"],
//["2847"],
//["2848"],
//["2849"],
//["2850"],
//["2851"],
//["2852"],
//["2853"],
//["2854"],
//["2855"],
//["2856"],
//["2858"],
//["2859"],
//["2860"],
//["2861"],
//["2862"],
//["2863"],
//["2864"],
//["2865"],
//["2866"],
//["2867"],
//["2868"],
//["2869"],
//["2870"],
//["2871"],
//["2872"],
//["2873"],
//["2874"],
//["2875"],
//["2876"],
//["2877"],
//["2878"],
//["2879"],
//["2880"],
//["2881"],
//["2882"],
//["2883"],
//["2884"],
//["2885"],
//["2886"],
//["2887"],
//["2888"],
//["2889"],
//["2890"],
//["2891"],
//["2892"],
//["2893"],
//["2894"],
//["2895"],
//["2896"],
//["2897"],
//["2898"],
//["2899"],
//["2900"],
//["2901"],
//["2902"],
//["2903"],
//["2904"],
//["2905"],
//["2906"],
//["2907"],
//["2908"],
//["2909"],
//["2910"],
//["2911"],
//["2912"],
//["2913"],
//["2914"],
//["2915"],
//["2916"],
//["2917"],
//["2918"],
//["2919"],
//["2920"],
//["2921"],
//["2922"],
//["2923"],
//["2924"],
//["2925"],
//["2926"],
//["2927"],
//["2928"],
//["2929"],
//["2932"],
//["2935"],
//["2936"],
//["2937"],
//["2938"],
//["2939"],
//["2940"],
//["2941"],
//["2942"],
//["2943"],
//["2944"],
//["2945"],
//["2946"],
//["2947"],
//["2948"],
//["2949"],
//["2950"],
//["2951"],
//["2954"],
//["2956"],
//["2957"],
//["2958"],
//["2959"],
//["2960"],
//["2961"],
//["2962"],
//["2963"],
//["2964"],
//["2965"],
//["2966"],
//["2967"],
//["2968"],
//["2969"],
//["2970"],
//["2972"],
//["2973"],
//["2974"],
//["2975"],
//["2976"],
//["2977"],
//["2978"],
//["2979"],
//["2980"],
//["2981"],
//["2982"],
//["2983"],
//["2984"],
//["2985"],
//["2986"],
//["2987"],
//["2988"],
//["2989"],
//["2990"],
//["2991"],
//["2992"],
//["2993"],
//["2994"],
//["2998"],
//["2999"],
//["3000"],
//["3001"],
//["3002"],
//["3003"],
//["3004"],
//["3006"],
//["3007"],
//["3008"],
//["3009"],
//["3012"],
//["3013"],
//["3014"],
//["3015"],
//["3016"],
//["3017"],
//["3018"],
//["3019"],
//["3020"],
//["3021"],
//["3022"],
//["3023"],
//["3024"],
//["3025"],
//["3026"],
//["3027"],
//["3028"],
//["3029"],
//["3030"],
//["3031"],
//["3032"],
//["3033"],
//["3034"],
//["3035"],
//["3036"],
//["3037"],
//["3038"],
//["3039"],
//["3040"],
//["3041"],
//["3042"],
//["3043"],
//["3044"],
//["3045"],
//["3046"],
//["3047"],
//["3048"],
//["3049"],
//["3050"],
//["3051"],
//["3053"],
//["3054"],
//["3055"],
//["3056"],
//["3057"],
//["3058"],
//["3059"],
//["3061"],
//["3062"],
//["3063"],
//["3064"],
//["3065"],
//["3066"],
//["3067"],
//["3068"],
//["3069"],
//["3070"],
//["3071"],
//["3072"],
//["3073"],
//["3074"],
//["3075"],
//["3076"],
//["3077"],
//["3078"],
//["3079"],
//["3080"],
//["3081"],
//["3082"],
//["3083"],
//["3084"],
//["3085"],
//["3086"],
//["3087"],
//["3088"],
//["3089"],
//["3090"],
//["3091"],
//["3092"],
//["3093"],
//["3094"],
//["3095"],
//["3096"],
//["3097"],
//["3098"],
//["3099"],
//["3100"],
//["3101"],
//["3102"],
//["3103"],
//["3104"],
//["3105"],
//["3106"],
//["3107"],
//["3108"],
//["3109"],
//["3110"],
//["3111"],
//["3112"],
//["3113"],
//["3114"],
//["3115"],
//["3116"],
//["3117"],
//["3118"],
//["3119"],
//["3120"],
//["3121"],
//["3122"],
//["3123"],
//["3124"],
//["3125"],
//["3126"],
//["3127"],
//["3128"],
//["3129"],
//["3130"],
//["3131"],
//["3132"],
//["3133"],
//["3134"],
//["3135"],
//["3136"],
//["3137"],
//["3138"],
//["3139"],
//["3140"],
//["3141"],
//["3142"],
//["3143"],
//["3144"],
//["3145"],
//["3146"],
//["3147"],
//["3148"],
//["3149"],
//["3150"],
//["3151"],
//["3152"],
//["3153"],
//["3154"],
//["3155"],
//["3156"],
//["3157"],
//["3158"],
//["3159"],
//["3160"],
//["3161"],
//["3162"],
//["3163"],
//["3164"],
//["3165"],
//["3166"],
//["3167"],
//["3170"],
//["3171"],
//["3173"],
//["3174"],
//["3175"],
//["3176"],
//["3177"],
//["3178"],
//["3179"],
//["3180"],
//["3181"],
//["3182"],
//["3183"],
//["3184"],
//["3185"],
//["3186"],
//["3187"],
//["3188"],
//["3189"],
//["3190"],
//["3191"],
//["3192"],
//["3193"],
//["3194"],
//["3195"],
//["3196"],
//["3197"],
//["3198"],
//["3199"],
//["3200"],
//["3201"],
//["3202"],
//["3203"],
//["3204"],
//["3205"],
//["3206"],
//["3207"],
//["3208"],
//["3209"],
//["3210"],
//["3211"],
//["3212"],
//["3213"],
//["3214"],
//["3219"],
//["3221"],
//["3222"],
//["3223"],
//["3224"],
//["3225"],
//["3226"],
//["3227"],
//["3228"],
//["3229"],
//["3230"],
//["3231"],
//["3232"],
//["3233"],
//["3238"],
//["3239"],
//["3243"],
//["3245"],
//["3248"],
//["3250"],
//["3252"],
//["3255"],
//["3258"],
//["3259"],
//["3260"],
//["3266"],
//["3267"],
//["3268"],
//["3269"],
//["3270"],
//["3271"],
//["3272"],
//["3273"],
//["3274"],
//["3275"],
//["3276"],
//["3277"],
//["3278"],
//["3279"],
//["3280"],
//["3281"],
//["3282"],
//["3283"],
//["3284"],
//["3285"],
//["3286"],
//["3287"],
//["3288"],
//["3289"],
//["3290"],
//["3291"],
//["3292"],
//["3293"],
//["3294"],
//["3295"],
//["3296"],
//["3297"],
//["3298"],
//["3299"],
//["3300"],
//["3301"],
//["3302"],
//["3303"],
//["3304"],
//["3305"],
//["3306"],
//["3307"],
//["3308"],
//["3309"],
//["3310"],
//["3311"],
//["3312"],
//["3313"],
//["3314"],
//["3315"],
//["3316"],
//["3317"],
//["3318"],
//["3319"],
//["3320"],
//["3321"],
//["3322"],
//["3323"],
//["3324"],
//["3325"],
//["3326"],
//["3327"],
//["3328"],
//["3329"],
//["3331"],
//["3332"],
//["3333"],
//["3334"],
//["3335"],
//["3336"],
//["3337"],
//["3338"],
//["3339"],
//["3340"],
//["3341"],
//["3342"],
//["3344"],
//["3345"],
//["3347"],
//["3348"],
//["3349"],
//["3350"],
//["3351"],
//["3352"],
//["3354"],
//["3355"],
//["3356"],
//["3357"],
//["3359"],
//["3360"],
//["3361"],
//["3362"],
//["3363"],
//["3364"],
//["3365"],
//["3367"],
//["3368"],
//["3369"],
//["3370"],
//["3371"],
//["3372"],
//["3373"],
//["3374"],
//["3375"],
//["3377"],
//["3378"],
//["3379"],
//["3380"],
//["3381"],
//["3382"],
//["3383"],
//["3384"],
//["3385"],
//["3386"],
//["3387"],
//["3388"],
//["3389"],
//["3390"],
//["3391"],
//["3392"],
//["3393"],
//["3394"],
//["3395"],
//["3396"],
//["3398"],
//["3399"],
//["3401"],
//["3402"],
//["3403"],
//["3404"],
//["3405"],
//["3406"],
//["3407"],
//["3408"],
//["3409"],
//["3410"],
//["3411"],
//["3412"],
//["3413"],
//["3414"],
//["3416"],
//["3417"],
//["3418"],
//["3419"],
//["3420"],
//["3421"],
//["3422"],
//["3423"],
//["3424"],
//["3425"],
//["3426"],
//["3428"],
//["3429"],
//["3430"],
//["3432"],
//["3434"],
//["3435"],
//["3436"],
//["3437"],
//["3438"],
//["3439"],
//["3446"],
//["3448"],
//["3452"],
//["3454"],
//["3455"],
//["3460"],
//["3461"],
//["3462"],
//["3463"],
//["3465"],
//["3467"],
//["3468"],
//["3469"],
//["3470"],
//["3471"],
//["3472"],
//["3473"],
//["3474"],
//["3475"],
//["3476"],
//["3477"],
//["3478"],
//["3479"],
//["3480"],
//["3481"],
//["3482"],
//["3483"],
//["3484"],
//["3485"],
//["3486"],
//["3487"],
//["3488"],
//["3489"],
//["3490"],
//["3491"],
//["3492"],
//["3493"],
//["3494"],
//["3495"],
//["3496"],
//["3497"],
//["3498"],
//["3499"],
//["3500"],
//["3501"],
//["3502"],
//["3503"],
//["3504"],
//["3505"],
//["3506"],
//["3507"],
//["3508"],
//["3509"],
//["3510"],
//["3511"],
//["3512"],
//["3513"],
//["3514"],
//["3515"],
//["3516"],
//["3517"],
//["3518"],
//["3519"],
//["3520"],
//["3521"],
//["3522"],
//["3523"],
//["3524"],
//["3525"],
//["3526"],
//["3527"],
//["3528"],
//["3529"],
//["3530"],
//["3531"],
//["3533"],
//["3534"],
//["3535"],
//["3536"],
//["3537"],
//["3538"],
//["3539"],
//["3540"],
//["3541"],
//["3542"],
//["3543"],
//["3544"],
//["3545"],
//["3546"],
//["3547"],
//["3548"],
//["3549"],
//["3550"],
//["3551"],
//["3552"],
//["3553"],
//["3554"],
//["3555"],
//["3556"],
//["3557"],
//["3558"],
//["3559"],
//["3560"],
//["3561"],
//["3562"],
//["3563"],
//["3564"],
//["3565"],
//["3566"],
//["3567"],
//["3568"],
//["3569"],
//["3570"],
//["3571"],
//["3572"],
//["3573"],
//["3574"],
//["3575"],
//["3576"],
//["3577"],
//["3578"],
//["3579"],
//["3580"],
//["3581"],
//["3582"],
//["3583"],
//["3584"],
//["3585"],
//["3586"],
//["3587"],
//["3588"],
//["3589"],
//["3590"],
//["3591"],
//["3592"],
//["3593"],
//["3594"],
//["3595"],
//["3596"],
//["3599"],
//["3601"],
//["3602"],
//["3605"],
//["3606"],
//["3607"],
//["3608"],
//["3609"],
//["3611"],
//["3612"],
//["3613"],
//["3614"],
//["3615"],
//["3616"],
//["3617"],
//["3618"],
//["3619"],
//["3620"],
//["3621"],
//["3622"],
//["3623"],
//["3624"],
//["3625"],
//["3627"],
//["3628"],
//["3629"],
//["3630"],
//["3631"],
//["3632"],
//["3633"],
//["3634"],
//["3635"],
//["3636"],
//["3637"],
//["3638"],
//["3639"],
//["3640"],
//["3641"],
//["3642"],
//["3643"],
//["3644"],
//["3645"],
//["3646"],
//["3647"],
//["3648"],
//["3649"],
//["3650"],
//["3651"],
//["3652"],
//["3653"],
//["3654"],
//["3656"],
//["3657"],
//["3658"],
//["3659"],
//["3660"],
//["3661"],
//["3662"],
//["3663"],
//["3664"],
//["3665"],
//["3666"],
//["3667"],
//["3668"],
//["3669"],
//["3670"],
//["3671"],
//["3672"],
//["3673"],
//["3674"],
//["3675"],
//["3676"],
//["3677"],
//["3678"],
//["3679"],
//["3680"],
//["3681"],
//["3682"],
//["3683"],
//["3684"],
//["3685"],
//["3686"],
//["3687"],
//["3688"],
//["3689"],
//["3690"],
//["3691"],
//["3692"],
//["3694"],
//["3695"],
//["3696"],
//["3697"],
//["3698"],
//["3699"],
//["3700"],
//["3701"],
//["3702"],
//["3703"],
//["3704"],
//["3705"],
//["3706"],
//["3707"],
//["3708"],
//["3709"],
//["3710"],
//["3711"],
//["3712"],
//["3713"],
//["3714"],
//["3715"],
//["3716"],
//["3718"],
//["3719"],
//["3720"],
//["3721"],
//["3722"],
//["3723"],
//["3724"],
//["3725"],
//["3726"],
//["3727"],
//["3728"],
//["3729"],
//["3730"],
//["3731"],
//["3732"],
//["3733"],
//["3734"],
//["3735"],
//["3736"],
//["3737"],
//["3738"],
//["3739"],
//["3740"],
//["3741"],
//["3742"],
//["3743"],
//["3744"],
//["3745"],
//["3746"],
//["3747"],
//["3748"],
//["3749"],
//["3750"],
//["3751"],
//["3752"],
//["3753"],
//["3754"],
//["3755"],
//["3756"],
//["3757"],
//["3758"],
//["3759"],
//["3760"],
//["3761"],
//["3762"],
//["3763"],
//["3764"],
//["3765"],
//["3766"],
//["3767"],
//["3768"],
//["3769"],
//["3770"],
//["3771"],
//["3772"],
//["3773"],
//["3774"],
//["3775"],
//["3777"],
//["3778"],
//["3779"],
//["3780"],
//["3781"],
//["3782"],
//["3783"],
//["3784"],
//["3785"],
//["3786"],
//["3787"],
//["3788"],
//["3789"],
//["3790"],
//["3791"],
//["3792"],
//["3793"],
//["3794"],
//["3795"],
//["3796"],
//["3797"],
//["3798"],
//["3799"],
//["3800"],
//["3801"],
//["3802"],
//["3803"],
//["3804"],
//["3805"],
//["3806"],
//["3807"],
//["3808"],
//["3809"],
//["3810"],
//["3811"],
//["3812"],
//["3813"],
//["3814"],
//["3815"],
//["3816"],
//["3817"],
//["3818"],
//["3819"],
//["3820"],
//["3821"],
//["3822"],
//["3823"],
//["3824"],
//["3825"],
//["3826"],
//["3827"],
//["3828"],
//["3829"],
//["3830"],
//["3831"],
//["3832"],
//["3833"],
//["3834"],
//["3835"],
//["3836"],
//["3837"],
//["3838"],
//["3839"],
//["3840"],
//["3841"],
//["3842"],
//["3843"],
//["3844"],
//["3845"],
//["3846"],
//["3847"],
//["3848"],
//["3849"],
//["3850"],
//["3851"],
//["3852"],
//["3853"],
//["3854"],
//["3855"],
//["3856"],
//["3857"],
//["3858"],
//["3859"],
//["3860"],
//["3861"],
//["3862"],
//["3863"],
//["3864"],
//["3865"],
//["3866"],
//["3867"],
//["3868"],
//["3870"],
//["3873"],
//["3878"],
//["3879"],
//["3882"],
//["3883"],
//["3886"],
//["3888"],
//["3890"],
//["3891"],
//["3892"],
//["3893"],
//["3894"],
//["3895"],
//["3896"],
//["3899"],
//["3901"],
//["3905"],
//["3907"],
//["3910"],
//["3911"],
//["3912"],
//["3913"],
//["3914"],
//["3915"],
//["3916"],
//["3917"],
//["3918"],
//["3919"],
//["3920"],
//["3921"],
//["3922"],
//["3924"],
//["3929"],
//["3930"],
//["3931"],
//["3932"],
//["3933"],
//["3934"],
//["3935"],
//["3936"],
//["3938"],
//["3939"],
//["3940"],
//["3941"],
//["3942"],
//["3943"],
//["3944"],
//["3945"],
//["3946"],
//["3947"],
//["3948"],
//["3950"],
//["3951"],
//["3952"],
//["3953"],
//["3954"],
//["3955"],
//["3957"],
//["3958"],
//["3959"],
//["3960"],
//["3961"],
//["3964"],
//["3965"],
//["3968"],
//["3969"],
//["3970"],
//["3974"],
//["3975"],
//["3976"],
//["3977"],
//["3978"],
//["3979"],
//["3980"],
//["3982"],
//["3983"],
//["3985"],
//["3986"],
//["3987"],
//["3988"],
//["3989"],
//["3991"],
//["3999"],
//["4001"],
//["4003"],
//["4006"],
//["4007"],
//["4008"],
//["4009"],
//["4010"],
//["4011"],
//["4012"],
//["4013"],
//["4014"],
//["4020"],
//["4021"],
//["4024"],
//["4028"],
//["4029"],
//["4030"],
//["4031"],
//["4032"],
//["4033"],
//["4034"],
//["4036"],
//["4037"],
//["4038"],
//["4042"],
//["4043"],
//["4044"],
//["4045"],
//["4046"],
//["4048"],
//["4051"],
//["4053"],
//["4054"],
//["4062"],
//["4063"],
//["4064"],
//["4065"],
//["4066"],
//["4067"],
//["4068"],
//["4071"],
//["4072"],
//["4073"],
//["4074"],
//["4075"],
//["4076"],
//["4077"],
//["4078"],
//["4079"],
//["4080"],
//["4081"],
//["4082"],
//["4083"],
//["4084"],
//["4085"],
//["4086"],
//["4087"],
//["4088"],
//["4089"],
//["4090"],
//["4091"],
//["4092"],
//["4093"],
//["4094"],
//["4095"],
//["4096"],
//["4097"],
//["4098"],
//["4099"],
//["4100"],
//["4101"],
//["4102"],
//["4103"],
//["4104"],
//["4105"],
//["4106"],
//["4107"],
//["4108"],
//["4109"],
//["4110"],
//["4111"],
//["4112"],
//["4113"],
//["4114"],
//["4115"],
//["4116"],
//["4117"],
//["4118"],
//["4119"],
//["4120"],
//["4121"],
//["4122"],
//["4123"],
//["4124"],
//["4125"],
//["4126"],
//["4127"],
//["4128"],
//["4129"],
//["4130"],
//["4131"],
//["4132"],
//["4133"],
//["4134"],
//["4135"],
//["4137"],
//["4138"],
//["4139"],
//["4140"],
//["4141"],
//["4145"],
//["4146"],
//["4147"],
//["4148"],
//["4149"],
//["4150"],
//["4151"],
//["4152"],
//["4153"],
//["4154"],
//["4155"],
//["4156"],
//["4157"],
//["4160"],
//["4161"],
//["4162"],
//["4163"],
//["4164"],
//["4165"],
//["4166"],
//["4167"],
//["4168"],
//["4169"],
//["4170"],
//["4171"],
//["4172"],
//["4173"],
//["4174"],
//["4175"],
//["4176"],
//["4177"],
//["4178"],
//["4179"],
//["4180"],
//["4181"],
//["4182"],
//["4183"],
//["4184"],
//["4185"],
//["4186"],
//["4187"],
//["4188"],
//["4189"],
//["4190"],
//["4191"],
//["4192"],
//["4193"],
//["4194"],
//["4195"],
//["4196"],
//["4197"],
//["4198"],
//["4199"],
//["4202"],
//["4203"],
//["4204"],
//["4205"],
//["4206"],
//["4207"],
//["4208"],
//["4209"],
//["4213"],
//["4215"],
//["4216"],
//["4217"],
//["4218"],
//["4219"],
//["4221"],
//["4222"],
//["4223"],
//["4224"],
//["4227"],
//["4228"],
//["4229"],
//["4230"],
//["4231"],
//["4232"],
//["4233"],
//["4234"],
//["4235"],
//["4236"],
//["4237"],
//["4238"],
//["4239"],
//["4240"],
//["4241"],
//["4242"],
//["4243"],
//["4244"],
//["4245"],
//["4246"],
//["4247"],
//["4248"],
//["4249"],
//["4250"],
//["4251"],
//["4252"],
//["4253"],
//["4254"],
//["4255"],
//["4256"],
//["4257"],
//["4258"],
//["4259"],
//["4262"],
//["4263"],
//["4264"],
//["4265"],
//["4266"],
//["4267"],
//["4268"],
//["4269"],
//["4270"],
//["4271"],
//["4272"],
//["4273"],
//["4274"],
//["4276"],
//["4278"],
//["4279"],
//["4280"],
//["4281"],
//["4282"],
//["4283"],
//["4284"],
//["4285"],
//["4286"],
//["4287"],
//["4288"],
//["4289"],
//["4290"],
//["4291"],
//["4292"],
//["4293"],
//["4294"],
//["4295"],
//["4296"],
//["4297"],
//["4298"],
//["4299"],
//["4300"],
//["4301"],
//["4302"],
//["4303"],
//["4304"],
//["4305"],
//["4306"],
//["4307"],
//["4308"],
//["4309"],
//["4310"],
//["4311"],
//["4312"],
//["4313"],
//["4314"],
//["4315"],
//["4316"],
//["4317"],
//["4318"],
//["4319"],
//["4320"],
//["4321"],
//["4322"],
//["4323"],
//["4324"],
//["4325"],
//["4326"],
//["4327"],
//["4328"],
//["4329"],
//["4330"],
//["4331"],
//["4332"],
//["4333"],
//["4334"],
//["4335"],
//["4336"],
//["4337"],
//["4338"],
//["4339"],
//["4340"],
//["4341"],
//["4342"],
//["4343"],
//["4344"],
//["4345"],
//["4346"],
//["4347"],
//["4348"],
//["4349"],
//["4350"],
//["4351"],
//["4352"],
//["4353"],
//["4354"],
//["4355"],
//["4356"],
//["4357"],
//["4358"],
//["4359"],
//["4360"],
//["4361"],
//["4362"],
//["4363"],
//["4364"],
//["4365"],
//["4366"],
//["4367"],
//["4368"],
//["4369"],
//["4370"],
//["4371"],
//["4372"],
//["4373"],
//["4374"],
//["4375"],
//["4376"],
//["4377"],
//["4378"],
//["4379"],
//["4380"],
//["4381"],
//["4382"],
//["4383"],
//["4384"],
//["4385"],
//["4386"],
//["4387"],
//["4388"],
//["4389"],
//["4390"],
//["4391"],
//["4392"],
//["4393"],
//["4394"],
//["4395"],
//["4396"],
//["4397"],
//["4398"],
//["4399"],
//["4400"],
//["4401"],
//["4402"],
//["4403"],
//["4404"],
//["4405"],
//["4406"],
//["4407"],
//["4408"],
//["4409"],
//["4410"],
//["4411"],
//["4412"],
//["4413"],
//["4414"],
//["4415"],
//["4416"],
//["4417"],
//["4418"],
//["4419"],
//["4420"],
//["4421"],
//["4422"],
//["4423"],
//["4424"],
//["4425"],
//["4427"],
//["4429"],
//["4430"],
//["4431"],
//["4434"],
//["4435"],
//["4436"],
//["4437"],
//["4438"],
//["4439"],
//["4440"],
//["4441"],
//["4442"],
//["4443"],
//["4444"],
//["4445"],
//["4446"],
//["4447"],
//["4448"],
//["4449"],
//["4450"],
//["4451"],
//["4452"],
//["4453"],
//["4454"],
//["4455"],
//["4458"],
//["4459"],
//["4460"],
//["4461"],
//["4463"],
//["4464"],
//["4465"],
//["4466"],
//["4467"],
//["4468"],
//["4469"],
//["4470"],
//["4471"],
//["4472"],
//["4473"],
//["4474"],
//["4475"],
//["4476"],
//["4477"],
//["4478"],
//["4479"],
//["4480"],
//["4481"],
//["4482"],
//["4483"],
//["4484"],
//["4485"],
//["4486"],
//["4488"],
//["4489"],
//["4490"],
//["4491"],
//["4492"],
//["4493"],
//["4494"],
//["4495"],
//["4496"],
//["4497"],
//["4498"],
//["4499"],
//["4500"],
//["4501"],
//["4502"],
//["4503"],
//["4504"],
//["4505"],
//["4506"],
//["4508"],
//["4509"],
//["4510"],
//["4511"],
//["4512"],
//["4513"],
//["4514"],
//["4515"],
//["4516"],
//["4517"],
//["4518"],
//["4519"],
//["4520"],
//["4521"],
//["4522"],
//["4523"],
//["4525"],
//["4526"],
//["4527"],
//["4528"],
//["4529"] = "SECURITY_HOTSPOT",
//["4530"],
//["4531"],
//["4532"],
//["4533"],
//["4534"],
//["4535"],
//["4536"],
//["4537"],
//["4538"],
//["4539"],
//["4540"],
//["4541"],
//["4542"],
//["4543"],
//["4544"],
//["4545"],
//["4546"],
//["4547"],
//["4548"],
//["4549"],
//["4550"],
//["4551"],
//["4552"],
//["4553"],
//["4554"],
//["4555"],
//["4556"],
//["4557"],
//["4558"],
//["4559"],
//["4560"],
//["4561"],
//["4562"],
//["4563"],
//["4565"],
//["4566"],
//["4567"],
//["4568"],
//["4569"],
//["4570"],
//["4571"],
//["4572"],
//["4573"],
//["4574"],
//["4575"],
//["4576"],
//["4577"],
//["4578"],
//["4579"],
//["4580"],
//["4582"],
//["4584"],
//["4585"],
//["4587"],
//["4588"],
//["4589"],
//["4590"],
//["4591"],
//["4592"],
//["4593"],
//["4594"],
//["4595"],
//["4596"],
//["4597"],
//["4598"],
//["4599"],
//["4600"],
//["4601"],
//["4602"],
//["4603"],
//["4604"],
//["4605"],
//["4606"],
//["4607"],
//["4608"],
//["4609"],
//["4610"],
//["4611"],
//["4612"],
//["4613"],
//["4614"],
//["4615"],
//["4616"],
//["4617"],
//["4618"],
//["4619"],
//["4620"],
//["4621"],
//["4622"],
//["4623"],
//["4624"],
//["4625"],
//["4626"],
//["4627"],
//["4628"],
//["4629"],
//["4630"],
//["4631"],
//["4632"],
//["4633"],
//["4634"],
//["4636"],
//["4637"],
//["4638"],
//["4639"],
//["4640"],
//["4641"],
//["4642"],
//["4643"],
//["4644"],
//["4645"],
//["4646"],
//["4647"],
//["4648"],
//["4649"],
//["4650"],
//["4651"],
//["4652"],
//["4653"],
//["4654"],
//["4655"],
//["4656"],
//["4657"],
//["4658"],
//["4659"],
//["4660"],
//["4661"],
//["4662"],
//["4663"],
//["4664"],
//["4665"],
//["4666"],
//["4667"],
//["4668"],
//["4669"],
//["4670"],
//["4671"],
//["4672"],
//["4673"],
//["4674"],
//["4675"],
//["4676"],
//["4677"],
//["4678"],
//["4679"],
//["4680"],
//["4681"],
//["4682"],
//["4683"],
//["4684"],
//["4685"],
//["4686"],
//["4687"],
//["4688"],
//["4689"],
//["4690"],
//["4691"],
//["4692"],
//["4693"],
//["4694"],
//["4695"],
//["4696"],
//["4697"],
//["4698"],
//["4699"],
//["4700"],
//["4701"],
//["4702"],
//["4703"],
//["4704"],
//["4705"],
//["4706"],
//["4707"],
//["4708"],
//["4709"],
//["4710"],
//["4711"],
//["4712"],
//["4713"],
//["4714"],
//["4715"],
//["4716"],
//["4717"],
//["4718"],
//["4719"],
//["4720"],
//["4721"] = "SECURITY_HOTSPOT",
//["4722"],
//["4723"],
//["4724"],
//["4725"],
//["4726"],
//["4727"],
//["4728"],
//["4729"],
//["4730"],
//["4731"],
//["4732"],
//["4733"],
//["4734"],
//["4735"],
//["4736"],
//["4737"],
//["4738"],
//["4739"],
//["4740"],
//["4741"],
//["4742"],
//["4743"],
//["4744"],
//["4745"],
//["4746"],
//["4747"],
//["4748"],
//["4749"],
//["4750"],
//["4751"],
//["4752"],
//["4753"],
//["4754"],
//["4755"],
//["4756"],
//["4757"],
//["4758"],
//["4759"],
//["4760"],
//["4761"],
//["4762"],
//["4763"],
//["4764"],
//["4765"],
//["4766"],
//["4767"],
//["4768"],
//["4769"],
//["4770"],
//["4771"],
//["4772"],
//["4773"],
//["4774"],
//["4775"],
//["4776"],
//["4777"],
//["4778"],
//["4779"],
//["4780"],
//["4781"],
//["4782"],
//["4783"],
//["4785"],
//["4786"],
//["4788"],
//["4789"],
//["4791"],
//["4793"],
//["4794"],
//["4795"],
//["4796"],
//["4797"] = "SECURITY_HOTSPOT",
//["4798"],
//["4799"],
//["4800"],
//["4801"],
//["4802"],
//["4803"],
//["4804"],
//["4805"],
//["4806"],
//["4807"],
//["4808"],
//["4809"],
//["4810"],
//["4811"],
//["4812"],
//["4813"],
//["4814"],
//["4815"],
//["4816"],
//["4817"] = "SECURITY_HOTSPOT",
//["4819"],
//["4820"],
//["4821"],
//["4822"],
//["4824"],
//["4825"] = "SECURITY_HOTSPOT",
//["4826"],
//["4827"],
//["4828"],
//["4831"],
//["4832"],
//["4833"],
//["4835"],
//["4836"],
//["4837"],
//["4838"],
//["4839"],
//["4840"],
//["4841"],
//["4842"],
//["4843"],
//["4844"],
//["4845"],
//["4846"],
//["4847"],
//["4848"],
//["4849"],
//["4850"],
//["4851"],
//["4852"],
//["4853"],
//["4854"],
//["4855"],
//["4856"],
//["4857"],
//["4858"],
//["4859"],
//["4860"],
//["4861"],
//["4862"],
//["4863"],
//["4864"],
//["4865"],
//["4866"],
//["4867"],
//["4868"],
//["4869"],
//["4870"],
//["4871"],
//["4872"],
//["4873"],
//["4874"],
//["4875"],
//["4876"],
//["4877"],
//["4878"],
//["4879"],
//["4880"],
//["4881"],
//["4882"],
//["4883"],
//["4884"],
//["4885"],
//["4886"],
//["4887"],
//["4888"],
//["4889"],
//["4890"],
//["4891"],
//["4892"],
//["4893"],
//["4894"],
//["4895"],
//["4896"],
//["4897"],
//["4898"],
//["4899"],
//["4900"],
//["4901"],
//["4902"],
//["4903"],
//["4904"],
//["4905"],
//["4906"],
//["4907"],
//["4908"],
//["4909"],
//["4910"],
//["4911"],
//["4912"],
//["4913"],
//["4914"],
//["4915"],
//["4916"],
//["4917"],
//["4918"],
//["4919"],
//["4920"],
//["4921"],
//["4922"],
//["4923"],
//["4924"],
//["4925"],
//["4926"],
//["4927"],
//["4928"],
//["4929"],
//["4930"],
//["4931"],
//["4932"],
//["4933"],
//["4934"],
//["4935"],
//["4936"],
//["4937"],
//["4938"],
//["4939"],
//["4940"],
//["4941"],
//["4942"],
//["4943"],
//["4944"],
//["4945"],
//["4946"],
//["4947"],
//["4948"],
//["4949"],
//["4950"],
//["4951"],
//["4952"],
//["4953"],
//["4954"],
//["4955"],
//["4956"],
//["4957"],
//["4958"],
//["4959"],
//["4960"],
//["4961"],
//["4962"],
//["4963"],
//["4964"],
//["4965"],
//["4966"],
//["4967"],
//["4968"],
//["4969"],
//["4970"],
//["4971"],
//["4972"],
//["4973"],
//["4974"],
//["4975"],
//["4976"],
//["4977"],
//["4978"],
//["4979"],
//["4980"],
//["4981"],
//["4982"],
//["4983"],
//["4984"],
//["4985"],
//["4986"],
//["4987"],
//["4988"],
//["4989"],
//["4990"],
//["4991"],
//["4992"],
//["4993"],
//["4994"],
//["4995"],
//["4996"],
//["4997"],
//["4998"],
//["4999"],
//["5000"],
//["5001"],
//["5002"],
//["5003"],
//["5004"],
//["5005"],
//["5006"],
//["5007"],
//["5008"],
//["5009"],
//["5010"],
//["5011"],
//["5012"],
//["5013"],
//["5014"],
//["5015"],
//["5016"],
//["5017"],
//["5018"],
//["5019"],
//["5020"],
//["5021"],
//["5022"],
//["5023"],
//["5024"],
//["5025"],
//["5026"],
//["5027"],
//["5028"],
//["5029"],
//["5030"],
//["5031"],
//["5032"],
//["5033"],
//["5035"],
//["5036"],
//["5037"],
//["5038"],
//["5039"],
//["5040"],
//["5041"],
//["5043"],
//["5044"],
//["5045"],
//["5046"],
//["5047"],
//["5048"],
//["5049"],
//["5050"],
//["5051"],
//["5052"],
//["5053"],
//["5054"],
//["5055"],
//["5056"],
//["5057"],
//["5058"],
//["5059"],
//["5060"],
//["5061"],
//["5062"],
//["5063"],
//["5064"],
//["5065"],
//["5066"],
//["5067"],
//["5068"],
//["5069"],
//["5070"],
//["5071"],
//["5072"],
//["5073"],
//["5074"],
//["5075"],
//["5076"],
//["5077"],
//["5078"],
//["5079"],
//["5080"],
//["5081"],
//["5082"],
//["5083"],
//["5084"],
//["5085"],
//["5086"],
//["5087"],
//["5088"],
//["5089"],
//["5090"],
//["5091"],
//["5092"],
//["5093"],
//["5094"],
//["5095"],
//["5096"],
//["5097"],
//["5098"],
//["5099"],
//["5100"],
//["5101"],
//["5102"],
//["5103"],
//["5104"],
//["5105"],
//["5106"],
//["5107"],
//["5108"],
//["5109"],
//["5110"],
//["5111"],
//["5112"],
//["5113"],
//["5114"],
//["5115"],
//["5116"],
//["5117"],
//["5118"],
//["5119"],
//["5120"],
//["5121"],
//["5122"],
//["5123"],
//["5124"],
//["5125"],
//["5126"],
//["5127"],
//["5128"],
//["5129"],
//["5130"],
//["5131"],
//["5132"],
//["5133"],
//["5134"],
//["5135"],
//["5136"],
//["5137"],
//["5138"],
//["5139"],
//["5140"],
//["5141"],
//["5142"],
//["5143"],
//["5144"],
//["5145"],
//["5146"],
//["5147"],
//["5148"],
//["5149"],
//["5150"],
//["5151"],
//["5152"],
//["5153"],
//["5154"],
//["5155"],
//["5156"],
//["5157"],
//["5158"],
//["5159"],
//["5160"],
//["5161"],
//["5162"],
//["5163"],
//["5164"],
//["5165"],
//["5166"],
//["5167"],
//["5168"],
//["5169"],
//["5170"],
//["5171"],
//["5172"],
//["5173"],
//["5174"],
//["5175"],
//["5176"],
//["5177"],
//["5178"],
//["5179"],
//["5180"],
//["5181"],
//["5182"],
//["5183"],
//["5184"],
//["5185"],
//["5186"],
//["5187"],
//["5188"],
//["5189"],
//["5190"],
//["5191"],
//["5192"],
//["5193"],
//["5194"],
//["5195"],
//["5196"],
//["5197"],
//["5198"],
//["5199"],
//["5200"],
//["5201"],
//["5202"],
//["5203"],
//["5204"],
//["5205"],
//["5206"],
//["5207"],
//["5208"],
//["5209"],
//["5210"],
//["5211"],
//["5212"],
//["5213"],
//["5214"],
//["5215"],
//["5216"],
//["5217"],
//["5218"],
//["5219"],
//["5220"],
//["5221"],
//["5222"],
//["5223"],
//["5224"],
//["5225"],
//["5226"],
//["5227"],
//["5228"],
//["5229"],
//["5230"],
//["5231"],
//["5232"],
//["5233"],
//["5234"],
//["5235"],
//["5236"],
//["5237"],
//["5238"],
//["5239"],
//["5240"],
//["5241"],
//["5242"],
//["5243"],
//["5244"],
//["5245"],
//["5246"],
//["5247"],
//["5248"],
//["5249"],
//["5250"],
//["5251"],
//["5252"],
//["5253"],
//["5254"],
//["5255"],
//["5256"],
//["5257"],
//["5258"],
//["5259"],
//["5260"],
//["5261"],
//["5262"],
//["5263"],
//["5264"],
//["5265"],
//["5266"],
//["5267"],
//["5268"],
//["5269"],
//["5270"],
//["5271"],
//["5272"],
//["5273"],
//["5274"],
//["5275"],
//["5276"],
//["5277"],
//["5278"],
//["5279"],
//["5280"],
//["5281"],
//["5282"],
//["5283"],
//["5284"],
//["5285"],
//["5286"],
//["5287"],
//["5288"],
//["5289"],
//["5290"],
//["5291"],
//["5292"],
//["5293"],
//["5294"],
//["5295"],
//["5296"],
//["5297"],
//["5298"],
//["5299"],
//["5300"],
//["5301"],
//["5302"],
//["5303"],
//["5304"],
//["5305"],
//["5306"],
//["5307"],
//["5308"],
//["5309"],
//["5310"],
//["5311"],
//["5312"],
//["5313"],
//["5314"],
//["5315"],
//["5316"],
//["5317"],
//["5318"],
//["5319"],
//["5320"],
//["5321"],
//["5322"],
//["5323"],
//["5324"],
//["5325"],
//["5326"],
//["5327"],
//["5328"],
//["5329"],
//["5330"],
//["5331"],
//["5332"],
//["5333"],
//["5334"],
//["5335"],
//["5336"],
//["5337"],
//["5338"],
//["5339"],
//["5340"],
//["5341"],
//["5342"],
//["5343"],
//["5344"],
//["5345"],
//["5346"],
//["5347"],
//["5348"],
//["5349"],
//["5350"],
//["5351"],
//["5352"],
//["5353"],
//["5354"],
//["5355"],
//["5356"],
//["5357"],
//["5358"],
//["5359"],
//["5360"],
//["5361"],
//["5362"],
//["5363"],
//["5364"],
//["5365"],
//["5366"],
//["5367"],
//["5368"],
//["5369"],
//["5370"],
//["5371"],
//["5372"],
//["5373"],
//["5374"],
//["5375"],
//["5376"],
//["5377"],
//["5378"],
//["5379"],
//["5380"],
//["5381"],
//["5382"],
//["5383"],
//["5384"],
//["5385"],
//["5386"],
//["5387"],
//["5388"],
//["5389"],
//["5390"],
//["5391"],
//["5392"],
//["5393"],
//["5394"],
//["5395"],
//["5396"],
//["5397"],
//["5398"],
//["5399"],
//["5400"],
//["5401"],
//["5402"],
//["5403"],
//["5404"],
//["5405"],
//["5406"],
//["5407"],
//["5408"],
//["5409"],
//["5410"],
//["5411"],
//["5412"],
//["5413"],
//["5414"],
//["5415"],
//["5416"],
//["5417"],
//["5418"],
//["5419"],
//["5420"],
//["5421"],
//["5422"],
//["5423"],
//["5424"],
//["5425"],
//["5426"],
//["5427"],
//["5428"],
//["5429"],
//["5430"],
//["5431"],
//["5432"],
//["5433"],
//["5434"],
//["5435"],
//["5436"],
//["5437"],
//["5438"],
//["5439"],
//["5440"],
//["5441"],
//["5442"],
//["5443"],
//["5444"],
//["5445"],
//["5446"],
//["5447"],
//["5448"],
//["5449"],
//["5450"],
//["5451"],
//["5452"],
//["5453"],
//["5454"],
//["5455"],
//["5456"],
//["5457"],
//["5458"],
//["5459"],
//["5460"],
//["5461"],
//["5462"],
//["5463"],
//["5464"],
//["5465"],
//["5466"],
//["5467"],
//["5468"],
//["5469"],
//["5470"],
//["5471"],
//["5472"],
//["5473"],
//["5474"],
//["5475"],
//["5476"],
//["5477"],
//["5478"],
//["5479"],
//["5480"],
//["5481"],
//["5482"],
//["5483"],
//["5484"],
//["5485"],
//["5486"],
//["5487"],
//["5488"],
//["5489"],
//["5490"],
//["5491"],
//["5492"],
//["5493"],
//["5494"],
//["5495"],
//["5496"],
//["5497"],
//["5498"],
//["5499"],
//["5500"],
//["5501"],
//["5502"],
//["5503"],
//["5504"],
//["5505"],
//["5506"],
//["5507"],
//["5508"],
//["5509"],
//["5510"],
//["5511"],
//["5512"],
//["5513"],
//["5514"],
//["5515"],
//["5516"],
//["5517"],
//["5518"],
//["5519"],
//["5520"],
//["5521"],
//["5522"],
//["5523"],
//["5524"],
//["5525"],
//["5526"],
//["5527"],
//["5528"],
//["5529"],
//["5530"],
//["5531"],
//["5532"],
//["5533"],
//["5534"],
//["5535"],
//["5536"],
//["5537"],
//["5538"],
//["5539"],
//["5540"],
//["5541"],
//["5543"],
//["5544"],
//["5545"],
//["5546"],
//["5548"],
//["5549"],
//["5550"],
//["5551"],
//["5552"],
//["5553"],
//["5554"],
//["5555"],
//["5556"],
//["5557"],
//["5558"],
//["5559"],
//["5560"],
//["5561"],
//["5562"],
//["5563"],
//["5564"],
//["5565"],
//["5566"],
//["5567"],
//["5568"],
//["5569"],
//["5570"],
//["5571"],
//["5572"],
//["5573"],
//["5574"],
//["5575"],
//["5576"],
//["5577"],
//["5578"],
//["5579"],
//["5580"],
//["5581"],
//["5582"],
//["5583"],
//["5584"],
//["5585"],
//["5586"],
//["5587"],
//["5588"],
//["5589"],
//["5590"],
//["5591"],
//["5592"],
//["5593"],
//["5594"],
//["5595"],
//["5596"],
//["5597"],
//["5598"],
//["5599"],
//["5600"],
//["5601"],
//["5602"],
//["5603"],
//["5604"],
//["5605"],
//["5606"],
//["5607"],
//["5608"],
//["5609"],
//["5610"],
//["5611"],
//["5612"],
//["5613"],
//["5614"],
//["5615"],
//["5616"],
//["5617"],
//["5618"],
//["5619"],
//["5620"],
//["5621"],
//["5622"],
//["5623"],
//["5624"],
//["5625"],
//["5626"],
//["5627"],
//["5628"],
//["5629"],
//["5630"],
//["5631"],
//["5632"],
//["5633"],
//["5634"],
//["5635"],
//["5636"],
//["5637"],
//["5638"],
//["5639"],
//["5640"],
//["5641"],
//["5642"],
//["5643"],
//["5644"],
//["5645"],
//["5646"],
//["5647"],
//["5648"],
//["5649"],
//["5650"],
//["5651"],
//["5652"],
//["5653"],
//["5654"],
//["5655"],
//["5656"],
//["5657"],
//["5658"],
//["5659"],
//["5660"],
//["5661"],
//["5662"],
//["5663"],
//["5664"],
//["5665"],
//["5666"],
//["5667"],
//["5668"],
//["5669"],
//["5670"],
//["5671"],
//["5672"],
//["5673"],
//["5674"],
//["5675"],
//["5676"],
//["5677"],
//["5678"],
//["5679"],
//["5680"],
//["5681"],
//["5682"],
//["5683"],
//["5684"],
//["5685"],
//["5686"],
//["5687"],
//["5688"],
//["5689"],
//["5690"],
//["5691"],
//["5692"],
//["5693"],
//["5694"],
//["5695"],
//["5696"],
//["5697"],
//["5698"],
//["5699"],
//["5700"],
//["5701"],
//["5702"],
//["5703"],
//["5704"],
//["5705"],
//["5706"],
//["5707"],
//["5708"],
//["5709"],
//["5710"],
//["5711"],
//["5712"],
//["5713"],
//["5714"],
//["5715"],
//["5716"],
//["5717"],
//["5718"],
//["5719"],
//["5720"],
//["5721"],
//["5722"],
//["5723"],
//["5724"],
//["5725"],
//["5726"],
//["5727"],
//["5728"],
//["5729"],
//["5730"],
//["5731"],
//["5732"],
//["5733"],
//["5734"],
//["5735"],
//["5736"],
//["5737"],
//["5738"],
//["5739"],
//["5740"],
//["5741"],
//["5742"],
//["5743"],
//["5744"],
//["5745"],
//["5746"],
//["5747"],
//["5748"],
//["5749"],
//["5750"],
//["5751"],
//["5752"],
//["5753"],
//["5754"],
//["5755"],
//["5756"],
//["5757"],
//["5758"],
//["5759"],
//["5760"],
//["5761"],
//["5762"],
//["5763"],
//["5764"],
//["5765"],
//["5766"],
//["5767"],
//["5768"],
//["5769"],
//["5770"],
//["5771"],
//["5772"],
//["5773"],
//["5774"],
//["5775"],
//["5776"],
//["5777"],
//["5778"],
//["5779"],
//["5780"],
//["5781"],
//["5782"],
//["5783"],
//["5784"],
//["5785"],
//["5786"],
//["5787"],
//["5788"],
//["5789"],
//["5790"],
//["5791"],
//["5792"],
//["5793"],
//["5794"],
//["5795"],
//["5796"],
//["5797"],
//["5798"],
//["5799"],
//["5800"],
//["5801"],
//["5802"],
//["5803"],
//["5804"],
//["5805"],
//["5806"],
//["5807"],
//["5808"],
//["5809"],
//["5810"],
//["5811"],
//["5812"],
//["5813"],
//["5814"],
//["5815"],
//["5816"],
//["5817"],
//["5818"],
//["5819"],
//["5820"],
//["5821"],
//["5822"],
//["5823"],
//["5824"],
//["5825"],
//["5826"],
//["5827"],
//["5828"],
//["5829"],
//["5830"],
//["5831"],
//["5832"],
//["5833"],
//["5834"],
//["5835"],
//["5836"],
//["5837"],
//["5838"],
//["5839"],
//["5840"],
//["5841"],
//["5842"],
//["5843"],
//["5844"],
//["5845"],
//["5846"],
//["5847"],
//["5848"],
//["5849"],
//["5850"],
//["5851"],
//["5852"],
//["5853"],
//["5854"],
//["5855"],
//["5856"],
//["5857"],
//["5858"],
//["5859"],
//["5860"],
//["5861"],
//["5862"],
//["5863"],
//["5864"],
//["5865"],
//["5866"],
//["5867"],
//["5868"],
//["5869"],
//["5870"],
//["5871"],
//["5872"],
//["5873"],
//["5874"],
//["5875"],
//["5876"],
//["5877"],
//["5878"],
//["5879"],
//["5880"],
//["5881"],
//["5882"],
//["5883"],
//["5884"],
//["5885"],
//["5886"],
//["5887"],
//["5888"],
//["5889"],
//["5890"],
//["5891"],
//["5892"],
//["5893"],
//["5894"],
//["5895"],
//["5896"],
//["5897"],
//["5898"],
//["5899"],
//["5900"],
//["5901"],
//["5902"],
//["5903"],
//["5904"],
//["5905"],
//["5906"],
//["5907"],
//["5908"],
//["5909"],
//["5910"],
//["5911"],
//["5912"],
//["5913"],
//["5914"],
//["5915"],
//["5916"],
//["5917"],
//["5918"],
//["5919"],
//["5920"],
//["5921"],
//["5922"],
//["5923"],
//["5924"],
//["5925"],
//["5926"],
//["5927"],
//["5928"],
//["5929"],
//["5930"],
//["5931"],
//["5932"],
//["5933"],
//["5934"],
//["5935"],
//["5936"],
//["5937"],
//["5938"],
//["5939"],
//["5940"],
//["5941"],
//["5942"],
//["5943"],
//["5944"],
//["5945"],
//["5946"],
//["5947"],
//["5948"],
//["5949"],
//["5950"],
//["5951"],
//["5952"],
//["5953"],
//["5954"],
//["5955"],
//["5956"],
//["5957"],
//["5958"],
//["5959"],
//["5960"],
//["5961"],
//["5962"],
//["5963"],
//["5964"],
//["5965"],
//["5966"],
//["5967"],
//["5968"],
//["5969"],
//["5970"],
//["5971"],
//["5972"],
//["5973"],
//["5974"],
//["5975"],
//["5976"],
//["5977"],
//["5978"],
//["5979"],
//["5980"],
//["5981"],
//["5982"],
//["5983"],
//["5984"],
//["5985"],
//["5986"],
//["5987"],
//["5988"],
//["5989"],
//["5990"],
//["5991"],
//["5992"],
//["5993"],
//["5994"],
//["5995"],
//["5996"],
//["5997"],
//["5998"],
//["5999"],
//["6000"],
//["6001"],
//["6002"],
//["6003"],
//["6004"],
//["6005"],
//["6006"],
//["6007"],
//["6008"],
//["6009"],
//["6010"],
//["6011"],
//["6012"],
//["6013"],
//["6014"],
//["6015"],
//["6016"],
//["6017"],
//["6018"],
//["6019"],
//["6020"],
//["6021"],
//["6022"],
//["6023"],
//["6024"],
//["6025"],
//["6026"],
//["6027"],
//["6028"],
//["6029"],
//["6030"],
//["6031"],
//["6032"],
//["6033"],
//["6034"],
//["6035"],
//["6036"],
//["6037"],
//["6038"],
//["6039"],
//["6040"],
//["6041"],
//["6042"],
//["6043"],
//["6044"],
//["6045"],
//["6046"],
//["6047"],
//["6048"],
//["6049"],
//["6050"],
//["6051"],
//["6052"],
//["6053"],
//["6054"],
//["6055"],
//["6056"],
//["6057"],
//["6058"],
//["6059"],
//["6060"],
//["6061"],
//["6062"],
//["6063"],
//["6064"],
//["6065"],
//["6066"],
//["6067"],
//["6068"],
//["6069"],
//["6070"],
//["6071"],
//["6072"],
//["6073"],
//["6074"],
//["6075"],
//["6076"],
//["6077"],
//["6078"],
//["6079"],
//["6080"],
//["6081"],
//["6082"],
//["6083"],
//["6084"],
//["6085"],
//["6086"],
//["6087"],
//["6088"],
//["6089"],
//["6090"],
//["6091"],
//["6092"],
//["6093"],
//["6094"],
//["6095"],
//["6096"],
//["6097"],
//["6098"],
//["6099"],
//["6100"],
//["6101"],
//["6102"],
//["6103"],
//["6104"],
//["6105"],
//["6106"],
//["6107"],
//["6108"],
//["6109"],
//["6110"],
//["6111"],
//["6112"],
//["6113"],
//["6114"],
//["6115"],
//["6116"],
//["6117"],
//["6118"],
//["6119"],
//["6120"],
//["6121"],
//["6122"],
//["6123"],
//["6124"],
//["6125"],
//["6126"],
//["6127"],
//["6128"],
//["6129"],
//["6130"],
//["6131"],
//["6132"],
//["6133"],
//["6134"],
//["6135"],
//["6136"],
//["6137"],
//["6138"],
//["6139"],
//["6140"],
//["6141"],
//["6142"],
//["6143"],
//["6144"],
//["6145"],
//["6146"],
//["6147"],
//["6148"],
//["6149"],
//["6150"],
//["6151"],
//["6152"],
//["6153"],
//["6154"],
//["6155"],
//["6156"],
//["6157"],
//["6158"],
//["6159"],
//["6160"],
//["6161"],
//["6162"],
//["6163"],
//["6164"],
//["6165"],
//["6166"],
//["6167"],
//["6168"],
//["6169"],
//["6170"],
//["6171"],
//["6172"],
//["6173"],
//["6174"],
//["6175"],
//["6176"],
//["6177"],
//["6178"],
//["6179"],
//["6180"],
//["6181"],
//["6182"],
//["6183"],
//["6184"],
//["6185"],
//["6186"],
//["6187"],
//["6188"],
//["6189"],
//["6190"],
//["6191"],
//["6192"],
//["6193"],
//["6194"],
//["6195"],
//["6196"],
//["6197"],
//["6198"],
//["6199"],
//["6200"],
//["6201"],
//["6202"],
//["6203"],
//["6204"],
//["6205"],
//["6206"],
//["6207"],
//["6208"],
//["6209"],
//["6210"],
//["6211"],
//["6212"],
//["6213"],
//["6214"],
//["6215"],
//["6216"],
//["6217"],
//["6218"],
//["6219"],
//["6220"],
//["6221"],
//["6222"],
//["6223"],
//["6224"],
//["6225"],
//["6226"],
//["6227"],
//["6228"],
//["6229"],
//["6230"],
//["6231"],
//["6232"],
//["6233"],
//["6234"],
//["6235"],
//["6236"],
//["6237"],
//["6238"],
//["6239"],
//["6240"],
//["6241"],
//["6242"],
//["6243"],
//["6244"],
//["6245"],
//["6246"],
//["6247"],
//["6248"],
//["6249"],
//["6250"],
//["6251"],
//["6252"],
//["6253"],
//["6254"],
//["6255"],
//["6256"],
//["6257"],
//["6258"],
//["6259"],
//["6260"],
//["6261"],
//["6262"],
//["6263"],
//["6264"],
//["6265"],
//["6266"],
//["6267"],
//["6268"],
//["6269"],
//["6270"],
//["6271"],
//["6272"],
//["6273"],
//["6274"],
//["6275"],
//["6276"],
//["6277"],
//["6278"],
//["6279"],
//["6280"],
//["6281"],
//["6282"],
//["6283"],
//["6284"],
//["6285"],
//["6286"],
//["6287"],
//["6288"],
//["6289"],
//["6290"],
//["6291"],
//["6292"],
//["6293"],
//["6294"],
//["6295"],
//["6296"],
//["6297"],
//["6298"],
//["6299"],
//["6300"],
//["6301"],
//["6302"],
//["6303"],
//["6304"],
//["6305"],
//["6306"],
//["6307"],
//["6308"],
//["6309"],
//["6310"],
//["6311"],
//["6312"],
//["6313"],
//["6314"],
//["6315"],
//["6316"],
//["6317"],
//["6318"],
//["6319"],
//["6320"],
//["6321"],
//["6322"],
//["6323"],
//["6324"],
//["6325"],
//["6326"],
//["6327"],
//["6328"],
//["6329"],
//["6330"],
//["6331"],
//["6332"],
//["6333"],
//["6334"],
//["6335"],
//["6336"],
//["6337"],
//["6338"],
//["6339"],
//["6340"],
//["6341"],
//["6342"],
//["6343"],
//["6344"],
//["6345"],
//["6346"],
//["6347"],
//["6348"],
//["6349"],
//["6350"],
//["6351"],
//["6352"],
//["6353"],
//["6354"],
//["6355"],
//["6356"],
//["6357"],
//["6358"],
//["6359"],
//["6360"],
//["6361"],
//["6362"],
//["6363"],
//["6364"],
//["6365"],
//["6366"],
//["6367"],
//["6368"],
//["6369"],
//["6370"],
//["6371"],
//["6372"],
//["6373"],
//["6374"],
//["6375"],
//["6376"],
//["6377"],
//["6378"],
//["6379"],
//["6380"],
//["6381"],
//["6382"],
//["6383"],
//["6384"],
//["6385"],
//["6386"],
//["6387"],
//["6388"],
//["6389"],
//["6390"],
//["6391"],
//["6392"],
//["6393"],
//["6394"],
//["6395"],
//["6396"],
//["6397"],
//["6398"],
//["6399"],
//["6400"],
//["6401"],
//["6402"],
//["6403"],
//["6404"],
//["6405"],
//["6406"],
//["6407"],
//["6408"],
//["6409"],
//["6410"],
//["6411"],
//["6412"],
//["6413"],
//["6414"],
//["6415"],
//["6416"],
//["6417"],
//["6418"],
//["6419"],
//["6420"],
//["6421"],
//["6422"],
//["6423"],
//["6424"],
//["6425"],
//["6426"],
//["6427"],
//["6428"],
//["6429"],
//["6430"],
//["6431"],
//["6432"],
//["6433"],
//["6434"],
//["6435"],
//["6436"],
//["6437"],
//["6438"],
//["6439"],
//["6440"],
//["6441"],
//["6442"],
//["6443"],
//["6444"],
//["6445"],
//["6446"],
//["6447"],
//["6448"],
//["6449"],
//["6450"],
//["6451"],
//["6452"],
//["6453"],
//["6454"],
//["6455"],
//["6456"],
//["6457"],
//["6458"],
//["6459"],
//["6460"],
//["6461"],
//["6462"],
//["6463"],
//["6464"],
//["6465"],
//["6466"],
//["6467"],
//["6468"],
//["6469"],
//["6470"],
//["6471"],
//["6472"],
//["6473"],
//["6474"],
//["6475"],
//["6476"],
//["6477"],
//["6478"],
//["6479"],
//["6480"],
//["6481"],
//["6482"],
//["6483"],
//["6484"],
//["6485"],
//["6486"],
//["6487"],
//["6488"],
//["6489"],
//["6490"],
//["6491"],
//["6492"],
//["6493"],
//["6494"],
//["6495"],
//["6496"],
//["6497"],
//["6498"],
//["6499"],
//["6500"],
//["6501"],
//["6502"],
//["6503"],
//["6504"],
//["6505"],
//["6506"],
//["6507"],
//["6508"],
//["6509"],
//["6510"],
//["6511"],
//["6512"],
//["6513"],
//["6514"],
//["6515"],
//["6516"],
//["6517"],
//["6518"],
//["6519"],
//["6520"],
//["6521"],
//["6522"],
//["6523"],
//["6524"],
//["6525"],
//["6526"],
//["6527"],
//["6528"],
//["6529"],
//["6530"],
//["6531"],
//["6532"],
//["6533"],
//["6534"],
//["6535"],
//["6536"],
//["6537"],
//["6538"],
//["6539"],
//["6540"],
//["6541"],
//["6542"],
//["6543"],
//["6544"],
//["6545"],
//["6546"],
//["6547"],
//["6548"],
//["6549"],
//["6550"],
//["6551"],
//["6552"],
//["6553"],
//["6554"],
//["6555"],
//["6556"],
//["6557"],
//["6558"],
//["6559"],
//["6560"],
//["6561"],
//["6562"],
//["6563"],
//["6564"],
//["6565"],
//["6566"],
//["6567"],
//["6568"],
//["6569"],
//["6570"],
//["6571"],
//["6572"],
//["6573"],
//["6574"],
//["6575"],
//["6576"],
//["6577"],
//["6578"],
//["6579"],
//["6580"],
//["6581"],
//["6582"],
//["6583"],
//["6584"],
//["6585"],
//["6586"],
//["6587"],
//["6588"],
//["6589"],
//["6590"],
//["6591"],
//["6592"],
//["6593"],
//["6594"],
//["6595"],
//["6596"],
//["6597"],
//["6598"],
//["6599"],
//["6600"],
//["6601"],
//["6602"],
//["6603"],
//["6604"],
//["6605"],
//["6606"],
//["6607"],
//["6608"],
//["6609"],
//["6610"],
//["6611"],
//["6612"],
//["6613"],
//["6614"],
//["6615"],
//["6616"],
//["6617"],
//["6618"],
//["6619"],
//["6620"],
//["6621"],
//["6622"],
//["6623"],
//["6624"],
//["6625"],
//["6626"],
//["6627"],
//["6628"],
//["6629"],
//["6630"],
//["6631"],
//["6632"],
//["6633"],
//["6634"],
//["6635"],
//["6636"],
//["6637"],
//["6638"],
//["6639"],
//["6640"],
//["6641"],
//["6642"],
//["6643"],
//["6644"],
//["6645"],
//["6646"],
//["6647"],
//["6648"],
//["6649"],
//["6650"],
//["6651"],
//["6652"],
//["6653"],
//["6654"],
//["6655"],
//["6656"],
//["6657"],
//["6658"],
//["6659"],
//["6660"],
//["6661"],
//["6662"],
//["6663"],
//["6664"],
//["6665"],
//["6666"],
//["6667"],
//["6668"],
//["6669"],
//["6670"],
//["6671"],
//["6672"],
//["6673"],
//["6674"],
//["6675"],
//["6676"],
//["6677"],
//["6678"],
//["6679"],
//["6680"],
//["6681"],
//["6682"],
//["6683"],
//["6684"],
//["6685"],
//["6686"],
//["6687"],
//["6688"],
//["6689"],
//["6690"],
//["6691"],
//["6692"],
//["6693"],
//["6694"],
//["6695"],
//["6696"],
//["6697"],
//["6698"],
//["6699"],
//["6700"],
//["6701"],
//["6702"],
//["6703"],
//["6704"],
//["6705"],
//["6706"],
//["6707"],
//["6708"],
//["6709"],
//["6710"],
//["6711"],
//["6712"],
//["6713"],
//["6714"],
//["6715"],
//["6716"],
//["6717"],
//["6718"],
//["6719"],
//["6720"],
//["6721"],
//["6722"],
//["6723"],
//["6724"],
//["6725"],
//["6726"],
//["6727"],
//["6728"],
//["6729"],
//["6730"],
//["6731"],
//["6732"],
//["6733"],
//["6734"],
//["6735"],
//["6736"],
//["6737"],
//["6738"],
//["6739"],
//["6740"],
//["6741"],
//["6742"],
//["6743"],
//["6744"],
//["6745"],
//["6746"],
//["6747"],
//["6748"],
//["6749"],
//["6750"],
//["6751"],
//["6752"],
//["6753"],
//["6754"],
//["6755"],
//["6756"],
//["6757"],
//["6758"],
//["6759"],
//["6760"],
//["6761"],
//["6762"],
//["6763"],
//["6764"],
//["6765"],
//["6766"],
//["6767"],
//["6768"],
//["6769"],
//["6770"],
//["6771"],
//["6772"],
//["6773"],
//["6774"],
//["6775"],
//["6776"],
//["6777"],
//["6778"],
//["6779"],
//["6780"],
//["6781"],
//["6782"],
//["6783"],
//["6784"],
//["6785"],
//["6786"],
//["6787"],
//["6788"],
//["6789"],
//["6790"],
//["6791"],
//["6792"],
//["6793"],
//["6794"],
//["6795"],
//["6796"],
//["6797"],
//["6798"],
//["6799"],
//["6800"],
//["6801"],
//["6802"],
//["6803"],
//["6804"],
//["6805"],
//["6806"],
//["6807"],
//["6808"],
//["6809"],
//["6810"],
//["6811"],
//["6812"],
//["6813"],
//["6814"],
//["6815"],
//["6816"],
//["6817"],
//["6818"],
//["6819"],
//["6820"],
//["6821"],
//["6822"],
//["6823"],
//["6824"],
//["6825"],
//["6826"],
//["6827"],
//["6828"],
//["6829"],
//["6830"],
//["6831"],
//["6832"],
//["6833"],
//["6834"],
//["6835"],
//["6836"],
//["6837"],
//["6838"],
//["6839"],
//["6840"],
//["6841"],
//["6842"],
//["6843"],
//["6844"],
//["6845"],
//["6846"],
//["6847"],
//["6848"],
//["6849"],
//["6850"],
//["6851"],
//["6852"],
//["6853"],
//["6854"],
//["6855"],
//["6856"],
//["6857"],
//["6858"],
//["6859"],
//["6860"],
//["6861"],
//["6862"],
//["6863"],
//["6864"],
//["6865"],
//["6866"],
//["6867"],
//["6868"],
//["6869"],
//["6870"],
//["6871"],
//["6872"],
//["6873"],
//["6874"],
//["6875"],
//["6876"],
//["6877"],
//["6878"],
//["6879"],
//["6880"],
//["6881"],
//["6882"],
//["6883"],
//["6884"],
//["6885"],
//["6886"],
//["6887"],
//["6888"],
//["6889"],
//["6890"],
//["6891"],
//["6892"],
//["6893"],
//["6894"],
//["6895"],
//["6896"],
//["6897"],
//["6898"],
//["6899"],
//["6900"],
//["6901"],
//["6902"],
//["6903"],
//["6904"],
//["6905"],
//["6906"],
//["6907"],
//["6908"],
//["6909"],
//["6910"],
//["6911"],
//["6912"],
//["6913"],
//["6914"],
//["6915"],
//["6916"],
//["6917"],
//["6918"],
//["6919"],
//["6920"],
//["6921"],
//["6922"],
//["6923"],
//["6924"],
//["6925"],
//["6926"],
//["6927"],
//["6928"],
//["6929"],
//["6930"],
//["6931"],
//["6932"],
//["6933"],
//["6934"],
//["6935"],
//["6936"],
//["6937"],
//["6938"],
//["6939"],
//["6940"],
//["6941"],
//["6942"],
//["6943"],
//["6944"],
//["6945"],
//["6946"],
//["6947"],
//["6948"],
//["6949"],
//["6950"],
//["6951"],
//["6952"],
//["6953"],
//["6954"],
//["6955"],
//["6956"],
//["6957"],
//["6958"],
//["6959"],
//["6960"],
//["6961"],
//["6962"],
//["6963"],
//["6964"],
//["6965"],
//["6966"],
//["6967"],
//["6968"],
//["6969"],
//["6970"],
//["6971"],
//["6972"],
//["6973"],
//["6974"],
//["6975"],
//["6976"],
//["6977"],
//["6978"],
//["6979"],
//["6980"],
//["6981"],
//["6982"],
//["6983"],
//["6984"],
//["6985"],
//["6986"],
//["6987"],
//["6988"],
//["6989"],
//["6990"],
//["6991"],
//["6992"],
//["6993"],
//["6994"],
//["6995"],
//["6996"],
//["6997"],
//["6998"],
//["6999"],
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\PackagingTests\RuleTypeTests.cs
/*
// IMPORTANT: If this test fails, you should add the types of the new rules
// in the dictionaries above. It is a manual task, sorry.
// IMPORTANT: Rules should not be deleted without careful consideration and prior
// deprecation. We need to notify the platform team as well.
// IMPORTANT: If this test fails, you should update the types of the changed rules
// in the dictionaries above. Also add a GitHub issue specifying the change of type
// and update peach and next.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\PackagingTests\VbRuleTypeMapping.cs
/*
// The empty lines below are so the rule number aligns nicely with the line number.
//["100"],
//["102"],
//["106"],
//["108"],
//["109"],
//["110"],
//["111"],
//["113"],
//["115"],
//["116"],
//["118"],
//["119"],
//["120"],
//["121"],
//["123"],
//["124"],
//["125"],
//["127"],
//["128"],
//["129"],
//["130"],
//["132"],
//["133"],
//["135"],
//["136"],
//["137"],
//["140"],
//["141"],
//["142"],
//["143"],
//["144"],
//["145"],
//["146"],
//["147"],
//["148"],
//["149"],
//["150"],
//["151"],
//["152"],
//["153"],
//["154"],
//["155"],
//["156"],
//["157"],
//["158"],
//["159"],
//["160"],
//["161"],
//["162"],
//["163"],
//["164"],
//["165"],
//["166"],
//["167"],
//["168"],
//["169"],
//["170"],
//["171"],
//["172"],
//["173"],
//["174"],
//["175"],
//["176"],
//["177"],
//["178"],
//["179"],
//["180"],
//["181"],
//["182"],
//["183"],
//["184"],
//["185"],
//["186"],
//["187"],
//["188"],
//["189"],
//["190"],
//["191"],
//["192"],
//["193"],
//["194"],
//["195"],
//["196"],
//["197"],
//["198"],
//["199"],
//["200"],
//["201"],
//["202"],
//["203"],
//["204"],
//["205"],
//["206"],
//["207"],
//["208"],
//["209"],
//["210"],
//["211"],
//["212"],
//["213"],
//["214"],
//["215"],
//["216"],
//["217"],
//["218"],
//["219"],
//["220"],
//["221"],
//["222"],
//["223"],
//["224"],
//["225"],
//["226"],
//["227"],
//["228"],
//["229"],
//["230"],
//["231"],
//["232"],
//["233"],
//["234"],
//["235"],
//["236"],
//["237"],
//["238"],
//["239"],
//["240"],
//["241"],
//["242"],
//["243"],
//["244"],
//["245"],
//["246"],
//["247"],
//["248"],
//["249"],
//["250"],
//["251"],
//["252"],
//["253"],
//["254"],
//["255"],
//["256"],
//["257"],
//["258"],
//["259"],
//["260"],
//["261"],
//["262"],
//["263"],
//["264"],
//["265"],
//["266"],
//["267"],
//["268"],
//["269"],
//["270"],
//["271"],
//["272"],
//["273"],
//["274"],
//["275"],
//["276"],
//["277"],
//["278"],
//["279"],
//["280"],
//["281"],
//["282"],
//["283"],
//["284"],
//["285"],
//["286"],
//["287"],
//["288"],
//["289"],
//["290"],
//["291"],
//["292"],
//["293"],
//["294"],
//["295"],
//["296"],
//["297"],
//["298"],
//["299"],
//["300"],
//["301"],
//["302"],
//["303"],
//["304"],
//["305"],
//["306"],
//["307"],
//["308"],
//["309"],
//["310"],
//["311"],
//["312"],
//["313"],
//["314"],
//["315"],
//["316"],
//["317"],
//["318"],
//["319"],
//["320"],
//["321"],
//["322"],
//["323"],
//["324"],
//["325"],
//["326"],
//["327"],
//["328"],
//["329"],
//["330"],
//["331"],
//["332"],
//["333"],
//["334"],
//["335"],
//["336"],
//["337"],
//["338"],
//["339"],
//["340"],
//["341"],
//["342"],
//["343"],
//["344"],
//["345"],
//["346"],
//["347"],
//["348"],
//["349"],
//["350"],
//["351"],
//["352"],
//["353"],
//["354"],
//["355"],
//["356"],
//["357"],
//["358"],
//["359"],
//["360"],
//["361"],
//["362"],
//["363"],
//["364"],
//["365"],
//["366"],
//["367"],
//["368"],
//["369"],
//["370"],
//["371"],
//["372"],
//["373"],
//["374"],
//["375"],
//["376"],
//["377"],
//["378"],
//["379"],
//["380"],
//["381"],
//["382"],
//["383"],
//["384"],
//["385"],
//["386"],
//["387"],
//["388"],
//["389"],
//["390"],
//["391"],
//["392"],
//["393"],
//["394"],
//["395"],
//["396"],
//["397"],
//["398"],
//["399"],
//["400"],
//["401"],
//["402"],
//["403"],
//["404"],
//["405"],
//["406"],
//["407"],
//["408"],
//["409"],
//["410"],
//["411"],
//["412"],
//["413"],
//["414"],
//["415"],
//["416"],
//["417"],
//["418"],
//["419"],
//["420"],
//["421"],
//["422"],
//["423"],
//["424"],
//["425"],
//["426"],
//["427"],
//["428"],
//["429"],
//["430"],
//["431"],
//["432"],
//["433"],
//["434"],
//["435"],
//["436"],
//["437"],
//["438"],
//["439"],
//["440"],
//["441"],
//["442"],
//["443"],
//["444"],
//["445"],
//["446"],
//["447"],
//["448"],
//["449"],
//["450"],
//["451"],
//["452"],
//["453"],
//["454"],
//["455"],
//["456"],
//["457"],
//["458"],
//["459"],
//["460"],
//["461"],
//["462"],
//["463"],
//["464"],
//["465"],
//["466"],
//["467"],
//["468"],
//["469"],
//["470"],
//["471"],
//["472"],
//["473"],
//["474"],
//["475"],
//["476"],
//["477"],
//["478"],
//["479"],
//["480"],
//["481"],
//["482"],
//["483"],
//["484"],
//["485"],
//["486"],
//["487"],
//["488"],
//["489"],
//["490"],
//["491"],
//["492"],
//["493"],
//["494"],
//["495"],
//["496"],
//["497"],
//["498"],
//["499"],
//["500"],
//["501"],
//["502"],
//["503"],
//["504"],
//["505"],
//["506"],
//["507"],
//["508"],
//["509"],
//["510"],
//["511"],
//["512"],
//["513"],
//["514"],
//["515"],
//["516"],
//["517"],
//["518"],
//["519"],
//["520"],
//["521"],
//["522"],
//["523"],
//["524"],
//["525"],
//["526"],
//["527"],
//["528"],
//["529"],
//["530"],
//["531"],
//["532"],
//["533"],
//["534"],
//["535"],
//["536"],
//["537"],
//["538"],
//["539"],
//["540"],
//["541"],
//["542"],
//["543"],
//["544"],
//["545"],
//["546"],
//["547"],
//["548"],
//["549"],
//["550"],
//["551"],
//["552"],
//["553"],
//["554"],
//["555"],
//["556"],
//["557"],
//["558"],
//["559"],
//["560"],
//["561"],
//["562"],
//["563"],
//["564"],
//["565"],
//["566"],
//["567"],
//["568"],
//["569"],
//["570"],
//["571"],
//["572"],
//["573"],
//["574"],
//["575"],
//["576"],
//["577"],
//["578"],
//["579"],
//["580"],
//["581"],
//["582"],
//["583"],
//["584"],
//["585"],
//["586"],
//["587"],
//["588"],
//["589"],
//["590"],
//["591"],
//["592"],
//["593"],
//["594"],
//["595"],
//["596"],
//["597"],
//["598"],
//["599"],
//["600"],
//["601"],
//["602"],
//["603"],
//["604"],
//["605"],
//["606"],
//["607"],
//["608"],
//["609"],
//["610"],
//["611"],
//["612"],
//["613"],
//["614"],
//["615"],
//["616"],
//["617"],
//["618"],
//["619"],
//["620"],
//["621"],
//["622"],
//["623"],
//["624"],
//["625"],
//["626"],
//["627"],
//["628"],
//["629"],
//["630"],
//["631"],
//["632"],
//["633"],
//["634"],
//["635"],
//["636"],
//["637"],
//["638"],
//["639"],
//["640"],
//["641"],
//["642"],
//["643"],
//["644"],
//["645"],
//["646"],
//["647"],
//["648"],
//["649"],
//["650"],
//["651"],
//["652"],
//["653"],
//["654"],
//["655"],
//["656"],
//["657"],
//["658"],
//["659"],
//["660"],
//["661"],
//["662"],
//["663"],
//["664"],
//["665"],
//["666"],
//["667"],
//["668"],
//["669"],
//["670"],
//["671"],
//["672"],
//["673"],
//["674"],
//["675"],
//["676"],
//["677"],
//["678"],
//["679"],
//["680"],
//["681"],
//["682"],
//["683"],
//["684"],
//["685"],
//["686"],
//["687"],
//["688"],
//["689"],
//["690"],
//["691"],
//["692"],
//["693"],
//["694"],
//["695"],
//["696"],
//["697"],
//["698"],
//["699"],
//["700"],
//["701"],
//["702"],
//["703"],
//["704"],
//["705"],
//["706"],
//["707"],
//["708"],
//["709"],
//["710"],
//["711"],
//["712"],
//["713"],
//["714"],
//["715"],
//["716"],
//["717"],
//["718"],
//["719"],
//["720"],
//["721"],
//["722"],
//["723"],
//["724"],
//["725"],
//["726"],
//["727"],
//["728"],
//["729"],
//["730"],
//["731"],
//["732"],
//["733"],
//["734"],
//["735"],
//["736"],
//["737"],
//["738"],
//["739"],
//["740"],
//["741"],
//["742"],
//["743"],
//["744"],
//["745"],
//["746"],
//["747"],
//["748"],
//["749"],
//["750"],
//["751"],
//["752"],
//["753"],
//["754"],
//["755"],
//["756"],
//["757"],
//["758"],
//["759"],
//["760"],
//["761"],
//["762"],
//["763"],
//["764"],
//["765"],
//["766"],
//["767"],
//["768"],
//["769"],
//["770"],
//["771"],
//["772"],
//["773"],
//["774"],
//["775"],
//["776"],
//["777"],
//["778"],
//["779"],
//["780"],
//["781"],
//["782"],
//["783"],
//["784"],
//["785"],
//["786"],
//["787"],
//["788"],
//["789"],
//["790"],
//["791"],
//["792"],
//["793"],
//["794"],
//["795"],
//["796"],
//["797"],
//["798"],
//["799"],
//["800"],
//["801"],
//["802"],
//["803"],
//["804"],
//["805"],
//["806"],
//["807"],
//["808"],
//["809"],
//["810"],
//["811"],
//["812"],
//["813"],
//["814"],
//["815"],
//["816"],
//["817"],
//["818"],
//["819"],
//["820"],
//["821"],
//["822"],
//["823"],
//["824"],
//["825"],
//["826"],
//["827"],
//["828"],
//["829"],
//["830"],
//["831"],
//["832"],
//["833"],
//["834"],
//["835"],
//["836"],
//["837"],
//["838"],
//["839"],
//["840"],
//["841"],
//["842"],
//["843"],
//["844"],
//["845"],
//["846"],
//["847"],
//["848"],
//["849"],
//["850"],
//["851"],
//["852"],
//["853"],
//["854"],
//["855"],
//["856"],
//["857"],
//["858"],
//["859"],
//["860"],
//["861"],
//["862"],
//["863"],
//["864"],
//["865"],
//["866"],
//["867"],
//["868"],
//["869"],
//["870"],
//["871"],
//["872"],
//["873"],
//["874"],
//["875"],
//["876"],
//["877"],
//["878"],
//["879"],
//["880"],
//["881"],
//["882"],
//["883"],
//["884"],
//["885"],
//["886"],
//["887"],
//["888"],
//["889"],
//["890"],
//["891"],
//["892"],
//["893"],
//["894"],
//["895"],
//["896"],
//["897"],
//["898"],
//["899"],
//["900"],
//["901"],
//["902"],
//["903"],
//["904"],
//["905"],
//["906"],
//["907"],
//["908"],
//["909"],
//["910"],
//["911"],
//["912"],
//["913"],
//["914"],
//["915"],
//["916"],
//["917"],
//["918"],
//["919"],
//["920"],
//["921"],
//["922"],
//["923"],
//["924"],
//["925"],
//["926"],
//["927"],
//["928"],
//["929"],
//["930"],
//["931"],
//["932"],
//["933"],
//["934"],
//["935"],
//["936"],
//["937"],
//["938"],
//["939"],
//["940"],
//["941"],
//["942"],
//["943"],
//["944"],
//["945"],
//["946"],
//["947"],
//["948"],
//["949"],
//["950"],
//["951"],
//["952"],
//["953"],
//["954"],
//["955"],
//["956"],
//["957"],
//["958"],
//["959"],
//["960"],
//["961"],
//["962"],
//["963"],
//["964"],
//["965"],
//["966"],
//["967"],
//["968"],
//["969"],
//["970"],
//["971"],
//["972"],
//["973"],
//["974"],
//["975"],
//["976"],
//["977"],
//["978"],
//["979"],
//["980"],
//["981"],
//["982"],
//["983"],
//["984"],
//["985"],
//["986"],
//["987"],
//["988"],
//["989"],
//["990"],
//["991"],
//["992"],
//["993"],
//["994"],
//["995"],
//["996"],
//["997"],
//["998"],
//["999"],
//["1000"],
//["1001"],
//["1002"],
//["1003"],
//["1004"],
//["1005"],
//["1006"],
//["1007"],
//["1008"],
//["1009"],
//["1010"],
//["1011"],
//["1012"],
//["1013"],
//["1014"],
//["1015"],
//["1016"],
//["1017"],
//["1018"],
//["1019"],
//["1020"],
//["1021"],
//["1022"],
//["1023"],
//["1024"],
//["1025"],
//["1026"],
//["1027"],
//["1028"],
//["1029"],
//["1030"],
//["1031"],
//["1032"],
//["1033"],
//["1034"],
//["1035"],
//["1036"],
//["1037"],
//["1038"],
//["1039"],
//["1040"],
//["1041"],
//["1042"],
//["1043"],
//["1044"],
//["1045"],
//["1046"],
//["1047"],
//["1049"],
//["1050"],
//["1051"],
//["1052"],
//["1053"],
//["1054"],
//["1055"],
//["1056"],
//["1057"],
//["1058"],
//["1059"],
//["1060"],
//["1061"],
//["1062"],
//["1063"],
//["1064"],
//["1065"],
//["1068"],
//["1069"],
//["1070"],
//["1071"],
//["1072"],
//["1073"],
//["1074"],
//["1076"],
//["1077"],
//["1078"],
//["1079"],
//["1080"],
//["1081"],
//["1082"],
//["1083"],
//["1084"],
//["1085"],
//["1086"],
//["1087"],
//["1088"],
//["1089"],
//["1090"],
//["1091"],
//["1092"],
//["1093"],
//["1094"],
//["1095"],
//["1096"],
//["1097"],
//["1098"],
//["1099"],
//["1100"],
//["1101"],
//["1102"],
//["1103"],
//["1104"],
//["1105"],
//["1106"],
//["1107"],
//["1108"],
//["1109"],
//["1111"],
//["1112"],
//["1113"],
//["1114"],
//["1115"],
//["1116"],
//["1117"],
//["1118"],
//["1119"],
//["1120"],
//["1121"],
//["1122"],
//["1123"],
//["1124"],
//["1126"],
//["1127"],
//["1128"],
//["1129"],
//["1130"],
//["1131"],
//["1132"],
//["1133"],
//["1136"],
//["1137"],
//["1138"],
//["1139"],
//["1140"],
//["1141"],
//["1142"],
//["1143"],
//["1144"],
//["1146"],
//["1148"],
//["1149"],
//["1150"],
//["1152"],
//["1153"],
//["1154"],
//["1155"],
//["1156"],
//["1157"],
//["1158"],
//["1159"],
//["1160"],
//["1161"],
//["1162"],
//["1163"],
//["1164"],
//["1165"],
//["1166"],
//["1167"],
//["1168"],
//["1169"],
//["1170"],
//["1171"],
//["1173"],
//["1174"],
//["1175"],
//["1176"],
//["1177"],
//["1178"],
//["1179"],
//["1180"],
//["1181"],
//["1182"],
//["1183"],
//["1184"],
//["1185"],
//["1187"],
//["1188"],
//["1189"],
//["1190"],
//["1191"],
//["1192"],
//["1193"],
//["1194"],
//["1195"],
//["1196"],
//["1198"],
//["1199"],
//["1200"],
//["1201"],
//["1202"],
//["1203"],
//["1204"],
//["1205"],
//["1206"],
//["1207"],
//["1208"],
//["1209"],
//["1210"],
//["1211"],
//["1212"],
//["1213"],
//["1214"],
//["1215"],
//["1216"],
//["1217"],
//["1218"],
//["1219"],
//["1220"],
//["1221"],
//["1222"],
//["1223"],
//["1224"],
//["1225"],
//["1227"],
//["1228"],
//["1229"],
//["1230"],
//["1231"],
//["1232"],
//["1233"],
//["1234"],
//["1235"],
//["1236"],
//["1237"],
//["1238"],
//["1239"],
//["1240"],
//["1241"],
//["1242"],
//["1243"],
//["1244"],
//["1245"],
//["1246"],
//["1247"],
//["1248"],
//["1249"],
//["1250"],
//["1251"],
//["1252"],
//["1253"],
//["1254"],
//["1255"],
//["1256"],
//["1257"],
//["1258"],
//["1259"],
//["1260"],
//["1261"],
//["1262"],
//["1263"],
//["1264"],
//["1265"],
//["1266"],
//["1267"],
//["1268"],
//["1269"],
//["1270"],
//["1271"],
//["1272"],
//["1273"],
//["1274"],
//["1275"],
//["1276"],
//["1277"],
//["1278"],
//["1279"],
//["1280"],
//["1281"],
//["1282"],
//["1283"],
//["1284"],
//["1285"],
//["1286"],
//["1287"],
//["1288"],
//["1289"],
//["1290"],
//["1291"],
//["1292"],
//["1293"],
//["1294"],
//["1295"],
//["1296"],
//["1297"],
//["1298"],
//["1299"],
//["1300"],
//["1302"],
//["1303"],
//["1304"],
//["1305"],
//["1306"],
//["1307"],
//["1308"],
//["1309"],
//["1310"],
//["1311"],
//["1312"],
//["1314"],
//["1315"],
//["1316"],
//["1317"],
//["1318"],
//["1319"],
//["1320"],
//["1321"],
//["1322"],
//["1323"],
//["1324"],
//["1325"],
//["1326"],
//["1327"],
//["1328"],
//["1329"],
//["1330"],
//["1331"],
//["1332"],
//["1333"],
//["1334"],
//["1335"],
//["1336"],
//["1337"],
//["1338"],
//["1339"],
//["1340"],
//["1341"],
//["1342"],
//["1343"],
//["1344"],
//["1345"],
//["1346"],
//["1347"],
//["1348"],
//["1349"],
//["1350"],
//["1351"],
//["1352"],
//["1353"],
//["1354"],
//["1355"],
//["1356"],
//["1357"],
//["1358"],
//["1359"],
//["1360"],
//["1361"],
//["1362"],
//["1363"],
//["1364"],
//["1365"],
//["1366"],
//["1367"],
//["1368"],
//["1369"],
//["1370"],
//["1371"],
//["1372"],
//["1373"],
//["1374"],
//["1375"],
//["1376"],
//["1377"],
//["1378"],
//["1379"],
//["1380"],
//["1381"],
//["1382"],
//["1383"],
//["1384"],
//["1385"],
//["1386"],
//["1387"],
//["1388"],
//["1389"],
//["1390"],
//["1391"],
//["1392"],
//["1393"],
//["1394"],
//["1395"],
//["1396"],
//["1397"],
//["1398"],
//["1399"],
//["1400"],
//["1401"],
//["1402"],
//["1403"],
//["1404"],
//["1405"],
//["1406"],
//["1407"],
//["1408"],
//["1409"],
//["1410"],
//["1411"],
//["1412"],
//["1413"],
//["1414"],
//["1415"],
//["1416"],
//["1417"],
//["1418"],
//["1419"],
//["1420"],
//["1421"],
//["1422"],
//["1423"],
//["1424"],
//["1425"],
//["1426"],
//["1427"],
//["1428"],
//["1429"],
//["1430"],
//["1431"],
//["1432"],
//["1433"],
//["1434"],
//["1435"],
//["1436"],
//["1437"],
//["1438"],
//["1439"],
//["1440"],
//["1441"],
//["1442"],
//["1443"],
//["1444"],
//["1445"],
//["1446"],
//["1447"],
//["1448"],
//["1449"],
//["1450"],
//["1452"],
//["1453"],
//["1454"],
//["1455"],
//["1456"],
//["1457"],
//["1458"],
//["1459"],
//["1460"],
//["1461"],
//["1462"],
//["1463"],
//["1464"],
//["1465"],
//["1466"],
//["1467"],
//["1468"],
//["1469"],
//["1470"],
//["1471"],
//["1472"],
//["1473"],
//["1474"],
//["1475"],
//["1476"],
//["1477"],
//["1478"],
//["1480"],
//["1482"],
//["1483"],
//["1484"],
//["1485"],
//["1486"],
//["1487"],
//["1488"],
//["1489"],
//["1490"],
//["1491"],
//["1492"],
//["1493"],
//["1494"],
//["1495"],
//["1496"],
//["1497"],
//["1498"],
//["1499"],
//["1500"],
//["1501"],
//["1502"],
//["1503"],
//["1504"],
//["1505"],
//["1506"],
//["1507"],
//["1508"],
//["1509"],
//["1510"],
//["1511"],
//["1512"],
//["1513"],
//["1514"],
//["1515"],
//["1516"],
//["1517"],
//["1518"],
//["1519"],
//["1520"],
//["1521"],
//["1522"],
//["1523"] = "SECURITY_HOTSPOT",
//["1524"],
//["1525"],
//["1526"],
//["1527"],
//["1528"],
//["1529"],
//["1530"],
//["1531"],
//["1532"],
//["1533"],
//["1534"],
//["1535"],
//["1536"],
//["1537"],
//["1538"],
//["1539"],
//["1540"],
//["1543"],
//["1544"],
//["1545"],
//["1546"],
//["1547"],
//["1548"],
//["1549"],
//["1550"],
//["1551"],
//["1552"],
//["1553"],
//["1554"],
//["1555"],
//["1556"],
//["1557"],
//["1558"],
//["1559"],
//["1560"],
//["1561"],
//["1562"],
//["1563"],
//["1564"],
//["1565"],
//["1566"],
//["1567"],
//["1568"],
//["1569"],
//["1570"],
//["1571"],
//["1572"],
//["1573"],
//["1574"],
//["1575"],
//["1576"],
//["1577"],
//["1578"],
//["1579"],
//["1580"],
//["1581"],
//["1582"],
//["1583"],
//["1584"],
//["1585"],
//["1586"],
//["1587"],
//["1588"],
//["1589"],
//["1590"],
//["1591"],
//["1592"],
//["1593"],
//["1594"],
//["1595"],
//["1596"],
//["1597"],
//["1598"],
//["1599"],
//["1600"],
//["1601"],
//["1602"],
//["1603"],
//["1604"],
//["1605"],
//["1606"],
//["1607"],
//["1608"],
//["1609"],
//["1610"],
//["1611"],
//["1612"],
//["1613"],
//["1614"],
//["1615"],
//["1616"],
//["1617"],
//["1618"],
//["1619"],
//["1620"],
//["1621"],
//["1622"],
//["1623"],
//["1624"],
//["1625"],
//["1626"],
//["1627"],
//["1628"],
//["1629"],
//["1630"],
//["1631"],
//["1632"],
//["1633"],
//["1634"],
//["1635"],
//["1636"],
//["1637"],
//["1638"],
//["1639"],
//["1640"],
//["1641"],
//["1642"],
//["1644"],
//["1646"],
//["1647"],
//["1648"],
//["1649"],
//["1650"],
//["1651"],
//["1652"],
//["1653"],
//["1655"],
//["1657"],
//["1658"],
//["1660"],
//["1661"],
//["1662"],
//["1663"],
//["1664"],
//["1665"],
//["1666"],
//["1667"],
//["1668"],
//["1669"],
//["1670"],
//["1671"],
//["1672"],
//["1673"],
//["1674"],
//["1675"],
//["1676"],
//["1677"],
//["1678"],
//["1679"],
//["1680"],
//["1681"],
//["1682"],
//["1683"],
//["1684"],
//["1685"],
//["1686"],
//["1687"],
//["1688"],
//["1689"],
//["1690"],
//["1691"],
//["1692"],
//["1693"],
//["1694"],
//["1695"],
//["1696"],
//["1697"],
//["1698"],
//["1699"],
//["1700"],
//["1701"],
//["1702"],
//["1703"],
//["1704"],
//["1705"],
//["1706"],
//["1707"],
//["1708"],
//["1709"],
//["1710"],
//["1711"],
//["1712"],
//["1713"],
//["1714"],
//["1715"],
//["1716"],
//["1717"],
//["1718"],
//["1719"],
//["1720"],
//["1721"],
//["1722"],
//["1723"],
//["1724"],
//["1725"],
//["1726"],
//["1727"],
//["1728"],
//["1729"],
//["1730"],
//["1731"],
//["1732"],
//["1733"],
//["1734"],
//["1735"],
//["1736"],
//["1737"],
//["1738"],
//["1739"],
//["1740"],
//["1741"],
//["1742"],
//["1743"],
//["1744"],
//["1745"],
//["1746"],
//["1747"],
//["1748"],
//["1749"],
//["1750"],
//["1752"],
//["1753"],
//["1754"],
//["1755"],
//["1756"],
//["1757"],
//["1758"],
//["1759"],
//["1760"],
//["1761"],
//["1762"],
//["1763"],
//["1765"],
//["1766"],
//["1767"],
//["1768"],
//["1769"],
//["1770"],
//["1771"],
//["1772"],
//["1773"],
//["1774"],
//["1775"],
//["1776"],
//["1777"],
//["1778"],
//["1779"],
//["1780"],
//["1781"],
//["1782"],
//["1783"],
//["1784"],
//["1785"],
//["1786"],
//["1787"],
//["1788"],
//["1789"],
//["1790"],
//["1791"],
//["1792"],
//["1793"],
//["1794"],
//["1795"],
//["1796"],
//["1797"],
//["1798"],
//["1799"],
//["1800"],
//["1801"],
//["1802"],
//["1803"],
//["1804"],
//["1805"],
//["1806"],
//["1807"],
//["1808"],
//["1809"],
//["1810"],
//["1811"],
//["1812"],
//["1813"],
//["1814"],
//["1815"],
//["1816"],
//["1817"],
//["1818"],
//["1819"],
//["1820"],
//["1822"],
//["1823"],
//["1824"],
//["1825"],
//["1826"],
//["1827"],
//["1828"],
//["1829"],
//["1830"],
//["1831"],
//["1832"],
//["1833"],
//["1834"],
//["1835"],
//["1836"],
//["1837"],
//["1838"],
//["1839"],
//["1840"],
//["1841"],
//["1842"],
//["1843"],
//["1844"],
//["1845"],
//["1846"],
//["1847"],
//["1848"],
//["1849"],
//["1850"],
//["1851"],
//["1852"],
//["1853"],
//["1854"],
//["1855"],
//["1856"],
//["1857"],
//["1858"],
//["1859"],
//["1860"],
//["1861"],
//["1863"],
//["1864"],
//["1865"],
//["1866"],
//["1867"],
//["1868"],
//["1869"],
//["1870"],
//["1872"],
//["1873"],
//["1874"],
//["1875"],
//["1876"],
//["1877"],
//["1878"],
//["1879"],
//["1880"],
//["1881"],
//["1882"],
//["1883"],
//["1884"],
//["1885"],
//["1886"],
//["1887"],
//["1888"],
//["1889"],
//["1890"],
//["1891"],
//["1892"],
//["1893"],
//["1894"],
//["1895"],
//["1896"],
//["1897"],
//["1898"],
//["1899"],
//["1900"],
//["1901"],
//["1902"],
//["1903"],
//["1904"],
//["1905"],
//["1906"],
//["1907"],
//["1908"],
//["1909"],
//["1910"],
//["1911"],
//["1912"],
//["1913"],
//["1914"],
//["1915"],
//["1916"],
//["1917"],
//["1918"],
//["1919"],
//["1920"],
//["1921"],
//["1922"],
//["1923"],
//["1924"],
//["1925"],
//["1926"],
//["1927"],
//["1928"],
//["1929"],
//["1930"],
//["1931"],
//["1932"],
//["1933"],
//["1934"],
//["1935"],
//["1936"],
//["1937"],
//["1938"],
//["1939"],
//["1941"],
//["1942"],
//["1943"],
//["1944"],
//["1945"],
//["1946"],
//["1947"],
//["1948"],
//["1949"],
//["1950"],
//["1951"],
//["1952"],
//["1953"],
//["1954"],
//["1955"],
//["1956"],
//["1957"],
//["1958"],
//["1959"],
//["1960"],
//["1961"],
//["1962"],
//["1963"],
//["1964"],
//["1965"],
//["1966"],
//["1967"],
//["1968"],
//["1969"],
//["1970"],
//["1971"],
//["1972"],
//["1973"],
//["1974"],
//["1975"],
//["1976"],
//["1977"],
//["1978"],
//["1979"],
//["1980"],
//["1981"],
//["1982"],
//["1983"],
//["1984"],
//["1985"],
//["1986"],
//["1987"],
//["1988"],
//["1989"],
//["1990"],
//["1991"],
//["1992"],
//["1993"],
//["1994"],
//["1995"],
//["1996"],
//["1997"],
//["1998"],
//["1999"],
//["2000"],
//["2001"],
//["2002"],
//["2003"],
//["2004"],
//["2005"],
//["2006"],
//["2007"],
//["2008"],
//["2009"],
//["2010"],
//["2011"],
//["2012"],
//["2013"],
//["2014"],
//["2015"],
//["2016"],
//["2017"],
//["2018"],
//["2019"],
//["2020"],
//["2021"],
//["2022"],
//["2023"],
//["2024"],
//["2025"],
//["2026"],
//["2027"],
//["2028"],
//["2029"],
//["2030"],
//["2031"],
//["2032"],
//["2033"],
//["2034"],
//["2035"],
//["2036"],
//["2037"],
//["2038"],
//["2039"],
//["2040"],
//["2041"],
//["2042"],
//["2043"],
//["2044"],
//["2045"],
//["2046"],
//["2047"],
//["2048"],
//["2049"],
//["2050"],
//["2051"],
//["2052"],
//["2053"],
//["2054"],
//["2055"],
//["2056"],
//["2057"],
//["2058"],
//["2059"],
//["2060"],
//["2061"],
//["2062"],
//["2063"],
//["2064"],
//["2065"],
//["2066"],
//["2067"],
//["2069"],
//["2070"],
//["2071"],
//["2072"],
//["2073"],
//["2074"],
//["2075"],
//["2076"],
//["2078"],
//["2079"],
//["2080"],
//["2081"],
//["2082"],
//["2083"],
//["2084"],
//["2085"],
//["2086"],
//["2087"],
//["2088"],
//["2089"],
//["2090"],
//["2091"],
//["2092"],
//["2093"],
//["2094"],
//["2095"],
//["2096"],
//["2097"],
//["2098"],
//["2099"],
//["2100"],
//["2101"],
//["2102"],
//["2103"],
//["2104"],
//["2105"],
//["2106"],
//["2107"],
//["2108"],
//["2109"],
//["2110"],
//["2111"],
//["2112"],
//["2113"],
//["2114"],
//["2115"],
//["2116"],
//["2117"],
//["2118"],
//["2119"],
//["2120"],
//["2121"],
//["2122"],
//["2123"],
//["2124"],
//["2125"],
//["2126"],
//["2127"],
//["2128"],
//["2129"],
//["2130"],
//["2131"],
//["2132"],
//["2133"],
//["2134"],
//["2135"],
//["2136"],
//["2137"],
//["2138"],
//["2139"],
//["2140"],
//["2141"],
//["2142"],
//["2143"],
//["2144"],
//["2145"],
//["2146"],
//["2147"],
//["2148"],
//["2149"],
//["2150"],
//["2151"],
//["2152"],
//["2153"],
//["2154"],
//["2155"],
//["2156"],
//["2157"],
//["2158"],
//["2159"],
//["2160"],
//["2161"],
//["2162"],
//["2163"],
//["2164"],
//["2165"],
//["2166"],
//["2167"],
//["2168"],
//["2169"],
//["2170"],
//["2171"],
//["2172"],
//["2173"],
//["2174"],
//["2175"],
//["2176"],
//["2177"],
//["2179"],
//["2180"],
//["2181"],
//["2182"],
//["2183"],
//["2184"],
//["2185"],
//["2186"],
//["2187"],
//["2188"],
//["2189"],
//["2190"],
//["2191"],
//["2192"],
//["2193"],
//["2194"],
//["2195"],
//["2196"],
//["2197"],
//["2198"],
//["2199"],
//["2200"],
//["2201"],
//["2202"],
//["2203"],
//["2204"],
//["2205"],
//["2206"],
//["2207"],
//["2208"],
//["2209"],
//["2210"],
//["2211"],
//["2212"],
//["2213"],
//["2214"],
//["2215"],
//["2216"],
//["2217"],
//["2218"],
//["2219"],
//["2220"],
//["2221"],
//["2222"],
//["2223"],
//["2224"],
//["2225"],
//["2226"],
//["2227"],
//["2228"],
//["2229"],
//["2230"],
//["2231"],
//["2232"],
//["2233"],
//["2235"],
//["2236"],
//["2237"],
//["2238"],
//["2239"],
//["2240"],
//["2241"],
//["2242"],
//["2243"],
//["2244"],
//["2245"],
//["2246"],
//["2247"],
//["2248"],
//["2249"],
//["2250"],
//["2251"],
//["2252"],
//["2253"],
//["2254"],
//["2256"],
//["2257"],
//["2258"],
//["2259"],
//["2260"],
//["2261"],
//["2262"],
//["2263"],
//["2264"],
//["2265"],
//["2266"],
//["2267"],
//["2268"],
//["2269"],
//["2270"],
//["2271"],
//["2272"],
//["2273"],
//["2274"],
//["2275"],
//["2276"],
//["2277"],
//["2278"],
//["2279"],
//["2280"],
//["2281"],
//["2282"],
//["2283"],
//["2284"],
//["2285"],
//["2286"],
//["2287"],
//["2288"],
//["2289"],
//["2290"],
//["2291"],
//["2292"],
//["2293"],
//["2294"],
//["2295"],
//["2296"],
//["2297"],
//["2298"],
//["2299"],
//["2300"],
//["2301"],
//["2303"],
//["2305"],
//["2306"],
//["2307"],
//["2308"],
//["2309"],
//["2310"],
//["2311"],
//["2312"],
//["2313"],
//["2314"],
//["2315"],
//["2316"],
//["2317"],
//["2318"],
//["2319"],
//["2320"],
//["2321"],
//["2322"],
//["2323"],
//["2324"],
//["2325"],
//["2326"],
//["2327"],
//["2328"],
//["2329"],
//["2330"],
//["2331"],
//["2332"],
//["2333"],
//["2334"],
//["2335"],
//["2336"],
//["2337"],
//["2338"],
//["2341"],
//["2350"],
//["2351"],
//["2356"],
//["2361"],
//["2371"],
//["2377"],
//["2378"],
//["2379"],
//["2380"],
//["2381"],
//["2382"],
//["2383"],
//["2384"],
//["2385"],
//["2386"],
//["2387"],
//["2388"],
//["2389"],
//["2390"],
//["2391"],
//["2392"],
//["2393"],
//["2394"],
//["2395"],
//["2396"],
//["2397"],
//["2398"],
//["2399"],
//["2400"],
//["2401"],
//["2402"],
//["2403"],
//["2404"],
//["2405"],
//["2406"],
//["2407"],
//["2408"],
//["2409"],
//["2410"],
//["2411"],
//["2412"],
//["2413"],
//["2414"],
//["2415"],
//["2416"],
//["2417"],
//["2418"],
//["2419"],
//["2420"],
//["2421"],
//["2422"],
//["2423"],
//["2424"],
//["2425"],
//["2426"],
//["2427"],
//["2428"],
//["2430"],
//["2431"],
//["2432"],
//["2433"],
//["2434"],
//["2435"],
//["2436"],
//["2437"],
//["2438"],
//["2439"],
//["2440"],
//["2441"],
//["2442"],
//["2443"],
//["2444"],
//["2445"],
//["2446"],
//["2447"],
//["2448"],
//["2449"],
//["2450"],
//["2451"],
//["2452"],
//["2453"],
//["2454"],
//["2455"],
//["2456"],
//["2457"],
//["2458"],
//["2459"],
//["2460"],
//["2461"],
//["2462"],
//["2463"],
//["2464"],
//["2465"],
//["2466"],
//["2467"],
//["2468"],
//["2469"],
//["2470"],
//["2471"],
//["2472"],
//["2473"],
//["2474"],
//["2475"],
//["2476"],
//["2477"],
//["2478"],
//["2479"],
//["2480"],
//["2481"],
//["2482"],
//["2483"],
//["2484"],
//["2485"],
//["2486"],
//["2487"],
//["2488"],
//["2489"],
//["2490"],
//["2491"],
//["2492"],
//["2493"],
//["2494"],
//["2495"],
//["2496"],
//["2497"],
//["2498"],
//["2499"],
//["2500"],
//["2501"],
//["2502"],
//["2503"],
//["2504"],
//["2505"],
//["2506"],
//["2507"],
//["2508"],
//["2509"],
//["2510"],
//["2511"],
//["2512"],
//["2513"],
//["2514"],
//["2515"],
//["2516"],
//["2517"],
//["2518"],
//["2519"],
//["2520"],
//["2521"],
//["2522"],
//["2523"],
//["2524"],
//["2525"],
//["2526"],
//["2527"],
//["2528"],
//["2529"],
//["2530"],
//["2531"],
//["2532"],
//["2533"],
//["2534"],
//["2535"],
//["2536"],
//["2537"],
//["2538"],
//["2539"],
//["2540"],
//["2541"],
//["2542"],
//["2543"],
//["2544"],
//["2545"],
//["2546"],
//["2547"],
//["2548"],
//["2549"],
//["2550"],
//["2552"],
//["2553"],
//["2554"],
//["2555"],
//["2556"],
//["2557"],
//["2558"],
//["2559"],
//["2560"],
//["2561"],
//["2562"],
//["2563"],
//["2564"],
//["2565"],
//["2566"],
//["2567"],
//["2568"],
//["2569"],
//["2570"],
//["2571"],
//["2572"],
//["2573"],
//["2574"],
//["2575"],
//["2576"],
//["2577"],
//["2578"],
//["2579"],
//["2580"],
//["2581"],
//["2582"],
//["2583"],
//["2584"],
//["2585"],
//["2586"],
//["2587"],
//["2588"],
//["2589"],
//["2590"],
//["2591"],
//["2592"],
//["2593"],
//["2594"],
//["2595"],
//["2596"],
//["2597"],
//["2598"],
//["2599"],
//["2600"],
//["2601"],
//["2602"],
//["2603"],
//["2604"],
//["2605"],
//["2606"],
//["2607"],
//["2608"],
//["2609"],
//["2610"],
//["2611"],
//["2612"],
//["2613"],
//["2614"],
//["2615"],
//["2616"],
//["2617"],
//["2618"],
//["2619"],
//["2620"],
//["2621"],
//["2622"],
//["2623"],
//["2624"],
//["2625"],
//["2626"],
//["2627"],
//["2628"],
//["2629"],
//["2630"],
//["2631"],
//["2632"],
//["2633"],
//["2634"],
//["2635"],
//["2636"],
//["2637"],
//["2638"],
//["2639"],
//["2640"],
//["2641"],
//["2642"],
//["2643"],
//["2644"],
//["2645"],
//["2646"],
//["2647"],
//["2648"],
//["2649"],
//["2650"],
//["2651"],
//["2652"],
//["2653"],
//["2654"],
//["2655"],
//["2656"],
//["2657"],
//["2658"],
//["2659"],
//["2660"],
//["2661"],
//["2662"],
//["2663"],
//["2664"],
//["2665"],
//["2666"],
//["2667"],
//["2668"],
//["2669"],
//["2670"],
//["2671"],
//["2672"],
//["2673"],
//["2674"],
//["2675"],
//["2676"],
//["2677"],
//["2678"],
//["2679"],
//["2680"],
//["2681"],
//["2682"],
//["2683"],
//["2684"],
//["2685"],
//["2686"],
//["2687"],
//["2688"],
//["2689"],
//["2690"],
//["2691"],
//["2692"],
//["2693"],
//["2694"],
//["2695"],
//["2696"],
//["2697"],
//["2698"],
//["2699"],
//["2700"],
//["2701"],
//["2702"],
//["2703"],
//["2704"],
//["2705"],
//["2706"],
//["2707"],
//["2708"],
//["2709"],
//["2710"],
//["2711"],
//["2712"],
//["2713"],
//["2714"],
//["2715"],
//["2716"],
//["2717"],
//["2718"],
//["2719"],
//["2720"],
//["2721"],
//["2722"],
//["2723"],
//["2724"],
//["2725"],
//["2726"],
//["2727"],
//["2728"],
//["2729"],
//["2730"],
//["2731"],
//["2732"],
//["2733"],
//["2734"],
//["2735"],
//["2736"],
//["2738"],
//["2739"],
//["2740"],
//["2741"],
//["2742"],
//["2743"],
//["2744"],
//["2745"],
//["2746"],
//["2747"],
//["2748"],
//["2749"],
//["2750"],
//["2751"],
//["2752"],
//["2753"],
//["2754"],
//["2755"],
//["2756"],
//["2758"],
//["2759"],
//["2760"],
//["2762"],
//["2763"],
//["2764"],
//["2765"],
//["2766"],
//["2767"],
//["2768"],
//["2769"],
//["2770"],
//["2771"],
//["2772"],
//["2773"],
//["2774"],
//["2775"],
//["2776"],
//["2777"],
//["2778"],
//["2779"],
//["2780"],
//["2781"],
//["2782"],
//["2783"],
//["2784"],
//["2785"],
//["2786"],
//["2787"],
//["2788"],
//["2789"],
//["2790"],
//["2791"],
//["2792"],
//["2793"],
//["2794"],
//["2795"],
//["2796"],
//["2797"],
//["2798"],
//["2799"],
//["2800"],
//["2801"],
//["2802"],
//["2803"],
//["2804"],
//["2805"],
//["2806"],
//["2807"],
//["2808"],
//["2809"],
//["2810"],
//["2811"],
//["2812"],
//["2813"],
//["2814"],
//["2815"],
//["2816"],
//["2817"],
//["2818"],
//["2819"],
//["2820"],
//["2821"],
//["2822"],
//["2823"],
//["2824"],
//["2825"],
//["2826"],
//["2827"],
//["2828"],
//["2829"],
//["2830"],
//["2831"],
//["2832"],
//["2833"],
//["2834"],
//["2835"],
//["2836"],
//["2837"],
//["2838"],
//["2839"],
//["2840"],
//["2841"],
//["2842"],
//["2843"],
//["2844"],
//["2845"],
//["2846"],
//["2847"],
//["2848"],
//["2849"],
//["2850"],
//["2851"],
//["2852"],
//["2853"],
//["2854"],
//["2855"],
//["2856"],
//["2857"],
//["2858"],
//["2859"],
//["2860"],
//["2861"],
//["2862"],
//["2863"],
//["2864"],
//["2865"],
//["2866"],
//["2867"],
//["2868"],
//["2869"],
//["2870"],
//["2871"],
//["2872"],
//["2873"],
//["2874"],
//["2875"],
//["2876"],
//["2877"],
//["2878"],
//["2879"],
//["2880"],
//["2881"],
//["2882"],
//["2883"],
//["2884"],
//["2885"],
//["2886"],
//["2887"],
//["2888"],
//["2889"],
//["2890"],
//["2891"],
//["2892"],
//["2893"],
//["2894"],
//["2895"],
//["2896"],
//["2897"],
//["2898"],
//["2899"],
//["2900"],
//["2901"],
//["2902"],
//["2903"],
//["2904"],
//["2905"],
//["2906"],
//["2907"],
//["2908"],
//["2909"],
//["2910"],
//["2911"],
//["2912"],
//["2913"],
//["2914"],
//["2915"],
//["2916"],
//["2917"],
//["2918"],
//["2919"],
//["2920"],
//["2921"],
//["2922"],
//["2923"],
//["2924"],
//["2925"],
//["2926"],
//["2927"],
//["2928"],
//["2929"],
//["2930"],
//["2931"],
//["2932"],
//["2933"],
//["2934"],
//["2935"],
//["2936"],
//["2937"],
//["2938"],
//["2939"],
//["2940"],
//["2941"],
//["2942"],
//["2943"],
//["2944"],
//["2945"],
//["2946"],
//["2947"],
//["2948"],
//["2949"],
//["2950"],
//["2952"],
//["2953"],
//["2954"],
//["2955"],
//["2956"],
//["2957"],
//["2958"],
//["2959"],
//["2960"],
//["2961"],
//["2962"],
//["2963"],
//["2964"],
//["2965"],
//["2966"],
//["2967"],
//["2968"],
//["2969"],
//["2970"],
//["2971"],
//["2972"],
//["2973"],
//["2974"],
//["2975"],
//["2976"],
//["2977"],
//["2978"],
//["2979"],
//["2980"],
//["2981"],
//["2982"],
//["2983"],
//["2984"],
//["2985"],
//["2986"],
//["2987"],
//["2988"],
//["2989"],
//["2990"],
//["2991"],
//["2992"],
//["2993"],
//["2994"],
//["2995"],
//["2996"],
//["2997"],
//["2998"],
//["2999"],
//["3000"],
//["3001"],
//["3002"],
//["3003"],
//["3004"],
//["3005"],
//["3006"],
//["3007"],
//["3008"],
//["3009"],
//["3010"],
//["3012"],
//["3013"],
//["3014"],
//["3015"],
//["3016"],
//["3017"],
//["3018"],
//["3019"],
//["3020"],
//["3021"],
//["3022"],
//["3023"],
//["3024"],
//["3025"],
//["3026"],
//["3027"],
//["3028"],
//["3029"],
//["3030"],
//["3031"],
//["3032"],
//["3033"],
//["3034"],
//["3035"],
//["3036"],
//["3037"],
//["3038"],
//["3039"],
//["3040"],
//["3041"],
//["3042"],
//["3043"],
//["3044"],
//["3045"],
//["3046"],
//["3047"],
//["3048"],
//["3049"],
//["3050"],
//["3051"],
//["3052"],
//["3053"],
//["3054"],
//["3055"],
//["3056"],
//["3057"],
//["3058"],
//["3059"],
//["3060"],
//["3061"],
//["3062"],
//["3063"],
//["3064"],
//["3065"],
//["3066"],
//["3067"],
//["3068"],
//["3069"],
//["3070"],
//["3071"],
//["3072"],
//["3073"],
//["3074"],
//["3075"],
//["3076"],
//["3077"],
//["3078"],
//["3079"],
//["3080"],
//["3081"],
//["3082"],
//["3083"],
//["3084"],
//["3085"],
//["3086"],
//["3087"],
//["3088"],
//["3089"],
//["3090"],
//["3091"],
//["3092"],
//["3093"],
//["3094"],
//["3095"],
//["3096"],
//["3097"],
//["3098"],
//["3099"],
//["3100"],
//["3101"],
//["3102"],
//["3103"],
//["3104"],
//["3105"],
//["3106"],
//["3107"],
//["3108"],
//["3109"],
//["3110"],
//["3111"],
//["3112"],
//["3113"],
//["3114"],
//["3115"],
//["3116"],
//["3117"],
//["3118"],
//["3119"],
//["3120"],
//["3121"],
//["3122"],
//["3123"],
//["3124"],
//["3125"],
//["3126"],
//["3127"],
//["3128"],
//["3129"],
//["3130"],
//["3131"],
//["3132"],
//["3133"],
//["3134"],
//["3135"],
//["3136"],
//["3137"],
//["3138"],
//["3139"],
//["3140"],
//["3141"],
//["3142"],
//["3143"],
//["3144"],
//["3145"],
//["3146"],
//["3147"],
//["3148"],
//["3149"],
//["3150"],
//["3151"],
//["3152"],
//["3153"],
//["3154"],
//["3155"],
//["3156"],
//["3157"],
//["3158"],
//["3159"],
//["3160"],
//["3161"],
//["3162"],
//["3163"],
//["3164"],
//["3165"],
//["3166"],
//["3167"],
//["3168"],
//["3169"],
//["3170"],
//["3171"],
//["3172"],
//["3173"],
//["3174"],
//["3175"],
//["3176"],
//["3177"],
//["3178"],
//["3179"],
//["3180"],
//["3181"],
//["3182"],
//["3183"],
//["3184"],
//["3185"],
//["3186"],
//["3187"],
//["3188"],
//["3189"],
//["3190"],
//["3191"],
//["3192"],
//["3193"],
//["3194"],
//["3195"],
//["3196"],
//["3197"],
//["3198"],
//["3199"],
//["3200"],
//["3201"],
//["3202"],
//["3203"],
//["3204"],
//["3205"],
//["3206"],
//["3207"],
//["3208"],
//["3209"],
//["3210"],
//["3211"],
//["3212"],
//["3213"],
//["3214"],
//["3215"],
//["3216"],
//["3217"],
//["3218"],
//["3219"],
//["3220"],
//["3221"],
//["3222"],
//["3223"],
//["3224"],
//["3225"],
//["3226"],
//["3227"],
//["3228"],
//["3229"],
//["3230"],
//["3231"],
//["3232"],
//["3233"],
//["3234"],
//["3235"],
//["3236"],
//["3237"],
//["3238"],
//["3239"],
//["3240"],
//["3241"],
//["3242"],
//["3243"],
//["3244"],
//["3245"],
//["3246"],
//["3247"],
//["3248"],
//["3249"],
//["3250"],
//["3251"],
//["3252"],
//["3253"],
//["3254"],
//["3255"],
//["3256"],
//["3257"],
//["3258"],
//["3259"],
//["3260"],
//["3261"],
//["3262"],
//["3263"],
//["3264"],
//["3265"],
//["3266"],
//["3267"],
//["3268"],
//["3269"],
//["3270"],
//["3271"],
//["3272"],
//["3273"],
//["3274"],
//["3275"],
//["3276"],
//["3277"],
//["3278"],
//["3279"],
//["3280"],
//["3281"],
//["3282"],
//["3283"],
//["3284"],
//["3285"],
//["3286"],
//["3287"],
//["3288"],
//["3289"],
//["3290"],
//["3291"],
//["3292"],
//["3293"],
//["3294"],
//["3295"],
//["3296"],
//["3297"],
//["3298"],
//["3299"],
//["3300"],
//["3301"],
//["3302"],
//["3303"],
//["3304"],
//["3305"],
//["3306"],
//["3307"],
//["3308"],
//["3309"],
//["3310"],
//["3311"],
//["3312"],
//["3313"],
//["3314"],
//["3315"],
//["3316"],
//["3317"],
//["3318"],
//["3319"],
//["3320"],
//["3321"],
//["3322"],
//["3323"],
//["3324"],
//["3325"],
//["3326"],
//["3327"],
//["3328"],
//["3329"],
//["3330"],
//["3331"],
//["3332"],
//["3333"],
//["3334"],
//["3335"],
//["3336"],
//["3337"],
//["3338"],
//["3339"],
//["3340"],
//["3341"],
//["3342"],
//["3343"],
//["3344"],
//["3345"],
//["3346"],
//["3347"],
//["3348"],
//["3349"],
//["3350"],
//["3351"],
//["3352"],
//["3353"],
//["3354"],
//["3355"],
//["3356"],
//["3357"],
//["3359"],
//["3360"],
//["3361"],
//["3362"],
//["3363"],
//["3364"],
//["3365"],
//["3366"],
//["3367"],
//["3368"],
//["3369"],
//["3370"],
//["3371"],
//["3372"],
//["3373"],
//["3374"],
//["3375"],
//["3376"],
//["3377"],
//["3378"],
//["3379"],
//["3380"],
//["3381"],
//["3382"],
//["3383"],
//["3384"],
//["3386"],
//["3387"],
//["3388"],
//["3389"],
//["3390"],
//["3391"],
//["3392"],
//["3393"],
//["3394"],
//["3395"],
//["3396"],
//["3397"],
//["3398"],
//["3399"],
//["3400"],
//["3401"],
//["3402"],
//["3403"],
//["3404"],
//["3405"],
//["3406"],
//["3407"],
//["3408"],
//["3409"],
//["3410"],
//["3411"],
//["3412"],
//["3413"],
//["3414"],
//["3415"],
//["3416"],
//["3417"],
//["3418"],
//["3419"],
//["3420"],
//["3421"],
//["3422"],
//["3423"],
//["3424"],
//["3425"],
//["3426"],
//["3427"],
//["3428"],
//["3429"],
//["3430"],
//["3431"],
//["3432"],
//["3433"],
//["3434"],
//["3435"],
//["3436"],
//["3437"],
//["3438"],
//["3439"],
//["3440"],
//["3441"],
//["3442"],
//["3443"],
//["3444"],
//["3445"],
//["3446"],
//["3447"],
//["3448"],
//["3450"],
//["3451"],
//["3452"],
//["3454"],
//["3455"],
//["3456"],
//["3457"],
//["3458"],
//["3459"],
//["3460"],
//["3461"],
//["3462"],
//["3463"],
//["3465"],
//["3467"],
//["3468"],
//["3469"],
//["3470"],
//["3471"],
//["3472"],
//["3473"],
//["3474"],
//["3475"],
//["3476"],
//["3477"],
//["3478"],
//["3479"],
//["3480"],
//["3481"],
//["3482"],
//["3483"],
//["3484"],
//["3485"],
//["3486"],
//["3487"],
//["3488"],
//["3489"],
//["3490"],
//["3491"],
//["3492"],
//["3493"],
//["3494"],
//["3495"],
//["3496"],
//["3497"],
//["3498"],
//["3499"],
//["3500"],
//["3501"],
//["3502"],
//["3503"],
//["3504"],
//["3505"],
//["3506"],
//["3507"],
//["3508"],
//["3509"],
//["3510"],
//["3511"],
//["3512"],
//["3513"],
//["3514"],
//["3515"],
//["3516"],
//["3517"],
//["3518"],
//["3519"],
//["3520"],
//["3521"],
//["3522"],
//["3523"],
//["3524"],
//["3525"],
//["3526"],
//["3527"],
//["3528"],
//["3529"],
//["3530"],
//["3531"],
//["3532"],
//["3533"],
//["3534"],
//["3535"],
//["3536"],
//["3537"],
//["3538"],
//["3539"],
//["3540"],
//["3541"],
//["3542"],
//["3543"],
//["3544"],
//["3545"],
//["3546"],
//["3547"],
//["3548"],
//["3549"],
//["3550"],
//["3551"],
//["3552"],
//["3553"],
//["3554"],
//["3555"],
//["3556"],
//["3557"],
//["3558"],
//["3559"],
//["3560"],
//["3561"],
//["3562"],
//["3563"],
//["3564"],
//["3565"],
//["3566"],
//["3567"],
//["3568"],
//["3569"],
//["3570"],
//["3571"],
//["3572"],
//["3573"],
//["3574"],
//["3575"],
//["3576"],
//["3577"],
//["3578"],
//["3579"],
//["3580"],
//["3581"],
//["3582"],
//["3583"],
//["3584"],
//["3585"],
//["3586"],
//["3587"],
//["3588"],
//["3589"],
//["3590"],
//["3591"],
//["3592"],
//["3593"],
//["3594"],
//["3595"],
//["3596"],
//["3597"],
//["3599"],
//["3600"],
//["3601"],
//["3602"],
//["3604"],
//["3605"],
//["3606"],
//["3607"],
//["3608"],
//["3609"],
//["3610"],
//["3611"],
//["3612"],
//["3613"],
//["3614"],
//["3615"],
//["3616"],
//["3617"],
//["3618"],
//["3619"],
//["3620"],
//["3621"],
//["3622"],
//["3623"],
//["3624"],
//["3625"],
//["3626"],
//["3627"],
//["3628"],
//["3629"],
//["3630"],
//["3631"],
//["3632"],
//["3633"],
//["3634"],
//["3635"],
//["3636"],
//["3637"],
//["3638"],
//["3639"],
//["3640"],
//["3641"],
//["3642"],
//["3643"],
//["3644"],
//["3645"],
//["3646"],
//["3647"],
//["3648"],
//["3649"],
//["3650"],
//["3651"],
//["3652"],
//["3653"],
//["3654"],
//["3655"],
//["3656"],
//["3657"],
//["3658"],
//["3659"],
//["3660"],
//["3661"],
//["3662"],
//["3663"],
//["3664"],
//["3665"],
//["3666"],
//["3667"],
//["3668"],
//["3669"],
//["3670"],
//["3671"],
//["3672"],
//["3673"],
//["3674"],
//["3675"],
//["3676"],
//["3677"],
//["3678"],
//["3679"],
//["3680"],
//["3681"],
//["3682"],
//["3683"],
//["3684"],
//["3685"],
//["3686"],
//["3687"],
//["3688"],
//["3689"],
//["3690"],
//["3691"],
//["3692"],
//["3694"],
//["3695"],
//["3696"],
//["3697"],
//["3698"],
//["3699"],
//["3700"],
//["3701"],
//["3702"],
//["3703"],
//["3704"],
//["3705"],
//["3706"],
//["3707"],
//["3708"],
//["3709"],
//["3710"],
//["3711"],
//["3712"],
//["3713"],
//["3714"],
//["3715"],
//["3716"],
//["3717"],
//["3718"],
//["3719"],
//["3720"],
//["3721"],
//["3722"],
//["3723"],
//["3724"],
//["3725"],
//["3726"],
//["3727"],
//["3728"],
//["3729"],
//["3730"],
//["3731"],
//["3732"],
//["3733"],
//["3734"],
//["3735"],
//["3736"],
//["3737"],
//["3738"],
//["3739"],
//["3740"],
//["3741"],
//["3742"],
//["3743"],
//["3744"],
//["3745"],
//["3746"],
//["3747"],
//["3748"],
//["3749"],
//["3750"],
//["3751"],
//["3752"],
//["3753"],
//["3754"],
//["3755"],
//["3756"],
//["3757"],
//["3758"],
//["3759"],
//["3760"],
//["3761"],
//["3762"],
//["3763"],
//["3764"],
//["3765"],
//["3766"],
//["3767"],
//["3768"],
//["3769"],
//["3770"],
//["3771"],
//["3772"],
//["3773"],
//["3774"],
//["3775"],
//["3777"],
//["3778"],
//["3779"],
//["3780"],
//["3781"],
//["3782"],
//["3783"],
//["3784"],
//["3785"],
//["3786"],
//["3787"],
//["3788"],
//["3789"],
//["3790"],
//["3791"],
//["3792"],
//["3793"],
//["3794"],
//["3795"],
//["3796"],
//["3797"],
//["3798"],
//["3799"],
//["3800"],
//["3801"],
//["3802"],
//["3803"],
//["3804"],
//["3805"],
//["3806"],
//["3807"],
//["3808"],
//["3809"],
//["3810"],
//["3811"],
//["3812"],
//["3813"],
//["3814"],
//["3815"],
//["3816"],
//["3817"],
//["3818"],
//["3819"],
//["3820"],
//["3821"],
//["3822"],
//["3823"],
//["3824"],
//["3825"],
//["3826"],
//["3827"],
//["3828"],
//["3829"],
//["3830"],
//["3831"],
//["3832"],
//["3833"],
//["3834"],
//["3835"],
//["3836"],
//["3837"],
//["3838"],
//["3839"],
//["3840"],
//["3841"],
//["3842"],
//["3843"],
//["3844"],
//["3845"],
//["3846"],
//["3847"],
//["3848"],
//["3849"],
//["3850"],
//["3851"],
//["3852"],
//["3853"],
//["3854"],
//["3855"],
//["3856"],
//["3857"],
//["3858"],
//["3859"],
//["3861"],
//["3862"],
//["3863"],
//["3864"],
//["3865"],
//["3867"],
//["3868"],
//["3870"],
//["3871"],
//["3872"],
//["3873"],
//["3874"],
//["3875"],
//["3876"],
//["3877"],
//["3878"],
//["3879"],
//["3880"],
//["3881"],
//["3882"],
//["3883"],
//["3884"],
//["3885"],
//["3886"],
//["3887"],
//["3888"],
//["3890"],
//["3891"],
//["3892"],
//["3893"],
//["3894"],
//["3895"],
//["3896"],
//["3897"],
//["3898"],
//["3899"],
//["3900"],
//["3901"],
//["3902"],
//["3904"],
//["3905"],
//["3906"],
//["3907"],
//["3908"],
//["3909"],
//["3910"],
//["3911"],
//["3912"],
//["3913"],
//["3914"],
//["3915"],
//["3916"],
//["3917"],
//["3918"],
//["3919"],
//["3920"],
//["3921"],
//["3922"],
//["3924"],
//["3925"],
//["3928"],
//["3929"],
//["3930"],
//["3931"],
//["3932"],
//["3933"],
//["3934"],
//["3935"],
//["3936"],
//["3937"],
//["3938"],
//["3939"],
//["3940"],
//["3941"],
//["3942"],
//["3943"],
//["3944"],
//["3945"],
//["3946"],
//["3947"],
//["3948"],
//["3949"],
//["3950"],
//["3951"],
//["3952"],
//["3953"],
//["3954"],
//["3955"],
//["3956"],
//["3957"],
//["3958"],
//["3959"],
//["3960"],
//["3961"],
//["3962"],
//["3963"],
//["3964"],
//["3965"],
//["3966"],
//["3967"],
//["3968"],
//["3969"],
//["3970"],
//["3971"],
//["3972"],
//["3973"],
//["3974"],
//["3975"],
//["3976"],
//["3977"],
//["3978"],
//["3979"],
//["3980"],
//["3982"],
//["3983"],
//["3984"],
//["3985"],
//["3986"],
//["3987"],
//["3988"],
//["3989"],
//["3990"],
//["3991"],
//["3992"],
//["3993"],
//["3994"],
//["3995"],
//["3996"],
//["3997"],
//["3998"],
//["3999"],
//["4000"],
//["4001"],
//["4002"],
//["4003"],
//["4004"],
//["4005"],
//["4006"],
//["4007"],
//["4008"],
//["4009"],
//["4010"],
//["4011"],
//["4012"],
//["4013"],
//["4014"],
//["4015"],
//["4016"],
//["4017"],
//["4018"],
//["4019"],
//["4020"],
//["4021"],
//["4022"],
//["4023"],
//["4024"],
//["4025"],
//["4026"],
//["4027"],
//["4028"],
//["4029"],
//["4030"],
//["4031"],
//["4032"],
//["4033"],
//["4034"],
//["4035"],
//["4036"],
//["4037"],
//["4038"],
//["4039"],
//["4040"],
//["4041"],
//["4042"],
//["4043"],
//["4044"],
//["4045"],
//["4046"],
//["4047"],
//["4048"],
//["4049"],
//["4050"],
//["4051"],
//["4052"],
//["4053"],
//["4054"],
//["4055"],
//["4056"],
//["4057"],
//["4058"],
//["4059"],
//["4060"],
//["4061"],
//["4062"],
//["4063"],
//["4064"],
//["4065"],
//["4066"],
//["4067"],
//["4068"],
//["4069"],
//["4070"],
//["4071"],
//["4072"],
//["4073"],
//["4074"],
//["4075"],
//["4076"],
//["4077"],
//["4078"],
//["4079"],
//["4080"],
//["4081"],
//["4082"],
//["4083"],
//["4084"],
//["4085"],
//["4086"],
//["4087"],
//["4088"],
//["4089"],
//["4090"],
//["4091"],
//["4092"],
//["4093"],
//["4094"],
//["4095"],
//["4096"],
//["4097"],
//["4098"],
//["4099"],
//["4100"],
//["4101"],
//["4102"],
//["4103"],
//["4104"],
//["4105"],
//["4106"],
//["4107"],
//["4108"],
//["4109"],
//["4110"],
//["4111"],
//["4112"],
//["4113"],
//["4114"],
//["4115"],
//["4116"],
//["4117"],
//["4118"],
//["4119"],
//["4120"],
//["4121"],
//["4122"],
//["4123"],
//["4124"],
//["4125"],
//["4126"],
//["4127"],
//["4128"],
//["4129"],
//["4130"],
//["4131"],
//["4132"],
//["4133"],
//["4134"],
//["4135"],
//["4137"],
//["4138"],
//["4139"],
//["4140"],
//["4141"],
//["4145"],
//["4146"],
//["4147"],
//["4148"],
//["4149"],
//["4150"],
//["4151"],
//["4152"],
//["4153"],
//["4154"],
//["4155"],
//["4156"],
//["4157"],
//["4158"],
//["4160"],
//["4161"],
//["4162"],
//["4163"],
//["4164"],
//["4165"],
//["4166"],
//["4167"],
//["4168"],
//["4169"],
//["4170"],
//["4171"],
//["4172"],
//["4173"],
//["4174"],
//["4175"],
//["4176"],
//["4177"],
//["4178"],
//["4179"],
//["4180"],
//["4181"],
//["4182"],
//["4183"],
//["4184"],
//["4185"],
//["4186"],
//["4187"],
//["4188"],
//["4189"],
//["4190"],
//["4191"],
//["4192"],
//["4193"],
//["4194"],
//["4195"],
//["4196"],
//["4197"],
//["4198"],
//["4199"],
//["4200"],
//["4202"],
//["4203"],
//["4204"],
//["4205"],
//["4206"],
//["4207"],
//["4208"],
//["4209"],
//["4211"],
//["4212"],
//["4213"],
//["4214"],
//["4215"],
//["4216"],
//["4217"],
//["4218"],
//["4219"],
//["4220"],
//["4221"],
//["4222"],
//["4223"],
//["4224"],
//["4225"],
//["4226"],
//["4227"],
//["4228"],
//["4229"],
//["4230"],
//["4231"],
//["4232"],
//["4233"],
//["4234"],
//["4235"],
//["4236"],
//["4237"],
//["4238"],
//["4239"],
//["4240"],
//["4241"],
//["4242"],
//["4243"],
//["4244"],
//["4245"],
//["4246"],
//["4247"],
//["4248"],
//["4249"],
//["4250"],
//["4251"],
//["4252"],
//["4253"],
//["4254"],
//["4255"],
//["4256"],
//["4257"],
//["4258"],
//["4259"],
//["4261"],
//["4262"],
//["4263"],
//["4264"],
//["4265"],
//["4266"],
//["4267"],
//["4268"],
//["4269"],
//["4270"],
//["4271"],
//["4272"],
//["4273"],
//["4274"],
//["4276"],
//["4278"],
//["4279"],
//["4280"],
//["4281"],
//["4282"],
//["4283"],
//["4284"],
//["4285"],
//["4286"],
//["4287"],
//["4288"],
//["4289"],
//["4290"],
//["4291"],
//["4292"],
//["4293"],
//["4294"],
//["4295"],
//["4296"],
//["4297"],
//["4298"],
//["4299"],
//["4300"],
//["4301"],
//["4302"],
//["4303"],
//["4304"],
//["4305"],
//["4306"],
//["4307"],
//["4308"],
//["4309"],
//["4310"],
//["4311"],
//["4312"],
//["4313"],
//["4314"],
//["4315"],
//["4316"],
//["4317"],
//["4318"],
//["4319"],
//["4320"],
//["4321"],
//["4322"],
//["4323"],
//["4324"],
//["4325"],
//["4326"],
//["4327"],
//["4328"],
//["4329"],
//["4330"],
//["4331"],
//["4332"],
//["4333"],
//["4334"],
//["4335"],
//["4336"],
//["4337"],
//["4338"],
//["4339"],
//["4340"],
//["4341"],
//["4342"],
//["4343"],
//["4344"],
//["4345"],
//["4346"],
//["4347"],
//["4348"],
//["4349"],
//["4350"],
//["4351"],
//["4352"],
//["4353"],
//["4354"],
//["4355"],
//["4356"],
//["4357"],
//["4358"],
//["4359"],
//["4360"],
//["4361"],
//["4362"],
//["4363"],
//["4364"],
//["4365"],
//["4366"],
//["4367"],
//["4368"],
//["4369"],
//["4370"],
//["4371"],
//["4372"],
//["4373"],
//["4374"],
//["4375"],
//["4376"],
//["4377"],
//["4378"],
//["4379"],
//["4380"],
//["4381"],
//["4382"],
//["4383"],
//["4384"],
//["4385"],
//["4386"],
//["4387"],
//["4388"],
//["4389"],
//["4390"],
//["4391"],
//["4392"],
//["4393"],
//["4394"],
//["4395"],
//["4396"],
//["4397"],
//["4398"],
//["4399"],
//["4400"],
//["4401"],
//["4402"],
//["4403"],
//["4404"],
//["4405"],
//["4406"],
//["4407"],
//["4408"],
//["4409"],
//["4410"],
//["4411"],
//["4412"],
//["4413"],
//["4414"],
//["4415"],
//["4416"],
//["4417"],
//["4418"],
//["4419"],
//["4420"],
//["4421"],
//["4422"],
//["4423"],
//["4424"],
//["4425"],
//["4426"],
//["4427"],
//["4429"],
//["4430"],
//["4431"],
//["4432"],
//["4433"],
//["4434"],
//["4435"],
//["4436"],
//["4437"],
//["4438"],
//["4439"],
//["4440"],
//["4441"],
//["4442"],
//["4443"],
//["4444"],
//["4445"],
//["4446"],
//["4447"],
//["4448"],
//["4449"],
//["4450"],
//["4451"],
//["4452"],
//["4453"],
//["4454"],
//["4455"],
//["4456"],
//["4457"],
//["4458"],
//["4459"],
//["4460"],
//["4461"],
//["4462"],
//["4463"],
//["4464"],
//["4465"],
//["4466"],
//["4467"],
//["4468"],
//["4469"],
//["4470"],
//["4471"],
//["4472"],
//["4473"],
//["4474"],
//["4475"],
//["4476"],
//["4477"],
//["4478"],
//["4479"],
//["4480"],
//["4481"],
//["4482"],
//["4483"],
//["4484"],
//["4485"],
//["4486"],
//["4487"],
//["4488"],
//["4489"],
//["4490"],
//["4491"],
//["4492"],
//["4493"],
//["4494"],
//["4495"],
//["4496"],
//["4497"],
//["4498"],
//["4499"],
//["4500"],
//["4501"],
//["4502"],
//["4503"],
//["4504"],
//["4505"],
//["4506"],
//["4508"],
//["4509"],
//["4510"],
//["4511"],
//["4512"],
//["4513"],
//["4514"],
//["4515"],
//["4516"],
//["4517"],
//["4518"],
//["4519"],
//["4520"],
//["4521"],
//["4522"],
//["4523"],
//["4524"],
//["4525"],
//["4526"],
//["4527"],
//["4528"],
//["4529"] = "SECURITY_HOTSPOT",
//["4530"],
//["4531"],
//["4532"],
//["4533"],
//["4534"],
//["4535"],
//["4536"],
//["4537"],
//["4538"],
//["4539"],
//["4540"],
//["4541"],
//["4542"],
//["4543"],
//["4544"],
//["4545"],
//["4546"],
//["4547"],
//["4548"],
//["4549"],
//["4550"],
//["4551"],
//["4552"],
//["4553"],
//["4554"],
//["4555"],
//["4556"],
//["4557"],
//["4558"],
//["4559"],
//["4560"],
//["4561"],
//["4562"],
//["4563"],
//["4564"],
//["4565"],
//["4566"],
//["4567"],
//["4568"],
//["4569"],
//["4570"],
//["4571"],
//["4572"],
//["4573"],
//["4574"],
//["4575"],
//["4576"],
//["4577"],
//["4578"],
//["4579"],
//["4580"],
//["4581"],
//["4582"],
//["4583"],
//["4584"],
//["4585"],
//["4587"],
//["4588"],
//["4589"],
//["4590"],
//["4591"],
//["4592"],
//["4593"],
//["4594"],
//["4595"],
//["4596"],
//["4597"],
//["4598"],
//["4599"],
//["4600"],
//["4601"],
//["4602"],
//["4603"],
//["4604"],
//["4605"],
//["4606"],
//["4607"],
//["4608"],
//["4609"],
//["4610"],
//["4611"],
//["4612"],
//["4613"],
//["4614"],
//["4615"],
//["4616"],
//["4617"],
//["4618"],
//["4619"],
//["4620"],
//["4621"],
//["4622"],
//["4623"],
//["4624"],
//["4625"],
//["4626"],
//["4627"],
//["4628"],
//["4629"],
//["4630"],
//["4631"],
//["4632"],
//["4633"],
//["4634"],
//["4635"],
//["4636"],
//["4637"],
//["4638"],
//["4639"],
//["4640"],
//["4641"],
//["4642"],
//["4643"],
//["4644"],
//["4645"],
//["4646"],
//["4647"],
//["4648"],
//["4649"],
//["4650"],
//["4651"],
//["4652"],
//["4653"],
//["4654"],
//["4655"],
//["4656"],
//["4657"],
//["4658"],
//["4659"],
//["4660"],
//["4661"],
//["4662"],
//["4663"],
//["4664"],
//["4665"],
//["4666"],
//["4667"],
//["4668"],
//["4669"],
//["4670"],
//["4671"],
//["4672"],
//["4673"],
//["4674"],
//["4675"],
//["4676"],
//["4677"],
//["4678"],
//["4679"],
//["4680"],
//["4681"],
//["4682"],
//["4683"],
//["4684"],
//["4685"],
//["4686"],
//["4687"],
//["4688"],
//["4689"],
//["4690"],
//["4691"],
//["4692"],
//["4693"],
//["4694"],
//["4695"],
//["4696"],
//["4697"],
//["4698"],
//["4699"],
//["4700"],
//["4701"],
//["4702"],
//["4703"],
//["4704"],
//["4705"],
//["4706"],
//["4707"],
//["4708"],
//["4709"],
//["4710"],
//["4711"],
//["4712"],
//["4713"],
//["4714"],
//["4715"],
//["4716"],
//["4717"],
//["4718"],
//["4719"],
//["4720"],
//["4721"] = "SECURITY_HOTSPOT",
//["4722"],
//["4723"],
//["4724"],
//["4725"],
//["4726"],
//["4727"],
//["4728"],
//["4729"],
//["4730"],
//["4731"],
//["4732"],
//["4733"],
//["4734"],
//["4735"],
//["4736"],
//["4737"],
//["4738"],
//["4739"],
//["4740"],
//["4741"],
//["4742"],
//["4743"],
//["4744"],
//["4745"],
//["4746"],
//["4747"],
//["4748"],
//["4749"],
//["4750"],
//["4751"],
//["4752"],
//["4753"],
//["4754"],
//["4755"],
//["4756"],
//["4757"],
//["4758"],
//["4759"],
//["4760"],
//["4761"],
//["4762"],
//["4763"],
//["4764"],
//["4765"],
//["4766"],
//["4767"],
//["4768"],
//["4769"],
//["4770"],
//["4771"],
//["4772"],
//["4773"],
//["4774"],
//["4775"],
//["4776"],
//["4777"],
//["4778"],
//["4779"],
//["4780"],
//["4781"],
//["4782"],
//["4783"],
//["4785"],
//["4786"],
//["4788"],
//["4789"],
//["4791"],
//["4793"],
//["4794"],
//["4795"],
//["4796"],
//["4797"] = "SECURITY_HOTSPOT",
//["4798"],
//["4799"],
//["4800"],
//["4801"],
//["4802"],
//["4803"],
//["4804"],
//["4805"],
//["4806"],
//["4807"],
//["4808"],
//["4809"],
//["4810"],
//["4811"],
//["4812"],
//["4813"],
//["4814"],
//["4815"],
//["4816"],
//["4817"] = "SECURITY_HOTSPOT",
//["4819"],
//["4820"],
//["4821"],
//["4822"],
//["4824"],
//["4825"] = "SECURITY_HOTSPOT",
//["4826"],
//["4827"],
//["4828"],
//["4831"],
//["4832"],
//["4833"],
//["4835"],
//["4836"],
//["4837"],
//["4838"],
//["4839"],
//["4840"],
//["4841"],
//["4842"],
//["4843"],
//["4844"],
//["4845"],
//["4846"],
//["4847"],
//["4848"],
//["4849"],
//["4850"],
//["4851"],
//["4852"],
//["4853"],
//["4854"],
//["4855"],
//["4856"],
//["4857"],
//["4858"],
//["4859"],
//["4860"],
//["4861"],
//["4862"],
//["4863"],
//["4864"],
//["4865"],
//["4866"],
//["4867"],
//["4868"],
//["4869"],
//["4870"],
//["4871"],
//["4872"],
//["4873"],
//["4874"],
//["4875"],
//["4876"],
//["4877"],
//["4878"],
//["4879"],
//["4880"],
//["4881"],
//["4882"],
//["4883"],
//["4884"],
//["4885"],
//["4886"],
//["4887"],
//["4888"],
//["4889"],
//["4890"],
//["4891"],
//["4892"],
//["4893"],
//["4894"],
//["4895"],
//["4896"],
//["4897"],
//["4898"],
//["4899"],
//["4900"],
//["4901"],
//["4902"],
//["4903"],
//["4904"],
//["4905"],
//["4906"],
//["4907"],
//["4908"],
//["4909"],
//["4910"],
//["4911"],
//["4912"],
//["4913"],
//["4914"],
//["4915"],
//["4916"],
//["4917"],
//["4918"],
//["4919"],
//["4920"],
//["4921"],
//["4922"],
//["4923"],
//["4924"],
//["4925"],
//["4926"],
//["4927"],
//["4928"],
//["4929"],
//["4930"],
//["4931"],
//["4932"],
//["4933"],
//["4934"],
//["4935"],
//["4936"],
//["4937"],
//["4938"],
//["4939"],
//["4940"],
//["4941"],
//["4942"],
//["4943"],
//["4944"],
//["4945"],
//["4946"],
//["4947"],
//["4948"],
//["4949"],
//["4950"],
//["4951"],
//["4952"],
//["4953"],
//["4954"],
//["4955"],
//["4956"],
//["4957"],
//["4958"],
//["4959"],
//["4960"],
//["4961"],
//["4962"],
//["4963"],
//["4964"],
//["4965"],
//["4966"],
//["4967"],
//["4968"],
//["4969"],
//["4970"],
//["4971"],
//["4972"],
//["4973"],
//["4974"],
//["4975"],
//["4976"],
//["4977"],
//["4978"],
//["4979"],
//["4980"],
//["4981"],
//["4982"],
//["4983"],
//["4984"],
//["4985"],
//["4986"],
//["4987"],
//["4988"],
//["4989"],
//["4990"],
//["4991"],
//["4992"],
//["4993"],
//["4994"],
//["4995"],
//["4996"],
//["4997"],
//["4998"],
//["4999"],
//["5000"],
//["5001"],
//["5002"],
//["5003"],
//["5004"],
//["5005"],
//["5006"],
//["5007"],
//["5008"],
//["5009"],
//["5010"],
//["5011"],
//["5012"],
//["5013"],
//["5014"],
//["5015"],
//["5016"],
//["5017"],
//["5018"],
//["5019"],
//["5020"],
//["5021"],
//["5022"],
//["5023"],
//["5024"],
//["5025"],
//["5026"],
//["5027"],
//["5028"],
//["5029"],
//["5030"],
//["5031"],
//["5032"],
//["5033"],
//["5034"],
//["5035"],
//["5036"],
//["5037"],
//["5038"],
//["5039"],
//["5040"],
//["5041"],
//["5043"],
//["5044"],
//["5045"],
//["5046"],
//["5047"],
//["5048"],
//["5049"],
//["5050"],
//["5051"],
//["5052"],
//["5053"],
//["5054"],
//["5055"],
//["5056"],
//["5057"],
//["5058"],
//["5059"],
//["5060"],
//["5061"],
//["5062"],
//["5063"],
//["5064"],
//["5065"],
//["5066"],
//["5067"],
//["5068"],
//["5069"],
//["5070"],
//["5071"],
//["5072"],
//["5073"],
//["5074"],
//["5075"],
//["5076"],
//["5077"],
//["5078"],
//["5079"],
//["5080"],
//["5081"],
//["5082"],
//["5083"],
//["5084"],
//["5085"],
//["5086"],
//["5087"],
//["5088"],
//["5089"],
//["5090"],
//["5091"],
//["5092"],
//["5093"],
//["5094"],
//["5095"],
//["5096"],
//["5097"],
//["5098"],
//["5099"],
//["5100"],
//["5101"],
//["5102"],
//["5103"],
//["5104"],
//["5105"],
//["5106"],
//["5107"],
//["5108"],
//["5109"],
//["5110"],
//["5111"],
//["5112"],
//["5113"],
//["5114"],
//["5115"],
//["5116"],
//["5117"],
//["5118"],
//["5119"],
//["5120"],
//["5121"],
//["5122"],
//["5123"],
//["5124"],
//["5125"],
//["5126"],
//["5127"],
//["5128"],
//["5129"],
//["5130"],
//["5131"],
//["5132"],
//["5133"],
//["5134"],
//["5135"],
//["5136"],
//["5137"],
//["5138"],
//["5139"],
//["5140"],
//["5141"],
//["5142"],
//["5143"],
//["5144"],
//["5145"],
//["5146"],
//["5147"],
//["5148"],
//["5149"],
//["5150"],
//["5151"],
//["5152"],
//["5153"],
//["5154"],
//["5155"],
//["5156"],
//["5157"],
//["5158"],
//["5159"],
//["5160"],
//["5161"],
//["5162"],
//["5163"],
//["5164"],
//["5165"],
//["5166"],
//["5167"],
//["5168"],
//["5169"],
//["5170"],
//["5171"],
//["5172"],
//["5173"],
//["5174"],
//["5175"],
//["5176"],
//["5177"],
//["5178"],
//["5179"],
//["5180"],
//["5181"],
//["5182"],
//["5183"],
//["5184"],
//["5185"],
//["5186"],
//["5187"],
//["5188"],
//["5189"],
//["5190"],
//["5191"],
//["5192"],
//["5193"],
//["5194"],
//["5195"],
//["5196"],
//["5197"],
//["5198"],
//["5199"],
//["5200"],
//["5201"],
//["5202"],
//["5203"],
//["5204"],
//["5205"],
//["5206"],
//["5207"],
//["5208"],
//["5209"],
//["5210"],
//["5211"],
//["5212"],
//["5213"],
//["5214"],
//["5215"],
//["5216"],
//["5217"],
//["5218"],
//["5219"],
//["5220"],
//["5221"],
//["5222"],
//["5223"],
//["5224"],
//["5225"],
//["5226"],
//["5227"],
//["5228"],
//["5229"],
//["5230"],
//["5231"],
//["5232"],
//["5233"],
//["5234"],
//["5235"],
//["5236"],
//["5237"],
//["5238"],
//["5239"],
//["5240"],
//["5241"],
//["5242"],
//["5243"],
//["5244"],
//["5245"],
//["5246"],
//["5247"],
//["5248"],
//["5249"],
//["5250"],
//["5251"],
//["5252"],
//["5253"],
//["5254"],
//["5255"],
//["5256"],
//["5257"],
//["5258"],
//["5259"],
//["5260"],
//["5261"],
//["5262"],
//["5263"],
//["5264"],
//["5265"],
//["5266"],
//["5267"],
//["5268"],
//["5269"],
//["5270"],
//["5271"],
//["5272"],
//["5273"],
//["5274"],
//["5275"],
//["5276"],
//["5277"],
//["5278"],
//["5279"],
//["5280"],
//["5281"],
//["5282"],
//["5283"],
//["5284"],
//["5285"],
//["5286"],
//["5287"],
//["5288"],
//["5289"],
//["5290"],
//["5291"],
//["5292"],
//["5293"],
//["5294"],
//["5295"],
//["5296"],
//["5297"],
//["5298"],
//["5299"],
//["5300"],
//["5301"],
//["5302"],
//["5303"],
//["5304"],
//["5305"],
//["5306"],
//["5307"],
//["5308"],
//["5309"],
//["5310"],
//["5311"],
//["5312"],
//["5313"],
//["5314"],
//["5315"],
//["5316"],
//["5317"],
//["5318"],
//["5319"],
//["5320"],
//["5321"],
//["5322"],
//["5323"],
//["5324"],
//["5325"],
//["5326"],
//["5327"],
//["5328"],
//["5329"],
//["5330"],
//["5331"],
//["5332"],
//["5333"],
//["5334"],
//["5335"],
//["5336"],
//["5337"],
//["5338"],
//["5339"],
//["5340"],
//["5341"],
//["5342"],
//["5343"],
//["5344"],
//["5345"],
//["5346"],
//["5347"],
//["5348"],
//["5349"],
//["5350"],
//["5351"],
//["5352"],
//["5353"],
//["5354"],
//["5355"],
//["5356"],
//["5357"],
//["5358"],
//["5359"],
//["5360"],
//["5361"],
//["5362"],
//["5363"],
//["5364"],
//["5365"],
//["5366"],
//["5367"],
//["5368"],
//["5369"],
//["5370"],
//["5371"],
//["5372"],
//["5373"],
//["5374"],
//["5375"],
//["5376"],
//["5377"],
//["5378"],
//["5379"],
//["5380"],
//["5381"],
//["5382"],
//["5383"],
//["5384"],
//["5385"],
//["5386"],
//["5387"],
//["5388"],
//["5389"],
//["5390"],
//["5391"],
//["5392"],
//["5393"],
//["5394"],
//["5395"],
//["5396"],
//["5397"],
//["5398"],
//["5399"],
//["5400"],
//["5401"],
//["5402"],
//["5403"],
//["5404"],
//["5405"],
//["5406"],
//["5407"],
//["5408"],
//["5409"],
//["5410"],
//["5411"],
//["5412"],
//["5413"],
//["5414"],
//["5415"],
//["5416"],
//["5417"],
//["5418"],
//["5419"],
//["5420"],
//["5421"],
//["5422"],
//["5423"],
//["5424"],
//["5425"],
//["5426"],
//["5427"],
//["5428"],
//["5429"],
//["5430"],
//["5431"],
//["5432"],
//["5433"],
//["5434"],
//["5435"],
//["5436"],
//["5437"],
//["5438"],
//["5439"],
//["5440"],
//["5441"],
//["5442"],
//["5443"],
//["5444"],
//["5445"],
//["5446"],
//["5447"],
//["5448"],
//["5449"],
//["5450"],
//["5451"],
//["5452"],
//["5453"],
//["5454"],
//["5455"],
//["5456"],
//["5457"],
//["5458"],
//["5459"],
//["5460"],
//["5461"],
//["5462"],
//["5463"],
//["5464"],
//["5465"],
//["5466"],
//["5467"],
//["5468"],
//["5469"],
//["5470"],
//["5471"],
//["5472"],
//["5473"],
//["5474"],
//["5475"],
//["5476"],
//["5477"],
//["5478"],
//["5479"],
//["5480"],
//["5481"],
//["5482"],
//["5483"],
//["5484"],
//["5485"],
//["5486"],
//["5487"],
//["5488"],
//["5489"],
//["5490"],
//["5491"],
//["5492"],
//["5493"],
//["5494"],
//["5495"],
//["5496"],
//["5497"],
//["5498"],
//["5499"],
//["5500"],
//["5501"],
//["5502"],
//["5503"],
//["5504"],
//["5505"],
//["5506"],
//["5507"],
//["5508"],
//["5509"],
//["5510"],
//["5511"],
//["5512"],
//["5513"],
//["5514"],
//["5515"],
//["5516"],
//["5517"],
//["5518"],
//["5519"],
//["5520"],
//["5521"],
//["5522"],
//["5523"],
//["5524"],
//["5525"],
//["5526"],
//["5527"],
//["5528"],
//["5529"],
//["5530"],
//["5531"],
//["5532"],
//["5533"],
//["5534"],
//["5535"],
//["5536"],
//["5537"],
//["5538"],
//["5539"],
//["5540"],
//["5541"],
//["5543"],
//["5544"],
//["5545"],
//["5546"],
//["5547"],
//["5548"],
//["5549"],
//["5550"],
//["5551"],
//["5552"],
//["5553"],
//["5554"],
//["5555"],
//["5556"],
//["5557"],
//["5558"],
//["5559"],
//["5560"],
//["5561"],
//["5562"],
//["5563"],
//["5564"],
//["5565"],
//["5566"],
//["5567"],
//["5568"],
//["5569"],
//["5570"],
//["5571"],
//["5572"],
//["5573"],
//["5574"],
//["5575"],
//["5576"],
//["5577"],
//["5578"],
//["5579"],
//["5580"],
//["5581"],
//["5582"],
//["5583"],
//["5584"],
//["5585"],
//["5586"],
//["5587"],
//["5588"],
//["5589"],
//["5590"],
//["5591"],
//["5592"],
//["5593"],
//["5594"],
//["5595"],
//["5596"],
//["5597"],
//["5598"],
//["5599"],
//["5600"],
//["5601"],
//["5602"],
//["5603"],
//["5604"],
//["5605"],
//["5606"],
//["5607"],
//["5608"],
//["5609"],
//["5610"],
//["5611"],
//["5612"],
//["5613"],
//["5614"],
//["5615"],
//["5616"],
//["5617"],
//["5618"],
//["5619"],
//["5620"],
//["5621"],
//["5622"],
//["5623"],
//["5624"],
//["5625"],
//["5626"],
//["5627"],
//["5628"],
//["5629"],
//["5630"],
//["5631"],
//["5632"],
//["5633"],
//["5634"],
//["5635"],
//["5636"],
//["5637"],
//["5638"],
//["5639"],
//["5640"],
//["5641"],
//["5642"],
//["5643"],
//["5644"],
//["5645"],
//["5646"],
//["5647"],
//["5648"],
//["5649"],
//["5650"],
//["5651"],
//["5652"],
//["5653"],
//["5654"],
//["5655"],
//["5656"],
//["5657"],
//["5658"],
//["5659"],
//["5660"],
//["5661"],
//["5662"],
//["5663"],
//["5664"],
//["5665"],
//["5666"],
//["5667"],
//["5668"],
//["5669"],
//["5670"],
//["5671"],
//["5672"],
//["5673"],
//["5674"],
//["5675"],
//["5676"],
//["5677"],
//["5678"],
//["5679"],
//["5680"],
//["5681"],
//["5682"],
//["5683"],
//["5684"],
//["5685"],
//["5686"],
//["5687"],
//["5688"],
//["5689"],
//["5690"],
//["5691"],
//["5692"],
//["5693"],
//["5694"],
//["5695"],
//["5696"],
//["5697"],
//["5698"],
//["5699"],
//["5700"],
//["5701"],
//["5702"],
//["5703"],
//["5704"],
//["5705"],
//["5706"],
//["5707"],
//["5708"],
//["5709"],
//["5710"],
//["5711"],
//["5712"],
//["5713"],
//["5714"],
//["5715"],
//["5716"],
//["5717"],
//["5718"],
//["5719"],
//["5720"],
//["5721"],
//["5722"],
//["5723"],
//["5724"],
//["5725"],
//["5726"],
//["5727"],
//["5728"],
//["5729"],
//["5730"],
//["5731"],
//["5732"],
//["5733"],
//["5734"],
//["5735"],
//["5736"],
//["5737"],
//["5738"],
//["5739"],
//["5740"],
//["5741"],
//["5742"],
//["5743"],
//["5744"],
//["5745"],
//["5746"],
//["5747"],
//["5748"],
//["5749"],
//["5750"],
//["5751"],
//["5752"],
//["5753"],
//["5754"],
//["5755"],
//["5756"],
//["5757"],
//["5758"],
//["5759"],
//["5760"],
//["5761"],
//["5762"],
//["5763"],
//["5764"],
//["5765"],
//["5766"],
//["5767"],
//["5768"],
//["5769"],
//["5770"],
//["5771"],
//["5772"],
//["5773"],
//["5774"],
//["5775"],
//["5776"],
//["5777"],
//["5778"],
//["5779"],
//["5780"],
//["5781"],
//["5782"],
//["5783"],
//["5784"],
//["5785"],
//["5786"],
//["5787"],
//["5788"],
//["5789"],
//["5790"],
//["5791"],
//["5792"],
//["5793"],
//["5794"],
//["5795"],
//["5796"],
//["5797"],
//["5798"],
//["5799"],
//["5800"],
//["5801"],
//["5802"],
//["5803"],
//["5804"],
//["5805"],
//["5806"],
//["5807"],
//["5808"],
//["5809"],
//["5810"],
//["5811"],
//["5812"],
//["5813"],
//["5814"],
//["5815"],
//["5816"],
//["5817"],
//["5818"],
//["5819"],
//["5820"],
//["5821"],
//["5822"],
//["5823"],
//["5824"],
//["5825"],
//["5826"],
//["5827"],
//["5828"],
//["5829"],
//["5830"],
//["5831"],
//["5832"],
//["5833"],
//["5834"],
//["5835"],
//["5836"],
//["5837"],
//["5838"],
//["5839"],
//["5840"],
//["5841"],
//["5842"],
//["5843"],
//["5844"],
//["5845"],
//["5846"],
//["5847"],
//["5848"],
//["5849"],
//["5850"],
//["5851"],
//["5852"],
//["5853"],
//["5854"],
//["5855"],
//["5856"],
//["5857"],
//["5858"],
//["5859"],
//["5860"],
//["5861"],
//["5862"],
//["5863"],
//["5864"],
//["5865"],
//["5866"],
//["5867"],
//["5868"],
//["5869"],
//["5870"],
//["5871"],
//["5872"],
//["5873"],
//["5874"],
//["5875"],
//["5876"],
//["5877"],
//["5878"],
//["5879"],
//["5880"],
//["5881"],
//["5882"],
//["5883"],
//["5884"],
//["5885"],
//["5886"],
//["5887"],
//["5888"],
//["5889"],
//["5890"],
//["5891"],
//["5892"],
//["5893"],
//["5894"],
//["5895"],
//["5896"],
//["5897"],
//["5898"],
//["5899"],
//["5900"],
//["5901"],
//["5902"],
//["5903"],
//["5904"],
//["5905"],
//["5906"],
//["5907"],
//["5908"],
//["5909"],
//["5910"],
//["5911"],
//["5912"],
//["5913"],
//["5914"],
//["5915"],
//["5916"],
//["5917"],
//["5918"],
//["5919"],
//["5920"],
//["5921"],
//["5922"],
//["5923"],
//["5924"],
//["5925"],
//["5926"],
//["5927"],
//["5928"],
//["5929"],
//["5930"],
//["5931"],
//["5932"],
//["5933"],
//["5934"],
//["5935"],
//["5936"],
//["5937"],
//["5938"],
//["5939"],
//["5940"],
//["5941"],
//["5942"],
//["5943"],
//["5944"],
//["5945"],
//["5946"],
//["5947"],
//["5948"],
//["5949"],
//["5950"],
//["5951"],
//["5952"],
//["5953"],
//["5954"],
//["5955"],
//["5956"],
//["5957"],
//["5958"],
//["5959"],
//["5960"],
//["5961"],
//["5962"],
//["5963"],
//["5964"],
//["5965"],
//["5966"],
//["5967"],
//["5968"],
//["5969"],
//["5970"],
//["5971"],
//["5972"],
//["5973"],
//["5974"],
//["5975"],
//["5976"],
//["5977"],
//["5978"],
//["5979"],
//["5980"],
//["5981"],
//["5982"],
//["5983"],
//["5984"],
//["5985"],
//["5986"],
//["5987"],
//["5988"],
//["5989"],
//["5990"],
//["5991"],
//["5992"],
//["5993"],
//["5994"],
//["5995"],
//["5996"],
//["5997"],
//["5998"],
//["5999"],
//["6000"],
//["6001"],
//["6002"],
//["6003"],
//["6004"],
//["6005"],
//["6006"],
//["6007"],
//["6008"],
//["6009"],
//["6010"],
//["6011"],
//["6012"],
//["6013"],
//["6014"],
//["6015"],
//["6016"],
//["6017"],
//["6018"],
//["6019"],
//["6020"],
//["6021"],
//["6022"],
//["6023"],
//["6024"],
//["6025"],
//["6026"],
//["6027"],
//["6028"],
//["6029"],
//["6030"],
//["6031"],
//["6032"],
//["6033"],
//["6034"],
//["6035"],
//["6036"],
//["6037"],
//["6038"],
//["6039"],
//["6040"],
//["6041"],
//["6042"],
//["6043"],
//["6044"],
//["6045"],
//["6046"],
//["6047"],
//["6048"],
//["6049"],
//["6050"],
//["6051"],
//["6052"],
//["6053"],
//["6054"],
//["6055"],
//["6056"],
//["6057"],
//["6058"],
//["6059"],
//["6060"],
//["6061"],
//["6062"],
//["6063"],
//["6064"],
//["6065"],
//["6066"],
//["6067"],
//["6068"],
//["6069"],
//["6070"],
//["6071"],
//["6072"],
//["6073"],
//["6074"],
//["6075"],
//["6076"],
//["6077"],
//["6078"],
//["6079"],
//["6080"],
//["6081"],
//["6082"],
//["6083"],
//["6084"],
//["6085"],
//["6086"],
//["6087"],
//["6088"],
//["6089"],
//["6090"],
//["6091"],
//["6092"],
//["6093"],
//["6094"],
//["6095"],
//["6096"],
//["6097"],
//["6098"],
//["6099"],
//["6100"],
//["6101"],
//["6102"],
//["6103"],
//["6104"],
//["6105"],
//["6106"],
//["6107"],
//["6108"],
//["6109"],
//["6110"],
//["6111"],
//["6112"],
//["6113"],
//["6114"],
//["6115"],
//["6116"],
//["6117"],
//["6118"],
//["6119"],
//["6120"],
//["6121"],
//["6122"],
//["6123"],
//["6124"],
//["6125"],
//["6126"],
//["6127"],
//["6128"],
//["6129"],
//["6130"],
//["6131"],
//["6132"],
//["6133"],
//["6134"],
//["6135"],
//["6136"],
//["6137"],
//["6138"],
//["6139"],
//["6140"],
//["6141"],
//["6142"],
//["6143"],
//["6144"],
//["6145"],
//["6146"],
//["6147"],
//["6148"],
//["6149"],
//["6150"],
//["6151"],
//["6152"],
//["6153"],
//["6154"],
//["6155"],
//["6156"],
//["6157"],
//["6158"],
//["6159"],
//["6160"],
//["6161"],
//["6162"],
//["6163"],
//["6164"],
//["6165"],
//["6166"],
//["6167"],
//["6168"],
//["6169"],
//["6170"],
//["6171"],
//["6172"],
//["6173"],
//["6174"],
//["6175"],
//["6176"],
//["6177"],
//["6178"],
//["6179"],
//["6180"],
//["6181"],
//["6182"],
//["6183"],
//["6184"],
//["6185"],
//["6186"],
//["6187"],
//["6188"],
//["6189"],
//["6190"],
//["6191"],
//["6192"],
//["6193"],
//["6194"],
//["6195"],
//["6196"],
//["6197"],
//["6198"],
//["6199"],
//["6200"],
//["6201"],
//["6202"],
//["6203"],
//["6204"],
//["6205"],
//["6206"],
//["6207"],
//["6208"],
//["6209"],
//["6210"],
//["6211"],
//["6212"],
//["6213"],
//["6214"],
//["6215"],
//["6216"],
//["6217"],
//["6218"],
//["6219"],
//["6220"],
//["6221"],
//["6222"],
//["6223"],
//["6224"],
//["6225"],
//["6226"],
//["6227"],
//["6228"],
//["6229"],
//["6230"],
//["6231"],
//["6232"],
//["6233"],
//["6234"],
//["6235"],
//["6236"],
//["6237"],
//["6238"],
//["6239"],
//["6240"],
//["6241"],
//["6242"],
//["6243"],
//["6244"],
//["6245"],
//["6246"],
//["6247"],
//["6248"],
//["6249"],
//["6250"],
//["6251"],
//["6252"],
//["6253"],
//["6254"],
//["6255"],
//["6256"],
//["6257"],
//["6258"],
//["6259"],
//["6260"],
//["6261"],
//["6262"],
//["6263"],
//["6264"],
//["6265"],
//["6266"],
//["6267"],
//["6268"],
//["6269"],
//["6270"],
//["6271"],
//["6272"],
//["6273"],
//["6274"],
//["6275"],
//["6276"],
//["6277"],
//["6278"],
//["6279"],
//["6280"],
//["6281"],
//["6282"],
//["6283"],
//["6284"],
//["6285"],
//["6286"],
//["6287"],
//["6288"],
//["6289"],
//["6290"],
//["6291"],
//["6292"],
//["6293"],
//["6294"],
//["6295"],
//["6296"],
//["6297"],
//["6298"],
//["6299"],
//["6300"],
//["6301"],
//["6302"],
//["6303"],
//["6304"],
//["6305"],
//["6306"],
//["6307"],
//["6308"],
//["6309"],
//["6310"],
//["6311"],
//["6312"],
//["6313"],
//["6314"],
//["6315"],
//["6316"],
//["6317"],
//["6318"],
//["6319"],
//["6320"],
//["6321"],
//["6322"],
//["6323"],
//["6324"],
//["6325"],
//["6326"],
//["6327"],
//["6328"],
//["6329"],
//["6330"],
//["6331"],
//["6332"],
//["6333"],
//["6334"],
//["6335"],
//["6336"],
//["6337"],
//["6338"],
//["6339"],
//["6340"],
//["6341"],
//["6342"],
//["6343"],
//["6344"],
//["6345"],
//["6346"],
//["6347"],
//["6348"],
//["6349"],
//["6350"],
//["6351"],
//["6352"],
//["6353"],
//["6354"],
//["6355"],
//["6356"],
//["6357"],
//["6358"],
//["6359"],
//["6360"],
//["6361"],
//["6362"],
//["6363"],
//["6364"],
//["6365"],
//["6366"],
//["6367"],
//["6368"],
//["6369"],
//["6370"],
//["6371"],
//["6372"],
//["6373"],
//["6374"],
//["6375"],
//["6376"],
//["6377"],
//["6378"],
//["6379"],
//["6380"],
//["6381"],
//["6382"],
//["6383"],
//["6384"],
//["6385"],
//["6386"],
//["6387"],
//["6388"],
//["6389"],
//["6390"],
//["6391"],
//["6392"],
//["6393"],
//["6394"],
//["6395"],
//["6396"],
//["6397"],
//["6398"],
//["6399"],
//["6400"],
//["6401"],
//["6402"],
//["6403"],
//["6404"],
//["6405"],
//["6406"],
//["6407"],
//["6408"],
//["6409"],
//["6410"],
//["6411"],
//["6412"],
//["6413"],
//["6414"],
//["6415"],
//["6416"],
//["6417"],
//["6418"],
//["6419"],
//["6420"],
//["6421"],
//["6422"],
//["6423"],
//["6424"],
//["6425"],
//["6426"],
//["6427"],
//["6428"],
//["6429"],
//["6430"],
//["6431"],
//["6432"],
//["6433"],
//["6434"],
//["6435"],
//["6436"],
//["6437"],
//["6438"],
//["6439"],
//["6440"],
//["6441"],
//["6442"],
//["6443"],
//["6444"],
//["6445"],
//["6446"],
//["6447"],
//["6448"],
//["6449"],
//["6450"],
//["6451"],
//["6452"],
//["6453"],
//["6454"],
//["6455"],
//["6456"],
//["6457"],
//["6458"],
//["6459"],
//["6460"],
//["6461"],
//["6462"],
//["6463"],
//["6464"],
//["6465"],
//["6466"],
//["6467"],
//["6468"],
//["6469"],
//["6470"],
//["6471"],
//["6472"],
//["6473"],
//["6474"],
//["6475"],
//["6476"],
//["6477"],
//["6478"],
//["6479"],
//["6480"],
//["6481"],
//["6482"],
//["6483"],
//["6484"],
//["6485"],
//["6486"],
//["6487"],
//["6488"],
//["6489"],
//["6490"],
//["6491"],
//["6492"],
//["6493"],
//["6494"],
//["6495"],
//["6496"],
//["6497"],
//["6498"],
//["6499"],
//["6500"],
//["6501"],
//["6502"],
//["6503"],
//["6504"],
//["6505"],
//["6506"],
//["6507"],
//["6508"],
//["6509"],
//["6510"],
//["6511"],
//["6512"],
//["6513"],
//["6514"],
//["6515"],
//["6516"],
//["6517"],
//["6518"],
//["6519"],
//["6520"],
//["6521"],
//["6522"],
//["6523"],
//["6524"],
//["6525"],
//["6526"],
//["6527"],
//["6528"],
//["6529"],
//["6530"],
//["6531"],
//["6532"],
//["6533"],
//["6534"],
//["6535"],
//["6536"],
//["6537"],
//["6538"],
//["6539"],
//["6540"],
//["6541"],
//["6542"],
//["6543"],
//["6544"],
//["6545"],
//["6546"],
//["6547"],
//["6548"],
//["6549"],
//["6550"],
//["6551"],
//["6552"],
//["6553"],
//["6554"],
//["6555"],
//["6556"],
//["6557"],
//["6558"],
//["6559"],
//["6560"],
//["6561"],
//["6562"],
//["6563"],
//["6564"],
//["6565"],
//["6566"],
//["6567"],
//["6568"],
//["6569"],
//["6570"],
//["6571"],
//["6572"],
//["6573"],
//["6574"],
//["6575"],
//["6576"],
//["6577"],
//["6578"],
//["6579"],
//["6580"],
//["6581"],
//["6582"],
//["6583"],
//["6584"],
//["6585"],
//["6586"],
//["6587"],
//["6588"],
//["6589"],
//["6590"],
//["6591"],
//["6592"],
//["6593"],
//["6594"],
//["6595"],
//["6596"],
//["6597"],
//["6598"],
//["6599"],
//["6600"],
//["6601"],
//["6602"],
//["6603"],
//["6604"],
//["6605"],
//["6606"],
//["6607"],
//["6608"],
//["6609"],
//["6610"],
//["6611"],
//["6612"],
//["6613"],
//["6614"],
//["6615"],
//["6616"],
//["6617"],
//["6618"],
//["6619"],
//["6620"],
//["6621"],
//["6622"],
//["6623"],
//["6624"],
//["6625"],
//["6626"],
//["6627"],
//["6628"],
//["6629"],
//["6630"],
//["6631"],
//["6632"],
//["6633"],
//["6634"],
//["6635"],
//["6636"],
//["6637"],
//["6638"],
//["6639"],
//["6640"],
//["6641"],
//["6642"],
//["6643"],
//["6644"],
//["6645"],
//["6646"],
//["6647"],
//["6648"],
//["6649"],
//["6650"],
//["6651"],
//["6652"],
//["6653"],
//["6654"],
//["6655"],
//["6656"],
//["6657"],
//["6658"],
//["6659"],
//["6660"],
//["6661"],
//["6662"],
//["6663"],
//["6664"],
//["6665"],
//["6666"],
//["6667"],
//["6668"],
//["6669"],
//["6670"],
//["6671"],
//["6672"],
//["6673"],
//["6674"],
//["6675"],
//["6676"],
//["6677"],
//["6678"],
//["6679"],
//["6680"],
//["6681"],
//["6682"],
//["6683"],
//["6684"],
//["6685"],
//["6686"],
//["6687"],
//["6688"],
//["6689"],
//["6690"],
//["6691"],
//["6692"],
//["6693"],
//["6694"],
//["6695"],
//["6696"],
//["6697"],
//["6698"],
//["6699"],
//["6700"],
//["6701"],
//["6702"],
//["6703"],
//["6704"],
//["6705"],
//["6706"],
//["6707"],
//["6708"],
//["6709"],
//["6710"],
//["6711"],
//["6712"],
//["6713"],
//["6714"],
//["6715"],
//["6716"],
//["6717"],
//["6718"],
//["6719"],
//["6720"],
//["6721"],
//["6722"],
//["6723"],
//["6724"],
//["6725"],
//["6726"],
//["6727"],
//["6728"],
//["6729"],
//["6730"],
//["6731"],
//["6732"],
//["6733"],
//["6734"],
//["6735"],
//["6736"],
//["6737"],
//["6738"],
//["6739"],
//["6740"],
//["6741"],
//["6742"],
//["6743"],
//["6744"],
//["6745"],
//["6746"],
//["6747"],
//["6748"],
//["6749"],
//["6750"],
//["6751"],
//["6752"],
//["6753"],
//["6754"],
//["6755"],
//["6756"],
//["6757"],
//["6758"],
//["6759"],
//["6760"],
//["6761"],
//["6762"],
//["6763"],
//["6764"],
//["6765"],
//["6766"],
//["6767"],
//["6768"],
//["6769"],
//["6770"],
//["6771"],
//["6772"],
//["6773"],
//["6774"],
//["6775"],
//["6776"],
//["6777"],
//["6778"],
//["6779"],
//["6780"],
//["6781"],
//["6782"],
//["6783"],
//["6784"],
//["6785"],
//["6786"],
//["6787"],
//["6788"],
//["6789"],
//["6790"],
//["6791"],
//["6792"],
//["6793"],
//["6794"],
//["6795"],
//["6796"],
//["6797"],
//["6798"],
//["6799"],
//["6800"],
//["6801"],
//["6802"],
//["6803"],
//["6804"],
//["6805"],
//["6806"],
//["6807"],
//["6808"],
//["6809"],
//["6810"],
//["6811"],
//["6812"],
//["6813"],
//["6814"],
//["6815"],
//["6816"],
//["6817"],
//["6818"],
//["6819"],
//["6820"],
//["6821"],
//["6822"],
//["6823"],
//["6824"],
//["6825"],
//["6826"],
//["6827"],
//["6828"],
//["6829"],
//["6830"],
//["6831"],
//["6832"],
//["6833"],
//["6834"],
//["6835"],
//["6836"],
//["6837"],
//["6838"],
//["6839"],
//["6840"],
//["6841"],
//["6842"],
//["6843"],
//["6844"],
//["6845"],
//["6846"],
//["6847"],
//["6848"],
//["6849"],
//["6850"],
//["6851"],
//["6852"],
//["6853"],
//["6854"],
//["6855"],
//["6856"],
//["6857"],
//["6858"],
//["6859"],
//["6860"],
//["6861"],
//["6862"],
//["6863"],
//["6864"],
//["6865"],
//["6866"],
//["6867"],
//["6868"],
//["6869"],
//["6870"],
//["6871"],
//["6872"],
//["6873"],
//["6874"],
//["6875"],
//["6876"],
//["6877"],
//["6878"],
//["6879"],
//["6880"],
//["6881"],
//["6882"],
//["6883"],
//["6884"],
//["6885"],
//["6886"],
//["6887"],
//["6888"],
//["6889"],
//["6890"],
//["6891"],
//["6892"],
//["6893"],
//["6894"],
//["6895"],
//["6896"],
//["6897"],
//["6898"],
//["6899"],
//["6900"],
//["6901"],
//["6902"],
//["6903"],
//["6904"],
//["6905"],
//["6906"],
//["6907"],
//["6908"],
//["6909"],
//["6910"],
//["6911"],
//["6912"],
//["6913"],
//["6914"],
//["6915"],
//["6916"],
//["6917"],
//["6918"],
//["6919"],
//["6920"],
//["6921"],
//["6922"],
//["6923"],
//["6924"],
//["6925"],
//["6926"],
//["6927"],
//["6928"],
//["6929"],
//["6930"],
//["6931"],
//["6932"],
//["6933"],
//["6934"],
//["6935"],
//["6936"],
//["6937"],
//["6938"],
//["6939"],
//["6940"],
//["6941"],
//["6942"],
//["6943"],
//["6944"],
//["6945"],
//["6946"],
//["6947"],
//["6948"],
//["6949"],
//["6950"],
//["6951"],
//["6952"],
//["6953"],
//["6954"],
//["6955"],
//["6956"],
//["6957"],
//["6958"],
//["6959"],
//["6960"],
//["6961"],
//["6962"],
//["6963"],
//["6964"],
//["6965"],
//["6966"],
//["6967"],
//["6968"],
//["6969"],
//["6970"],
//["6971"],
//["6972"],
//["6973"],
//["6974"],
//["6975"],
//["6976"],
//["6977"],
//["6978"],
//["6979"],
//["6980"],
//["6981"],
//["6982"],
//["6983"],
//["6984"],
//["6985"],
//["6986"],
//["6987"],
//["6988"],
//["6989"],
//["6990"],
//["6991"],
//["6992"],
//["6993"],
//["6994"],
//["6995"],
//["6996"],
//["6997"],
//["6998"],
//["6999"],
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Performance\PerformanceTests.cs
/*
// This test takes around 40s-60s to run, which is as long as all of the other tests.
// This category allows us to exclude it from the set of tests to run.
// In the IDE: set the test filter in the Test Explorer to the following
//      -Trait:"Slow"
// dotnet test or vstest.console.exe: pass the following command line argument
//       --TestCaseFilter:"TestCategory!=Slow"
// Repro for https://github.com/SonarSource/sonar-dotnet/issues/2474
// See notes in the test case file for more info.
// Analyzers known to timeout against this test code
// (note: this test doesn't cover the utility analyzers):
/// <summary>
/// This method runs each of the supplied C# analyzers in series against the compilation.
/// Any analyzer that takes longer than a specifed timeout is reported and that analysis is stopped.
/// NOTE: the utility analyzers won't run because the required analysis settings are not set
/// by the test.
/// </summary>
// Run an initial analysis so any startup costs aren't attributed to the first analyzer to be tested
// Executing one analyzer at a time (running them in parallel can skew the results)
// Write to the DEBUG window so we can see what's happening in the output window in the IDE
// Anything in expectedSlowAnalyzers should be slow;
// everything else should not time out.
// Also dump the output to disk and attach it to the test result.
// Note that VS will automatically delete the test results if the
// test passed.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Properties\AssemblyInfo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\ResourceTests\GeneratedResourcesTest.cs
/*
// S1234_c# or S1234_vb.net
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\ResourceTests\SomeResources.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
/// <summary>
///   Overrides the current thread's CurrentUICulture property for all
///   resource lookups using this strongly typed resource class.
/// </summary>
/// <summary>
///   Looks up a localized string similar to MyValue.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AbstractTypesShouldNotHaveConstructorsTests.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AesManagedShouldBeWithSecureModeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AllBranchesShouldNotHaveSameImplementationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AnonymousDelegateEventUnsubscribeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ArgumentSpecifiedForCallerInfoParameterTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ArrayCovarianceTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ArrayCreationLongSyntaxTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ArrayDesignatorOnVariableTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ArrayInitializationMultipleStatementsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AssemblyLoadShouldBeUsedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AssertionArgsShouldBePassedInCorrectOrderTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AssignmentInsideSubExpressionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AsyncAwaitIdentifierTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AsyncVoidMethodTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AvoidExcessiveClassCouplingTest.cs
/*
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 1 to the maximum authorized 0 or less.}}
// +1 for dictionary
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 4 to the maximum authorized 0 or less.}}
// +1 for IDictionary
// +1 for IEnumerable, +1 for IDisposable
// +1 for ICloneable
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 3 to the maximum authorized 0 or less.}}
// +1 for IDictionary, +1 for IDisposable, +1 for ICloneable
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 6 to the maximum authorized 0 or less.}}
// +1 for IList, +1 for ICollection, +1 for IEnumerable, +1 for IComparer, +1 for Stack, +1 for Queue
// Compliant, Task types are not counted
// Compliant, Action types are not counted
// Compliant, Func types are not counted
// Compliant, pointers are not counted
// Error [CS0214]
// Compliant, enums are not counted
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 1 to the maximum authorized 0 or less.}}
// +1 IEnumerable
// Compliant, pointers are not counted
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 5 to the maximum authorized 0 or less.}}
// accessibility
// static
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 9 to the maximum authorized 0 or less.}}
// accessibility
// static
// accessor bodies
// expression body
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 6 to the maximum authorized 0 or less.}}
// accessibility
// +1 IList
// +1 ICollection
// +1 IEnumerable
// +1 IEnumerator
// parameters
// +1 IEqualityComparer, +1 Stack
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 9 to the maximum authorized 0 or less.}}
// accessibility
// +1 EventHandler, +1 IList
// +1 ICollection
// +1 IEnumerable
// +1 IEnumerator
// static
// +1 IEqualityComparer
// accessor bodies
// +1 Stack
// +1 Queue
// +1 List
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 10 to the maximum authorized 0 or less.}}
// accessibility
// +1 IList
// +1 ICollection
// +1 IEnumerable
// +1 IEnumerator
// return type
// +1 IEqualityComparer
// generic constraints
// +1 Stack
// method body
// +1 Queue
// +1 Console
// expression body
// +1 List
// +1 Debug
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 1 to the maximum authorized 0 or less.}}
// +1 IList
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 1 to the maximum authorized 0 or less.}}
// +1 ICollection
// Noncompliant {{Split this struct into smaller and more specialized ones to reduce its dependencies on other classes from 1 to the maximum authorized 0 or less.}}
// +1 IList
// Noncompliant {{Split this struct into smaller and more specialized ones to reduce its dependencies on other classes from 1 to the maximum authorized 0 or less.}}
// +1 ICollection
// Noncompliant {{Split this interface into smaller and more specialized ones to reduce its dependencies on other classes from 1 to the maximum authorized 0 or less.}}
// +1 IList
// interfaces cannot contain other types
// Compliant, self references are not counted
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 2 to the maximum authorized 0 or less.}}
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 2 to the maximum authorized 0 or less.}}
// +1 Exception
// +1 InvalidOperationException
// Compliant, attributes are not counted
// Compliant, types referenced by the nameof expression are not counted
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AvoidExcessiveInheritanceTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\AvoidUnsealedAttributesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\BeginInvokePairedWithEndInvokeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\BinaryOperationWithIdenticalExpressionsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\BooleanCheckInvertedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\BooleanLiteralUnnecessaryTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\BreakOutsideSwitchTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\BypassingAccessibilityTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CallerInformationParametersShouldBeLastTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CallToAsyncMethodShouldNotBeBlockingTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CastConcreteTypeToInterfaceTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CastShouldNotBeDuplicatedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CatchEmptyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CatchRethrowTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CertificateValidationCheckTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CheckArgumentExceptionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CheckFileLicenseTest.cs
/*
// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.";
/*
//-----
// MyHeader
//-----";
//---
// Copyright \(c\) \w*\. All Rights Reserved\. " +
//-{5}\r\n// MyHeader\r\n//-{5}";
// <copyright file="".*\.cs"" company="".*"">\r\n// Copyright \(c\) 2012 All Rights Reserved\r\n// </copyright>\r\n// <author>.*</author>\r\n// <date>.*</date>\r\n// <summary>.*</summary>\r\n", IsRegularExpression = true });
// <copyright file=""ProgramHeader2.cs"" company=""My Company Name"">\r\n// Copyright (c) 2012 All Rights Reserved\r\n// </copyright>\r\n// <author>Name of the Authour</author>\r\n// <date>08/22/2017 12:39:58 AM </date>\r\n// <summary>Class representing a Sample entity</summary>\r\n", IsRegularExpression = false });
// No need to duplicate all test cases from C#, because we are sharing the implementation
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ClassNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ClassNotInstantiatableTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ClassShouldNotBeAbstractTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ClassWithEqualityShouldImplementIEquatableTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ClassWithOnlyStaticMemberTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CognitiveComplexityTest.cs
/*
// FIX ME: Test throws OOM on Azure DevOps
// FIX ME: Test throws OOM on Azure DevOps
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CollectionEmptinessCheckingTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CollectionPropertiesShouldBeReadOnlyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CollectionQuerySimplificationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CollectionsShouldImplementGenericInterfaceTest.cs
/*
// It would be too tedious to implement all those interfaces
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CommentedOutCodeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CommentKeywordTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CommentLineEndTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ComparableInterfaceImplementationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CompareNaNTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ConditionalSimplificationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ConditionalsShouldStartOnNewLineTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ConditionalStructureSameConditionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ConditionalStructureSameImplementationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ConditionalsWithSameConditionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ConditionEvaluatesToConstantTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ConfiguringLoggersTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ConsoleLoggingTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ConstructorArgumentValueShouldExistTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ConstructorOverridableCallTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ConsumeValueTaskCorrectlyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ControlCharacterInStringTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ControllingPermissionsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CookieShouldBeHttpOnlyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CookieShouldBeSecureTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CreatingHashAlgorithmsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\CryptographicKeyShouldNotBeTooShortTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DangerousGetHandleShouldNotBeCalledTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DeadStoresTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DebugAssertHasNoSideEffectsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DeclareEventHandlersCorrectlyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DeclareTypesInNamespacesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DefaultSectionShouldBeFirstOrLastTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DelegateSubtractionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DeliveringDebugFeaturesInProductionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DisposableMemberInNonDisposableClassTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DisposableNotDisposedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DisposableReturnedFromUsingTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DisposableTypesNeedFinalizersTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DisposeFromDisposeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DisposeNotImplementingDisposeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotCallAssemblyGetExecutingAssemblyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotCallExitMethodsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotCallGCSuppressFinalizeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotCatchNullReferenceExceptionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotCatchSystemExceptionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotCheckZeroSizeCollectionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotCopyArraysInPropertiesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotDecreaseMemberVisibilityTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotExposeListTTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotHardcodeCredentialsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotHideBaseClassMethodsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotInstantiateSharedClassesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotLockOnSharedResourceTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotLockWeakIdentityObjectsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotMarkEnumsWithFlagsTest.cs
/*
// Noncompliant
// Secondary
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotNestTernaryOperatorsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotNestTypesInArgumentsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotOverwriteCollectionElementsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotPassSameValueAsMultipleArgumentsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotShiftByZeroOrIntSizeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotTestThisWithIsOperatorTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotThrowFromDestructorsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotUseByValTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotUseCollectionInItsOwnMethodCallsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotUseIifTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotUseLiteralBoolInAssertionsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotUseOutRefParametersTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotUseRandomTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DoNotWriteToStandardOutputTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DontMixIncrementOrDecrementWithOtherOperatorsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\DotNotOverloadOperatorEqualTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EmptyCollectionsShouldNotBeEnumeratedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EmptyMethodTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EmptyNamespaceTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EmptyNestedBlockTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EmptyNullableValueAccessTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EmptyStatementTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EncryptingDataTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EncryptionAlgorithmsShouldBeSecureTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EndStatementUsageTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EnumerableSumInUncheckedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EnumerationValueNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EnumNameHasEnumSuffixTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EnumNameShouldFollowRegexTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EnumsShouldNotBeNamedReservedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EnumStorageNeedsToBeInt32Test.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EqualityOnFloatingPointTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EqualityOnModulusTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EqualsOverrideTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EquatableClassShouldBeSealedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EventHandlerDelegateShouldHaveProperArgumentsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EventHandlerNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EventNameContainsBeforeOrAfterTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\EventNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExceptionConstructorShouldNotThrowTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExceptionRethrowTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExceptionShouldNotBeThrownFromUnexpectedMethodsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExceptionsNeedStandardConstructorsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExceptionsShouldBePublicTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExceptionsShouldBeUsedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExecutingSqlQueriesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExitStatementUsageTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExpandingArchivesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExpectedExceptionAttributeShouldNotBeUsedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExpressionComplexityTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExtensionMethodShouldBeInSeparateNamespaceTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ExtensionMethodShouldNotExtendObjectTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FieldShadowsParentFieldTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FieldShouldBeReadonlyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FieldShouldNotBePublicTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FieldsShouldNotBePublicTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FileLinesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FileShouldEndWithEmptyNewLineTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FinalizerShouldNotBeEmptyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FlagsEnumWithoutInitializerTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FlagsEnumZeroMemberTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ForeachLoopExplicitConversionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ForLoopConditionAlwaysFalseTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ForLoopCounterChangedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ForLoopCounterConditionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ForLoopIncrementSignTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FrameworkTypeNamingTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FunctionComplexityTest.cs
/*
// FIX ME: Test doesn't work on Azure DevOps
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FunctionNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\FunctionNestingDepthTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\GcCollectShouldNotBeCalledTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\GenericInheritanceShouldNotBeRecursiveTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\GenericReadonlyFieldPropertyAssignmentTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\GenericTypeParameterEmptinessCheckingTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\GenericTypeParameterInOutTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\GenericTypeParametersRequiredTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\GenericTypeParameterUnusedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\GetHashCodeEqualsOverrideTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\GetHashCodeMutableTest.cs
/*
// we don't report on this
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\GetTypeWithIsAssignableFromTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\GotoStatementTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\HardcodedIpAddressTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\HttpPostControllerActionShouldValidateInputTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\IfChainWithoutElseTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\IfCollapsibleTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\IfConditionalAlwaysTrueOrFalseTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ImplementIDisposableCorrectlyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ImplementISerializableCorrectlyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ImplementSerializationMethodsCorrectlyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\IndentSingleLineFollowingConditionalTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\IndexedPropertyNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\IndexedPropertyWithMultipleParametersTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\IndexOfCheckAgainstZeroTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\InfiniteRecursionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\InheritedCollidingInterfaceMembersTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\InitializeStaticFieldsInlineTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\InsecureEncryptionAlgorithmTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\InsecureHashAlgorithmTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\InterfaceMethodsShouldBeCallableByChildTypesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\InterfaceNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\InterfacesShouldNotBeEmptyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\InvalidCastToInterfaceTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\InvocationResolvesToOverrideWithParamsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\IssueSuppressionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\LdapConnectionShouldBeSecureTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\LineContinuationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\LineLengthTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\LiteralsShouldNotBePassedAsLocalizedParametersTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\LiteralSuffixUpperCaseTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\LocalVariableNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\LossOfFractionInDivisionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MagicNumberShouldNotBeUsedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MarkAssemblyWithAssemblyVersionAttributeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MarkAssemblyWithAttributeUsageAttributeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MarkAssemblyWithClsCompliantAttributeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MarkAssemblyWithComVisibleAttributeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MarkAssemblyWithNeutralResourcesLanguageAttributeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MarkWindowsFormsMainWithStaThreadTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MemberInitializedToDefaultTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MemberInitializerRedundantTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MemberOverrideCallsBaseMemberTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MemberShadowsOuterStaticMemberTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MemberShouldBeStaticTest.cs
/*
// Handle invalid code causing NullReferenceException: https://github.com/SonarSource/sonar-csharp/issues/819
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MemberShouldNotHaveConflictingTransparencyAttributesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodOverloadOptionalParameterTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodOverloadsShouldBeGroupedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodOverrideAddsParamsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodOverrideChangedDefaultValueTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodOverrideNoParamsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodParameterMissingOptionalTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodParameterUnusedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodShouldBeNamedAccordingToSynchronicityTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodShouldNotOnlyReturnConstantTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodsShouldNotHaveIdenticalImplementationsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodsShouldNotHaveTooManyLinesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MethodsShouldUseBaseTypesTest.cs
/*
// New test case - code doesn't compile but was making analyzer crash
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MultilineBlocksWithoutBraceTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MultipleVariableDeclarationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MutableFieldsShouldNotBePublicReadonlyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\MutableFieldsShouldNotBePublicStaticTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NameOfShouldBeUsedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NamespaceNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NativeMethodsShouldBeWrappedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NegatedIsExpressionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NestedCodeBlockTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NewGuidShouldNotBeUsedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NoExceptionsInFinallyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NonAsyncTaskShouldNotReturnNullTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NonFlagsEnumInBitwiseOperationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NormalizeStringsToUppercaseTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NotAssignedPrivateMemberTest.cs
/*
// Compliant, because of the fixed modifier
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NullPointerDereferenceTest.cs
/*
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\NumberPatternShouldBeRegularTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ObjectCreatedDroppedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ObjectsShouldNotBeDisposedMoreThanOnceTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ObsoleteAttributesNeedExplanationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\OnErrorStatementTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\OperatorOverloadsShouldHaveNamedAlternativesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\OperatorsShouldBeOverloadedConsistentlyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\OptionalParameterNotPassedToBaseCallTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\OptionalParameterTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\OptionalParameterWithDefaultValueTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\OptionalRefOutParameterTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\OrderByRepeatedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\OverrideGetHashCodeOnOverridingEqualsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ParameterAssignedToTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ParameterNamesInPartialMethodTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ParameterNamesShouldNotDuplicateMethodNamesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ParameterNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ParametersCorrectOrderTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ParameterValidationInAsyncShouldBeWrappedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ParameterValidationInYieldShouldBeWrappedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PartCreationPolicyShouldBeUsedWithExportAttributeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PartialMethodNoImplementationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PInvokesShouldNotBeVisibleTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PointersShouldBePrivateTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PreferJaggedArraysOverMultidimensionalTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PrivateConstantFieldNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PrivateFieldNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PrivateFieldUsedAsLocalVariableTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PrivateSharedReadonlyFieldNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PropertiesAccessCorrectFieldTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PropertiesShouldBePreferredTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PropertyGetterWithThrowTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PropertyNamesShouldNotMatchGetMethodsTest.cs
/*
// Missing identifier on purpose
// Missing identifier on purpose
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PropertyNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PropertyToAutoPropertyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PropertyWithArrayTypeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PropertyWriteOnlyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ProvideDeserializationMethodsForOptionalFieldsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PublicConstantFieldNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PublicConstantFieldTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PublicFieldNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PublicMethodArgumentsShouldBeCheckedForNullTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PublicMethodWithMultidimensionalArrayTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PublicSharedReadonlyFieldNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\PureAttributeOnVoidMethodTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ReadingStandardInputTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundancyInConstructorDestructorDeclarationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantArgumentTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantCastTest.cs
/*
// FN - the cast is unneeded
// should not raise because of the generic the cast is mandatory
// FN - the cast is unneeded
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantConditionalAroundAssignmentTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantDeclarationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantExitSelectTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantInheritanceListTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantJumpStatementTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantModifierTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantNullableTypeComparisonTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantNullCheckTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantParenthesesObjectCreationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantParenthesesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantPropertyNamesInAnonymousClassTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantToCharArrayCallTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RedundantToStringCallTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ReferenceEqualityCheckWhenEqualsExistsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ReferenceEqualsOnValueTypeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RequireAttributeUsageAttributeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ReturnEmptyCollectionInsteadOfNullTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ReturnValueIgnoredTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ReversedOperatorsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\RightCurlyBraceStartsLineTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SecurityPInvokeMethodShouldNotBeCalledTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SelfAssignmentTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SerializationConstructorsShouldBeSecuredTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SetLocaleForDataTypesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ShiftDynamicNotIntegerTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ShortCircuitNullPointerDereferenceTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ShouldImplementExportedInterfacesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SillyBitwiseOperationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SimpleDoLoopTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SingleStatementPerLineTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SocketsCreationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SpecifyIFormatProviderOrCultureInfoTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SpecifyStringComparisonTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SqlKeywordsDelimitedBySpaceTest.cs
/*
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StaticFieldInGenericClassTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StaticFieldInitializerOrderTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StaticFieldVisibleTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StaticFieldWrittenFromInstanceConstructorTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StaticFieldWrittenFromInstanceMemberTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StaticSealedClassProtectedMembersTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StreamReadStatementTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StringConcatenationInLoopTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StringConcatenationWithPlusTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StringFormatValidatorTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StringLiteralShouldNotBeDuplicatedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StringOffsetMethodsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StringOperationWithoutCultureTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\StringOrIntegralTypesForIndexersTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SuppressFinalizeUselessTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SwitchCaseFallsThroughToDefaultTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SwitchCasesMinimumThreeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SwitchDefaultClauseEmptyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SwitchSectionShouldNotHaveTooManyStatementsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SwitchShouldNotBeNestedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\SwitchWithoutDefaultTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TabCharacterTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TaskConfigureAwaitTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TernaryOperatorPointlessTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TestClassShouldHaveTestMethodTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TestMethodShouldContainAssertionTest.cs
/*
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TestMethodShouldHaveCorrectSignature.cs
/*
// Additional test cases e.g. partial classes, and methods with multiple faults.
// We have to specify a test framework for the tests, but it doesn't really matter which
// one, so we're using MSTest and only testing a single version.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TestMethodShouldNotBeIgnoredTest.cs
/*
// IgnoreAttribute doesn't contain any reason param
// Ignore without reason no longer exist
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ThisShouldNotBeExposedFromConstructorsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ThreadResumeOrSuspendShouldNotBeCalledTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ThreadStaticNonStaticFieldTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ThreadStaticWithInitializerTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ThrowReservedExceptionsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TooManyGenericParametersTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TooManyLabelsInSwitchTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TooManyParametersTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ToStringNoNullTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TrackNotImplementedExceptionTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TryStatementsWithIdenticalCatchShouldBeMergedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TypeExaminationOnSystemTypeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TypeNamesShouldNotMatchNamespacesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TypeParameterNameTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\TypesShouldNotExtendOutdatedBaseTypesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnaryPrefixOperatorRepeatedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnchangedLocalVariablesShouldBeConstTest.cs
/*
// invalid code
// invalid code
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnconditionalJumpStatementTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UninvokedEventDeclarationTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnnecessaryUsingsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnsignedTypesUsageTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnusedPrivateMemberTest.Constructors.cs
/*
// Noncompliant {{Remove the unused private constructor 'PrivateConstructors'.}}
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Remove the unused private type 'DerivedClass1'.}}
// https://github.com/SonarSource/sonar-csharp/issues/1398
// Noncompliant {{Remove the unused private type 'DerivedClass2'.}}
// Compliant, empty ctors are reported from another rule
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnusedPrivateMemberTest.cs
/*
// https://github.com/SonarSource/sonar-csharp/issues/1195
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, detect usages from assembly level attributes.
// Event handler methods are not reported because in WPF an event handler
// could be added through XAML and no warning will be generated if the
// method is removed, which could lead to serious problems that are hard
// to diagnose.
// Noncompliant
// intentional False Negative
// https://github.com/SonarSource/sonar-csharp/issues/159
// Compliant
// Compliant
// Compliant
// Compliant
// Unity3D does not seem to be available as a nuget package and we cannot use the original classes
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnusedPrivateMemberTest.Fields.cs
/*
// Noncompliant {{Remove the unused private field 'privateField'.}}
//  ^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Remove the unused private field 'x'.}}
//  ^^^^^^^^^^^^^^^^^^^^
//              ^ {{Remove the unused private field 'a'.}}
//                    ^ @-1 {{Remove the unused private field 'c'.}}
// Noncompliant {{Remove this unread private field 'field1' or refactor the code to use its value.}}
// Noncompliant {{Remove this unread private field 'field2' or refactor the code to use its value.}}
// Noncompliant {{Remove this unread private field 'field3' or refactor the code to use its value.}}
// Compliant nameof(field11)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnusedPrivateMemberTest.Methods.cs
/*
// Noncompliant {{Remove the unused private method 'PrivateMethod'.}}
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// See https://github.com/SonarSource/sonar-csharp/issues/888
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnusedPrivateMemberTest.Properties.cs
/*
// Noncompliant {{Remove the unused private property 'PrivateProperty'.}}
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnusedPrivateMemberTest.Types.cs
/*
// Noncompliant {{Remove the unused private type 'InnerPrivateClass'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, internal types are not reported when InternalsVisibleTo is present
// https://github.com/SonarSource/sonar-csharp/issues/1225
// https://github.com/SonarSource/sonar-csharp/issues/904
// When Method() is removed, this class will raise issue
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UnusedReturnValueTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UriShouldNotBeHardcodedTest.cs
/*
// for VirtualFileResult
// for Controller
// for IRouter and VirtualPathData
// for IRouteBuilder
// for IActionResult
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseConstantsWhereAppropriateTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseCurlyBracesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseGenericEventHandlerInstancesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseGenericWithRefParametersTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseNumericLiteralSeparatorTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseParamsForVariableArgumentsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseShortCircuitingOperatorTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseStringIsNullOrEmptyTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseUriInsteadOfStringTest.cs
/*
// Compliant - invalid code
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseValueParameterTest.cs
/*
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseWhileLoopInsteadTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UseWithStatementTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UsingCommandLineArgumentsTest.cs
/*
// Noncompliant
// Compliant, we raise only on methods with implementation
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UsingCookiesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\UsingRegularExpressionsTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ValuesUselesslyIncrementedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\ValueTypeShouldImplementIEquatableTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\VariableShadowsFieldTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\VariableUnusedTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\VirtualEventFieldTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\WcfMissingContractAttributeTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\WcfNonVoidOneWayTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\Utilities\FileMetadataAnalyzerTest.cs
/*
// This is added by Verifier, we will skip it when building the project
// This file is not autogenerated
// "ExtraEmptyFile.g.cs" is automatically added by Verifier
// The first message is for ExtraEmptyFile.g.cs, then is our list
// We need to set protected properties and this class exists just to enable the analyzer
// without bothering with additional files with parameters
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\Rules\Utilities\UtilityAnalyzerBaseTests.cs
/*
// we do not test what is read from the SonarLint file, but we need it
// the output path is inside this file:
// Act
// Assert
// Act
// Assert
// Act
// Assert
// Act
// Assert
// Act
// Assert
// Act
// Assert
// line number in SQ starts from 1, Roslyn starts from 0
// We can't use Mock<SourceText> because SourceText is an abstract class
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\SymbolicExecution\ExplodedGraphTests.cs
/*
// Special case with manual checks
// b has value, but not true or false
// not out/ref parameter and LVA says dead
// Number of ExitBlocks is still 1 in this case:
// All variables are dead at the ExitBlock, so whenever we get there,
// the ExplodedGraph nodes should be the same, and thus should be processed only once.
/* Exit block*/);
/* Exit block */);
// ToDo: test throws OutOfMemory on Azure DevOps
// Special case, walk and check everythink manually
// Local functions are not supported by CFG (yet)
// Currently the DeclarationExpressionSyntax are ignored so the "value" variable is not
// https://github.com/SonarSource/sonar-dotnet/issues/2936
// Currently the recursive pattern is ignored and the values for "p" and "address" are not created.
// https://github.com/SonarSource/sonar-dotnet/issues/2937
// Currently the recursive pattern is ignored and the value for "address" is not created.
// https://github.com/SonarSource/sonar-dotnet/issues/2937
// Symbolic value for tuples are in the stack for compatibility
// Stack is clean after assignment
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\SymbolicExecution\ProgramPointTests.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\SymbolicExecution\ProgramStateTests.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\SymbolicExecution\SymbolicValues\MemberAccessSymbolicValueTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\SymbolicExecution\SymbolicValues\NullableSymbolicValue_TrySetConstraint.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\SymbolicExecution\SymbolicValues\NullableSymbolicValue_TrySetOppositeConstraint.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\SymbolicExecution\SymbolicValues\SymbolicValuesTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\SymbolicExecution\SymbolicValues\SymbolicValue_TrySetConstraint.cs
/*
// Arrange
// Act
// Assert
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected, NoValue cannot be applied on non-NullableSymbolicValue
// constraint to set
// existing
// Expected, NoValue cannot be applied on non-NullableSymbolicValue
// constraint to set
// existing
// Expected, HasValue cannot be applied on non-NullableSymbolicValue
// constraint to set
// existing
// Expected, HasValue cannot be applied on non-NullableSymbolicValue
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
// constraint to set
// existing
// Expected
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\SyntaxTrackers\InvocationTrackerTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\SyntaxTrackers\ObjectCreationTrackerTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AbstractTypesShouldNotHaveConstructors.cs
// Noncompliant {{Change the visibility of this constructor to 'protected'.}}
//          ^^^^^^
//...
// Compliant
// Compliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AesManagedShouldBeWithSecureMode.cs
// Noncompliant
// Noncompliant
// none
// Noncompliant {{Use a certified third party library implementing Galois/Counter Mode (GCM) instead.}}
// none
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// none
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AllBranchesShouldNotHaveSameImplementation.cs
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - no else clause
// Noncompliant {{Remove this 'switch' or edit its sections so that they are not all the same.}}
// Noncompliant
// Compliant - no default section
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - FN: all branches call the same function
// Compliant - FN: all branches call the same function
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AnonymousDelegateEventUnsubscribe.cs
//Noncompliant {{Unsubscribe with the same delegate that was used for the subscription.}}
//                  ^^^^^^^^^^^^^^^^^^^^^
// Noncompliant - single statement
//                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ArgumentSpecifiedForCallerInfoParameter.cs
/* ... */
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ArrayCovariance.cs
// Noncompliant {{Refactor the code to not rely on potentially unsafe array conversions.}} // Error [CS0029]
//                                  ^^^^^^^^^^
// Noncompliant - array covariance is used
//                           ^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AssemblyLoadShouldBeUsed.cs
// Noncompliant {{Replace this call to 'Assembly.LoadFrom' with 'Assembly.Load'.}}
//                   ^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Replace this call to 'Assembly.LoadFile' with 'Assembly.Load'.}}
//                   ^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant {{Replace this call to 'Assembly.LoadWithPartialName' with 'Assembly.Load'.}}
//                   ^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AssertionArgsShouldBePassedInCorrectOrder.MsTest.cs
// Noncompliant {{Make sure these 2 arguments are in the correct order: expected value, actual value.}}
//                          ^^^^^^^
// Noncompliant
//                         ^^^^^^^
// Noncompliant
//                          ^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AssertionArgsShouldBePassedInCorrectOrder.NUnit.cs
// Noncompliant {{Make sure these 2 arguments are in the correct order: expected value, actual value.}}
//                          ^^^^^^^
// Noncompliant
//                         ^^^^^^^
// Noncompliant
//                          ^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AssertionArgsShouldBePassedInCorrectOrder.Xunit.cs
// Noncompliant {{Make sure these 2 arguments are in the correct order: expected value, actual value.}}
//                       ^^^^^^^
// Noncompliant
//                      ^^^^^^^
// Noncompliant
//                       ^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AssignmentInsideSubExpression.cs
// Noncompliant {{Extract the assignment of 'i' from this expression.}}
//                ^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//                ^^^
// Noncompliant
// Noncompliant
//                ^
// Noncompliant  {{Extract the assignment of 'b' from this expression.}}
// Noncompliant
// Noncompliant
// Fix S1121: NullReferenceException when while loop with assignment expression is within a for loop with no condition (#725)
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Compliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AsyncAwaitIdentifier.cs
// Noncompliant {{Rename 'async' to not use a contextual keyword as an identifier.}}
//              ^^^^^
// Noncompliant {{Rename 'await' to not use a contextual keyword as an identifier.}}
// Noncompliant
// Noncompliant
//                       ^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AsyncVoidMethod.cs
// Noncompliant {{Return 'Task' instead.}}
//            ^^^^
// A lot of classes/interfaces in UWP do not inherit from EventArgs so we had to change the detection mechanism
// See issue https://github.com/SonarSource/sonar-csharp/issues/704
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AsyncVoidMethod_MsTestV1.cs
// MSTest V1 doesn't have proper support for async so people are forced to use async void
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AsyncVoidMethod_MsTestV2.cs
// MSTest V2 has proper support for async so people should avoid async void
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AvoidExcessiveClassCoupling.cs
// Noncompliant {{Split this class into smaller and more specialized ones to reduce its dependencies on other classes from 8 to the maximum authorized 1 or less.}}
//                        ^^^^^^^^^
// ================================================================================
// ==== FIELDS
// ================================================================================
// Primitives don't count
// ================================================================================
// ==== PROPERTIES
// ================================================================================
// ================================================================================
// ==== EVENTS
// ================================================================================
// ================================================================================
// ==== CTORS
// ================================================================================
// ================================================================================
// ==== DTORS
// ================================================================================
// ================================================================================
// ==== METHODS
// ================================================================================
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AvoidExcessiveInheritance_CustomValues.cs
// Noncompliant {{This class has 3 parents which is greater than 2 authorized.}}
// Noncompliant {{This class has 4 parents which is greater than 2 authorized.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AvoidExcessiveInheritance_DefaultValues.cs
// Noncompliant {{This class has 6 parents which is greater than 5 authorized.}}
//               ^^^^^^^^^^^^^^
// Noncompliant {{This class has 7 parents which is greater than 5 authorized.}}
//               ^^^^^^^^^^^^^^
// Noncompliant {{This class has 6 parents which is greater than 5 authorized.}}
//               ^^^^^^^^^^
// Noncompliant {{This class has 7 parents which is greater than 5 authorized.}}
//               ^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant  {{This class has 6 parents which is greater than 5 authorized.}}
// Noncompliant  {{This class has 7 parents which is greater than 5 authorized.}}
// Noncompliant  {{This class has 6 parents which is greater than 5 authorized.}}
// Noncompliant  {{This class has 7 parents which is greater than 5 authorized.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\AvoidUnsealedAttributes.cs
// Noncompliant {{Seal this attribute or make it abstract.}}
//               ^^^^^^^^^^^
// Noncompliant
// Compliant - sealed
// Compliant - abstract
// Compliant - private
// Compliant - effective accessibility is private
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\BeginInvokePairedWithEndInvoke.cs
// Noncompliant {{Pair this "BeginInvoke" with an "EndInvoke".}}
/* callback */null, /* state */ null); // Noncompliant {{Pair this "BeginInvoke" with an "EndInvoke".}}
// https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously
// «Important: No matter which technique you use, always call EndInvoke to complete your asynchronous call.»
// Compliant
/* callback */null, /* state */ null); // Compliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant, EndInvoke is called by wrapper.CallEndInvoke
// Noncompliant
// Compliant
// Compliant
// Compliant, EndInvoke is called by wrapper.CallEndInvoke
// Noncompliant
// Noncompliant
// false-negative, we only look at the variable initialization and not at all its assignments
// Compliant, EndInvoke is called by wrapper.CallEndInvoke
// Noncompliant
// Compliant, NotADelegate class declared below does not required a call to EndInvoke
// Same as System.Windows.Forms.Control see
// https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.control.begininvoke?view=netframework-4.6
// «You can call EndInvoke to retrieve the return value from the delegate, if necessary, but this is not required.»
// It's not required to call EndInvoke after BeginInvoke on this class
// Coverage
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\BinaryOperationWithIdenticalExpressions.cs
//                   ^ {{Correct one of the identical expressions on both sides of operator '=='.}}
//              ^ Secondary@-1
/*comment*/ b))
//                        ^^^^^^^^^^^^^^^^^^^^ {{Correct one of the identical expressions on both sides of operator '||'.}}
//              ^^^^^^ Secondary@-1
//Noncompliant
// Secondary@-1
//Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
//                        ^ {{Change one instance of 'i' to a different value; comparing 'i' to itself always returns true.}}
//                           ^ Secondary@-1
//          ^ {{Change one instance of 'o' to a different value; comparing 'o' to itself always returns true.}}
//                   ^ Secondary@-1
//          ^^^^^^^^^^^^^^ {{Change one instance of 'new object()' to a different value; comparing 'new object()' to itself always returns true.}}
//                                ^^^^^^^^^^^^ Secondary@-1
// Noncompliant
// Secondary@-1
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\BooleanCheckInverted.cs
// Noncompliant {{Use the opposite operator ('!=') instead.}}
//              ^^^^^^^^^^^
// Noncompliant
//                   ^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Compliant
// Note that this is not the same as "collection?.Count <= 0" because when null is compared to a number, the result will always be false
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\BooleanCheckInverted.Fixed.Batch.cs
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant
// Compliant
// Compliant
// Compliant
// Fixed
// Fixed
// Compliant
// Note that this is not the same as "collection?.Count <= 0" because when null is compared to a number, the result will always be false
// Compliant
// Compliant
// Compliant
// Compliant
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\BooleanCheckInverted.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant
// Compliant
// Compliant
// Compliant
// Fixed
// Fixed
// Compliant
// Note that this is not the same as "collection?.Count <= 0" because when null is compared to a number, the result will always be false
// Compliant
// Compliant
// Compliant
// Compliant
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\BooleanLiteralUnnecessary.cs
// Noncompliant {{Remove the unnecessary Boolean literal(s).}}
//                       ^^^^^^^^^^^
// Noncompliant (also S2589 and S1764)
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant (also S1764)
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//                   ^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//                    ^^^^^^^^
// Noncompliant
//              ^^^^^^^^
// Noncompliant
//              ^^^^^^^
// Noncompliant
//                    ^^^^^^^
// Noncompliant
//                    ^^^^^^^^
// Noncompliant
//              ^^^^^^^^
// Noncompliant
//              ^^^^^^^^
// Noncompliant
//                   ^^^^^^^^
// Noncompliant
// Compliant
// Compliant
// Compliant
// Noncompliant
//                                            ^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, this triggers another issue S2758
// Noncompliant
// Noncompliant
//Compliant
// Noncompliant
// Compliant, this failed when we compile with Roslyn 1.x
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\BooleanLiteralUnnecessary.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant
// Compliant
// Compliant
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant, this triggers another issue S2758
// Fixed
// Fixed
//Compliant
// Fixed
// Compliant, this failed when we compile with Roslyn 1.x
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\BreakOutsideSwitch.cs
// Noncompliant {{Refactor the code in order to remove this break statement.}}
//                  ^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\BypassingAccessibility.cs
// RSPEC: https://jira.sonarsource.com/browse/RSPEC-3011
// Questionable. Using BindingFlags.NonPublic will return non-public members
//                                     ^^^^^^^^^^^^^^^^^^^^^^   {{Make sure that this accessibility bypass is safe here.}}
// Using other binding attributes should be ok
// et cetera...
// We don't detect casts to the forbidden value
//                           ^^^^^^^^^^^^^^^^^^^^^^
//                                             ^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
//                                                                                    ^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CallerInformationParametersShouldBeLast.cs
// Noncompliant {{Move 'callerFilePath' to the end of the parameter list.}}
//                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ @-1
//                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant, method overriden
// Compliant, method from interface
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CallerInformationParametersShouldBeLastInvalidSyntax.cs
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CallToAsyncMethodShouldNotBeBlocking.cs
// Noncompliant {{Replace this use of 'Task.Result' with 'await'.}}
//                  ^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Replace this use of 'Task.GetAwaiter.GetResult' with 'await'.}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant - the following constructions don't cause deadlock
// FP - the following cases should be valid
// Noncompliant
// Noncompliant
// Noncompliant {{Replace this use of 'Task.Wait' with 'await'.}}
//          ^^^^^^^^^^^^^^^^^^
// Compliant - the following constructions don't cause deadlock
// FP - the following cases should be valid
// Noncompliant
// Noncompliant {{Replace this use of 'Task.WaitAny' with 'await Task.WhenAny'.}}
//          ^^^^^^^^^^^^
// Noncompliant {{Replace this use of 'Task.WaitAll' with 'await Task.WhenAll'.}}
//          ^^^^^^^^^^^^
// Noncompliant {{Replace this use of 'Thread.Sleep' with 'await Task.Delay'.}}
//          ^^^^^^^^^^^^
// Compliant - method call is not async
// Compliant - method call is not async
// All of the calls from Main methods are allowed
// Noncompliant FP, task is already completed at this point.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CastConcreteTypeToInterface.cs
// TODO...
// Noncompliant {{Remove this cast and edit the interface to add the missing functionality.}}
//                            ^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
//                   ^^^^^^^^^^^^^^^^^^^^^^^^
// ...
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CastShouldNotBeDuplicated.cs
// Noncompliant
//                       ^^^^^^^^ Secondary
//                       ^^^^^^^^ Secondary
// Compliant
// Compliant - but will throw
// Compliant - should be non compliant
// Compliant because we are casting to a ValueType
// See https://github.com/SonarSource/sonar-dotnet/issues/2314
// Noncompliant
//                          ^^^^^^^^^^^^^^^^^^^^^ Secondary
// Compliant because we ignore what the type is // Error [CS0246]
// Error [CS0246]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CatchEmpty.cs
// Compliant because of the comment
/*some comment here*/
// Compliant because of the comment
// comment
//Noncompliant {{Handle the exception or explain in a comment why it can be ignored.}}
//          ^^^^^^^^^^^^^^^^^^^^^
//Noncompliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CatchRethrow.cs
//Noncompliant
//Noncompliant {{Add logic to this catch clause or eliminate it and rethrow the exception automatically.}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//Noncompliant
//Noncompliant
// Noncompliant
//Noncompliant
//Noncompliant
//Noncompliant
//Noncompliant
//Noncompliant
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CatchRethrow.Fixed.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CbdeHandler.cs
// Noncompliant {{There is a path on which this operation always overflows}}
// Noncompliant {{There is a path on which this operation always overflows}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CbdeHandlerDummy.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CertificateValidationCheck.cs
//Values from properties are not inspected at all
//Values from overriden operators are not inspected at all
//Operator + is overriden to return delegate.
//Specific cases
//Inline version
//                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {{Enable server certificate validation on this SSL/TLS connection}}
//                                                                                                             ^^^^ Secondary@-1
//Secondary@+1
//Noncompliant 
//Lambda block syntax
//Secondary@+1
//Noncompliant
//Noncompliant
//Secondary
//With variable
//Noncompliant [flow2]
//Without variable
//Noncompliant [flow3]
//Assignment syntax = instead of +=
//Noncompliant  [flow4]
//Noncompliant
//Secondary@-1
//Do not test this one. It's .NET Standard 2.1 target only. It should work since we're hunting RemoteCertificateValidationCallback and method signature
//var ws = new System.Net.WebSockets.ClientWebSocket();
//ws.Options.RemoteCertificateValidationCallback += InvalidValidation;
//Do not test this one. It's .NET Standard 2.1 target only. It should work since we're hunting RemoteCertificateValidationCallback and method signature
//var sslOpts = new System.Net.Security.SslClientAuthentication();
//Security.SslClientAuthenticationOptions.RemoteCertificateValidationCallback;
//Noncompliant [flow5]
//Noncompliant [flow6]
//Noncompliant [flow7]
//Noncompliant [flow8]
//This is not RemoteCertificateValidationCallback delegate type, but Func<...>
//Noncompliant [flow9]
//Generic signature check without RemoteCertificateValidationCallback
//Noncompliant [flow10]
//Compliant, because signature types are not in expected order for validation
//If there's only one Assignment, we will inspect it
//Secondary@+1 [flow0]
//Secondary [flow1]
//Compliant due to false negative, the second assignment is after usage of the variable
//Compliant due to further logic and more assingments
//Environment.ComputerName, Environment.CommandLine, Debugger.IsAttached, Config.TestEnvironment
//Compliant, there are more assignments, so there is a logic
//This is compliant due to the more assignments, first one is in variable initialization
//Secondary@+1 [flow0]
//Secondary [flow1]
//False negative due to more assignments, but this one is after variable usage.
//Secondary [flow0, flow1]
//Secondary [flow0, flow1]
//Secondary [flow17]
//Call in nested class from root (this)
//Secondary           
//Noncompliant [flow11]
//Noncompliant [flow12]
//Noncompliant [flow13]
//Noncompliant [flow14]
//Noncompliant [flow15]
//                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {{Enable server certificate validation on this SSL/TLS connection}}
//                                                                                                                            ^^^^ Secondary@-1
//Noncompliant [flow16]
//This double-assigment will fire the seconday for each occurence twice
//Secondary [flow1]
//Noncompliant [flow0]
//Noncompliant [flow1]
//Compliant, it is called without argument
//Noncompliant [flow17]
//Compliant, no one is invoking this
//localhost");
//We do not inspect inner logic, yet
//Pretend to do some logging
//Secondary [flow2, flow3, flow4, flow5, flow9, flow10, flow11, flow12, flow14, flow15, flow16, flow17]
//Secondary [flow0, flow0, flow1, flow1]
//Compliant
//Compliant, checks were done
//Secondary [flow6]
//Secondary [flow6]
//Secondary [flow7]
//Secondary [flow7]
//Compliant, since Log(certificate) can also do some validation and throw exception resulting in return false. It's bad practice, but compliant.
//Secondary [flow8]
//Compliant, uncaught exception is thrown above
//Compliant due to throw logic
//Log
//Compliant due to throw logic
//Secondary [flow12]
//Secondary [flow13]
//All paths return noncompliant
//Secondary [flow11]
//Secondary [flow11]
//At least one path returns compliant => there is a logic and it is considered compliant
//Secondary [flow14]
//False negative
//False negative
//False negative
//False negative
//All exceptions are cought, even those throw from inner DoValidation(crt).. helpers
//Log, no throw
//False negative
//Parameters are in order, that we do not inspect
//Noncompliant
//Assignment from sibling class in nested tree
//Secondary           
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckArgumentException.cs
// Noncompliant {{Use a constructor overloads that allows a more meaningful exception message to be provided.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - ignored from analysis
// Compliant - foo is the message
// Noncompliant {{The parameter name 'foo' is not declared in the argument list.}}
// Noncompliant
// Noncompliant
// Noncompliant {{ArgumentException constructor arguments have been inverted.}}
// Noncompliant {{ArgumentException constructor arguments have been inverted.}}
// Noncompliant
// Noncompliant
// Compliant - cannot detect if sub-element exists
// Noncompliant
// Compliant because we can't validate non const-string
// Compliant because we can't validate non const-string
// Compliant because we can't validate non const-string
// Compliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant - we are just looking at most direct parent definition
// Noncompliant
// Noncompliant
// Noncompliant - we are just looking at most direct parent definition
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - value exists in property setters
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// See https://github.com/SonarSource/sonar-csharp/issues/1867
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_ComplexRegex.cs
// <copyright file="ProgramHeader2.cs" company="My Company Name">
// Copyright (c) 2012 All Rights Reserved
// </copyright>
// <author>Name of the Authour</author>
// <date>08/22/2017 12:39:58 AM </date>
// <summary>Class representing a Sample entity</summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_DefaultValues.cs
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_DefaultValues.Fixed.cs
/*
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_EmptyFile.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_ForcingEmptyLinesKo.cs
//---
// Too early
// Noncompliant@-3 {{Add or update the header of this file.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_ForcingEmptyLinesOk.cs
//---
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_MultiLineLicenseStartWithNamespace.cs
/*
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_MultiLineLicenseStartWithUsing.cs
/*
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_MultiSingleLineLicenseStartWithAdditionalComment.cs
//-----
// MyHeader
//-----
// This header does...
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_MultiSingleLineLicenseStartWithAdditionalCommentOnSameLine.cs
//-----
// MyHeader
//----- More text on same line
// Noncompliant@-3 {{Add or update the header of this file.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_MultiSingleLineLicenseStartWithNamespace.cs
//-----
// MyHeader
//-----
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_NoLicenseStartWithNamespace.cs
// Noncompliant {{Add or update the header of this file.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_NoLicenseStartWithNamespace.Fixed.cs
// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_NoLicenseStartWithUsing.cs
// Noncompliant {{Add or update the header of this file.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_NoLicenseStartWithUsing.Fixed.cs
// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_OutdatedLicenseStartWithNamespace.cs
// Copyright (c) SonarSource.
// Noncompliant@-13 {{Add or update the header of this file.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_OutdatedLicenseStartWithNamespace.Fixed.cs
/*
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_OutdatedLicenseStartWithUsing.cs
// Copyright (c) SonarSource.
// Noncompliant {{Add or update the header of this file.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_OutdatedLicenseStartWithUsing.Fixed.cs
/*
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_SingleLineLicenseStartWithNamespace.cs
// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CheckFileLicense_SingleLineLicenseStartWithUsing.cs
// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ClassName.cs
// Noncompliant {{Rename class 'FSM' to match pascal case naming rules, consider using 'Fsm'.}}
//        ^^^
// Compliant
// Noncompliant {{Rename class 'foo' to match pascal case naming rules, consider using 'Foo'.}}
// Noncompliant {{Rename interface 'foo' to match pascal case naming rules, consider using 'IFoo'.}}
// Noncompliant  {{Rename interface 'Foo' to match pascal case naming rules, consider using 'IFoo'.}}
// Compliant
// Noncompliant {{Rename method 'foo' to match pascal case naming rules, consider using 'Foo'.}}
// Noncompliant {{Rename class 'IFoo2' to match pascal case naming rules, consider using 'Foo2'.}}
// Noncompliant {{Rename class 'AbClass_Bar' to match pascal case naming rules, consider using 'AbClassBar'.}}
// Compliant
// Compliant
// Noncompliant {{Rename class 'IILMarker' to match pascal case naming rules, consider using 'IilMarker'.}}
// Compliant
// Compliant
// Compliant
// Noncompliant {{Rename class 'Ab4DEFGh' to match pascal case naming rules, consider using 'Ab4DefGh'.}}
// Noncompliant {{Rename class 'TTTestClassTTT' to match pascal case naming rules, consider using 'TtTestClassTtt'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Noncompliant {{Rename class '_AbABaa' to match pascal case naming rules, trim underscores from the name.}}
// Compliant
// Compliant because the other subpart is generated
// Noncompliant - 3 upper case letters
// Compliant because 2 upper case letters + 1 for the next word
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ClassName.Partial.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ClassNotInstantiatable.cs
// Noncompliant {{This class can't be instantiated; make its constructor 'public'.}}
//               ^^^^^^
// Noncompliant {{This class can't be instantiated; make at least one of its constructors 'public'.}}
// Compliant, suggested solution of S1118
// Compliant
// Compliant
// Compliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ClassShouldNotBeAbstract.cs
//Noncompliant {{Convert this 'abstract' class to a concrete class with a protected constructor.}}
//                        ^^^^^
//Noncompliant {{Convert this 'abstract' class to an interface.}}
//Compliant
//Noncompliant {{Convert this 'abstract' class to a concrete class with a protected constructor.}}
//Noncompliant, should be an interface
//Compliant, has abstract and non abstract members
//Compliant, still has abstract parts
// Noncompliant
// Error@-1 [CS0246]
// Error [CS0115]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ClassWithEqualityShouldImplementIEquatable.cs
// Compliant
// Noncompliant {{Implement 'IEquatable<ClassWithEqualsT>'.}}
//        ^^^^^^^^^^^^^^^^
// Compliant
// Compliant - does not define the "Equals<FooBar>" method
// Noncompliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ClassWithOnlyStaticMember.cs
// Compliant, we don't care about structs
// Noncompliant {{Add a 'protected' constructor or the 'static' keyword to the class declaration.}}
//               ^^^^^^^^^^^
//Noncompliant
//Noncompliant {{Hide this public constructor by making it 'protected'.}}
//Compliant, has no methods at all
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CognitiveComplexity.cs
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//          ^^^^ Secondary {{+1}}
//          ^^^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 4 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//          ^^^^ Secondary {{+1}}
//              ^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 4 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//              ^^ Secondary {{+2 (incl 1 for nesting)}}
//              ^^^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 6 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//              ^^ Secondary {{+2 (incl 1 for nesting)}}
//                  ^^ Secondary {{+3 (incl 2 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^^^^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//              ^^^^^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//          ^^^^^^ Secondary {{+1}}
//                  ^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//                       ^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//                           ^ Secondary {{+2 (incl 1 for nesting)}}
// Compliant - FN: Null coalescence assignment is not considered
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//                       ^ Secondary {{+1}}
//                               ^ Secondary@-1 {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^^^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//              ^^^^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//              ^^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^^^^^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//              ^^^^^^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//              ^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^^^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//          ^^^^^ Secondary {{+1}}
//              ^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//              ^^^^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^^^^ Secondary {{+1}}
//           ^^^^^^^^^^^^ {{Refactor this method to reduce its Cognitive Complexity from 2 to the 0 allowed.}}
//                                                     ^^ Secondary@-1 {{+1}}
//                                                          ^^ Secondary@-2 {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 2 to the 0 allowed.}}
// Inner method increase the nesting by 1
//              ^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this accessor to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//              ^^ Secondary {{+1}}
// Noncompliant {{Refactor this accessor to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//              ^^ Secondary {{+1}}
// Noncompliant {{Refactor this accessor to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//              ^^ Secondary {{+1}}
// Noncompliant {{Refactor this accessor to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//              ^^ Secondary {{+1}}
// Noncompliant {{Refactor this accessor to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//              ^^ Secondary {{+1}}
// Noncompliant {{Refactor this constructor to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
// Noncompliant {{Refactor this destructor to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
// Noncompliant {{Refactor this operator to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//           ^^^^^^^^^^^^^^^^^^^^^^^^^ {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//           ^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary@-1 {{+1 (recursion)}}
// This is not recursion, no complexity increase
//           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary@-1 {{+1 (recursion)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//                       ^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//                       ^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 2 to the 0 allowed.}}
//                       ^^ Secondary {{+1}}
//                                ^^ Secondary@-1 {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 4 to the 0 allowed.}}
//          ^^ Secondary {{+1}}
//              ^^ Secondary {{+1}}
//              ^^ Secondary {{+1}}
//              ^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 2 to the 0 allowed.}}
//              ^^ Secondary {{+1}}
//                  ^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//              ^^ Secondary {{+1}}
//              ^^ Secondary {{+1}}
//                  ^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//              ^^ Secondary {{+1}}
//                  ^^ Secondary {{+1}}
//              ^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 2 to the 0 allowed.}}
//                      ^^ Secondary {{+1}}
//                                  ^^ Secondary@-1 {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 2 to the 0 allowed.}}
//              ^^ Secondary {{+1}}
//                    ^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//                      ^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 1 to the 0 allowed.}}
//          ^^^^ Secondary {{+1}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 3 to the 0 allowed.}}
//          ^^^^^^ Secondary {{+1}}
//                  ^^^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this field to reduce its Cognitive Complexity from 2 to the 0 allowed.}}
//              ^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this field to reduce its Cognitive Complexity from 2 to the 0 allowed.}}
//              ^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 2 to the 0 allowed.}}
//                  ^^ Secondary {{+2 (incl 1 for nesting)}}
// Noncompliant {{Refactor this method to reduce its Cognitive Complexity from 2 to the 0 allowed.}}
//                  ^^ Secondary {{+2 (incl 1 for nesting)}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CollectionEmptinessChecking.cs
// Noncompliant {{Use '.Any()' to test whether this 'IEnumerable<string>' is empty or not.}}
//                   ^^^^^
// Noncompliant
// Noncompliant
//                            ^^^^^
// Noncompliant // Error [CS0034]
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CollectionPropertiesShouldBeReadOnly.cs
// Noncompliant {{Make the 'NongenericList' property read-only by removing the property setter or making it private.}}
//                       ^^^^^^^^^^^^^^
// Noncompliant {{Make the 'NongenericCollection' property read-only by removing the property setter or making it private.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Ignore collections marked with DataMember attribute: https://github.com/SonarSource/sonar-csharp/issues/795
// Noncompliant
// Noncompliant FP: enforced by base (https://github.com/SonarSource/sonar-dotnet/issues/2606)
// Noncompliant
// Noncompliant - FP: enforced by interface (https://github.com/SonarSource/sonar-dotnet/issues/2606)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CollectionQuerySimplification.cs
// Noncompliant {{Use 'OfType<object>()' here instead.}}
//                       ^^^^^^
// Noncompliant use OfType
// Noncompliant use OfType
//                       ^^^^^
// Noncompliant use OfType
// Noncompliant use Any([expression])
//                   ^^^^^
// Noncompliant {{Drop 'Where' and move the condition into the 'Count'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Drop this useless call to 'ToList' or replace it by 'AsEnumerable' if you are using LINQ to Entities.}}
//               ^^^^^^
// Noncompliant {{Drop this useless call to 'ToArray' or replace it by 'AsEnumerable' if you are using LINQ to Entities.}}
//Noncompliant
//                       ^^^^^
//Noncompliant
//Noncompliant
// Compliant, we ignore AsEnumerable() as it is somewhat cleaner way to cast to IEnumerable<T> and has no side effects
// compliant, AsReadOnly is defined on List<>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CollectionsShouldImplementGenericInterface.cs
// Noncompliant {{Refactor this collection to implement 'System.Collections.ObjectModel.Collection<T>'.}}
//        ^^^^^^^^^^^^
// Noncompliant {{Refactor this collection to implement 'System.Collections.Generic.IList<T>'.}}
// Noncompliant {{Refactor this collection to implement 'System.Collections.Generic.IEnumerable<T>'.}}
// Noncompliant {{Refactor this collection to implement 'System.Collections.Generic.ICollection<T>'.}}
// Noncompliant {{Refactor this collection to implement 'System.Collections.Generic.IEnumerable<T>'.}}
// Noncompliant@-1 {{Refactor this collection to implement 'System.Collections.Generic.ICollection<T>'.}}
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CommentedOutCode.cs
// Copyright © 2011 - Present RealDimensions Software, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// Noncompliant {{Remove this commented out code.}} : ;
// Noncompliant: ;
// Noncompliant@+1
// {
// Noncompliant@+1
// }
// foo ; {} bar
// ; {} foo
// Noncompliant: ++
// Noncompliant: for    ( .. i != 5
// Noncompliant: if ( 1==2
// Noncompliant: while( i > 5
// Noncompliant: catch(
// Noncompliant: switch(
// Noncompliant@+1
// try{
// Noncompliant@+1
// else{
// &&
// ||
// && &&
// && ||
// Noncompliant: && && &&
// Noncompliant: || || ||
// Noncompliant: || && ||
/*
// Noncompliant: ;
// Noncompliant: Console.WriteLine("Hello, world!");
// Console.WriteLine("Hello, world!");
// Console.WriteLine("Hello, world!");
// Console.WriteLine("Hello, world!");
/*
// Noncompliant: Console.WriteLine();
/// <summary>
/// ...
/// </summary>
/// <code>
/// Console.WriteLine("Hello, world!");
/// </code>
/* foo */
/* foo */
// Noncompliant: Console.WriteLine("Hello, world!");
// Console.WriteLine("Hello, world!");
// Console.WriteLine("Hello, world!");
// Console.WriteLine("Hello, world!"); //this is compliant, as there is code above and newline above
/// Console.WriteLine("Hello, world!");
///
///
/// The C++ access level for a member function, e.g. private
///
// Noncompliant: Debug.Assert(this.MemberTypeName != null == storage.HasFlag(StorageClass.Member));
//
//if (storage.HasFlag(StorageClass.Member))
//{
// output |= this.MemberTypeName.DisplayOn(builder, s);
// builder.Append(CppNameBuilder.NameSeparator);
// // Not trailing space wanted
// output = false;
//}
// Noncompliant: Console.WriteLine();
// Noncompliant: Console.WriteLine();
// this should be compliant:
// does *not* overwrite file if (still) exists
// FP https://github.com/SonarSource/sonar-dotnet/issues/2772
// Noncompliant@+1 - False positive, it's just a URL and it is not an interpolated string
// http://localhost:7071/runtime/webhooks/EventGrid?functionName={functionname}
// Noncompliant@+1
// {this, is, a ,set}
/**
// Some C++ reference
// Some c++ reference
// Somec++ reference
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CommentFixme.cs
/*
// Noncompliant
// Noncompliant
// Noncompliant: hello FIXME world
// ok
// Noncompliant@+3
///
/// <summary>
/// FIXME -
/// </summary>
// Noncompliant@+2
/**
// The following should be compliant:
// aaaFIXME000
// Noncompliant@+1
// !FIXME!
// Noncompliant
/*FIXME*/ // Noncompliant
//^^^^^
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CommentTodo.cs
/*
// Noncompliant
// Noncompliant
// Noncompliant: hello TODO world
// ok
// Noncompliant@+3
///
/// <summary>
/// TODO -
/// </summary>
// Noncompliant@+2
/**
// The following should be compliant:
// aaaTODO000
// Noncompliant@+1
// !TODO!
// Noncompliant
/*TODO*/ // Noncompliant
//^^^^
/**
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ComparableInterfaceImplementation.cs
// Compliant
// Compliant
// Noncompliant {{When implementing IComparable, you should also override Equals.}}
//               ^^^^^^^^^^^^^
// Noncompliant {{When implementing IComparable, you should also override Equals.}}
//               ^^^^^^^^^^^^^^^
// Error [CS0102]
// Error [CS0102]
// Error [CS0102,CS0111]
// Noncompliant {{When implementing IComparable, you should also override <, >.}}
//               ^^^^^^^^^^^^^^^^^^
// Noncompliant {{When implementing IComparable, you should also override ==, !=.}}
//               ^^^^^^^^^^^^^^^
// Noncompliant {{When implementing IComparable, you should also override >=.}}
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Error [CS0216]
// Noncompliant {{When implementing IComparable, you should also override <=.}}
//               ^^^^^^^^^^^^^^^^^^^^^^^^
// Error [CS0216]
// Noncompliant {{When implementing IComparable, you should also override Equals, <, >, <=, >=, ==, !=.}}
// Compliant
// Noncompliant {{When implementing IComparable<T>, you should also override Equals.}}
//               ^^^^^^^^^^^^^
// Noncompliant {{When implementing IComparable<T>, you should also override Equals.}}
//               ^^^^^^^^^^^^^^^
// Noncompliant {{When implementing IComparable<T>, you should also override <, >.}}
//               ^^^^^^^^^^^^^^^^^^
// Noncompliant {{When implementing IComparable<T>, you should also override ==, !=.}}
//               ^^^^^^^^^^^^^^^
// Noncompliant {{When implementing IComparable<T>, you should also override >=.}}
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Error [CS0216]
// Noncompliant {{When implementing IComparable<T>, you should also override <=.}}
//               ^^^^^^^^^^^^^^^^^^^^^^^^
// Error [CS0216]
// Noncompliant {{When implementing IComparable or IComparable<T>, you should also override Equals, <, >, <=, >=, ==, !=.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CompareNaN.cs
// Noncompliant {{Use double.IsNaN() instead.}}
// Noncompliant {{Use double.IsNaN() instead.}}
// Noncompliant {{Use float.IsNaN() instead.}}
// Noncompliant {{Use float.IsNaN() instead.}}
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConditionalSimplification.cs
// Noncompliant {{Use the '??' operator here.}}
//          ^^
/*some comment*/
/*some other comment*/;
// Noncompliant {{Use the '??' operator here.}}
//              ^^^^^^^^^^^^^^^^^^^
// Compliant, triggers S2758
//can't be converted
// Noncompliant {{Use the '??' operator here.}}
//              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Use the '?:' operator here.}}
// Noncompliant
// Noncompliant
// Noncompliant
//Compliant
//Non-compliant, but not handled because of the type difference, and there is no fix for it
// Compliant - FN:  x ??= false can be used instead
//Noncompliant
//Noncompliant
// Non-compliant, but not handled because of the type difference
//Noncompliant
// Noncompliant
// Non-compliant, but not handled because of the type difference
// Error [CS0246]
// Noncompliant
// we ignore lambdas because of type resolution for conditional expressions, see CS0173
// if one arg is lambda, ignore
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConditionalSimplification.Fixed.cs
/*some other comment*/;
// Fixed
// Compliant, triggers S2758
//can't be converted
// Fixed
//Compliant
//Non-compliant, but not handled because of the type difference, and there is no fix for it
// Compliant - FN:  x ??= false can be used instead
// Non-compliant, but not handled because of the type difference
// Non-compliant, but not handled because of the type difference
// Error [CS0246]
// we ignore lambdas because of type resolution for conditional expressions, see CS0173
// if one arg is lambda, ignore
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConditionalsShouldStartOnNewLine.cs
//            ^^ Noncompliant {{Move this 'if' to a new line or add the missing 'else'.}}
//          ^ Secondary@-1
// ...
//...
// ...
//...
/*}*/  if (true)
// Noncompliant
/* else */ if (true) { } // Noncompliant
// Secondary@-1
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConditionalStructureSameCondition.cs
//              ^^^^^^^^^^^^^^ Secondary
// Noncompliant {{This branch duplicates the one on line 18.}}
//                   ^^^^^^^^^^^^^^
//              ^^^^^^^^^^^^^^ Secondary
//              ^^^^^^^^^^^^^^ Secondary@-1
//              ^^^^^^^^^^^^^^ Secondary@-2
// Noncompliant {{This branch duplicates the one on line 33.}}
//                   ^^^^^^^^^^^^^^
// Noncompliant
//                   ^^^^^^^^^^^^^^^ Secondary
// Noncompliant
/*some comment*/ condition) // Noncompliant
// Noncompliant
//              ^^^^^^^^^^ Secondary
// Noncompliant
//                   ^^^^^^^^^^ Secondary
// Noncompliant
//              ^^^^^^^^^^ Secondary
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConditionalStructureSameImplementation_If.cs
// Compliant, ignore single line blocks
// Secondary
// Noncompliant
// Secondary
// Secondary@-1
// Noncompliant
// Noncompliant
// Secondary
// Secondary@-1
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConditionalStructureSameImplementation_Switch.cs
// Secondary
// Secondary@-1
// Noncompliant
// Secondary
// Noncompliant
// Secondary;
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConditionalsWithSameCondition.cs
// Noncompliant {{This condition was just checked on line 20.}}
//              ^^^^^^
// Noncompliant
// Compliant, c might be updated in the previous if
// Compliant, c might be updated in the previous if
// Compliant, c might be updated in the previous if
// Noncompliant {{This condition was just checked on line 54.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConditionEvaluatesToConstant.cs
// Noncompliant
// Secondary
// Secondary
// Noncompliant
// Noncompliant
//                  ^ {{Change this condition so that it does not always evaluate to 'true'; some subsequent code is never executed.}}
//                       ^^^^^^ Secondary@-1
//                    ^ {{Change this condition so that it does not always evaluate to 'true'; some subsequent code is never executed.}}
//                           ^^^^^^ Secondary@-1
//                    ^ {{Change this condition so that it does not always evaluate to 'true'; some subsequent code is never executed.}}
//                         ^^^^^^^^ Secondary@-1
//                         ^ Noncompliant {{Change this condition so that it does not always evaluate to 'true'; some subsequent code is never executed.}}
//                    ^ Noncompliant@-1 {{Change this condition so that it does not always evaluate to 'false'.}}
//                                ^^^^^^ Secondary@-2
//                    ^ Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//                         ^ Secondary@-1
//                  ^ Noncompliant {{Change this condition so that it does not always evaluate to 'true'; some subsequent code is never executed.}}
//                       ^ Secondary@-1
//                               ^ Secondary@-2
//               ^ Noncompliant {{Change this condition so that it does not always evaluate to 'true'; some subsequent code is never executed.}}
//                    ^ Secondary@-1
//                            ^ Secondary@-2
// Error [CS0214]
// Error [CS0214]
// Compliant
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant
//              ^
// Secondary
// Noncompliant
// Noncompliant
// Secondary
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Compliant, this is too common to report on
// Not reporting on this
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Non-compliant, we don't care it's very rare
// Noncompliant
// Secondary
// Noncompliant
//                  ^^^^^
// Secondary
// Noncompliant, false-positive
// Secondary
// Noncompliant, false-positive, kept only to show that problems with loops can cause issues outside the loop
// Noncompliant, false-positive
// Secondary
// Noncompliant, always true
// Noncompliant
// Noncompliant, always false
// Secondary
// This is compliant, we don't know anything about 'fail'
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// This is compliant, we don't know anything about 'fail'
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
//                                 ^
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant
//                        ^^^^^^
// Noncompliant
// Noncompliant
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant
// Noncompliant
// 'a' could override Equals, so this is not a ref equality check
// Compliant
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Compliant, == is doing a value comparison above.
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Because of boxing:
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Compliant, they might be both null
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant
// Noncompliant
// Compliant, we don't know anything about the argument
// Compliant
// Noncompliant
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant
// Noncompliant
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Error@-1 [CS0019]
// We know nothing about T
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// This would throw and invalid cast exception
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, might be null
// Compliant
// Compliant
// Compliant
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant
// Noncompliant
// Noncompliant
//Secondary@-1
// Noncompliant
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant
//Secondary@-1
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Compliant
// Noncompliant, also a compiler error
// Error@-1 [CS0019]
// Secondary
// Compliant
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant {{Change this condition so that it does not always evaluate to 'true'.}}
// TODO: Should be NC {{Change this condition so that it does not always evaluate to 'true'.}}
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
// Noncompliant, always flse
// Secondary, this branch is never executed
// read the file here
// StreamReader will dispose the stream automatically; set stream to null
// to prevent it from disposing twice (the recommended pattern for S3966)
// We cannot detect the case in ObjectsShouldNotBeDisposedMoreThanOnce method above
// and to avoid False Positives we do not report in catch or finally
// False Negative S2583
// False Negative S2589
// False Negative S2583
// False Negative S2589
// awaiting clears the constraints
// Compliant S2583
// Compliant S2589
// Noncompliant
// Secondary@-1
// Noncompliant
// https://github.com/SonarSource/sonar-csharp/issues/947
// This is a multi-threaded application, the fields could change
// Compliant S2583
// Compliant S2589
// Noncompliant
// Secondary@-1
// Noncompliant
// This particular method has no side effects
// False Negative S2583
// False Negative S2589
// Noncompliant
// Secondary@-1
// Noncompliant
// swap value here to test both cases if needed
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Noncompliant
// Secondary
// Compliant
// Noncompliant
// Compliant
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary
// Compliant S2583
// Compliant S2583
// Compliant S2583
// Compliant S2583
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Noncompliant
// Secondary@-1
// Noncompliant
// we don't know if this going to be excuted or not
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Noncompliant
/// <summary>
/// A certain combination of condition wrongly considers the else code as dead.
/// </summary>
// Outcome.
// Noncompliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant S2589
// Compliant
// Noncompliant - FP because symbolic execution stops at the third iteration of loop
// Secondary
// OK - 'generate' field can potentially be changed inside the loop where this generator is used
// FN - myVariable will never change after initialization
// Noncompliant
// Noncompliant
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant FP thay worth ignoring to avoid introducing more complex string constraints
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConditionEvaluatesToConstant.CSharp7.cs
// Noncompliant, always true
// Secondary, not executed code
// Noncompliant, always false
// Secondary, not executed code
// Noncompliant, always false
// Secondary, not executed code
// We can set NotNull constraint only for one of the variables in the if condition
// and we choose the declared variable because it is more likely to have usages of
// it inside the statement body.
// Compliant, False Negative
// Noncompliant, always false
// Secondary, not executed code
// The condition is evaluated after the first execution, so we cannot test s
// Noncompliant, always true
// We don't set constraints on the switch expression
// Compliant, we don't know anything about o
// Noncompliant, always false
// Secondary, unreachable
// The discard is redundant, but still allowed
// Compliant, False Negative
// the when is redundant, but needed to convert the case to pattern
// Noncompliant
// https://github.com/SonarSource/sonar-dotnet/issues/2592
// Secondary
// Noncompliant FP
// Secondary
// Noncompliant FP
// Secondary
// Noncompliant FP
// Do nothing
// Noncompliant S2583  FP
// Secondary
// Noncompliant S2589  FP
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConditionEvaluatesToConstant.CSharp8.cs
// Noncompliant
// Secondary
// never executed
// FN - switch arms are not constrained
// FN - switch arms are not constrained
// Noncompliant
// Secondary
// never executed
// Noncompliant
// Secondary
// never executed
// FN - switch arms are not constrained
// FN - switch arms are not constrained
// never executed
// FN - switch arms are not constrained
// FN - switch arms are not constrained
// never executed
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// FN Local static functions are not inspected in CFG
// never executed
// FN - content and result value of local static function is not inspected
// never executed
// Noncompliant
// Secondary
// never executed
// OK
// OK
// Noncompliant
// Secondary
// never executed
// See https://github.com/SonarSource/sonar-dotnet/issues/2496
// Check for empty collection with == override
// Noncompliant FP S2589 Change this condition so it does not always evaluate to true
// Secondary FP
// There's wrong error message for this case.
// Condition is always evaluated as 'true', not as 'false' as message suggests.
// Subsequent code is always executed, not 'never' as message suggests.
// Check for empty collection with == override
// Noncompliant {{Change this condition so that it does not always evaluate to 'false'; some subsequent code is never executed.}}
// Secondary
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConfiguringLoggers_AspNetCore.cs
//RSPEC S4792: https://jira.sonarsource.com/browse/RSPEC-4792
// Noncompliant {{Make sure that this logger's configuration is safe.}}
// ...
// Noncompliant {{Make sure that this logger's configuration is safe.}}
// ...
// An issue will be raised for each call to an ILoggerFactory extension methods adding loggers.
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    {{Make sure that this logger's configuration is safe.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    {{Make sure that this logger's configuration is safe.}}
// Testing the next method using a hack - see notes at the end of the file
// Noncompliant
// Noncompliant
//                                  ^^^^^^^^^^^^^^^^^^^    {{Make sure that this logger's configuration is safe.}}
// Noncompliant
// Noncompliant
// Noncompliant
//                        ^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Calling extension methods as static methods
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
/* no-op */ }
/* no-op */ }
// HACK - the tests are not currently built againts NET Core 2.0 so one of the
// methods we want to test is not available. Instead, we'll define a type with
// the expected name and method signature
/* no-op */ }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConfiguringLoggers_Log4Net.cs
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   {{Make sure that this logger's configuration is safe.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   {{Make sure that this logger's configuration is safe.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConfiguringLoggers_NLog.cs
// RSPEC-4792: https://jira.sonarsource.com/browse/RSPEC-4792
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   {{Make sure that this logger's configuration is safe.}}
// Call via the alias
//          ^^^^^^^^^^^^^^^^^^^^   {{Make sure that this logger's configuration is safe.}}
// Call via the "using static"
//          ^^^^^^^^^^^^^   {{Make sure that this logger's configuration is safe.}}
// Reading the configuration should be ok
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConfiguringLoggers_Serilog.cs
// RSPEC-4792: https://jira.sonarsource.com/browse/RSPEC-4792
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   {{Make sure that this logger's configuration is safe.}}
// Noncompliant
// Noncompliant
// Using the logger shouldn't raise issues
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConsoleLogging.cs
//Noncompliant {{Remove this logging statement.}}
//          ^^^^^^^^^^^^^^^^^
//Noncompliant
//          ^^^^^^^^^^^^^^^^^
//Noncompliant
//          ^^^^^^^^^^^^^
//Noncompliant
//          ^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Error [CS0633]
// Noncompliant - wrong conditional
//          ^^^^^^^^^^^^^^^^^
// compliant - in debug-only method
// wrong case
// Noncompliant - wrong case
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConsoleLogging_Conditionals1.cs
// compliant - in a debug section
// won't be processed - nodes aren't active
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConsoleLogging_Conditionals2.cs
// won't be processed - nodes aren't active
// Noncompliant: false-positive (we don't handle logical operators in debug blocks)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConstructorArgumentValueShouldExist.cs
// Noncompliant {{Change this 'ConstructorArgumentAttribute' value to match one of the existing constructors arguments.}}
//                           ^^^^^^^^
// Error [CS7036] - Invalid syntax - argument is mandatory - do not raise
// Error [CS0579] - Invalid syntax - only 1 attribute allowed - do not raise
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConstructorOverridableCall.cs
// Noncompliant {{Remove this call from a constructor to the overridable 'DoSomething' method.}}
//          ^^^^^^^^^^^
// Noncompliant
// Compliant
// Not recognized
// Noncompliant
// can be overridden
// leads to call DoSomething() in Parent constructor which triggers a NullReferenceException as foo has not yet been initialized
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ConsumeValueTaskCorrectly.cs
// see https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/
// and https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask-1?view=netstandard-2.1
// Noncompliant {{Refactor this 'ValueTask' usage to consume it only once.}}
//                           ^^^^^^^^^
//                            ^^^^^^^^^ Secondary
// Noncompliant
// Secondary
// Noncompliant {{Refactor this 'ValueTask' usage to consume it only once.}}
//                           ^^^^^^^^^
//                      ^^^^^^^^^ Secondary
// Noncompliant
// Secondary
// Noncompliant {{Refactor this 'ValueTask' usage to consume the result only if the operation has completed successfully.}}
//                     ^^^^^^^^^
// Noncompliant
// because they're called after completed successfully, we don't count them
// FN - it is checked above and we don't use the CFG to verify the blocks
// because they're called after completed successfully, we don't count them
// FN
// FN
// because they're called after completed successfully, we don't count them
// FN
// FN
// because they're called after completed successfully, we don't count them
// FN
// FN
// Noncompliant
// Secondary
// we don't know if it's successful
// Noncompliant
// we don't know if it's successful
// Noncompliant
// two different symbols , one bad , one ok
// Noncompliant
// Compliant, has completed successfully
// two different symbols , both bad
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant@-1
// Secondary
// FN , after if
// FN - we don't inspect inside the method body
// FN
// FN - checked above in the if, we are blind now
// FN
// FN
// FN
// Compliant, has completed successfully
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// FN
// Noncompliant
// Noncompliant
// Secondary
// Secondary
// Noncompliant@-1
// Secondary
// Noncompliant@-1
// Secondary
// Secondary
// Secondary
// Secondary
// Secondary
// Secondary
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ControlCharacterInString.cs
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// 0x00
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\0'.}}
//          ^^^
// 0x01
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u0001'.}}
// 0x02
// Compliant
// Noncompliant {{Replace the control character at position 3 by its escape sequence '\u0002'.}}
//          ^^^^^^^
// ...
// 0x06
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u0006'.}}
// 0x07
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\a'.}}
// 0x08
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\b'.}}
// 0x09
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\t'.}}
// 0x0A
// Compliant
// can not test unescaped \u000A
// 0x0B
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\v'.}}
// 0x0C
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\f'.}}
// 0x0D
// Compliant
// can not test unescaped \u000D
// 0x0E
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u000E'.}}
// 0x0F
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u000F'.}}
// ...
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u001F'.}}
// Compliant
// Compliant
// Compliant
// Compliant
// ...
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u007F'.}}
// Compliant
// Compliant, range from \u0080 to \u009F is considered by some languages as control characters
// But it's not true for all encodings. For example, Windows-1250 code page encodes euro sign by using \u0080
// Compliant
// Compliant
//..
// Compliant
// Compliant
// Compliant
// Compliant
// ogham space mark
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u1680'.}}
// mongolian vowel separator
// Compliant
// Compliant, it is no longer classified as space character in Unicode 6.3.0
// en quad
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u2000'.}}
// em quad
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u2001'.}}
// en space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u2002'.}}
// em space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u2003'.}}
// three-per-em space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u2004'.}}
// four-per-em space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u2005'.}}
// six-per-em space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u2006'.}}
// figure space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u2007'.}}
// punctuation space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u2008'.}}
// thin space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u2009'.}}
// hair space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u200A'.}}
// zero width space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u200B'.}}
// zero width non-joiner
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u200C'.}}
// zero width joiner
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u200D'.}}
// word joiner
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u2060'.}}
// line separator
// Compliant
// can not test unescaped \u2028
// paragraph separator
// Compliant
// can not test unescaped \u2029
// narrow no-break space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u202F'.}}
// medium mathematical space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u205F'.}}
// ideographic space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u3000'.}}
// zero width non-breaking space
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\uFEFF'.}}
// interpolated string literal
// Compliant
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\t'.}}
//                  ^
// verbatim string literal
// Compliant even if this string contains the control character \u0001. Because it is part of the exception: verbatim string literals have no escape character mechanism
// character positions
// Noncompliant {{Replace the control character at position 1 by its escape sequence '\u0001'.}}
// Noncompliant {{Replace the control character at position 4 by its escape sequence '\u0001'.}}
// Noncompliant {{Replace the control character at position 6 by its escape sequence '\u0001'.}}
// string concatenation
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ControllingPermissions.cs
// Noncompliant {{Make sure that permissions are controlled safely here.}}
//                         ^^^^^^^^^
// Noncompliant
// Indirectly implementing IIdentity
// Noncompliant
// Noncompliant, decorated with PrincipalPermission
//           ^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// All instantiations of PrincipalPermission
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//                     ^^^^^^^^^^^^^^^^
// Noncompliant
//          ^^^^^^^^^^^^^^^^
// Noncompliant, IPrincipal parameter, see another section with tests
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant, not one of the tracked methods
// Noncompliant, IPrincipal parameter, see another section with tests
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant, IIdentity parameter, see another section with tests
// Noncompliant, creation of type that implements IIdentity
//                     ^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant, creation of type that implements IPrincipal
// Noncompliant
// Method declarations that accept IIdentity or IPrincipal
// Noncompliant
//           ^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, we do not raise for property accessors
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CookieShouldBeHttpOnly.cs
// Noncompliant
// Noncompliant
// none
// Noncompliant {{Make sure creating this cookie without the "HttpOnly" flag is safe.}}
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, HttpOnly is set below
// Compliant, HttpOnly is set below
// Compliant, HttpOnly is set below
// Compliant, HttpOnly is set below
// Compliant, HttpOnly is set below
// Noncompliant, HttpOnly is set conditionally
// Compliant, HttpOnly is set after the if
// do something
// Noncompliant, HttpOnly is not set in the same scope
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CookieShouldBeHttpOnly_Nancy.cs
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CookieShouldBeHttpOnly_NetCore.cs
// Noncompliant
// Noncompliant
// none
// Noncompliant {{Make sure creating this cookie without the "HttpOnly" flag is safe.}}
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, HttpOnly is set below
// Compliant, HttpOnly is set below
// Compliant, HttpOnly is set below
// Compliant, HttpOnly is set below
// Compliant, HttpOnly is set below
// Noncompliant, HttpOnly is set conditionally
// Compliant, HttpOnly is set after the if
// do something
// Noncompliant, HttpOnly is not set in the same scope
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CookieShouldBeSecure.cs
// Noncompliant
// Noncompliant
// none
// Noncompliant {{Make sure creating this cookie without setting the 'Secure' property is safe here.}}
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, Secure is set below
// Compliant, Secure is set below
// Compliant, Secure is set below
// Compliant, Secure is set below
// Compliant, Secure is set below
// Noncompliant, Secure is set conditionally
// Compliant, Secure is set after the if
// do something
// Noncompliant, Secure is not set in the same scope
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CookieShouldBeSecure_NetCore.cs
// Noncompliant
// Noncompliant
// none
// Noncompliant {{Make sure creating this cookie without setting the 'Secure' property is safe here.}}
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, Secure is set below
// Compliant, Secure is set below
// Compliant, Secure is set below
// Compliant, Secure is set below
// Compliant, Secure is set below
// Noncompliant, Secure is set conditionally
// Compliant, Secure is set after the if
// do something
// Noncompliant, Secure is not set in the same scope
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CookiesShouldBeSecure_Nancy.cs
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CreatingHashAlgorithms.cs
// RSPEC 4790: https://jira.sonarsource.com/browse/RSPEC-4790
// Review all instantiations of classes that inherit from HashAlgorithm, for example:
//                                   ^^^^^^^^^^^^^^^^^^^^^^    {{Make sure that hashing data is safe here.}}
//                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    {{Make sure that hashing data is safe here.}}
//                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    {{Make sure that hashing data is safe here.}}
//                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    {{Make sure that hashing data is safe here.}}
// ...
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// compliant - method name is not Create
// compliant - method name is not Create
// Other methods are not checked
//                                 ^^^^^^^^^^^^^
/* no-op */ }
/* no-op */ }
// Check reporting on partial classes. Should only report once.
//                                                ^^^^^^^^^^^^^^^^^^
/* no-op */ }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\CryptographicKeyShouldNotBeTooShort.cs
// Compliant - FN - cannot detect static readonly from GetConstantValue
// Noncompliant {{Use a key length of at least '2048' bits.}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DangerousGetHandleShouldNotBeCalled.cs
// Noncompliant {{Refactor the code to remove this use of 'SafeHandle.DangerousGetHandle'.}}
//                                              ^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DeadStores.cs
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Variables should be used in order the rule to trigger
// Compliant
// Compliant
// Compliant
// Compliant
// Variables should be used in order the rule to trigger
// Noncompliant {{Remove this useless assignment to local variable 'b'.}}
//            ^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant; retrieved value overwritten in for loop
//  ...
// Noncompliant
// Noncompliant; retrieved value not used
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, not reporting on out parameters
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//  ...
//Not detected yet, we are in a loop, Dead store because the last return statement should return x instead of returning a
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Error [CS8081]
// Noncompliant
// Noncompliant
// Compliant, not reporting on captured variables
// Error [CS0149] - no method name
// Noncompliant
// Noncompliant
// l captured here
// Compliant, out parameter
// Compliant, ref parameter
// Compliant, reporting on this can be considered false positive, although it's not.
// Not reporting on captured local variables
// A new value is assigned here, which is not used. But we are not reporting on it.
// Compliant, S1481 already reports on it.
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Compliant
//Default interface methods
// Noncompliant
// Noncompliant
//Noncompliant
//Compliant, it is used inside switch expression
//Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// ok, is read in catch filter
// ok, read in catch filter
// is used in DoNothing, after loop
// https://github.com/SonarSource/sonar-dotnet/issues/2596
// Noncompliant FP because we do not propagate constant values
// Noncompliant
// https://github.com/SonarSource/sonar-dotnet/issues/2598
// Noncompliant FP
// https://github.com/SonarSource/sonar-dotnet/issues/2600
// Noncompliant FP - if Archive throws, it will be returned
// Noncompliant
// https://github.com/SonarSource/sonar-dotnet/issues/2426
// Fixed issue verification https://github.com/SonarSource/sonar-dotnet/issues/2607
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DebugAssertHasNoSideEffects.cs
// Noncompliant {{Expressions used in 'Debug.Assert' should not produce side effects.}}
//                      ^^^^^^^^^^^^^^^^^
// Noncompliant
//                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DeclareEventHandlersCorrectly.cs
// Noncompliant {{Change the signature of that event handler to match the specified signature.}}
//                   ^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Change the signature of that event handler to match the specified signature.}}
//                   ^^^^^^^^^^^^^
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DeclareTypesInNamespaces.AfterCSharp8.cs
// Noncompliant {{Move 'Int' into a named namespace.}}
// Compliant - starting with C# 8 interface can host types and members
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DeclareTypesInNamespaces.BeforeCSharp8.cs
// Noncompliant {{Move 'Int' into a named namespace.}}
// Error [CS0524] - interface can't host types | we want to report only on the outer struct
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DeclareTypesInNamespaces.cs
// Noncompliant {{Move 'Foo' into a named namespace.}}
// Compliant - we want to report only on the outer class
// Noncompliant {{Move 'Bar' into a named namespace.}}
// Compliant - we want to report only on the outer struct
// Compliant - we want to report only on outer enum
// Noncompliant {{Move 'Enu' into a named namespace.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DefaultSectionShouldBeFirstOrLast.cs
// Compliant - last section
// Compliant - first section
// Noncompliant {{Move this 'default:' case to the beginning or end of this 'switch' statement.}}
//              ^^^^^^^^
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DelegateSubtraction.cs
// Compliant - chain sequence = "1234"
// Compliant - chain sequence = "12"
// Noncompliant {{Review this subtraction of a chain of delegates: it may not work as you expect.}}
//                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// The chain sequence of "chain23" will be "1234" instead of "23"!
// Indeed, the sequence "1234" does not contain the subsequence "14", so nothing is subtracted
// (but note that "1234" contains both the "1" and "4" subsequences)
// Noncompliant
// will print "1234"!
// Compliant - "1" is first removed, followed by "4"
// will print "23"
// Noncompliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DeliveringDebugFeaturesInProduction.cs
// Invoking as extension methods
// Compliant
// Compliant
// Invoking as static methods
// Compliant
// Compliant
// Not in development
// Noncompliant
// Noncompliant
// Custom conditions are deliberately ignored
// Noncompliant, False Positive
// Noncompliant, False Positive
// These are called unconditionally
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DisposableMemberInNonDisposableClass.cs
// Noncompliant {{Implement 'IDisposable' in this class and use the 'Dispose' method to call 'Dispose' on 'fs'.}}
//               ^^^^^^^^^^^^^^
// This member is never Disposed
// Noncompliant
// Compliant; it doesn't have its own field
//Compliant
// Noncompliant {{Implement 'IDisposable' in this class and use the 'Dispose' method to call 'Dispose' on 'fs2', 'fs3'.}}
// Only fs will be compliant
// Noncompliant {{Implement 'IDisposable' in this class and use the 'Dispose' method to call 'Dispose' on 't2'.}}
// Tasks are IDisposable who usually don't really need to be disposed, but they are typicall create with a factory
// Noncompliant {{Implement 'IDisposable' in this class and use the 'Dispose' method to call 'Dispose' on 'fs'.}}
// Compliant - FN
// This member is never Disposed
//See https://github.com/SonarSource/sonar-dotnet/issues/2957
// FN, it should raise the issue
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DisposableNotDisposed.cs
// Compliant - not instantiated
// Compliant - public
// Noncompliant {{Dispose 'field_fs3' when it is no longer needed.}}
//                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Compliant - disposed
// Compliant - passed to method using this
// Noncompliant - effectively private
// Compliant - aliased in constructor initializer
// Compliant, not IDisposable
// Noncompliant - should be reported on once
// Noncompliant - should be reported on once // Error [CS0573] - cannot have field init in struct
// Compliant - returned
// Error [CS0120]
// Noncompliant - directly instantiated with new
// Noncompliant - instantiated with factory method
// Noncompliant - declaration type should not matter
// Noncompliant - another tracked type
// Compliant - passed to a method
// Compliant - used properly
// do nothing but dispose
// Compliant - used properly
// do nothing but dispose
// Compliant - Dispose()
// Compliant - Close()
// Compliant - disposed using elvis operator
// Compliant - not instantiated directly
// Compliant - aliased
// Compliant - constructed from another stream
// Compliant - constructed from another stream
// Compliant - passed to another method (or constructor)
// Compliant - not tracked
// Compliant - aliased
// Compliant - no initializer, should not fail
// Noncompliant - test issue location
// Compliant - not instantiated
// Compliant - aliased
// Noncompliant
// Noncompliant
// Compliant - field_fs6 gets passed to a method
// Noncompliant - even if field_fs7's type is object
// do nothing
// Noncompliant - FP: the class is disposed by the using declaration
// Compliant - FN this struct needs to be disposed (disposable ref struct)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DisposableReturnedFromUsing.cs
// Noncompliant {{Remove the 'using' statement; it will cause automatic disposal of 'fs'.}}
//          ^^^^^
// Noncompliant
// Compliant - FN the resource is returned already disposed
// Noncompliant {{Remove the 'using' statement; it will cause automatic disposal of 'disposableRefStruct'.}}
// Compliant - FN the resource is returned already disposed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DisposableTypesNeedFinalizers.cs
// Noncompliant {{Implement a finalizer that calls your 'Dispose' method.}}
//                   ^^^
// Dispose of resources held by this instance.
// Error [CS0103] - method doesn't exist
// Suppress finalization of this disposed instance.
// Error [CS0535]
// Dispose of resources held by this instance.
// Error [CS0103] - method doesn't exist
// Suppress finalization of this disposed instance.
// Noncompliant // Error [CS0535]
// Noncompliant // Error [CS0535]
// Noncompliant // Error [CS0535]
// Noncompliant
// Error [CS0535]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DisposeFromDispose.cs
// Noncompliant {{Move this 'Dispose' call into this class' own 'Dispose' method.}}
//                  ^^^^^^^
// method added to satisfy demands of interface
// Compliant; class is not IDisposable
//Noncompliant
// Compliant, do not report here
// Compliant - FN
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DisposeNotImplementingDispose.cs
//Noncompliant
//           ^^^^^^^
//Noncompliant {{Either implement 'IDisposable.Dispose', or totally rename this method to prevent confusion.}}
// Error [CS0246] - unknown type
// Error [CS0246,CS0246] - unknown type
// Noncompliant
// ...
//...
//...
// Error [CS0246] - unknown type
// Error [CS0115] - no method to override
//...
// Dispose(10)
// Non-compliant, but not reported now because of the partial
// Noncompliant - FP
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotCallAssemblyGetExecutingAssembly.cs
// Noncompliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotCallExitMethods.cs
// Noncompliant {{Remove this call to 'Environment.Exit' or ensure it is really required.}}
//                      ^^^^
// Noncompliant {{Remove this call to 'Application.Exit' or ensure it is really required.}}
//                                           ^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - inside Main
// Compliant - inside Main
// Compliant - inside Main
// Compliant - inside Main
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotCallGCSuppressFinalize.cs
// Noncompliant {{Do not call 'GC.SuppressFinalize'.}}
//             ^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotCatchNullReferenceException.cs
// Noncompliant {{Do not catch NullReferenceException; test for null instead.}}
//                 ^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotCatchSystemException.cs
// do something that might throw a FileNotFoundException or IOException
// Noncompliant {{Catch a list of specific exception subtype or use exception filters instead.}}
//                 ^^^^^^^^^
// log exception ...
// do something
// do something
// do something
// do something
// Noncompliant
// Noncompliant
//          ^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotCheckZeroSizeCollection.cs
// Noncompliant {{The count of 'IEnumerable<T>' is always '>=0', so fix this test to get the real expected behavior.}}
//                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
//                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{The count of 'ICollection' is always '>=0', so fix this test to get the real expected behavior.}}
//                        ^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{The length of 'Array' is always '>=0', so fix this test to get the real expected behavior.}}
//                   ^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{The longlength of 'Array' is always '>=0', so fix this test to get the real expected behavior.}}
//                   ^^^^^^^^^^^^^^^^^^^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotCopyArraysInProperties.cs
//                                 ^^^^^^^^^^^^^^^^^ Noncompliant {{Refactor 'Property1' into a method, properties should not copy collections.}}
//                       ^^^^^^^^^^^^^^^^^^^ Noncompliant {{Refactor 'Property2' into a method, properties should not copy collections.}}
//                       ^^^^^^^^^^^^^^^^^^ Noncompliant {{Refactor 'Property3' into a method, properties should not copy collections.}}
//                                              ^^^^^^^^^^^^^^^^^^ Noncompliant {{Refactor 'Property4' into a method, properties should not copy collections.}}
//                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant {{Refactor 'Property5' into a method, properties should not copy collections.}}
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotDecreaseMemberVisibility.cs
// No method 10
// Noncompliant {{This member hides 'MyLibrary.A.Method_01(int)'. Make it non-private or seal the class.}}
//                   ^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Error [CS0621] // Noncompliant
// Error [CS0621,CS0507] // Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant // Error [CS0621,CS0507]
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Note this cannot be auto-property, as it is a compiler error.
// Noncompliant // Error [CS0507] - cannot change modifier
// Error [CS8080].
// Noncompliant, return type is irrelevant for method resolution
// Noncompliant
// Compliant, parameters are of different types
// Compliant, the method from IFoo is called
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotExposeListT.cs
//             ^^^^^^^ Noncompliant {{Refactor this method to use a generic collection designed for inheritance.}}
//             ^^^^^^^^^ Noncompliant
//                               ^^^^^^^^^^^^ Noncompliant@-1
//             ^^^^^^^ Noncompliant {{Refactor this field to use a generic collection designed for inheritance.}}
//             ^^^^^^^^^ Noncompliant {{Refactor this property to use a generic collection designed for inheritance.}}
// Noncompliant  {{Refactor this constructor to use a generic collection designed for inheritance.}}
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotHardcodeCredentials_CustomValues.cs
// Compliant
// Noncompliant {{Make sure hard-coded credential is safe.}}
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotHardcodeCredentials_DefaultValues.cs
// Noncompliant {{Make sure hard-coded credential is safe.}}
//                 ^^^^^^^^^^^^^^^^^
// Noncompliant {{Make sure hard-coded credential is safe.}}
//                      ^^^^^^^^^^^^
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// False Negative
// False Negative
// False Negative
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotHideBaseClassMethods.cs
// Noncompliant {{Remove or rename that method because it hides 'MyLibrary.Foo.SomePublicMethod(string, string)'.}}
//                  ^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotInstantiateSharedClasses.cs
// Error [CS0103] - Foo doesn't exist
// Error [CS7036]
// Noncompliant {{Refactor this code so that it doesn't invoke the constructor of this class.}}
//          ^^^^^^^^^^^^^^^^^
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotLockOnSharedResource.cs
// Noncompliant
//                ^^^^
// ...
// ...
// Noncompliant
//                ^^^^^^^^^^^^^^^^^^^^^^^^
// ...
// Noncompliant {{Lock on a dedicated object instance instead.}}
// ...
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotLockWeakIdentityObjects.cs
// Compliant
// Noncompliant {{Replace this lock on 'MarshalByRefObject' with a lock against an object that cannot be accessed across application domain boundaries.}}
//                ^^^^^^^^^^^^^^^^^^
// Noncompliant {{Replace this lock on 'Timer' with a lock against an object that cannot be accessed across application domain boundaries.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotMarkEnumsWithFlags.cs
// Compliant - only power of 2 values
// Compliant - combination of other values
// Noncompliant {{Remove the 'FlagsAttribute' from this enum.}}
//              ^^^^^^
//      ^^^^^^^^^^ Secondary
// Compliant - values are automatically set with power of 2 values
// Noncompliant
// Secondary
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotNestTernaryOperators.cs
// Noncompliant {{Extract this nested ternary operation into an independent statement.}}
//                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
//                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant@-1
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotNestTypesInArguments.cs
// Noncompliant {{Refactor this method to remove the nested type argument.}}
//                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
//                                   ^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
//                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
//                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotOverwriteCollectionElements.cs
// Secondary
//          ^^^^^^^^^^^^^
// Noncompliant {{Verify this is the index/key that was intended; a value has already been set for it.}}
//          ^^^^^^^^^^^^^
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// #2674 List.Add method should not raise any issue when used with same elements
// #2674 List.Add method should not raise any issue when used with same elements
// Compliant, not a collection or dictionary
// Compliant, not a collection or dictionary
// Compliant, not a collection or dictionary
// Compliant, not a collection or dictionary
// Secondary
// Noncompliant
// FN - We only take consecutive element access
// Secondary
// Noncompliant
// Secondary
//          ^^^^^^^^^^^^^^^
// Noncompliant
//          ^^^^^^^^^^^^^^^
// Secondary
// Noncompliant
// Ignore methods that do not add/set items
// Compliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Compliant this is not on a dictionary
// Secondary
// Noncompliant, https://github.com/SonarSource/sonar-csharp/issues/1908
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// See https://github.com/SonarSource/sonar-csharp/issues/1967
// Some invocation that's not a method, but still have two arguments
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// ok, different instance
// FN, same instance
// Secondary
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotPassSameValueAsMultipleArguments.cs
//                  ^ Noncompliant    {{Verify that this is the intended value; it is the same as the 1st argument.}}
//               ^ Secondary@-1
//                     ^ Noncompliant@-2    {{Verify that this is the intended value; it is the same as the 1st argument.}}
//               ^ Secondary@-3
//                        ^ Noncompliant@-4    {{Verify that this is the intended value; it is the same as the 1st argument.}}
//               ^ Secondary@-5
//                           ^ Noncompliant@-6    {{Verify that this is the intended value; it is the same as the 1st argument.}}
//               ^ Secondary@-7
// Noncompliant {{Verify that this is the intended value; it is the same as the 1st argument.}}
// Secondary@-1
// Noncompliant {{Verify that this is the intended value; it is the same as the 2nd argument.}}
// Secondary@-1
// Noncompliant {{Verify that this is the intended value; it is the same as the 3rd argument.}}
// Secondary@-1
// Noncompliant {{Verify that this is the intended value; it is the same as the 4th argument.}}
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
/* My comment */ foo1.x); // Noncompliant
// Secondary@-1;
// Noncompliant
// Secondary@-1;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotShiftByZeroOrIntSize.cs
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Remove this useless shift by 64.}}
// Noncompliant
// Noncompliant {{Correct this shift; shift by 1 instead.}}
// Noncompliant {{Correct this shift; shift by 1 instead.}}
// Noncompliant {{Either promote shift target to a larger integer type or shift by 24 instead.}}
// Noncompliant {{Either promote shift target to a larger integer type or shift by 16 instead.}}
// Noncompliant {{Either promote shift target to a larger integer type or shift by 8 instead.}}
// Noncompliant {{Either promote shift target to a larger integer type or shift by less than 32 instead.}}
// Compliant
// Compliant // Error [CS0246]
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Correct this shift; '60' is larger than the type size.}} // Error [CS0165] - use of unassigned var
// Noncompliant {{Correct this shift; '60' is larger than the type size.}}
// Compliant
// Noncompliant {{Correct this shift; '64' is larger than the type size.}} // Error [CS0165] - use of unassigned var
// Compliant
// Noncompliant {{Remove this useless shift by 0.}}
// Compliant
// Compliant
// Compliant
// Compliant
// See https://github.com/SonarSource/sonar-dotnet/issues/2016
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotTestThisWithIsOperator.cs
// Noncompliant {{Offload the code that's conditional on this 'is' test to the appropriate subclass and remove the test.}}
//              ^^^^^^^^^^^^^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotThrowFromDestructors.cs
// Compliant
// Compliant, ctor covered by S3877
// Noncompliant {{Remove this 'throw' statement.}}
//          ^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant, C# 7+
// Noncompliant, generally a bad idea to throw and catch in the same method
// Noncompliant, rethrowing has the same effect as throwing
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotUseCollectionInItsOwnMethodCalls.cs
//          ^^^^ Noncompliant {{Change one instance of 'list' to a different value; This operation will probably result in an unexpected behavior.}}
//                        ^^^^ Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant {{Change one instance of 'list' to a different value; This operation always produces the same collection.}}
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant {{Change one instance of 'list' to a different value; This operation always produces an empty collection.}}
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant {{Change one instance of 'list' to a different value; Comparing to itself always returns true.}}
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant {{Change one instance of 'set' to a different value; Comparing to itself always returns false.}}
// Secondary@-1
// Noncompliant
// Secondary@-1
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotUseLiteralBoolInAssertions.MsTest.cs
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Remove or correct this assertion.}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Compliant, since the comparison triggers a conversion
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotUseLiteralBoolInAssertions.NUnit.cs
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, since the comparison triggers a conversion
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotUseLiteralBoolInAssertions.Xunit.cs
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// There is no Assert.Fail in Xunit. Assert.True(false) is way to simulate it.
// Compliant, since the comparison triggers a conversion
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotUseOutRefParameters.cs
//                   ^^^ {{Consider refactoring this method in order to remove the need for this 'out' modifier.}}
//                   ^^^ {{Consider refactoring this method in order to remove the need for this 'ref' modifier.}}
//                     ^^^ {{Consider refactoring this method in order to remove the need for this 'out' modifier.}}
//                      ^^^ {{Consider refactoring this method in order to remove the need for this 'ref' modifier.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//                          ^^^
//                                             ^^^ Noncompliant@-1
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// See https://github.com/SonarSource/sonar-dotnet/issues/2344
// compliant because this is interface implementation
// compliant because this is interface implementation
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DoNotUseRandom.cs
// Noncompliant {{Make sure that using this pseudorandom number generator is safe here.}}
//          ^^^^^^^^^^^^
// Noncompliant
// Compliant, not Random
// Compliant, using cryptographically strong RNG
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DontMixIncrementOrDecrementWithOtherOperators.cs
// Noncompliant {{Extract this increment operation into a dedicated statement.}}
//                       ^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Extract this decrement operation into a dedicated statement.}}
//                   ^^ Noncompliant
//                            ^^ Noncompliant@-1
// Noncompliant - even with parenthesis
// Noncompliant - even on string concat
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\DotNotOverloadOperatorEqual.cs
// Noncompliant {{Remove this overload of 'operator =='.}}
//                                    ^^
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EmptyCollectionsShouldNotBeEnumerated.cs
// Noncompliant {{Remove this call, the collection is known to be empty here.}}
//          ^^^^^^^^^^^^
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Compliant, we don't know anything about the list
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//                  ^^^^^^^
// Noncompliant
//          ^^^^^^^
// Compliant
// Compliant, will normally raise
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant, this will normally raise
// Compliant
// Compliant, this will normally raise
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Compliant, we don't know anything about the list
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, will normally raise
// Compliant
// Compliant, this will normally raise
// Compliant
// Compliant, this will normally raise
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Compliant, we don't know anything about the list
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, will normally raise
// Compliant
// Compliant, this will normally raise
// Compliant
// Compliant, this will normally raise
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Compliant, we don't know anything about the list
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, will normally raise
// Compliant
// Compliant
// Compliant, this will normally raise
// Compliant
// Compliant, this will normally raise
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant, this will normally raise
// Compliant
// Compliant, this will normally raise
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Compliant, we don't know anything about the set
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant, this will normally raise
// Compliant
// Compliant, this will normally raise
// Compliant, will normally raise
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Compliant, we don't know anything about the dictionary
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Compliant, will normally raise
// Compliant
// Compliant
// Compliant, DoSomething could be adding items to the list
// unicode hex sequence
// Important to test not only the first argument
// See https://github.com/SonarSource/sonar-csharp/issues/1002
// Large CFG that causes the exploded graph to hit the exploration limit
// See https://github.com/SonarSource/sonar-csharp/issues/767 (comments!)
/* Normal */ &&
/* On */)
// Compliant. This used to be a FP
// silently do nothing
// This class is here to simulate how the Dictionary from .NetCore 2.0+ behaves.
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - FN: local functions are not supported by the CFG
// Compliant - FN: local functions are not supported by the CFG
// Compliant
// Compliant - FN, the collection is empty (https://github.com/SonarSource/sonar-dotnet/issues/2944)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EmptyMethod.Comment.Fixed.cs
// Do nothing because of X and Y.
// Fixed
// Method intentionally left empty.
// Method intentionally left empty.
// Fixed
// Method intentionally left empty.
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EmptyMethod.cs
// Do nothing because of X and Y.
// Noncompliant {{Add a nested comment explaining why this method is empty, throw a 'NotSupportedException' or complete the implementation.}}
// Noncompliant
//                  ^^
// Noncompliant
//                  ^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EmptyMethod.Throw.Fixed.cs
// Do nothing because of X and Y.
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EmptyNamespace.cs
/*1*/
// Noncompliant {{Remove this empty namespace.}}
/*2*/
/*3*/
// Noncompliant
/*4*/
// Noncompliant
//^^^^^^^^^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EmptyNamespace.Fixed.Batch.cs
/*1*/
/*3*/
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EmptyNamespace.Fixed.cs
/*1*/
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EmptyNestedBlock.cs
// Noncompliant
//                                       ^^^
// Noncompliant {{Either remove or fill this block of code.}}
// Ignore
// Noncompliant
// Noncompliant
/* Do nothing because of X and Y */ }
// TODO
// Noncompliant
// Noncompliant
/* This commit doesn't count */ } // Noncompliant
// Noncompliant
// FIXME
// Noncompliant
// Noncompliant
// Noncompliant
/* This commit doesn't count */ } // Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EmptyNullableValueAccess.cs
// Compliant
// Noncompliant {{'i1' is null on at least one execution path.}}
//                            ^^^^^^^^
// Noncompliant
// TODO: Should be NC
// TODO: Should be NC
// TODO: Should be NC
// Noncompliant
// FN - switch expressions are not constrained
// FN - switch expressions are not constrained
// FN - content of static local function is not inspected by SE
// OK, value is always set
// Noncompliant
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EmptyStatement.cs
// Noncompliant {{Remove this empty statement.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//              ^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EmptyStatement.Fixed.cs
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EncryptingData.cs
// RSPEC example: https://jira.sonarsource.com/browse/RSPEC-4938
// Review all base RSA class' Encrypt/Decrypt calls
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {{Make sure that encrypting data is safe here.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Review the use of any TryEncrypt/TryDecrypt and specific Encrypt/Decrypt of RSA subclasses.
// Noncompliant
// Noncompliant
// Note: TryEncrypt/TryDecrypt are only in .NET Core 2.1+
//            myRSAC.TryEncrypt(data, Span<byte>.Empty, padding, out written); // Non compliant
//            myRSAC.TryDecrypt(data, Span<byte>.Empty, padding, out written); // Non compliant
// Review the creation of Encryptors from any SymmetricAlgorithm instance.
//          ^^^^^^^^^^^^^^^^^^^^^^ {{Make sure that encrypting data is safe here.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// ...
// Noncompliant 
/* no-op */ }
/* no-op */ }
// Should raise on derived asymmetric classes
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Should raise on the Try* methods added in NET Core 2.1
// Note: this test is cheating - we can't currently referencing the
// real 2.1 assemblies since the test project is targetting an older
// NET Framework, so we're testing against a custom subclass
// to which we've added the new method names.
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Should raise on derived symmetric classes
// Noncompliant
// Noncompliant
// Noncompliant
// Dummy methods with the same names as the additional methods added in Net Core 2.1.
/* no-op */ }
/* no-op */ }
/* no-op */ }
/* no-op */ }
/* no-op */ }
// Abstract methods
/* no-op */ }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EncryptionAlgorithmsShouldBeSecure.cs
// Noncompliant
// Noncompliant
// none
// Noncompliant {{Use secure mode and padding scheme.}}
// none
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// none
// OAEP Padding is used (second parameter set to true)
// Only raise on Encrypt method
// we don't know which padding is actually used here so we do not raise the issue
// Noncompliant {{Use secure mode and padding scheme.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EncryptionAlgorithmsShouldBeSecure_NetStandard21.cs
// Noncompliant
// Noncompliant
// Noncompliant {{Use secure mode and padding scheme.}}
// none
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// Noncompliant, we will be raising twice
// none
// OAEP Padding is used (second parameter set to true)
// Only raise on Encrypt method
// we don't know which padding is actually used here so we do not raise the issue
// Noncompliant {{Use secure mode and padding scheme.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EnumerableSumInUnchecked.cs
// Compliant
// Noncompliant {{Refactor this code to handle 'OverflowException'.}}
//                                 ^^^
// Noncompliant
//                           ^^^
// Noncompliant
//                             ^^^
// Compliant
// exception handling...
// Compliant, it's on double
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EnumNameHasEnumSuffix.cs
//Noncompliant {{Rename this enumeration to remove the 'Enum' suffix.}}
//              ^^^^^^
//Noncompliant {{Rename this enumeration to remove the 'Flags' suffix.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EnumNameShouldFollowRegex.cs
// Noncompliant {{Rename this enumeration to match the regular expression: '^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$'.}}
//              ^^^^^^
// Noncompliant
// Noncompliant {{Rename this enumeration to match the regular expression: '^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$'.}}
//              ^^^^^^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EnumsShouldNotBeNamedReserved.cs
// Noncompliant {{Remove or rename this enum member.}}
//      ^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EnumStorageNeedsToBeInt32.cs
// Noncompliant {{Change this enum storage to 'Int32'.}}
//              ^^^^^^^^^^
// Compliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// https://github.com/SonarSource/sonar-dotnet/issues/3026
// Noncompliant FP, it has to be long due to enum values
// Noncompliant FP, it has to be long due to enum values
// Noncompliant FP, it has to be ulong due to enum values
// Noncompliant FP, it has to be uint due to enum values
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EqualityOnFloatingPoint.cs
//Noncompliant {{Do not check floating point equality with exact values, use a range instead.}}
//                ^^
//Noncompliant {{Do not check floating point inequality with exact values, use a range instead.}}
//Noncompliant
// Noncompliant indirect equality test
// Noncompliant indirect inequality test
// Not recognized
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EqualityOnModulus.cs
// Noncompliant; if x is negative, x % 2 == -1
//                  ^^^^^^^^
// Noncompliant {{The result of this modulus operation may not be negative.}}
// Noncompliant {{The result of this modulus operation may not be positive.}}
//Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EquatableClassShouldBeSealed.cs
// Compliant
// Compliant
// Noncompliant
// Compliant
// Noncompliant {{Seal class 'ClassImplementsIEquatable' or implement 'IEqualityComparer<T>' instead.}}
//               ^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant because internal
// Compliant because private
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\EventHandlerDelegateShouldHaveProperArguments.cs
// Noncompliant {{Make the sender on this event invocation not null.}}
//                    ^^^^^^^^^^^^^^^^
// Noncompliant {{Use 'EventArgs.Empty' instead of null as the event args of this event invocation.}}
// Noncompliant
// Noncompliant@-1
// Noncompliant {{Make the sender on this event invocation not null.}}
//          ^^^^^^^^^^^^^^^^^^
// Noncompliant {{Make the sender on this static event invocation null.}}
// Noncompliant {{Use 'EventArgs.Empty' instead of null as the event args of this event invocation.}}
// Noncompliant
// Noncompliant@-1
// Noncompliant {{Make the sender on this static event invocation null.}}
// Compliant - we don't handle default(T)
// Compliant - we don't handle default(T)
// Noncompliant
// Error [CS7036] - Invalid syntax
// Error [CS1593] - Invalid syntax
// Should not cause a StackOverflow
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExceptionConstructorShouldNotThrow.cs
// Noncompliant {{Avoid throwing exceptions in this constructor.}}
//          ^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Secondary
// Noncompliant
// Noncompliant
// Error@-1 [CS0156]
// Noncompliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExceptionRethrow.cs
// Noncompliant {{Consider using 'throw;' to preserve the stack trace.}}
//              ^^^^^^^^^^
// Compliant; stacktrace preserved
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExceptionRethrow.Fixed.cs
// Fixed
// Compliant; stacktrace preserved
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExceptionShouldNotBeThrownFromUnexpectedMethods.cs
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Error [CS0216] - no != operator
// Noncompliant {{Remove this 'throw' statement.}}
//          ^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExceptionsNeedStandardConstructors.cs
// Noncompliant {{Implement the missing constructors for this exception.}}
//               ^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExceptionsShouldBePublic.cs
// Compliant
//                 ^^^^^^^^^^^^^^^^^ Noncompliant {{Make this exception 'public'.}}
//        ^^^^^^^^^^^^^^^^^^ Noncompliant {{Make this exception 'public'.}}
// Compliant
// Compliant
// Compliant
//                     ^^^^^^^^^^^^^^^^^ Noncompliant {{Make this exception 'public'.}}
//            ^^^^^^^^^^^^^^^^^^ Noncompliant {{Make this exception 'public'.}}
// Compliant
//                    ^^^^^^^^^^^^^^^^^ Noncompliant {{Make this exception 'public'.}}
// Compliant
//                   ^^^^^^^^^^^^^^^ Noncompliant {{Make this exception 'public'.}}
// Compliant
// Compliant
// Compliant
// Compliant
//            ^^^^^^^^^^^^^^^^^^ Noncompliant {{Make this exception 'public'.}}
//                    ^^^^^^^^^^^^^^^^^ Noncompliant {{Make this exception 'public'.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExceptionsShouldBeUsed.cs
// Noncompliant {{Throw this exception or remove this useless statement.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExecutingSqlQueries_Net46.cs
// Compliant
// Compliant
// Compliant
// Compliant, we don't know anything about the parameter
// Compliant
// Compliant, constant queries are safe
// Compliant
// Compliant, constant queries are safe
// Compliant
// Compliant, constant queries are safe
// Compliant, we don't know enough about the parameter
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant {{Make sure that executing SQL queries is safe here.}}
//                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant {{Make sure that executing SQL queries is safe here.}}
//                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant - scalars can be dangerous and lead to expensive queries
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Make sure that executing SQL queries is safe here.}}
//                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant
// Compliant
// Compliant
// Compliant, we don't know anything about the parameter
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
/**
// Noncompliant {{Make sure that executing SQL queries is safe here.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Compliant, we don't know anything about the parameter
// Compliant, we don't know anything about the parameter
// Compliant, we don't know anything about the parameter
// Compliant, we don't know anything about the parameter
// Compliant
// Compliant
// Compliant, we don't know anything about the parameter
// Compliant
// Compliant
// Compliant, we don't know anything about the parameter
// Compliant, we don't know anything about the parameter
// Noncompliant {{Make sure that executing SQL queries is safe here.}}
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant {{Make sure that executing SQL queries is safe here.}}
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExecutingSqlQueries_NetCore.cs
// Compliant, FormattableString is sanitized
// Compliant, constants are safe
// Compliant, constants are safe
// Compliant, constants are safe
// Compliant, not concat or format
// Noncompliant
// Noncompliant FP, interpolated string with argument tranformed in RawQuery
// Compliant, not concat or format
// Noncompliant
// Noncompliant, string interpolation  it is RawSqlString
// Noncompliant, RawSqlQuery
// Noncompliant, RawSqlQuery
// Noncompliant, RawSqlQuery
// Compliant, FormattableString is sanitized
// Compliant
// Noncompliant
// Compliant, FormattableString is sanitized
// Compliant, constants are safe
// Compliant, constants are safe
// Compliant, constants are safe
// Compliant, not concat
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant FP, interpolated string with argument tranformed in RawQuery
// Compliant, not concat or format
// Noncompliant
// Noncompliant
// Compliant, FormattableString is sanitized
// Compliant, constants are safe
// Compliant, constants are safe
// Compliant, not concat/format
// Compliant
// Noncompliant FP, interpolated string with argument tranformed in RawQuery
// Compliant, the parameters are sanitized
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, the FormattableString is transformed into a parametrized query.
// Noncompliant
// FN
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, the FormattableString is transformed into a parametrized query.
// Noncompliant
// FN
// Noncompliant
// Noncompliant
// Compliant, the FormattableString is transformed into a parametrized query.
// Noncompliant
// FN
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExpandingArchives.cs
// Noncompliant
//              ^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
//                            ^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, method is not tracked
// Compliant, properties are not tracked
// Compliant, method is not tracked
// Compliant, not an invocation, but could be considered as FN
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExpectedExceptionAttributeShouldNotBeUsed.MsTest.cs
// Noncompliant
// Compliant - one line
// Compliant - one line
//...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExpectedExceptionAttributeShouldNotBeUsed.NUnit.cs
// Noncompliant
// Compliant - one line
// Compliant - one line
//...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExpressionComplexity.cs
// Noncompliant
//                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Reduce the number of conditional operators (4) used in the expression (maximum allowed 3).}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExtensionMethodShouldBeInSeparateNamespace.cs
// Noncompliant
// ErrorType is considered as part of global namespace but we don't want to report on it
// Noncompliant // Error [CS1109] - extensions method can't be on inner classes
// Noncompliant {{Either move this extension to another namespace or move the method inside the class itself.}}
//                  ^^^
// Compliant
// Error [CS0246] - unknown type
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ExtensionMethodShouldNotExtendObject.cs
// Noncompliant {{Refactor this extension to extend a more concrete type.}}
//                  ^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FieldShadowsParentField.cs
// Noncompliant {{'ripe' is the name of a field in 'Fruit'.}}
//                   ^^^^
// Compliant, static is ignored
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FieldShouldBeReadonly.cs
// Noncompliant {{Make '_birthYear' 'readonly'.}}
//                  ^^^^^^^^^^
// Noncompliant
// Compliant, the setter action references it
// Compliant, it is used in a delegate
// Compliant, it is passed as ref outside the ctor
// Compliant, it is passed as out outside the ctor
// Non-compliant, but not reported now because of the partial
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Compliant
// See https://github.com/SonarSource/sonar-dotnet/issues/2291
// Compliant - could be set as readonly but this changes the behavior of the field
// Noncompliant
// Noncompliant
// Compliant because of the attribute
// See https://github.com/SonarSource/sonar-csharp/issues/1009
// Issue with leading trivia not moved to the readonly modifier
// Noncompliant
// Compliant, containing class is marked with [Serializable]
// Noncompliant, Serializable attribute is not inherited
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FieldShouldBeReadonly.Fixed.cs
// Fixed
// Fixed
// Compliant, the setter action references it
// Compliant, it is used in a delegate
// Compliant, it is passed as ref outside the ctor
// Compliant, it is passed as out outside the ctor
// Non-compliant, but not reported now because of the partial
// Compliant
// Compliant
// Fixed
// Fixed
// Compliant
// See https://github.com/SonarSource/sonar-dotnet/issues/2291
// Compliant - could be set as readonly but this changes the behavior of the field
// Fixed
// Fixed
// Compliant because of the attribute
// See https://github.com/SonarSource/sonar-csharp/issues/1009
// Issue with leading trivia not moved to the readonly modifier
// Fixed
// Compliant, containing class is marked with [Serializable]
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FieldShouldNotBePublic.cs
// Noncompliant {{Make 'Pi3' private.}}
//                             ^^^
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FieldsShouldNotBePublic.cs
// Noncompliant {{Make this field 'private' and encapsulate it in a 'public' property.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - for interop code
// Compliant - for interop code
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FieldsShouldNotDifferByCapitalization.cs
// Noncompliant {{Rename this field; it may be confused with 'flesh' in 'Fruit'.}}
// Noncompliant {{Rename this field; it may be confused with 'flesh' in 'Fruit'.}}
// Compliant, base class field is private
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileLines20.cs
// Noncompliant {{This file has 20 lines, which is greater than 10 authorized. Split it into smaller files.}}
// Error [CS0120] - method call is not static
// WTF
// Who writes this kind of code!
// hello
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileLines9.cs
/*
/*
/// <summary>
///
/// </summary>
// TEST
// hello
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileShouldEndWithEmptyNewLine_EmptyFile.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileShouldEndWithEmptyNewLine_EmptyLine.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileShouldEndWithEmptyNewLine_NoEmptyLine.cs
// Noncompliant {{Add a new line at the end of the file 'FileShouldEndWithEmptyNewLine_NoEmptyLine.cs'.}}________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FinalizerShouldNotBeEmpty.cs
// Noncompliant {{Remove this empty finalizer.}}
// Noncompliant {{Remove this empty finalizer.}}
// Some comment
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FlagsEnumWithoutInitializer.cs
// Noncompliant {{Initialize all the members of this 'Flags' enumeration.}}
//       ^^^^^^^^^
// Compliant
// Compliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FlagsEnumZeroMember.cs
// Noncompliant {{Rename 'Zero' to 'None'.}}
//      ^^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ForeachLoopExplicitConversion.cs
// Compliant // Error [CS0030] - cannot convert
// Noncompliant {{Either change the type of 'i' to 'A' or iterate on a generic collection of type 'B'.}}
//                   ^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//We decided to not add the necessary complexity to recognize the following corner case
// Compliant, although it can throw
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ForeachLoopExplicitConversion.Fixed.cs
// Compliant // Error [CS0030] - cannot convert
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
//We decided to not add the necessary complexity to recognize the following corner case
// Compliant, although it can throw
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ForLoopConditionAlwaysFalse.cs
// Noncompliant {{This loop will never execute.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// FN - we only check for literals in the condition
// FN - we only check for initializers inside the loop statement
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ForLoopCounterChanged.cs
// Noncompliant {{Do not update the loop counter 'a2' within the loop body.}}
//              ^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Not detected
// Not detected
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ForLoopCounterCondition.cs
//do some stuff
//Noncompliant {{This loop's stop condition tests 'i' but the incrementer updates 'j'.}}
//                          ^^^^^^
//Noncompliant {{This loop's stop incrementer updates 'i' but the stop condition doesn't test any variables.}}
//Compliant
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ForLoopIncrementSign.cs
//                                 ^^^ Noncompliant {{'i' is incremented and will never reach 'stop condition'.}}
//                          ^^^^^ Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
//                                 ^^^ Noncompliant {{'i' is decremented and will never reach 'stop condition'.}}
//                          ^^^^^ Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
// Noncompliant
// Secondary@-1
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FrameworkTypeNaming.cs
// Noncompliant {{Make this class name end with 'Attribute'.}}
//        ^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Compliant, the base class doesn't correspond to the naming convention
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FunctionComplexity.cs
//             ^^^^^^^^^^^^^^^^^^ Noncompliant [0] {{The Cyclomatic Complexity of this constructor is 4 which is greater than 3 authorized.}}
//             ^^^^^^^^^^^^^^^^^^ Secondary@-1 [0] {{+1}}
//          ^^ Secondary [0] {{+1}}
//          ^^ Secondary [0] {{+1}}
//          ^^ Secondary [0] {{+1}}
//       ^^^^^^^^^^^^^^^^^^ Noncompliant [1]
//       ^^^^^^^^^^^^^^^^^^ Secondary@-1 [1] {{+1}}
//          ^^ Secondary [1] {{+1}}
//          ^^ Secondary [1] {{+1}}
//          ^^ Secondary [1] {{+1}}
// Noncompliant [2]
// Secondary@-1 [2] {{+1}}
// Secondary [2] {{+1}}
// Secondary [2] {{+1}}
// Secondary [2] {{+1}}
// Noncompliant [3]
// Secondary@-1 [3] {{+1}}
// Secondary [3] {{+1}}
// Secondary [3] {{+1}}
// Secondary [3] {{+1}}
// Noncompliant [4]
// Secondary@-1 [4] {{+1}}
// Secondary [4] {{+1}}
// Secondary [4] {{+1}}
// Secondary [4] {{+1}}
// Noncompliant [5]
// Secondary@-1 [5] {{+1}}
// Secondary [5] {{+1}}
// Secondary [5] {{+1}}
// Secondary [5] {{+1}}
// Noncompliant [6]
// Secondary@-1 [6] {{+1}}
// Secondary [6] {{+1}}
// Secondary [6] {{+1}}
// Secondary [6] {{+1}}
// Noncompliant [7]
// Secondary@-1 [7] {{+1}}
// Secondary [7] {{+1}}
// Secondary [7] {{+1}}
// Secondary [7] {{+1}}
// Noncompliant [8]
// Secondary@-1 [8] {{+1}}
// Secondary@-2 [8] {{+1}}
// Secondary@-3 [8] {{+1}}
// Secondary@-4 [8] {{+1}}
// Secondary@-5 [8] {{+1}}
// Noncompliant [9]
// Secondary@-1 [9] {{+1}}
// Secondary@-2 [9] {{+1}}
// Secondary@-3 [9] {{+1}}
// Secondary@-4 [9] {{+1}}
// Noncompliant [10]
// Secondary@-1 [10] {{+1}}
//                   ^ Secondary [10] {{+1}}
//                         ^ Secondary@-1 [10] {{+1}}
// Secondary [10] {{+1}}
// Compliant - FN: Null coalescence assignment is not considered
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FunctionNestingDepth.cs
// Noncompliant {{Refactor this code to not nest more than 3 control flow statements.}}
//                      ^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GcCollectShouldNotBeCalled.cs
// Noncompliant {{Refactor the code to remove this use of 'GC.Collect'.}}
//             ^^^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GenericInheritanceShouldNotBeRecursive.cs
// some base classes
// Compliant
// Compliant
// Noncompliant {{Refactor this class so that the generic inheritance chain is not recursive.}}
//        ^^
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant // Error [CS0535]
// some base classes
// Compliant
// Compliant
// Compliant
// Noncompliant  {{Refactor this interface so that the generic inheritance chain is not recursive.}}
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GenericReadonlyFieldPropertyAssignment.AddConstraint.Fixed.cs
// this could be a struct
// Compliant, we are in the constructor
//Fixed
//Fixed
//Fixed
//Fixed
// this can only be a class
// this assignment is guaranteed to work
// this could be a struct
// Compliant, we are in the constructor
// Compliant // Error [CS1648]
// Compliant // Error [CS1648]
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GenericReadonlyFieldPropertyAssignment.cs
// this could be a struct
// Compliant, we are in the constructor
//Noncompliant {{Restrict 'point' to be a reference type or remove this assignment of 'X'; it is useless if 'point' is a value type.}}
//          ^^^^^^^
//Noncompliant; if point is a struct, then nothing happened
//Noncompliant;
//Noncompliant;
// this can only be a class
// this assignment is guaranteed to work
// this could be a struct
// Compliant, we are in the constructor
// Compliant // Error [CS1648]
// Compliant // Error [CS1648]
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GenericReadonlyFieldPropertyAssignment.Remove.Fixed.cs
// this could be a struct
// Compliant, we are in the constructor
//Fixed
//Fixed
// this can only be a class
// this assignment is guaranteed to work
// this could be a struct
// Compliant, we are in the constructor
// Compliant // Error [CS1648]
// Compliant // Error [CS1648]
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GenericTypeParameterEmptinessChecking.cs
// Noncompliant {{Use a comparison to 'default(T)' instead or add a constraint to 'T' so that it can't be a value type.}}
//                      ^^^^
// Error [CS0122]
//compliant, B is a class
// Error [CS0246] - unknown type C
//compliant, we don't know anything about C
// Noncompliant
// Noncompliant
// Error [CS0246] - unknown type
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GenericTypeParameterEmptinessChecking.Fixed.cs
// Fixed
// Error [CS0122]
//compliant, B is a class
// Error [CS0246] - unknown type C
//compliant, we don't know anything about C
// Fixed
// Fixed
// Error [CS0246] - unknown type
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GenericTypeParameterInOut.cs
//Noncompliant
//                      ^
//Noncompliant
//Noncompliant
//Noncompliant
// Noncompliant {{Add the 'in' keyword to parameter 'T' to make it 'contravariant'.}}
// Noncompliant
// Noncompliant
//Noncompliant
//we don't report if it is not used
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GenericTypeParameterInOut.CSharp7.cs
// https://github.com/SonarSource/sonar-csharp/issues/1513
// Compliant, T cannot be in or out when used in a tuple
// Compliant, T cannot be in or out when used in a tuple
// Noncompliant {{Add the 'in' keyword to parameter 'T' to make it 'contravariant'.}}
// Noncompliant {{Add the 'out' keyword to parameter 'T' to make it 'covariant'.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GenericTypeParametersRequired.cs
// Noncompliant {{Refactor this method to have parameters matching all the type parameters.}}
//                  ^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Error [CS0122]
// Noncompliant // Error [CS0246]
// Noncompliant
// Noncompliant
// Noncompliant // Error [CS0246]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GenericTypeParameterUnused.cs
//Compliant
// Error [CS0246] - IDummyInterface not found
//Compliant, it is implementing the interface.
// Error [CS0246,CS0538] - Compliant, it is implementing the interface, although we don't know anything about it
// Ignore@-1 CS0538
// Noncompliant {{'T' is not used in the class.}}
//                        ^
// Noncompliant; <T> is ignored
// Noncompliant; <T> is ignored
// Noncompliant
// Noncompliant
// Noncompliant
//don't use T here, but the method is still compliant because it is an override
// Noncompliant
// Compliant
// Compliant, not recognized that it's a non used type parameter
// Noncompliant
// Compliant - FN: local functions are not verified
// Compliant - FN: local static functions are not verified
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GetHashCodeEqualsOverride.cs
// Compliant
// Compliant
//Noncompliant {{Remove this 'base' call to 'object.GetHashCode', which is directly based on the object reference.}}
//                                   ^^^^^^^^^^^^^^^^^^
//Compliant, guard condition
//Compliant, guard condition
//Noncompliant
//Compliant
//Compliant
//Noncompliant
// Compliant
//Noncompliant, calls object.GetHashCode()
//Noncompliant, calls object.GetHashCode()
// Noncompliant
/**
// Compliant, it's decorating the base behavior
// FN - the attribute isn't changing the default behavior
// FN - the attribute isn't changing the default behavior
// Compliant, it's decorating the base behavior
// Compliant
// Compliant, decorating the default behavior
// Compliant, it's decorating the base behavior
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GetHashCodeMutable.cs
// Noncompliant {{ Refactor 'GetHashCode' to not reference mutable fields.}}
// Secondary {{Remove this use of 'foo' or make it 'readonly'.}}
//                  ^^^
// Secondary {{Remove this use of 'age' or make it 'readonly'.}}
// Secondary {{Remove this use of 'name' or make it 'readonly'.}}
// Compliant, we already reported on this symbol
// Secondary {{Remove this use of 'Field' or make it 'readonly'.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GetHashCodeMutable.Fixed.cs
// Fixed
// Compliant, we already reported on this symbol
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GetTypeWithIsAssignableFrom.cs
//Noncompliant {{Use the 'IsInstanceOfType()' method instead.}}
/*abcd*/.IsAssignableFrom(expr2.GetType() /*efgh*/)) //Noncompliant {{Use the 'IsInstanceOfType()' method instead.}}
//              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//Compliant
//Noncompliant {{Use the 'is' operator instead.}}
//Noncompliant
// Noncompliant  {{Use a 'null' check instead.}}
//              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//Compliant
//Compliant
//Noncompliant
//Compliant
//Noncompliant
// Compliant - "is object" is a commonly used pattern for non-null check
// Compliant - "is object" is a commonly used pattern for non-null check
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GetTypeWithIsAssignableFrom.Fixed.Batch.cs
//Fixed
/*abcd*/.IsInstanceOfType(expr2 /*efgh*/)) //Fixed
//Compliant
//Fixed
//Fixed
// Fixed
//Compliant
//Compliant
//Fixed
//Compliant
//Fixed
// Compliant - "is object" is a commonly used pattern for non-null check
// Compliant - "is object" is a commonly used pattern for non-null check
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant
// Fixed
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GetTypeWithIsAssignableFrom.Fixed.cs
//Fixed
/*abcd*/.IsInstanceOfType(expr2 /*efgh*/)) //Fixed
//Compliant
//Fixed
//Fixed
// Fixed
//Compliant
//Compliant
//Fixed
//Compliant
//Fixed
// Compliant - "is object" is a commonly used pattern for non-null check
// Compliant - "is object" is a commonly used pattern for non-null check
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant
// Fixed
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GotoStatement.cs
//Noncompliant {{Remove this use of 'goto'.}}
//          ^^^^
//Noncompliant
//                  ^^^^
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\GuardConditionOnEqualsOverride.cs
// Okay; base is object
// do some checks here
// Noncompliant {{Change this guard condition to call 'object.ReferenceEquals'.}}
//              ^^^^^^^^^^^^^^^^^^
// do some checks here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\HardcodedIpAddress.cs
// this is mainly for assembly versions
// Noncompliant {{Make sure using this hardcoded IP address '192.168.0.1' is safe here.}}
//                      ^^^^^^^^^^^^^
// Compliant, not a valid IP
// Compliant, this is an exception in the rule (see: https://github.com/SonarSource/sonar-csharp/issues/1540)
// Compliant
// Compliant
// Noncompliant
// Compliant, not recognized as IPv6 address
// Compliant, this is an exception in the rule
// Compliant, should not be recognized as 0.0.0.2
//Compliant
//Compliant
//Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\HttpPostControllerActionShouldValidateInput.cs
// Compliant - input is validated
// Compliant - no input to validate
// Compliant - no HttpPostAttribute
// Compliant - input is validated
// Noncompliant {{Enable input validation for this HttpPost method.}}
//       ^^^^^^^^
// Noncompliant
// Noncompliant
// Error [CS1503] - cannot convert
// Noncompliant
// Error [CS7036] - no arg given
// Noncompliant
// Error [CS1729] - ctor doesn't exist
// Noncompliant - even when class doesn't derived from Controller
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\IfChainWithoutElse.cs
// Noncompliant {{Add the missing 'else' clause.}}
//          ^^^^^^^
// Noncompliant {{Add the missing 'else' clause.}}
//          ^^^^^^^
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\IfCollapsible.cs
//          ^^ Secondary [0]
//              ^^ Noncompliant [0]
// Secondary [1]
// Noncompliant [1] {{Merge this if statement with the enclosing one.}}
// Compliant, parent has else
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\IfConditionalAlwaysTrueOrFalse.cs
// Noncompliant {{Remove this useless 'if' statement.}}
//          ^^^^^^^^^
// Noncompliant {{Remove this useless 'if' statement.}}
// Noncompliant
// Noncompliant {{Remove this useless 'else' clause.}}
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\IfConditionalAlwaysTrueOrFalse.Fixed.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ImplementIDisposableCorrectly.AbstractClass.cs
// is ignored
// Noncompliant
//             ^^^^^^^^ Secondary {{'AbstractWithAbstractDispose.Dispose()' should not be 'virtual' or 'abstract'.}}
//                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant {{Fix this implementation of 'IDisposable' to conform to the dispose pattern.}}
//                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary@-1 {{Provide 'protected' overridable implementation of 'Dispose(bool)' on 'AbstractWithoutProtectedDispose' or mark the type as 'sealed'.}}
// Secondary {{'AbstractWithoutProtectedDispose.Dispose()' should also call 'Dispose(true)'.}}
// Noncompliant
//                              ^^^^^^^ Secondary {{Modify 'Dispose(disposing)' so that it calls 'base.Dispose(disposing)'.}}
// compliant
// Does not call Base.Dispose(disposing) because the base method is abstract.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ImplementIDisposableCorrectly.cs
// Noncompliant {{Fix this implementation of 'IDisposable' to conform to the dispose pattern.}}
// Secondary {{'SimpleDisposable.Dispose()' should also call 'GC.SuppressFinalize(this)'.}}
// Noncompliant
// Secondary {{'DisposableWithMoreThanTwoStatements.Dispose()' should call 'Dispose(true)', 'GC.SuppressFinalize(this)' and nothing else.}}
//               ^^^^^^^^^^^^^^^^ Noncompliant {{Fix this implementation of 'IDisposable' to conform to the dispose pattern.}}
//               ^^^^^^^^^^^^^^^^ Secondary@-1 {{Provide 'protected' overridable implementation of 'Dispose(bool)' on 'NoVirtualDispose' or mark the type as 'sealed'.}}
//                  ^^^^^^^ Secondary {{'NoVirtualDispose.Dispose()' should call 'Dispose(true)' and 'GC.SuppressFinalize(this)'.}}
// This should not affect the implementation
// Noncompliant
//                       ^^^^^^^ Secondary {{'ExplicitImplementation.Dispose()' should also call 'GC.SuppressFinalize(this)'.}}
//                       ^^^^^^^ Secondary@-1 {{'ExplicitImplementation.Dispose()' should be 'public'.}}
// Noncompliant
//             ^^^^^^^ Secondary {{'VirtualImplementation.Dispose()' should not be 'virtual' or 'abstract'.}}
//                          ^^^^^^^ Secondary@-1 {{'VirtualImplementation.Dispose()' should also call 'GC.SuppressFinalize(this)'.}}
// Noncompliant
//                  ^^^^^^^ Secondary {{'WithFinalizer.Dispose()' should also call 'GC.SuppressFinalize(this)'.}}
//       ^^^^^^^^^^^^^ Secondary {{Modify 'WithFinalizer.~WithFinalizer()' so that it calls 'Dispose(false)' and then returns.}}
// Noncompliant
// Secondary, more than one line
// Compliant, we are not in charge of our base
// Compliant, we do not override Dispose(bool)
// Noncompliant
//                              ^^^^^^^ Secondary {{Modify 'Dispose(disposing)' so that it calls 'base.Dispose(disposing)'.}}
// Noncompliant, checking for deeper inheritance here
//                              ^^^^^^^ Secondary {{Modify 'Dispose(disposing)' so that it calls 'base.Dispose(disposing)'.}}
// Compliant, interface
//               ^^^^^^^^^^^^^^^^^^^^^ Noncompliant
//                                                         ^^^^^^^^^^^ Secondary@-1 {{Remove 'IDisposable' from the list of interfaces implemented by 'DerivedWithInterface1' and override the base class 'Dispose' implementation instead.}}
// Compliant, we are not in charge of the interface
// Sealed class
// Cleanup
// Simple implementation
// Cleanup
// Implementation with a finalizer
// Cleanup
// Base disposable class
// Cleanup
// Do not forget to call base
// Base disposable class, expression body
// Cleanup
// Do not forget to call base
// Compliant - FN: for ref structs the pattern is to have Dispose without parameters
// NOTE: this is not compliant
// Noncompliant
// To detect redundant calls
// TODO: dispose managed state (managed objects).
// TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
// TODO: set large fields to null.
// TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.
// ~Foo3() {
//   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
//   Dispose(false);
// }
// This code added to correctly implement the disposable pattern.
// Secondary
// Do not change this code. Put cleanup code in Dispose(bool disposing) above.
// TODO: uncomment the following line if the finalizer is overridden above.
// GC.SuppressFinalize(this);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ImplementIDisposableCorrectlyPartial1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ImplementIDisposableCorrectlyPartial2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ImplementISerializableCorrectly.cs
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/ }
// Nonpublic classes are ignored
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/
//               ^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
//         ^^^^^ Secondary@-1 {{Add 'System.SerializableAttribute' attribute on 'Serializable_NoAttribute' because it implements 'ISerializable'.}}
/*do something*/ }
/*do something*/ }
//                  ^^^^^^^^^^^^^ Secondary {{Make 'GetObjectData' 'public' and 'virtual', or seal 'Serializable_NoAttribute'.}}
/*do something*/ }
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
//         ^^^^^ Secondary@-1 {{Add 'System.SerializableAttribute' attribute on 'Serializable_NoAttribute_1' because it implements 'ISerializable'.}}
/*do something*/ }
//                ^^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary {{Call constructor 'base(SerializationInfo, StreamingContext)'.}}
/*do something*/ }
// Compliant, False Negative - rule should be extended to ensure there is a virtual GetObjectData method that is called
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/ }
/*do something*/ }
//                      ^^^^^^^^^^^^^^^^^^^ Noncompliant
/*do something*/ }
//                ^^^^^^^^^^^^^^^^^^^ Secondary {{Make this constructor 'private'.}}
/*do something*/ }
/*do something*/ }
//                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
//                ^^^^^ Secondary@-1 {{Add a 'private' constructor 'Serializable_Sealed_NoConstructor(SerializationInfo, StreamingContext)'.}}
/*do something*/ }
/*do something*/ }
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
//         ^^^^^ Secondary@-1 {{Add a 'protected' constructor 'Serializable_NoConstructor(SerializationInfo, StreamingContext)'.}}
/*do something*/ }
/*do something*/ }
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
/*do something*/ }
//                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary {{Call constructor 'base(SerializationInfo, StreamingContext)'.}}
/*do something*/ }
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
/*do something*/ }
/*do something*/ }
//                           ^^^^^^^^^^^^^ Secondary {{Invoke 'base.GetObjectData(SerializationInfo, StreamingContext)' in this method.}}
/*do something*/ }
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
/*do something*/ }
/*do something*/ }
//                      ^^^^^^^^^^^^^ Secondary {{Make 'GetObjectData' 'public' and 'virtual', or seal 'SerializableDerived_New_GetObjectData'.}}
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
//         ^^^^^ Secondary@-1 {{Override 'GetObjectData(SerializationInfo, StreamingContext)' and serialize 'serializableField'.}}
/*do something*/ }
/*do something*/ }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ImplementSerializationMethodsCorrectly.cs
// Noncompliant {{Make this method 'private'.}}
//                  ^^^^^^^^^^^^^
// Noncompliant {{Make this method return 'void'.}}
// Noncompliant  {{Make this method have a single parameter of type 'StreamingContext'.}}
// Noncompliant {{Make this method have a single parameter of type 'StreamingContext'.}}
// Compliant
// Noncompliant {{Make this method have no type parameters.}}
// Noncompliant {{Make this method 'private' and return 'void'.}}
// Noncompliant {{Make this method 'private' and have a single parameter of type 'StreamingContext'.}}
// Noncompliant {{Make this method return 'void' and have a single parameter of type 'StreamingContext'.}}
// Noncompliant {{Make this method 'private', return 'void', have no type parameters and have a single parameter of type 'StreamingContext'.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\IndentSingleLineFollowingConditional.cs
/* no-op */ }
/* no-op */ }
/* no-op */ }
/* no-op */ }
// Noncompliant
//          ^^^^^^^^^^^^^^
//          ^^^^^^^^^^^^^ Secondary
// Compliant slution
// Noncompliant {{Use curly braces or indentation to denote the code conditionally executed by this 'do'}}
//          ^^
// trivia not included in secondary location for single line statements...
//          ^^^^^^^^^^^^^^^^^^ Secondary
// Noncompliant {{Use curly braces or indentation to denote the code conditionally executed by this 'while'}}
//          ^^^^^^^^^^^^^^^^^^
// trivia not included in secondary location for single line statements...
//         ^^^^^^^^^^^^^^^^^^ Secondary
// Noncompliant {{Use curly braces or indentation to denote the code conditionally executed by this 'for'}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
// trivia not included in secondary location for single line statements...
//     ^^^^^^^^^^^^^^^^^^ Secondary
// Noncompliant {{Use curly braces or indentation to denote the code conditionally executed by this 'foreach'}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^
// trivia not included in secondary location for single line statements...
//          ^^^^^^^^ Secondary
// Noncompliant {{Use curly braces or indentation to denote the code conditionally executed by this 'if'}}
//          ^^^^^^^^^^^^^^^^
// trivia not included in secondary location for single line statements...
//          ^^^^^^^^^^^^ Secondary
// Noncompliant {{Use curly braces or indentation to denote the code conditionally executed by this 'else'}}
//          ^^^^
//          ^^^^^^^^^^^^ Secondary
// compliant - common pattern used in Akka, and used Ember and Nancy too.
// Noncompliant {{Use curly braces or indentation to denote the code conditionally executed by this 'else if'}}
//          ^^^^^^^^^^^^^^^^^
//          ^^^^^^^^^ Secondary
// Noncompliant {{Use curly braces or indentation to denote the code conditionally executed by this 'else if'}}
//          ^^^^^^^^^^^^^^^^^
//    ^^^^^^^^^ Secondary
// Noncompliant
//          ^^^^
//          ^^^^^^^^^^^^ Secondary
//          ^^^^^^^^^^^^ @-1
//          ^^^^^^^^^ Secondary
// Noncompliant
//          ^^
// comments are included in highlighting for compound statements
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary
//          ^^^^^^^^^^^^^^^^^^ @-1
// comments are included in highlighting for compound statements
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ @-1
// comments are included in highlighting for compound statements
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^ @-1
// comments are included in highlighting for compound statements
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary
//          ^^^^^^^^^^^^^^^^^ @-1
// comments are included in highlighting for compound statements
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary
//          ^^ @-1
//          ^^^^^^^^ Secondary
// Indentation is irrelevant if there are braces
/* no-op */
// not part of the control statement
// not part of the control statement
// not part of the control statement
// not part of the control statement
// not part of the control statement
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\IndexOfCheckAgainstZero.cs
// Noncompliant
//                                         ^^^
// ...
// Noncompliant {{0 is a valid index, but this check ignores it.}}
// ...
// Noncompliant
// ...
// ...
// ...
// Noncompliant
// ...
// Noncompliant
// ...
// ...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\InfiniteRecursion.cs
// Noncompliant; no condition under which pow isn't re-called
//          ^^^
// this is never reached
// Noncompliant {{Add a way to break out of this method's recursion.}}
// Noncompliant {{Add a way to break out of this method.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Add a way to break out of this property accessor's recursion.}}
// FN - analyzer currently only checks for property access on the 'this' object
// Not recognized, but the accessors are circularly infinitely recursive
// Noncompliant
// Compliant - FP
// FN - analyzer currently only checks for property access on the 'this' object
// Noncompliant
// Compliant, already not reachable
// Noncompliant
// Compliant
// (FN) False Negative
// See https://github.com/SonarSource/sonar-dotnet/issues/2342
// this is never reached
// FN - Two methods calling each other are not recognized
//Noncompliant
//Noncompliant
// FN - Two methods calling each other are not recognized
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\InheritedCollidingInterfaceMembers.AfterCSharp8.cs
// Error [CS8705] Interface member 'A.m()' does not have a most specific implementation. Neither 'B.A.m()', nor 'C.A.m()' are most specific
//                    ^^^^^^ Secondary
// Noncompliant {{Rename or add member 'Method(string)' to this interface to resolve ambiguities.}}
//                   ^^^^^^^
//                             ^^^^^^^^^^^^^^ Secondary
// Noncompliant {{Rename or add member 'AbstractMethod(string)' to this interface to resolve ambiguities.}}
//                   ^^^^^^^^^^^^^^^^^^^^^
//                            ^^^^^^^ Secondary
// Noncompliant {{Rename or add member 'Virtual(string)' to this interface to resolve ambiguities.}}
//                   ^^^^^^^^^^^^^^^^^^^^
//                      ^^^^^^^^ Secondary
// Noncompliant {{Rename or add member 'Internal(string)' to this interface to resolve ambiguities.}}
//                   ^^^^^^^^^^^^^^^^^^^^^
//                       ^^^^^^^^^ Secondary
// Noncompliant {{Rename or add member 'Protected(string)' to this interface to resolve ambiguities.}}
//                   ^^^^^^^^^^^^^^^^^^^^^^
//                     ^^^^^^^ Secondary
// Noncompliant - FP: Issue is raised but since the methods are not accessible on the derived classes or interfaces it doesn't make sense.
//                   ^^^^^^^^^^^^^^^^^^^^
//                           ^^^^^^ Secondary
// Noncompliant
//                   ^^^^^^^^^^^^^^^^^^^
//                           ^^^^^^ Secondary
// Noncompliant - FP: static methods are not inherited
// Rule is raised but the message is not clear
// Noncomliant
//          ^^^ Secondary
//          ^^^ Secondary
// Noncompliant {{Rename or add members '' and '' to this interface to resolve ambiguities.}}
//                   ^^^^^^^^^^^^^^^
//          ^^^ Secondary
//          ^^^ Secondary
// Noncompliant {{Rename or add members 'Property.get' and 'Property.set' to this interface to resolve ambiguities.}}
//                   ^^^^^^^^^^^^^^^^
//                                ^^^^^ Secondary
//          ^^^ Secondary
// Noncompliant {{Rename or add members 'Click' and 'OnClick' to this interface to resolve ambiguities.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\InheritedCollidingInterfaceMembers.cs
//                 ^^^^^^ Secondary
// Noncompliant {{Rename or add member 'Method(int[*,*], int*)' to this interface to resolve ambiguities.}}
//                   ^^^^^^^^^^^^^^^^^^^
// Non-compliant, but not recognized
//                 ^^^^^^ Secondary
//                 ^^^^^^ Secondary@-1
// Noncompliant
// Noncompliant
//                         ^ Secondary
// Noncompliant
//Noncompliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\InitializeStaticFieldsInline.cs
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\InsecureEncryptionAlgorithm.cs
// Rule will raise an issue for both S2278 and S5547 as they are activated by default in unit tests
// Noncompliant@+1 {{Use the recommended AES (Advanced Encryption Standard) instead.}}
// Noncompliant    {{Use a strong cipher algorithm.}}
//                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//...
// Noncompliant@+1
// Noncompliant
//...
// Noncompliant@+1
// Noncompliant
//                                          ^^^^^^^^^^^^^^^^^^
// Noncompliant@+1
// Noncompliant
//...
// Noncompliant@+1
// Noncompliant
// Noncompliant@+1
// Noncompliant
// Noncompliant@+1
// Noncompliant
// Noncompliant@+1
// Noncompliant
// Noncompliant@+1
// Noncompliant
// Noncompliant@+1
// Noncompliant
// Noncompliant@+1
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\InsecureHashAlgorithm.cs
//Noncompliant {{Use a stronger hashing/asymmetric algorithm.}}
//                                ^^^^^^^^^^^
//Noncompliant
//Noncompliant
//Noncompliant
//Noncompliant
//                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//Noncompliant
// not recognized yet
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\InterfaceMethodsShouldBeCallableByChildTypes.cs
// Noncompliant {{Make 'Foo' sealed, change to a non-explicit declaration or provide a new method exposing the functionality of 'IFoo.Method'.}}
//                ^^^^^^
// Noncompliant {{Make 'Foo' sealed, change to a non-explicit declaration or provide a new method exposing the functionality of 'IFoo.Property'.}}
//               ^^^^^^^^
// Noncompliant {{Make 'Foo' sealed, change to a non-explicit declaration or provide a new method exposing the functionality of 'IFoo.Event'.}}
//                              ^^^^^
// Compliant - Foo2 is sealed
// Compliant - IFoo is not explicitly implemented
// Compliant - public method with same name, params and return type
// Compliant - public method with same name, params BUT different return type
// Compliant - public method with same name, return type BUT different param
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Compliant - Close is an allowed special case for IDisposable
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\InterfacesShouldNotBeEmpty.cs
// Noncompliant {{Remove this interface or add members to it.}}
//                   ^^^^^^^^^^^
// Noncompliant
// Noncompliant
// This is not a marker interface, it aggregates other interfaces and is ok not to have members
// Compliant
// Error [CS1001]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\InvalidCastToInterface.cs
/* ... */ }
/* ... */ }
/* ... */ }
/* ... */ }
/* ... */ }
/* ... */ }
/* ... */ }
/* ... */ }
// Noncompliant
//                   ^^^^^^^^^^^^
// Compliant
// Compliant
// Noncompliant {{Nullable is known to be empty, this cast throws an exception.}}
//                   ^^^^^^^
// Noncompliant
// don't care, custom cast
// Compliant as the resulting type allows null
// Noncompliant
// Compliant; causes compiler error // Error [CS0030] - invalid cast
// Compliant; causes compiler error // Error [CS0030] - invalid cast
// Compliant; causes compiler error // Error [CS0030] - invalid cast
// Noncompliant {{Nullable is known to be empty, this cast throws an exception.}}
// Noncompliant
// Noncompliant
// Noncompliant
// FN Switch expressions are not constrained (See #2949)
// Noncompliant
// Compliant - FN: local functions are not supported by the CFG
// Compliant - FN: local functions are not supported by the CFG
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\InvocationResolvesToOverrideWithParams.cs
// Noncompliant {{Review this call, which partially matches an overload without 'params'. The partial match is 'void InvocationResolvesToOverrideWithParams.Test(double foo, object p1)'.}}
//          ^^^^^^^^^^^^^^
//Noncompliant
//Compliant
//Noncompliant
//Compliant, although it is also an IEnumerable<int>
//Noncompliant
//Noncompliant, maybe it could be compliant
//Noncompliant, resolves to params, but there's a single object version too.
//Compliant
// The presence of this method causes the issue
// Compliant
// Noncompliant
// See https://github.com/SonarSource/sonar-dotnet/issues/2234
// Noncompliant {{Review this call, which partially matches an overload without 'params'. The partial match is 'void WithLocalFunctions.Test(double foo, object p1)'.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\IssueSuppression.cs
// Noncompliant
// Compliant // Error [CS7036] - ctor doesn't exist
// Noncompliant
//                                   ^^^^^^^^^^^^^^^
// Noncompliant
//^^^^^^^^^^^^^^^^^^^^^^^
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\LdapConnectionShouldBeSecure.cs
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant {{Set the 'AuthenticationType' property of this DirectoryEntry to 'AuthenticationTypes.Secure'.}}
// Compliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Compliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, AuthenticationType is set below
// Compliant, AuthenticationType is set below
// Compliant, AuthenticationType is set below
// Compliant, AuthenticationType is set below
// Compliant, AuthenticationType is set below
// Noncompliant, AuthenticationType is set conditionally
// Compliant, AuthenticationType is set after the if
// do something
// Noncompliant, HttpOnly is not set in the same scope
// Noncompliant {{Set the 'AuthenticationType' property of this DirectoryEntry to 'AuthenticationTypes.Secure'.}}
//                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Compliant, AuthenticationType is set on the next line
// this
// Compliant, AuthenticationType is set on the next line
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Compliant, AuthenticationType is set on the next line
// this
// Compliant, AuthenticationType is set on the next line
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\LineLength.cs
// with these comments.........................................................
// Noncompliant {{Split this 128 characters long line (which is greater than 127 authorized).}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\LiteralsShouldNotBePassedAsLocalizedParameters.cs
// Noncompliant {{Replace this string literal with a string retrieved through an instance of the 'ResourceManager' class.}}
//              ^^^^^^^^
// Noncompliant
//              ^^^^^^^^
// Noncompliant
//              ^^^^^^^^
// Noncompliant
//              ^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, parameter does not match exactly
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, property does not match exactly
// Compliant, this cannot be compiled // Error [CS1501]
// Compliant, this cannot be compiled // Error [CS1501]
// Compliant // Error [CS1501]
// Compliant
// Compliant
// Regression tests for https://github.com/SonarSource/sonar-csharp/issues/1464
// S4055 should not raise issues for string literal used in the 'message' of Debug.XXX
// compliant - method on Debug
// compliant - method on Debug
// compliant - method on Debug
// compliant - in a debug only method
// compliant - in a debug only method
// Noncompliant - not DEBUG conditional
// Noncompliant - not DEBUG conditional
// compliant - calling a debug-only method
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\LiteralSuffixUpperCase.cs
// Noncompliant {{Upper case this literal suffix.}}
//                          ^
// Compliant
// Compliant
// Compliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\LiteralSuffixUpperCase.Fixed.cs
// Fixed
// Compliant
// Compliant
// Compliant
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\LossOfFractionInDivision.cs
// Noncompliant
//                        ^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Cast one of the operands of this division to 'float'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MagicNumberShouldNotBeUsed.cs
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//async method lacks an await
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MarkAssemblyWithAssemblyVersionAttribute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MarkAssemblyWithAssemblyVersionAttributeNoncompliant.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MarkAssemblyWithClsCompliantAttribute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MarkAssemblyWithClsCompliantAttributeNoncompliant.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MarkAssemblyWithComVisibleAttribute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MarkAssemblyWithComVisibleAttributeNoncompliant.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MarkAssemblyWithNeutralResourcesLanguageAttribute.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MarkAssemblyWithNeutralResourcesLanguageAttributeNonCompliant.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MarkWindowsFormsMainWithStaThread.cs
// Error [CS0246,CS0246] - unknown type
// Noncompliant {{Add the 'STAThread' attribute to this entry point.}}
// Noncompliant {{Add the 'STAThread' attribute to this entry point.}}
//                         ^^^^
// Noncompliant {{Add the 'STAThread' attribute to this entry point.}}
//                        ^^^^
// Noncompliant {{Change the 'MTAThread' attribute of this entry point to 'STAThread'.}}
// Noncompliant {{Change the 'MTAThread' attribute of this entry point to 'STAThread'.}}
// Noncompliant {{Change the 'MTAThread' attribute of this entry point to 'STAThread'.}}
// Error [CS1729] - ctor doesn't exist
// Compliant, async Main is always MTA
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MarkWindowsFormsMainWithStaThread_NoWindowsForms.cs
// Error [CS0246,CS0246] - unknown type
// Error [CS1729] - ctor doesn't exist
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MemberInitializedToDefault.cs
//Compliant
// Noncompliant
//                            ^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Remove this initialization to 'o', the compiler will do that for you.}}
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MemberInitializedToDefault.Fixed.cs
//Compliant
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MemberInitializerRedundant.cs
// Noncompliant {{Remove the member initializer, all constructors set an initial value for the member.}}
/*init*/; // Noncompliant {{Remove the member initializer, all constructors set an initial value for the member.}}
//              ^^^^
// Noncompliant
//                       ^^^^
// we already report on this with S3052
// Noncompliant
// Nameof doesn't matter
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, lambda uses it in constructor
// Noncompliant
// the CFG connects the beginning of the try block with the catch, hence we have a path where "year" is not rewritten
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MemberInitializerRedundant.Fixed.cs
// Fixed
// Fixed
// we already report on this with S3052
// Fixed
// Nameof doesn't matter
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant, lambda uses it in constructor
// Fixed
// the CFG connects the beginning of the try block with the catch, hence we have a path where "year" is not rewritten
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MemberOverrideCallsBaseMember.cs
//Noncompliant
//Noncompliant
//Noncompliant {{Remove this property 'MyProperty2' to simply inherit its behavior.}}
//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant {{Remove this method 'Method' to simply inherit its behavior.}}
// Noncompliant
// Noncompliant
/// <summary>
///
/// </summary>
/// <param name="a"></param>
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MemberOverrideCallsBaseMember.Fixed.cs
/// <summary>
///
/// </summary>
/// <param name="a"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MemberShadowsOuterStaticMember.cs
// Noncompliant {{Rename this class to not shadow the outer class' member with the same name.}}
//                ^^^^^^^^
// Noncompliant {{Rename this field to not shadow the outer class' member with the same name.}}
//                          ^
//Noncompliant {{Rename this property to not shadow the outer class' member with the same name.}}
//Noncompliant
//Noncompliant {{Rename this event to not shadow the outer class' member with the same name.}}
//Noncompliant
//Noncompliant {{Rename this delegate to not shadow the outer class' member with the same name.}}
//Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MemberShouldBeStatic.cs
// properties
// Noncompliant {{Make 'Property5' a static property.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// indexers are always instance
// Compliant!
// methods
// Noncompliant
// Noncompliant
// Noncompliant {{Make 'Method5' a static method.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant // Error [CS0030]
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
/*do nothing*/ }
/*do nothing*/ } }
// if Class4 adds an explicit implementation of this property an issue will be raised here
// Adding exception for SuppressMessage https://github.com/SonarSource/sonar-csharp/issues/631
// Noncompliant
// Noncompliant
// Error [CS0548]
// Noncompliant
// Noncompliant
// Compliant, any attribute disables this rule
// Compliant, any attribute disables this rule
// Compliant, any attribute disables this rule
// Compliant, any attribute disables this rule
// The following test cases are linked to FP when using ASP controllers.
// See https://github.com/SonarSource/sonar-csharp/issues/733
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MemberShouldBeStatic.FromCSharp8.cs
// Compliant, inside interface
// Compliant, inside interface
// Compliant, inside interface
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MemberShouldNotHaveConflictingTransparencyAttributes.cs
// Secondary
//   ^^^^^^^^^^^^^^^^
// Noncompliant {{Change or remove this attribute to be consistent with its container.}}
//       ^^^^^^^^^^^^^^^^^^^^
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MemberShouldNotHaveConflictingTransparencyAttributes_AssemblyLevel.cs
//         ^^^^^^^^^^^^^^^^ Secondary
//         ^^^^^^^^^^^^^^^^ Secondary@-1
//         ^^^^^^^^^^^^^^^^ Secondary@-2
//         ^^^^^^^^^^^^^^^^ Secondary@-3
//         ^^^^^^^^^^^^^^^^ Secondary@-4
//         ^^^^^^^^^^^^^^^^ Secondary@-5
//         ^^^^^^^^^^^^^^^^ Secondary@-6
//         ^^^^^^^^^^^^^^^^ Secondary@-7
// Noncompliant {{Change or remove this attribute to be consistent with its container.}}
//       ^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodName.cs
// Noncompliant {{Rename method 'foo' to match pascal case naming rules, consider using 'Foo'.}}
//           ^^^
// Noncompliant
// Compliant, we can't change it
// Noncompliant
// Noncompliant
// Noncompliant {{Rename method '____' to match pascal case naming rules, trim underscores from the name.}}
// Compliant
// Noncompliant {{Rename property 'MyPPPProperty' to match pascal case naming rules, consider using 'MyPppProperty'.}}
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Compliant
// See https://github.com/SonarSource/sonar-dotnet/issues/2290
// Noncompliant
// Compliant - FN
// Compliant - FN
// Error [CS1519,CS8124,CS1519]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodName.Partial.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodOverloadOptionalParameter.cs
// Noncompliant;
//                                     ^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{This method signature overlaps the one defined on line 15, the default parameter value can't be used.}}
// Compliant; comes from base class
// Compliant; comes from interface
// Noncompliant;
// Noncompliant {{This method signature overlaps the one defined on line 29, the default parameter value can only be used with named arguments.}}
// Noncompliant {{This method signature overlaps the one defined on line 31, the default parameter value can't be used.}}
// Error [CS0111] - Already contains member with same params
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant;
//                                     ^^^^^^^^^^^^^^^^^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodOverloadsShouldBeGrouped.cs
// Noncompliant {{All 'a' method overloads should be adjacent.}}
//           ^
// Secondary
//           ^
// Secondary {{Non-adjacent overload}}
//           ^
// Secondary {{Non-adjacent overload}}
//           ^
// Secondary {{Non-adjacent overload}}
//           ^
// Secondary {{Non-adjacent overload}}
//           ^
// Noncompliant {{All 'B' method overloads should be adjacent.}}
// Secondary {{Non-adjacent overload}}
// Compliant - this one is unary -, while the other is binary -
// Compliant - this operator and the B() method are not related
// Noncompliant {{All 'DoSomething' method overloads should be adjacent.}}
//           ^^^^^^^^^^^
// Secondary {{Non-adjacent overload}}
//           ^^^^^^^^^^^
// Noncompliant {{All 'MyStructMethod' method overloads should be adjacent.}}
// Secondary {{Non-adjacent overload}}
// Noncompliant
// Compliant - we dont not raise issues for explicit interface implementation as it is a corner case and it can make sense to group implementation by interface
// Compliant - explicit interface implementation
// Secondary
// Compliant - not same accessibility as the other method
// Noncompliant
// Secondary {{Non-adjacent overload}}
// Noncompliant
// Secondary {{Non-adjacent overload}}
// Compliant interleaving with different accesibility
// Compliant, different accessibility
// https://github.com/SonarSource/sonar-dotnet/issues/2776
// Compliant - static methods are grouped together, it's ok
//Compliant - static constructor can be grouped with static methods
// Noncompliant - When there're more shared methods, they still should be together
// Secondary
// Secondary
//Compliant - abstract methods are grouped together, it's OK
//Compliant - abstract methods are grouped together, it's OK
//Noncompliant
//Secondary
//Compliant interleaving with abstract
//Compliant interleaving with static
//Noncompliant
//Secondary
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodOverrideAddsParams.cs
// Noncompliant {{'params' should be removed from this override.}}
//                                  ^^^^^^
// Noncompliant
// Compliant - The interface method can be accessed only after cast (due to the fact that it has an implementation).
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodOverrideAddsParams.Fixed.cs
// Fixed
// Fixed
// Compliant - The interface method can be accessed only after cast (due to the fact that it has an implementation).
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodOverrideChangedDefaultValue.cs
// Noncompliant {{Use the default parameter value defined in the overridden method.}}
//                                               ^
// Noncompliant
// Noncompliant
// Noncompliant {{Remove the default parameter value to match the signature of overridden method.}}
// Noncompliant
// Compliant - This method can be called only after a cast to ISecond
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodOverrideChangedDefaultValue.Fixed.Batch.cs
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant - This method can be called only after a cast to ISecond
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodOverrideChangedDefaultValue.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant - This method can be called only after a cast to ISecond
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodOverrideNoParams.cs
// Noncompliant {{'params' should not be removed from an override.}}
//                                  ^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodOverrideNoParams.Fixed.cs
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodParameterMissingOptional.cs
//Noncompliant
//                            ^^^^^^^^^^^^^^^^^^^^^^^^
//Noncompliant {{Add the 'Optional' attribute to this parameter.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodParameterMissingOptional.Fixed.cs
//Fixed
//Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodParameterUnused.cs
// Compliant
// Noncompliant
//          ^^^^^
// Compliant
// Compliant
// Compliant
// Doesn't make it compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant because only throws NotImplementedException
// Compliant
// Empty on purpose
// Compliant because Main is ignored + empty method
// Compliant - new main syntax
// Compliant - new main syntax
// Noncompliant
// Compliant because Main is ignored + only a throw NotImplemented
// Compliant because Main is ignored
// Compliant
// Compliant
// Compliant because of the attribute
//Unused extension owner is ignored
//Noncompliant
//okay
//okay
// Compliant
// Noncompliant
// Noncompliant
//okay
//okay
//okay, event handler
//okay, event handler
// Compliant
// Compliant
// Compliant, because of the below assignment
// Compliant, because of the below assignment
// Compliant, because of the below assignment
// Compliant, because of the below assignment
// Compliant, because of the below assignment
// Not reporting on this
// Compliant
// Noncompliant {{Remove this parameter 'p', whose value is ignored in the method.}}
// Noncompliant, although it is used above in the Action assignment
// Compliant
// Noncompliant
// Noncompliant
// Error [CS0535]
// Compliant, because using the streaming context is not required for properly implementing the serializable constructor.
// Noncompliant, because using the serialization info is required for properly implementing the serializable constructor.
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodParameterUnused.CSharp7.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodParameterUnused.CSharp8.cs
//Compliant
//Default interface methods
// Compliant, because it's interface member
// Compliant
//Noncompliant
//Noncompliant
//Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodParameterUnused.Fixed.cs
// Compliant
// Fixed
// Compliant
// Compliant
// Compliant
// Doesn't make it compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant because only throws NotImplementedException
// Compliant
// Empty on purpose
// Compliant because Main is ignored + empty method
// Compliant - new main syntax
// Compliant - new main syntax
// Fixed
// Compliant because Main is ignored + only a throw NotImplemented
// Compliant because Main is ignored
// Compliant
// Compliant
// Compliant because of the attribute
//Unused extension owner is ignored
//Fixed
//okay
//okay
// Compliant
// Fixed
//okay
//okay
//okay, event handler
//okay, event handler
// Compliant
// Compliant
// Compliant, because of the below assignment
// Compliant, because of the below assignment
// Compliant, because of the below assignment
// Compliant, because of the below assignment
// Compliant, because of the below assignment
// Not reporting on this
// Compliant
// Fixed
// Fixed
// Compliant
// Fixed
// Fixed
// Error [CS0535]
// Compliant, because using the streaming context is not required for properly implementing the serializable constructor.
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodShouldBeNamedAccordingToSynchronicity.cs
// Noncompliant
// Noncompliant {{Add the 'Async' suffix to the name of this method.}}
//                  ^^^^^^^
// Noncompliant
// Noncompliant
//                     ^^^^^^^^
// Noncompliant {{Remove the 'Async' suffix to the name of this method.}}
//                  ^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Compliant - should not be but requires C# 7 syntax
// Compliant - should not be but requires C# 7 syntax
// Noncompliant
// Noncompliant
// Compliant - comes from interface so not possible to change
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodShouldBeNamedAccordingToSynchronicity.MsTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodShouldBeNamedAccordingToSynchronicity.MVC.Core.cs
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodShouldBeNamedAccordingToSynchronicity.MVC.cs
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodShouldBeNamedAccordingToSynchronicity.NUnit.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodShouldBeNamedAccordingToSynchronicity.Xunit.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodShouldNotOnlyReturnConstant.cs
// Noncompliant {{Remove this method and declare a constant for this value.}}
//                 ^^^^^^
// Compliant - method takes parameters
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - FN - should not be compliant
// Compliant - implements interface so cannot get rid of the method
// Compliant - can be overriden
// Compliant - override
// Compliant - override
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodsShouldNotHaveIdenticalImplementations.cs
//           ^^^^ Secondary
//           ^^^^ Secondary@-1
//           ^^^^ Secondary@-2
// Noncompliant {{Update this method so that its implementation is not identical to 'Foo1'.}}
//           ^^^^
// Noncompliant {{Update this method so that its implementation is not identical to 'Foo1'.}}
// Noncompliant {{Update this method so that its implementation is not identical to 'Foo1'.}}
// Comment are excluded from comparison
// Compliant we ignore expression body
// Compliant because we ignore one liner
// Compliant we ignore expression body
//                        ^^^^^^^^^^^^^ Secondary
//                        ^^^^^^^^^^^^^ Secondary@-1
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodsShouldNotHaveTooManyLines_CustomValues.cs
// Noncompliant {{This constructor 'Program' has 4 lines, which is greater than the 2 lines authorized. Split it into smaller methods.}}
//             ^^^^^^^
// Noncompliant {{This finalizer '~Program' has 4 lines, which is greater than the 2 lines authorized. Split it into smaller methods.}}
// Noncompliant {{This method 'Method_01' has 4 lines, which is greater than the 2 lines authorized. Split it into smaller methods.}}
//                  ^^^^^^^^^
// Noncompliant {{This method 'Method_02' has 13 lines, which is greater than the 2 lines authorized. Split it into smaller methods.}}
// Noncompliant {{This method 'Method_06' has 7 lines, which is greater than the 2 lines authorized. Split it into smaller methods.}}
// We only report on outer methods.
// The lines of code of inner functions are counted against the method.
// Noncompliant {{This method 'Method_07' has 4 lines, which is greater than the 2 lines authorized. Split it into smaller methods.}}
/*
//
// Neither are these
//
// Noncompliant {{This method 'Method_10' has 3 lines, which is greater than the 2 lines authorized. Split it into smaller methods.}}
// Noncompliant {{This method 'Method_11' has 5 lines, which is greater than the 2 lines authorized. Split it into smaller methods.}}
// Compliant. Properties are not covered by this rule
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodsShouldNotHaveTooManyLines_DefaultValues.cs
// Noncompliant {{This method 'Bar' has 81 lines, which is greater than the 80 lines authorized. Split it into smaller methods.}}
//                  ^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MethodsShouldUseBaseTypes.cs
// Test interface inheritance
// Noncompliant {{Consider using more general type 'Test_01.A' instead of 'Test_01.B'.}}
//                            ^^^
// Test interface inheritance with in-between interface
// Noncompliant {{Consider using more general type 'Test_02.A' instead of 'Test_02.C'.}}
// Test interface inheritance with hierarchy
// Noncompliant {{Consider using more general type 'Test_03.A_Base' instead of 'Test_03.C'.}}
// Test new method (without "new" keyword)
// Test new method (with "new" keyword)
// Test virtual method
// Noncompliant {{Consider using more general type 'Test_06.A' instead of 'Test_06.B'.}}
// Test property inheritance
// Noncompliant {{Consider using more general type 'Test_07.A' instead of 'Test_07.B'.}}
// Test property with no base setter
// Test constraints from other methods
// Noncompliant
// Test assignments
// Noncompliant
// Test fields
// Noncompliant
// Noncompliant
// Test conditional access
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Test parameter ordering
// Noncompliant
// Test extension methods
// Noncompliant
// Test events
// Noncompliant
// Test multiple parameters
//                            ^^^^ Noncompliant {{Consider using more general type 'Test_16.A' instead of 'Test_16.B'.}}
//                                    ^^^^ Noncompliant@-1 {{Consider using more general type 'Test_16.A' instead of 'Test_16.B'.}}
// Test overridden method
// Compliant - method is virtual so there is a contract to respect
// Compliant - cannot change parameter type, because it is an override.
// Test excluded types
// Compliant examples. Do not report on if the suggestion is one of:
// object
// string
// value type
// array
// enum
// types starting with "_"
// unused parameter
// Test parentheses
// Noncompliant
// Noncompliant
// Noncompliant
// Test unsupported
// False negative
// Test implementing interface
// Test collection accessed through indexer
// Test that rule doesn't suggest other types for EventHandler methods
// Test that rule doesn't suggest base with inconsistent accessibility
// Noncompliant
// Noncompliant
// Noncompliant {{Consider using more general type 'Something.Foo' instead of 'Something.Bar'.}}
// Noncompliant {{Consider using more general type 'Something.Foo' instead of 'Something.Bar'.}}
// Noncompliant {{Consider using more general type 'Something.IFoo' instead of 'Something.Bar'.}}
// Noncompliant {{Consider using more general type 'Something.IFoo' instead of 'Something.Bar'.}}
// Do not suggest ICollection<KVP<T1, T2>> instead of Dictionary<T1, T2>
// Test IEnumerable iterated over twice
// Noncompliant
// Noncompliant
// Noncompliant FP #2479, using IReadOnlyCollection gives compile error
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MultilineBlocksWithoutBrace.cs
//              ^^^^ Secondary
// Noncompliant
//              ^^^^^^^^^^^^^^^^^^^^^^^^^
// Secondary
// Noncompliant {{This line will not be executed conditionally; only the first line of this 3-line block will be. The rest will execute unconditionally.}}
// Secondary
/*comment */ // Secondary
// Noncompliant
/**/            return a; // Noncompliant
//            String empty = "";
// Secondary
// Noncompliant {{This line will not be executed in a loop; only the first line of this 2-line block will be. The rest will execute only once.}}
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Noncompliant
/*comment*/  Tests(); // Noncompliant
// Secondary
/*comment*/
// Noncompliant
// Compliant
// Compliant
// Compliant
// Secondary
// Noncompliant, but should report only once
// Compliant
// This statement is aligned with the '{' of the try on purpose to fix https://github.com/SonarSource/sonar-csharp/issues/264
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MultipleVariableDeclaration.cs
/*aaa1*/ a /*aaa2*/,
// Noncompliant
/*bbb1*/ b /*bbb2*/; // Noncompliant
//                   ^
// Noncompliant {{Declare 'b' in a separate statement.}}
/*aaa1*/a = 0 /*aaa2*/, /*bbb1*/ b = 0 /*bbb2*/; // Noncompliant {{Declare 'b' in a separate statement.}}
//                                               ^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MultipleVariableDeclaration.Fixed.cs
/*aaa1*/ a /*aaa2*/;
/*bbb1*/ b /*bbb2*/;
/*aaa1*/a = 0 /*aaa2*/;
/*bbb1*/ b = 0 /*bbb2*/;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MutableFieldsShouldNotBePublicReadonly.cs
// Noncompliant {{Use an immutable collection or reduce the accessibility of the field(s) 'isetInitializaedWithHashSet'.}}
//                      ^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant {{Use an immutable collection or reduce the accessibility of the field(s) 'set1' and 'set2'.}}
// When the types are uninitialized, this is equivalent to being initialized to null so we don't report
// Issue #1491: https://github.com/SonarSource/sonar-csharp/issues/1491
// Compliant - set to null in ctor
// Compliant - set to immutable in ctor
// Noncompliant - one of the ctor sets a mutable type
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\MutableFieldsShouldNotBePublicStatic.cs
// Noncompliant {{Use an immutable collection or reduce the accessibility of the field(s) 'iSetInitializaedWithImmutableSet'.}}
//                    ^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Use an immutable collection or reduce the accessibility of the field(s) 'set1' and 'set2'.}}
// Compliant - set to null in ctor
// Compliant - set to immutable in ctor
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NameOfShouldBeUsed.cs
// Noncompliant {{Replace the string 'arg1' with 'nameof(arg1)'.}}
//                                  ^^^^^^
// Noncompliant {{Replace the string 'arg1' with 'nameof(arg1)'.}}
// Noncompliant {{Replace the string 'arg1' with 'nameof(arg1)'.}}
// Noncompliant {{Replace the string 'argument' with 'nameof(argument)'.}}
// Noncompliant@-1 {{Replace the string 'arg1' with 'nameof(arg1)'.}}
// Noncompliant
// Noncompliant
// Noncompliant  {{Replace the string 'argument' with 'nameof(argument)'.}}
//                                      ^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// too short name
// too short name
// Noncompliant
// Noncompliant
// Noncompliant  {{Replace the string 'argument' with 'nameof(argument)'.}}
//                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant  {{Replace the string 'argument' with 'nameof(argument)'.}}
// Noncompliant  {{Replace the string 'argument' with 'nameof(argument)'.}}
// Error [CS0100] - duplicated args
// Noncompliant
// Noncompliant@-1
// Noncompliant
// Noncompliant (only one message)
// Noncompliant
// Noncompliant (only one message)
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NativeMethodsShouldBeWrapped.cs
// Invalid method, testing if IMethodSymbol.ContainingType returns null (it currently doesn't)
// Error [CS0116]
// Compliant
// Compliant
// Noncompliant {{Make this native method private and provide a wrapper.}}
//                                ^^^^^^^
// Noncompliant
//                                            ^^^^^^^
// Compliant
// Noncompliant {{Make this wrapper for native method 'Extern1' less trivial.}}
// Compliant, no arguments
// Compliant, no arguments
// simulate some check
// Compliant, more than one statement
// Compliant, more than one statement
// Compliant, parameters are not directly passed
// Compliant, parameters are not directly passed
// Noncompliant {{Make this wrapper for native method 'Extern1' less trivial.}}
// Compliant, parameters are not directly passed
// Compliant, parameters are not directly passed
// Compliant, no arguments
// simulate some check
// Compliant, container class is private
// Compliant, container class is internal
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NestedCodeBlock.cs
// Noncompliant {{Extract this nested code block into a separate method.}}
//              ^
// Noncompliant
//              ^
// Noncompliant
//              ^
// Noncompliant
//          ^
// Compliant, parent is MethodDeclaration
// Noncompliant
//          ^
// Compliant, parent is SwitchSection
// Noncompliant
//                      ^
// Compliant, parent is SwitchSection
// Noncompliant
// Compliant, parent is IfStatement
// Noncompliant
// Compliant, parent is ElseClause
// Noncompliant
// Compliant, parent is ForStatement
// Noncompliant
// Noncompliant
// Compliant, parent is WhileStatement
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NewGuidShouldNotBeUsed.cs
// Noncompliant {{Use 'Guid.NewGuid()' or 'Guid.Empty' or add arguments to this Guid instantiation.}}
//                       ^^^^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NoExceptionsInFinally.cs
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NonAsyncTaskShouldNotReturnNull.cs
// async
// Compliant
// False negative
// Noncompliant {{Do not return null from this method, instead return 'Task.FromResult<T>(null)', 'Task.CompletedTask' or 'Task.Delay(0)'.}}
//                 ^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Should be non-compliant
// Noncompliant
// Noncompliant
// See https://github.com/SonarSource/sonar-csharp/issues/1845
// Noncompliant FP
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NonFlagsEnumInBitwiseOperation.cs
// Noncompliant {{Mark enum 'Permissions' with 'Flags' attribute or remove this bitwise operation.}}
//                                   ^
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NonFlagsEnumInBitwiseOperation.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NormalizeStringsToUppercase.cs
// Compliant
// Noncompliant  {{Change this normalization to 'ToUpperInvariant()'.}}
//                  ^^^^^^^
// Noncompliant
// Compliant
// Noncompliant  {{Change this normalization to 'ToUpperInvariant()'.}}
//                    ^^^^^^^
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NotAssignedPrivateMember.cs
// Noncompliant, shouldn't it be initialized? This way the value is always default(int), 0.
//                      ^^^^^
// Noncompliant {{Remove unassigned field 'field3', or set its value.}}
//reported by unused member rule
// Noncompliant
// Noncompliant {{Remove unassigned auto-property 'Property', or set its value.}}
// Unused, S1144 reports on it
// Noncompliant
// Compliant, a member is assigned
// Compliant, a member is assigned
// Noncompliant
// Compliant, a member is assigned
// Compliant, a member is assigned
// Noncompliant
//Will always print 0
//Will always print 0
//Will always print 0
// https://github.com/SonarSource/sonar-csharp/issues/242
// Compliant, we don't raise on members of classes with StructLayout attribute
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NullPointerDereference.cs
// Noncompliant {{'o' is null on at least one execution path.}}
//                 ^
// Compliant
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// can be null
// Noncompliant, always null
// Compliant
// can be null
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Compliant, we don't learn on Assert
// Noncompliant
// Compliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Compliant. TODO: SLVS-1140
// Noncompliant
//          ^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^^^
// Noncompliant
//          ^^^^^
// Noncompliant
//          ^^^^^
// Noncompliant
//          ^^^^^
// Noncompliant
//          ^^^^^
// Noncompliant
//          ^^^^^
// compliant
// compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
//          ^
// Noncompliant
//              ^^^^^
// Noncompliant
//              ^^^^
// Noncompliant
//              ^
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// This particular method has no side effects
// Compliant, False Negative
// Noncompliant, local variable constraints are not cleared
// https://github.com/SonarSource/sonar-csharp/issues/947
// This is a multi-threaded application, the fields could change
// Compliant
// Noncompliant, local variable constraints are not cleared
// Noncompliant
// https://github.com/SonarSource/sonar-csharp/issues/538
// Compliant, this code is unreachable
// awaiting clears the constraints
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// do stuff
// see https://github.com/SonarSource/sonar-dotnet/issues/890
// Noncompliant FP due to loop traversal
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NullPointerDereferenceCSharp6.cs
// Noncompliant
// If e.Message is null, the exception won't be caught and this is not reachable
// https://github.com/SonarSource/sonar-csharp/issues/1324
// Compliant, o is checked for null in this branch
// Noncompliant
// Noncompliant, o could be null here
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//compliant
//compliant
//compliant
// Noncompliant
// Ok
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NullPointerDereferenceCSharp7.cs
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// This is unreachable, s has NotNull constraint from the outer if condition
// Compliant
// s still has NotNull constraint from the outer if statement
// Compliant
// We can set NotNull constraint only for one of the variables in the if condition
// and we choose the declared variable because it is more likely to have usages of
// it inside the statement body.
// Noncompliant, False Positive
// Ensure that the discard does not throw exception when processed
// Noncompliant, False Positive
// This is unreachable, s has NotNull constraint from the while condition
// Compliant
// The condition is evaluated after the first execution, so we cannot test s
// This is unreachable, s has NotNull constraint from the for condition
// The following should not throw exceptions
// We don't set constraints on the switch expression
// Noncompliant, False Positive
// This is unreachable, s has NotNull constraint from the outer if condition
// Compliant
// s still has NotNull constraint from the outer if statement
// Compliant
// Compliant, this code is not reachable
// The discard is redundant, but still allowed
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NullPointerDereferenceCSharp8.cs
// Noncompliant {{'name' is null on at least one execution path.}}
// Noncompliant
// Noncompliant
// Noncompliant {{'name2' is null on at least one execution path.}}
//  Ok - name1 is not null
// FN - nullable primitive type not supported
// Noncompliant
// Noncompliant
// Noncompliant
// FN Switch expressions are not constrained (See #2949)
// Noncompliant
// Noncompliant
//  Compliant - FN: local functions are not supported by the CFG
//  Compliant - FN: local functions are not supported by the CFG
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\NumberPatternShouldBeRegular.cs
// decimal notation
// hexadecimal notation
// binary notation
// number types suffixes
// Noncompliant {{Review this number; its irregular pattern indicates an error.}}
//                        ^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ObjectCreatedDropped.cs
// Noncompliant
//          ^^^^^^^^^^^^
// Noncompliant {{Either remove this useless object instantiation of class 'ObjectCreatedDropped' or use it.}}
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ObjectsShouldNotBeDisposedMoreThanOnce.cs
// Noncompliant
// Noncompliant {{Refactor this code to make sure 'd' is disposed only once.}}
//          ^
// Noncompliant {{Refactor this code to make sure 'd' is disposed only once.}}
// Compliant, we don't handle arrays
// Noncompliant
// Noncompliant
// Noncompliant
//                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
//                 ^^^^^^
// Compliant, we cannot detect if 'str' was argument of the 'sr' constructor or not
// Noncompliant
// Regression test for https://github.com/SonarSource/sonar-csharp/issues/1038
// ok, only called once on each parameter
// Regression test for https://github.com/SonarSource/sonar-csharp/issues/1038
// Noncompliant
// Noncompliant
// ok - only disposed once
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Refactor this code to make sure 'd' is disposed only once.}}
// Noncompliant {{Refactor this code to make sure 's' is disposed only once.}}
// Noncompliant {{Refactor this code to make sure 's' is disposed only once.}}
// Noncompliant
// Ok - s is null here, so it will raise a null pointer dereference instead
// Noncompliant
// Noncompliant
// Compliant - FN: local functions are not supported by the CFG
// Compliant - FN: local functions are not supported by the CFG
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ObsoleteAttributesNeedExplanation.cs
// Noncompliant {{Add an explanation.}}
//   ^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\OperatorOverloadsShouldHaveNamedAlternatives.cs
// Noncompliant {{Implement alternative method 'Add' for the operator '+'.}}
// Noncompliant {{Implement alternative method 'BitwiseAnd' for the operator '&'.}}
// Noncompliant {{Implement alternative method 'BitwiseOr' for the operator '|'.}}
// Noncompliant {{Implement alternative method 'Divide' for the operator '/'.}}
// Noncompliant {{Implement alternative method 'Xor' for the operator '^'.}}
// Noncompliant {{Implement alternative method 'Equals' for the operator '=='.}}
// Noncompliant {{Implement alternative method 'Equals' for the operator '!='.}}
// Noncompliant {{Implement alternative method 'Compare' for the operator '>'.}}
// Noncompliant {{Implement alternative method 'Compare' for the operator '<'.}}
// Noncompliant {{Implement alternative method 'Compare' for the operator '>='.}}
// Noncompliant {{Implement alternative method 'Compare' for the operator '<='.}}
// Noncompliant {{Implement alternative method 'Decrement' for the operator '--'.}}
// Noncompliant {{Implement alternative method 'Increment' for the operator '++'.}}
// Noncompliant {{Implement alternative method 'LeftShift' for the operator '<<'.}}
// Noncompliant {{Implement alternative method 'RightShift' for the operator '>>'.}}
// Noncompliant {{Implement alternative method 'LogicalNot' for the operator '!'.}}
// Noncompliant {{Implement alternative method 'Mod' for the operator '%'.}}
// Noncompliant {{Implement alternative method 'Multiply' for the operator '*'.}}
// Noncompliant {{Implement alternative method 'OnesComplement' for the operator '~'.}}
// Noncompliant {{Implement alternative method 'Subtract' for the operator '-'.}}
// Compliant, we don't check for true
// Compliant, we don't check for false
// Noncompliant {{Implement alternative method 'Negate' for the operator '-'.}}
// Noncompliant {{Implement alternative method 'Plus' for the operator '+'.}}
// For comparison operators we allow "CompareTo" in addition to "Compare"
// We don't care about return type, argument count and types, just as FxCop
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\OperatorsShouldBeOverloadedConsistently.cs
//               ^^^ Noncompliant {{Provide an implementation for: 'operator==', 'operator!=', 'Object.Equals' and 'Object.GetHashCode'.}}
//               ^^^^ Noncompliant {{Provide an implementation for: 'operator+'.}}
//               ^^^^ Noncompliant {{Provide an implementation for: 'operator=='.}}
// Error [CS0216] - requires == operator
//               ^^^^ Noncompliant {{Provide an implementation for: 'operator!=', 'Object.Equals' and 'Object.GetHashCode'.}}
// Error [CS0216] - requires != operator
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\OptionalParameter.cs
//Noncompliant
//                        ^^^^
//Noncompliant {{Use the overloading mechanism instead of the optional parameters.}}
//Compliant
// Noncompliant
// Noncompliant
// Compliant, private
// Compliant, private
// Compliant, internal
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\OptionalParameterNotPassedToBaseCall.cs
// Noncompliant {{Pass the missing user-supplied parameter value to this 'base' call.}}
//          ^^^^^^^^^^^^^^^^
// Noncompliant {{Pass the missing user-supplied parameter value to this 'base' call.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\OptionalParameterWithDefaultValue.cs
// Noncompliant
//                                         ^^^^^^^^^^^^^^^
// Noncompliant {{Use '[DefaultParameterValue]' instead.}}
// okay, we have no idea what the intent was
// Noncompliant, can't fix
// prints 0
// prints 4
// Compliant, S3450 will trigger
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\OptionalParameterWithDefaultValue.Fixed.cs
// Fixed
// Fixed
// okay, we have no idea what the intent was
// Fixed
// prints 0
// prints 4
// Compliant, S3450 will trigger
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\OptionalRefOutParameter.cs
// Noncompliant
//                           ^^^^^^^^
// Noncompliant {{Remove the 'Optional' attribute, it cannot be used with 'out'.}}
// Error [CS0246]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\OptionalRefOutParameter.Fixed.cs
// Fixed
// Fixed
// Error [CS0246]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\OrderByRepeated.cs
//Noncompliant
//                                                ^^^^^^^
//Noncompliant {{Use 'ThenBy' instead.}}
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\OrderByRepeated.Fixed.cs
//Fixed
//Fixed
//Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\OverrideGetHashCodeOnOverridingEquals.cs
// Noncompliant {{This class overrides 'Equals' and should therefore also override 'GetHashCode'.}}
//        ^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{This class overrides 'GetHashCode' and should therefore also override 'Equals'.}}
//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{This struct overrides 'Equals' and should therefore also override 'GetHashCode'.}}
//         ^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{This struct overrides 'GetHashCode' and should therefore also override 'Equals'.}}
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ParameterAssignedTo.cs
// Noncompliant
//          ^
// Noncompliant {{Introduce a new variable instead of reusing the parameter 'exc'.}}
// compliant, but weird
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Error [CS0201] - expression used as statement
// Error [CS0201] - expression used as statement
// Noncompliant
//Same name as previous statement
//Noncompliant
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ParameterNamesInPartialMethod.cs
//Noncompliant {{Rename parameter 'someParam' to 'x' to match the partial class declaration.}}
//                                    ^^^^^^^^^
//Noncompliant {{Rename parameter 'someParam' to 'y' to match the base class declaration.}}
//Noncompliant {{Rename parameter 'someParam' to 'y' to match the base class declaration.}}
//Noncompliant {{Rename parameter 'y' to 'someParam' to match the base class declaration.}}
//Noncompliant {{Rename parameter 'y' to 'someParam' to match the base class declaration.}}
//Noncompliant {{Rename parameter 'a' to 'x' to match the interface declaration.}}
//Noncompliant {{Rename parameter 'someParam' to 'x' to match the partial class declaration.}}
//                                    ^^^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ParameterNamesShouldNotDuplicateMethodNames.cs
//                  ^^^^^^^ Secondary [0,1]
//                                 ^^^^^^^ Noncompliant@-1 [0] {{Rename the parameter 'method1' so that it does not duplicate the method name.}}
//                                                 ^^^^^^^ Noncompliant@-2 [1] {{Rename the parameter 'METHOD1' so that it does not duplicate the method name.}}
// Do something
// Compliant - FN
// Compliant - FN
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ParametersCorrectOrder.cs
// Compliant, code will not compile if suggestion is applied
// Noncompliant
//                         ^^ Secondary [6]
//                   ^^^^^^ Secondary [1,2,3,4]
// Secondary [5]
// Noncompliant [1] operation succeeds, but result is unexpected
// Noncompliant [2] {{Parameters to 'divide' have the same names but not the same order as the method arguments.}}
// Noncompliant [3]
// Noncompliant [4]
// Compliant
// Compliant
// Noncompliant [5]
// Noncompliant [6]
// Secondary [C]
// Secondary [B]
// Secondary [A]
// Noncompliant [A]
// Noncompliant [B]
// Noncompliant [C]
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ParameterValidationInAsyncShouldBeWrapped.cs
// Noncompliant {{Split this method into two, one handling parameters check and the other handling the asynchronous code.}}
//                                       ^^^^^^^^
//                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary
// Noncompliant - it might looks weird to throw from some event method but that's valid syntax
// Secondary
// Compliant - no args check
// Compliant - the exception doesn't derive from ArgumentException
// Compliant - async part is declared in a sub method
// Compliant - we don't know where/how the func is used
// See https://github.com/SonarSource/sonar-csharp/issues/1819
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ParameterValidationInYieldShouldBeWrapped.cs
// Noncompliant {{Split this method into two, one handling parameters check and the other handling the iterator.}}
//                                        ^^^
//                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Secondary
// Noncompliant - this is an edge case that might be worth handling later on
// Secondary
// Noncompliant
// Secondary
// Compliant - split into 2 methods
// Compliant - usage of local function
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PartCreationPolicyShouldBeUsedWithExportAttribute.cs
// Compliant, Export is present
// Compliant, InheritedExport is present
// Compliant, InheritedExport is present in base
// Noncompliant {{Add the 'ExportAttribute' or remove 'PartCreationPolicyAttribute' to/from this class definition.}}
//   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant, Export is not inherited
// Error [CS0592] - Compliant, attribute cannot be used on methods, don't raise
// Error [CS0592] - Compliant, attribute cannot be used on fields, don't raise
// Error [CS0592] - Compliant, attribute cannot be used on properties, don't raise
// Compliant, custom Export is present
// Compliant, MyInheritedExport is present
// Compliant, MyInheritedExport is present in base
// Noncompliant {{Add the 'ExportAttribute' or remove 'PartCreationPolicyAttribute' to/from this class definition.}}
// Compliant, InheritedExport is present on interface
// Compliant, MyInheritedExport is present on interface MyInheritedExportInterface
// Noncompliant
// Error [CS0116] - Compliant, illegal use, don't raise
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PartialMethodNoImplementation.cs
//Noncompliant {{Supply an implementation for this partial method.}}
//      ^^^^^^^
//Noncompliant {{Supply an implementation for the partial method, otherwise this call will be ignored.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PInvokesShouldNotBeVisible.cs
// Noncompliant {{Make this 'P/Invoke' method private or internal.}}
//                                ^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Error [CS0601] - so do not raise an issue
// Error [CS0601]
// Error [CS0501] - so do not raise an issue
// Compliant because effective accessibility is not public
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PointersShouldBePrivate.cs
// Noncompliant {{Make 'publicPointer1' 'private' or 'protected readonly'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Make 'pointer1' 'private' or 'protected readonly'.}}
// Noncompliant {{Make 'pointer2' 'private' or 'protected readonly'.}}
// Noncompliant {{Make 'pointer3' 'private' or 'protected readonly'.}}
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PreferJaggedArraysOverMultidimensional.cs
// Noncompliant {{Change this multidimensional array to a jagged array.}}
//                     ^^^^^^^^^^^^^^^^^^
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PrivateFieldUsedAsLocalVariable.cs
// Compliant - unused
// Noncompliant {{Remove the field 'F1' and declare it as a local variable in the relevant methods.}}
//                  ^^^^^^
// Compliant - Public
// Compliant - Referenced from another field initializer
// Compliant - Public // Error [CS0236]
// Noncompliant
// Noncompliant
// Compliant - Read before write
// Compliant, False Negative, we cannot detect if a field is both updated and read in the same statement
// Compliant, False Negative, we cannot detect if statements that set the field in both branches
// Compliant - not assigned from every path
// Compliant - first read through 'this.'
// Noncompliant
// Compliant - parameter of same name is assigned, not the field
// Noncompliant
// Compliant - returned in property getter
// Noncompliant, property is assigning first
// Compliant
// Compliant
// Compliant - accessed through instance
// Compliant - accessed through instance
// Compliant - accessed through instance
// Noncompliant, overwritten static instance
// Noncompliant - passed as 'out'
// Compliant - passed as 'ref'
// Noncompliant - always assigned from constructor
// Compliant - passed to another constructor
// Error [CS0120]
// Noncompliant - always assigned from event
// Compliant
// use after assignment in event
// Noncompliant - always assigned
// Compliant - read in a different method
// Noncompliant
// Noncompliant
// Compliant
// Compliant, even though it is overwritten, the field has attribute and is not reported
// Should be raised by S4487
// Compliant
// Compliant - partial classes are not checked
// Noncompliant
// Noncompliant FP
// As S4487 will raise when a private field is written and not read, S1450 won't raise on these cases
// These tests where finding issues before with S1450 and should find them with S4487 now
// compliant
// compliant
// compliant
// compliant
// compliant
// compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PropertiesAccessCorrectField.cs
// Noncompliant {{Refactor this getter so that it actually refers to the field 'y'.}}
//                       ^
// Noncompliant {{Refactor this setter so that it actually refers to the field 'y'.}}
//                ^
// Noncompliant: field 'y' is not used in the return value
// Noncompliant: field 'y' is not updated
// test that underscores and casing in names are ignored
// Noncompliant {{Refactor this getter so that it actually refers to the field '__x__X'.}}
//                       ^^^
// Noncompliant {{Refactor this setter so that it actually refers to the field '__x__X'.}}
//                ^^^
// Noncompliant
//                       ^^^^^^
// Noncompliant - field called 'aaa' exists, even though type is different
//                       ^^^^^^^
// Noncompliant
//                ^^^^^^^
// Noncompliant
//                ^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant {{Refactor this getter so that it actually refers to the field 'field1'.}}
//          ^^^
// Noncompliant
//                   ^^^^^^
// Noncompliant
//                               ^^^^^^
// Noncompliant
//                 ^^^^^^
// Noncompliant
// Noncompliant
// Declare an array to store the data elements.
// Define the indexer to allow client code to use [] notation.
// Compliant - we don't know which field to check against
// Compliant - no matching field name
// Compliant - multiple possible matching field names, so don't raise
// Compliant - aren't checking inherited fields
// Compliant
// Compliant
// Compliant
// this usage is specific to MVVM Light framework
// Compliant - the Set method does the assignment
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^
// Noncompliant
//          ^^^
// Noncompliant
// Noncompliant {{Refactor this getter so that it actually refers to the field 'foo'.}}
//                     ^^^
// Noncompliant {{Refactor this setter so that it actually refers to the field 'foo'.}}
//                  ^^^
// Noncompliant {{Refactor this getter so that it actually refers to the field 'bar'.}}
//                          ^^^
// Noncompliant {{Refactor this setter so that it actually refers to the field 'bar'.}}
//                       ^^^
// Compliant, field is read
// Compliant
// Compliant
// Compliant, if it throws do not raise
// Compliant
// Compliant
/* 123 */ => /* 456 */ throw new System.InvalidOperationException(""); // Compliant
// Compliant
// below there are two False Positives
// Noncompliant {{Refactor this getter so that it actually refers to the field 'myValue'.}}
// Noncompliant {{Refactor this setter so that it actually refers to the field 'myValue'.}}
// https://github.com/SonarSource/sonar-dotnet/issues/2867
// ...
// Noncompliant FP
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PropertiesShouldBePreferred.cs
// Noncompliant
//                    ^^^^^^^ Noncompliant {{Consider making method 'GetName' a property.}}
// Compliant - override method
// Compliant - comes from interface
// Compliant - explicit interface implementation
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// See https://github.com/SonarSource/sonar-csharp/issues/1593
// and https://msdn.microsoft.com/en-us/magazine/mt797654.aspx
// See https://github.com/SonarSource/sonar-dotnet/issues/2238
// Compliant, name is excluded
// Compliant, name is excluded
// GetAwaiter
// Compliant - use async
// Compliant - return type is Task
// Compliant - return type is Task<T>
// Compliant - return type is ValueTask<T>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PropertyGetterWithThrow.cs
// Compliant
// Compliant
// Compliant
// Noncompliant {{Remove the exception throwing from this property getter, or refactor the property into a method.}}
//              ^^^^^^^^^^^^^^^^^^^^^^
// Compliant - setters are ignored by this rule
// Compliant
// Compliant
// Compliant
// Compliant - indexed getters are ignored by this rule
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PropertyNamesShouldNotMatchGetMethods.cs
// Noncompliant {{Change either the name of property 'Foo' or the name of method 'GetFoo' to make them distinguishable.}}
//                 ^^^
//                 ^^^^^^ Secondary
// Noncompliant {{Change either the name of property 'Bar' or the name of method 'Bar' to make them distinguishable.}}
//                    ^^^
// Error [CS0102]
//                 ^^^ Secondary
// Compliant - property is private
// Compliant - method is private
// Noncompliant
// Secondary
// Noncompliant
// Secondary
// Compliant - override
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PropertyToAutoProperty.cs
//Compliant
//Compliant
// Noncompliant
//                    ^^^^
// Compliant
// Noncompliant {{Make this an auto-implemented property and remove its backing field.}}
// Compliant
// Compliant, returns a static field
// C# 7 should not throw
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PropertyToAutoProperty.CSharp7.cs
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PropertyWriteOnly.cs
//Noncompliant {{Provide a getter for 'Foo' or replace the property with a 'SetFoo' method.}}
//                 ^^^
// ... some code ...
// ... some code ...
// Noncompliant FP #2390
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ProvideDeserializationMethodsForOptionalFields.cs
// Noncompliant {{Add deserialization event handlers.}}
//               ^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Add the missing 'OnDeserializedAttribute' event handler.}}
// Noncompliant {{Add the missing 'OnDeserializingAttribute' event handler.}}
// Set optionalField if dependent on other deserialized values.
// Set optionalField if dependent on other deserialized values.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PublicConstantField.cs
// Noncompliant {{Change this constant to a 'static' read-only property.}}
//                       ^^
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PublicMethodArgumentsShouldBeCheckedForNull.cs
// Noncompliant {{Refactor this method to add validation of parameter 'o' before using it.}}
// Compliant, we care about dereference only
// Noncompliant
// Noncompliant
// Compliant, not public
// Noncompliant
// Compliant, not public
// Compliant, we did the check
// Compliant, we coalesce
// Compliant, we did the check
// Compliant
// Compliant, conditional operator
// Compliant, bool cannot be null
// Compliant, we don't care about local variables
// Compliant
// Compliant
// Noncompliant, could be null
// Compliant
// Noncompliant, could be null
// Compliant
// Noncompliant {{Refactor this constructor to avoid using members of parameter 's' because it could be null.}}
// Noncompliant
// Noncompliant - FP for extensions having the [ValidatedNotNull] attribute
// more stuff
// Noncompliant when passed by ref can be set to null
// Noncompliant
// Noncompliant
// Noncompliant
/*";
// Noncompliant
// https://github.com/SonarSource/sonar-dotnet/issues/2591
// Noncompliant FP
// Noncompliant FP
// Noncompliant FP
// Noncompliant FP
// https://github.com/SonarSource/sonar-dotnet/issues/2775
// Noncompliant FP
// do stuff
// Noncompliant - FP
// Compliant
// Noncompliant
// Compliant, we know str is not null
// Compliant, assigned foo
// Noncompliant
// Compliant - FN: local functions are not supported by the CFG
// Compliant - FN: local functions are not supported by the CFG
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant as null was already handled
// Noncompliant
// Noncompliant - FP we know that the length is 5 so the string cannot be null
// Noncompliant
// Compliant - FN
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - the null is handled by the case null branch.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PublicMethodWithMultidimensionalArray.cs
//Noncompliant
//           ^^^^^^^
//Noncompliant {{Make this method private or simplify its parameters to not use multidimensional arrays.}}
//Noncompliant
//Compliant
//Noncompliant
//Compliant, overrides
//Compliant, implements interface
//Compliant, class is internal
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\PureAttributeOnVoidMethod.cs
// Noncompliant {{Remove the 'Pure' attribute or change the method to return a value.}}
//       ^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ReadingStandardInput.cs
// Noncompliant {{Make sure that reading the standard input is safe here.}}
//                 ^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, value is ignored
// Compliant, value is ignored
// Compliant, value is ignored
// Compliant, value is ignored
// Noncompliant
// Noncompliant
// Noncompliant
//                  ^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Other Console methods
// Other classes
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundancyInConstructorDestructorDeclaration.BaseCall.Fixed.cs
// Fixed
/*c*/   // Fixed
/*comment
// Fixed
// Fixed
// Fixed
//some comment
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundancyInConstructorDestructorDeclaration.Constructor.Fixed.cs
// Fixed
/*c*/  : /*don't keep*/ base() // Fixed
// Fixed
// Fixed
/*comment
// Fixed
/*some comment2*/
// Fixed
//some comment
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundancyInConstructorDestructorDeclaration.cs
// Noncompliant {{Remove this redundant 'base()' call.}}
/*c*/  : /*don't keep*/ base() // Noncompliant {{Remove this redundant 'base()' call.}}
// Noncompliant
// Noncompliant
//          ^^^^^^^^
/*comment
// Noncompliant
/*some comment2*/
// Noncompliant
// Noncompliant {{Remove this redundant constructor.}}
// Noncompliant {{Remove this redundant destructor.}}
//some comment
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundancyInConstructorDestructorDeclaration.Destructor.Fixed.cs
// Fixed
/*c*/  : /*don't keep*/ base() // Fixed
// Fixed
// Fixed
/*comment
// Fixed
/*some comment2*/
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantArgument.cs
/* ... */ }
/* ... */ }
/* ... */ }
//Noncompliant, y has the default value
//               ^
//Noncompliant, z has the default value
// Noncompliant
//               ^
// Noncompliant, y, z has the default value
//              ^
//Noncompliant
//Noncompliant
//Noncompliant {{Remove this default value assigned to parameter 'y'.}}
//Noncompliant
//Noncompliant
//Noncompliant
//Noncompliant
//Noncompliant
//Noncompliant
//Noncompliant
//Noncompliant
// Issue #789: Cannot use optional arguments when using expression trees (CS0584)
// Field declaration -> variable declaration
//Noncompliant -- non-expression tree, so can use defaults
//Compliant - expression tree, so cannot use defaults
// Property declaration
//Noncompliant
//Compliant
// Variable declaration
//Noncompliant
//Compliant
//Compliant
// Simple assigment
//Noncompliant
//Compliant
// Noncompliant {{Remove this default value assigned to parameter 'j'.}}
// Noncompliant {{Remove this default value assigned to parameter 'j'.}}
// Noncompliant {{Remove this default value assigned to parameter 'j'.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantArgument.Named.Fixed.cs
/* ... */ }
/* ... */ }
/* ... */ }
//Fixed
//Fixed
// Fixed
// Fixed
//Fixed
//Fixed
//Fixed
//Fixed
//Fixed
//Fixed
//Fixed
//Fixed
//Fixed
//Fixed
// Issue #789: Cannot use optional arguments when using expression trees (CS0584)
// Field declaration -> variable declaration
//Fixed
//Compliant - expression tree, so cannot use defaults
// Property declaration
//Fixed
//Compliant
// Variable declaration
//Fixed
//Compliant
//Compliant
// Simple assigment
//Fixed
//Compliant
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantArgument.NoNamed.Fixed.cs
/* ... */ }
/* ... */ }
/* ... */ }
//Fixed
//Fixed
// Fixed
//Fixed
//Fixed
//Fixed
//Fixed
//Fixed
//Fixed
//Fixed
//Fixed
// Issue #789: Cannot use optional arguments when using expression trees (CS0584)
// Field declaration -> variable declaration
//Fixed
//Compliant - expression tree, so cannot use defaults
// Property declaration
//Fixed
//Compliant
// Variable declaration
//Fixed
//Compliant
//Compliant
// Simple assigment
//Fixed
//Compliant
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantCast.cs
// Noncompliant
//                                     ^^^^^^^^^^^^
// Noncompliant
//Noncompliant
//Noncompliant
// Noncompliant {{Remove this unnecessary cast to 'int'.}}
//                   ^^^
// Noncompliant {{Remove this unnecessary cast to 'int'.}}
// Noncompliant {{Remove this unnecessary cast to 'IEnumerable<int>'.}}
// Noncompliant
// Compliant
// Compliant, multidimensional arrays need to be cast
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantCast.Fixed.cs
// Fixed
//Fixed
//Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant
// Compliant, multidimensional arrays need to be cast
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantConditionalAroundAssignment.cs
// Noncompliant
//              ^^^^^^^^^
// Noncompliant {{Remove this useless conditional.}}
// Noncompliant
// Noncompliant
// Do not report issue on field check within a property accessor as it might be expensive to set again the value
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantConditionalAroundAssignment.Fixed.cs
// Do not report issue on field check within a property accessor as it might be expensive to set again the value
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantDeclaration.ArraySize.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant the element types are not the same as the specified one
// see https://github.com/SonarSource/sonar-csharp/issues/1840
// Compliant - type specifier is mandatory here
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Special case, d is dynamic
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantDeclaration.ArrayType.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant the element types are not the same as the specified one
// Fixed
// Fixed
// see https://github.com/SonarSource/sonar-csharp/issues/1840
// Compliant - type specifier is mandatory here
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Special case, d is dynamic
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantDeclaration.cs
// Noncompliant {{Remove the explicit delegate creation; it is redundant.}}
//                     ^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant {{Remove the parameter list; it is redundant.}}
//                       ^^^^^^^^^^^^^^
//Noncompliant
// Noncompliant {{Remove the initializer; it is redundant.}}
//                                  ^^^
// Noncompliant
//                               ^^^
// Noncompliant {{Remove the array type; it is redundant.}}
//                         ^^^
// Noncompliant {{Remove the array size specification; it is redundant.}}
//                         ^
// Compliant the element types are not the same as the specified one
// Noncompliant, we report two issues on this to keep the comma unfaded
// Noncompliant
// see https://github.com/SonarSource/sonar-csharp/issues/1840
// Compliant - type specifier is mandatory here
// Noncompliant
// Noncompliant {{Remove the explicit nullable type creation; it is redundant.}}
//                      ^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//Noncompliant {{Remove the type specification; it is redundant.}}
//                               ^^^
// Noncompliant
// Special case, d is dynamic
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantDeclaration.DelegateParameterList.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant the element types are not the same as the specified one
// Fixed
// Fixed
// see https://github.com/SonarSource/sonar-csharp/issues/1840
// Compliant - type specifier is mandatory here
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Special case, d is dynamic
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantDeclaration.ExplicitDelegate.Fixed.cs
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant the element types are not the same as the specified one
// Fixed
// Fixed
// see https://github.com/SonarSource/sonar-csharp/issues/1840
// Compliant - type specifier is mandatory here
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Special case, d is dynamic
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantDeclaration.ExplicitNullable.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant the element types are not the same as the specified one
// Fixed
// Fixed
// see https://github.com/SonarSource/sonar-csharp/issues/1840
// Compliant - type specifier is mandatory here
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Special case, d is dynamic
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantDeclaration.LambdaParameterType.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant the element types are not the same as the specified one
// Fixed
// Fixed
// see https://github.com/SonarSource/sonar-csharp/issues/1840
// Compliant - type specifier is mandatory here
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Special case, d is dynamic
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantDeclaration.ObjectInitializer.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant the element types are not the same as the specified one
// Fixed
// Fixed
// see https://github.com/SonarSource/sonar-csharp/issues/1840
// Compliant - type specifier is mandatory here
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Fixed
// Special case, d is dynamic
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantInheritanceList.cs
//Noncompliant {{'int' should not be explicitly used as the underlying type.}}
//      ^^^^^
//Noncompliant {{'Object' should not be explicitly extended.}}
//Noncompliant
//Noncompliant
//Noncompliant
//      ^^^^^^^
//Noncompliant
//Noncompliant {{'IA' implements 'IBase' so 'IBase' can be removed from the inheritance list.}}
//Noncompliant
// Noncompliant
// not redundant
// not redundant
// Noncompliant
// Noncompliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantInheritanceList.Fixed.cs
//Fixed
// not redundant
// not redundant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantJumpStatement.cs
// Noncompliant
//              ^^^^^^^
// Noncompliant
// Noncompliant {{Remove this redundant jump.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Not reported
// Compliant
// Non-compliant, not reported
// Compliant
// Noncompliant
// Noncompliant
// https://github.com/SonarSource/sonar-csharp/issues/1265
// Noncompliant
// Noncompliant
// Noncompliant
//Default interface methods
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantModifier.cs
//Noncompliant
//           ^^^^^^^
//Noncompliant {{'partial' is gratuitous in this context.}}
//Noncompliant
//Noncompliant {{'sealed' is redundant in this context.}}
//                      ^^^^^^
//Noncompliant
// Noncompliant
//  ^^^^^^
// Noncompliant {{'unsafe' is redundant in this context.}}
// Noncompliant
//      ^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//              ^^^^^^^
// Noncompliant
//                      ^^^^^^^^^
// Noncompliant {{'checked' is redundant in this context.}}
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantModifier.Fixed.cs
//Fixed
//Fixed
//Fixed
//Fixed
//Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantNullableTypeComparison.cs
// some other implementation
// Noncompliant, always false
//                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Remove this redundant type comparison.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantNullCheck.cs
// Noncompliant {{Remove this unnecessary null check; 'is' returns false for nulls.}}
//              ^^^^^^^^^    
// Noncompliant
//              ^^^^^^^^^    
// Noncompliant
//                                         ^^^^^^^^^
// Noncompliant
//                                         ^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - not AND operator
// Compliant
// Compliant - rule ConditionEvaluatesToConstant will raise issue here
// Compliant
// Compliant
// Compliant - not related to this rule 
// Noncompliant {{Remove this unnecessary null check; 'is' returns false for nulls.}}
//              ^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
//                                                    ^^^^^^^^^
// Noncompliant
// Compliant 
// Compliant 
// Compliant - not related to this rule 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantNullCheck.Fixed.Batch.cs
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant - not AND operator
// Compliant
// Compliant - rule ConditionEvaluatesToConstant will raise issue here
// Compliant
// Compliant
// Compliant - not related to this rule 
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant 
// Compliant 
// Compliant - not related to this rule 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantNullCheck.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant - not AND operator
// Compliant
// Compliant - rule ConditionEvaluatesToConstant will raise issue here
// Compliant
// Compliant
// Compliant - not related to this rule 
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant 
// Compliant 
// Compliant - not related to this rule 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantParenthesesExpression.cs
//                 ^^ Noncompliant [0]
//                      ^^ Secondary@-1 [0]
//                  ^^ Noncompliant [1]
//                                    ^^ Secondary@-1 [1]
//                               ^ Noncompliant [2]
//                                    ^ Secondary@-1 [2]
// Error [CS0029] - cannot convert
// Error [CS0841] - undeclared var
// Error [CS0841] - undeclared var
// Error [CS0841] - undeclared var
// Error [CS0201] - not a statement
// Error [CS0201] - not a statement
// Error [CS0103] - unknown b
// Error [CS0103] - unknown contentSpec
// Error [CS0029] - cannot convert
//                                   ^ Noncompliant [3]
//                                                ^ Secondary@-1 [3]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantParenthesesObjectCreation.cs
// Noncompliant {{Remove these redundant parentheses.}}
//              ^^
// Compliant // Error [CS0579] - duplicate attribute
// Compliant // Error [CS0579] - duplicate attribute
//Noncompliant
//                            ^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantParenthesesObjectCreation.Fixed.cs
// Fixed
// Compliant // Error [CS0579] - duplicate attribute
// Compliant // Error [CS0579] - duplicate attribute
//Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantPropertyNamesInAnonymousClass.cs
//Noncompliant
//              ^^^
//Noncompliant {{Remove the redundant 'Y ='.}}
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantPropertyNamesInAnonymousClass.Fixed.cs
//Fixed
//Fixed
//Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantToCharArrayCall.cs
// Noncompliant, the indexer already returns a char
//                                ^^^^^^^^^^^
// Noncompliant {{Remove this redundant 'ToCharArray' call.}}
// ...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantToCharArrayCall.Fixed.cs
// Fixed
// Fixed
// ...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantToStringCall.cs
// Noncompliant {{There's no need to call 'ToString()' on a string.}}
//                                    ^^^^^^^^^^^
// Compliant, value type
// Noncompliant
// Noncompliant
// Noncompliant, note: this is why we don't have a global fix
// Noncompliant {{There's no need to call 'ToString()', the compiler will do it for you.}}
//Noncompliant
// Compliant, value type
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RedundantToStringCall.Fixed.cs
// Fixed
// Compliant, value type
// Fixed
// Fixed
// Fixed
// Fixed
//Fixed
// Compliant, value type
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ReferenceEqualityCheckWhenEqualsExists.cs
// Faking DependencyObject and CollectionViewSource
// Compliant, we are inside the Equals.
// Noncompliant {{Consider using 'Equals' if value comparison was intended.}}
//                    ^^
// Noncompliant
// CS0253
// The following is compliant
// mscorlib defines Type.operator==, but System.Runtime doesn't, and System.Type defines Equals,
// which performs reference equals.
// We can't test it here though, because in the test we have the mscorlib's Type
// Compliant
// Compliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ReferenceEqualsOnValueType.cs
//Noncompliant
//                  ^^^^^^^^^^^^^^^^^^^^^^
//Noncompliant
//Noncompliant {{Use a different kind of comparison for these value types.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RequireAttributeUsageAttribute.cs
//               ^^^^^^^^^^^^^^^^^^ {{Specify AttributeUsage on 'MyInvalidAttribute'.}}
//               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ {{Specify AttributeUsage on 'MyInvalidInheritedAttribute' to improve readability, even though it inherits it from its base type.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ReturnEmptyCollectionInsteadOfNull.cs
// Noncompliant {{Return an empty collection instead of null.}}
//                                             ^^^^
// Noncompliant
// Noncompliant
//              ^^^^^^^^^^^^
// Noncompliant
// Noncompliant
//                                                  ^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//              ^^^^^^^^^^^^
// Compliant - should not be
// Compliant - should not be (null on one path)
// Compliant - string is a collection but we allow null
// See https://github.com/SonarSource/sonar-csharp/issues/761
// Compliant because we return from a func
// Compliant XmlNode and its descendants are ignored
// Compliant XmlNode and its descendants are ignored
// Compliant XmlNode and its descendants are ignored
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ReturnValueIgnored.cs
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant, although it has side effect
// Noncompliant {{Use the return value of method 'ToList'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Noncompliant {{Use the return value of method 'Intern'.}}
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ReversedOperators.cs
// Noncompliant {{Was '-=' meant instead?}}
//                  ^
// Noncompliant; target = 3
//                  ^
// Compliant; intent to assign inverse value of num is clear
// Compliant; most probably intent to assign inverse value?
// Compliant; most probably intent to assign inverse value?
// Noncompliant // Error [CS0165] - b not initialized
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\RightCurlyBraceStartsLine.cs
// Noncompliant
//                        ^
// Noncompliant {{Move this closing curly brace to the next line.}}
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SecurityPInvokeMethodShouldNotBeCalled.cs
// Noncompliant
//                      ^^^^^^^^^^^^^^^^^
// Noncompliant
//                      ^^^^^^^^^^^^^^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SelfAssignment.cs
// Noncompliant
//Noncompliant
//          ^^^^^^^^^^^^^
//Noncompliant {{Remove or correct this useless self-assignment.}}
/*comment*/ y; //Noncompliant {{Remove or correct this useless self-assignment.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SerializationConstructorsShouldBeSecured.cs
// Noncompliant {{Secure this serialization constructor.}}
//                ^^^
// Compliant
// Noncompliant
// Compliant
// Noncompliant
// Compliant
// Noncompliant
// Compliant
// Noncompliant
// Compliant
// Noncompliant
// Compliant
// Error [CS0117] - invalid value
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SerializationConstructorsShouldBeSecured_NoAssemblyAttribute.cs
// Compliant (no partial trust assembly attribute)
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SerializationConstructorsShouldBeSecured_Part1.cs
// Noncompliant - in Part2.cs
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SerializationConstructorsShouldBeSecured_Part2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SetLocaleForDataTypes.cs
// Noncompliant {{Set the locale for this 'DataTable'.}}
//                                       ^^^^^^^^^^^^^^^
// Compliant - not creating the DataTable
// Compliant - not creating the DataSet
// Noncompliant {{Set the locale for this 'DataTable'.}}
// Noncompliant {{Set the locale for this 'DataSet'.}}
// Noncompliant {{Set the locale for this 'DataTable'.}}
// Noncompliant {{Set the locale for this 'DataTable'.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ShiftDynamicNotInteger.cs
// Noncompliant
//                       ^^^
// Noncompliant
// Noncompliant {{Remove this erroneous shift, it will fail because 'object' can't be implicitly converted to 'int'.}}
// okay
// okay
// okay // Error [CS0246] - unknown type
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ShortCircuitNullPointerDereference.cs
// Noncompliant {{Either reverse the equality operator in the 'l' null test, or reverse the logical operator that follows it.}}
//                                     ^^^^^^^^^
// Noncompliant
/*Comment*/ null || t.Parent /*Comment*/ != null)) // Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ShouldImplementExportedInterfaces.cs
// Noncompliant {{Implement 'MyInterface' on 'NotExported' or remove this export attribute.}}
//   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Derive from 'Exported' on 'NotExported' or remove this export attribute.}}
//   ^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
//   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ {{Implement 'MyInterface' on 'NotExported_Multiple' or remove this export attribute.}}
//                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ @-1 {{Implement 'IComparable' on 'NotExported_Multiple' or remove this export attribute.}}
// Noncompliant
// Noncompliant
// Exposing ourselves
// Error [CS1503]
// Error [CS1503]
// Error [CS0246]
// Error [CS1503]
// Error [CS0592] - cannot import here
// Noncompliant
// Noncompliant {{Implement 'ISomething<BaseThing>' on 'Something<BaseThing>' or remove this export attribute.}} // Error [CS0416]
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ShouldImplementExportedInterfaces_Part1.cs
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ShouldImplementExportedInterfaces_Part2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SillyBitwiseOperation.cs
// Noncompliant
//                   ^^^^
// Noncompliant
//                           ^^^
// Noncompliant
// Noncompliant {{Remove this silly bit operation.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// compliant
// Compliant
// Compliant
// compliant
// Compliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Compliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SillyBitwiseOperation.Fixed.cs
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Compliant
// compliant
// Compliant
// Compliant
// compliant
// Compliant
// Fixed
// Compliant
// Fixed
// Fixed
// Compliant
// Compliant
// Fixed
// Compliant
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SingleStatementPerLine.cs
//Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//Noncompliant
//Noncompliant {{Reformat the code to have only one statement per line.}}
// Error [CS0103] - unknown element
//Compliant
//Compliant
// Noncompliant
//Compliant
//Noncompliant
// Error [CS0246,CS0103]
//Noncompliant
// Error [CS0103] - x doesn't exist
// Compliant, because blocks are ignored
// Compliant, because blocks are ignored
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SocketsCreation.cs
// RSpec example: https://jira.sonarsource.com/browse/RSPEC-4944
//                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {{Make sure that sockets are used safely here.}}
// TcpClient and UdpClient simply abstract the details of creating a Socket
//                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  {{Make sure that sockets are used safely here.}}
//                               ^^^^^^^^^^^^^^^^^  {{Make sure that sockets are used safely here.}}
// Ok to call other methods and properties
// Creating of subclasses is not checked
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SpecifyIFormatProviderOrCultureInfo.cs
// the following test mimicks the behavior of System.String.Format(), which in some .NET distributions has an override with
// an IFormatProvider parameter only for the method with 'params' argument
// Noncompliant {{Use the overload that takes a 'CultureInfo' or 'IFormatProvider' parameter.}}
//          ^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// FN, overload with CultureInfo has 3 parameters and is difficult to tell if is the proper overload
// Noncompliant
// FN, TryParse(string, NumberStyles, IFormatProvider, out result) is difficult to tell if is real overload
// Noncompliant, there is ToInt32(object, IFormatProvider)
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - excluded // Error [CS0411] - cannot infer type
// Compliant - excluded
// Compliant - excluded
// Compliant - StringComparison implies culture
// Compliant
// Compliant - the other DoStuff3 does not have the same signature
// Compliant - the other DoStuff4 does not have the same signature
// Compliant, alternative has too many params
// Compliant, alternative is not overload
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant, there's no overload for it
// Compliant, no overload
// Compliant, no overload
// Compliant, no alternative
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SpecifyStringComparison.cs
// Noncompliant {{Change this call to 'string.Compare' to an overload that accepts a 'StringComparison' as a parameter.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// FN - too complex to correctly resolve type arguments when they are different between invoked and overloaded methods
// Compliant
// Compliant - CultureInfo implies string formatting
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SqlKeywordsDelimitedBySpace.cs
// we don't look for objects from the SqlClient namespace, we just look at the namespace
// Noncompliant
// ok, we ignore comma
// Noncompliant {{Add a space before 'FROM'.}}
//             ^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// FN - we only consider alphanumeric characters
// Noncompliant
// Noncompliant
// FN - we only consider alphanumeric characters
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - FN
// Compliant - FN
// Compliant - FN
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant FP
// Noncompliant
// Noncompliant
// FN
// FN
// ok
// FP
// FN, we don't support this
/*" +
// Noncompliant FP
// FN - we ignore parantheses as they can lead to FPs
// FN
// FN
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SqlKeywordsDelimitedBySpace_DefaultNamespace.cs
// FN
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SqlKeywordsDelimitedBySpace_InsideNamespace.cs
// FN
// FN
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StaticFieldInGenericClass.cs
/*comment*/, /*comment*/U>
//Noncompliant
//                           ^^^^^^
//Noncompliant {{A static field in a generic type is not shared among instances of different close constructed types.}}
/*comment */static string sProp2 { get; set; } //Noncompliant {{A static field in a generic type is not shared among instances of different close constructed types.}}
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StaticFieldInitializerOrder.cs
// Compliant. Const do not suffer from initialization order fiasco.
// Noncompliant
// Okay??? Might or might not. For no we don't report on it
// Noncompliant; Y at this time is still assigned default(int), i.e. 0
//                          ^^^
// Noncompliant; Y at this time is still assigned default(int), i.e. 0
// Okay
// Noncompliant {{Move this field's initializer into a static constructor.}}
// Compliant
// Compliant. Const do not suffer from initialization order fiasco.
// Compliant - FN
// Okay??? Might or might not. For no we don't report on it
// Compliant - FN: Y at this time is still assigned default(int), i.e. 0
// Compliant - FN: Y at this time is still assigned default(int), i.e. 0
// Okay
// Compliant - FN
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StaticFieldInitializerOrder_PartialClass.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StaticFieldVisible.cs
// Noncompliant
//                           ^^
// Noncompliant {{Change the visibility of 'Empty' or make it 'const' or 'readonly'.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StaticFieldWrittenFromInstanceConstructor.cs
//                              ^^^^^^^^^^^ Secondary [0]
// Secondary [1]
// Secondary [2]
// Noncompliant [0] {{Remove this assignment of 'dateOfBirth' or initialize it statically.}}
//          ^^^^^^^^^^^^^
// Noncompliant [1] {{Remove this assignment of 'expectedFingers' or initialize it statically.}}
//          ^^^^^^^^^^^^^^^^^
// Noncompliant [2]
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StaticFieldWrittenFromInstanceMember.cs
//                         ^^^^^^^^^ Secondary [0]
//                         ^^^^^^^^^ Secondary@-1 [1]
// Noncompliant [0] {{Make the enclosing instance method 'static' or remove this set on the 'static' field.}}
//          ^^^^^
// Compliant, already reported on this symbol
// Noncompliant [1]
// Compliant, already reported on this symbol
//                         ^^^^^^^^^ Secondary
//                         ^^^^^^^^^ Secondary@-1
// Noncompliant {{Remove this set, which updates a 'static' field from an instance method.}}
//          ^^^^^
// Compliant, already reported on this symbol
// Noncompliant
// Compliant, already reported on this symbol
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StaticSealedClassProtectedMembers.cs
// Compliant
// Noncompliant {{Remove this 'protected' modifier.}}
//      ^^^^^^^^^
// Noncompliant
//               ^^^^^^^^^
// Noncompliant
//                        ^^^^^^^^^
// Noncompliant
//      ^^^^^^^^^
// Noncompliant
//               ^^^^^^^^^
// Noncompliant
//                        ^^^^^^^^^
// Noncompliant
//      ^^^^^^^^^
// Noncompliant
//               ^^^^^^^^^
// Compliant
// Compliant
// Compliant
// Noncompliant
//      ^^^^^^^^^
// Noncompliant
//               ^^^^^^^^^
// Noncompliant
//      ^^^^^^^^^
// Noncompliant
//      ^^^^^^^^^
// Compliant
// Noncompliant
//      ^^^^^^^^^
// Noncompliant
//      ^^^^^^^^^
// Noncompliant
//      ^^^^^^^^^
// Compliant
// Compliant
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StreamReadStatement.cs
// Noncompliant
//              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Check the return value of the 'ReadAsync' call to see how many bytes were read.}}
// Error [CS4033] - ctor can't be async // Noncompliant
/* do something */ }
// Compliant
// Noncompliant
// Noncompliant {{Check the return value of the 'ReadAsync' call to see how many bytes were read.}}
// Noncompliant
// Compliant
// Compliant - (false negative) should not be compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StringConcatenationInLoop.cs
// Noncompliant
//              ^^^^^^^^^^^^^^^^^
// Noncompliant {{Use a StringBuilder instead.}}
// Compliant
// See https://github.com/SonarSource/sonar-csharp/issues/1138
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StringFormatEdgeCasesValidator.cs
// See https://github.com/SonarSource/sonar-dotnet/issues/2392
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StringFormatRuntimeExceptionFreeValidator.cs
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant, displays {42}
// Compliant, displays {\r\n42}
// Noncompliant {{Invalid string format, unbalanced curly brace count.}}
//              ^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant {{Invalid string format, opening curly brace can only be followed by a digit or an opening curly brace.}}
// Noncompliant
// Noncompliant
// Noncompliant {{Invalid string format, the highest string format item index should not be greater than the arguments count.}}
// Noncompliant
// Noncompliant
// Compliant, not const string are not recognized
// Compliant, arrays are not recognized
// Compliant, arrays are not recognized
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant {{Invalid string format, the format string cannot be null.}}
// Noncompliant {{Invalid string format, all format items should comply with the following pattern '{index[,alignment][:formatString]}'.}}
// Noncompliant
// Noncompliant
// Noncompliant {{Invalid string format, the string format item index should not be greater than 1000000.}}
// Noncompliant {{Invalid string format, the string format item alignment should not be greater than 1000000.}}
// Compliant, displays {}
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StringFormatTypoFreeValidator.cs
// Noncompliant {{Remove this formatting call and simply use the input string.}}
//                  ^^^^^^^^^^^^^
//Noncompliant
//Noncompliant
//Noncompliant
// Noncompliant {{The format string might be wrong, the following arguments are unused: 'arg1'.}}
// Noncompliant {{The format string might be wrong, the following arguments are unused: 'arg1' and 'arg2'.}}
// Noncompliant {{The format string might be wrong, the following item indexes are missing: '1'.}}
// Compliant
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
//          ^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
//          ^^^^^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Compliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StringLiteralShouldNotBeDuplicated.cs
// Noncompliant {{Define a constant instead of using this literal 'foobar' 8 times.}}
//                                      ^^^^^^^^
//                                                   ^^^^^^^^ Secondary
//                            ^^^^^^^^ Secondary
// Compliant - repetition below threshold
//                                     ^^^^^^^^ Secondary
//                  ^^^^^^^^ Secondary
// Compliant - casing is different
//                                ^^^^^^^^ Secondary
//                       ^^^^^^^^ Secondary
//                     ^^^^^^^^ Secondary
// Compliant - matches one of the parameter name
// Compliant - matches one of the parameter name
// Noncompliant
// Secondary - inner class count with base
// Secondary
// Secondary
// Secondary
// Secondary - inner struct count with base
// Secondary
// Secondary
// Secondary
// See https://github.com/SonarSource/sonar-dotnet/issues/2191
// Noncompliant {{Define a constant instead of using this literal '\x0001\u0124\x0001\x0000\x0001\u0125\x0002\x0000\x0001\u0126\x0001\x0000\x0001\u0127\x0005\x0000' 4 times.}}
// Secondary
// Secondary
// Secondary
// Noncompliant
// Secondary
// Secondary
// Secondary
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StringLiteralShouldNotBeDuplicated_Attributes.cs
// Issue #1419 - false positive in S1192 - shouldn't look at string in attributes
// https://github.com/SonarSource/sonar-csharp/issues/1419
// compliant - outside class and in attribute -> ignored
// Compliant - ignored completely
// Compliant - repetition below threshold - string in attributes are not counted
// nonCompliant - repetition above threshold. String in attributes should not be highlighted
// Noncompliant {{Define a constant instead of using this literal 'CA1024:UsePropertiesWhereAppropriate' 3 times.}}
// Secondary
// Secondary
// Compliant - in attribute -> ignored
// Noncompliant {{Define a constant instead of using this literal '12345' 4 times.}}
//                                     ^^^^^^^ Secondary
//                                       ^^^^^^^ Secondary
//                     ^^^^^^^ Secondary
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StringOffsetMethods.cs
// Noncompliant {{Replace 'IndexOf' with the overload that accepts an offset parameter.}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Replace 'IndexOfAny' with the overload that accepts an offset parameter.}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Replace 'LastIndexOf' with the overload that accepts an offset parameter.}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant {{Replace 'LastIndexOfAny' with the overload that accepts an offset parameter.}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StringOperationWithoutCulture.cs
// Noncompliant
//                ^^^^^^^
// Noncompliant {{Define the locale to be used in this string operation.}}
// Compliant, although culture specific
// Compliant, although culture specific
// Compliant, ordinal compare
// Noncompliant
// Noncompliant
//Noncompliant
//Noncompliant
//Noncompliant
// Noncompliant {{Use 'CompareOrdinal' or 'Compare' with the locale specified instead of 'CompareTo'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Make sure we don't report it for Expressions
// Noncompliant
// Noncompliant
// False negative
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\StringOrIntegralTypesForIndexers.cs
//                      ^^^^^ Noncompliant {{Use string or an integral type here, or refactor this indexer into a method.}}
//                      ^^^^^^^^ {{Use string or an integral type here, or refactor this indexer into a method.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SuppressFinalizeUseless.cs
//Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^
// Compliant, not sealed
//Noncompliant {{Remove this useless call to 'GC.SuppressFinalize'.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SuppressFinalizeUseless.Fixed.cs
// Compliant, not sealed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SwitchCaseFallsThroughToDefault.cs
// Noncompliant
//              ^^^^^^^^^
// Noncompliant {{Remove this empty 'case' clause.}}
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SwitchCaseFallsThroughToDefault.Fixed.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SwitchCasesMinimumThree.cs
// Noncompliant
//          ^^^^^^
// Noncompliant {{Replace this 'switch' statement with 'if' statements to increase readability.}}
// Compliant - FN
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SwitchDefaultClauseEmpty.cs
//Noncompliant@+1
//              ^^^^^^^^^^^^^^^
//Noncompliant@+1
// Single line comment before
// Single line comment after
/* Multi lines comment before */
/* Multi lines comment after */
/*commented*/
// Single line comment after
// comment
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SwitchDefaultClauseEmpty.Fixed.cs
// Single line comment before
// Single line comment after
/* Multi lines comment before */
/* Multi lines comment after */
/*commented*/
// Single line comment after
// comment
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SwitchSectionShouldNotHaveTooManyStatements_CustomValue.cs
// Noncompliant {{Reduce this switch section number of statements from 6 to at most 1, for example by extracting code into a method.}}
//              ^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SwitchSectionShouldNotHaveTooManyStatements_DefaultValue.cs
// Noncompliant {{Reduce this switch section number of statements from 9 to at most 8, for example by extracting code into a method.}}
//              ^^^^^^^
// Noncompliant {{Reduce this switch section number of statements from 10 to at most 8, for example by extracting code into a method.}}
// Noncompliant
// Error [CS0150]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SwitchShouldNotBeNested.cs
// Noncompliant
//                  ^^^^^^
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SwitchWithoutDefault.cs
// Noncompliant
//          ^^^^^^
// Noncompliant {{Add a 'default' clause to this 'switch' statement.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\SyntaxWalker_InsufficientExecutionStackException.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TabCharacter.cs
// Noncompliant
// some more tabs: "		"
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TaskConfigureAwait.cs
// Noncompliant {{Add '.ConfigureAwait(false)' to this call to allow execution to continue in any thread.}}
//                ^^^^^^^^^^^^^^^^
// Compliant
// Compliant, we assume that there is a reason to explicitly specify context switching
// Noncompliant {{Add '.ConfigureAwait(false)' to this call to allow execution to continue in any thread.}}
//                ^^^^^^^^^^^
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TernaryOperatorPointless.cs
// Noncompliant {{This operation returns the same value whether the condition is 'true' or 'false'.}}
//                  ^^^^^^^^^^^^^^^^^^^
//Noncompliant
//Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TernaryOperatorPointless.Fixed.cs
// Fixed
//Fixed
//Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestClassShouldHaveTestMethod.MsTest.cs
// Noncompliant
//        ^^^^^^^^^^
// Noncompliant
// Noncompliant
// Compliant
// See https://github.com/SonarSource/sonar-csharp/issues/1196
// Compliant - base abstract and at least 1 test in base
// Regression tests for Bug 1486: https://github.com/SonarSource/sonar-csharp/issues/1486
// Don't raise for classes that test setup or cleanup attributes
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestClassShouldHaveTestMethod.NUnit.cs
// Noncompliant
//        ^^^^^^^^^^
// Noncompliant
// Noncompliant
// Compliant
// See https://github.com/SonarSource/sonar-csharp/issues/1196
// Compliant - base abstract and at least 1 test in base
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldContainAssertion.MsTest.cs
// Noncompliant {{Add at least one assertion to this test case.}}
//                  ^^^^^^^^^^^
// Don't raise on skipped test methods
// Noncompliant {{Add at least one assertion to this test case.}}
//                  ^^^^^^^^^^^
// Don't raise on skipped test methods
// Noncompliant
/// <summary>
/// The NSubstitute assertions are extensively verified in the NUnit test files.
/// Here we just do a simple test to confirm that the errors are not raised in conjunction with MsTest.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldContainAssertion.NUnit.cs
// Noncompliant {{Add at least one assertion to this test case.}}
//                  ^^^^^
// Don't raise on skipped test methods
// Noncompliant {{Add at least one assertion to this test case.}}
//                  ^^^^^^^^^
// Don't raise on skipped test methods
// Noncompliant {{Add at least one assertion to this test case.}}
//                  ^^^^^^^^^^^^^^^
// Don't raise on skipped test methods
// Noncompliant {{Add at least one assertion to this test case.}}
//                  ^^^^^^^
// Don't raise on skipped test methods
// Noncompliant FP
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldContainAssertion.Xunit.cs
// Noncompliant {{Add at least one assertion to this test case.}}
//                  ^^^^^
// Don't raise on skipped test methods
// Noncompliant {{Add at least one assertion to this test case.}}
//                  ^^^^^^^
// Don't raise on skipped test methods
/// <summary>
/// The NSubstitute assertions are extensively verified in the NUnit test files.
/// Here we just do a simple test to confirm that the errors are not raised in conjunction with XUnit.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldContainAssertion.Xunit.Legacy.cs
// v4.9
// v1.9.1
// Noncompliant {{Add at least one assertion to this test case.}}
//                  ^^^^^
// Don't raise on skipped test methods
// Noncompliant {{Add at least one assertion to this test case.}}
//                  ^^^^^^^
// Don't raise on skipped test methods
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldHaveCorrectSignature.Misc.cs
// Noncompliant {{Make this test method 'public'.}}
//                   ^^^^^^^^^^^^^^^^^
// Noncompliant {{Make this test method 'public', non-generic and non-'async' or return 'Task'.}}
//                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Make this test method 'public' and non-'async' or return 'Task'.}}
//                         ^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Make this test method non-generic and non-'async' or return 'Task'.}}
//                        ^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Make this test method 'public' and non-generic.}}
//                   ^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Make this test method 'public'.}}
//                   ^^^^^^^^^^^^^^^^^
// Shouldn't fail // Error [CS0246, CS0246]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldHaveCorrectSignature.MsTest.cs
// Noncompliant {{Make this test method 'public'.}}
//                   ^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant {{Make this test method non-'async' or return 'Task'.}}
// Noncompliant {{Make this test method non-generic.}}
// Noncompliant {{Make this test method 'public' and non-generic.}}
// Noncompliant {{Make this test method 'public', non-generic and non-'async' or return 'Task'.}}
// Compliant
// Noncompliant {{Make this test method 'public'.}}
//                   ^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant {{Make this test method non-'async' or return 'Task'.}}
// Noncompliant {{Make this test method non-generic.}}
// Noncompliant {{Make this test method 'public' and non-generic.}}
// Noncompliant {{Make this test method 'public', non-generic and non-'async' or return 'Task'.}}
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldHaveCorrectSignature.NUnit.cs
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// valid
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldHaveCorrectSignature.Xunit.cs
// Compliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Compliant - theories can be generic
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldHaveCorrectSignature.Xunit.Legacy.cs
// Compliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Compliant - theories can be generic
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldNotBeIgnored.MsTest.cs
//       ^^^^^^ Noncompliant {{Either remove this 'Ignore' attribute or add an explanation about why this test is ignored.}}
// This test is ignored because 'blah blah'
// This test is ignored because 'blah blah'
//       ^^^^^^ Noncompliant {{Either remove this 'Ignore' attribute or add an explanation about why this test is ignored.}}
// This test is ignored because 'blah blah'
// This test is ignored because 'blah blah'
//   ^^^^^^ Noncompliant
// No TestClass attribute
// This test is ignored because 'blah blah'
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldNotBeIgnored.NUnit.cs
// False positive: using an MSTest Ignore against an NUnit test does nothing,
// but we still raise an issue.
//       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldNotBeIgnored.NUnit.V2.cs
// False positive: using an MSTest Ignore against an NUnit test does nothing,
// but we still raise an issue.
//       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant
// This test is ignored because 'blah blah'
//       ^^^^^^^^ Noncompliant
// This test is ignored because 'blah blah'
//       ^^^^^^ Noncompliant
//       ^^^^^^ Noncompliant
// some reason
// Compliant
// No TestClass attribute
// This test is ignored because 'blah blah'
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldNotBeIgnored.Xunit.cs
// Regression test for #1705: https://github.com/SonarSource/sonar-csharp/issues/1705
// The rule should not be applied to xUnit tests. Previously, the rule was raising if
// an MSTest [Ignore] attribute was applied to a xUnit test.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TestMethodShouldNotBeIgnored.Xunit.v1.cs
// Legacy xUnit (v1.9.1)
// Regression test for #1705: https://github.com/SonarSource/sonar-csharp/issues/1705
// The rule should not be applied to xUnit tests. Previously, the rule was raising if
// an MSTest [Ignore] attribute was applied to a xUnit test.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ThisShouldNotBeExposedFromConstructors.cs
// Error [CS0426,CS8085]
// Fields are handled by S3010
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant, False Negative
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ThreadResumeOrSuspendShouldNotBeCalled.cs
// Noncompliant {{Refactor the code to remove this use of 'Thread.Suspend'.}}
//                               ^^^^^^^
// Noncompliant{{Refactor the code to remove this use of 'Thread.Resume'.}}
//                               ^^^^^^
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ThreadStaticNonStaticField.cs
// Noncompliant
//       ^^^^^^^^^^^^
// Noncompliant {{Remove the 'ThreadStatic' attribute from this definition.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ThreadStaticNonStaticField.Fixed.cs
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ThreadStaticWithInitializer.cs
// Noncompliant {{Remove this initialization of 'PerThreadObject' or make it lazy.}}
//                                               ^^^^^^^^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ThrowReservedExceptions.cs
// Noncompliant {{'System.Exception' should not be thrown by user code.}}
//                ^^^^^^^^^^^^^^^
// Noncompliant {{'System.ApplicationException' should not be thrown by user code.}}
//                ^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{'System.SystemException' should not be thrown by user code.}}
//                ^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{'System.ExecutionEngineException' should not be thrown by user code.}}
//                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{'System.IndexOutOfRangeException' should not be thrown by user code.}}
//                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{'System.NullReferenceException' should not be thrown by user code.}}
//                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{'System.OutOfMemoryException' should not be thrown by user code.}}
//                ^^^^^^^^^^^^^^^^^^^^^^^^^^
// Compliant
// Compliant
// Error [CS0030] - cannot cast
// Throw exception
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TooManyGenericParameters_CustomValues.cs
// Noncompliant {{Reduce the number of generic parameters in the 'Bar.Foo' method to no more than the 4 authorized.}}
//                  ^^^
// Noncompliant {{Reduce the number of generic parameters in the 'Bar' class to no more than the 4 authorized.}}
//        ^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TooManyGenericParameters_DefaultValues.cs
// Noncompliant  {{Reduce the number of generic parameters in the 'Bar.Foo' method to no more than the 3 authorized.}}
//                  ^^^
// Noncompliant
//                  ^^^
// Noncompliant {{Reduce the number of generic parameters in the 'Bar' class to no more than the 2 authorized.}}
//        ^^^
// Noncompliant
//        ^^^
// Noncompliant
//        ^^^
// Noncompliant {{Reduce the number of generic parameters in the 'Str' struct to no more than the 2 authorized.}}
//         ^^^
// Noncompliant {{Reduce the number of generic parameters in the 'IFoo' interface to no more than the 2 authorized.}}
//            ^^^^
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TooManyLabelsInSwitch.cs
// Noncompliant {{Consider reworking this 'switch' to reduce the number of 'case's from 3 to at most 2.}}
//          ^^^^^^
// Compliant - FN
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TooManyParameters_CustomValues.cs
// Noncompliant
//                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Compliant, interface implementation
// Noncompliant {{Method has 4 parameters, which is greater than the 3 authorized.}}
// Noncompliant {{Delegate has 4 parameters, which is greater than the 3 authorized.}}
// Noncompliant {{Lambda has 4 parameters, which is greater than the 3 authorized.}}
//                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// see https://github.com/SonarSource/sonar-csharp/issues/1459
// We should not raise for imported methods according to external definition.
// Compliant, external definition
// Noncompliant
// Noncompliant {{Constructor has 8 parameters, which is greater than the 3 authorized.}}
//                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// See https://github.com/SonarSource/sonar-csharp/issues/1015
// We should not raise when parent base class forces usage of too many args
// Compliant (base class requires them)
// Noncompliant
// Noncompliant {{Local function has 4 parameters, which is greater than the 3 authorized.}}
// Noncompliant {{Local function has 5 parameters, which is greater than the 3 authorized.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TooManyParameters_DefaultValues.cs
// see https://github.com/SonarSource/sonar-csharp/issues/1459
// We should not raise for imported methods according to external definition.
// Compliant, external definition
// Noncompliant  {{Method has 10 parameters, which is greater than the 7 authorized.}}
// Noncompliant {{Constructor has 8 parameters, which is greater than the 7 authorized.}}
//                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// See https://github.com/SonarSource/sonar-csharp/issues/1015
// We should not raise when parent base class forces usage of too many args
// Compliant (base class requires them)
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ToStringNoNull.cs
// Noncompliant
//              ^^^^^^^^^^^^
// ...
// Noncompliant {{Return empty string instead.}}
// ...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TrackNotImplementedException.cs
// Noncompliant {{Implement this method or throw 'NotSupportedException' instead.}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Compliant - we don't check inheritance
// Compliant - not thrown
// Noncompliant
//          ^^^^^^^^^
// FN
// Compliant - Default interface methods can be used to extend an already existing API while keeping backwards compatibility.
// Noncompliant
//              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TryStatementsWithIdenticalCatchShouldBeMerged.cs
// Noncompliant {{Combine this 'try' with the one starting on line 9.}}
// Noncompliant {{Combine this 'try' with the one starting on line 15.}}
// Noncompliant {{Combine this 'try' with the one starting on line 21.}}
// exception type different
// catch clauses count different
// catch content different
// has finally
// differs than previous by finally content
// False negative - the catch clause has a name for the exception, while the try on #36 does not have a name
// exception filter
// Noncompliant, same catches, different order
// Noncompliant, same exception filter
// Child, not on the same level
// Not on the same level
// Noncompliant {{Combine this 'try' with the one starting on line 128.}}
// Noncompliant {{Combine this 'try' with the one starting on line 171.}}
// Noncompliant {{Combine this 'try' with the one starting on line 181.}}
// ctor
// Noncompliant {{Combine this 'try' with the one starting on line 191.}}
// Noncompliant {{Combine this 'try' with the one starting on line 202.}}
// Noncompliant FP
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TypeExaminationOnSystemType.cs
//Noncompliant {{Remove this use of 'GetType' on a 'System.Type'.}}
//                          ^^^^^^^^^^
//Noncompliant {{Pass an argument that is not a 'System.Type' or consider using 'IsAssignableFrom'.}}
//                                           ^^^^^^^^^^^^^^
/* ... */ }
// Noncompliant {{Consider removing the 'GetType' call, it's suspicious in an 'IsInstanceOfType' call.}}
/* ... */ }
// Noncompliant
// Noncompliant
/* ... */ }
/* ... */ }
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TypeNamesShouldNotMatchNamespaces.cs
// Noncompliant {{Change the name of type 'Web' to be different from an existing framework namespace.}}
//               ^^^
//              ^^
// Noncompliant
//                       ^^^^^^^
// Noncompliant
//                   ^^^^
// Noncompliant
//                ^^^^
// Compliant (it's not public)
// Error [CS1527] - Compliant (it's not public)
// Compliant (namespace are not checked)
// Error [CS1001]
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\TypesShouldNotExtendOutdatedBaseTypes.cs
// Noncompliant {{Refactor this type not to derive from an outdated type 'System.ApplicationException'.}}
//        ^^^^
// Noncompliant {{Refactor this type not to derive from an outdated type 'System.Xml.XmlDocument'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - doesn't directly implement type
// Error [CS0246] - unknown type
// Error [CS1001] - missing identifier
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnaryPrefixOperatorRepeated.cs
// Noncompliant; same as i
//                  ^^
// Compliant
// Compliant, we care only about !
// Noncompliant
// Noncompliant {{Use the '!' operator just once or not at all.}}
// Compliant, not a typo
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnaryPrefixOperatorRepeated.Fixed.cs
// Fixed
// Compliant
// Compliant, we care only about !
// Fixed
// Fixed
// Compliant, not a typo
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnchangedLocalVariablesShouldBeConst.cs
// RSPEC sample
// Noncompliant {{Add the 'const' modifier to 'target'.}}
//              ^^^^^^
// Noncompliant
// bla bla
// Noncompliant
// Noncompliant@+1 {{Add the 'const' modifier to 'var1'.}}
// Noncompliant {{Add the 'const' modifier to 'var2'.}}
// Noncompliant {{Add the 'const' modifier to 'var4'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant. Nullables cannot be const.
// Compliant. Nullables cannot be const.
// Compliant. Const only works with null.
// Compliant (type with implicit conversion). Const only works with null.
// Compliant (expression on the right is not constant).
// Compliant (expression on the right is not constant).
// Compliant (expression on the right is not constant).
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant FP
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnconditionalJumpStatement.cs
// Noncompliant {{Refactor the containing loop to do more than one iteration.}}
//              ^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant {{Refactor the containing loop to do more than one iteration.}}
//                  ^^^^^^^
// Noncompliant {{Refactor the containing loop to do more than one iteration.}}
//                  ^^^^^^^^^^^^^^^^^^^^^^
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Noncompliant
// Compliant
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Sharing violation
// All others are considered an error and we don't retry
// P will throw, it will be caught and another iteration will happen
// Noncompliant FP
//Local funciton is declared inside loop
// Noncompliant FP
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UninvokedEventDeclaration.cs
// Compliant, event accessors cannot be invoked
// S3237 will report
// S3237 will report
// Noncompliant
//we register some event handlers
// Noncompliant {{Remove the unused event 'Event5' or invoke it.}}
//                                        ^^^^^^
// Noncompliant
//we register some event handlers
// See https://github.com/SonarSource/sonar-csharp/issues/1219
// Need to use the event to be able to trigger issues
//Noncompliant
// Shows all different kinds of event invocations
// Shows all different kinds of event invocations from an inner class
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnnecessaryUsings.cs
// Noncompliant {{Remove this unnecessary 'using'.}}
// Warning [CS0105]
// FN - System.DateTime is not a namespace symbol
// FN - aliases not yet supported
// Compliant - used inside MyNamspace2 to access Ns1_1
// Noncompliant {{Remove this unnecessary 'using'.}}
// Warning [CS0105]
// Warning [CS0105]
// Warning [CS0105]
// Noncompliant {{Remove this unnecessary 'using'.}}
// Noncompliant {{Remove this unnecessary 'using'.}}
// Noncompliant {{Remove this unnecessary 'using'.}}
// Warning [CS0105]
// Warning [CS0105]
// Noncompliant {{Remove this unnecessary 'using'.}}
/// <summary> There is <see cref="Win32Exception"/> or <see cref="ListDictionary"/></summary>
/// <exception cref="AesManaged"></exception>
/// <summary>
///   <seealso cref="ReadOnlyCollection{T}"/>
/// </summary>
/// This is just a comment
// Compliant - statement is needed for the custom await usage
// Compliant - statement is needed for query syntax
// Compliant - statement is needed for query syntax
// Noncompliant - This is 'LinqQuery3.System.Linq' whose import is indeed unnecessary
// Noncompliant
// Compliant - statement is needed for query syntax
// This test is for coverage, ensuring the rule does not crash if for some reason the using directive is not found when
// a QueryExpressionSyntax is in the code
// Error [CS1935] - Could not find an implementation of the query pattern for source type 'List<string>'.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnnecessaryUsings.Fixed.Batch.cs
// Warning [CS0105]
// FN - System.DateTime is not a namespace symbol
// FN - aliases not yet supported
// Compliant - used inside MyNamspace2 to access Ns1_1
// Warning [CS0105]
// Warning [CS0105]
// Warning [CS0105]
// Warning [CS0105]
// Warning [CS0105]
/// <summary> There is <see cref="Win32Exception"/> or <see cref="ListDictionary"/></summary>
/// <exception cref="AesManaged"></exception>
/// <summary>
///   <seealso cref="ReadOnlyCollection{T}"/>
/// </summary>
/// This is just a comment
// Compliant - statement is needed for the custom await usage
// Compliant - statement is needed for query syntax
// Compliant - statement is needed for query syntax
// Compliant - statement is needed for query syntax
// This test is for coverage, ensuring the rule does not crash if for some reason the using directive is not found when
// a QueryExpressionSyntax is in the code
// Error [CS1935] - Could not find an implementation of the query pattern for source type 'List<string>'.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnnecessaryUsings.Fixed.cs
// Warning [CS0105]
// FN - System.DateTime is not a namespace symbol
// FN - aliases not yet supported
// Compliant - used inside MyNamspace2 to access Ns1_1
// Warning [CS0105]
// Warning [CS0105]
// Warning [CS0105]
// Warning [CS0105]
// Warning [CS0105]
/// <summary> There is <see cref="Win32Exception"/> or <see cref="ListDictionary"/></summary>
/// <exception cref="AesManaged"></exception>
/// <summary>
///   <seealso cref="ReadOnlyCollection{T}"/>
/// </summary>
/// This is just a comment
// Compliant - statement is needed for the custom await usage
// Compliant - statement is needed for query syntax
// Compliant - statement is needed for query syntax
// Compliant - statement is needed for query syntax
// This test is for coverage, ensuring the rule does not crash if for some reason the using directive is not found when
// a QueryExpressionSyntax is in the code
// Error [CS1935] - Could not find an implementation of the query pattern for source type 'List<string>'.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnusedPrivateMember.CalledFromGenerated.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnusedPrivateMember.cs
// Noncompliant {{Remove the unused private constructor 'Gen'.}}
// Noncompliant
//      ^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Remove this unread private field 'field3' or refactor the code to use its value.}}
// Noncompliant;
//              ^^^^^^
// Noncompliant {{Remove the unused private property 'Property'.}}
// Noncompliant {{Remove the unused private method 'Method'.}}
// Noncompliant {{Remove the unused private type 'Class'.}}
//      ^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Remove the unused private type 'Struct'.}}
//      ^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Remove the unused private type 'Delegate2'.}}
//Noncompliant {{Remove the unused private event 'Event'.}}
//Noncompliant {{Remove this unread private field 'MyEvent' or refactor the code to use its value.}}
//Noncompliant {{Remove the unused private event 'MyOtherEvent'.}}
// Compliant
// Noncompliant {{Remove the unused private constructor 'Class2'.}}
// Noncompliant {{Remove the unused private field 'field'.}}
// Noncompliant {{Remove this unread private class field 'field2' or refactor the code to use its value.}}
// Noncompliant {{Remove the unused private type 'Class3'.}}
// Noncompliant {{Remove the unused private method 'Method1'.}}
// Noncompliant {{Remove the unused internal type 'Class4'.}}
// See https://github.com/SonarSource/sonar-csharp/issues/888
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Noncompliant
// Compliant, might be called
// Compliant, might be called
// Noncompliant
// Compliant, event handlers in partial classes are not reported
// Noncompliant {{Remove the unused private set accessor in property 'OnlyRead'.}}
//                                  ^^^^
// Noncompliant {{Remove the unused private get accessor in property 'OnlySet2'.}}
//                             ^^^^^^^^^^^^^^^^^^
// Noncompliant {{Remove the unused private property 'NotAccessed'.}}
//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Compliant because of the serialization
// Noncompliant {{Remove this unread private field 'field2' or refactor the code to use its value.}}
// As S4487 will raise when a private field is written and not read, S1450 won't raise on these cases
// These tests where finding issues before with S1450 and should find them with S4487 now
// Noncompliant {{Remove this unread private field 'F1' or refactor the code to use its value.}}
// Noncompliant {{Remove this unread private field 'F5' or refactor the code to use its value.}}
// Noncompliant {{Remove this unread private field 'F6' or refactor the code to use its value.}}
// Noncompliant {{Remove this unread private field 'F14' or refactor the code to use its value.}}
// Noncompliant {{Remove this unread private field 'F28' or refactor the code to use its value.}}
// Noncompliant {{Remove this unread private field 'F36' or refactor the code to use its value.}}
// Noncompliant {{Remove this unread private field 'F37' or refactor the code to use its value.}}
// Noncompliant {{Remove the unused private field 'F39'.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnusedPrivateMember.CSharp7.cs
// Noncompliant
// Noncompliant
// Noncompliant FP #2478
// Noncompliant FP #2333
// Noncompliant FP #2333
// That's invalid syntax, but it is still empty ctor and we should not raise for it, even if it is not used
// Error [CS1525,CS1002]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnusedPrivateMember.Fixed.Batch.cs
// Fixed
//Fixed
// Compliant
// Fixed
// See https://github.com/SonarSource/sonar-csharp/issues/888
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Compliant, might be called
// Compliant, might be called
// Compliant, event handlers in partial classes are not reported
// Fixed
// Fixed
// Compliant because of the serialization
// Fixed
// As S4487 will raise when a private field is written and not read, S1450 won't raise on these cases
// These tests where finding issues before with S1450 and should find them with S4487 now
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnusedPrivateMember.Fixed.cs
// Fixed
//Fixed
// See https://github.com/SonarSource/sonar-csharp/issues/888
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Compliant - valid main method since C# 7.1
// Compliant, might be called
// Compliant, might be called
// Compliant, event handlers in partial classes are not reported
// Fixed
// Fixed
// Compliant because of the serialization
// Fixed
// As S4487 will raise when a private field is written and not read, S1450 won't raise on these cases
// These tests where finding issues before with S1450 and should find them with S4487 now
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnusedPrivateMember.Generated.cs
// <AUTO-GENERATED>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnusedPrivateMember.part1.cs
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnusedPrivateMember.part2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UnusedReturnValue.cs
// Compliant, part of the interface
// Noncompliant {{Change return type to 'void'; not a single caller uses the returned value.}}
//              ^^^
// Compliant, unused, S1144 also reports on it
// Noncompliant
// Noncompliant
// Compliant - FN
// Compliant - FN
// Compliant - FN, the sole purpose of expressions is to return values, in this case the function can be deleted
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UriShouldNotBeHardcoded.AspNet.cs
// Compliant
// System.Web.Mvc.HttpServerUtilityBase
// Noncompliant (n.b. method will throw exception)
// System.Web.Mvc.HttpRequestBase
// Noncompliant (n.b. method will throw exception)
// System.Web.Mvc.HttpResponseBase
// Noncompliant
// System.Web.VirtualPathUtility (all methods)
// ...
// Noncompliant (n.b. method will throw exception)
// Noncompliant
// ...
// System.Web.Mvc.UrlHelper
// Noncompliant
// should not raise
// should not raise
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UriShouldNotBeHardcoded.AspNetCore.cs
// Noncompliant
// Noncompliant
// Compliant - we ignore unix paths
// FN
// FN
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UriShouldNotBeHardcoded.cs
//blah.txt"; // Noncompliant {{Refactor your code not to use hardcoded absolute paths or URIs.}}
//                            ^^^^^^^^^^^^^^^^^
//www.mywebsite.com"; // Noncompliant
//www.mywebsite.com"; // Noncompliant
//www.mywebsite.com"; // Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - we ignore unix paths by default
// Compliant
// Compliant
// Noncompliant {{Remove this hardcoded path-delimiter.}}
//                                              ^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - we ignore unix paths by default
//www.mywebsite.com"; // FN
// FN
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseConstantsWhereAppropriate.cs
// Noncompliant {{Replace this 'static readonly' declaration with 'const'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant- public
// Compliant - protected
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseCurlyBraces.cs
// Noncompliant
//          ^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant {{Add curly braces around the nested statement(s) in this 'do' block.}}
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseCurlyBraces.CSharp7.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseGenericEventHandlerInstances.cs
// Noncompliant {{Refactor this delegate to use 'System.EventHandler<TEventArgs>'.}}
//                   ^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseGenericWithRefParameters.cs
//                  ^^^ Noncompliant {{Make this method generic and replace the 'object' parameter with a type parameter.}}
//                                 ^^ Secondary@-1
//                                                ^^ Secondary@-2
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseNumericLiteralSeparator.cs
// Noncompliant; is this 10 million or 100 million?
// Noncompliant {{Add underscores to this numeric value for readability.}}
//                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseParamsForVariableArguments.cs
// Noncompliant
// Compliant - interface implementation
// Noncompliant
// Noncompliant {{Use the 'params' keyword instead of '__arglist'.}}
//                  ^^^
// Noncompliant
// Noncompliant
// Compliant - override
// Compliant - interop
// Compliant - private method
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseShortCircuitingOperator.cs
// Noncompliant {{Correct this '|' to '||'.}}
// Noncompliant {{Correct this '&' to '&&'.}}
//                   ^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseShortCircuitingOperator.Fixed.cs
// Fixed
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseStringIsNullOrEmpty.cs
// Noncompliant {{Use 'string.IsNullOrEmpty()' instead of comparing to empty string.}}
//              ^^^^^^^^^^^^^^^^
// Noncompliant {{Use 'string.IsNullOrEmpty()' instead of comparing to empty string.}}
//              ^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Use 'string.IsNullOrEmpty()' instead of comparing to empty string.}}
//              ^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Use 'string.IsNullOrEmpty()' instead of comparing to empty string.}}
//              ^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Use 'string.IsNullOrEmpty()' instead of comparing to empty string.}}
//              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant {{Use 'string.IsNullOrEmpty()' instead of comparing to empty string.}}
//              ^^^^^^^^^^^^^^^^
// Noncompliant {{Use 'string.IsNullOrEmpty()' instead of comparing to empty string.}}
//              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseUriInsteadOfString.cs
// Noncompliant {{Change this property type to 'System.Uri'.}}
//                     ^^^^^^
// Compliant
// Noncompliant {{Change this property type to 'System.Uri'.}}
//      ^^^^^^
// Noncompliant {{Change this property type to 'System.Uri'.}}
//      ^^^^^^
// Noncompliant {{Change this property type to 'System.Uri'.}}
//      ^^^^^^
// Noncompliant {{Change this property type to 'System.Uri'.}}
// Compliant
// Urn
// Noncompliant {{Change this property type to 'System.Uri'.}}
//      ^^^^^^
// Noncompliant {{Change this property type to 'System.Uri'.}}
// Uri
// Noncompliant {{Change this property type to 'System.Uri'.}}
//      ^^^^^^
// Noncompliant {{Change this property type to 'System.Uri'.}}
// Noncompliant
// Test there are no false positives
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant {{Change this return type to 'System.Uri'.}}
//                     ^^^^^^
// Compliant
// Url
// Noncompliant {{Change this return type to 'System.Uri'.}}
// Noncompliant {{Change this return type to 'System.Uri'.}}
// Compliant
// Urn
// Noncompliant {{Change this return type to 'System.Uri'.}}
// Noncompliant {{Change this return type to 'System.Uri'.}}
// Uri
// Noncompliant {{Change this return type to 'System.Uri'.}}
// Noncompliant {{Change this return type to 'System.Uri'.}}
// Test there are no false positives
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
// Noncompliant {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
// Compliant
// Compliant
// Noncompliant {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
// Noncompliant {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
// Noncompliant {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
// Compliant
// Compliant
// Noncompliant {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
//                              ^^^^^^
// Compliant
// Noncompliant {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
//                                      ^^^^^^
// Compliant
//                                   ^^^^^^ Noncompliant {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
//                                                                     ^^^^^^ Noncompliant@-1 {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
// Compliant
// Compliant
// Compliant
// Noncompliant {{Refactor this method so it invokes the overload accepting a 'System.Uri' parameter.}}
// Noncompliant {{Refactor this method so it invokes the overload accepting a 'System.Uri' parameter.}}
//                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant {{Call the overload that takes a 'System.Uri' as an argument instead.}}
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Noncompliant {{Call the overload that takes a 'System.Uri' as an argument instead.}}
// Compliant
// Compliant
// Compliant
// Noncompliant {{Call the overload that takes a 'System.Uri' as an argument instead.}}
// Do not raise issues when using Uri class
// Compliant
//      ^^^^^^ Noncompliant {{Change this return type to 'System.Uri'.}}
//                         ^^^^^^ Noncompliant@-1 {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
//                                     ^^^^^^ Noncompliant@-2 {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
//                                                 ^^^^^^ Noncompliant@-3 {{Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.}}
//      ^^^^^^ Noncompliant {{Change this return type to 'System.Uri'.}}
//             ^^^^^^^^^ Noncompliant@-1 {{Refactor this method so it invokes the overload accepting a 'System.Uri' parameter.}}
//      ^^^^^^ Noncompliant {{Change this return type to 'System.Uri'.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseValueParameter.cs
// Noncompliant {{Use the 'value' parameter in this property set accessor declaration.}}
//          ^^^
//get { return count; }
// Noncompliant
// Noncompliant
// Noncompliant {{Use the 'value' parameter in this event accessor declaration.}}
// Compliant because interface implementation
// Noncompliant
// Compliant because interface implementation
// Compliant because interface implementation
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// implement interface using arrow syntax
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UseWhileLoopInstead.cs
// Body of the loop.
// Compliant - only the incrementor is missing
// Compliant - only the declaration is missing
// Noncompliant {{Replace this 'for' loop with a 'while' loop.}}
//          ^^^
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UsingCommandLineArguments.cs
// Noncompliant {{Make sure that command line arguments are used safely here.}}
//                         ^^^^
// Compliant, args is not used
// Compliant, not a Main method
// Compliant, not a Main method
// Compliant, args is not used
// Compliant, not a Main method
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UsingCookies_Net46.cs
// Compliant, value is not set
// Noncompliant
// Compliant, value is not set
// Noncompliant
// Compliant, value is not set
// Noncompliant {{Make sure that this cookie is written safely.}}
// Compliant
// Noncompliant
//                                         ^^^^^
// Noncompliant
//          ^^^^^^^
// Noncompliant
//          ^^^^^^^^
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// operations on generic NameValueCollection objects do not raise any issue
// setting HttpCookie.Value on fields
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// setting HttpCookie.Value on properties
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UsingCookies_NetCore.cs
// Response headers
// Noncompliant
// Noncompliant
// Compliant
// Not the Set-Cookie header
// Response headers as variable
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Response cookies as property
// Noncompliant
// Noncompliant
// Response cookies as variable
// Noncompliant
// Noncompliant
// Compliant
// Request headers
// Noncompliant
// Noncompliant
// Compliant
// Not the Set-Cookie header
// Request headers as variable
// Noncompliant
// Noncompliant
// Compliant
// Compliant
// Compliant
// Request cookies as property
// Compliant
// Compliant
// Request cookies as variable
// Compliant
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\UsingRegularExpressions.cs
// Compliant, less than 3 characters
// Compliant, less than 3 characters
// Compliant, less than 3 characters
// Compliant, does not have the special characters
// Compliant, has only 1 special character
// Noncompliant
// Noncompliant {{Make sure that using a regular expression is safe here.}}
//              ^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant FP (escaped special characters)
// Noncompliant
// Noncompliant FP (escaped special characters)
// Noncompliant
// Noncompliant FP (escaped special characters)
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant FP (escaped special characters)
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Non-static methods are compliant
// not hardcoded strings are compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ValuesUselesslyIncremented.cs
// Noncompliant; i is still zero
// Noncompliant {{Remove this increment or correct the code not to waste it.}}
//                 ^^^
// Compliant; 0 returned
// Noncompliant
// Compliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\ValueTypeShouldImplementIEquatable.cs
// Noncompliant {{Implement 'IEquatable<T>' in value type 'MyStruct'.}}
//         ^^^^^^^^
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\VariableShadowsField.cs
// Noncompliant
//              ^^^^^^^
// Noncompliant
// Compliant
// Noncompliant {{Rename 'myField2' which hides the field with the same name.}}
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Compliant
// Noncompliant
// Compliant
// Compliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Compliant - currently the rule only looks at fields and properties
// Compliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\VariableUnused.cs
// Noncompliant
//              ^^^^^^^^^^^^^^^
// Compliant
// Noncompliant {{Remove the unused local variable 'v'.}}
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
// Noncompliant
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\VirtualEventField.cs
// Noncompliant {{Remove this 'virtual' modifier of 'OnRefueled'.}}
//             ^^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\VirtualEventField.Fixed.cs
// Fixed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\WcfMissingContractAttribute.cs
// Noncompliant {{Add the 'OperationContract' attribute to the methods of this interface.}}
//            ^^^^^^^^^^^
// Noncompliant {{Add the 'ServiceContract' attribute to  this class.}}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\WcfNonVoidOneWay.cs
// Noncompliant {{This method can't return any values because it is marked as one-way operation.}}
//      ^^^
// Error [CS0029] - Cannot implicitly convert type 'string' to 'bool' not expected on
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\autogenerated_comment.cs
// this is in no way <auto-generated
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\autogenerated_comment2.cs
// this is <autogenerated
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\class.designer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\class.g.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\class.g.something.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\class.generated.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\class_generated.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\compiler_generated.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\compiler_generated_attr.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\debugger_non_user_code.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\debugger_non_user_code_attr.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\generated_code_attr.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\generated_code_attr2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\generated_region.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\generated_region_2.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\normal_file.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\FileMetadataAnalyzer\TEMPORARYGENERATEDFILE_class.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCases\Performance\Bug2474_EntityFrameworkMigration.cs
// Sample code to repro bug #2472: Analysis of Entity Framework migration files never completes
// https://github.com/SonarSource/sonar-dotnet/issues/2474
// Created from end-user repro: https://github.com/ksitarek/sonarscannersample
// This file was called "20181005212624_InitialCreate.cs" in that repo.
//
// The single file is enough to cause the issue described in the bug, although there
// are other large files in the project that might also be problematic.
//
// Requires the following NuGet package:
//  <PackageReference Include = "Microsoft.EntityFrameworkCore.SqlServer" Version="2.x" />
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCasesForRuleFailure\InvalidSyntax.cs
// we don't report on this
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestCasesForRuleFailure\SpecialCases.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\CodeFixVerifier.cs
/*
// a Diagnostic can raise issues for different rules, but provide fixes for only one of them
// if we don't have a fixer for this rule, we skip it
// ToDo: Is that the right decision?
// ToDo: Is that the right choice?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\DiagnosticVerifier.cs
/*
// VB12 does not support line continuation comments" i.e. a comment at the end of a multi-line statement.
// When there are no diagnostics reported from the test (for example the FileLines analyzer
// does not report in each call to Verifier.VerifyAnalyzer) we skip the check for the extension
// method.
// In general this check is not very precise, because when the tests are run in parallel
// we cannot determine which diagnostic was reported from which analyzer instance. In other
// words, we cannot distinguish between diagnostics reported from different tests. That's
// why we require each diagnostic to be reported through the extension methods at least once.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\DiagnosticVerifierTest.cs
/*
// Secondary@+1
// Noncompliant
// Secondary@+1 [myWrongId]
// Noncompliant [myId]
// Secondary@+1 {{Wrong message}}
// Noncompliant
//                   ^ {{Correct one of the identical expressions on both sides of operator '=='.}}
//            ^ Secondary@-1
//                   ^ {{Correct one of the identical expressions on both sides of operator '=='.}}
//              ^^^^ Secondary@-1
// Secondary@+1
// Noncompliant
// Noncompliant {Wrong format message}
// Noncompliant (Another Wrong format message}
// Noncompliant [MyId0]
// Noncompliant
// Secondary [MyId1]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\IIssueLocation.cs
/*
/// <summary>
/// Gets the value specifying whether this issue is a location reported by a diagnostic.
/// </summary>
/// <summary>
/// Gets the 1-based line number in the source file.
/// </summary>
/// <summary>
/// Gets the issue message, as reported by the diagnostic analyzer.
/// </summary>
/// <summary>
/// Gets the id of the issue this location belongs to.
/// </summary>
/// <summary>
/// Gets the start of the issue span, or null when not specified and should not be checked.
/// </summary>
/// <summary>
/// Gets the length of the issue span, or null when not specified and should not be checked.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\IssueLocationCollector.cs
/*
/// <summary>
/// This class will look for specific patterns inside the unit test files being analyzed when testing a rule.
/// Here's a summary and examples of the different patterns that can be used to mark part of the code as noncompliant.
/// These patterns must appear after a single line comment ("//" or "'" token).
///
/// Simple 'Noncompliant' comment. Will mark the current line as expecting the primary location of an issue.
/// <code>
///     private void MyMethod() // Noncompliant
/// </code>
///
/// 'Secondary' location comment. Must be used together with a main primary location to mark the expected line of a
/// secondary location.
/// <code>
///     if (myCondition) // Noncompliant
///     {
///       var a = null; // Secondary
///     }
/// </code>
///
/// Using offsets. Using @[+-][0-9]+ after a 'Noncompliant' or 'Secondary' comment will mark the expected location to be
/// offset by the given number of lines.
/// <code>
///  private void MyMethod() // Noncompliant@+2 - issue is actually expected 2 lines after this comment
/// </code>
///
/// Checking the issue message. The message raised by the issue can be checked using the {{expected message}} pattern.
/// <code>
///     private void MyMethod() // Noncompliant {{Remove this unused private method}}
/// </code>
///
/// Checking the precise/exact location of an issue. Only one precise location or column location can be present
/// at one time. Precise location is used by adding '^^^^' comment under the location where the issue is expected.
/// The alternative column location pattern can be used by following the 'Noncompliant' or 'Secondary' comment
/// with '^X#Y' where 'X' is the expected start column and Y the length of the issue.
/// <code>
///     private void MyMethod() // Noncompliant
/// //  ^^^^^^^
/// </code>
/// <code>
///     private void MyMethod() // Noncompliant ^4#7
/// </code>
/// 
/// Multiple issues per line. To declare that multiple issues are expected, each issue must be assigned an id. All
/// secondary locations associated with an issue must have the same id. Note that it is not possible to have multiple
/// precise/column locations on a single line.
/// <code>
///     var a = null; // Noncompliant [myId2]
///     if (myCondition) // Noncompliant [myId1, myId3]
///     {
///       a = null; // Secondary [myId1, myId2]
///     }
/// </code>
///
/// Note that most of the previous patterns can be used together when needed.
/// <code>
///     private void MyMethod() // Noncompliant@+1 ^4#7 [MyIssueId] {{Remove this unused private method}}
/// </code>
/// <code>
/// </summary>
//|')";
/*for testing*/ IList<IIssueLocation> MergeLocations(IEnumerable<IssueLocation> locations, IEnumerable<IssueLocation> preciseLocations)
/*for testing*/ IEnumerable<IssueLocation> GetIssueLocations(TextLine line)
/*for testing*/ IEnumerable<IssueLocation> GetBuildErrorsLocations(TextLine line)
/*for testing*/ IEnumerable<IssueLocation> GetPreciseIssueLocations(TextLine line)
// We have a single issue without ID even if the group did not match
// there should be no Noncompliant comment
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\NugetMetadataFactory.cs
/*
// Get a package source provider that can use the settings
// Create an aggregate repository that uses all of the configured sources
/* ignore failing repos. Errors will be logged as warnings. */ );
// Check to see if the specific package is already installed
/// <summary>
/// Returns the list of folders containing installed versions of the specified package,
/// or an empty list if the package is not installed.
/// </summary>
/// <remarks>
/// Package directory names are in the form "{package id}.{package version}".
/// The list is sorted in ascending order, so the most recent version will be last.
/// </remarks>
// The package will be in a folder called "\packages\{packageId}.{version}", but:
// : the package might not be installed
// : there might be multiple versions installed
// : there might be a package that starts with the same package id
//      e.g. Microsoft.AspNetCore.Core and Microsoft.AspNetCore.Core.Diagnostics
// Most packages have a three-part version, but some have four. We don't check
// the actual number of parts, as long as there is at least one.
// The file containing the last-check timestamp is stored in folder of the
// latest version of the package.
// Explicitly specify the NuGet config to use to avoid being impacted by
// the NuGet config on the machine running the tests
// Install new nugets only once per day to improve the performance when running tests locally.
// We write a file with the timestamp of the last check in the package directory
// of the newest version of the package.
// If we can't find the package directory, we assume a check is required.
// If we can find an installation of the package but not the timestamp file, we assume a
// check is required (the package we found might be a specific older version that was installed
// by another test).
// Choosing one day to reduce the waiting time when a new version of the used nugets is
// released. If the waiting time when running tests locally is big we can increase.Annecy, France
// short date pattern
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\ParseOptionsHelper.cs
/*
// The static fields are dependent between them so the values cannot be set inline
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\ProjectBuilder.cs
/*
// This allows to deal with multiple line endings
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\SnippetCompiler.cs
/*
/// <summary>
/// Helper class compiles snippets of code on the fly
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\SolutionBuilder.cs
/*
// Need a reference to the VB dll to be able to use the Module keyword
// adding an extra file to the project
// this won't trigger any issues, but it keeps a reference to the original ParseOption, so
// if an analyzer/codefix changes the language version, Roslyn throws an ArgumentException
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\UnexpectedDiagnosticException.cs
/*
/// <summary>
/// This exception class is used in unit tests that analyze some code to report a violation.
/// It differs from classical unit test failure reporting in that it injects in its call
/// stack a location that correspond to the source file that is being analyzed (when analysing
/// inline code snippets, this location will be incorrect).
/// As a result, in the UI, we can just click on this line to directly open the right file at
/// the right place to see the actual issue.
/// </summary>
///
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\IssueLocationCollectorTests\IssueLocationCollector_GetExpectedBuildErrors.cs
/*
// Error [CS1234]
// Error@+1 [CS3456]
// Error [CS1234,CS2345,CS3456]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\IssueLocationCollectorTests\IssueLocationCollector_GetExpectedIssueLocations.cs
/*
// Noncompliant
// Noncompliant@+1
// Noncompliant
//              ^^^
//                         ^ Secondary@-1
// Noncompliant ^17#3
// Secondary@-1 ^28#1
// Noncompliant ^17#3
//              ^^^
// Noncompliant [myId1]
// Noncompliant [myId1]
// Is Noncompliant
// Noncompliant
//  issue is here   ^^^^^^
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\IssueLocationCollectorTests\IssueLocationCollector_GetIssueLocations.cs
/*
//Noncompliant [flow1,flow2]
//Noncompliant@-1 [flow1,flow2] {{Some message}}
//Noncompliant {{Some message}} [flow1,flow2]
//Noncompliant@-1
//Noncompliant [flow1,flow2] {{Some message}}
//Noncompliant {{Some message}}
//Noncompliant@=1
//Noncompliant [last,flow1,flow2]
//Noncompliant
//Secondary@-1 [flow1,flow2] {{Some message}}
//Noncompliant^5#7
//Secondary ^13#9 [myId]
//Noncompliant @-2 ^5#16 [myIssueId] {{MyMessage}}               
//Noncompliant@-2^5#16[myIssueId]{{MyMessage}}        
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\IssueLocationCollectorTests\IssueLocationCollector_GetPreciseIssueLocations.cs
/*
//          ^^^^^^^^^
//          ^^^^^^^^^ @-1
//          ^^^^^^^^^ Secondary
//          ^^^^^^^^^ Secondary@-1
//          ^^^^^^^^^ [flow1,flow2]
//          ^^^^^^^^^ Secondary [last1,flow1,flow2]
//          ^^^^^^^^^ [flow1,flow2] {{Some message}}
//          ^^^^^^^^^ Secondary [flow1,flow2] {{Some message}}
//          ^^^^^^^^^ {{Some message}}
//          ^^^^^^^^^ Secondary {{Some message}}
//      ^^^^^^^^^
//          ^^^^^^^^^ SecondaryNoncompliantSecondary {{Some message}}
//  ^^^^^^^ ^^^^^^^^^ ^
// there should be no Noncompliant comment
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/sonar-dotnet-master\sonar-dotnet-master\sonaranalyzer-dotnet\tests\SonarAnalyzer.UnitTest\TestFramework\IssueLocationCollectorTests\IssueLocationCollector_MergeLocations.cs
/*
// We take only Start and Length when merging precise location comments
