/// <summary>
/// 初始化配置
/// </summary>
//  注册IUserApi 配置其工厂
//localhost:9999/");
/// <summary>
/// 请求接口
/// </summary>
/// <returns></returns>
// Console.WriteLine(e.Progress);
/// <summary>
/// 用户操作接口
/// </summary>
//localhost:9999/")] // HttpHost可以在Config传入覆盖
// GET {url}?account={account}&password={password}&something={something}
// /GET webapi/user/GetById?id=id001
// Return HttpResponseMessage
// 10s超时
// GET webapi/user/GetByAccount?account=laojiu
// Return 原始string内容
// POST webapi/user/UpdateWithForm  
// Body Account=laojiu&Password=123456&name=value&nickName=老九&age=18
// Return json或xml内容
// 固定的参数值可以这么写
// POST webapi/user/UpdateWithJson
// Body {"Account":"laojiu","Password":"123456"}
// Return json或xml内容
// POST webapi/user/UpdateWithXml 
// Body <?xml version="1.0" encoding="utf-8"?><UserInfo><Account>laojiu</Account><Password>123456</Password></UserInfo>
// Return xml内容       
// POST webapi/user/UpdateWithMulitpart  
// Body multipart/form-data
// Return json或xml内容
/// <summary>
/// 下载文件
/// </summary>
/// <param name="uri">文件相对或绝对路径</param>
/// <returns></returns>
/// <summary>
/// 表示用户模型
/// </summary>
/// <summary>
/// 性别
/// </summary>
/// <summary>
/// 表示http服务器
/// </summary>
/// <summary>
/// http服务器
/// </summary>
/// <summary>
/// 启动Http服务
/// </summary>
/// <param name="port">服务端口</param>
/// <summary>
/// User控制器
/// </summary>
/// <summary>
/// 集合格式化方式
/// </summary>
/// <summary>
/// 逗号分隔
/// value1,value2
/// </summary>
/// <summary>
/// 空格分隔
/// value1 value2
/// </summary>
/// <summary>
/// 反斜杠分隔
/// value1\value2
/// </summary>
/// <summary>
/// 竖线分隔
/// value1|value2
/// </summary>
/// <summary>
/// 单属性可以取多个值
/// </summary>
/// <summary>
/// 提供一些日期时间格式模板
/// </summary>
/// <summary>
/// ISO8601精确到毫秒的日期时间格式
/// </summary>
/// <summary>
/// ISO8601精确到秒的日期时间格式
/// </summary>
/// <summary>
/// 获取本地的日期时间格式
/// ShortDate LongTime
/// </summary>
/// <summary>
/// 表示支持Dispose的抽象基础类
/// </summary>
/// <summary>
/// 获取对象是否已释放
/// </summary>
/// <summary>
/// 关闭和释放所有相关资源
/// </summary>
/// <summary>
/// 析构函数
/// </summary>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing">是否也释放托管资源</param>
/// <summary>
/// 提供项目相关扩展
/// </summary>
/// <summary>
/// 返回提供请求重试的请求任务对象
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <param name="task"></param>
/// <param name="maxCount">最大重试次数</param>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 返回提供请求重试的请求任务对象
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <param name="task"></param>
/// <param name="maxCount">最大重试次数</param>
/// <param name="delay">各次重试的延时时间</param>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 返回提供请求重试的请求任务对象
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <param name="task"></param>
/// <param name="maxCount">最大重试次数</param>
/// <param name="delay">各次重试的延时时间</param>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 返回提供异常处理请求任务对象
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <param name="task"></param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 当遇到异常时返回默认值
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <param name="task"></param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 当遇到异常时返回默认值
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <param name="task"></param>
/// <param name="handler">异常处理委托</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 转换为ITaskObservable对象
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <param name="task"></param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 转换为ITaskObservable对象
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <param name="task"></param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 提供项目相关扩展
/// </summary>
/// <summary>
/// 添加HttpApi代理类到服务
/// </summary>
/// <typeparam name="THttpApi"></typeparam>
/// <param name="services"></param>
/// <returns></returns>
/// <summary>
/// 添加HttpApi代理类到服务
/// </summary>
/// <typeparam name="THttpApi"></typeparam>
/// <param name="services"></param>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 添加HttpApi代理类到服务
/// </summary>
/// <typeparam name="THttpApi"></typeparam>
/// <param name="services"></param>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 合并选项到配置
/// </summary>
/// <typeparam name="THttpApi"></typeparam>
/// <param name="httpApiConfig"></param>
/// <param name="httpApiOptions"></param>
/// <summary>
/// 配置HttpApi
/// </summary>
/// <typeparam name="THttpApi"></typeparam>
/// <param name="services"></param>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 配置HttpApi
/// </summary>
/// <typeparam name="THttpApi"></typeparam>
/// <param name="services"></param>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 提供项目相关扩展
/// </summary>
/// <summary>
/// 添加HttpApi代理类到服务
/// </summary>
/// <param name="services"></param>
/// <param name="httpApiType"></param>
/// <returns></returns>
/// <summary>
/// 添加HttpApi代理类到服务
/// </summary>
/// <param name="services"></param>
/// <param name="httpApiType"></param>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 添加HttpApi代理类到服务
/// </summary>
/// <param name="services"></param>
/// <param name="httpApiType"></param>
/// <param name="configureOptions"></param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 配置HttpApi
/// </summary>
/// <param name="services"></param>
/// <param name="httpApiType"></param>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 配置HttpApi
/// </summary>
/// <param name="services"></param>
/// <param name="httpApiType"></param>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 定义httpApi的Builder的行为
/// </summary>
/// <summary>
/// 添加HttpApi代理类到服务
/// </summary>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 配置HttpApi
/// </summary>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 配置HttpApi
/// </summary>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// httpApi的Builder
/// </summary>
/// <typeparam name="THttpApi"></typeparam>
/// <summary>
/// httpApi的Builder
/// </summary>
/// <param name="services"></param>
/// <summary>
/// 添加HttpApi代理类到服务
/// </summary>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 配置HttpApi
/// </summary> 
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 配置HttpApi
/// </summary>
/// <param name="configureOptions"></param>
/// <returns></returns>
/// <summary>
/// 表示格式化选项
/// </summary>
/// <summary>
/// 日期时间格式
/// </summary>
/// <summary>
/// 获取或设置序列化时是否使用骆驼命名    
/// 默认为false
/// </summary>
/// <summary>
/// 获取或设置是否忽略null值属性的序列化
/// 默认为false
/// </summary>
/// <summary>
/// 获取或设置序列化DateTime类型使用的格式
/// 默认为本地日期时间格式
/// </summary>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 当datetimeFormat不为null且有变化时
/// 则克隆并使用新的datetimeFormat
/// </summary>
/// <param name="datetimeFormat">日期时间格式</param>
/// <returns></returns>
/// <summary>
/// 格式化时间为文本
/// </summary>
/// <param name="datetime">时间</param>
/// <returns></returns>
/// <summary>
/// 骆驼命名
/// </summary>
/// <param name="name">名称</param>
/// <returns></returns>
/// <summary>
/// 表示全局过滤器的集合
/// 全局过滤器执行优先级最高，执行顺序为添加的顺序
/// 非线程安全类型
/// </summary>
/// <summary>
/// 保存数据的列表
/// </summary>
/// <summary>
/// 全局过滤器的集合
/// </summary>
/// <summary>
/// 获取过滤器的数量
/// </summary>
/// <summary>
/// 添加全局过滤器
/// </summary>
/// <param name="item">全局过滤器</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 清除所有全局过滤器
/// </summary>
/// <summary>
/// 返回是否包含指定的全局过滤器
/// </summary>
/// <param name="item">全局过滤器</param>
/// <returns></returns>
/// <summary>
/// 删除指定的全局过滤器
/// </summary>
/// <param name="item">定的全局过滤器</param>
/// <returns></returns>
/// <summary>
/// 返回过滤器的迭代器
/// </summary>
/// <returns></returns>
/// <summary>
/// 获取是否是只读的
/// </summary>
/// <summary>
/// 复制到目前数组
/// </summary>
/// <param name="array"></param>
/// <param name="arrayIndex"></param>
/// <summary>
/// 获取迭代器
/// </summary>
/// <returns></returns>
/// <summary>
/// 提供HttpApi的创建、注册和解析   
/// </summary> 
/// <summary>
/// 获取拦截器
/// </summary>
/// <summary>
/// http接口代理类的基类
/// </summary>
/// <param name="apiInterceptor">拦截器</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 提供HttpApi的创建、注册和解析   
/// </summary>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing">是否也释放托管资源</param>
/// <summary>
/// 调试视图
/// </summary>
/// <summary>
/// 获取对象是否已释放
/// </summary>
/// <summary>
/// 获取拦截器
/// </summary>
/// <summary>
/// 调试视图
/// </summary>
/// <param name="httpApi">查看的对象</param>
/// <summary>
/// 提供HttpApi的创建、注册和解析   
/// </summary>
/// <summary>
/// 一个站点内的默认连接数限制
/// </summary>
/// <summary>
/// 获取或设置一个站点内的默认最大连接数
/// 这个值在初始化HttpClientHandler时使用
/// 默认值为128
/// </summary>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <summary>
/// 获取或设置安全协议版本
/// </summary>
/// <summary>
/// 静态构造函数
/// </summary>
/// <summary>
/// 调试视图
/// </summary>
/// <summary>
/// 获取或设置一个站点内的默认最大连接数      
/// </summary>
/// <summary>
/// 获取或设置安全协议版本
/// </summary>
/// <summary>
/// 提供HttpApi的创建、注册和解析   
/// </summary>
/// <summary>
/// 创建指定接口的代理实例
/// </summary>
/// <typeparam name="TInterface">接口类型</typeparam>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="TypeLoadException"></exception>
/// <returns></returns>
/// <summary>
/// 创建指定接口的代理实例
/// </summary>
/// <typeparam name="TInterface">接口类型</typeparam>
/// <param name="httpHost">Http服务完整主机域名，如http://www.webapiclient.com</param>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="UriFormatException"></exception>
/// <exception cref="TypeLoadException"></exception>
/// <returns></returns>
/// <summary>
/// 创建指定接口的代理实例
/// </summary>
/// <typeparam name="TInterface">接口类型</typeparam>
/// <param name="httpApiConfig">接口配置</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="TypeLoadException"></exception>
/// <returns></returns>
/// <summary>
/// 创建指定接口的代理实例
/// 该代理实例派生于HttpApi类型
/// </summary>
/// <param name="interfaceType">请求接口类型</param>
/// <param name="httpApiConfig">接口配置</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="TypeLoadException"></exception>
/// <returns></returns>
/// <summary>
/// 创建指定接口的代理实例
/// 该代理实例派生于HttpApi类型
/// </summary>
/// <param name="interfaceType">请求接口类型</param>
/// <param name="apiInterceptor">http接口调用拦截器</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="TypeLoadException"></exception>
/// <returns></returns>
/// <summary>
/// 提供HttpApi的创建、注册和解析   
/// </summary>
/// <summary>
/// 工厂字典
/// </summary>
/// <summary>
/// 注册指定Api以及其工厂
/// 返回Api工厂实例
/// </summary>
/// <typeparam name="TInterface"></typeparam>
/// <exception cref="InvalidOperationException"></exception>
/// <returns></returns>
/// <summary>
/// 注册指定Api以及其工厂
/// 返回Api工厂实例
/// </summary>
/// <typeparam name="TInterface"></typeparam>
/// <param name="name">工厂名称</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="InvalidOperationException"></exception>
/// <returns></returns>
/// <summary>
/// 注册指定Api以及其工厂
/// 返回Api工厂实例
/// </summary>
/// <param name="name">工厂名称</param>
/// <param name="interfaceType">api接口类型</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="InvalidOperationException"></exception>
/// <returns></returns>
/// <summary>
/// 注册指定Api工厂
/// </summary>
/// <typeparam name="THttpApiFactory"></typeparam>    
/// <param name="httpApiFactory">工厂实例</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="InvalidOperationException"></exception>
/// <returns></returns>
/// <summary>
/// 注册指定Api工厂
/// </summary>
/// <typeparam name="THttpApiFactory"></typeparam>
/// <param name="httpApiFactory">工厂实例</param>
/// <param name="name">工厂名称</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="InvalidOperationException"></exception>
/// <returns></returns>
/// <summary>
/// 解析出指定Api的代理实例
/// 不能将该实例作全局变量引用
/// </summary>
/// <typeparam name="TInterface"></typeparam>
/// <exception cref="InvalidOperationException"></exception>
/// <returns></returns>
/// <summary>
/// 根据工厂名解析出其Api的代理实例
/// 不能将该实例作全局变量引用
/// </summary>
/// <typeparam name="TInterface"></typeparam>
/// <param name="name">工厂名称</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="InvalidOperationException"></exception>
/// <returns></returns>
/// <summary>
/// 根据工厂名解析出其Api的代理实例
/// 不能将该实例作全局变量引用
/// </summary>
/// <param name="name">工厂名称</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="InvalidOperationException"></exception>
/// <returns></returns>
/// <summary>
/// 返回类型的工厂名称
/// </summary>
/// <param name="interfaceType">接口类型</param>
/// <returns></returns>
/// <summary>
/// 表示Http接口的配置项
/// </summary>
/// <summary>
/// 与HttpClient关联的IHttpHandler
/// </summary>
/// <summary>
/// 直接赋值的日志工厂
/// </summary>
/// <summary>
/// 格式选项
/// </summary>
/// <summary>
/// xml序列化工具
/// </summary>
/// <summary>
/// json序列化工具
/// </summary>
/// <summary>
/// key-value序列化工具
/// </summary>
/// <summary>
/// 获取HttpClient实例
/// </summary>
/// <summary>
/// 获取配置的自定义数据的存储和访问容器
/// </summary>
/// <summary>
/// 获取与HttpClient关联的IHttpHandler
/// </summary>
/// <exception cref="PlatformNotSupportedException"></exception>
/// <summary>
/// 获取全局过滤器集合
/// 非线程安全类型
/// </summary>
/// <summary>
/// 获取或设置是否对参数的属性值进行输入有效性验证
/// 默认为true
/// </summary>
/// <summary>
/// 获取或设置是否对返回值的属性值进行输入有效性验证
/// 默认为true
/// </summary>
/// <summary>
/// 获取或设置Api的缓存提供者
/// </summary>
/// <summary>
/// 获取或设置服务提供者
/// </summary>
/// <summary>
/// 获取或设置统一日志工厂
/// 默认从ServiceProvider获取实例 
/// </summary>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 获取或设置Http服务完整主机域名
/// 例如http://www.webapiclient.com
/// 设置了HttpHost值，HttpHostAttribute将失效  
/// </summary>
/// <exception cref="ArgumentException"></exception>
/// <summary>
/// 获取或设置请求时序列化使用的默认格式   
/// 影响JsonFormatter或KeyValueFormatter的序列化   
/// </summary>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 获取或设置Xml格式化工具
/// </summary>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 获取或设置Json格式化工具
/// </summary>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 获取或设置KeyValue格式化工具
/// </summary>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// Http接口的配置项   
/// </summary>
/// <summary>
/// Http接口的配置项   
/// </summary>
/// <param name="handler">HTTP消息处理程序</param>
/// <param name="disposeHandler">用Dispose方法时，是否也Dispose handler</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// Http接口的配置项
/// </summary>
/// <param name="httpClient">外部HttpClient实例</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing">是否也释放托管资源</param>
/// <summary>
/// 表示HttpApi创建工厂
/// 提供HttpApi的配置注册和实例创建
/// 并对实例的生命周期进行自动管理
/// </summary>
/// <summary>
/// 具有生命周期的httpHandler延时创建对象
/// </summary>
/// <summary>
/// HttpHandler清理器
/// </summary>
/// <summary>
/// cookie容器
/// </summary>
/// <summary>
/// 是否保持cookie容器
/// </summary>
/// <summary>
/// 生命周期
/// </summary>
/// <summary>
/// HttpApiConfig的配置委托
/// </summary>
/// <summary>
/// HttpMessageHandler的创建委托
/// </summary>
/// <summary>
/// 获取接口类型
/// </summary>
/// <summary>
/// HttpApi创建工厂
/// </summary>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <param name="interfaceType">接口类型</param>
/// <summary>
/// 创建LifetimeHttpHandler
/// </summary>
/// <returns></returns>
/// <summary>
/// 当有httpHandler失效时
/// </summary>
/// <param name="handler">httpHandler</param>
// 切换激活状态的记录的实例
/// <summary>
/// 设置HttpApi实例的生命周期
/// </summary>
/// <param name="lifeTime">生命周期</param>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <returns></returns>
/// <summary>
/// 设置清理过期的HttpApi实例的时间间隔
/// </summary>
/// <param name="interval">时间间隔</param>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <returns></returns>
/// <summary>
/// 设置是否维护使用一个CookieContainer实例
/// 该实例为首次创建时的CookieContainer
/// </summary>
/// <param name="keep">true维护使用一个CookieContainer实例</param>
/// <exception cref="PlatformNotSupportedException"></exception>
/// <returns></returns>
/// <summary>
/// 配置HttpMessageHandler的创建
/// </summary>
/// <param name="factory">创建委托</param>
/// <returns></returns>
/// <summary>
/// 配置HttpApiConfig
/// </summary>
/// <param name="options">配置委托</param>
/// <returns></returns>
/// <summary>
/// 创建接口的代理实例
/// </summary>
/// <returns></returns>
/// <summary>
/// 创建TInterface接口的代理实例
/// </summary>
/// <param name="httpApiConfig">httpApi配置</param>
/// <returns></returns>
/// <summary>
/// 配置HttpMessageHandler的创建
/// </summary>
/// <param name="factory">创建委托</param>
/// <summary>
/// 配置HttpApiConfig
/// </summary>
/// <param name="options">配置委托</param>
/// <summary>
/// 表示HttpApi创建工厂
/// 提供HttpApi的配置注册和实例创建
/// 并对实例的生命周期进行自动管理
/// </summary>
/// <summary>
/// HttpApi创建工厂
/// </summary>
/// <summary>
/// 创建HttpApi代理实例
/// </summary>
/// <returns></returns>
/// <summary>
/// 设置HttpApi实例的生命周期
/// </summary>
/// <param name="lifeTime">生命周期</param>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <returns></returns>
/// <summary>
/// 设置清理过期的HttpApi实例的时间间隔
/// </summary>
/// <param name="interval">时间间隔</param>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <returns></returns>
/// <summary>
/// 设置是否维护使用一个CookieContainer实例
/// 该实例为首次创建时的CookieContainer
/// </summary>
/// <param name="keep">true维护使用一个CookieContainer实例</param>
/// <exception cref="PlatformNotSupportedException"></exception>
/// <returns></returns>
/// <summary>
/// 配置HttpMessageHandler的创建
/// </summary>
/// <param name="factory">创建委托</param>
/// <returns></returns>
/// <summary>
/// 配置HttpApiConfig
/// </summary>
/// <param name="options">配置委托</param>
/// <returns></returns>
/// <summary>
/// 表示HttpApi选项
/// </summary>
/// <summary>
/// 获取或设置是否对参数的属性值进行输入有效性验证
/// </summary>
/// <summary>
/// 获取或设置是否对返回值的属性值进行输入有效性验证
/// </summary>
/// <summary>
/// 获取或设置Http服务完整主机域名
/// 例如http://www.webapiclient.com
/// 设置了HttpHost值，HttpHostAttribute将失效  
/// </summary>
/// <summary>
/// 获取或设置请求时序列化使用的默认格式   
/// 影响JsonFormatter或KeyValueFormatter的序列化   
/// </summary>
/// <summary>
/// 获取或设置Xml格式化工具
/// </summary>
/// <summary>
/// 获取或设置Json格式化工具
/// </summary>
/// <summary>
/// 获取或设置KeyValue格式化工具
/// </summary>
/// <summary>
/// 获取或设置Api的缓存提供者
/// </summary>
/// <summary>
/// 表示HttpApi选项
/// </summary>
/// <typeparam name="THttpApi"></typeparam>
/// <summary>
/// 表示httpApi的请求消息
/// </summary>
/// <summary>
/// 程序集版本信息
/// </summary>
/// <summary>
/// 默认的UserAgent
/// </summary>
/// <summary>
/// httpApi的请求消息
/// </summary>
/// <summary>
/// 追加Query参数到请求路径
/// </summary>
/// <param name="keyValue">参数</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 追加Query参数到请求路径
/// </summary>
/// <param name="keyValue">参数</param>
/// <param name="encoding">编码</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 追加Query参数到请求路径
/// </summary>
/// <param name="keyValue">参数</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 追加Query参数到请求路径
/// </summary>
/// <param name="keyValue">参数</param>
/// <param name="encoding">编码</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 追加Query参数到请求路径
/// </summary>
/// <param name="key">参数名</param>
/// <param name="value">参数值</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 追加Query参数到请求路径
/// </summary>
/// <param name="key">参数名</param>
/// <param name="value">参数值</param>
/// <param name="encoding">编码</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 添加字段到已有的Content
/// 要求content-type为application/x-www-form-urlencoded
/// </summary>
/// <param name="name">名称</param>
/// <param name="value">值</param>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 添加字段到已有的Content
/// 要求content-type为application/x-www-form-urlencoded
/// </summary>
/// <param name="keyValues">键值对</param>
/// <exception cref="NotSupportedException"></exception>
/// <returns></returns>
/// <summary>
/// 添加文件内容到已有的Content
/// 要求content-type为multipart/form-data
/// </summary>
/// <param name="stream">文件流</param>
/// <param name="name">名称</param>
/// <param name="fileName">文件名</param>
/// <param name="contentType">文件Mime</param>
/// <exception cref="NotSupportedException"></exception>
/// <summary>
/// 添加文本内容到已有的Content
/// 要求content-type为multipart/form-data
/// </summary>     
/// <param name="keyValues">键值对</param>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 添加文本内容到已有的Content
/// 要求content-type为multipart/form-data
/// </summary>     
/// <param name="name">名称</param>
/// <param name="value">文本</param>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 添加文本内容到已有的Content
/// 要求content-type为multipart/form-data
/// </summary>     
/// <param name="name">名称</param>
/// <param name="value">文本</param>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 转换为MultipartContent
/// 为null则返回MultipartContent的实例
/// </summary>
/// <exception cref="NotSupportedException"></exception>
/// <returns></returns>
/// <summary>
/// 确保前后的mediaType一致
/// </summary>
/// <param name="newMediaType">新的MediaType</param>
/// <exception cref="NotSupportedException"></exception>
/// <summary>
/// 确保不是Get或Head请求
/// 返回关联的HttpContent对象
/// </summary>
/// <exception cref="NotSupportedException"></exception>
/// <summary>
/// 返回请求头数据
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回请求数据
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回请求头数据
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示http代理信息
/// </summary>
/// <summary>
/// 授权字段
/// </summary>
/// <summary>
/// 获取代理服务器域名或ip
/// </summary>
/// <summary>
/// 获取代理服务器端口
/// </summary>
/// <summary>
/// 获取代理服务器账号
/// </summary>
/// <summary>
/// 获取代理服务器密码
/// </summary>
/// <summary>
/// 获取或设置授权信息
/// </summary>
/// <summary>
/// http代理信息
/// </summary>
/// <param name="proxyAddress">代理服务器地址</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <exception cref="UriFormatException"></exception>
/// <summary>
/// http代理信息
/// </summary>
/// <param name="proxyAddress">代理服务器地址</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// http代理信息
/// </summary>
/// <param name="host">代理服务器域名或ip</param>
/// <param name="port">代理服务器端口</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// http代理信息
/// </summary>
/// <param name="host">代理服务器域名或ip</param>
/// <param name="port">代理服务器端口</param>
/// <param name="userName">代理服务器账号</param>
/// <param name="password">代理服务器密码</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 通过接口设置授权信息
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 转换Http Tunnel请求字符串
/// </summary>      
/// <param name="targetAddress">目标url地址</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/*{CRLF}")
/// <summary>
/// 获取代理服务器地址
/// </summary>
/// <param name="destination">目标地址</param>
/// <returns></returns>
/// <summary>
/// 是否忽略代理
/// </summary>
/// <param name="host">目标地址</param>
/// <returns></returns>
/// <summary>
/// 转换为字符串
/// </summary>
/// <returns></returns>
//{this.Host}:{this.Port}/";
/// <summary>
/// 获取哈希值
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回和obj是否相等
/// </summary>
/// <param name="obj"></param>
/// <returns></returns>
/// <summary>
/// 转换为代理验证器
/// </summary>
/// <returns></returns>
/// <summary>
/// 从IWebProxy实例转换获得
/// </summary>
/// <param name="webProxy">IWebProxy</param>
/// <param name="targetAddress">目标url地址</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 指定ip范围构建http代理服务
/// </summary>
/// <param name="start">代理服务器起始ip</param>
/// <param name="port">代理服务器端口</param>
/// <param name="count">ip数量</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 返回ip范围
/// </summary>
/// <param name="start">起始ip</param>
/// <param name="count">ip数量</param>
/// <returns></returns>
/// <summary>
/// ip转换为int
/// </summary>
/// <param name="ip"></param>
/// <returns></returns>
/// <summary>
/// int转换为ip
/// </summary>
/// <param name="value">值</param>
/// <returns></returns>
/// <summary>
/// 比较两个代理是否等效
/// </summary>
/// <param name="x"></param>
/// <param name="y"></param>
/// <returns></returns>
//www.webapiclient.com");
/// <summary>
/// 可以在客户端请求中指定的 HTTP 标头
/// </summary>
/// <summary>
/// Cache-Control 标头，指定请求/响应链上所有缓存控制机制必须服从的指令
/// </summary>
/// <summary>
/// Connection 标头，指定特定连接需要的选项
/// </summary>
/// <summary>
/// Date 标头，指定开始创建请求的日期和时间
/// </summary>
/// <summary>
/// Keep-Alive 标头，指定用以维护持久性连接的参数
/// </summary>
/// <summary>
///  Pragma 标头，指定可应用于请求/响应链上的任何代理的特定于实现的指令
/// </summary>
/// <summary>
/// Trailer 标头，指定标头字段显示在以 chunked 传输编码方式编码的消息的尾部
/// </summary>
/// <summary>
/// Transfer-Encoding 标头，指定对消息正文应用的转换的类型（如果有）
/// </summary>
/// <summary>
/// Upgrade 标头，指定客户端支持的附加通信协议
/// </summary>
/// <summary>
/// Via 标头，指定网关和代理程序要使用的中间协议
/// </summary>
/// <summary>
/// Warning 标头，指定关于可能未在消息中反映的消息的状态或转换的附加信息
/// </summary>
/// <summary>
/// Allow 标头，指定支持的 HTTP 方法集
/// </summary>
/// <summary>
/// Content-Length 标头，指定伴随正文数据的长度（以字节为单位）
/// </summary>
/// <summary>
/// Content-Type 标头，指定伴随正文数据的 MIME 类型
/// </summary>
/// <summary>
/// Content-Encoding 标头，指定已应用于伴随正文数据的编码
/// </summary>
/// <summary>
/// Content-Language 标头，指定伴随正文数据的自然语言
/// </summary>
/// <summary>
/// Content-Location 标头，指定可从其中获得伴随正文的 URI
/// </summary>
/// <summary>
/// Content-MD5 标头，指定伴随正文数据的 MD5 摘要，用于提供端到端消息完整性检查
/// </summary>
/// <summary>
/// Content-Range 标头，指定在完整正文中应用伴随部分正文数据的位置
/// </summary>
/// <summary>
///  Expires 标头，指定日期和时间，在此之后伴随的正文数据应视为陈旧的
/// </summary>
/// <summary>
/// Last-Modified 标头，指定上次修改伴随的正文数据的日期和时间
/// </summary>
/// <summary>
/// Accept 标头，指定响应可接受的 MIME 类型
/// </summary>
/// <summary>
/// Accept-Charset 标头，指定响应可接受的字符集
/// </summary>
/// <summary>
/// Accept-Encoding 标头，指定响应可接受的内容编码
/// </summary>
/// <summary>
/// Accept-Language 标头，指定响应首选的自然语言
/// </summary>
/// <summary>
/// Authorization 标头，指定客户端为向服务器验证自身身份而出示的凭据
/// </summary>
/// <summary>
/// Cookie 标头，指定向服务器提供的 Cookie 数据
/// </summary>
/// <summary>
/// Expect 标头，指定客户端要求的特定服务器行为
/// </summary>
/// <summary>
/// From 标头，指定控制请求用户代理的用户的 Internet 电子邮件地址
/// </summary>
/// <summary>
/// Host 标头，指定所请求资源的主机名和端口号
/// </summary>
/// <summary>
/// If-Match 标头，指定仅当客户端的指示资源的缓存副本是最新的时，才执行请求的操作
/// </summary>
/// <summary>
/// If-Modified-Since 标头，指定仅当自指示的数据和时间之后修改了请求的资源时，才执行请求的操作
/// </summary>
/// <summary>
/// If-None-Match 标头，指定仅当客户端的指示资源的缓存副本都不是最新的时，才执行请求的操作
/// </summary>
/// <summary>
/// If-Range 标头，指定如果客户端的缓存副本是最新的，仅发送指定范围的请求资源
/// </summary>
/// <summary>
/// If-Unmodified-Since 标头，指定仅当自指示的日期和时间之后修改了请求的资源时，才执行请求的操作
/// </summary>
/// <summary>
/// Max-Forwards 标头，指定一个整数，表示此请求还可转发的次数
/// </summary>
/// <summary>
/// Proxy-Authorization 标头，指定客户端为向代理验证自身身份而出示的凭据
/// </summary>
/// <summary>
/// Referer 标头，指定从中获得请求 URI 的资源的 URI
/// </summary>
/// <summary>
/// Range 标头，指定代替整个响应返回的客户端请求的响应的子范围
/// </summary>
/// <summary>
/// TE 标头，指定响应可接受的传输编码方式
/// </summary>
/// <summary>
/// Translate 标头，与 WebDAV 功能一起使用的 HTTP 规范的 Microsoft 扩展
/// </summary>
/// <summary>
/// User-Agent 标头，指定有关客户端代理的信息
/// </summary>
/// <summary>
/// 表示Http响应的文件
/// 可以声明为接口的返回类型
/// </summary>
/// <summary>
/// 下载进度变化事件
/// </summary>
/// <summary>
/// 获取响应的友好文件名称
/// </summary>
/// <summary>
/// 获取文件的大小
/// </summary>
/// <summary>
/// 获取文件类型
/// </summary>
/// <summary>
/// Http响应的文件
/// </summary>
/// <param name="response">响应消息</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 保存到指定路径
/// </summary>
/// <param name="filePath">文件路径和文件名</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 保存到指定路径
/// </summary>
/// <param name="filePath">文件路径和文件名</param>
/// <param name="cancellationToken">取消令牌</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="OperationCanceledException"></exception>
/// <returns></returns>
/// <summary>
/// 保存到目标流
/// </summary>
/// <param name="stream">流</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <returns></returns>
/// <summary>
/// 保存到目标流
/// </summary>
/// <param name="stream">流</param>
/// <param name="cancellationToken">取消令牌</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="OperationCanceledException"></exception>
/// <returns></returns>
/// <summary>
/// 表示http响应包装器抽象类
/// 其子类可以声明为接口的返回类型
/// </summary>
/// <summary>
/// 获取响应消息
/// </summary>
/// <summary>
/// http响应包装器抽象类
/// </summary>
/// <param name="httpResponse">响应消息</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 定义ApiAction修饰特性的行为
/// </summary>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 定义ApiAction缓存修饰特性的行为
/// </summary>
/// <summary>
/// 获取缓存的时间戳
/// </summary>
/// <summary>
/// 返回请求对应的缓存的键
/// 该键用于读取或写入缓存到缓存提供者
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 定义ApiAction缓存的策略
/// </summary>
/// <summary>
/// 返回读取缓存的策略       
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 返回写入缓存的策略
/// </summary>
/// <param name="context"></param>
/// <returns></returns>
/// <summary>
/// 缓存策略
/// </summary>
/// <summary>
/// 尝试使用缓存
/// </summary>
/// <summary>
/// 忽略并跳过缓存
/// </summary>
/// <summary>
/// 定义ApiAction过滤器的行为
/// </summary>
/// <summary>
/// 准备请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 请求完成之后
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 定义ApiAction过滤器修饰特性的行为
/// </summary>
/// <summary>
/// 定义http接口拦截器的行为
/// </summary>
/// <summary>
/// 拦截方法的调用
/// </summary>
/// <param name="target">接口的实例</param>
/// <param name="method">接口的方法</param>
/// <param name="parameters">接口的参数集合</param>
/// <returns></returns>
/// <summary>
/// 定义自身可以做为参数并进行相应处理的对象的行为
/// 此对象作为参数时，不需要特性修饰
/// </summary>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <returns></returns>
/// <summary>
/// 定义Api参数修饰特性的行为
/// </summary>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <returns></returns>
/// <summary>
/// 定义回复内容处理特性的行为
/// </summary>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 执行后获取异步结果
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 定义特性是否允许在接口与方法上重复声明
/// 如果不允许则优先选取方法上的特性
/// </summary>
/// <summary>
/// 获取顺序排序的索引
/// </summary>
/// <summary>
/// 获取本类型是否允许在接口与方法上重复
/// </summary>
/// <summary>
/// 定义异常处理的行为
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <summary>
/// 当捕获到异常时返回指定结果
/// </summary>
/// <typeparam name="TException"></typeparam>
/// <param name="func">获取结果</param>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时返回指定结果
/// </summary>
/// <typeparam name="TException"></typeparam>
/// <param name="func">获取结果</param>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时返回指定结果
/// </summary>
/// <typeparam name="TException"></typeparam>
/// <param name="func">获取结果</param>
/// <returns></returns>
/// <summary>
/// 定义HttpApi接口的基础接口
/// 要求所有HttpApi接口都继承此接口
/// </summary>
/// <summary>
/// 定义HttpApiFactory的接口
/// </summary>
/// <summary>
/// 获取接口类型
/// </summary>
/// <summary>
/// 创建接口的代理实例
/// </summary>
/// <returns></returns>
/// <summary>
/// 配置HttpApiConfig
/// </summary>
/// <param name="options">配置委托</param>
/// <summary>
/// 配置HttpMessageHandler的创建
/// </summary>
/// <param name="factory">创建委托</param>
/// <summary>
/// 定义HttpApi工厂的接口
/// </summary>
/// <typeparam name="TInterface"></typeparam>
/// <summary>
/// 创建接口的代理实例
/// </summary>
/// <returns></returns>
/// <summary>
/// 定义HttpClient的处理程序的接口
/// </summary>
/// <summary>
/// 获取原始的Handler对象
/// </summary>
/// <summary>
/// 获取或设置是否使用CookieContainer来管理Cookies
/// </summary>
/// <summary>
/// 获取是否支持重定向设置
/// </summary>
/// <summary>
/// 获取是否支持代理
/// </summary>
/// <summary>
/// 获取是否支持压缩传输
/// </summary>
/// <summary>
/// 获取或设置代理
/// </summary>
/// <summary>
/// 获取或设置是否对请求进行预身份验证
/// </summary>
/// <summary>
/// 获取或设置每个响应的最大重定向次数
/// </summary>
/// <summary>
/// 获取或设置最大请求内容字节长度
/// </summary>
/// <summary>
/// 获取或设置凭证信息
/// </summary>
/// <summary>
/// 获取或设置Cookie管理容器
/// </summary>
/// <summary>
/// 获取或设置客户端证书选项
/// </summary>
/// <summary>
/// 获取或设置压缩方式
/// </summary>
/// <summary>
/// 获取或设置是否支持自动重定向
/// </summary>
/// <summary>
/// 获取或设置是否使用默认的凭证信息
/// </summary>
/// <summary>
/// 获取或设置是否使用代理
/// </summary>
/// <summary>
/// 获取或设置SSL版本
/// </summary>
/// <summary>
/// 获取或设置默认代理凭证
/// </summary>
/// <summary>
/// 获取或设置是否验证撤销的证书
/// </summary>
/// <summary>
/// 获取或设置证书列表
/// </summary>
/// <summary>
/// 获取或设置每个服务器的最大连接数
/// </summary>
/// <summary>
/// 获取或设置最大响应头的字节长度
/// </summary>
/// <summary>
/// 设置服务器证书验证委托
/// </summary>
/// <summary>
/// 定义json序列化/反序列化的行为
/// </summary>
/// <summary>
/// 将对象序列化为json文本
/// </summary>
/// <param name="obj">对象</param>
/// <param name="options">选项</param>
/// <returns></returns>
/// <summary>
/// 将json文本反序列化对象
/// </summary>
/// <param name="json">json文本内容</param>
/// <param name="objType">对象类型</param>
/// <returns></returns>
/// <summary>
/// 定义将对象转换为键值对的行为
/// </summary>
/// <summary>
/// 序列化对象为键值对
/// </summary>
/// <param name="name">对象名称</param>
/// <param name="obj">对象实例</param>
/// <param name="options">选项</param>
/// <returns></returns>
/// <summary>
/// 序列化参数为键值对
/// </summary>
/// <param name="parameter">参数</param>
/// <param name="options">选项</param>
/// <returns></returns>
/// <summary>
/// 定义Api响应结果缓存提供者的接口
/// </summary>
/// <summary>
/// 获取提供者的友好名称
/// </summary>
/// <summary>
/// 从缓存中获取响应实体
/// </summary>
/// <param name="key">键</param>
/// <returns></returns>
/// <summary>
/// 设置响应实体到缓存
/// </summary>
/// <param name="key">键</param>
/// <param name="entry">缓存实体</param>
/// <param name="expiration">有效时间</param>
/// <returns></returns>
/// <summary>
/// 定义重试的行为
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <summary>
/// 当捕获到异常时进行Retry
/// </summary>
/// <typeparam name="TException">异常类型</typeparam>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时进行Retry
/// </summary>
/// <typeparam name="TException">异常类型</typeparam>
/// <param name="handler">捕获到指定异常时</param>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时进行Retry
/// </summary>
/// <typeparam name="TException">异常类型</typeparam>
/// <param name="predicate">返回true才Retry</param>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时进行Retry
/// </summary>
/// <typeparam name="TException">异常类型</typeparam>
/// <param name="handler">捕获到指定异常时</param>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时进行Retry
/// </summary>
/// <typeparam name="TException">异常类型</typeparam>
/// <param name="predicate">返回true才Retry</param>
/// <returns></returns>
/// <summary>
/// 当结果符合条件时进行Retry
/// </summary>
/// <param name="predicate">条件</param>
/// <returns></returns>
/// <summary>
/// 当结果符合条件时进行Retry
/// </summary>
/// <param name="predicate">条件</param>
/// <returns></returns>
/// <summary>
/// 定义返回结果的行为
/// </summary>
/// <summary>
/// 创建请求任务
/// </summary>
/// <returns></returns>
/// <summary>
/// 定义返回结果的行为
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <summary>
/// 创建请求任务
/// </summary>
/// <returns></returns>
/// <summary>
/// 调用InvokeAsync
/// 并返回其TaskAwaiter对象
/// </summary>
/// <returns></returns>
/// <summary>
/// 配置用于等待的等待者
/// </summary>
/// <param name="continueOnCapturedContext">试图继续回夺取的原始上下文，则为 true；否则为 false</param>
/// <returns></returns>
/// <summary>
/// 定义支持观察的任务的行为
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <summary>
/// 订阅
/// </summary>
/// <param name="onResult">收到结果委托</param>
/// <param name="onError">遇到错误委托</param>
/// <returns></returns>
/// <summary>
/// 定义xml序列化/反序列化的行为
/// </summary>
/// <summary>
/// 将对象序列化为xml文本
/// </summary>
/// <param name="obj">对象</param>
/// <param name="encoding">编码</param>
/// <returns></returns>
/// <summary>
/// 将xml文本反序列化对象
/// </summary>
/// <param name="xml">xml文本内容</param>
/// <param name="objType">对象类型</param>
/// <returns></returns>
/// <summary>
/// 表示Json字符串
/// 该字符串为Value对象的json文本
/// </summary>
/// <typeparam name="T"></typeparam>
/// <summary>
/// 获取类型值
/// </summary>
/// <summary>
/// 获取类型值
/// </summary>
/// <summary>
/// Json字符串
/// </summary>
/// <param name="value">字符串对应的类型值</param>
/// <summary>
/// T类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 类型隐式转换为T
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 表示上传或下载进度
/// </summary>
/// <summary>
/// 获取当前完成的字节数
/// </summary>
/// <summary>
/// 获取总字节数
/// </summary>
/// <summary>
/// 获取是否已完成
/// </summary>
/// <summary>
/// 获取当前进度
/// </summary>
/// <summary>
/// 上传或下载进度
/// </summary>
/// <param name="current">当前完成的字节数</param>
/// <param name="total">总字节数</param>
/// <param name="isCompleted">是否已完成</param>
/// <summary>
/// 转换为字符串
/// </summary>
/// <returns></returns>
/// <summary>
/// 代理验证器
/// 提供代理的验证
/// </summary>
/// <summary>
/// 获取代理
/// </summary>
/// <summary>
/// 代理验证器
/// </summary>
/// <param name="proxyHost">代理服务器域名或ip</param>
/// <param name="proxyPort">代理服务器端口</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 代理验证器
/// </summary>
/// <param name="webProxy">代理</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 使用http tunnel检测代理状态
/// </summary>
/// <param name="targetAddress">目标地址，可以是http或https</param>
/// <param name="timeout">发送或等待数据的超时时间</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 使用http tunnel检测代理状态
/// </summary>
/// <param name="targetAddress">目标地址，可以是http或https</param>
/// <param name="timeout">连接或等待数据的超时时间</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 转换为字符串
/// </summary>
/// <returns></returns>
/// <summary>
/// 使用http tunnel检测代理状态
/// </summary>
/// <param name="webProxy">web代理</param>      
/// <param name="targetAddress">目标地址，可以是http或https</param>
/// <param name="timeout">发送或等待数据的超时时间</param>
/// <exception cref="ArgumentNullException"></exception>    
/// <returns></returns>
/// <summary>
/// 使用http tunnel检测代理状态
/// </summary>
/// <param name="webProxy">web代理</param>      
/// <param name="targetAddress">目标地址，可以是http或https</param>
/// <param name="timeout">连接或等待数据的超时时间</param>
/// <exception cref="ArgumentNullException"></exception>    
/// <returns></returns>
/// <summary>
/// IWebProxy转换为HttpProxy
/// </summary>
/// <param name="webProxy"></param>
/// <param name="targetAddress"></param>
/// <returns></returns>
/// <summary>
/// 解析响应的状态码
/// </summary>
/// <param name="buffer"></param>
/// <param name="length"></param>
/// <returns></returns>
/// <summary>
/// 表示要缓存的响应实体
/// </summary>
/// <summary>
/// 获取或设置版本号
/// </summary>
/// <summary>
/// 获取或设置状态码
/// </summary>
/// <summary>
/// 获取或设置状态说明
/// </summary>
/// <summary>
/// 获取或设置请求头
/// </summary>
/// <summary>
/// 获取或设置内容的请求头
/// </summary>
/// <summary>
/// 获取或设置响应内容
/// </summary>
/// <summary>
/// 转换为HttpResponseMessage
/// </summary>
/// <param name="requestMessage">请求信息</param>
/// <param name="cacheProviderName">缓存提供者名</param>
/// <returns></returns>
/// <summary>
/// 从HttpResponseMessage转换得到
/// </summary>
/// <param name="responseMessage">响应消息</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 表示响应缓存结果
/// </summary>
/// <summary>
/// 表示无Value的缓存结果 
/// </summary>
/// <summary>
/// 获取缓存的值
/// </summary>
/// <summary>
/// 获取是否有缓存的值
/// </summary>
/// <summary>
/// 响应缓存结果
/// </summary>
/// <param name="value">缓存的值</param>
/// <param name="hasValue">是否有缓存的值</param>
/// <summary>
/// 表示Tags的一个数据项
/// </summary>
/// <summary>
/// 获取值
/// </summary>
/// <summary>
/// 获取是否有值
/// </summary>
/// <summary>
/// 获取值是否为NULL
/// </summary>
/// <summary>
/// 获取没有值的TagItem
/// </summary>
/// <summary>
/// 创建有值的数据项
/// </summary>
/// <param name="value">数据</param>
/// <summary>
/// 强制转换为指定类型
/// 为null则返回目标类型的默认值
/// </summary>
/// <typeparam name="T">指定类型</typeparam>
/// <returns></returns>
/// <summary>
/// 将值强制转换为指定类型
/// </summary>
/// <typeparam name="T">指定类型</typeparam>
/// <param name="defaultValue">默认值</param>
/// <returns></returns>
/// <summary>
/// 将值转换为int
/// </summary>
/// <returns></returns>
/// <summary>
/// 将值转换为bool
/// </summary>
/// <returns></returns>
/// <summary>
/// 将值转换为时间
/// </summary>
/// <returns></returns>
/// <summary>
/// 将值转换为字符串
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示自定义数据的存储和访问容器
/// 线程安全类型
/// </summary>
/// <summary>
/// 同步锁
/// </summary>
/// <summary>
/// 数据字典
/// </summary>
/// <summary>
/// 获取或设置唯一标识符
/// </summary>
/// <summary>
/// 根据键获取值
/// </summary>
/// <param name="key">键</param>
/// <returns></returns>
/// <summary>
/// 根据键获取值
/// </summary>
/// <param name="key">键</param>
/// <returns></returns>
/// <summary>
/// 删除指定的键
/// </summary>
/// <param name="key">键</param>
/// <returns></returns>
/// <summary>
/// 根据键取出埴
/// 取出之后删除相应的键
/// 等同于Get之后再Remove
/// </summary>
/// <param name="key">键</param>
/// <returns></returns>
/// <summary>
/// 根据键设置值
/// </summary>
/// <param name="key">键</param>
/// <param name="value">值</param>
/// <summary>
/// 调试视图
/// </summary>
/// <summary>
/// 查看的对象
/// </summary>
/// <summary>
/// 调试视图
/// </summary>
/// <param name="target">查看的对象</param>
/// <summary>
/// 查看的内容
/// </summary>
/// <summary>
/// 表示特性的构造函数使用范围
/// </summary>
/// <summary>
/// 获取使用范围
/// </summary>
/// <summary>
/// 特性的构造函数使用范围
/// </summary>
/// <param name="targets">使用范围</param>
/// <summary>
/// 表示参数值作为x-www-form-urlencoded的字段
/// </summary>
/// <summary>
/// 字段名称
/// </summary>
/// <summary>
/// 字段的值
/// </summary>
/// <summary>
/// 获取或设置当值为null是否忽略提交
/// 默认为false
/// </summary>
/// <summary>
/// 表示参数值作为x-www-form-urlencoded的字段
/// </summary>
/// <summary>
/// 表示name和value写入x-www-form-urlencoded表单
/// </summary>
/// <param name="name">字段名称</param>
/// <param name="value">字段的值</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <returns></returns>
/// <summary>
/// 表示Http请求Header的特性
/// </summary>
/// <summary>
/// Header名称
/// </summary>
/// <summary>
/// Header值 
/// </summary>
/// <summary>
/// 获取是对cookie的Value进行Url utf-8编码
/// 默认为true
/// </summary>
/// <summary>
/// 将参数值设置到Header        
/// </summary>
/// <param name="name">header名称</param>
/// <summary>
/// 将参数值设置到Header      
/// </summary>
/// <param name="name">header名称</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 将指定值设置到Header       
/// </summary>
/// <param name="name">header名称</param>
/// <param name="value">header值</param>
/// <summary>
/// 将指定值设置到Header      
/// </summary>
/// <param name="name">header名称</param>
/// <param name="value">header值</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// http请求之前
/// 值从参数过来
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <returns></returns>
/// <summary>
/// 设置请求头
/// </summary>
/// <param name="context"></param>
/// <param name="headerValue"></param>
/// <exception cref="HttpApiConfigException"></exception>
/// <returns></returns>
/// <summary>
/// 设置Cookie值
/// </summary>
/// <param name="context">上下文</param>
/// <param name="cookieValues">cookie值</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <exception cref="CookieException"></exception>
/// <returns></returns>
/// <summary>
/// 表示参数值作为multipart/form-data表单的一个文本项
/// </summary>
/// <summary>
/// 字段名称
/// </summary>
/// <summary>
/// 字段的值
/// </summary>
/// <summary>
/// 获取或设置当值为null是否忽略提交
/// 默认为false
/// </summary>
/// <summary>
/// 表示参数值作为multipart/form-data表单的一个文本项
/// </summary>
/// <summary>
/// 表示name和value写入multipart/form-data表单
/// </summary>
/// <param name="name">字段名称</param>
/// <param name="value">字段的值</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <returns></returns>
/// <summary>
/// 表示上下文Tags数据写入的特性
/// </summary>
/// <summary>
/// key
/// </summary>
/// <summary>
/// 值
/// </summary>
/// <summary>
/// 请求前将参数值写入到上下文的Tags
/// </summary>
/// <param name="key">Tags的key</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 请求前将指定的值写入到上下文的Tags
/// </summary>
/// <param name="key">Tags的key</param>
/// <param name="value">固定的值</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 参数请求前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">参数</param>
/// <returns></returns>
/// <summary>
/// 请求前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 表示此请求的超时时间
/// </summary>
/// <summary>
/// 获取超时时间
/// </summary>
/// <summary>
/// 表示将参数值作为请求的超时时间
/// 支持参数类型为数值类型和TimeSpan类型，以及他们的可空类型
/// </summary>
/// <summary>
/// 指定请求的超时时间
/// </summary>
/// <param name="milliseconds">超时时间的毫秒数</param>
/// <summary>
/// 指定请求的超时时间
/// </summary>
/// <param name="milliseconds">超时时间的毫秒数</param>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <returns></returns>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <returns></returns>
/// <summary>
/// 设置超时时间到上下文
/// </summary>
/// <param name="context">上下文</param>
/// <param name="timeout">超时时间</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <summary>
/// 表示使用缓存的特性
/// 缓存功能依赖于HttpApiConfig.ResponseCacheProvider
/// </summary>
/// <summary>
/// 获取缓存的时间戳
/// </summary>
/// <summary>
/// 使用缓存的特性
/// </summary>
/// <param name="expiration">缓存毫秒数</param>
/// <summary>
/// 返回读取缓存的策略
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 返回写入缓存的策略
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 返回缓存的键
/// 该键用于读取或写入缓存到缓存提供者
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 表示使用缓存的特性
/// 使用请求Uri作请求结果的缓存键
/// 缓存功能依赖于HttpApiConfig.ResponseCacheProvider
/// </summary>
/// <summary>
/// 缓存键的请求头名称
/// </summary>
/// <summary>
/// 获取缓存键的请求头名称
/// </summary>
/// <summary>
/// 获取或设置连同作为缓存键的请求头名称
/// 多个请求头使用英文逗号分隔
/// </summary>
/// <summary>
/// 使用缓存的特性
/// </summary>
/// <param name="expiration">缓存毫秒数</param>
/// <summary>
/// 设置作为缓存键的请求头
/// </summary>
/// <param name="headersString"></param>
/// <summary>
/// 返回缓存的键
/// 该键用于读取或写入缓存到缓存提供者
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// ApiAction的过滤器抽象特性
/// </summary>
/// <summary>
/// 获取或设置是否启用
/// </summary>
/// <summary>
/// 获取或设置过滤器的执行排序索引
/// </summary>
/// <summary>
/// 获取本类型是否允许在接口与方法上重复
/// </summary>
/// <summary>
/// 准备请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 请求完成之后
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 准备请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 请求完成之后
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 表示输出的目标
/// </summary>
/// <summary>
/// 日志工厂
/// 需要配置HttpApiConfig的ServiceProvider或LoggerFactory
/// </summary>
/// <summary>
/// 控制台窗口
/// </summary>
/// <summary>
/// Visual Studio输出窗口的调试源
/// </summary>
/// <summary>
/// 调试器
/// 如果你的程序在Visual Studio下调试运行，效果等同于OutputTarget.Debug
/// 如果你的程序在没有任何调试环境下时运行，可以使用DebugView工具捕捉输出的消息
/// 如果消息内容长度大于4K，则自动被截断输出
/// </summary>
/// <summary>
/// 表示将请求响应内容指定目标的过滤器
/// </summary>
/// <summary>
/// 获取或设置事件Id
/// </summary>
/// <summary>
/// 获取或设置输出目标
/// 默认为LoggerFactory
/// </summary>
/// <summary>
/// 获取或设置输出目标
/// 默认为LoggerFactory | Debug
/// </summary>
/// <summary>
/// 准备请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 请求完成之后
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 返回是否需要追踪
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 输出追踪到的消息
/// </summary>
/// <param name="context">上下文</param>
/// <param name="traceMessage">追踪的消息</param>
/// <returns></returns>
/// <summary>
/// 写入LoggerFactory
/// </summary>
/// <param name="context">上下文</param>
/// <param name="categoryName">日志容器名称</param>
/// <param name="traceMessage">追踪的消息</param>
/// <summary>
/// 格式化追踪到的消息
/// </summary>
/// <param name="outputTarget">输出目标</param>
/// <param name="traceMessage">追踪的消息</param>
/// <returns></returns>
/// <summary>
/// 表示追踪请求响应内容的抽象过滤器
/// </summary>
/// <summary>
/// tag的key
/// </summary>
/// <summary>
/// 获取或设置是否输出请求内容
/// </summary>
/// <summary>
/// 获取或设置是否输出响应内容
/// </summary>
/// <summary>
/// 追踪请求响应内容的过滤器
/// </summary>
/// <summary>
/// 准备请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 请求完成之后
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 返回响应字符串
/// </summary>
/// <param name="response">响应信息</param>
/// <returns></returns>
/// <summary>
/// 输出追踪到的消息
/// </summary>
/// <param name="context">上下文</param>
/// <param name="traceMessage">追踪的消息</param>
/// <returns></returns>
/// <summary>
/// 表示追踪到的消息
/// </summary>
/// <summary>
/// 获取或设置是否记录请求
/// </summary>
/// <summary>
/// 获取或设置请求时间
/// </summary>
/// <summary>
/// 获取或设置请求头
/// </summary>
/// <summary>
/// 获取或设置请求内容
/// </summary>
/// <summary>
/// 获取或设置是否记录响应
/// </summary>
/// <summary>
/// 获取或设置响应时间
/// </summary>
/// <summary>
/// 获取或设置响应头
/// </summary>
/// <summary>
/// 获取或设置响应内容
/// </summary>
/// <summary>
/// 获取或设置异常
/// </summary>
/// <summary>
/// 返回不包含异常的调试消息
/// </summary>
/// <returns></returns>
/// <summary>
/// 转换为每行缩进的字符串
/// </summary>
/// <param name="spaceCount">缩进的空格数</param>
/// <returns></returns>
/// <summary>
/// 转换为字符串
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示文本创建器
/// </summary>
/// <summary>
/// StringBuilder
/// </summary>
/// <summary>
/// 添加文本
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 添加文本并换行
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 如果条件满足则添加换行
/// </summary>
/// <param name="predicate"></param>
/// <returns></returns>
/// <summary>
/// 如果已经有内容则添加换行
/// </summary>
/// <returns></returns>
/// <summary>
/// 如果不为空则添加内容
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 如果不为空则添加内容并换行
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 转换为字符串
/// </summary>
/// <returns></returns>
/// <summary>
/// ApiAction修饰特性抽象
/// </summary>
/// <summary>
/// 获取顺序排序索引
/// </summary>
/// <summary>
/// 获取本类型是否允许在接口与方法上重复
/// </summary>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 表示请求的基本授权
/// </summary>
/// <summary>
/// BasicAuth
/// </summary>
/// <summary>
/// 基本授权
/// </summary>
/// <param name="userName">账号</param>
/// <param name="password">密码</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 表示Delete请求
/// 不可继承
/// </summary>
/// <summary>
/// Delete请求
/// </summary>
/// <summary>
/// Delete请求
/// </summary>
/// <param name="path">请求绝对或相对路径</param>
/// <summary>
/// 表示Get请求
/// 不可继承
/// </summary>
/// <summary>
/// Get请求
/// </summary>
/// <summary>
/// Get请求
/// </summary>
/// <param name="path">请求绝对或相对路径</param>
/// <summary>
/// 表示Head请求
/// 不可继承
/// </summary>
/// <summary>
/// Head请求
/// </summary>
/// <summary>
/// Head请求
/// </summary>
/// <param name="path">请求绝对或相对路径</param>
/// <summary>
/// 表示请求服务http绝对完整主机域名
/// 例如http://www.webapiclient.com
/// </summary>
/// <summary>
/// 获取根路径
/// </summary>
/// <summary>
/// 获取顺序排序索引
/// int.MinValue
/// </summary>
/// <summary>
/// 请求服务的根路径
/// 例如http://www.webapiclient.com
/// </summary>
/// <param name="host">请求完整绝对根路径</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="UriFormatException"></exception>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 转换为字符串
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示http请求方法描述特性
/// </summary>
/// <summary>
/// 获取请求方法
/// </summary>
/// <summary>
/// 获取请求相对路径
/// </summary>
/// <summary>
/// 获取顺序排序索引
/// 优先级最高
/// </summary>
/// <summary>
/// http请求方法描述特性
/// </summary>
/// <param name="method">请求方法</param>
/// <summary>
/// http请求方法描述特性
/// </summary>
/// <param name="method">请求方法</param>
/// <param name="path">请求绝对或相对路径</param>
/// <summary>
/// http请求方法描述特性
/// </summary>
/// <param name="method">请求方法</param>
/// <summary>
/// http请求方法描述特性
/// </summary>
/// <param name="method">请求方法</param>
/// <param name="path">请求绝对或相对路径</param>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <returns></returns>
/// <summary>
/// 获取请求URL
/// </summary>
/// <param name="baseUri"></param>
/// <param name="relative"></param>
/// <exception cref="HttpApiConfigException"></exception>
/// <returns></returns>
/// <summary>
/// 表示Options请求
/// 不可继承
/// </summary>
/// <summary>
/// Options请求
/// </summary>
/// <summary>
/// Options请求
/// </summary>
/// <param name="path">相对路径</param>
/// <summary>
/// 表示Patch请求
/// 不可继承
/// </summary>
/// <summary>
/// 表示patch请求方式
/// </summary>
/// <summary>
/// Patch请求
/// </summary>
/// <summary>
/// Patch请求
/// </summary>
/// <param name="path">请求绝对或相对路径</param>
/// <summary>
/// 表示Post请求
/// 不可继承
/// </summary>
/// <summary>
/// Post请求
/// </summary>
/// <summary>
/// Post请求
/// </summary>
/// <param name="path">请求绝对或相对路径</param>
/// <summary>
/// 表示Put请求
/// 不可继承
/// </summary>
/// <summary>
/// Put请求
/// </summary>
/// <summary>
/// Put请求
/// </summary>
/// <param name="path">请求绝对或相对路径</param>
/// <summary>
/// 表示http代理特性
/// 接口实例整个生命周期内都使用这个代理
/// </summary>    
/// <summary>
/// http代理
/// </summary>
/// <summary>
/// http代理描述
/// </summary>
/// <param name="host">域名或ip</param>
/// <param name="port">端口</param>    
/// <exception cref="ArgumentNullException"></exception>      
/// <summary>
/// http代理描述
/// </summary>
/// <param name="host">域名或ip</param>
/// <param name="port">端口</param>
/// <param name="userName">账号</param>
/// <param name="password">密码</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 序列化参数值得到的bson作为application/bson请求
/// 每个Api只能注明于其中的一个参数
/// </summary>
/// <summary>
/// 获取或设置时期时间格式
/// </summary>
/// <summary>
/// 设置参数到http请求内容
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <summary>
/// 设置参数到http请求内容
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <summary>
/// 创建序列化配置     
/// </summary>
/// <param name="options">格式化选项</param>
/// <returns></returns>
/// <summary>
/// 使用KeyValueFormatter序列化参数值得到的键值对作为x-www-form-urlencoded请求
/// </summary>
/// <summary>
/// 获取或设置当值为null是否忽略提交
/// 默认为false
/// </summary>
/// <summary>
/// 获取或设置时期时间格式
/// </summary>
/// <summary>
/// 序列化参数值得到的键值对作为x-www-form-urlencoded请求
/// </summary>
/// <summary>
/// 序列化参数值得到的键值对作为x-www-form-urlencoded请求
/// </summary>
/// <param name="datetimeFormat">时期时间格式</param>
/// <summary>
/// 设置参数到http请求内容
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <summary>
/// 处理表单内容
/// 可以重写比方法
/// 实现字段排序、插入签名字段等
/// </summary>
/// <param name="form">表单</param>
/// <returns></returns>
/// <summary>
/// 表示参数值作为请求头   
/// 对于复杂类型的参数值，将拆解作为多个Header
/// </summary>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <returns></returns>
/// <summary>
/// 表示参数值理解为HttpContent类型的特性
/// 例如StringContent、ByteArrayContent、FormUrlEncodedContent等类型
/// </summary>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <returns></returns>
/// <summary>
/// 设置参数到http请求内容
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <returns></returns>
/// <summary>
/// 设置参数到http请求内容
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <summary>
/// 使用JsonFormatter序列化参数值得到的json文本作为application/json请求
/// 每个Api只能注明于其中的一个参数
/// </summary>
/// <summary>
/// 编码方式
/// </summary>
/// <summary>
/// 获取或设置编码名称
/// </summary>
/// <exception cref="ArgumentException"></exception>
/// <summary>
/// 获取或设置时期时间格式
/// </summary>
/// <summary>
/// 序列化参数值得到的json文本作为application/json请求
/// </summary>
/// <summary>
/// 序列化参数值得到的json文本作为application/json请求
/// </summary>
/// <param name="datetimeFormat">日期时间格式</param>
/// <summary>
/// 设置参数到http请求内容
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <summary>
/// 表示参数值序列化为Json并作为x-www-form-urlencoded的字段
/// </summary>
/// <summary>
/// 获取或设置当值为null是否忽略提交
/// 默认为false
/// </summary>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">参数</param>
/// <returns></returns>
/// <summary>
/// 表示参数值序列化为Json并作为multipart/form-data表单的一个文本项
/// </summary>
/// <summary>
/// 获取或设置当值为null是否忽略提交
/// 默认为false
/// </summary>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">参数</param>
/// <returns></returns>
/// <summary>
/// 使用KeyValueFormatter序列化参数值得到的键值对分别作为multipart/form-data表单的一个文本项 
/// </summary>
/// <summary>
/// 获取或设置当值为null是否忽略提交
/// 默认为false
/// </summary>
/// <summary>
/// 获取或设置时期时间格式
/// </summary>
/// <summary>
/// 序列化参数值得到的键值对分别作为multipart/form-data表单的一个文本项 
/// </summary>
/// <summary>
/// 序列化参数值得到的键值对分别作为multipart/form-data表单的一个文本项 
/// </summary>
/// <param name="datetimeFormat">时期时间格式</param>
/// <summary>
/// 设置参数到http请求内容
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <summary>
/// 表示请求参数特性
/// </summary>
/// <summary>
/// 获取参数类型
/// </summary>
/// <summary>
/// 请求参数特性
/// </summary>
/// <param name="kind">参数类型</param>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">参数信息</param>
/// <returns></returns>
/// <summary>
/// 表示参数类型
/// </summary>
/// <summary>
/// Uri路径参数
/// 等效PathQueryAttribute
/// </summary>
/// <summary>
/// Uri Query
/// 等效PathQueryAttribute
/// </summary>
/// <summary>
/// Header
/// 等效HeaderAttribute
/// </summary>
/// <summary>
/// x-www-form-urlencoded
/// 等效FormContentAttribute
/// </summary>
/// <summary>
/// multipart/form-data
/// 等效MulitpartContentAttribute
/// </summary>
/// <summary>
/// application/json
/// 等效JsonContentAttribute
/// </summary>
/// <summary>
/// application/xml
/// 等效XmlContentAttribute
/// </summary>
/// <summary>
/// 使用KeyValueFormatter序列化参数值得到的键值对作为url路径参数或query参数的特性
/// 没有任何特性修饰的参数，将默认被PathQueryAttribute修饰
/// </summary>
/// <summary>
/// 编码
/// </summary>
/// <summary>
/// 获取或设置参数的编码名称
/// </summary>
/// <exception cref="ArgumentException"></exception>
/// <summary>
/// 获取或设置当值为null是否忽略提交
/// 默认为false
/// </summary>
/// <summary>
/// 获取或设置时期时间格式
/// </summary>
/// <summary>
/// 获取或设置集合格式化方式
/// </summary>
/// <summary>
/// 表示Url路径参数或query参数的特性
/// </summary>
/// <summary>
/// 表示Url路径参数或query参数的特性
/// </summary>
/// <param name="datetimeFormat">时期时间格式</param>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <returns></returns>
/// <summary>
/// url添加query或替换segment
/// </summary>
/// <param name="uri">url</param>
/// <param name="keyValues">键值对</param>
/// <returns></returns>
/// <summary>
/// 表示将参数值的已编码原始表单内容作为请求内容
/// </summary>
/// <summary>
/// 设置参数到http请求内容
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <returns></returns>
/// <summary>
/// 表示将参数的文本内容作为请求json内容
/// </summary>
/// <summary>
/// 将参数的文本内容作为请求json内容
/// </summary>
/// <summary>
/// 表示将参数的文本内容作为请求内容
/// </summary>
/// <summary>
/// 媒体类型
/// </summary>
/// <summary>
/// 编码方式
/// </summary>
/// <summary>
/// 获取或设置编码名称
/// </summary>
/// <exception cref="ArgumentException"></exception>
/// <summary>
/// 将参数的文本内容作为请求内容
/// </summary>
/// <param name="mediaType">媒体类型</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 设置参数到http请求内容
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <summary>
/// 表示将参数的文本内容作为请求xml内容
/// </summary>
/// <summary>
/// 将参数的文本内容作为请求xml内容
/// </summary>
/// <summary>
/// 表示将参数值作为请求uri的特性  
/// 要求必须修饰于第一个参数
/// 支持绝对或相对路径
/// </summary>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <exception cref="HttpApiConfigException"></exception>
/// <returns></returns>
/// <summary>
/// 使用XmlFormatter序列化参数值得到的xml文本作为application/xml请求
/// </summary>
/// <summary>
/// 编码方式
/// </summary>
/// <summary>
/// 获取或设置编码名称
/// </summary>
/// <exception cref="ArgumentException"></exception>
/// <summary>
/// 序列化参数值得到的xml文本作为application/xml请求    
/// </summary>
/// <summary>
/// 序列化参数值得到的xml文本作为application/xml请求
/// </summary>
/// <param name="encoding">编码</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 设置参数到http请求内容
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <summary>
/// 回复内容处理特性抽象
/// </summary>
/// <summary>
/// 获取或设置是否确保响应的http状态码通过IsSuccessStatusCode验证
/// 当值为true时，请求可能会引发HttpStatusFailureException
/// 默认为true
/// </summary>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 执行前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 配置请求头的accept
/// </summary>
/// <param name="accept">请求头的accept</param>
/// <returns></returns>
/// <summary>
/// 获取异步结果
/// </summary>
/// <param name="context">上下文</param>
/// <exception cref="HttpStatusFailureException"></exception>
/// <returns></returns>
/// <summary>
/// 指示状态码是否为成功的状态码
/// </summary>
/// <param name="statusCode">状态码</param>
/// <returns></returns>
/// <summary>
/// 获取异步结果
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 自动适应返回类型的处理
/// 支持返回TaskOf(HttpResponseMessage)或TaskOf(byte[])或TaskOf(string)或TaskOf(Stream)
/// 支持返回xml或json转换对应类型
/// 没有任何IApiReturnAttribute特性修饰的接口方法，将默认为AutoReturn修饰
/// </summary> 
/// <summary>
/// 配置请求头的accept
/// </summary>
/// <param name="accept">请求头的accept</param>
/// <returns></returns>
/*", 0.1d));
/// <summary>
/// 获取异步结果
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 表示使用Bson反序列化回复内容作为返回值
/// </summary>
/// <summary>
/// 配置请求头的accept
/// </summary>
/// <param name="accept">请求头的accept</param>
/// <returns></returns>
/// <summary>
/// 获取异步结果
/// </summary>
/// <param name="context">上下文</param>
/// <exception cref="HttpStatusFailureException"></exception>
/// <returns></returns>
/// <summary>
/// 创建序列化配置     
/// </summary>
/// <param name="options">格式化选项</param>
/// <returns></returns>
/// <summary>
/// 表示使用JsonFormatter反序列化回复内容作为返回值
/// </summary>
/// <summary>
/// 配置请求头的accept
/// </summary>
/// <param name="accept">请求头的accept</param>
/// <returns></returns>
/// <summary>
/// 获取异步结果
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 表示使用XmlFormatter反序列化回复内容作为返回值
/// </summary>
/// <summary>
/// 配置请求头的accept
/// </summary>
/// <param name="accept">请求头的accept</param>
/// <returns></returns>
/// <summary>
/// 获取异步结果
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 表示OAuth授权的token过滤器抽象类
/// </summary>
/// <summary>
/// 最近请求到的token
/// </summary>
/// <summary>
/// 异步锁
/// </summary>
/// <summary>
/// 请求完成之后
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 准备请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 初始化或刷新token
/// </summary>
/// <exception cref="HttpApiTokenException"></exception>
/// <returns></returns>
/// <summary>
/// 应用AccessToken
/// 默认为添加到请求头的Authorization
/// </summary>
/// <param name="context">请求上下文</param>
/// <param name="tokenResult">token结果</param>
/// <summary>
/// 接口请求完成之后
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 获取token之后
/// 接口准备请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 清除Token
/// 迫使下次请求将重新获取token
/// </summary>
/// <summary>
/// 请求获取token
/// 可以使用TokenClient来请求
/// </summary>
/// <returns></returns>
/// <summary>
/// 请求刷新token
/// 可以使用TokenClient来刷新
/// </summary>
/// <param name="refresh_token">获取token时返回的refresh_token</param>
/// <returns></returns>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing">是否也释放托管资源</param>
/// <summary>
/// 表示提供client_credentials方式的token过滤器
/// </summary>
/// <summary>
/// 获取或设置提供Token获取的Url节点
/// 必填
/// </summary>
/// <summary>
/// 获取或设置client_id
/// 必填
/// </summary>
/// <summary>
/// 获取或设置client_secret
/// 必填
/// </summary>
/// <summary>
/// 获取或设置资源范围
/// </summary>
/// <summary>
/// 获取或设置额外字段，支持字典或模型
/// </summary>
/// <summary>
/// 请求获取token
/// 可以使用TokenClient来请求
/// </summary>
/// <returns></returns>
/// <summary>
/// 请求刷新token
/// 可以使用TokenClient来刷新
/// </summary>
/// <param name="refresh_token">获取token时返回的refresh_token</param>
/// <returns></returns>
/// <summary>
/// 表示提供token获取功能的客户端
/// </summary>
/// <summary>
/// json序列化工具
/// </summary>
/// <summary>
/// keyValue序列化工具
/// </summary>
/// <summary>
/// 请求超时时间
/// </summary>
/// <summary>
/// 获取或设置请求超时时间
/// 默认为30s
/// </summary>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <summary>
/// 获取提供Token获取的Url节点
/// </summary>
/// <summary>
/// 获取序列化选项
/// </summary>
/// <summary>
/// 提供token获取功能的客户端
/// </summary>
/// <param name="tokenEndpoint">提供Token获取的Url节点</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="UriFormatException"></exception>
/// <summary>
/// 创建ITokenClient的实例
/// </summary>
/// <param name="tokenEndpoint">提供Token获取的Url节点</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <summary>
/// 以client_credentials授权方式获取token
/// </summary>
/// <param name="client_id">客户端id</param>
/// <param name="client_secret">客户端秘钥</param>
/// <param name="scope">资源范围</param>
/// <param name="extra">额外字段，支持字典或模型</param>
/// <returns></returns>     
/// <summary>
/// 以password授权方式获取token
/// </summary>
/// <param name="client_id">客户端id</param>
/// <param name="client_secret">客户端秘钥</param>
/// <param name="username">用户名</param>
/// <param name="password">用户密码</param>
/// <param name="scope">资源范围</param>
/// <param name="extra">额外字段，支持字典或模型</param>
/// <returns></returns>      
/// <summary>
/// 刷新token
/// </summary>
/// <param name="client_id">客户端id</param>
/// <param name="client_secret">客户端秘钥</param>
/// <param name="refresh_token">获取token得到的refresh_token</param>
/// <param name="extra">额外字段，支持字典或模型</param>
/// <returns></returns>
/// <summary>
/// 请求Token
/// </summary>
/// <param name="credentials">身份信息</param>
/// <returns></returns>
/// <summary>
/// 身份信息
/// </summary>
/// <summary>
/// 表示Token结果
/// </summary>
/// <summary>
/// token创建时间
/// </summary>
/// <summary>
/// access_token
/// </summary>
/// <summary>
/// id_token
/// </summary>
/// <summary>
/// expires_in
/// 过期时间戳(秒)
/// </summary>
/// <summary>
/// token_type
/// </summary>
/// <summary>
/// refresh_token
/// </summary>
/// <summary>
/// error
/// </summary>
/// <summary>
/// 确保token成功
/// </summary>
/// <exception cref="HttpApiTokenException"></exception>
/// <summary>
/// 返回是否成功
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回是否已过期 
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回token是否支持刷新
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示请求Api的上下文
/// </summary>
/// <summary>
/// 获取httpApi代理类实例
/// </summary>
/// <summary>
/// 获取关联的HttpApiConfig
/// </summary>
/// <summary>
/// 获取关联的ApiActionDescriptor
/// </summary>
/// <summary>
/// 获取关联的HttpRequestMessage
/// </summary>
/// <summary>
/// 获取本次请求相关的自定义数据的存储和访问容器
/// </summary>
/// <summary>
/// 获取请求取消令牌集合
/// 这些令牌将被连接起来
/// </summary>
/// <summary>
/// 获取关联的HttpResponseMessage
/// </summary>
/// <summary>
/// 获取调用Api得到的结果
/// </summary>
/// <summary>
/// 获取调用Api产生的异常
/// </summary>
/// <summary>
/// 请求Api的上下文
/// </summary>
/// <param name="httpApi">httpApi代理类实例</param>
/// <param name="httpApiConfig">关联的HttpApiConfig</param>
/// <param name="apiActionDescriptor">关联的ApiActionDescriptor</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 从HttpApiConfig.ServiceProvider获取服务实例
/// </summary>
/// <typeparam name="T">服务类型</typeparam>
/// <returns></returns>
/// <summary>
/// 执行Api方法
/// </summary>
/// <returns></returns>
/// <summary>
/// 执行Api的所有特性的请求前行为
/// </summary>
/// <returns></returns>
/// <summary>
/// 执行请求
/// 使用或不使用缓存
/// </summary>
/// <returns></returns>
/// <summary>
/// 执行http请求
/// </summary>
/// <returns></returns>
/// <summary>
/// 创建取消令牌源
/// </summary>
/// <returns></returns>
/// <summary>
/// 执行所有过滤器
/// </summary>
/// <param name="funcSelector">方法选择</param>
/// <returns></returns>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing">是否也释放托管资源</param>
/// <summary>
/// 表示请求Api描述
/// </summary>
/// <summary>
/// 获取Api名称
/// </summary>
/// <summary>
/// 获取关联的方法信息
/// </summary>
/// <summary>
/// 获取Api调用参数值
/// </summary>
/// <summary>
/// 获取Api关联的缓存特性
/// </summary>
/// <summary>
/// 获取Api关联的特性
/// </summary>
/// <summary>
/// 获取Api关联的过滤器特性
/// </summary>
/// <summary>
/// 获取Api的参数描述
/// </summary>
/// <summary>
/// 获取Api的返回描述
/// </summary>
/// <summary>
/// 请求Api描述
/// </summary>
/// <summary>
/// 请求Api描述
/// </summary>
/// <param name="method">接口的方法</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 克隆并设置新的参数值
/// </summary>
/// <param name="parameterValues">新的参数值集合</param>
/// <returns></returns>
/// <summary>
/// 是否允许重复的特性比较器
/// </summary>
/// <summary>
/// 是否相等
/// </summary>
/// <param name="x"></param>
/// <param name="y"></param>
/// <returns></returns>
// 如果其中一个不允许重复，返回true将y过滤
/// <summary>
/// 获取哈希码
/// </summary>
/// <param name="obj"></param>
/// <returns></returns> 
/// <summary>
/// 表示请求Api的参数描述
/// </summary>
/// <summary>
/// 获取参数名称
/// </summary>
/// <summary>
/// 获取关联的参数信息
/// </summary>
/// <summary>
/// 获取参数索引
/// </summary>
/// <summary>
/// 获取参数类型
/// </summary>
/// <summary>
/// 获取参数值
/// </summary>
/// <summary>
/// 获取关联的参数特性
/// </summary>
/// <summary>
/// 获取关联的ValidationAttribute特性
/// </summary>
/// <summary>
/// 请求Api的参数描述
/// </summary>
/// <summary>
/// 请求Api的参数描述
/// </summary>
/// <param name="parameter">参数信息</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 值转换为字符串
/// </summary>
/// <returns></returns>
/// <summary>
/// 克隆新设置新的值
/// </summary>
/// <param name="value">新的参数值</param>
/// <returns></returns>
/// <summary>
/// 返回参数特性
/// </summary>
/// <param name="parameterType">参数类型</param>
/// <param name="defined">参数上声明的特性</param>
/// <returns></returns>
/// <summary>
/// 返回单次的迭代器
/// </summary>
/// <typeparam name="T"></typeparam>
/// <returns></returns>
/// <summary>
/// 表示请求Api的返回描述
/// </summary>
/// <summary>
/// 获取关联的ApiReturnAttribute
/// </summary>
/// <summary>
/// 获取返回类型
/// </summary>
/// <summary>
/// 获取返回类型是否为定义为Task(Of T)
/// </summary>
/// <summary>
/// 获取返回类型是否为定义为ITask(Of T)
/// </summary>
/// <summary>
/// 获取ITask(Of T)或Task(Of T)的T类型描述
/// </summary>
/// <summary>
/// 请求Api的返回描述
/// </summary>
/// <param name="method">方法信息</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 表示返回的Task(Of T)的T类型描述
/// </summary>
/// <summary>
/// 获取类型
/// </summary>
/// <summary>
/// 获取包装为ITask的创建工厂
/// </summary>
/// <summary>
/// 获取HttpResponseWrapper子类的创建工厂
/// </summary>
/// <summary>
/// 获取是否为String类型
/// </summary>
/// <summary>
/// 获取是否为Stream类型
/// </summary>
/// <summary>
/// 获取是否为byte[]类型
/// </summary>
/// <summary>
///  获取是否为HttpResponseMessage类型
/// </summary>
/// <summary>
/// 获取是否为HttpResponseWrapper子类型
/// </summary>
/// <summary>
/// 返回的Task(Of T)的T类型描述
/// </summary>
/// <param name="dataType">数据类型</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// DataAnnotation
/// 表示将参数别名或序列时此属性的别名
/// 当修饰属性时默认适用于JsonFormat和KeyValueFormat
/// </summary>
/// <summary>
/// 获取别名
/// </summary>
/// <summary>
/// 指定参数或属性的别名
/// </summary>
/// <param name="name">参数或属性的别名</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 执行特性
/// </summary>
/// <param name="member">成员</param>
/// <param name="annotations">注解信息</param>
/// <summary>
/// 表示注解信息
/// </summary>
/// <summary>
/// 获取或设置别名或名称
/// </summary>
/// <summary>
/// 获取或设置日期时间格式
/// </summary>
/// <summary>
/// 获取或设置是否忽略序列化
/// </summary>      
/// <summary>
/// 获取或设置当值为null时是否忽略序列化
/// </summary>
/// <summary>
/// 返回成员的注解信息
/// </summary>
/// <param name="member">成员信息</param>
/// <param name="scope">序列化范围</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 表示数据注解特性抽象
/// </summary>
/// <summary>
/// 获取或设置适用的序列化范围
/// </summary>
/// <summary>
/// 数据注解特性抽象
/// </summary>
/// <summary>
/// 返回是否声明指定的scope
/// </summary>
/// <param name="scope">序列化范围</param>
/// <returns></returns>
/// <summary>
/// 执行特性
/// </summary>
/// <param name="member">成员</param>
/// <param name="annotations">注解信息</param>
/// <summary>
/// DataAnnotation
/// 表示序列时此属性使用的日期时间格式
/// 默认适用于JsonFormat和KeyValueFormat
/// </summary>
/// <summary>
/// 获取格式
/// </summary>
/// <summary>
/// 日期时间格式
/// </summary>
/// <param name="format">格式</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 执行特性
/// </summary>
/// <param name="member">成员</param>
/// <param name="annotations">注解信息</param>
/// <summary>
/// 表示适用的序列化的范围
/// </summary>
/// <summary>
/// 适用于全部序列化
/// </summary>
/// <summary>
/// 适用于Json序列化
/// </summary>
/// <summary>
/// 适用于KeyValue序列化
/// </summary>
/// <summary>
/// 适用于Bson序列化
/// </summary>
/// <summary>
/// DataAnnotation
/// 表示序列时忽略此属性
/// 默认适用于JsonFormat和KeyValueFormat
/// </summary>
/// <summary>
/// 执行特性
/// </summary>
/// <param name="member">成员</param>
/// <param name="annotations">注解信息</param>
/// <summary>
/// DataAnnotation
/// 表示序列时属性值为null则忽略
/// 默认适用于KeyValueFormat
/// </summary>
/// <summary>
/// 值为null此属性将忽略
/// 默认适用于KeyValueFormat
/// </summary>
/// <summary>
/// 执行特性
/// </summary>
/// <param name="member">成员</param>
/// <param name="annotations">注解信息</param>
/// <summary>
/// 表示属性解析约定
/// 用于实现DataAnnotations的功能
/// </summary>
/// <summary>
/// ContractResolver缓存
/// </summary>
/// <summary>
/// 返回属性解析约定
/// </summary>
/// <param name="scope">序列化范围</param>
/// <param name="camelCase">是否使用CamelCase</param>
/// <exception cref="NotImplementedException"></exception>
/// <returns></returns>
/// <summary>
/// 是否camel命名
/// </summary>
/// <summary>
/// 获取序列化范围
/// </summary>
/// <summary>
/// 属性解析器
/// </summary>
/// <param name="contractKey">contractKey</param>
/// <summary>
/// 属性解析器
/// </summary>
/// <param name="camelCase">是否camel命名</param>
/// <param name="scope">序列化范围</param>
/// <summary>
/// 字典Key的CamelCase
/// </summary>
/// <param name="dictionaryKey"></param>
/// <returns></returns>
/// <summary>        
/// 创建Json属性
/// </summary>
/// <param name="member">属性</param>
/// <param name="memberSerialization"></param>
/// <returns></returns>
/// <summary>
/// 表示ContractResolver缓存的键
/// </summary>
/// <summary>
/// 获取是否使用CamelCase
/// </summary>
/// <summary>
/// 获取序列化范围;
/// </summary>
/// <summary>
/// ContractResolver缓存的键
/// </summary>
/// <param name="camelCase"></param>
/// <param name="formatScope"></param>
/// <summary>
/// ContractKey的哈希一样时，才调用此方法
/// </summary>
/// <param name="other"></param>
/// <returns></returns>
/// <summary>
/// 获取哈希
/// </summary>
/// <returns></returns>
/// <summary>
/// 转换为字符串
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示http接口调用的拦截器
/// </summary>
/// <summary>
/// ApiActionDescriptor缓存
/// </summary>
/// <summary>
/// 获取相关的配置
/// </summary>
/// <summary>
/// http接口调用的拦截器
/// </summary>
/// <param name="httpApiConfig">httpApi配置</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 拦截方法的调用
/// </summary>
/// <param name="target">接口的实例</param>
/// <param name="method">接口的方法</param>
/// <param name="parameters">接口的参数集合</param>
/// <returns></returns>
/// <summary>
/// 获取api的描述
/// 默认实现使用了缓存
/// </summary>
/// <param name="method">接口的方法</param>
/// <param name="parameters">参数值集合</param>
/// <returns></returns>
/// <summary>
/// 返回创建ApiActionDescriptor新实例
/// </summary>
/// <param name="method">接口的方法</param>
/// <returns></returns>
/// <summary>
/// 返回创建ApiActionContext新实例
/// </summary>
/// <param name="httpApi">httpApi代理类实例</param>
/// <param name="apiActionDescriptor">api的描述</param>
/// <returns></returns>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing">是否也释放托管资源</param>
/// <summary>
/// 默认的json解析工具
/// </summary>
/// <summary>
/// 默认实例
/// </summary>
/// <summary>
/// 获取或设置配置
/// </summary>
/// <summary>
/// 将对象列化为json文本
/// </summary>
/// <param name="obj">对象</param>
/// <param name="options">选项</param>
/// <returns></returns>
/// <summary>
/// 反序列化json为对象
/// </summary>
/// <param name="json">json</param>
/// <param name="objType">对象类型</param>
/// <returns></returns>
/// <summary>
/// 创建序列化或反序列化配置       
/// </summary>
/// <param name="options">格式化选项</param>
/// <returns></returns>
/// <summary>
/// 表示默认键值对列化工具
/// </summary>
/// <summary>
/// 默认实例
/// </summary>
/// <summary>
/// 获取或设置配置
/// </summary>
/// <summary>
/// 序列化对象为键值对
/// </summary>
/// <param name="name">对象名称</param>
/// <param name="obj">对象实例</param>
/// <param name="options">选项</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 序列化参数为键值对
/// </summary>
/// <param name="parameter">参数</param>
/// <param name="options">选项</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 创建序列化配置     
/// </summary>
/// <param name="options">格式化选项</param>
/// <returns></returns>
/// <summary>
/// 表示Api响应结果缓存提供者的接口
/// </summary>
/// <summary>
/// 默认实例
/// </summary>
/// <summary>
/// 内存缓存
/// </summary>
/// <summary>
/// 获取提供者的友好名称
/// </summary>
/// <summary>
/// 从缓存中获取响应实体
/// </summary>
/// <param name="key">键</param>
/// <returns></returns>
/// <summary>
/// 设置响应实体到缓存
/// </summary>
/// <param name="key">键</param>
/// <param name="entry">缓存实体</param>
/// <param name="expiration">有效时间</param>
/// <returns></returns>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing">是否也释放托管资源</param>
/// <summary>
/// 表示Api响应结果缓存提供者的接口
/// </summary>
/// <summary>
/// 默认实例
/// </summary>
/// <summary>
/// 内存缓存
/// </summary>
/// <summary>
/// 获取提供者的友好名称
/// </summary>
/// <summary>
/// 从缓存中获取响应实体
/// </summary>
/// <param name="key">键</param>
/// <returns></returns>
/// <summary>
/// 设置响应实体到缓存
/// </summary>
/// <param name="key">键</param>
/// <param name="entry">缓存实体</param>
/// <param name="expiration">有效时间</param>
/// <returns></returns>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing">是否也释放托管资源</param>
/// <summary>
/// 默认的Xml解析工具
/// </summary>
/// <summary>
/// 默认实例
/// </summary>
/// <summary>
/// 将对象序列化为xml文本
/// </summary>
/// <param name="obj">对象</param>
/// <param name="encoding">编码</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="InvalidOperationException"></exception>
/// <returns></returns>
/// <summary>
/// 反序列化xml为对象
/// </summary>
/// <param name="xml">xml</param>
/// <param name="objType">对象类型</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="InvalidOperationException"></exception>
/// <returns></returns>
/// <summary>
/// 表示可指定编码文本写入器
/// </summary>
/// <summary>
/// 编码
/// </summary>
/// <summary>
/// 获取编码
/// </summary>
/// <summary>
/// 可指定编码文本写入器
/// </summary>
/// <param name="encoding">编码</param>
/// <summary>
/// 定义JsonString的接口
/// </summary>
/// <summary>
/// 获取值
/// </summary>
/// <summary>
/// JsonString的类型转换器
/// </summary>
/// <summary>
/// 获取唯一实例
/// </summary>
/// <summary>
/// 是不支持转换
/// </summary>
/// <param name="objectType"></param>
/// <returns></returns>
/// <summary>
/// 将json文本序列化JsonString的Value的类型
/// 并构建JsonString类型并返回
/// </summary>
/// <param name="reader"></param>
/// <param name="objectType"></param>
/// <param name="existingValue"></param>
/// <param name="serializer"></param>
/// <returns></returns>
/// <summary>
/// 将JsonString的value序列化文本，并作为json的某字段值
/// </summary>
/// <param name="writer"></param>
/// <param name="value"></param>
/// <param name="serializer"></param>
/// <summary>
/// 表示KeyValuePair转换器
/// </summary>
/// <summary>
/// KeyValuePair泛型
/// </summary>
/// <summary>
/// 是否camel命名
/// </summary>
/// <summary>
/// KeyValuePair转换器
/// </summary>
/// <param name="camelCase">是否使用CamelCase</param>
/// <summary>
/// 返回是否支持转换目标类型
/// </summary>
/// <param name="objectType">目标类型</param>
/// <returns></returns>
/// <summary>
/// 从json解析得到对象
/// </summary>
/// <param name="reader"></param>
/// <param name="objectType"></param>
/// <param name="existingValue"></param>
/// <param name="serializer"></param>
/// <returns></returns>
/// <summary>
/// 解析为json
/// 实际解析为KeyValuePair类型
/// </summary>
/// <param name="writer"></param>
/// <param name="value"></param>
/// <param name="serializer"></param>
/// <summary>
/// 表示KeyValuePair读取器
/// </summary>
/// <summary>
/// key的getter
/// </summary>
/// <summary>
/// value的getter
/// </summary>
/// <summary>
/// KeyValuePair读取器
/// </summary>
/// <param name="keyValuePairType">KeyValuePair的类型</param>
/// <summary>
/// 返回实例的Key的值
/// </summary>
/// <param name="instance">实例</param>
/// <returns></returns>
/// <summary>
/// 返回实例的Value的值
/// </summary>
/// <param name="instance">实例</param>
/// <returns></returns>
/// <summary>
/// 类型的KeyValuePairReader缓存
/// </summary>
/// <summary>
/// 从类型获取KeyValuePairReader
/// </summary>
/// <param name="type">类型</param>
/// <returns></returns>
/// <summary>
/// 表示键值对写入对象
/// </summary>
/// <summary>
/// 当前属性名称
/// </summary>
/// <summary>
/// 保存KeyValuePair的列表
/// </summary>
/// <summary>
///键值对写入对象
/// </summary>
/// <param name="name">对象名称</param>
/// <summary>
/// 转换为KeyValuePair并添加到列表
/// </summary>
/// <param name="value">值</param>
/// <summary>
/// 转换为KeyValuePair并添加到列表
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="value"></param>
/// <summary>
/// 写入属性
/// </summary>
/// <param name="name"></param>
/// <param name="escape"></param>
/// <summary>
/// 写入属性
/// </summary>
/// <param name="name"></param>
/// <summary>
/// 写入bool
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入bool?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入byte
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入byte?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入byte[]
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入char
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入char?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入DateTime
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入DateTime?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入DateTimeOffset
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入DateTimeOffset?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入decimal
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入decimal?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入double
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入double?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入float
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入float?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入Guid
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入Guid?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入int
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入int?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入long
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入long?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入object
/// 使用基类自动分析类型
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入sbyte
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入sbyte?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入short
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入short?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入string
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入TimeSpan
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入TimeSpan?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入uint
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入uint?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入ulong
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入ulong
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入uri
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入ushort
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入ushort?
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 写入null值
/// </summary>
/// <summary>
/// 转换为文本
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回迭代器
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回迭代器
/// </summary>
/// <returns></returns>
/// <summary>
/// 调试视图
/// </summary>
/// <summary>
/// 查看的对象
/// </summary>
/// <summary>
/// 调试视图
/// </summary>
/// <param name="target">查看的对象</param>
/// <summary>
/// 查看的内容
/// </summary>
/// <summary>
/// 表示Http接口请求重试异常
/// </summary>
/// <summary>
/// 获取重试的最大次数
/// </summary>
/// <summary>
/// Http接口请求重试异常
/// </summary>
/// <param name="maxRetryCount">重试的最大次数</param>   
/// <param name="inner">内部异常</param>
/// <summary>
/// Http接口请求重试异常
/// </summary>
/// <param name="maxRetryCount">已重试的次数</param>        
/// <param name="inner">内部异常</param>
/// <param name="message">提示</param>
/// <summary>
/// 表示不支持处理的响应消息异常
/// </summary>
/// <summary>
/// 获取响应消息
/// </summary>
/// <summary>
/// 获取要转换的目标类型
/// </summary>
/// <summary>
/// 获取响应内容的Content-Type
/// </summary>
/// <summary>
/// 获取异常提示信息
/// </summary>
/// <summary>
/// 不支持处理的响应消息异常
/// </summary>
/// <param name="responseMessage">响应消息</param>
/// <param name="returnDataType">反序列化的目标类型</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 表示Http接口的特性配置异常
/// </summary>
/// <summary>
/// Http接口特性配置异常
/// </summary>
/// <param name="message">提示信息</param>
/// <summary>
/// 表示Http接口异常基础类
/// </summary>
/// <summary>
/// Http接口异常基础类
/// </summary>
/// <summary>
/// Http接口异常基础类
/// </summary>
/// <param name="message">异常消息</param>
/// <summary>
/// Http接口异常基础类
/// </summary>
/// <param name="message">异常消息</param>
/// <param name="inner">内部异常</param>
/// <summary>
/// 表示请求Token异常
/// </summary>
/// <summary>
/// 请求Token异常
/// </summary>
/// <param name="message">消息</param>
/// <summary>
/// 表示Http失败状态码异常
/// </summary>
/// <summary>
/// 获取Http接口的配置项
/// </summary>
/// <summary>
/// 获取响应消息
/// </summary>
/// <summary>
/// 获取响应状态码
/// </summary>
/// <summary>
/// 返回异常提示
/// </summary>
/// <summary>
/// Http失败状态码异常
/// </summary>
/// <param name="httpApiConfig">Http接口的配置项</param>
/// <param name="responseMessage">响应消息</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 返回响应结果的String表述
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回响应结果的Stream表述
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回响应结果的byte[]表述
/// </summary>
/// <returns></returns>
/// <summary>
/// 根据ContentType自动选择json或xml将响应结果反序列化为TResult类型
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <exception cref="ApiReturnNotSupportedExteption"></exception>
/// <returns></returns>
/// <summary>
/// 表示结果不匹配异常
/// </summary>
/// <summary>
/// 获取结果值
/// </summary>
/// <summary>
/// 结果不匹配异常
/// </summary>
/// <param name="message">消息</param>
/// <param name="result">结果值</param>
/// <summary>
/// 表示Api缓存
/// </summary>
/// <summary>
/// Api缓存
/// </summary>
/// <param name="context">上下文</param>
/// <summary>
/// 获取响应的缓存
/// </summary>
/// <returns></returns>
/// <summary>
/// 更新响应到缓存
/// </summary>
/// <param name="cacheKey">缓存键</param>
/// <returns></returns>
/// <summary>
/// 表示缓存结果
/// </summary>
/// <summary>
/// 获取缓存的键
/// </summary>
/// <summary>
/// 获取响应信息
/// </summary>
/// <summary>
/// 获取空的缓存结果
/// </summary>
/// <summary>
/// 缓存结果
/// </summary>
/// <param name="cacheKey">缓存的键</param>
/// <param name="responseMessage">响应信息</param>
/// <summary>
/// Api验证器，提供返回值的属性验证、参数值和参数的属性值验证
/// </summary>
/// <summary>
/// 类型的属性否需要验证缓存
/// </summary>
/// <summary>
/// 返回是否需要进行属性验证
/// </summary>
/// <param name="instance">实例</param>
/// <returns></returns>
/// <summary>
/// 验证参数值输入合法性
/// 验证参数的属性值输入合法性
/// </summary>
/// <param name="parameter">参数描述</param>
/// <param name="validateProperty">是否验证属性值</param>
/// <exception cref="ValidationException"></exception>
/// <summary>
/// 验证参返回的结果
/// </summary>
/// <param name="value">结果值</param>
/// <param name="validateProperty">是否验证属性值</param>
/// <exception cref="ValidationException"></exception>
/// <summary>
/// 提供异步锁
/// </summary>
/// <summary>
/// 信号量
/// </summary>
/// <summary>
/// 异步锁
/// </summary>
/// <summary>
/// 异步锁
/// </summary>
/// <param name="concurrent">允许并行的线程数</param>
/// <summary>
/// 锁住代码块
/// using( asyncRoot.Lock() ){ }
/// </summary>
/// <returns></returns>
/// <summary>
/// 锁住代码块
/// using( await asyncRoot.LockAsync() ){ }
/// </summary>
/// <returns></returns>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing">是否也释放托管资源</param>
/// <summary>
/// 提供解锁
/// </summary>
/// <summary>
/// 信号量
/// </summary>
/// <summary>
/// 解锁
/// </summary>
/// <param name="semaphoreSlim">信号量</param>
/// <summary>
/// 释放锁
/// </summary>
/// <summary>
/// 表示线程安全的内存缓存
/// </summary>
/// <typeparam name="TKey">键</typeparam>
/// <typeparam name="TValue">值</typeparam>
/// <summary>
/// 线程安全字典
/// </summary>
/// <summary>
/// 线程安全的内存缓存
/// </summary>
/// <summary>
/// 线程安全的内存缓存
/// </summary>
/// <param name="comparer">键的比较器</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 获取或添加缓存
/// </summary>
/// <param name="key">键</param>
/// <param name="valueFactory">生成缓存内容的委托</param>
/// <returns></returns>
/// <summary>
/// 表示回复的ContentType
/// </summary>
/// <summary>
/// ContentType内容
/// </summary>
/// <summary>
/// 回复的ContentType
/// </summary>
/// <param name="contentType">ContentType内容</param>
/// <summary>
/// 是否为某个Mime
/// </summary>
/// <param name="mediaType"></param>
/// <returns></returns>
/// <summary>
/// 是否为json
/// </summary>
/// <returns></returns>
/// <summary>
/// 是否为xml
/// </summary>
/// <returns></returns>
/// <summary>
/// 提供委托的单一异常类型捕获
/// </summary>
/// <summary>
/// 捕获异常
/// </summary>
/// <typeparam name="TException"></typeparam>
/// <param name="action">操作</param>     
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 捕获异常
/// </summary>
/// <typeparam name="TException"></typeparam>
/// <param name="action">操作</param>    
/// <param name="onException">异常回调</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 表示Guid16位
/// </summary>
/// <summary>
/// 值
/// </summary>
/// <summary>
/// 表示空的Guid16
/// </summary>
/// <summary>
/// Guid16位
/// </summary>
/// <param name="val">值</param>
/// <summary>
/// 转换为字符串
/// </summary>
/// <returns></returns>
/// <summary>
/// 转换为64位整数
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回哈希值
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回是否与目标相等
/// </summary>
/// <param name="obj">目标</param>
/// <returns></returns>
/// <summary>
/// 返回是否与目标相等
/// </summary>
/// <param name="other">目标</param>
/// <returns></returns>
/// <summary>
/// 和目标比较大小
/// </summary>
/// <param name="other">目标</param>
/// <returns></returns>
/// <summary>
/// 创建新的Guid16
/// </summary>
/// <returns></returns>
/// <summary>
/// 转换为Guid16
/// </summary>
/// <param name="g">16位hex</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <returns></returns>
/// <summary>
/// 返回是否相等
/// </summary>
/// <param name="a"></param>
/// <param name="b"></param>
/// <returns></returns>
/// <summary>
/// 返回不相等
/// </summary>
/// <param name="a"></param>
/// <param name="b"></param>
/// <returns></returns>
/// <summary>
/// 提供URL的编码功能
/// </summary>
/// <summary>
/// 解析cookie
/// </summary>
/// <param name="cookieValues">cookie值</param>
/// <param name="useUrlEncode">是否对cookie的Value进行url utf-8编码</param>
/// <exception cref="CookieException"></exception>
/// <returns></returns>
/// <summary>
/// Url编码
/// </summary>
/// <param name="str">字符串</param>
/// <param name="encoding">编码</param>
/// <returns></returns>
/// <summary>
/// Url编码
/// </summary>
/// <param name="bytes">字节组</param>
/// <param name="offset">偏移量</param>
/// <param name="count">数量</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <returns></returns>
/// <summary>
/// Url编码
/// </summary>
/// <param name="bytes">字节组</param>
/// <param name="offset">偏移量</param>
/// <param name="count">数量</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <returns></returns>
// count them first
// nothing to expand?
// DevDiv 912606: respect "offset" and "count"
// expand not 'safe' characters into %XX, spaces to +s
/// <summary>
/// 验证要编码的参数
/// </summary>
/// <param name="bytes"></param>
/// <param name="offset"></param>
/// <param name="count"></param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <returns></returns>
/// <summary>
/// int转换为16进制
/// </summary>
/// <param name="n"></param>
/// <returns></returns>
/// <summary>
/// 返回是否为URL安全字符
/// </summary>
/// <param name="ch">字符</param>
/// <returns></returns>
/// <summary>
/// 表示式委托
/// </summary>
/// <summary>
/// 创建属性的设置委托
/// </summary>
/// <typeparam name="TDeclaring"></typeparam>
/// <typeparam name="TProperty"></typeparam>
/// <param name="property">属性</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
// (TDeclaring instance, TProperty value) => 
//    ((declaringType)instance).Set_XXX( (propertyType)value )
/// <summary>
/// 创建属性的获取委托
/// </summary>
/// <typeparam name="TDeclaring"></typeparam>
/// <typeparam name="TProperty"></typeparam>
/// <param name="property">属性</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 创建属性的获取委托
/// </summary>
/// <typeparam name="TDeclaring"></typeparam>
/// <typeparam name="TProperty"></typeparam>
/// <param name="declaringType">实例的类型</param>
/// <param name="propertyName">属性的名称</param>
/// <param name="propertyType">属性的类型</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
// (TDeclaring instance) => (propertyType)((declaringType)instance).propertyName
/// <summary>
/// 创建字段的获取委托
/// </summary>
/// <typeparam name="TDeclaring"></typeparam>
/// <typeparam name="TField"></typeparam>
/// <param name="field">字段</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
// (TDeclaring instance) => (fieldType)((declaringType)instance).fieldName
/// <summary>
/// 创建类型的构造器调用委托
/// </summary>
/// <typeparam name="TType"></typeparam>
/// <param name="type">类型</param>
/// <returns></returns>
/// <summary>
/// 创建类型的构造器调用委托
/// </summary>
/// <typeparam name="TArg1">第一个参数类型</typeparam>
/// <typeparam name="TType">类型</typeparam>
/// <param name="type">类型</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <returns></returns>
/// <summary>
/// 创建类型的构造器调用委托
/// </summary>
/// <typeparam name="TArg1">第一个参数类型</typeparam>
/// <typeparam name="TArg2">第二个参数类型</typeparam>
/// <typeparam name="TType">类型</typeparam>
/// <param name="type">类型</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <returns></returns>
/// <summary>
/// 创建类型的构造器调用委托
/// </summary>
/// <typeparam name="TFunc">构造器调用委托</typeparam>
/// <param name="type">类型</param>
/// <param name="args">参数类型</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <returns></returns>
/// <summary>
/// 提供请求头枚举到名称的转换
/// </summary>
/// <summary>
/// HttpRequestHeader的类型
/// </summary>
/// <summary>
/// 请求头枚举和名称的缓存
/// </summary>
/// <summary>
/// 请求头枚举到名称的转换
/// </summary>
/// <summary>
/// 返回枚举的DisplayName
/// </summary>
/// <param name="header">请求头枚举</param>
/// <returns></returns>
/// <summary>
/// 获取请求头名称
/// </summary>
/// <param name="header">请求头枚举</param>
/// <returns></returns>
/// <summary>
/// 表示Uri编辑器
/// </summary>
/// <summary>
/// uri的fragment
/// </summary>
/// <summary>
/// Path的索引
/// </summary>
/// <summary>
/// fragment长度
/// </summary>
/// <summary>
/// 当前的Uri
/// </summary>
/// <summary>
/// 当前的Uri是否可替换值
/// </summary>
/// <summary>
/// 获取当前的Uri
/// </summary>
/// <summary>
/// 获取Uri参数的编码
/// </summary>
/// <summary>
/// Uri编辑器
/// </summary>
/// <param name="uri">绝对路径的uri</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="UriFormatException"></exception>
/// <summary>
/// Url创建者
/// </summary>
/// <param name="uri">绝对路径的uri</param>
/// <param name="encoding">参数的编码</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="UriFormatException"></exception>
/// <summary>
/// 替换带有花括号的参数的值
/// </summary>
/// <param name="name">参数名称，不带花括号</param>
/// <param name="value">参数的值</param>
/// <returns>替换成功则返回true</returns>
/// <summary>
/// 添加参数
/// </summary>
/// <param name="name">参数名称</param>
/// <param name="value">参数的值</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 获取原始的PathAndQuery
/// </summary>
/// <returns></returns>
/// <summary>
/// 转换为字符串
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示参数内容为CancellationToken处理特性
/// </summary>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <returns></returns>
/// <summary>
/// 表示参数内容为FileInfo处理特性
/// </summary>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <returns></returns>
/// <summary>
/// 表示参数内容为IApiParameterable对象或其数组
/// </summary>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <returns></returns>
/// <summary>
/// 成员特性扩展
/// </summary>
/// <summary>
/// 获取成员的特性
/// </summary>
/// <typeparam name="TAttribute"></typeparam>
/// <param name="parameter">参数</param>
/// <param name="inherit"></param>
/// <returns></returns>
/// <summary>
/// 从方法或声明的类型中查找第一个特性
/// </summary>
/// <typeparam name="TAttribute"></typeparam>
/// <param name="method">方法</param>
/// <param name="inherit"></param>
/// <returns></returns>
/// <summary>
/// 从方法和声明的类型中查找所有特性
/// </summary>
/// <typeparam name="TAttribute"></typeparam>
/// <param name="method">方法</param>
/// <param name="inherit"></param>
/// <returns></returns>
/// <summary>
/// 获取成员的特性
/// </summary>
/// <typeparam name="TAttribute"></typeparam>
/// <param name="member">成员</param>
/// <param name="inherit"></param>
/// <returns></returns>
/// <summary>
/// 获取成员的特性
/// </summary>
/// <typeparam name="TAttribute"></typeparam>
/// <param name="member">成员</param>
/// <param name="inherit"></param>
/// <returns></returns>
/// <summary>
/// 提供集合扩展
/// </summary>
/// <summary>
/// 格式化集合
/// </summary>
/// <param name="collection">集合</param>
/// <param name="format">格式</param>
/// <returns></returns>
/// <summary>
/// 格式化集合
/// </summary>
/// <param name="collection">集合</param>
/// <param name="separator">分隔符</param>
/// <returns></returns>
/// <summary>
/// 转换为只读列表
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="source"></param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 提供FormatOptions的扩展
/// </summary>
/// <summary>
/// 转换为序列化配置项     
/// </summary>
/// <param name="options">格式化选项</param>
/// <param name="formatScope">序列化范围</param>
/// <returns></returns>
/// <summary>
/// IIgnoreWhenNullable接口扩展
/// </summary>
/// <summary>
/// 返回相对parameter的value值，是否应该忽略
/// </summary>
/// <param name="able"></param>
/// <param name="parameter"></param>
/// <returns></returns>
/// <summary>
/// 返回相对value值，是否应该忽略
/// </summary>
/// <param name="able"></param>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// Socket扩展
/// </summary>
/// <summary>
/// 异步连接
/// </summary>
/// <param name="socket">socket</param>
/// <param name="remoteEndPoint">远程终结点</param>
/// <param name="timeout">连接的超时时间</param>
/// <exception cref="SocketException"></exception>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="TimeoutException"></exception>
/// <returns></returns>
/// <summary>
/// 异步发送
/// </summary>
/// <param name="socket"></param>
/// <param name="arraySegment">缓冲区</param>
/// <param name="timeout">等待数据的超时时间</param>
/// <exception cref="SocketException"></exception>
/// <exception cref="TimeoutException"></exception>
/// <returns></returns>
/// <summary>
/// 异步接收
/// </summary>
/// <param name="socket"></param>
/// <param name="arraySegment">缓冲区</param>
/// <param name="timeout">等待数据的超时时间</param>
/// <exception cref="SocketException"></exception>
/// <exception cref="TimeoutException"></exception>
/// <returns></returns>
/// <summary>
/// 表示任务行为
/// </summary>
/// <typeparam name="TResult">任务结果类型</typeparam>
/// <summary>
/// 取消源
/// </summary>
/// <summary>
/// 任务源
/// </summary>
/// <summary>
/// 获取任务对象
/// </summary>
/// <summary>
/// 任务行为
/// </summary>
/// <summary>
/// 设置任务的行为结果
/// </summary>     
/// <param name="value">数据值</param>   
/// <returns></returns>
/// <summary>
/// 设置设置为异常
/// </summary>
/// <param name="ex">异常</param>
/// <returns></returns>
/// <summary>
/// 类型扩展
/// </summary>
/// <summary>
/// 类型是否AllowMultiple的缓存
/// </summary>
/// <summary>
/// 类型的默认值缓存
/// </summary>
/// <summary>
/// 表示0个元素的类型集合
/// </summary>
/// <summary>
/// 关联的AttributeUsageAttribute是否AllowMultiple
/// </summary>
/// <param name="type"></param>
/// <returns></returns>
/// <summary>
/// 返回类型的默认值
/// </summary>
/// <param name="type"></param>
/// <returns></returns>
/// <summary>
/// 是否可以从TBase类型派生
/// </summary>
/// <typeparam name="TBase"></typeparam>
/// <param name="type"></param>
/// <returns></returns>
/// <summary>
/// 返回type的详细类型
/// </summary>
/// <param name="type"></param>
/// <returns></returns>
/// <summary>
/// 转换为Type类型
/// </summary>
/// <param name="type"></param>
/// <returns></returns>
/// <summary>
/// 获取接口类型及其继承的接口的所有方法
/// 忽略HttpApi类型的所有接口的方法
/// </summary>
/// <param name="interfaceType">接口类型</param> 
/// <exception cref="ArgumentException"></exception>
/// <exception cref="NotSupportedException"></exception>
/// <returns></returns>
/// <summary>
/// 确保方法是支持的Api接口
/// </summary>
/// <exception cref="NotSupportedException"></exception>
/// <returns></returns>
/// <summary>
/// 返回方法的完整名称
/// </summary>
/// <param name="method">方法</param>
/// <returns></returns>
/// <summary>
/// 返回类型不含namespace的名称
/// </summary>
/// <param name="type">类型</param>
/// <returns></returns>
/// <summary>
/// 表示自主管理生命周期的HttpApiConfig
/// </summary>
/// <summary>
/// 自主生命周期管理的HttpApiConfig
/// </summary>
/// <param name="handler"></param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 这里不释放资源
/// </summary>
/// <param name="disposing"></param>
// 如果是Finalize调用，则保持基类的Dispose逻辑
/// <summary>
/// 表示自主管理生命周期的的HttpMessageHandler
/// </summary>
/// <summary>
/// 生命周期
/// </summary>
/// <summary>
/// Token取消源
/// </summary>
/// <summary>
/// 具有生命周期的HttpHandler
/// </summary>
/// <param name="handler">HttpHandler</param>
/// <param name="lifeTime">拦截器的生命周期</param>
/// <param name="deactivateAction">失效回调</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 这里不释放资源
/// </summary>
/// <param name="disposing"></param>
/// <summary>
/// 表示LifetimeHttpHandler清理器
/// </summary>
/// <summary>
/// 当前监视生命周期的记录的数量
/// </summary>
/// <summary>
/// 监视生命周期的记录队列
/// </summary>
/// <summary>
/// 获取或设置清理的时间间隔
/// 默认10s
/// </summary>
/// <summary>
/// 添加要清除的httpHandler
/// </summary>
/// <param name="handler">httpHandler</param>
// 从0变为1，要启动清理作业
/// <summary>
/// 启动清理作业
/// </summary>
// 这是应该不可能发生的
/// <summary>
/// 清理失效的拦截器
/// 返回是否完全清理
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示监视生命周期的记录
/// </summary>
/// <summary>
/// 用于释放资源的对象
/// </summary>
/// <summary>
/// 监视对象的弱引用
/// </summary>
/// <summary>
/// 获取是否可以释放资源
/// </summary>
/// <returns></returns>
/// <summary>
/// 监视生命周期的记录
/// </summary>
/// <param name="handler">激活状态的httpHandler</param>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing"></param>
/// <summary>
/// 表示http请求的bson内容
/// </summary>
/// <summary>
/// 获取对应的ContentType
/// </summary>
/// <summary>
/// http请求的bson内容
/// </summary>
/// <param name="bson">bson内容</param>
/// <summary>
/// 表示http请求的json内容
/// </summary>
/// <summary>
/// 获取对应的ContentType
/// </summary>
/// <summary>
/// http请求的json内容
/// </summary>
/// <param name="json">json内容</param>
/// <param name="encoding">编码</param>
/// <summary>
/// 表示http请求的JsonPatch内容
/// </summary>
/// <summary>
/// 获取对应的ContentType
/// </summary>
/// <summary>
/// http请求的JsonPatch内容
/// </summary>
/// <param name="json">json内容</param>
/// <param name="encoding">编码</param>
/// <summary>
/// 表示文件内容
/// </summary>
/// <summary>
/// 文件内容
/// </summary>
/// <param name="stream">文件流</param>
/// <param name="name">名称</param>
/// <param name="fileName">文件名</param>
/// <param name="contentType">文件Mime</param>
/// <summary>
/// 转换为省略内容的HttpContent
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示省略内容的文件请求内容
/// </summary>
/// <summary>
/// 省略号内容
/// </summary>
/// <summary>
/// 省略内容的文件请求内容
/// </summary>
/// <param name="fileContent">文件内容</param>
/// <summary>
/// 表示文本内容
/// </summary>
/// <summary>
/// 文本内容
/// </summary>     
/// <param name="name">名称</param>
/// <param name="value">文本</param>
/// <summary>
/// 表示form-data表单
/// </summary>
/// <summary>
/// 分隔符
/// </summary>
/// <summary>
/// 省略文件内容的MultipartContent    
/// </summary>
/// <summary>
/// 获取对应的ContentType
/// </summary>
/// <summary>
/// form-data表单
/// </summary>
/// <summary>
/// form-data表单
/// </summary>
/// <param name="boundary">分隔符</param>
/// <summary>
/// 读取为文本信息
/// </summary>
/// <returns></returns>
/// <summary>
/// 创建省略文件内容的MultipartContent
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示键值对表单内容
/// </summary>
/// <summary>
/// 用于保存表单内容
/// </summary>
/// <summary>
/// 默认的http编码
/// </summary>
/// <summary>
/// 获取对应的ContentType
/// </summary>
/// <summary>
/// 键值对表单内容
/// </summary>
/// <summary>
/// 从HttpContent转换得到
/// </summary>
/// <param name="httpContent">httpContent实例</param>
/// <param name="disposeHttpContent">是否释放httpContent</param>
/// <returns></returns>
/// <summary>
/// 添加键值对
/// </summary>
/// <param name="keyValues">键值对</param>
/// <returns></returns>
/// <summary>
/// 添加原始表单
/// </summary>
/// <param name="form">表单内容</param>
/// <returns></returns>
/// <summary>
/// 添加二进制数据内容
/// </summary>
/// <param name="buffer">数据内容</param>
/// <returns></returns>
/// <summary>
/// 表单编码
/// </summary>
/// <param name="value">值</param>
/// <returns></returns>
/// <summary>
/// 计算内容长度
/// </summary>
/// <param name="length"></param>
/// <returns></returns>
/// <summary>
/// 创建只读流
/// </summary>
/// <returns></returns>
/// <summary>
/// 序列化到目标流中
/// </summary>
/// <param name="stream">目标流</param>
/// <param name="context">上下文</param>
/// <returns></returns>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing"></param>
/// <summary>
/// 表示http请求的xml内容
/// </summary>
/// <summary>
/// 获取对应的ContentType
/// </summary>
/// <summary>
/// http请求的xml内容
/// </summary>
/// <param name="xml">xml内容</param>
/// <param name="encoding">编码</param>
/// <summary>
/// 默认的HttpClientHandler
/// </summary>
/// <summary>
/// Uri集合
/// </summary>
/// <summary>
/// 每个服务的最大连接数设置器
/// </summary>
/// <summary>
/// 静态构造器
/// </summary>
/// <summary>
/// HttpClientHandler
/// </summary>
/// <summary>
/// 发送请求
/// </summary>
/// <param name="request"></param>
/// <param name="cancellationToken"></param>
/// <returns></returns>
// 通过ServicePoint设置最大连接数
/// <summary>
/// 查找Uri对应的ServicePoint
/// </summary>
/// <param name="address"></param>
/// <returns></returns>
/// <summary>
/// 表示Uri集合
/// </summary>
/// <summary>
/// 同步锁
/// </summary>
/// <summary>
/// 站点地址
/// </summary>
/// <summary>
/// 添加Uri
/// </summary>
/// <param name="uri"></param>
/// <returns></returns>
/// <summary>
/// Uri比较器
/// </summary>
/// <summary>
/// 默认的HttpClientHandler
/// </summary>
/// <summary>
/// HttpClientHandler
/// </summary>
/// <summary>
/// 表示HttpClientHandler包装为IHttpClientHandler
/// </summary>
/// <summary>
/// 内部的HttpClientHandler
/// </summary>
/// <summary>
/// 获取原始的Handler对象
/// </summary>
/// <summary>
/// 获取或设置是否使用CookieContainer来管理Cookies
/// </summary>
/// <summary>
/// 获取是否支持重定向设置
/// </summary>
/// <summary>
/// 获取是否支持代理
/// </summary>
/// <summary>
/// 获取是否支持压缩传输
/// </summary>
/// <summary>
/// 获取或设置代理
/// </summary>
/// <summary>
/// 获取或设置是否对请求进行预身份验证
/// </summary>
/// <summary>
/// 获取或设置每个响应的最大重定向次数
/// </summary>
/// <summary>
/// 获取或设置最大请求内容字节长度
/// </summary>
/// <summary>
/// 获取或设置凭证信息
/// </summary>
/// <summary>
/// 获取或设置Cookie管理容器
/// </summary>
/// <summary>
/// 获取或设置客户端证书选项
/// </summary>
/// <summary>
/// 获取或设置压缩方式
/// </summary>
/// <summary>
/// 获取或设置是否支持自动重定向
/// </summary>
/// <summary>
/// 获取或设置是否使用默认的凭证信息
/// </summary>
/// <summary>
/// 获取或设置是否使用代理
/// </summary>
/// <summary>
/// 获取或设置SSL版本
/// </summary>
/// <summary>
/// 获取或设置默认代理凭证
/// </summary>
/// <summary>
/// 获取或设置是否验证撤销的证书
/// </summary>
/// <summary>
/// 获取或设置证书列表
/// </summary>
/// <summary>
/// 获取或设置每个服务器的最大连接数
/// </summary>
/// <summary>
/// 获取或设置最大响应头的字节长度
/// </summary>
/// <summary>
/// 设置服务器证书验证委托
/// </summary>
/// <summary>
/// HttpClientHandler包装为IHttpClientHandler
/// </summary>
/// <param name="clientHandler">内部的clientHandler</param>
/// <param name="sourceHandler">原始Handler</param>
/// <summary>
/// 释放资源
/// </summary>
/// <summary>
/// 表示SocketsHttpHandler包装为IHttpClientHandler
/// </summary>
/// <summary>
/// 内部的SocketsHttpHandler
/// </summary>
/// <summary>
/// 获取原始的Handler对象
/// </summary>
/// <summary>
/// 获取是否支持重定向设置
/// </summary>
/// <summary>
/// 获取是否支持代理
/// </summary>
/// <summary>
/// 获取是否支持压缩传输
/// </summary>
/// <summary>
/// 获取或设置最大请求内容字节长度
/// </summary>
/// <summary>
/// 获取或设置客户端证书选项
/// </summary>
/// <summary>
/// 获取或设置是否使用默认的凭证信息
/// </summary>
/// <summary>
/// 获取或设置是否使用CookieContainer来管理Cookies
/// </summary>
/// <summary>
/// 获取或设置代理
/// </summary>
/// <summary>
/// 获取或设置是否对请求进行预身份验证
/// </summary>
/// <summary>
/// 获取或设置每个响应的最大重定向次数
/// </summary>
/// <summary>
/// 获取或设置凭证信息
/// </summary>
/// <summary>
/// 获取或设置Cookie管理容器
/// </summary>
/// <summary>
/// 获取或设置压缩方式
/// </summary>
/// <summary>
/// 获取或设置是否支持自动重定向
/// </summary>
/// <summary>
/// 获取或设置是否使用代理
/// </summary>
/// <summary>
/// 获取或设置SSL版本
/// </summary>
/// <summary>
/// 获取或设置默认代理凭证
/// </summary>
/// <summary>
/// 获取或设置是否验证撤销的证书
/// </summary>
/// <summary>
/// 获取或设置证书列表
/// </summary>
/// <summary>
/// 获取或设置每个服务器的最大连接数
/// </summary>
/// <summary>
/// 获取或设置最大响应头的字节长度
/// </summary>
/// <summary>
/// 设置服务器证书验证委托
/// </summary>
/// <summary>
/// SocketsHttpHandler包装为IHttpClientHandler
/// </summary>
/// <param name="socketsHandler">内部的SocketsHttpHandler</param>
/// <param name="sourceHandler">原始Handler</param>
/// <summary>
/// 释放资源
/// </summary>
/// <summary>
/// HttpHandler提供者
/// </summary>
/// <summary>
/// HttpMessageInvoker的HttpMessageHandler字段获取委托
/// </summary>
/// <summary>
/// 获取是否支持
/// </summary>
/// <summary>
/// HttpHandler提供者
/// </summary>
/// <summary>
/// 从HttpClient获得IHttpHandler
/// </summary>
/// <param name="httpClient">httpClient</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="PlatformNotSupportedException"></exception>
/// <returns></returns>
/// <summary>
/// 从HttpMessageHandler获得IHttpHandler包装
/// </summary>
/// <param name="handler">HttpMessageHandler实例</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <returns></returns>
/// <summary>
/// 获取HttpMessageHandler关联的HttpClientHandler或SocketsHttpHandler
/// 返回其IHttpHandler包装
/// </summary>       
/// <param name="innerHandler">当前Handler</param>
/// <param name="sourceHandler">原始的Handler</param>
/// <exception cref="ArgumentException"></exception>
/// <returns></returns>
/// <summary>
/// 定义自定义输出内容的接口
/// </summary>
/// <summary>
/// 读取为文本信息
/// </summary>
/// <returns></returns>
/// <summary>
/// 定义支持DateTimeFormat的配置
/// </summary>
/// <summary>
/// 获取或设置时期时间格式
/// </summary>
/// <summary>
/// 定义支持Encoding的配置
/// </summary>
/// <summary>
/// 获取或设置参数的编码名称
/// </summary>
/// <summary>
/// 定义支持IgnoreWhenNull的配置
/// </summary>
/// <summary>
/// 获取或设置当值为null是否忽略提交
/// 默认为false
/// </summary>
/// <summary>
/// 表示HttpApi代理描述
/// 提供HttpApi代理类的实例化
/// </summary>
/// <summary>
/// 接口类型与代理描述缓存
/// </summary>
/// <summary>
/// 搜索接口的代理类型并实例化
/// </summary>
/// <param name="interfaceType">接口类型</param>
/// <param name="interceptor">拦截器</param>
/// <exception cref="TypeLoadException"></exception>
/// <returns></returns>
/// <summary>
/// 查找代理类型
/// </summary>
/// <param name="interfaceType">接口类型</param>
/// <returns></returns>
/// <summary>
/// 返回target类型是否为代理类型
/// </summary>
/// <param name="interfaceType">接口类型</param>
/// <param name="targetType">目标类型 </param>
/// <returns></returns>
/// <summary>
/// 表示HttpApi代理描述
/// 提供HttpApi代理类的实例化
/// </summary>
/// <summary>
/// 代理类型的创建工厂
/// </summary>
/// <summary>
/// 获取代理类型
/// </summary>
/// <summary>
/// 获取接口声明的Api方法
/// </summary>
/// <summary>
/// 代理描述
/// </summary>
/// <param name="proxyType">代理类型</param>
/// <param name="apiMethods">接口声明的api方法</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 创建新的HttpApi代理实例
/// </summary>
/// <param name="interceptor">拦截器</param>
/// <returns></returns>
/// <summary>
/// 表示HttpApi代理描述
/// 提供HttpApi代理类的实例化
/// </summary>
/// <summary>
/// IApiInterceptor的Intercept方法
/// </summary>
/// <summary>
/// HttpApi的构造器
/// </summary>
/// <summary>
/// 代理类型的构造器的参数类型
/// </summary>
/// <summary>
/// 接口类型与代理描述缓存
/// </summary>
/// <summary>
/// 返回HttpApi代理类的实例
/// </summary>
/// <param name="interfaceType">接口类型</param>
/// <param name="interceptor">拦截器</param>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="NotSupportedException"></exception>
/// <returns></returns>
// 接口的实现在动态程序集里，所以接口必须为public修饰才可以创建代理类并实现此接口            
/// <summary>
/// 返回创建的接口的代理代理类型
/// </summary>
/// <param name="interfaceType">接口类型</param>
/// <param name="apiMethods">接口方法集合</param>
/// <returns></returns>
/// <summary>
/// 生成代理类型的字段
/// </summary>
/// <param name="builder">类型生成器</param>
/// <param name="fieldName">字段名称</param>
/// <param name="fieldType">字段类型</param>
/// <returns></returns>
/// <summary>
/// 生成代理类型的构造器
/// </summary>
/// <param name="builder">类型生成器</param>
/// <param name="fieldInterceptor">拦截器字段</param>
/// <param name="fieldApiMethods">接口方法集合字段</param>
/// <returns></returns>
// .ctor(IApiInterceptor interceptor, MethodInfo[] methods):base(interceptor)          
// this.interceptor = 第一个参数
// this.apiMethods = 第二个参数
/// <summary>
/// 生成代理类型的接口实现方法
/// </summary>
/// <param name="builder">类型生成器</param>
/// <param name="apiMethods">接口方法集合</param>
/// <param name="fieldInterceptor">拦截器字段</param>
/// <param name="fieldApiMethods">接口方法集合字段</param>
// this.interceptor
// 加载target参数
// 加载method参数 this.apiMethods[i]
// var parameters = new object[parameters.Length]
// 加载parameters参数
// Intercep(this, method, parameters)
/// <summary>
/// 提供异常处理的请求任务
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <summary>
/// 请求任务创建的委托
/// </summary>
/// <summary>
/// 异常处理的请求任务
/// </summary>
/// <param name="invoker">请求任务创建的委托</param>
/// <summary>
/// 创建请求任务
/// </summary>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时返回指定结果
/// </summary>
/// <typeparam name="TException"></typeparam>
/// <param name="func">获取结果</param>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时返回指定结果
/// </summary>
/// <typeparam name="TException"></typeparam>
/// <param name="func">获取结果</param>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时返回指定结果
/// </summary>
/// <typeparam name="TException"></typeparam>
/// <param name="func">获取结果</param>
/// <returns></returns>
/// <summary>
/// 表示支持重试的Api请求任务
/// </summary>
/// <typeparam name="TResult">结果类型</typeparam>
/// <summary>
/// 请求任务创建的委托
/// </summary>
/// <summary>
/// 获取最大重试次数
/// </summary>
/// <summary>
/// 获取各次重试的延时时间
/// </summary>
/// <summary>
/// 支持重试的Api请求任务
/// </summary>
/// <param name="invoker">请求任务创建的委托</param>
/// <param name="maxRetryCount">最大尝试次数</param>
/// <param name="retryDelay">各次重试的延时时间</param>
/// <exception cref="ArgumentOutOfRangeException"></exception>
/// <summary>
/// 创建请求任务
/// </summary>
/// <returns></returns>
/// <summary>
/// 执行前延时
/// </summary>
/// <param name="index"></param>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时进行Retry
/// </summary>
/// <typeparam name="TException">异常类型</typeparam>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时进行Retry
/// </summary>
/// <typeparam name="TException">异常类型</typeparam>
/// <param name="handler">捕获到指定异常时</param>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时进行Retry
/// </summary>
/// <typeparam name="TException">异常类型</typeparam>
/// <param name="predicate">返回true才Retry</param>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时进行Retry
/// </summary>
/// <typeparam name="TException">异常类型</typeparam>
/// <param name="handler">捕获到指定异常时</param>
/// <returns></returns>
/// <summary>
/// 当捕获到异常时进行Retry
/// </summary>
/// <typeparam name="TException">异常类型</typeparam>
/// <param name="predicate">返回true才Retry</param>
/// <returns></returns>
/// <summary>
/// 当结果符合条件时进行Retry
/// </summary>
/// <param name="predicate">条件</param>
/// <returns></returns>
/// <summary>
/// 当结果符合条件时进行Retry
/// </summary>
/// <param name="predicate">条件</param>
/// <returns></returns>
/// <summary>
/// 表示重试标记的异常
/// </summary>
/// <summary>
/// 重试标记的异常
/// </summary>
/// <param name="inner">内部异常</param>
/// <summary>
/// 表示Api请求的异步任务抽象类
/// </summary>
/// <summary>
/// 完成的任务
/// </summary>
/// <returns></returns>
/// <summary>
/// 完成的任务
/// </summary>
/// <returns></returns>
/// <summary>
/// 获取或设置上下文创建工厂
/// </summary>
/// <summary>
/// 执行任务
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示Api请求的异步任务
/// </summary>
/// <typeparam name="TResult">结果类型</typeparam>
/// <summary>
/// 执行InvokeAsync
/// 并返回其TaskAwaiter对象
/// </summary>
/// <returns></returns>
/// <summary>
/// 配置用于等待的等待者
/// </summary>
/// <param name="continueOnCapturedContext">试图继续回夺取的原始上下文，则为 true；否则为 false</param>
/// <returns></returns>
/// <summary>
/// 执行任务
/// </summary>
/// <returns></returns>
/// <summary>
/// 创建请求任务
/// </summary>
/// <returns></returns>
/// <summary>
/// 创建请求任务
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示任务的Rx
/// </summary>
/// <typeparam name="TResult"></typeparam>
/// <summary>
/// 任务
/// </summary>
/// <summary>
/// 观察者列表
/// </summary>
/// <summary>
/// 任务的Rx
/// </summary>
/// <param name="task">任务</param>
/// <summary>
/// 任务完成时
/// </summary>
/// <param name="t"></param>
/// <summary>
/// 响应观察者
/// </summary>
/// <param name="observer"></param>
/// <param name="t"></param>
/// <summary>
/// 订阅
/// </summary>
/// <param name="onResult">收到结果委托</param>
/// <param name="onError">遇到错误委托</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 订阅
/// </summary>
/// <param name="observer">观察者</param>
/// <returns></returns>
/// <summary>
/// 表示观察者列表
/// 线程安全类型 
/// </summary>
/// <typeparam name="T"></typeparam>
/// <summary>
/// 是否触发过
/// </summary>
/// <summary>
/// 同步锁
/// </summary>
/// <summary>
/// 观察者列表
/// </summary>
/// <summary>
/// 添加观察者
/// 如果已触发任务完成，则返回false
/// </summary>
/// <param name="observer">观察者</param>
/// <returns></returns>
/// <summary>
/// 移除观察者
/// </summary>
/// <param name="observer">观察者</param>
/// <summary>
/// 触发有结果值到所有观察者
/// </summary>
/// <param name="value">结果值</param>
/// <summary>
/// 触发有异常到所有观察者
/// </summary>
/// <param name="ex">异常</param>
/// <summary>
/// 表示订阅取消器
/// </summary>
/// <typeparam name="T"></typeparam>
/// <summary>
/// 取消委托
/// </summary>
/// <summary>
/// 订阅取消器
/// </summary>
/// <param name="onUnsubscribe">取消委托</param>
/// <summary>
/// 取消订阅
/// </summary>
/// <summary>
/// 表示任务的观察者
/// </summary>
/// <typeparam name="T"></typeparam>
/// <summary>
/// 有值更新委托
/// </summary>
/// <summary>
/// 错误委托
/// </summary>
/// <summary>
/// 完成委托
/// </summary>
/// <summary>
/// 任务的观察者
/// </summary>
/// <param name="onNext">有值更新委托</param>
/// <param name="onError">错误委托</param>
/// <param name="onCompleted">完成委托</param>
/// <summary>
/// 完成触发
/// </summary>
/// <summary>
/// 错误触发
/// </summary>
/// <param name="error"></param>
/// <summary>
/// 有值更新触发
/// </summary>
/// <param name="value"></param>
/// <summary>
/// 表示将自身作为请求的授权
/// </summary>
/// <summary>
/// 体系
/// </summary>
/// <summary>
/// 参数
/// </summary>
/// <summary>
/// 授权信息
/// </summary>
/// <param name="scheme">体系</param>
/// <param name="parameter">参数</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 执行请求前
/// </summary>
/// <param name="context"></param>
/// <param name="parameter"></param>
/// <returns></returns>
/// <summary>
/// 返回授权信息
/// </summary>
/// <returns></returns>
/// <summary>
/// 转换为文本
/// </summary>
/// <returns></returns>
/// <summary>
/// 转换为AuthenticationHeaderValue类型
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示将自身作为请求的基本授权
/// </summary>
/// <summary>
/// 基本授权
/// </summary>
/// <param name="userName">账号</param>
/// <param name="password">密码</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 获取基础认证的参数
/// </summary>
/// <param name="userName">账号</param>
/// <param name="password">密码</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 表示将自身作为请求的Bearer体系授权
/// </summary>
/// <summary>
/// Bearer体系授权信息
/// </summary>
/// <param name="token">令牌</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 表示将自身作为x-www-form-urlencoded的字段
/// </summary>
/// <summary>
/// 文本内容
/// </summary>
/// <summary>
/// 获取或设置当值为null是否忽略提交
/// 默认为false
/// </summary>
/// <summary>
/// 将自身作为x-www-form-urlencoded的字段
/// </summary>     
/// <param name="value">文本内容</param>
/// <summary>
/// x-www-form-urlencoded的字段
/// 如果有[FormContent]的参数，FormField需要放在其后
/// </summary>     
/// <param name="value">文本内容</param>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <returns></returns>
/// <summary>
/// 从string类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从int类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从int?类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从decimal类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从decimal?类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从float类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从float?类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从double类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从double?类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从DateTime类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从DateTime?类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 表示将自身作为JsonPatch请求内容
/// </summary>
/// <summary>
/// 表示patch请求方式
/// </summary>
/// <summary>
/// 操作列表
/// </summary>
/// <summary>
/// Add操作
/// </summary>
/// <param name="path">json路径</param>
/// <param name="value">值</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// Remove操作
/// </summary>
/// <param name="path">json路径</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// Replace操作
/// </summary>
/// <param name="path">json路径</param>
/// <param name="value">替换后的值</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 执行请求前
/// </summary>
/// <param name="context"></param>
/// <param name="parameter"></param>
/// <returns></returns>
/// <summary>
/// 调试视图
/// </summary>
/// <summary>
/// 调试的目标
/// </summary>
/// <summary>
/// 调试视图
/// </summary>
/// <param name="target">查看的对象</param>
/// <summary>
/// 查看的内容
/// </summary>
/// <summary>
/// 表示将自身作为JsonPatch请求内容
/// </summary>
/// <typeparam name="T"></typeparam>
/// <summary>
/// 属性名称是否使用骆驼命名
/// </summary>
/// <summary>
/// 将自身作为JsonPatch请求内容
/// </summary>
/// <param name="camelCase">属性名称是否使用骆驼命名</param>
/// <summary>
/// Replace操作
/// </summary>
/// <typeparam name="TField"></typeparam>
/// <param name="pathSelector">path选择器</param>
/// <param name="value">替换成的值</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// Remove操作
/// </summary>
/// <typeparam name="TField"></typeparam>
/// <param name="pathSelector">path选择器</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 返回表示式对应的path
/// </summary>
/// <param name="pathSelector">path选择器</param>
/// <returns></returns>
/// <summary>
/// 返回成员的名称
/// </summary>
/// <param name="member">成员</param>
/// <returns></returns>
/// <summary>
/// 表示Path访问器
/// </summary>
/// <summary>
/// 属性名称是否使用骆驼命名
/// </summary>
/// <summary>
/// 成员名称委托
/// </summary>
/// <summary>
/// path变量
/// </summary>
/// <summary>
/// 属性名称缓存
/// </summary>
/// <summary>
/// Path访问器
/// </summary>
/// <param name="pathSelector">表达式</param>
/// <param name="nameFunc">成员名称委托</param>
/// <param name="camelCase">属性名称是否使用骆驼命名</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 访问成员时
/// </summary>
/// <param name="node"></param>
/// <returns></returns>
/// <summary>
/// 访问二元表达式
/// </summary>
/// <param name="node"></param>
/// <returns></returns>
/// <summary>
/// 转换为字符串
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示将自身作为multipart/form-data的一个文件项
/// </summary>
/// <summary>
/// 指示是否可以dispose传入的stream
/// </summary>
/// <summary>
/// 总字节数
/// </summary>
/// <summary>
/// 记录当前字节数
/// </summary>
/// <summary>
/// 获取或设置包装的内部数据流
/// </summary>
/// <summary>
/// 上传进度变化事件
/// </summary>
/// <summary>
/// 获取文件好友名称
/// </summary>
/// <summary>
/// 获取编码后的文件好友名称
/// </summary>
/// <summary>
/// 获取或设置文件的Mime
/// </summary>
/// <summary>
/// 返回是否可读
/// </summary>
/// <summary>
/// 返回是否可探索位置
/// </summary>
/// <summary>
/// 返回是否可写
/// </summary>
/// <summary>
/// 返回数据流长度
/// </summary>
/// <summary>
/// 获取或设置数据流当前的指针位置
/// </summary>
/// <summary>
/// 获取或设置读取的超时时间
/// </summary>
/// <summary>
/// 获取或设置写入的超时时间
/// </summary>
/// <summary>
/// 获取一个值，该值确定当前流是否可以超时
/// </summary>
/// <summary>
/// multipart/form-data的一个文件项
/// </summary>
/// <param name="localFilePath">本地文件路径</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="FileNotFoundException"></exception>
/// <summary>
/// 将自身作为multipart/form-data的一个文件项
/// </summary>
/// <param name="buffer">数据</param>
/// <param name="fileName">文件友好名称</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 将自身作为multipart/form-data的一个文件项
/// </summary>
/// <param name="stream">数据流</param>
/// <param name="fileName">文件友好名称</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 将自身作为multipart/form-data的一个文件项
/// </summary>
/// <param name="stream">数据流</param>
/// <param name="fileName">文件友好名称</param>
/// <param name="disposeStream">指示是否可以dispose传入的stream</param>
/// <exception cref="ArgumentNullException"></exception>
/// <summary>
/// 执行请求前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <summary>
/// 执行请求前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <summary>
/// 冲刷缓冲
/// </summary>
/// <summary>
/// 冲刷缓冲
/// </summary>
/// <param name="cancellationToken">取消令牌</param>
/// <returns></returns>
/// <summary>
/// 定位到指定指针位置
/// </summary>
/// <param name="offset">偏移量</param>
/// <param name="origin">定位源</param>
/// <returns></returns>
/// <summary>
/// 设置流的长度
/// </summary>
/// <param name="value">长度值</param>
/// <summary>
/// 开始读取数据流
/// </summary>
/// <param name="buffer">缓冲区</param>
/// <param name="offset">缓冲区偏移量</param>
/// <param name="count">读取的大小</param>
/// <param name="callback">回调</param>
/// <param name="state">用户状态数据</param>
/// <returns></returns>
/// <summary>
/// 读取完成
/// </summary>
/// <param name="asyncResult">异步结果</param>
/// <returns></returns>
/// <summary>
/// 关闭流
/// </summary>
/// <summary>
/// 读取流到缓冲区
/// </summary>
/// <param name="buffer">缓冲区</param>
/// <param name="offset">偏移量</param>
/// <param name="count">读取的大小</param>
/// <returns></returns>
/// <summary>
/// 读取流到缓冲区
/// </summary>
/// <param name="buffer">缓冲区</param>
/// <param name="offset">偏移量</param>
/// <param name="count">读取的大小</param>
/// <param name="cancellationToken">取消令牌</param>
/// <returns></returns>
/// <summary>
/// 读取数据
/// </summary>
/// <param name="length">数据长度</param>
/// <summary>
/// 触发上传进度变化事件
/// </summary>
/// <param name="e"></param>
/// <summary>
/// 写入数据到流
/// </summary>
/// <param name="buffer">数据</param>
/// <param name="offset">偏移量</param>
/// <param name="count">写入的长度</param>
/// <summary>
/// 释放资源
/// </summary>
/// <param name="disposing"></param>
/// <summary>
/// 调试视图
/// </summary>
/// <summary>
/// 查看的对象
/// </summary>
/// <summary>
/// 调试视图
/// </summary>
/// <param name="target">查看的对象</param>
/// <summary>
/// 获取文件好友名称
/// </summary>
/// <summary>
/// 获取编码后的文件好友名称
/// </summary>
/// <summary>
/// 获取或设置文件的Mime
/// </summary>
/// <summary>
/// 返回数据流长度
/// </summary>
/// <summary>
/// 表示将自身作为multipart/form-data的一个文本项
/// </summary>
/// <summary>
/// 文本内容
/// </summary>
/// <summary>
/// 获取或设置当值为null是否忽略提交
/// 默认为false
/// </summary>
/// <summary>
/// 将自身作为multipart/form-data的一个文本项
/// </summary>     
/// <param name="value">文本内容</param>
/// <summary>
/// multipart/form-data的一个文本项
/// </summary>     
/// <param name="value">文本内容</param>
/// <summary>
/// http请求之前
/// </summary>
/// <param name="context">上下文</param>
/// <param name="parameter">特性关联的参数</param>
/// <returns></returns>
/// <summary>
/// 从string类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从int类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从int?类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从decimal类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从decimal?类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从float类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从float?类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从double类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从double?类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从DateTime类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 从DateTime?类型隐式转换
/// </summary>
/// <param name="value"></param>
/// <returns></returns>
/// <summary>
/// 诊断描述器
/// </summary>
/// <summary>
/// 特性诊断描述器
/// </summary>
/// <summary>
/// 方法返回类型诊断描述器
/// </summary>
/// <summary>
/// 引用参数诊断描述器
/// </summary>
/// <summary>
/// 非方法声明诊断描述器
/// </summary>
/// <summary>
/// 泛型方法诊断描述器
/// </summary>
/// <summary>
/// UriAttribute诊断描述器
/// </summary>
/// <summary>
/// HttpApi.Create Api诊断描述器
/// </summary>
//github.com/dotnetcore/WebApiClient/wiki/WebApiClient%E8%BF%9B%E9%98%B6");
/// <summary>
/// 创建诊断描述器
/// </summary>
/// <param name="id"></param>
/// <param name="title"></param>
/// <param name="message"></param>
/// <param name="helpLinkUri"></param>
/// <returns></returns>
//github.com/dotnetcore/WebApiClient/wiki/WebApiClient%E5%9F%BA%E7%A1%80";
/// <summary>
/// 表示HttpApi上下文
/// </summary>
/// <summary>
/// IHttpApi的类型名称
/// </summary>
/// <summary>
/// UriAttribue的类型名称
/// </summary>
/// <summary>
/// AttributeCtorUsageAttribute的类型名称
/// </summary>
/// <summary>
/// 获取语法节点上下文
/// </summary>
/// <summary>
/// 获取接口声明语法
/// </summary>
/// <summary>
/// 获取是否为HttpApi
/// </summary>
/// <summary>
/// 获取IHttpApi的类型
/// </summary>
/// <summary>
/// 获取UriAttribute的类型
/// </summary>
/// <summary>
/// 获取AttributeCtorUsageAttribute的类型
/// </summary>
/// <summary>
/// HttpApi上下文
/// </summary>
/// <param name="syntaxNodeContext"></param>
/// <summary>
/// 返回是否为HttpApi接口
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示HttpApi诊断器抽象类
/// </summary>
/// <summary>
/// 获取上下文
/// </summary>
/// <summary>
/// 获取诊断描述
/// </summary>
/// <summary>
/// HttpApi诊断器
/// </summary>
/// <param name="context">上下文</param>
/// <summary>
/// 创建诊断结果
/// </summary>
/// <param name="location"></param>
/// <param name="messageArgs"></param>
/// <returns></returns>
/// <summary>
/// 返回HttpApi的所有方法
/// </summary>
/// <returns></returns>
/// <summary>
/// 报告诊断结果
/// </summary>
/// <summary>
/// 返回所有的报告诊断
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示调用上下文
/// </summary>
/// <summary>
/// 获取语法节点上下文
/// </summary>
/// <summary>
/// 获取调用语法树
/// </summary>
/// <summary>
/// 获取是否为方法调用
/// </summary>
/// <summary>
/// 获取调用的方法
/// </summary>
/// <summary>
/// 调用上下文
/// </summary>
/// <param name="syntaxNodeContext"></param>
/// <summary>
/// 表示调用诊断器
/// </summary>
/// <summary>
/// 获取上下文
/// </summary>
/// <summary>
/// 获取诊断描述
/// </summary>
/// <summary>
/// 调用诊断器
/// </summary>
/// <param name="context">调用上下文</param>
/// <summary>
/// 创建诊断结果
/// </summary>
/// <param name="location"></param>
/// <param name="messageArgs"></param>
/// <returns></returns>
/// <summary>
/// 报告诊断结果
/// </summary>
/// <summary>
/// 返回的报告诊断
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示WebApiClient诊断分析器
/// </summary>
/// <summary>
/// 获取所支持的诊断
/// </summary>
/// <summary>
/// 初始化
/// </summary>
/// <param name="context">上下文</param>
/// <summary>
/// 返回所有HttpApi诊断器
/// </summary>
/// <param name="context"></param>
/// <returns></returns>
/// <summary>
/// 返回所有的调用诊断器
/// </summary>
/// <param name="context"></param>
/// <returns></returns>
/// <summary>
/// 表示特性构造函数诊断器
/// </summary>
/// <summary>
/// /// <summary>
/// 获取诊断描述
/// </summary>
/// </summary>
/// <summary>
/// 特性构造函数诊断器
/// </summary>
/// <param name="context">上下文</param>
/// <summary>
/// 返回所有的报告诊断
/// </summary>
/// <returns></returns>
/// <summary>
/// 获取接口已诊断的特性
/// </summary>
/// <param name="interfaceSymbol">类型</param>
/// <returns></returns>
/// <summary>
/// 获取方法已诊断的特性
/// </summary>
/// <param name="methodSymbol">方法</param>
/// <returns></returns>
/// <summary>
/// 获取特性声明的AttributeCtorUsageAttribute是否声明了指定目标
/// </summary>
/// <param name="attributeData"></param>
/// <param name="targets">指定目标</param>
/// <returns></returns>
/// <summary>
/// 表示泛型方法诊断器
/// </summary>
/// <summary>
/// 获取诊断描述
/// </summary>
/// <summary>
/// 泛型方法诊断器
/// </summary>
/// <param name="context">上下文</param>
/// <summary>
/// 返回所有的报告诊断
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示非方法声明诊断器
/// </summary>
/// <summary>
/// /// <summary>
/// 获取诊断描述
/// </summary>
/// </summary>
/// <summary>
/// 非方法声明诊断器
/// </summary>
/// <param name="context">上下文</param>
/// <summary>
/// 返回所有的报告诊断
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示引用传递参数诊断器
/// </summary>
/// <summary>
/// /// <summary>
/// 获取诊断描述
/// </summary>
/// </summary>
/// <summary>
/// 引用传递参数诊断器
/// </summary>
/// <param name="context">上下文</param>
/// <summary>
/// 返回所有的报告诊断
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示返回类型诊断器
/// </summary>
/// <summary>   
/// 获取诊断描述
/// </summary>
/// </summary>
/// <summary>
/// 返回类型诊断器
/// </summary>
/// <param name="context">上下文</param>
/// <summary>
/// 返回所有的报告诊断
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示UriAttribute诊断器
/// </summary>
/// <summary>   
/// 获取诊断描述
/// </summary>
/// </summary>
/// <summary>
/// UriAttribute诊断器
/// </summary>
/// <param name="context">上下文</param>
/// <summary>
/// 返回所有的报告诊断
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示HttpApi.Create方法诊断
/// </summary>
/// <summary>
/// Create方法名称
/// </summary>
/// <summary>
/// HttpApi的类型的名称
/// </summary>
/// <summary>
/// 获取诊断描述
/// </summary>
/// <summary>
/// HttpApi.Create方法诊断
/// </summary>
/// <param name="context">调用上下文</param>
/// <summary>
/// 返回诊断结果 
/// </summary>
/// <returns></returns>
/// <summary>
/// 表示程序集
/// </summary>
/// <summary>
/// 日志
/// </summary>
/// <summary>
/// 程序集
/// </summary>
/// <summary>
/// 获取所有已知类型
/// </summary>
/// <summary>
/// 获取主模块
/// </summary>
/// <summary>
/// 程序集
/// </summary>
/// <param name="fileName">文件路径</param>
/// <param name="searchDirectories">依赖项搜索目录</param>
/// <param name="logger">日志</param>
/// <exception cref="FileNotFoundException"></exception>
/// <summary>
/// 解析依赖项
/// </summary>
/// <param name="resolver">解析器</param>
/// <param name="assembly">依赖的程序集</param>
/// <returns></returns>
/// <summary>
/// 写入代理类型
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回类型是否在模块中已声明
/// </summary>
/// <param name="typeDefinition">类型</param>
/// <returns></returns>
/// <summary>
/// 释放资源
/// </summary>
/// <summary>
/// 表示接口
/// </summary>
/// <summary>
/// 获取接口类型
/// </summary>
/// <summary>
/// 表示接口
/// </summary>
/// <param name="assembly">程序集</param>
/// <param name="interface">接口类型</param>
/// <summary>
/// 返回是否为继承IHttpApi的接口
/// </summary>
/// <returns></returns>
/// <summary>
/// 生成对应的代理类型
/// </summary>
/// <param name="prefix">类型名称前缀</param>
/// <returns></returns>
// 继承的接口，泛型接口就声明泛型类
/// <summary>
/// 生成代理类的泛型参数
/// </summary>
/// <param name="proxyType">代理类型</param>
/// <returns></returns>
/// <summary>
/// 返回代理类型的可见性
/// </summary>
/// <returns></returns>
/// <summary>
/// 获取接口类型及其继承的接口的所有方法
/// 忽略IHttpApi接口的方法
/// </summary>
/// <exception cref="NotSupportedException"></exception>
/// <returns></returns>
/// <summary>
/// 确保方法是支持的Api接口
/// </summary>
/// <exception cref="NotSupportedException"></exception>
/// <summary>
/// TypeDefinition比较器
/// </summary>
/// <summary>
/// 获取唯一实例
/// </summary>
/// <summary>
/// 是否相等
/// </summary>
/// <param name="x"></param>
/// <param name="y"></param>
/// <returns></returns>
/// <summary>
/// 返回哈希值
/// </summary>
/// <param name="obj"></param>
/// <returns></returns>
/// <summary>
/// 表示cecil元数据抽象
/// </summary>
/// <summary>
/// 所在程序集
/// </summary>
/// <summary>
/// 所有已知类型
/// </summary>
/// <summary>
/// 获取系统类型
/// </summary>
/// <summary>
/// cecil元数据抽象
/// </summary>
/// <param name="module">所在程序集</param>
/// <summary>
/// 返回导入外部类型后的类型
/// </summary>
/// <typeparam name="T">目标类型</typeparam>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="TypeLoadException"></exception>
/// <returns></returns>
// 本程序集的类型不作直接导入
/// <summary>
/// 返回指定类型是在本程序集范围内
/// </summary>
/// <param name="type">类型</param>
/// <returns></returns>
/// <summary>
/// 返回导入外部类型的指定方法后的方法
/// </summary>
/// <param name="methodName">方法名</param>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="TypeLoadException"></exception>
/// <returns></returns>
/// <summary>
/// 返回导入外部类型的指定方法后的方法
/// </summary>
/// <param name="filter">方法过滤器</param>
/// <exception cref="ArgumentNullException"></exception>
/// <exception cref="NotSupportedException"></exception>
/// <exception cref="ArgumentException"></exception>
/// <exception cref="TypeLoadException"></exception>
/// <returns></returns>
/// <summary>
/// 比较两类型类型是一样
/// </summary>
/// <param name="source">类型</param>
/// <param name="target">目标类型</param>
/// <exception cref="ArgumentNullException"></exception>
/// <returns></returns>
/// <summary>
/// 返回方法的完整名称
/// </summary>
/// <param name="method">方法</param>
/// <returns></returns>
/// <summary>
/// 返回类型不含namespace的名称
/// </summary>
/// <param name="type">类型</param>
/// <returns></returns>
/// <summary>
/// 表示接口的代理类型
/// </summary>
/// <summary>
/// 接口
/// </summary>
/// <summary>
/// 代理类型生成器
/// </summary>
/// <param name="assembly">程序集</param>
/// <param name="interface">接口</param>
/// <summary>
/// 转换为TypeDefinition
/// </summary>
/// <returns></returns>
/// <summary>
/// 生成代理类型的字段
/// </summary>
/// <param name="proxyType">代理类型</param>
/// <param name="fieldName">字段名称</param>
/// <param name="type">字段类型</param>
/// <returns></returns>
/// <summary>
/// 生成代理类型的构造器
/// </summary>
/// <param name="proxyType">代理类型</param>
/// <param name="fieldInterceptor">拦截器字段</param>
/// <param name="fieldApiMethods">接口方法集合字段</param>
/// <returns></returns>
// void .ctor(IApiInterceptor interceptor, MethodInfo[] methods):base(interceptor)
// this.interceptor = 第一个参数
// this.apiMethods = 第二个参数
/// <summary>
/// 生成代理类型的接口实现方法
/// </summary>
/// <param name="proxyType">代理类型</param>
/// <param name="apiMethods">接口方法集合</param>
/// <param name="fieldInterceptor">拦截器字段</param>
/// <param name="fieldApiMethods">接口方法集合字段</param>
// this.interceptor
// 加载target参数
// 加载method参数 this.apiMethods[i]
// var parameters = new object[parameters.Length]
// 加载parameters参数
// Intercep(this, method, parameters)
/// <summary>
/// 表示日志
/// </summary>
/// <summary>
/// 日志标签
/// </summary>
/// <summary>
/// 包装的日志类
/// </summary>
/// <summary>
/// 表示日志
/// </summary>
/// <param name="logger"></param>
/// <summary>
/// 输出消息
/// </summary>
/// <param name="action">行为</param>
/// <param name="value">值</param>
/// <summary>
/// 输出消息
/// </summary>
/// <param name="message">消息</param>
/// <summary>
/// 输出异常
/// </summary>
/// <param name="message">异常</param>
/// <summary>
/// 表示插入代理IL任务
/// </summary>
/// <summary>
/// 插入代理的程序集
/// </summary>
/// <summary>
/// 引用的程序集
/// 逗号分隔
/// </summary>
/// <summary>
/// 执行任务
/// </summary>
/// <returns></returns>
/// <summary>
/// 返回依赖搜索目录
/// </summary>
/// <returns></returns>
//www.x.com");
//www.x.com");
//webapiclient.com/");
//webapiclient.com?xKey=xValue"));
//webapiclient.com?xKey=xValue&yKey=yValue"));
//webapiclient.com?xKey=xValue&yKey=yValue&zKey={unicodeValue}");
//webapiclient.com");
//webapiclient.com");
//www.baidu.com/");
//localhost:5533/";
//www.baidu.com/");
//127.0.0.1:5000"));
//localhost") { Credentials = new NetworkCredential("abc", "456") };
//www.webapi.com/");
// IgnoreWhenNull Test
//www.webapi.com/");
// IgnoreWhenNull Test
//www.webapi.com/");
// IgnoreWhenNull Test
//www.webapi.com/");
// IgnoreWhenNull Test
//www.mywebapi.com") },
//www.mywebapi.com") },
/// <summary>
/// 请求Api的上下文
/// </summary>
/// <param name="httpApi">httpApi代理类实例</param>
/// <param name="httpApiConfig">关联的HttpApiConfig</param>
/// <param name="apiActionDescriptor">关联的ApiActionDescriptor</param>
/// <exception cref="ArgumentNullException"></exception>
//www.webapi.com/");
//www.webapi.com/login"));
//www.baidu.com");
//www.baidu.com"));
//www.webapi.com/");
//www.webapi.com/login"));
//www.baidu.com");
//www.baidu.com"));
//www.webapi.com/");
//www.webapi.com/login"));
//www.baidu.com");
//www.baidu.com"));
//www.webapiclient.com");
//www.webapiclient.com"));
//www.webapi.com/");
//www.webapi.com/login"));
//www.baidu.com");
//www.baidu.com"));
//www.webapi.com/");
//www.webapi.com/login"));
//www.baidu.com");
//www.baidu.com"));
//www.webapi.com/");
//www.webapi.com/login"));
//www.baidu.com");
//www.baidu.com"));
//www.baidu.com")).Authority == "localhost:5555");
//www.mywebapi.com");
//www.mywebapi.com");
//www.webapi.com/");
//www.webapi.com/");
//www.webapi.com?name=laojiu&birthDay=" + HttpUtility.UrlEncode(birthday, Encoding.GetEncoding(attr.Encoding)));
//www.baidu.com");
//www.baidu.com"));
//www.baidu.com/login"));
//www.webapi.com/");
//www.mywebapi.com");
//www.mywebapi.com");
//www.mywebapi.com");
//www.mywebapi.com");
//www.mywebapi.com");
//www.mywebapi.com");
/// <summary>
/// 用户操作接口
/// </summary>
//localhost")]
//www.webapiclient.com");
//www.webapiclient.com/?a=a");
//www.webapiclient.com/path");
//www.webapiclient.com/path?a=a");
//www.webapiclient.com/path/");
//www.webapiclient.com/path/?a=a");
//www.webapiclient.com/path/?");
//www.webapiclient.com/path/?a=a");
//www.webapiclient.com/path?x=1");
//www.webapiclient.com/path?x=1&a=a");
//www.webapiclient.com/path?x=1&");
//www.webapiclient.com/path?x=1&a=a");
//www.webapiclient.com/path?x=1&");
//www.webapiclient.com/path?x=1&a=我");
//www.webapiclient.com/path/?x=1&");
//www.webapiclient.com/path/?x=1&a=我");
//www.webapiclient.com/path/?x={x}&");
//www.webapiclient.com/path/?x=你&a=我");
//www.webapiclient.com");
//www.webapiclient.com/?a=我&b=你");
//www.webapi.com/");
//www.webapi.com/");
