________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\AssemblyInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\BoundingBox.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//test if all corner is in the same side of a face by just checking min and max
//TODO: bad done here need a fix. 
//Because question is not frustum contain box but reverse and this is not the same
// First we check if frustum is in box
// This means we checked all the corners and they were all contain or instersect
// if i is not equal to zero, we can fastpath and say that this box intersects
// If we get here, it means the first (and only) point we checked was actually contained in the frustum.
// So we assume that all other points will also be contained. If one of the points is disjoint, we can
// exit immediately saying that the result is Intersects
// If we get here, then we know all the points were actually contained, therefore result is Contains
//first we get if point is out of box
/// <summary>
/// Create a bounding box from the given list of points.
/// </summary>
/// <param name="points">The array of Vector3 instances defining the point cloud to bound</param>
/// <param name="index">The base index to start iterating from</param>
/// <param name="count">The number of points to iterate</param>
/// <returns>A bounding box that encapsulates the given point cloud.</returns>
/// <exception cref="System.ArgumentException">Thrown if the given array is null or has no points.</exception>
/// <summary>
/// Create a bounding box from the given list of points.
/// </summary>
/// <param name="points">The list of Vector3 instances defining the point cloud to bound</param>
/// <param name="index">The base index to start iterating from</param>
/// <param name="count">The number of points to iterate</param>
/// <returns>A bounding box that encapsulates the given point cloud.</returns>
/// <exception cref="System.ArgumentException">Thrown if the given list is null or has no points.</exception>
/// <summary>
/// Create a bounding box from the given list of points.
/// </summary>
/// <param name="points">The list of Vector3 instances defining the point cloud to bound</param>
/// <returns>A bounding box that encapsulates the given point cloud.</returns>
/// <exception cref="System.ArgumentException">Thrown if the given list has no points.</exception>
// See http://zach.in.tu-clausthal.de/teaching/cg_literatur/lighthouse3d_view_frustum_culling/index.html
// Inline Vector3.Dot(plane.Normal, negativeVertex) + plane.D;
// Inline Vector3.Dot(plane.Normal, positiveVertex) + plane.D;
/// <summary>
/// Deconstruction method for <see cref="BoundingBox"/>.
/// </summary>
/// <param name="min"></param>
/// <param name="max"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\BoundingFrustum.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines a viewing frustum for intersection operations.
/// </summary>
/// <summary>
/// The number of planes in the frustum.
/// </summary>
/// <summary>
/// The number of corner points in the frustum.
/// </summary>
/// <summary>
/// Gets or sets the <see cref="Matrix"/> of the frustum.
/// </summary>
// FIXME: The odds are the planes will be used a lot more often than the matrix
// is updated, so this should help performance. I hope ;)
/// <summary>
/// Gets the near plane of the frustum.
/// </summary>
/// <summary>
/// Gets the far plane of the frustum.
/// </summary>
/// <summary>
/// Gets the left plane of the frustum.
/// </summary>
/// <summary>
/// Gets the right plane of the frustum.
/// </summary>
/// <summary>
/// Gets the top plane of the frustum.
/// </summary>
/// <summary>
/// Gets the bottom plane of the frustum.
/// </summary>
/// <summary>
/// Constructs the frustum by extracting the view planes from a matrix.
/// </summary>
/// <param name="value">Combined matrix which usually is (View * Projection).</param>
/// <summary>
/// Compares whether two <see cref="BoundingFrustum"/> instances are equal.
/// </summary>
/// <param name="a"><see cref="BoundingFrustum"/> instance on the left of the equal sign.</param>
/// <param name="b"><see cref="BoundingFrustum"/> instance on the right of the equal sign.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether two <see cref="BoundingFrustum"/> instances are not equal.
/// </summary>
/// <param name="a"><see cref="BoundingFrustum"/> instance on the left of the not equal sign.</param>
/// <param name="b"><see cref="BoundingFrustum"/> instance on the right of the not equal sign.</param>
/// <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Containment test between this <see cref="BoundingFrustum"/> and specified <see cref="BoundingBox"/>.
/// </summary>
/// <param name="box">A <see cref="BoundingBox"/> for testing.</param>
/// <returns>Result of testing for containment between this <see cref="BoundingFrustum"/> and specified <see cref="BoundingBox"/>.</returns>
/// <summary>
/// Containment test between this <see cref="BoundingFrustum"/> and specified <see cref="BoundingBox"/>.
/// </summary>
/// <param name="box">A <see cref="BoundingBox"/> for testing.</param>
/// <param name="result">Result of testing for containment between this <see cref="BoundingFrustum"/> and specified <see cref="BoundingBox"/> as an output parameter.</param>
/// <summary>
/// Containment test between this <see cref="BoundingFrustum"/> and specified <see cref="BoundingFrustum"/>.
/// </summary>
/// <param name="frustum">A <see cref="BoundingFrustum"/> for testing.</param>
/// <returns>Result of testing for containment between this <see cref="BoundingFrustum"/> and specified <see cref="BoundingFrustum"/>.</returns>
// We check to see if the two frustums are equal
// If they are, there's no need to go any further.
/// <summary>
/// Containment test between this <see cref="BoundingFrustum"/> and specified <see cref="BoundingSphere"/>.
/// </summary>
/// <param name="sphere">A <see cref="BoundingSphere"/> for testing.</param>
/// <returns>Result of testing for containment between this <see cref="BoundingFrustum"/> and specified <see cref="BoundingSphere"/>.</returns>
/// <summary>
/// Containment test between this <see cref="BoundingFrustum"/> and specified <see cref="BoundingSphere"/>.
/// </summary>
/// <param name="sphere">A <see cref="BoundingSphere"/> for testing.</param>
/// <param name="result">Result of testing for containment between this <see cref="BoundingFrustum"/> and specified <see cref="BoundingSphere"/> as an output parameter.</param>
// TODO: we might want to inline this for performance reasons
/// <summary>
/// Containment test between this <see cref="BoundingFrustum"/> and specified <see cref="Vector3"/>.
/// </summary>
/// <param name="point">A <see cref="Vector3"/> for testing.</param>
/// <returns>Result of testing for containment between this <see cref="BoundingFrustum"/> and specified <see cref="Vector3"/>.</returns>
/// <summary>
/// Containment test between this <see cref="BoundingFrustum"/> and specified <see cref="Vector3"/>.
/// </summary>
/// <param name="point">A <see cref="Vector3"/> for testing.</param>
/// <param name="result">Result of testing for containment between this <see cref="BoundingFrustum"/> and specified <see cref="Vector3"/> as an output parameter.</param>
// TODO: we might want to inline this for performance reasons
/// <summary>
/// Compares whether current instance is equal to specified <see cref="BoundingFrustum"/>.
/// </summary>
/// <param name="other">The <see cref="BoundingFrustum"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="BoundingFrustum"/>.
/// </summary>
/// <param name="obj">The <see cref="Object"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Returns a copy of internal corners array.
/// </summary>
/// <returns>The array of corners.</returns>
/// <summary>
/// Returns a copy of internal corners array.
/// </summary>
/// <param name="corners">The array which values will be replaced to corner values of this instance. It must have size of <see cref="BoundingFrustum.CornerCount"/>.</param>
/// <summary>
/// Gets the hash code of this <see cref="BoundingFrustum"/>.
/// </summary>
/// <returns>Hash code of this <see cref="BoundingFrustum"/>.</returns>
/// <summary>
/// Gets whether or not a specified <see cref="BoundingBox"/> intersects with this <see cref="BoundingFrustum"/>.
/// </summary>
/// <param name="box">A <see cref="BoundingBox"/> for intersection test.</param>
/// <returns><c>true</c> if specified <see cref="BoundingBox"/> intersects with this <see cref="BoundingFrustum"/>; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not a specified <see cref="BoundingBox"/> intersects with this <see cref="BoundingFrustum"/>.
/// </summary>
/// <param name="box">A <see cref="BoundingBox"/> for intersection test.</param>
/// <param name="result"><c>true</c> if specified <see cref="BoundingBox"/> intersects with this <see cref="BoundingFrustum"/>; <c>false</c> otherwise as an output parameter.</param>
/// <summary>
/// Gets whether or not a specified <see cref="BoundingFrustum"/> intersects with this <see cref="BoundingFrustum"/>.
/// </summary>
/// <param name="frustum">An other <see cref="BoundingFrustum"/> for intersection test.</param>
/// <returns><c>true</c> if other <see cref="BoundingFrustum"/> intersects with this <see cref="BoundingFrustum"/>; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not a specified <see cref="BoundingSphere"/> intersects with this <see cref="BoundingFrustum"/>.
/// </summary>
/// <param name="sphere">A <see cref="BoundingSphere"/> for intersection test.</param>
/// <returns><c>true</c> if specified <see cref="BoundingSphere"/> intersects with this <see cref="BoundingFrustum"/>; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not a specified <see cref="BoundingSphere"/> intersects with this <see cref="BoundingFrustum"/>.
/// </summary>
/// <param name="sphere">A <see cref="BoundingSphere"/> for intersection test.</param>
/// <param name="result"><c>true</c> if specified <see cref="BoundingSphere"/> intersects with this <see cref="BoundingFrustum"/>; <c>false</c> otherwise as an output parameter.</param>
/// <summary>
/// Gets type of intersection between specified <see cref="Plane"/> and this <see cref="BoundingFrustum"/>.
/// </summary>
/// <param name="plane">A <see cref="Plane"/> for intersection test.</param>
/// <returns>A plane intersection type.</returns>
/// <summary>
/// Gets type of intersection between specified <see cref="Plane"/> and this <see cref="BoundingFrustum"/>.
/// </summary>
/// <param name="plane">A <see cref="Plane"/> for intersection test.</param>
/// <param name="result">A plane intersection type as an output parameter.</param>
/// <summary>
/// Gets the distance of intersection of <see cref="Ray"/> and this <see cref="BoundingFrustum"/> or null if no intersection happens.
/// </summary>
/// <param name="ray">A <see cref="Ray"/> for intersection test.</param>
/// <returns>Distance at which ray intersects with this <see cref="BoundingFrustum"/> or null if no intersection happens.</returns>
/// <summary>
/// Gets the distance of intersection of <see cref="Ray"/> and this <see cref="BoundingFrustum"/> or null if no intersection happens.
/// </summary>
/// <param name="ray">A <see cref="Ray"/> for intersection test.</param>
/// <param name="result">Distance at which ray intersects with this <see cref="BoundingFrustum"/> or null if no intersection happens as an output parameter.</param>
/// <summary>
/// Returns a <see cref="String"/> representation of this <see cref="BoundingFrustum"/> in the format:
/// {Near:[nearPlane] Far:[farPlane] Left:[leftPlane] Right:[rightPlane] Top:[topPlane] Bottom:[bottomPlane]}
/// </summary>
/// <returns><see cref="String"/> representation of this <see cref="BoundingFrustum"/>.</returns>
// Formula used
//                d1 ( N2 * N3 ) + d2 ( N3 * N1 ) + d3 ( N1 * N2 )
//P =   -------------------------------------------------------------------------
//                             N1 . ( N2 * N3 )
//
// Note: N refers to the normal, d refers to the displacement. '.' means dot product. '*' means cross product
//v1 = (a.D * (Vector3.Cross(b.Normal, c.Normal)));
//v2 = (b.D * (Vector3.Cross(c.Normal, a.Normal)));
//v3 = (c.D * (Vector3.Cross(a.Normal, b.Normal)));
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\BoundingSphere.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes a sphere in 3D-space for bounding operations.
/// </summary>
/// <summary>
/// The sphere center.
/// </summary>
/// <summary>
/// The sphere radius.
/// </summary>
/// <summary>
/// Constructs a bounding sphere with the specified center and radius.  
/// </summary>
/// <param name="center">The sphere center.</param>
/// <param name="radius">The sphere radius.</param>
/// <summary>
/// Test if a bounding box is fully inside, outside, or just intersecting the sphere.
/// </summary>
/// <param name="box">The box for testing.</param>
/// <returns>The containment type.</returns>
//check if all corner is in sphere
//check if the distance from sphere center to cube face < radius
//else disjoint
/// <summary>
/// Test if a bounding box is fully inside, outside, or just intersecting the sphere.
/// </summary>
/// <param name="box">The box for testing.</param>
/// <param name="result">The containment type as an output parameter.</param>
/// <summary>
/// Test if a frustum is fully inside, outside, or just intersecting the sphere.
/// </summary>
/// <param name="frustum">The frustum for testing.</param>
/// <returns>The containment type.</returns>
//check if all corner is in sphere
//check if the distance from sphere center to frustrum face < radius
//TODO : calcul dmin
//else disjoint
/// <summary>
/// Test if a frustum is fully inside, outside, or just intersecting the sphere.
/// </summary>
/// <param name="frustum">The frustum for testing.</param>
/// <param name="result">The containment type as an output parameter.</param>
/// <summary>
/// Test if a sphere is fully inside, outside, or just intersecting the sphere.
/// </summary>
/// <param name="sphere">The other sphere for testing.</param>
/// <returns>The containment type.</returns>
/// <summary>
/// Test if a sphere is fully inside, outside, or just intersecting the sphere.
/// </summary>
/// <param name="sphere">The other sphere for testing.</param>
/// <param name="result">The containment type as an output parameter.</param>
/// <summary>
/// Test if a point is fully inside, outside, or just intersecting the sphere.
/// </summary>
/// <param name="point">The vector in 3D-space for testing.</param>
/// <returns>The containment type.</returns>
/// <summary>
/// Test if a point is fully inside, outside, or just intersecting the sphere.
/// </summary>
/// <param name="point">The vector in 3D-space for testing.</param>
/// <param name="result">The containment type as an output parameter.</param>
/// <summary>
/// Creates the smallest <see cref="BoundingSphere"/> that can contain a specified <see cref="BoundingBox"/>.
/// </summary>
/// <param name="box">The box to create the sphere from.</param>
/// <returns>The new <see cref="BoundingSphere"/>.</returns>
/// <summary>
/// Creates the smallest <see cref="BoundingSphere"/> that can contain a specified <see cref="BoundingBox"/>.
/// </summary>
/// <param name="box">The box to create the sphere from.</param>
/// <param name="result">The new <see cref="BoundingSphere"/> as an output parameter.</param>
// Find the center of the box.
// Find the distance between the center and one of the corners of the box.
/// <summary>
/// Creates the smallest <see cref="BoundingSphere"/> that can contain a specified <see cref="BoundingFrustum"/>.
/// </summary>
/// <param name="frustum">The frustum to create the sphere from.</param>
/// <returns>The new <see cref="BoundingSphere"/>.</returns>
/// <summary>
/// Creates the smallest <see cref="BoundingSphere"/> that can contain a specified list of points in 3D-space. 
/// </summary>
/// <param name="points">List of point to create the sphere from.</param>
/// <returns>The new <see cref="BoundingSphere"/>.</returns>
// From "Real-Time Collision Detection" (Page 89)
// Find the most extreme points along the principle axis.
// Pick the pair of most distant points.
// Test every point and expand the sphere.
// The current bounding sphere is just a good approximation and may not enclose all points.            
// From: Mathematics for 3D Game Programming and Computer Graphics, Eric Lengyel, Third Edition.
// Page 218
// equal to diff.Length();
/// <summary>
/// Creates the smallest <see cref="BoundingSphere"/> that can contain two spheres.
/// </summary>
/// <param name="original">First sphere.</param>
/// <param name="additional">Second sphere.</param>
/// <returns>The new <see cref="BoundingSphere"/>.</returns>
/// <summary>
/// Creates the smallest <see cref="BoundingSphere"/> that can contain two spheres.
/// </summary>
/// <param name="original">First sphere.</param>
/// <param name="additional">Second sphere.</param>
/// <param name="result">The new <see cref="BoundingSphere"/> as an output parameter.</param>
//intersect
//original contain additional
//additional contain original
//else find center of new sphere and radius
//oCenterToResultCenter
/// <summary>
/// Compares whether current instance is equal to specified <see cref="BoundingSphere"/>.
/// </summary>
/// <param name="other">The <see cref="BoundingSphere"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Object"/>.
/// </summary>
/// <param name="obj">The <see cref="Object"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets the hash code of this <see cref="BoundingSphere"/>.
/// </summary>
/// <returns>Hash code of this <see cref="BoundingSphere"/>.</returns>
/// <summary>
/// Gets whether or not a specified <see cref="BoundingBox"/> intersects with this sphere.
/// </summary>
/// <param name="box">The box for testing.</param>
/// <returns><c>true</c> if <see cref="BoundingBox"/> intersects with this sphere; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not a specified <see cref="BoundingBox"/> intersects with this sphere.
/// </summary>
/// <param name="box">The box for testing.</param>
/// <param name="result"><c>true</c> if <see cref="BoundingBox"/> intersects with this sphere; <c>false</c> otherwise. As an output parameter.</param>
/*
/// <summary>
/// Gets whether or not the other <see cref="BoundingSphere"/> intersects with this sphere.
/// </summary>
/// <param name="sphere">The other sphere for testing.</param>
/// <returns><c>true</c> if other <see cref="BoundingSphere"/> intersects with this sphere; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not the other <see cref="BoundingSphere"/> intersects with this sphere.
/// </summary>
/// <param name="sphere">The other sphere for testing.</param>
/// <param name="result"><c>true</c> if other <see cref="BoundingSphere"/> intersects with this sphere; <c>false</c> otherwise. As an output parameter.</param>
/// <summary>
/// Gets whether or not a specified <see cref="Plane"/> intersects with this sphere.
/// </summary>
/// <param name="plane">The plane for testing.</param>
/// <returns>Type of intersection.</returns>
// TODO: we might want to inline this for performance reasons
/// <summary>
/// Gets whether or not a specified <see cref="Plane"/> intersects with this sphere.
/// </summary>
/// <param name="plane">The plane for testing.</param>
/// <param name="result">Type of intersection as an output parameter.</param>
// TODO: we might want to inline this for performance reasons
/// <summary>
/// Gets whether or not a specified <see cref="Ray"/> intersects with this sphere.
/// </summary>
/// <param name="ray">The ray for testing.</param>
/// <returns>Distance of ray intersection or <c>null</c> if there is no intersection.</returns>
/// <summary>
/// Gets whether or not a specified <see cref="Ray"/> intersects with this sphere.
/// </summary>
/// <param name="ray">The ray for testing.</param>
/// <param name="result">Distance of ray intersection or <c>null</c> if there is no intersection as an output parameter.</param>
/// <summary>
/// Returns a <see cref="String"/> representation of this <see cref="BoundingSphere"/> in the format:
/// {Center:[<see cref="Center"/>] Radius:[<see cref="Radius"/>]}
/// </summary>
/// <returns>A <see cref="String"/> representation of this <see cref="BoundingSphere"/>.</returns>
/// <summary>
/// Creates a new <see cref="BoundingSphere"/> that contains a transformation of translation and scale from this sphere by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <returns>Transformed <see cref="BoundingSphere"/>.</returns>
/// <summary>
/// Creates a new <see cref="BoundingSphere"/> that contains a transformation of translation and scale from this sphere by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="result">Transformed <see cref="BoundingSphere"/> as an output parameter.</param>
/// <summary>
/// Deconstruction method for <see cref="BoundingSphere"/>.
/// </summary>
/// <param name="center"></param>
/// <param name="radius"></param>
/// <summary>
/// Compares whether two <see cref="BoundingSphere"/> instances are equal.
/// </summary>
/// <param name="a"><see cref="BoundingSphere"/> instance on the left of the equal sign.</param>
/// <param name="b"><see cref="BoundingSphere"/> instance on the right of the equal sign.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether two <see cref="BoundingSphere"/> instances are not equal.
/// </summary>
/// <param name="a"><see cref="BoundingSphere"/> instance on the left of the not equal sign.</param>
/// <param name="b"><see cref="BoundingSphere"/> instance on the right of the not equal sign.</param>
/// <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Color.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes a 32-bit packed color.
/// </summary>
// Stored as RGBA with R in the least significant octet:
// |-------|-------|-------|-------
// A       B       G       R
/// <summary>
/// Constructs an RGBA color from a packed value.
/// The value is a 32-bit unsigned integer, with R in the least significant octet.
/// </summary>
/// <param name="packedValue">The packed value.</param>
/// <summary>
/// Constructs an RGBA color from the XYZW unit length components of a vector.
/// </summary>
/// <param name="color">A <see cref="Vector4"/> representing color.</param>
/// <summary>
/// Constructs an RGBA color from the XYZ unit length components of a vector. Alpha value will be opaque.
/// </summary>
/// <param name="color">A <see cref="Vector3"/> representing color.</param>
/// <summary>
/// Constructs an RGBA color from a <see cref="Color"/> and an alpha value.
/// </summary>
/// <param name="color">A <see cref="Color"/> for RGB values of new <see cref="Color"/> instance.</param>
/// <param name="alpha">The alpha component value from 0 to 255.</param>
/// <summary>
/// Constructs an RGBA color from color and alpha value.
/// </summary>
/// <param name="color">A <see cref="Color"/> for RGB values of new <see cref="Color"/> instance.</param>
/// <param name="alpha">Alpha component value from 0.0f to 1.0f.</param>
/// <summary>
/// Constructs an RGBA color from scalars representing red, green and blue values. Alpha value will be opaque.
/// </summary>
/// <param name="r">Red component value from 0.0f to 1.0f.</param>
/// <param name="g">Green component value from 0.0f to 1.0f.</param>
/// <param name="b">Blue component value from 0.0f to 1.0f.</param>
/// <summary>
/// Constructs an RGBA color from scalars representing red, green, blue and alpha values.
/// </summary>
/// <param name="r">Red component value from 0.0f to 1.0f.</param>
/// <param name="g">Green component value from 0.0f to 1.0f.</param>
/// <param name="b">Blue component value from 0.0f to 1.0f.</param>
/// <param name="alpha">Alpha component value from 0.0f to 1.0f.</param>
/// <summary>
/// Constructs an RGBA color from scalars representing red, green and blue values. Alpha value will be opaque.
/// </summary>
/// <param name="r">Red component value from 0 to 255.</param>
/// <param name="g">Green component value from 0 to 255.</param>
/// <param name="b">Blue component value from 0 to 255.</param>
// A = 255
/// <summary>
/// Constructs an RGBA color from scalars representing red, green, blue and alpha values.
/// </summary>
/// <param name="r">Red component value from 0 to 255.</param>
/// <param name="g">Green component value from 0 to 255.</param>
/// <param name="b">Blue component value from 0 to 255.</param>
/// <param name="alpha">Alpha component value from 0 to 255.</param>
/// <summary>
/// Constructs an RGBA color from scalars representing red, green, blue and alpha values.
/// </summary>
/// <remarks>
/// This overload sets the values directly without clamping, and may therefore be faster than the other overloads.
/// </remarks>
/// <param name="r"></param>
/// <param name="g"></param>
/// <param name="b"></param>
/// <param name="alpha"></param>
/// <summary>
/// Gets or sets the blue component.
/// </summary>
/// <summary>
/// Gets or sets the green component.
/// </summary>
/// <summary>
/// Gets or sets the red component.
/// </summary>
/// <summary>
/// Gets or sets the alpha component.
/// </summary>
/// <summary>
/// Compares whether two <see cref="Color"/> instances are equal.
/// </summary>
/// <param name="a"><see cref="Color"/> instance on the left of the equal sign.</param>
/// <param name="b"><see cref="Color"/> instance on the right of the equal sign.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether two <see cref="Color"/> instances are not equal.
/// </summary>
/// <param name="a"><see cref="Color"/> instance on the left of the not equal sign.</param>
/// <param name="b"><see cref="Color"/> instance on the right of the not equal sign.</param>
/// <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
/// <summary>
/// Gets the hash code of this <see cref="Color"/>.
/// </summary>
/// <returns>Hash code of this <see cref="Color"/>.</returns>
/// <summary>
/// Compares whether current instance is equal to specified object.
/// </summary>
/// <param name="obj">The <see cref="Color"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// TransparentBlack color (R:0,G:0,B:0,A:0).
/// </summary>
/// <summary>
/// Transparent color (R:0,G:0,B:0,A:0).
/// </summary>
/// <summary>
/// AliceBlue color (R:240,G:248,B:255,A:255).
/// </summary>
/// <summary>
/// AntiqueWhite color (R:250,G:235,B:215,A:255).
/// </summary>
/// <summary>
/// Aqua color (R:0,G:255,B:255,A:255).
/// </summary>
/// <summary>
/// Aquamarine color (R:127,G:255,B:212,A:255).
/// </summary>
/// <summary>
/// Azure color (R:240,G:255,B:255,A:255).
/// </summary>
/// <summary>
/// Beige color (R:245,G:245,B:220,A:255).
/// </summary>
/// <summary>
/// Bisque color (R:255,G:228,B:196,A:255).
/// </summary>
/// <summary>
/// Black color (R:0,G:0,B:0,A:255).
/// </summary>
/// <summary>
/// BlanchedAlmond color (R:255,G:235,B:205,A:255).
/// </summary>
/// <summary>
/// Blue color (R:0,G:0,B:255,A:255).
/// </summary>
/// <summary>
/// BlueViolet color (R:138,G:43,B:226,A:255).
/// </summary>
/// <summary>
/// Brown color (R:165,G:42,B:42,A:255).
/// </summary>
/// <summary>
/// BurlyWood color (R:222,G:184,B:135,A:255).
/// </summary>
/// <summary>
/// CadetBlue color (R:95,G:158,B:160,A:255).
/// </summary>
/// <summary>
/// Chartreuse color (R:127,G:255,B:0,A:255).
/// </summary>
/// <summary>
/// Chocolate color (R:210,G:105,B:30,A:255).
/// </summary>
/// <summary>
/// Coral color (R:255,G:127,B:80,A:255).
/// </summary>
/// <summary>
/// CornflowerBlue color (R:100,G:149,B:237,A:255).
/// </summary>
/// <summary>
/// Cornsilk color (R:255,G:248,B:220,A:255).
/// </summary>
/// <summary>
/// Crimson color (R:220,G:20,B:60,A:255).
/// </summary>
/// <summary>
/// Cyan color (R:0,G:255,B:255,A:255).
/// </summary>
/// <summary>
/// DarkBlue color (R:0,G:0,B:139,A:255).
/// </summary>
/// <summary>
/// DarkCyan color (R:0,G:139,B:139,A:255).
/// </summary>
/// <summary>
/// DarkGoldenrod color (R:184,G:134,B:11,A:255).
/// </summary>
/// <summary>
/// DarkGray color (R:169,G:169,B:169,A:255).
/// </summary>
/// <summary>
/// DarkGreen color (R:0,G:100,B:0,A:255).
/// </summary>
/// <summary>
/// DarkKhaki color (R:189,G:183,B:107,A:255).
/// </summary>
/// <summary>
/// DarkMagenta color (R:139,G:0,B:139,A:255).
/// </summary>
/// <summary>
/// DarkOliveGreen color (R:85,G:107,B:47,A:255).
/// </summary>
/// <summary>
/// DarkOrange color (R:255,G:140,B:0,A:255).
/// </summary>
/// <summary>
/// DarkOrchid color (R:153,G:50,B:204,A:255).
/// </summary>
/// <summary>
/// DarkRed color (R:139,G:0,B:0,A:255).
/// </summary>
/// <summary>
/// DarkSalmon color (R:233,G:150,B:122,A:255).
/// </summary>
/// <summary>
/// DarkSeaGreen color (R:143,G:188,B:139,A:255).
/// </summary>
/// <summary>
/// DarkSlateBlue color (R:72,G:61,B:139,A:255).
/// </summary>
/// <summary>
/// DarkSlateGray color (R:47,G:79,B:79,A:255).
/// </summary>
/// <summary>
/// DarkTurquoise color (R:0,G:206,B:209,A:255).
/// </summary>
/// <summary>
/// DarkViolet color (R:148,G:0,B:211,A:255).
/// </summary>
/// <summary>
/// DeepPink color (R:255,G:20,B:147,A:255).
/// </summary>
/// <summary>
/// DeepSkyBlue color (R:0,G:191,B:255,A:255).
/// </summary>
/// <summary>
/// DimGray color (R:105,G:105,B:105,A:255).
/// </summary>
/// <summary>
/// DodgerBlue color (R:30,G:144,B:255,A:255).
/// </summary>
/// <summary>
/// Firebrick color (R:178,G:34,B:34,A:255).
/// </summary>
/// <summary>
/// FloralWhite color (R:255,G:250,B:240,A:255).
/// </summary>
/// <summary>
/// ForestGreen color (R:34,G:139,B:34,A:255).
/// </summary>
/// <summary>
/// Fuchsia color (R:255,G:0,B:255,A:255).
/// </summary>
/// <summary>
/// Gainsboro color (R:220,G:220,B:220,A:255).
/// </summary>
/// <summary>
/// GhostWhite color (R:248,G:248,B:255,A:255).
/// </summary>
/// <summary>
/// Gold color (R:255,G:215,B:0,A:255).
/// </summary>
/// <summary>
/// Goldenrod color (R:218,G:165,B:32,A:255).
/// </summary>
/// <summary>
/// Gray color (R:128,G:128,B:128,A:255).
/// </summary>
/// <summary>
/// Green color (R:0,G:128,B:0,A:255).
/// </summary>
/// <summary>
/// GreenYellow color (R:173,G:255,B:47,A:255).
/// </summary>
/// <summary>
/// Honeydew color (R:240,G:255,B:240,A:255).
/// </summary>
/// <summary>
/// HotPink color (R:255,G:105,B:180,A:255).
/// </summary>
/// <summary>
/// IndianRed color (R:205,G:92,B:92,A:255).
/// </summary>
/// <summary>
/// Indigo color (R:75,G:0,B:130,A:255).
/// </summary>
/// <summary>
/// Ivory color (R:255,G:255,B:240,A:255).
/// </summary>
/// <summary>
/// Khaki color (R:240,G:230,B:140,A:255).
/// </summary>
/// <summary>
/// Lavender color (R:230,G:230,B:250,A:255).
/// </summary>
/// <summary>
/// LavenderBlush color (R:255,G:240,B:245,A:255).
/// </summary>
/// <summary>
/// LawnGreen color (R:124,G:252,B:0,A:255).
/// </summary>
/// <summary>
/// LemonChiffon color (R:255,G:250,B:205,A:255).
/// </summary>
/// <summary>
/// LightBlue color (R:173,G:216,B:230,A:255).
/// </summary>
/// <summary>
/// LightCoral color (R:240,G:128,B:128,A:255).
/// </summary>
/// <summary>
/// LightCyan color (R:224,G:255,B:255,A:255).
/// </summary>
/// <summary>
/// LightGoldenrodYellow color (R:250,G:250,B:210,A:255).
/// </summary>
/// <summary>
/// LightGray color (R:211,G:211,B:211,A:255).
/// </summary>
/// <summary>
/// LightGreen color (R:144,G:238,B:144,A:255).
/// </summary>
/// <summary>
/// LightPink color (R:255,G:182,B:193,A:255).
/// </summary>
/// <summary>
/// LightSalmon color (R:255,G:160,B:122,A:255).
/// </summary>
/// <summary>
/// LightSeaGreen color (R:32,G:178,B:170,A:255).
/// </summary>
/// <summary>
/// LightSkyBlue color (R:135,G:206,B:250,A:255).
/// </summary>
/// <summary>
/// LightSlateGray color (R:119,G:136,B:153,A:255).
/// </summary>
/// <summary>
/// LightSteelBlue color (R:176,G:196,B:222,A:255).
/// </summary>
/// <summary>
/// LightYellow color (R:255,G:255,B:224,A:255).
/// </summary>
/// <summary>
/// Lime color (R:0,G:255,B:0,A:255).
/// </summary>
/// <summary>
/// LimeGreen color (R:50,G:205,B:50,A:255).
/// </summary>
/// <summary>
/// Linen color (R:250,G:240,B:230,A:255).
/// </summary>
/// <summary>
/// Magenta color (R:255,G:0,B:255,A:255).
/// </summary>
/// <summary>
/// Maroon color (R:128,G:0,B:0,A:255).
/// </summary>
/// <summary>
/// MediumAquamarine color (R:102,G:205,B:170,A:255).
/// </summary>
/// <summary>
/// MediumBlue color (R:0,G:0,B:205,A:255).
/// </summary>
/// <summary>
/// MediumOrchid color (R:186,G:85,B:211,A:255).
/// </summary>
/// <summary>
/// MediumPurple color (R:147,G:112,B:219,A:255).
/// </summary>
/// <summary>
/// MediumSeaGreen color (R:60,G:179,B:113,A:255).
/// </summary>
/// <summary>
/// MediumSlateBlue color (R:123,G:104,B:238,A:255).
/// </summary>
/// <summary>
/// MediumSpringGreen color (R:0,G:250,B:154,A:255).
/// </summary>
/// <summary>
/// MediumTurquoise color (R:72,G:209,B:204,A:255).
/// </summary>
/// <summary>
/// MediumVioletRed color (R:199,G:21,B:133,A:255).
/// </summary>
/// <summary>
/// MidnightBlue color (R:25,G:25,B:112,A:255).
/// </summary>
/// <summary>
/// MintCream color (R:245,G:255,B:250,A:255).
/// </summary>
/// <summary>
/// MistyRose color (R:255,G:228,B:225,A:255).
/// </summary>
/// <summary>
/// Moccasin color (R:255,G:228,B:181,A:255).
/// </summary>
/// <summary>
/// MonoGame orange theme color (R:231,G:60,B:0,A:255).
/// </summary>
/// <summary>
/// NavajoWhite color (R:255,G:222,B:173,A:255).
/// </summary>
/// <summary>
/// Navy color (R:0,G:0,B:128,A:255).
/// </summary>
/// <summary>
/// OldLace color (R:253,G:245,B:230,A:255).
/// </summary>
/// <summary>
/// Olive color (R:128,G:128,B:0,A:255).
/// </summary>
/// <summary>
/// OliveDrab color (R:107,G:142,B:35,A:255).
/// </summary>
/// <summary>
/// Orange color (R:255,G:165,B:0,A:255).
/// </summary>
/// <summary>
/// OrangeRed color (R:255,G:69,B:0,A:255).
/// </summary>
/// <summary>
/// Orchid color (R:218,G:112,B:214,A:255).
/// </summary>
/// <summary>
/// PaleGoldenrod color (R:238,G:232,B:170,A:255).
/// </summary>
/// <summary>
/// PaleGreen color (R:152,G:251,B:152,A:255).
/// </summary>
/// <summary>
/// PaleTurquoise color (R:175,G:238,B:238,A:255).
/// </summary>
/// <summary>
/// PaleVioletRed color (R:219,G:112,B:147,A:255).
/// </summary>
/// <summary>
/// PapayaWhip color (R:255,G:239,B:213,A:255).
/// </summary>
/// <summary>
/// PeachPuff color (R:255,G:218,B:185,A:255).
/// </summary>
/// <summary>
/// Peru color (R:205,G:133,B:63,A:255).
/// </summary>
/// <summary>
/// Pink color (R:255,G:192,B:203,A:255).
/// </summary>
/// <summary>
/// Plum color (R:221,G:160,B:221,A:255).
/// </summary>
/// <summary>
/// PowderBlue color (R:176,G:224,B:230,A:255).
/// </summary>
/// <summary>
///  Purple color (R:128,G:0,B:128,A:255).
/// </summary>
/// <summary>
/// Red color (R:255,G:0,B:0,A:255).
/// </summary>
/// <summary>
/// RosyBrown color (R:188,G:143,B:143,A:255).
/// </summary>
/// <summary>
/// RoyalBlue color (R:65,G:105,B:225,A:255).
/// </summary>
/// <summary>
/// SaddleBrown color (R:139,G:69,B:19,A:255).
/// </summary>
/// <summary>
/// Salmon color (R:250,G:128,B:114,A:255).
/// </summary>
/// <summary>
/// SandyBrown color (R:244,G:164,B:96,A:255).
/// </summary>
/// <summary>
/// SeaGreen color (R:46,G:139,B:87,A:255).
/// </summary>
/// <summary>
/// SeaShell color (R:255,G:245,B:238,A:255).
/// </summary>
/// <summary>
/// Sienna color (R:160,G:82,B:45,A:255).
/// </summary>
/// <summary>
/// Silver color (R:192,G:192,B:192,A:255).
/// </summary>
/// <summary>
/// SkyBlue color (R:135,G:206,B:235,A:255).
/// </summary>
/// <summary>
/// SlateBlue color (R:106,G:90,B:205,A:255).
/// </summary>
/// <summary>
/// SlateGray color (R:112,G:128,B:144,A:255).
/// </summary>
/// <summary>
/// Snow color (R:255,G:250,B:250,A:255).
/// </summary>
/// <summary>
/// SpringGreen color (R:0,G:255,B:127,A:255).
/// </summary>
/// <summary>
/// SteelBlue color (R:70,G:130,B:180,A:255).
/// </summary>
/// <summary>
/// Tan color (R:210,G:180,B:140,A:255).
/// </summary>
/// <summary>
/// Teal color (R:0,G:128,B:128,A:255).
/// </summary>
/// <summary>
/// Thistle color (R:216,G:191,B:216,A:255).
/// </summary>
/// <summary>
/// Tomato color (R:255,G:99,B:71,A:255).
/// </summary>
/// <summary>
/// Turquoise color (R:64,G:224,B:208,A:255).
/// </summary>
/// <summary>
/// Violet color (R:238,G:130,B:238,A:255).
/// </summary>
/// <summary>
/// Wheat color (R:245,G:222,B:179,A:255).
/// </summary>
/// <summary>
/// White color (R:255,G:255,B:255,A:255).
/// </summary>
/// <summary>
/// WhiteSmoke color (R:245,G:245,B:245,A:255).
/// </summary>
/// <summary>
/// Yellow color (R:255,G:255,B:0,A:255).
/// </summary>
/// <summary>
/// YellowGreen color (R:154,G:205,B:50,A:255).
/// </summary>
/// <summary>
/// Performs linear interpolation of <see cref="Color"/>.
/// </summary>
/// <param name="value1">Source <see cref="Color"/>.</param>
/// <param name="value2">Destination <see cref="Color"/>.</param>
/// <param name="amount">Interpolation factor.</param>
/// <returns>Interpolated <see cref="Color"/>.</returns>
/// <summary>
/// <see cref="Color.Lerp"/> should be used instead of this function.
/// </summary>
/// <returns>Interpolated <see cref="Color"/>.</returns>
/// <summary>
/// Multiply <see cref="Color"/> by value.
/// </summary>
/// <param name="value">Source <see cref="Color"/>.</param>
/// <param name="scale">Multiplicator.</param>
/// <returns>Multiplication result.</returns>
/// <summary>
/// Multiply <see cref="Color"/> by value.
/// </summary>
/// <param name="value">Source <see cref="Color"/>.</param>
/// <param name="scale">Multiplicator.</param>
/// <returns>Multiplication result.</returns>
/// <summary>
/// Gets a <see cref="Vector3"/> representation for this object.
/// </summary>
/// <returns>A <see cref="Vector3"/> representation for this object.</returns>
/// <summary>
/// Gets a <see cref="Vector4"/> representation for this object.
/// </summary>
/// <returns>A <see cref="Vector4"/> representation for this object.</returns>
/// <summary>
/// Gets or sets packed value of this <see cref="Color"/>.
/// </summary>
/// <summary>
/// Returns a <see cref="String"/> representation of this <see cref="Color"/> in the format:
/// {R:[red] G:[green] B:[blue] A:[alpha]}
/// </summary>
/// <returns><see cref="String"/> representation of this <see cref="Color"/>.</returns>
/// <summary>
/// Translate a non-premultipled alpha <see cref="Color"/> to a <see cref="Color"/> that contains premultiplied alpha.
/// </summary>
/// <param name="vector">A <see cref="Vector4"/> representing color.</param>
/// <returns>A <see cref="Color"/> which contains premultiplied alpha data.</returns>
/// <summary>
/// Translate a non-premultipled alpha <see cref="Color"/> to a <see cref="Color"/> that contains premultiplied alpha.
/// </summary>
/// <param name="r">Red component value.</param>
/// <param name="g">Green component value.</param>
/// <param name="b">Blue component value.</param>
/// <param name="a">Alpha component value.</param>
/// <returns>A <see cref="Color"/> which contains premultiplied alpha data.</returns>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Color"/>.
/// </summary>
/// <param name="other">The <see cref="Color"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Deconstruction method for <see cref="Color"/>.
/// </summary>
/// <param name="r">Red component value from 0 to 255.</param>
/// <param name="g">Green component value from 0 to 255.</param>
/// <param name="b">Blue component value from 0 to 255.</param>
/// <summary>
/// Deconstruction method for <see cref="Color"/>.
/// </summary>
/// <param name="r">Red component value from 0.0f to 1.0f.</param>
/// <param name="g">Green component value from 0.0f to 1.0f.</param>
/// <param name="b">Blue component value from 0.0f to 1.0f.</param>
/// <summary>
/// Deconstruction method for <see cref="Color"/> with Alpha.
/// </summary>
/// <param name="r">Red component value from 0 to 255.</param>
/// <param name="g">Green component value from 0 to 255.</param>
/// <param name="b">Blue component value from 0 to 255.</param>
/// <param name="a">Alpha component value from 0 to 255.</param>
/// <summary>
/// Deconstruction method for <see cref="Color"/> with Alpha.
/// </summary>
/// <param name="r">Red component value from 0.0f to 1.0f.</param>
/// <param name="g">Green component value from 0.0f to 1.0f.</param>
/// <param name="b">Blue component value from 0.0f to 1.0f.</param>
/// <param name="a">Alpha component value from 0.0f to 1.0f.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\ContainmentType.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines how the bounding volumes intersects or contain one another.
/// </summary>
/// <summary>
/// Indicates that there is no overlap between two bounding volumes.
/// </summary>
/// <summary>
/// Indicates that one bounding volume completely contains another volume.
/// </summary>
/// <summary>
/// Indicates that bounding volumes partially overlap one another.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Curve.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Contains a collection of <see cref="CurveKey"/> points in 2D space and provides methods for evaluating features of the curve they define.
/// </summary>
// TODO : [TypeConverter(typeof(ExpandableObjectConverter))]
/// <summary>
/// Returns <c>true</c> if this curve is constant (has zero or one points); <c>false</c> otherwise.
/// </summary>
/// <summary>
/// Defines how to handle weighting values that are less than the first control point in the curve.
/// </summary>
/// <summary>
/// Defines how to handle weighting values that are greater than the last control point in the curve.
/// </summary>
/// <summary>
/// The collection of curve keys.
/// </summary>
/// <summary>
/// Constructs a curve.
/// </summary>
/// <summary>
/// Creates a copy of this curve.
/// </summary>
/// <returns>A copy of this curve.</returns>
/// <summary>
/// Evaluate the value at a position of this <see cref="Curve"/>.
/// </summary>
/// <param name="position">The position on this <see cref="Curve"/>.</param>
/// <returns>Value at the position on this <see cref="Curve"/>.</returns>
//constant
// linear y = a*x +b with a tangeant of last point
//start -> end / start -> end
//make the curve continue (with no step) so must up the curve each cycle of delta(value)
//go back on curve from end and target start 
// start-> end / end -> start
//if pair
//constant
// linear y = a*x +b with a tangeant of last point
//start -> end / start -> end
//make the curve continue (with no step) so must up the curve each cycle of delta(value)
//go back on curve from end and target start 
// start-> end / end -> start
//if pair
//in curve
/// <summary>
/// Computes tangents for all keys in the collection.
/// </summary>
/// <param name="tangentType">The tangent type for both in and out.</param>
/// <summary>
/// Computes tangents for all keys in the collection.
/// </summary>
/// <param name="tangentInType">The tangent in-type. <see cref="CurveKey.TangentIn"/> for more details.</param>
/// <param name="tangentOutType">The tangent out-type. <see cref="CurveKey.TangentOut"/> for more details.</param>
/// <summary>
/// Computes tangent for the specific key in the collection.
/// </summary>
/// <param name="keyIndex">The index of a key in the collection.</param>
/// <param name="tangentType">The tangent type for both in and out.</param>
/// <summary>
/// Computes tangent for the specific key in the collection.
/// </summary>
/// <param name="keyIndex">The index of key in the collection.</param>
/// <param name="tangentInType">The tangent in-type. <see cref="CurveKey.TangentIn"/> for more details.</param>
/// <param name="tangentOutType">The tangent out-type. <see cref="CurveKey.TangentOut"/> for more details.</param>
// See http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.curvetangent.aspx
//only for position in curve
//to have t in [0,1]
//After a lot of search on internet I have found all about spline function
// and bezier (phi'sss ancien) but finaly use hermite curve 
//http://en.wikipedia.org/wiki/Cubic_Hermite_spline
//P(t) = (2*t^3 - 3t^2 + 1)*P0 + (t^3 - 2t^2 + t)m0 + (-2t^3 + 3t^2)P1 + (t^3-t^2)m1
//with P0.value = prev.value , m0 = prev.tangentOut, P1= next.value, m1 = next.TangentIn
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\CurveContinuity.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines the continuity of keys on a <see cref="Curve"/>.
/// </summary>
/// <summary>
/// Interpolation can be used between this key and the next.
/// </summary>
/// <summary>
/// Interpolation cannot be used. A position between the two points returns this point.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\CurveKey.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Key point on the <see cref="Curve"/>.
/// </summary>
// TODO : [TypeConverter(typeof(ExpandableObjectConverter))]
/// <summary>
/// Gets or sets the indicator whether the segment between this point and the next point on the curve is discrete or continuous.
/// </summary>
/// <summary>
/// Gets a position of the key on the curve.
/// </summary>
/// <summary>
/// Gets or sets a tangent when approaching this point from the previous point on the curve.
/// </summary>
/// <summary>
/// Gets or sets a tangent when leaving this point to the next point on the curve.
/// </summary>
/// <summary>
/// Gets a value of this point.
/// </summary>
/// <summary>
/// Creates a new instance of <see cref="CurveKey"/> class with position: 0 and value: 0.
/// </summary>
// This parameterless constructor is needed for correct serialization of CurveKeyCollection and CurveKey.
/// <summary>
/// Creates a new instance of <see cref="CurveKey"/> class.
/// </summary>
/// <param name="position">Position on the curve.</param>
/// <param name="value">Value of the control point.</param>
/// <summary>
/// Creates a new instance of <see cref="CurveKey"/> class.
/// </summary>
/// <param name="position">Position on the curve.</param>
/// <param name="value">Value of the control point.</param>
/// <param name="tangentIn">Tangent approaching point from the previous point on the curve.</param>
/// <param name="tangentOut">Tangent leaving point toward next point on the curve.</param>
/// <summary>
/// Creates a new instance of <see cref="CurveKey"/> class.
/// </summary>
/// <param name="position">Position on the curve.</param>
/// <param name="value">Value of the control point.</param>
/// <param name="tangentIn">Tangent approaching point from the previous point on the curve.</param>
/// <param name="tangentOut">Tangent leaving point toward next point on the curve.</param>
/// <param name="continuity">Indicates whether the curve is discrete or continuous.</param>
/// <summary>
/// 
/// Compares whether two <see cref="CurveKey"/> instances are not equal.
/// </summary>
/// <param name="value1"><see cref="CurveKey"/> instance on the left of the not equal sign.</param>
/// <param name="value2"><see cref="CurveKey"/> instance on the right of the not equal sign.</param>
/// <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
/// <summary>
/// Compares whether two <see cref="CurveKey"/> instances are equal.
/// </summary>
/// <param name="value1"><see cref="CurveKey"/> instance on the left of the equal sign.</param>
/// <param name="value2"><see cref="CurveKey"/> instance on the right of the equal sign.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Creates a copy of this key.
/// </summary>
/// <returns>A copy of this key.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\CurveKeyCollection.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The collection of the <see cref="CurveKey"/> elements and a part of the <see cref="Curve"/> class.
/// </summary>
// TODO : [TypeConverter(typeof(ExpandableObjectConverter))]
/// <summary>
/// Indexer.
/// </summary>
/// <param name="index">The index of key in this collection.</param>
/// <returns><see cref="CurveKey"/> at <paramref name="index"/> position.</returns>
/// <summary>
/// Returns the count of keys in this collection.
/// </summary>
/// <summary>
/// Returns false because it is not a read-only collection.
/// </summary>
/// <summary>
/// Creates a new instance of <see cref="CurveKeyCollection"/> class.
/// </summary>
/// <summary>
/// Adds a key to this collection.
/// </summary>
/// <param name="item">New key for the collection.</param>
/// <exception cref="ArgumentNullException">Throws if <paramref name="item"/> is null.</exception>
/// <remarks>The new key would be added respectively to a position of that key and the position of other keys.</remarks>
/// <summary>
/// Removes all keys from this collection.
/// </summary>
/// <summary>
/// Creates a copy of this collection.
/// </summary>
/// <returns>A copy of this collection.</returns>
/// <summary>
/// Determines whether this collection contains a specific key.
/// </summary>
/// <param name="item">The key to locate in this collection.</param>
/// <returns><c>true</c> if the key is found; <c>false</c> otherwise.</returns>
/// <summary>
/// Copies the keys of this collection to an array, starting at the array index provided.
/// </summary>
/// <param name="array">Destination array where elements will be copied.</param>
/// <param name="arrayIndex">The zero-based index in the array to start copying from.</param>
/// <summary>
/// Returns an enumerator that iterates through the collection.
/// </summary>
/// <returns>An enumerator for the <see cref="CurveKeyCollection"/>.</returns>
/// <summary>
/// Finds element in the collection and returns its index.
/// </summary>
/// <param name="item">Element for the search.</param>
/// <returns>Index of the element; or -1 if item is not found.</returns>
/// <summary>
/// Removes element at the specified index.
/// </summary>
/// <param name="index">The index which element will be removed.</param>
/// <summary>
/// Removes specific element.
/// </summary>
/// <param name="item">The element</param>
/// <returns><c>true</c> if item is successfully removed; <c>false</c> otherwise. This method also returns <c>false</c> if item was not found.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\CurveLoopType.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines how the <see cref="Curve"/> value is determined for position before first point or after the end point on the <see cref="Curve"/>.
/// </summary>
/// <summary>
/// The value of <see cref="Curve"/> will be evaluated as first point for positions before the beginning and end point for positions after the end.
/// </summary>
/// <summary>
/// The positions will wrap around from the end to beginning of the <see cref="Curve"/> for determined the value.
/// </summary>
/// <summary>
/// The positions will wrap around from the end to beginning of the <see cref="Curve"/>.
/// The value will be offset by the difference between the values of first and end <see cref="CurveKey"/> multiplied by the wrap amount.
/// If the position is before the beginning of the <see cref="Curve"/> the difference will be subtracted from its value; otherwise the difference will be added.
/// </summary>
/// <summary>
/// The value at the end of the <see cref="Curve"/> act as an offset from the same side of the <see cref="Curve"/> toward the opposite side.
/// </summary>
/// <summary>
/// The linear interpolation will be performed for determined the value. 
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\CurveTangent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines the different tangent types to be calculated for <see cref="CurveKey"/> points in a <see cref="Curve"/>.
/// </summary>
/// <summary>
/// The tangent which always has a value equal to zero. 
/// </summary>
/// <summary>
/// The tangent which contains a difference between current tangent value and the tangent value from the previous <see cref="CurveKey"/>. 
/// </summary>
/// <summary>
/// The smoouth tangent which contains the inflection between <see cref="CurveKey.TangentIn"/> and <see cref="CurveKey.TangentOut"/> by taking into account the values of both neighbors of the <see cref="CurveKey"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\DisplayOrientation.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines the orientation of the display.
/// </summary>
/// <summary>
/// The default orientation.
/// </summary>
/// <summary>
/// The display is rotated counterclockwise into a landscape orientation. Width is greater than height.
/// </summary>
/// <summary>
/// The display is rotated clockwise into a landscape orientation. Width is greater than height.
/// </summary>
/// <summary>
/// The display is rotated as portrait, where height is greater than width.
/// </summary>
/// <summary>
/// The display is rotated as inverted portrait, where height is greater than width.
/// </summary>
/// <summary>
/// Unknown display orientation.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\DrawableGameComponent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\EventHelpers.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides helper methods to make it easier
/// to safely raise events.
/// </summary>
/// <summary>
/// Safely raises an event by storing a copy of the event's delegate
/// in the <paramref name="handler"/> parameter and checking it for
/// null before invoking it.
/// </summary>
/// <typeparam name="TEventArgs"></typeparam>
/// <param name="sender">The object raising the event.</param>
/// <param name="handler"><see cref="EventHandler{TEventArgs}"/> to be invoked</param>
/// <param name="e">The <typeparamref name="TEventArgs"/> passed to <see cref="EventHandler{TEventArgs}"/></param>
/// <summary>
/// Safely raises an event by storing a copy of the event's delegate
/// in the <paramref name="handler"/> parameter and checking it for
/// null before invoking it.
/// </summary>
/// <param name="sender">The object raising the event.</param>
/// <param name="handler"><see cref="EventHandler"/> to be invoked</param>
/// <param name="e">The <see cref="EventArgs"/> passed to <see cref="EventHandler"/></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\FrameworkDispatcher.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Helper class for processing internal framework events.
/// </summary>
/// <remarks>
/// If you use <see cref="Game"/> class, <see cref="Update()"/> is called automatically.
/// Otherwise you must call it as part of your game loop.
/// </remarks>
/// <summary>
/// Processes framework events.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\FrameworkResources.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Game.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// 60fps
// Calling Update() for first time initializes some systems
// Allow some optional per-platform construction to occur too.
// Dispose loaded game components
/// <summary>
/// The maximum amount of time we will frameskip over and only perform Update calls with no Draw calls.
/// MonoGame extension.
/// </summary>
// Give GamePlatform implementations an opportunity to override
// the new value.
// FIXME: Internal members should be eliminated.
// Currently Game.Initialized is used by the Mac game window class to
// determine whether to raise DeviceResetting and DeviceReset on
// GraphicsDeviceManager.
//Not quite right..
// XNA runs one Update even before showing the window
// NOTE: This code is very sensitive and can break very badly
// with even what looks like a safe change.  Be sure to test 
// any change fully in both the fixed and variable timestep 
// modes across multiple devices and platforms.
// Advance the accumulated elapsed time.
// Sleep for as long as possible without overshooting the update time
// We only have a precision timer on Windows, so other platforms may still overshoot
// Keep looping until it's time to perform the next update
// Do not allow any update to take longer than our maximum.
// Perform as many full fixed length time steps as we can.
//Every update after the first accumulates lag
//If we think we are running slowly, wait until the lag clears before resetting it
//If we lag more than 5 frames, start thinking we are running slowly
//Every time we just do one update and one draw, then we are not running slowly, so decrease the lag
// Draw needs to know the total elapsed time
// that occured for the fixed length updates.
// Perform a single variable length update.
// Draw unless the update suppressed it.
//prevents perpetual exiting on platforms supporting resume.
// TODO: This should be removed once all platforms use the new GraphicsDeviceManager
// According to the information given on MSDN (see link below), all
// GameComponents in Components at the time Initialize() is called
// are initialized.
// http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.game.initialize.aspx
// Initialize all existing components
// Since we only subscribe to ComponentAdded after the graphics
// devices are set up, it is safe to just blindly call Initialize.
// FIXME: We should work toward eliminating internal methods.  They
//        break entirely the possibility that additional platforms could
//        be added by third parties without changing MonoGame itself.
//The TouchPanel needs to know the time for when touches arrive
// Draw and EndDraw should not be called if BeginDraw returns false.
// http://stackoverflow.com/questions/4054936/manual-control-over-when-to-redraw-the-screen/4057180#4057180
// http://stackoverflow.com/questions/4235439/xna-3-1-to-4-0-requires-constant-redraw-or-will-display-a-purple-screen
// We need to do this after virtual Initialize(...) is called.
// 1. Categorize components into IUpdateable and IDrawable lists.
// 2. Subscribe to Added/Removed events to keep the categorized
//    lists synced and to Initialize future components as they are
//    added.            
// NOTE: InitializeExistingComponents really should only be called once.
//       Game.Initialize is the only method in a position to guarantee
//       that no component will get a duplicate Initialize call.
//       Further calls to Initialize occur immediately in response to
//       Components.ComponentAdded.
// FIXME: I am open to a better name for this method.  It does the
//        opposite of CategorizeComponents.
// FIXME: I am open to a better name for this method.  It does the
//        opposite of CategorizeComponent.
/// <summary>
/// The SortingFilteringCollection class provides efficient, reusable
/// sorting and filtering based on a configurable sort comparer, filter
/// predicate, and associate change events.
/// </summary>
// Rebuild the cache
// If the cache was invalidated as a result of processing items,
// now is a good time to clear it and give the GC (more of) a
// chance to do its thing.
// NOTE: We subscribe to item events after items in _addJournal
//       have been merged.
// Sort high to low
// Remove items in reverse.  (Technically there exist faster
// ways to bulk-remove from a variable-length array, but List<T>
// does not provide such a method.)
// Prepare the _addJournal to be merge-sorted with _items.
// _items is already sorted (because it is always sorted).
// If addJournalItem is less than (belongs before)
// _items[iItems], insert it.
// Always increment iItems, either because we inserted and
// need to move past the insertion, or because we didn't
// insert and need to consider the next element.
// If _addJournal had any "tail" items, append them all now.
// Until the item is back in place, we don't care about its
// events.  We will re-subscribe when _addJournal is processed.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\GameComponent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Shuts down the component.
/// </summary>
/// <summary>
/// Shuts down the component.
/// </summary>
// TODO: Should be removed, as it is not part of XNA 4.0
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\GameComponentCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Event that is triggered when a <see cref="GameComponent"/> is added
/// to this <see cref="GameComponentCollection"/>.
/// </summary>
/// <summary>
/// Event that is triggered when a <see cref="GameComponent"/> is removed
/// from this <see cref="GameComponentCollection"/>.
/// </summary>
/// <summary>
/// Removes every <see cref="GameComponent"/> from this <see cref="GameComponentCollection"/>.
/// Triggers <see cref="OnComponentRemoved"/> once for each <see cref="GameComponent"/> removed.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\GameComponentCollectionEventArgs.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\GamePlatform.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// When implemented in a derived class, reports the default
/// GameRunBehavior for this platform.
/// </summary>
/// <summary>
/// Gets the Game instance that owns this GamePlatform instance.
/// </summary>
/// <summary>
/// Raises the AsyncRunLoopEnded event.  This method must be called by
/// derived classes when the asynchronous run loop they start has
/// stopped running.
/// </summary>
/// <summary>
/// Gives derived classes an opportunity to do work before any
/// components are initialized.  Note that the base implementation sets
/// IsActive to true, so derived classes should either call the base
/// implementation or set IsActive to true by their own means.
/// </summary>
/// <summary>
/// Gives derived classes an opportunity to do work just before the
/// run loop is begun.  Implementations may also return false to prevent
/// the run loop from starting.
/// </summary>
/// <returns></returns>
/// <summary>
/// When implemented in a derived, ends the active run loop.
/// </summary>
/// <summary>
/// When implemented in a derived, starts the run loop and blocks
/// until it has ended.
/// </summary>
/// <summary>
/// When implemented in a derived, starts the run loop and returns
/// immediately.
/// </summary>
/// <summary>
/// Gives derived classes an opportunity to do work just before Update
/// is called for all IUpdatable components.  Returning false from this
/// method will result in this round of Update calls being skipped.
/// </summary>
/// <param name="gameTime"></param>
/// <returns></returns>
/// <summary>
/// Gives derived classes an opportunity to do work just before Draw
/// is called for all IDrawable components.  Returning false from this
/// method will result in this round of Draw calls being skipped.
/// </summary>
/// <param name="gameTime"></param>
/// <returns></returns>
/// <summary>
/// When implemented in a derived class, causes the game to enter
/// full-screen mode.
/// </summary>
/// <summary>
/// When implemented in a derived class, causes the game to exit
/// full-screen mode.
/// </summary>
/// <summary>
/// Gives derived classes an opportunity to modify
/// Game.TargetElapsedTime before it is set.
/// </summary>
/// <param name="value">The proposed new value of TargetElapsedTime.</param>
/// <returns>The new value of TargetElapsedTime that will be set.</returns>
/// <summary>
/// Starts a device transition (windowed to full screen or vice versa).
/// </summary>
/// <param name='willBeFullScreen'>
/// Specifies whether the device will be in full-screen mode upon completion of the change.
/// </param>
/// <summary>
/// Completes a device transition.
/// </summary>
/// <param name='screenDeviceName'>
/// Screen device name.
/// </param>
/// <param name='clientWidth'>
/// The new width of the game's client window.
/// </param>
/// <param name='clientHeight'>
/// The new height of the game's client window.
/// </param>
/// <summary>
/// Gives derived classes an opportunity to take action after
/// Game.TargetElapsedTime has been set.
/// </summary>
/// <summary>
/// MSDN: Use this method if your game is recovering from a slow-running state, and ElapsedGameTime is too large to be useful.
/// Frame timing is generally handled by the Game class, but some platforms still handle it elsewhere. Once all platforms
/// rely on the Game class's functionality, this method and any overrides should be removed.
/// </summary>
/// <summary>
/// Called by the GraphicsDeviceManager to notify the platform
/// that the presentation parameters have changed.
/// </summary>
/// <param name="pp">The new presentation parameters.</param>
/// <summary>
/// Performs application-defined tasks associated with freeing,
/// releasing, or resetting unmanaged resources.
/// </summary>
/// <summary>
/// Log the specified Message.
/// </summary>
/// <param name='Message'>
/// 
/// </param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\GameRunBehavior.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines how <see cref="Game"/> should be runned.
/// </summary>
/// <summary>
/// The game loop will be runned asynchronous.
/// </summary>
/// <summary>
/// The game loop will be runned synchronous.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\GameServiceContainer.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\GameTime.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\GameWindow.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets or sets a bool that enables usage of Alt+F4 for window closing on desktop platforms. Value is true by default.
/// </summary>
/// <summary>
/// The location of this window on the desktop, eg: global coordinate space
/// which stretches across all screens.
/// </summary>
/// <summary>
/// Gets or sets the title of the game window.
/// </summary>
/// <remarks>
/// For Windows 8 and Windows 10 UWP this has no effect. For these platforms the title should be
/// set by using the DisplayName property found in the app manifest file.
/// </remarks>
/// <summary>
/// Determines whether the border of the window is visible. Currently only supported on the WinDX and WinGL/Linux platforms.
/// </summary>
/// <exception cref="System.NotImplementedException">
/// Thrown when trying to use this property on a platform other than the WinDX and WinGL/Linux platforms.
/// </exception>
/// <summary>
/// Use this event to retrieve text for objects like textbox's.
/// This event is not raised by noncharacter keys.
/// This event also supports key repeat.
/// For more information this event is based off:
/// http://msdn.microsoft.com/en-AU/library/system.windows.forms.control.keypress.aspx
/// </summary>
/// <remarks>
/// This event is only supported on the Windows DirectX, Windows OpenGL and Linux platforms.
/// </remarks>
/// <summary>
/// Buffered keyboard KeyDown event.
/// </summary>
/// <summary>
/// Buffered keyboard KeyUp event.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\GraphicsDeviceInformation.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The settings used in creation of the graphics device.
/// See <see cref="GraphicsDeviceManager.PreparingDeviceSettings"/>.
/// </summary>
/// <summary>
/// The graphics adapter on which the graphics device will be created.
/// </summary>
/// <remarks>
/// This is only valid on desktop systems where multiple graphics 
/// adapters are possible.  Defaults to <see cref="GraphicsAdapter.DefaultAdapter"/>.
/// </remarks>
/// <summary>
/// The requested graphics device feature set. 
/// </summary>
/// <summary>
/// The settings that define how graphics will be presented to the display.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\GraphicsDeviceManager.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Used to initialize and control the presentation of the graphics device.
/// </summary>
// dirty flag for ApplyChanges
/// <summary>
/// The default back buffer width.
/// </summary>
/// <summary>
/// The default back buffer height.
/// </summary>
/// <summary>
/// Optional override for platform specific defaults.
/// </summary>
/// <summary>
/// Associates this graphics device manager to a game instances.
/// </summary>
/// <param name="game">The game instance to attach.</param>
// Assume the window client size as the default back 
// buffer resolution in the landscape orientation.
// Default to windowed mode... this is ignored on platforms that don't support it.
// XNA would read this from the manifest, but it would always default
// to reach unless changed.  So lets mimic that without the manifest bit.
// Let the plaform optionally overload construction defaults.
// hook up reset events
// update the touchpanel display size when the graphicsdevice is reset
/// <summary>
/// This populates a GraphicsDeviceInformation instance and invokes PreparingDeviceSettings to
/// allow users to change the settings. Then returns that GraphicsDeviceInformation.
/// Throws NullReferenceException if users set GraphicsDeviceInformation.PresentationParameters to null.
/// </summary>
// this allows users to overwrite settings through the argument
// always initialize MultiSampleCount to the maximum, if users want to overwrite
// this they have to respond to the PreparingDeviceSettingsEvent and modify
// args.GraphicsDeviceInformation.PresentationParameters.MultiSampleCount
/// <summary>
/// Applies any pending property changes to the graphics device.
/// </summary>
// If the device hasn't been created then create it now.
// Allow for optional platform specific behavior.
// populates a gdi with settings in this gdm and allows users to override them with
// PrepareDeviceSettings event this information should be applied to the GraphicsDevice
// if the GraphicsProfile changed we need to create a new GraphicsDevice
// Allow for any per-platform changes to the presentation.
/// <summary>
/// Toggles between windowed and fullscreen modes.
/// </summary>
/// <remarks>
/// Note that on platforms that do not support windowed modes this has no affect.
/// </remarks>
/// <summary>
/// The profile which determines the graphics feature level.
/// </summary>
/// <summary>
/// Returns the graphics device for this manager.
/// </summary>
/// <summary>
/// Indicates the desire to switch into fullscreen mode.
/// </summary>
/// <remarks>
/// When called at startup this will automatically set fullscreen mode during initialization.  If
/// set after startup you must call ApplyChanges() for the fullscreen mode to be changed.
/// Note that for some platforms that do not support windowed modes this property has no affect.
/// </remarks>
/// <summary>
/// Gets or sets the boolean which defines how window switches from windowed to fullscreen state.
/// "Hard" mode(true) is slow to switch, but more effecient for performance, while "soft" mode(false) is vice versa.
/// The default value is <c>true</c>.
/// </summary>
/// <summary>
/// Indicates if DX9 style pixel addressing or current standard
/// pixel addressing should be used. This flag is set to
/// <c>false</c> by default. It should be set to <c>true</c>
/// for XNA compatibility. It is recommended to leave this flag
/// set to <c>false</c> for projects that are not ported from
/// XNA. This value is passed to <see cref="GraphicsDevice.UseHalfPixelOffset"/>.
/// </summary>
/// <remarks>
/// XNA uses DirectX9 for its graphics. DirectX9 interprets UV
/// coordinates differently from other graphics API's. This is
/// typically referred to as the half-pixel offset. MonoGame
/// replicates XNA behavior if this flag is set to <c>true</c>.
/// </remarks>
/// <summary>
/// Indicates the desire for a multisampled back buffer.
/// </summary>
/// <remarks>
/// When called at startup this will automatically set the MSAA mode during initialization.  If
/// set after startup you must call ApplyChanges() for the MSAA mode to be changed.
/// </remarks>
/// <summary>
/// Indicates the desired back buffer color format.
/// </summary>
/// <remarks>
/// When called at startup this will automatically set the format during initialization.  If
/// set after startup you must call ApplyChanges() for the format to be changed.
/// </remarks>
/// <summary>
/// Indicates the desired back buffer height in pixels.
/// </summary>
/// <remarks>
/// When called at startup this will automatically set the height during initialization.  If
/// set after startup you must call ApplyChanges() for the height to be changed.
/// </remarks>
/// <summary>
/// Indicates the desired back buffer width in pixels.
/// </summary>
/// <remarks>
/// When called at startup this will automatically set the width during initialization.  If
/// set after startup you must call ApplyChanges() for the width to be changed.
/// </remarks>
/// <summary>
/// Indicates the desired depth-stencil buffer format.
/// </summary>
/// <remarks>
/// The depth-stencil buffer format defines the scene depth precision and stencil bits available for effects during rendering.
/// When called at startup this will automatically set the format during initialization.  If
/// set after startup you must call ApplyChanges() for the format to be changed.
/// </remarks>
/// <summary>
/// Indicates the desire for vsync when presenting the back buffer.
/// </summary>
/// <remarks>
/// Vsync limits the frame rate of the game to the monitor referesh rate to prevent screen tearing.
/// When called at startup this will automatically set the vsync mode during initialization.  If
/// set after startup you must call ApplyChanges() for the vsync mode to be changed.
/// </remarks>
/// <summary>
/// Indicates the desired allowable display orientations when the device is rotated.
/// </summary>
/// <remarks>
/// This property only applies to mobile platforms with automatic display rotation.
/// When called at startup this will automatically apply the supported orientations during initialization.  If
/// set after startup you must call ApplyChanges() for the supported orientations to be changed.
/// </remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\IDrawable.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\IGameComponent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\IGraphicsDeviceManager.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Used by the platform code to control the graphics device.
/// </summary>
/// <summary>
/// Called at the start of rendering a frame.
/// </summary>
/// <returns>Returns true if the frame should be rendered.</returns>
/// <summary>
/// Called to create the graphics device.
/// </summary>
/// <remarks>Does nothing if the graphics device is already created.</remarks>
/// <summary>
/// Called after rendering to present the frame to the screen.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\IPlatformBackButton.cs
/// <summary>
/// Allows for platform specific handling of the Back button. 
/// </summary>
/// <seealso cref="http://www.monogame.net/documentation/?page=Platform_Specific_Notes"/>
/// <summary>
/// Return true if your game has handled the back button event
/// retrn false if you want the operating system to handle it.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\IUpdateable.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\LaunchParameters.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\MathHelper.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Contains commonly used precalculated values and mathematical operations.
/// </summary>
/// <summary>
/// Represents the mathematical constant e(2.71828175).
/// </summary>
/// <summary>
/// Represents the log base ten of e(0.4342945).
/// </summary>
/// <summary>
/// Represents the log base two of e(1.442695).
/// </summary>
/// <summary>
/// Represents the value of pi(3.14159274).
/// </summary>
/// <summary>
/// Represents the value of pi divided by two(1.57079637).
/// </summary>
/// <summary>
/// Represents the value of pi divided by four(0.7853982).
/// </summary>
/// <summary>
/// Represents the value of pi times two(6.28318548).
/// </summary>
/// <summary>
/// Represents the value of pi times two(6.28318548).
/// This is an alias of TwoPi.
/// </summary>
/// <summary>
/// Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.
/// </summary>
/// <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
/// <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
/// <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
/// <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
/// <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
/// <returns>Cartesian coordinate of the specified point with respect to the axis being used.</returns>
/// <summary>
/// Performs a Catmull-Rom interpolation using the specified positions.
/// </summary>
/// <param name="value1">The first position in the interpolation.</param>
/// <param name="value2">The second position in the interpolation.</param>
/// <param name="value3">The third position in the interpolation.</param>
/// <param name="value4">The fourth position in the interpolation.</param>
/// <param name="amount">Weighting factor.</param>
/// <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
// Using formula from http://www.mvps.org/directx/articles/catmull/
// Internally using doubles not to lose precission
/// <summary>
/// Restricts a value to be within a specified range.
/// </summary>
/// <param name="value">The value to clamp.</param>
/// <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
/// <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
/// <returns>The clamped value.</returns>
// First we check to see if we're greater than the max
// Then we check to see if we're less than the min.
// There's no check to see if min > max.
/// <summary>
/// Restricts a value to be within a specified range.
/// </summary>
/// <param name="value">The value to clamp.</param>
/// <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
/// <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
/// <returns>The clamped value.</returns>
/// <summary>
/// Calculates the absolute value of the difference of two values.
/// </summary>
/// <param name="value1">Source value.</param>
/// <param name="value2">Source value.</param>
/// <returns>Distance between the two values.</returns>
/// <summary>
/// Performs a Hermite spline interpolation.
/// </summary>
/// <param name="value1">Source position.</param>
/// <param name="tangent1">Source tangent.</param>
/// <param name="value2">Source position.</param>
/// <param name="tangent2">Source tangent.</param>
/// <param name="amount">Weighting factor.</param>
/// <returns>The result of the Hermite spline interpolation.</returns>
// All transformed to double not to lose precission
// Otherwise, for high numbers of param:amount the result is NaN instead of Infinity
/// <summary>
/// Linearly interpolates between two values.
/// </summary>
/// <param name="value1">Source value.</param>
/// <param name="value2">Destination value.</param>
/// <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
/// <returns>Interpolated value.</returns> 
/// <remarks>This method performs the linear interpolation based on the following formula:
/// <code>value1 + (value2 - value1) * amount</code>.
/// Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned.
/// See <see cref="MathHelper.LerpPrecise"/> for a less efficient version with more precision around edge cases.
/// </remarks>
/// <summary>
/// Linearly interpolates between two values.
/// This method is a less efficient, more precise version of <see cref="MathHelper.Lerp"/>.
/// See remarks for more info.
/// </summary>
/// <param name="value1">Source value.</param>
/// <param name="value2">Destination value.</param>
/// <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
/// <returns>Interpolated value.</returns>
/// <remarks>This method performs the linear interpolation based on the following formula:
/// <code>((1 - amount) * value1) + (value2 * amount)</code>.
/// Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned.
/// This method does not have the floating point precision issue that <see cref="MathHelper.Lerp"/> has.
/// i.e. If there is a big gap between value1 and value2 in magnitude (e.g. value1=10000000000000000, value2=1),
/// right at the edge of the interpolation range (amount=1), <see cref="MathHelper.Lerp"/> will return 0 (whereas it should return 1).
/// This also holds for value1=10^17, value2=10; value1=10^18,value2=10^2... so on.
/// For an in depth explanation of the issue, see below references:
/// Relevant Wikipedia Article: https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support
/// Relevant StackOverflow Answer: http://stackoverflow.com/questions/4353525/floating-point-linear-interpolation#answer-23716956
/// </remarks>
/// <summary>
/// Returns the greater of two values.
/// </summary>
/// <param name="value1">Source value.</param>
/// <param name="value2">Source value.</param>
/// <returns>The greater value.</returns>
/// <summary>
/// Returns the greater of two values.
/// </summary>
/// <param name="value1">Source value.</param>
/// <param name="value2">Source value.</param>
/// <returns>The greater value.</returns>
/// <summary>
/// Returns the lesser of two values.
/// </summary>
/// <param name="value1">Source value.</param>
/// <param name="value2">Source value.</param>
/// <returns>The lesser value.</returns>
/// <summary>
/// Returns the lesser of two values.
/// </summary>
/// <param name="value1">Source value.</param>
/// <param name="value2">Source value.</param>
/// <returns>The lesser value.</returns>
/// <summary>
/// Interpolates between two values using a cubic equation.
/// </summary>
/// <param name="value1">Source value.</param>
/// <param name="value2">Source value.</param>
/// <param name="amount">Weighting value.</param>
/// <returns>Interpolated value.</returns>
// It is expected that 0 < amount < 1
// If amount < 0, return value1
// If amount > 1, return value2
/// <summary>
/// Converts radians to degrees.
/// </summary>
/// <param name="radians">The angle in radians.</param>
/// <returns>The angle in degrees.</returns>
/// <remarks>
/// This method uses double precission internally,
/// though it returns single float
/// Factor = 180 / pi
/// </remarks>
/// <summary>
/// Converts degrees to radians.
/// </summary>
/// <param name="degrees">The angle in degrees.</param>
/// <returns>The angle in radians.</returns>
/// <remarks>
/// This method uses double precission internally,
/// though it returns single float
/// Factor = pi / 180
/// </remarks>
/// <summary>
/// Reduces a given angle to a value between π and -π.
/// </summary>
/// <param name="angle">The angle to reduce, in radians.</param>
/// <returns>The new angle, in radians.</returns>
/// <summary>
/// Determines if value is powered by two.
/// </summary>
/// <param name="value">A value.</param>
/// <returns><c>true</c> if <c>value</c> is powered by two; otherwise <c>false</c>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Matrix.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents the right-handed 4x4 floating point matrix, which can store translation, scale and rotation information.
/// </summary>
/// <summary>
/// Constructs a matrix.
/// </summary>
/// <param name="m11">A first row and first column value.</param>
/// <param name="m12">A first row and second column value.</param>
/// <param name="m13">A first row and third column value.</param>
/// <param name="m14">A first row and fourth column value.</param>
/// <param name="m21">A second row and first column value.</param>
/// <param name="m22">A second row and second column value.</param>
/// <param name="m23">A second row and third column value.</param>
/// <param name="m24">A second row and fourth column value.</param>
/// <param name="m31">A third row and first column value.</param>
/// <param name="m32">A third row and second column value.</param>
/// <param name="m33">A third row and third column value.</param>
/// <param name="m34">A third row and fourth column value.</param>
/// <param name="m41">A fourth row and first column value.</param>
/// <param name="m42">A fourth row and second column value.</param>
/// <param name="m43">A fourth row and third column value.</param>
/// <param name="m44">A fourth row and fourth column value.</param>
/// <summary>
/// Constructs a matrix.
/// </summary>
/// <param name="row1">A first row of the created matrix.</param>
/// <param name="row2">A second row of the created matrix.</param>
/// <param name="row3">A third row of the created matrix.</param>
/// <param name="row4">A fourth row of the created matrix.</param>
/// <summary>
/// A first row and first column value.
/// </summary>
/// <summary>
/// A first row and second column value.
/// </summary>
/// <summary>
/// A first row and third column value.
/// </summary>
/// <summary>
/// A first row and fourth column value.
/// </summary>
/// <summary>
/// A second row and first column value.
/// </summary>
/// <summary>
/// A second row and second column value.
/// </summary>
/// <summary>
/// A second row and third column value.
/// </summary>
/// <summary>
/// A second row and fourth column value.
/// </summary>
/// <summary>
/// A third row and first column value.
/// </summary>
/// <summary>
/// A third row and second column value.
/// </summary>
/// <summary>
/// A third row and third column value.
/// </summary>
/// <summary>
/// A third row and fourth column value.
/// </summary>
/// <summary>
/// A fourth row and first column value.
/// </summary>
/// <summary>
/// A fourth row and second column value.
/// </summary>
/// <summary>
/// A fourth row and third column value.
/// </summary>
/// <summary>
/// A fourth row and fourth column value.
/// </summary>
/// <summary>
/// The backward vector formed from the third row M31, M32, M33 elements.
/// </summary>
/// <summary>
/// The down vector formed from the second row -M21, -M22, -M23 elements.
/// </summary>
/// <summary>
/// The forward vector formed from the third row -M31, -M32, -M33 elements.
/// </summary>
/// <summary>
/// Returns the identity matrix.
/// </summary>
/// <summary>
/// The left vector formed from the first row -M11, -M12, -M13 elements.
/// </summary>
/// <summary>
/// The right vector formed from the first row M11, M12, M13 elements.
/// </summary>
/// <summary>
/// Position stored in this matrix.
/// </summary>
/// <summary>
/// The upper vector formed from the second row M21, M22, M23 elements.
/// </summary>
/// <summary>
/// Creates a new <see cref="Matrix"/> which contains sum of two matrixes.
/// </summary>
/// <param name="matrix1">The first matrix to add.</param>
/// <param name="matrix2">The second matrix to add.</param>
/// <returns>The result of the matrix addition.</returns>
/// <summary>
/// Creates a new <see cref="Matrix"/> which contains sum of two matrixes.
/// </summary>
/// <param name="matrix1">The first matrix to add.</param>
/// <param name="matrix2">The second matrix to add.</param>
/// <param name="result">The result of the matrix addition as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Matrix"/> for spherical billboarding that rotates around specified object position.
/// </summary>
/// <param name="objectPosition">Position of billboard object. It will rotate around that vector.</param>
/// <param name="cameraPosition">The camera position.</param>
/// <param name="cameraUpVector">The camera up vector.</param>
/// <param name="cameraForwardVector">Optional camera forward vector.</param>
/// <returns>The <see cref="Matrix"/> for spherical billboarding.</returns>
// Delegate to the other overload of the function to do the work
/// <summary>
/// Creates a new <see cref="Matrix"/> for spherical billboarding that rotates around specified object position.
/// </summary>
/// <param name="objectPosition">Position of billboard object. It will rotate around that vector.</param>
/// <param name="cameraPosition">The camera position.</param>
/// <param name="cameraUpVector">The camera up vector.</param>
/// <param name="cameraForwardVector">Optional camera forward vector.</param>
/// <param name="result">The <see cref="Matrix"/> for spherical billboarding as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Matrix"/> for cylindrical billboarding that rotates around specified axis.
/// </summary>
/// <param name="objectPosition">Object position the billboard will rotate around.</param>
/// <param name="cameraPosition">Camera position.</param>
/// <param name="rotateAxis">Axis of billboard for rotation.</param>
/// <param name="cameraForwardVector">Optional camera forward vector.</param>
/// <param name="objectForwardVector">Optional object forward vector.</param>
/// <returns>The <see cref="Matrix"/> for cylindrical billboarding.</returns>
/// <summary>
/// Creates a new <see cref="Matrix"/> for cylindrical billboarding that rotates around specified axis.
/// </summary>
/// <param name="objectPosition">Object position the billboard will rotate around.</param>
/// <param name="cameraPosition">Camera position.</param>
/// <param name="rotateAxis">Axis of billboard for rotation.</param>
/// <param name="cameraForwardVector">Optional camera forward vector.</param>
/// <param name="objectForwardVector">Optional object forward vector.</param>
/// <param name="result">The <see cref="Matrix"/> for cylindrical billboarding as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Matrix"/> which contains the rotation moment around specified axis.
/// </summary>
/// <param name="axis">The axis of rotation.</param>
/// <param name="angle">The angle of rotation in radians.</param>
/// <returns>The rotation <see cref="Matrix"/>.</returns>
/// <summary>
/// Creates a new <see cref="Matrix"/> which contains the rotation moment around specified axis.
/// </summary>
/// <param name="axis">The axis of rotation.</param>
/// <param name="angle">The angle of rotation in radians.</param>
/// <param name="result">The rotation <see cref="Matrix"/> as an output parameter.</param>
/// <summary>
/// Creates a new rotation <see cref="Matrix"/> from a <see cref="Quaternion"/>.
/// </summary>
/// <param name="quaternion"><see cref="Quaternion"/> of rotation moment.</param>
/// <returns>The rotation <see cref="Matrix"/>.</returns>
/// <summary>
/// Creates a new rotation <see cref="Matrix"/> from a <see cref="Quaternion"/>.
/// </summary>
/// <param name="quaternion"><see cref="Quaternion"/> of rotation moment.</param>
/// <param name="result">The rotation <see cref="Matrix"/> as an output parameter.</param>
/// <summary>
/// Creates a new rotation <see cref="Matrix"/> from the specified yaw, pitch and roll values.
/// </summary>
/// <param name="yaw">The yaw rotation value in radians.</param>
/// <param name="pitch">The pitch rotation value in radians.</param>
/// <param name="roll">The roll rotation value in radians.</param>
/// <returns>The rotation <see cref="Matrix"/>.</returns>
/// <remarks>For more information about yaw, pitch and roll visit http://en.wikipedia.org/wiki/Euler_angles.
/// </remarks>
/// <summary>
/// Creates a new rotation <see cref="Matrix"/> from the specified yaw, pitch and roll values.
/// </summary>
/// <param name="yaw">The yaw rotation value in radians.</param>
/// <param name="pitch">The pitch rotation value in radians.</param>
/// <param name="roll">The roll rotation value in radians.</param>
/// <param name="result">The rotation <see cref="Matrix"/> as an output parameter.</param>
/// <remarks>For more information about yaw, pitch and roll visit http://en.wikipedia.org/wiki/Euler_angles.
/// </remarks>
/// <summary>
/// Creates a new viewing <see cref="Matrix"/>.
/// </summary>
/// <param name="cameraPosition">Position of the camera.</param>
/// <param name="cameraTarget">Lookup vector of the camera.</param>
/// <param name="cameraUpVector">The direction of the upper edge of the camera.</param>
/// <returns>The viewing <see cref="Matrix"/>.</returns>
/// <summary>
/// Creates a new viewing <see cref="Matrix"/>.
/// </summary>
/// <param name="cameraPosition">Position of the camera.</param>
/// <param name="cameraTarget">Lookup vector of the camera.</param>
/// <param name="cameraUpVector">The direction of the upper edge of the camera.</param>
/// <param name="result">The viewing <see cref="Matrix"/> as an output parameter.</param>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for orthographic view.
/// </summary>
/// <param name="width">Width of the viewing volume.</param>
/// <param name="height">Height of the viewing volume.</param>
/// <param name="zNearPlane">Depth of the near plane.</param>
/// <param name="zFarPlane">Depth of the far plane.</param>
/// <returns>The new projection <see cref="Matrix"/> for orthographic view.</returns>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for orthographic view.
/// </summary>
/// <param name="width">Width of the viewing volume.</param>
/// <param name="height">Height of the viewing volume.</param>
/// <param name="zNearPlane">Depth of the near plane.</param>
/// <param name="zFarPlane">Depth of the far plane.</param>
/// <param name="result">The new projection <see cref="Matrix"/> for orthographic view as an output parameter.</param>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for customized orthographic view.
/// </summary>
/// <param name="left">Lower x-value at the near plane.</param>
/// <param name="right">Upper x-value at the near plane.</param>
/// <param name="bottom">Lower y-coordinate at the near plane.</param>
/// <param name="top">Upper y-value at the near plane.</param>
/// <param name="zNearPlane">Depth of the near plane.</param>
/// <param name="zFarPlane">Depth of the far plane.</param>
/// <returns>The new projection <see cref="Matrix"/> for customized orthographic view.</returns>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for customized orthographic view.
/// </summary>
/// <param name="viewingVolume">The viewing volume.</param>
/// <param name="zNearPlane">Depth of the near plane.</param>
/// <param name="zFarPlane">Depth of the far plane.</param>
/// <returns>The new projection <see cref="Matrix"/> for customized orthographic view.</returns>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for customized orthographic view.
/// </summary>
/// <param name="left">Lower x-value at the near plane.</param>
/// <param name="right">Upper x-value at the near plane.</param>
/// <param name="bottom">Lower y-coordinate at the near plane.</param>
/// <param name="top">Upper y-value at the near plane.</param>
/// <param name="zNearPlane">Depth of the near plane.</param>
/// <param name="zFarPlane">Depth of the far plane.</param>
/// <param name="result">The new projection <see cref="Matrix"/> for customized orthographic view as an output parameter.</param>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for perspective view.
/// </summary>
/// <param name="width">Width of the viewing volume.</param>
/// <param name="height">Height of the viewing volume.</param>
/// <param name="nearPlaneDistance">Distance to the near plane.</param>
/// <param name="farPlaneDistance">Distance to the far plane.</param>
/// <returns>The new projection <see cref="Matrix"/> for perspective view.</returns>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for perspective view.
/// </summary>
/// <param name="width">Width of the viewing volume.</param>
/// <param name="height">Height of the viewing volume.</param>
/// <param name="nearPlaneDistance">Distance to the near plane.</param>
/// <param name="farPlaneDistance">Distance to the far plane.</param>
/// <param name="result">The new projection <see cref="Matrix"/> for perspective view as an output parameter.</param>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for perspective view with field of view.
/// </summary>
/// <param name="fieldOfView">Field of view in the y direction in radians.</param>
/// <param name="aspectRatio">Width divided by height of the viewing volume.</param>
/// <param name="nearPlaneDistance">Distance to the near plane.</param>
/// <param name="farPlaneDistance">Distance to the far plane.</param>
/// <returns>The new projection <see cref="Matrix"/> for perspective view with FOV.</returns>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for perspective view with field of view.
/// </summary>
/// <param name="fieldOfView">Field of view in the y direction in radians.</param>
/// <param name="aspectRatio">Width divided by height of the viewing volume.</param>
/// <param name="nearPlaneDistance">Distance of the near plane.</param>
/// <param name="farPlaneDistance">Distance of the far plane.</param>
/// <param name="result">The new projection <see cref="Matrix"/> for perspective view with FOV as an output parameter.</param>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for customized perspective view.
/// </summary>
/// <param name="left">Lower x-value at the near plane.</param>
/// <param name="right">Upper x-value at the near plane.</param>
/// <param name="bottom">Lower y-coordinate at the near plane.</param>
/// <param name="top">Upper y-value at the near plane.</param>
/// <param name="nearPlaneDistance">Distance to the near plane.</param>
/// <param name="farPlaneDistance">Distance to the far plane.</param>
/// <returns>The new <see cref="Matrix"/> for customized perspective view.</returns>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for customized perspective view.
/// </summary>
/// <param name="viewingVolume">The viewing volume.</param>
/// <param name="nearPlaneDistance">Distance to the near plane.</param>
/// <param name="farPlaneDistance">Distance to the far plane.</param>
/// <returns>The new <see cref="Matrix"/> for customized perspective view.</returns>
/// <summary>
/// Creates a new projection <see cref="Matrix"/> for customized perspective view.
/// </summary>
/// <param name="left">Lower x-value at the near plane.</param>
/// <param name="right">Upper x-value at the near plane.</param>
/// <param name="bottom">Lower y-coordinate at the near plane.</param>
/// <param name="top">Upper y-value at the near plane.</param>
/// <param name="nearPlaneDistance">Distance to the near plane.</param>
/// <param name="farPlaneDistance">Distance to the far plane.</param>
/// <param name="result">The new <see cref="Matrix"/> for customized perspective view as an output parameter.</param>
/// <summary>
/// Creates a new rotation <see cref="Matrix"/> around X axis.
/// </summary>
/// <param name="radians">Angle in radians.</param>
/// <returns>The rotation <see cref="Matrix"/> around X axis.</returns>
/// <summary>
/// Creates a new rotation <see cref="Matrix"/> around X axis.
/// </summary>
/// <param name="radians">Angle in radians.</param>
/// <param name="result">The rotation <see cref="Matrix"/> around X axis as an output parameter.</param>
/// <summary>
/// Creates a new rotation <see cref="Matrix"/> around Y axis.
/// </summary>
/// <param name="radians">Angle in radians.</param>
/// <returns>The rotation <see cref="Matrix"/> around Y axis.</returns>
/// <summary>
/// Creates a new rotation <see cref="Matrix"/> around Y axis.
/// </summary>
/// <param name="radians">Angle in radians.</param>
/// <param name="result">The rotation <see cref="Matrix"/> around Y axis as an output parameter.</param>
/// <summary>
/// Creates a new rotation <see cref="Matrix"/> around Z axis.
/// </summary>
/// <param name="radians">Angle in radians.</param>
/// <returns>The rotation <see cref="Matrix"/> around Z axis.</returns>
/// <summary>
/// Creates a new rotation <see cref="Matrix"/> around Z axis.
/// </summary>
/// <param name="radians">Angle in radians.</param>
/// <param name="result">The rotation <see cref="Matrix"/> around Z axis as an output parameter.</param>
/// <summary>
/// Creates a new scaling <see cref="Matrix"/>.
/// </summary>
/// <param name="scale">Scale value for all three axises.</param>
/// <returns>The scaling <see cref="Matrix"/>.</returns>
/// <summary>
/// Creates a new scaling <see cref="Matrix"/>.
/// </summary>
/// <param name="scale">Scale value for all three axises.</param>
/// <param name="result">The scaling <see cref="Matrix"/> as an output parameter.</param>
/// <summary>
/// Creates a new scaling <see cref="Matrix"/>.
/// </summary>
/// <param name="xScale">Scale value for X axis.</param>
/// <param name="yScale">Scale value for Y axis.</param>
/// <param name="zScale">Scale value for Z axis.</param>
/// <returns>The scaling <see cref="Matrix"/>.</returns>
/// <summary>
/// Creates a new scaling <see cref="Matrix"/>.
/// </summary>
/// <param name="xScale">Scale value for X axis.</param>
/// <param name="yScale">Scale value for Y axis.</param>
/// <param name="zScale">Scale value for Z axis.</param>
/// <param name="result">The scaling <see cref="Matrix"/> as an output parameter.</param>
/// <summary>
/// Creates a new scaling <see cref="Matrix"/>.
/// </summary>
/// <param name="scales"><see cref="Vector3"/> representing x,y and z scale values.</param>
/// <returns>The scaling <see cref="Matrix"/>.</returns>
/// <summary>
/// Creates a new scaling <see cref="Matrix"/>.
/// </summary>
/// <param name="scales"><see cref="Vector3"/> representing x,y and z scale values.</param>
/// <param name="result">The scaling <see cref="Matrix"/> as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Matrix"/> that flattens geometry into a specified <see cref="Plane"/> as if casting a shadow from a specified light source. 
/// </summary>
/// <param name="lightDirection">A vector specifying the direction from which the light that will cast the shadow is coming.</param>
/// <param name="plane">The plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
/// <returns>A <see cref="Matrix"/> that can be used to flatten geometry onto the specified plane from the specified direction. </returns>
/// <summary>
/// Creates a new <see cref="Matrix"/> that flattens geometry into a specified <see cref="Plane"/> as if casting a shadow from a specified light source. 
/// </summary>
/// <param name="lightDirection">A vector specifying the direction from which the light that will cast the shadow is coming.</param>
/// <param name="plane">The plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
/// <param name="result">A <see cref="Matrix"/> that can be used to flatten geometry onto the specified plane from the specified direction as an output parameter.</param>
/// <summary>
/// Creates a new translation <see cref="Matrix"/>.
/// </summary>
/// <param name="xPosition">X coordinate of translation.</param>
/// <param name="yPosition">Y coordinate of translation.</param>
/// <param name="zPosition">Z coordinate of translation.</param>
/// <returns>The translation <see cref="Matrix"/>.</returns>
/// <summary>
/// Creates a new translation <see cref="Matrix"/>.
/// </summary>
/// <param name="position">X,Y and Z coordinates of translation.</param>
/// <param name="result">The translation <see cref="Matrix"/> as an output parameter.</param>
/// <summary>
/// Creates a new translation <see cref="Matrix"/>.
/// </summary>
/// <param name="position">X,Y and Z coordinates of translation.</param>
/// <returns>The translation <see cref="Matrix"/>.</returns>
/// <summary>
/// Creates a new translation <see cref="Matrix"/>.
/// </summary>
/// <param name="xPosition">X coordinate of translation.</param>
/// <param name="yPosition">Y coordinate of translation.</param>
/// <param name="zPosition">Z coordinate of translation.</param>
/// <param name="result">The translation <see cref="Matrix"/> as an output parameter.</param>
/// <summary>
/// Creates a new reflection <see cref="Matrix"/>.
/// </summary>
/// <param name="value">The plane that used for reflection calculation.</param>
/// <returns>The reflection <see cref="Matrix"/>.</returns>
/// <summary>
/// Creates a new reflection <see cref="Matrix"/>.
/// </summary>
/// <param name="value">The plane that used for reflection calculation.</param>
/// <param name="result">The reflection <see cref="Matrix"/> as an output parameter.</param>
/// <summary>
/// Creates a new world <see cref="Matrix"/>.
/// </summary>
/// <param name="position">The position vector.</param>
/// <param name="forward">The forward direction vector.</param>
/// <param name="up">The upward direction vector. Usually <see cref="Vector3.Up"/>.</param>
/// <returns>The world <see cref="Matrix"/>.</returns>
/// <summary>
/// Creates a new world <see cref="Matrix"/>.
/// </summary>
/// <param name="position">The position vector.</param>
/// <param name="forward">The forward direction vector.</param>
/// <param name="up">The upward direction vector. Usually <see cref="Vector3.Up"/>.</param>
/// <param name="result">The world <see cref="Matrix"/> as an output parameter.</param>
/// <summary>
/// Decomposes this matrix to translation, rotation and scale elements. Returns <c>true</c> if matrix can be decomposed; <c>false</c> otherwise.
/// </summary>
/// <param name="scale">Scale vector as an output parameter.</param>
/// <param name="rotation">Rotation quaternion as an output parameter.</param>
/// <param name="translation">Translation vector as an output parameter.</param>
/// <returns><c>true</c> if matrix can be decomposed; <c>false</c> otherwise.</returns>
/// <summary>
/// Returns a determinant of this <see cref="Matrix"/>.
/// </summary>
/// <returns>Determinant of this <see cref="Matrix"/></returns>
/// <remarks>See more about determinant here - http://en.wikipedia.org/wiki/Determinant.
/// </remarks>
/// <summary>
/// Divides the elements of a <see cref="Matrix"/> by the elements of another matrix.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/>.</param>
/// <param name="matrix2">Divisor <see cref="Matrix"/>.</param>
/// <returns>The result of dividing the matrix.</returns>
/// <summary>
/// Divides the elements of a <see cref="Matrix"/> by the elements of another matrix.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/>.</param>
/// <param name="matrix2">Divisor <see cref="Matrix"/>.</param>
/// <param name="result">The result of dividing the matrix as an output parameter.</param>
/// <summary>
/// Divides the elements of a <see cref="Matrix"/> by a scalar.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/>.</param>
/// <param name="divider">Divisor scalar.</param>
/// <returns>The result of dividing a matrix by a scalar.</returns>
/// <summary>
/// Divides the elements of a <see cref="Matrix"/> by a scalar.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/>.</param>
/// <param name="divider">Divisor scalar.</param>
/// <param name="result">The result of dividing a matrix by a scalar as an output parameter.</param>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Matrix"/> without any tolerance.
/// </summary>
/// <param name="other">The <see cref="Matrix"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Object"/> without any tolerance.
/// </summary>
/// <param name="obj">The <see cref="Object"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets the hash code of this <see cref="Matrix"/>.
/// </summary>
/// <returns>Hash code of this <see cref="Matrix"/>.</returns>
/// <summary>
/// Creates a new <see cref="Matrix"/> which contains inversion of the specified matrix. 
/// </summary>
/// <param name="matrix">Source <see cref="Matrix"/>.</param>
/// <returns>The inverted matrix.</returns>
/// <summary>
/// Creates a new <see cref="Matrix"/> which contains inversion of the specified matrix. 
/// </summary>
/// <param name="matrix">Source <see cref="Matrix"/>.</param>
/// <param name="result">The inverted matrix as output parameter.</param>
/*
///
// Use Laplace expansion theorem to calculate the inverse of a 4x4 matrix
// 
// 1. Calculate the 2x2 determinants needed the 4x4 determinant based on the 2x2 determinants 
// 3. Create the adjugate matrix, which satisfies: A * adj(A) = det(A) * I
// 4. Divide adjugate matrix with the determinant to find the inverse
// Allow for matrix and result to point to the same structure
/// <summary>
/// Creates a new <see cref="Matrix"/> that contains linear interpolation of the values in specified matrixes.
/// </summary>
/// <param name="matrix1">The first <see cref="Matrix"/>.</param>
/// <param name="matrix2">The second <see cref="Vector2"/>.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <returns>>The result of linear interpolation of the specified matrixes.</returns>
/// <summary>
/// Creates a new <see cref="Matrix"/> that contains linear interpolation of the values in specified matrixes.
/// </summary>
/// <param name="matrix1">The first <see cref="Matrix"/>.</param>
/// <param name="matrix2">The second <see cref="Vector2"/>.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <param name="result">The result of linear interpolation of the specified matrixes as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Matrix"/> that contains a multiplication of two matrix.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/>.</param>
/// <param name="matrix2">Source <see cref="Matrix"/>.</param>
/// <returns>Result of the matrix multiplication.</returns>
/// <summary>
/// Creates a new <see cref="Matrix"/> that contains a multiplication of two matrix.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/>.</param>
/// <param name="matrix2">Source <see cref="Matrix"/>.</param>
/// <param name="result">Result of the matrix multiplication as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Matrix"/> that contains a multiplication of <see cref="Matrix"/> and a scalar.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/>.</param>
/// <param name="scaleFactor">Scalar value.</param>
/// <returns>Result of the matrix multiplication with a scalar.</returns>
/// <summary>
/// Creates a new <see cref="Matrix"/> that contains a multiplication of <see cref="Matrix"/> and a scalar.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/>.</param>
/// <param name="scaleFactor">Scalar value.</param>
/// <param name="result">Result of the matrix multiplication with a scalar as an output parameter.</param>
/// <summary>
/// Copy the values of specified <see cref="Matrix"/> to the float array.
/// </summary>
/// <param name="matrix">The source <see cref="Matrix"/>.</param>
/// <returns>The array which matrix values will be stored.</returns>
/// <remarks>
/// Required for OpenGL 2.0 projection matrix stuff.
/// </remarks>
/// <summary>
/// Returns a matrix with the all values negated.
/// </summary>
/// <param name="matrix">Source <see cref="Matrix"/>.</param>
/// <returns>Result of the matrix negation.</returns>
/// <summary>
/// Returns a matrix with the all values negated.
/// </summary>
/// <param name="matrix">Source <see cref="Matrix"/>.</param>
/// <param name="result">Result of the matrix negation as an output parameter.</param>
/// <summary>
/// Adds two matrixes.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/> on the left of the add sign.</param>
/// <param name="matrix2">Source <see cref="Matrix"/> on the right of the add sign.</param>
/// <returns>Sum of the matrixes.</returns>
/// <summary>
/// Divides the elements of a <see cref="Matrix"/> by the elements of another <see cref="Matrix"/>.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/> on the left of the div sign.</param>
/// <param name="matrix2">Divisor <see cref="Matrix"/> on the right of the div sign.</param>
/// <returns>The result of dividing the matrixes.</returns>
/// <summary>
/// Divides the elements of a <see cref="Matrix"/> by a scalar.
/// </summary>
/// <param name="matrix">Source <see cref="Matrix"/> on the left of the div sign.</param>
/// <param name="divider">Divisor scalar on the right of the div sign.</param>
/// <returns>The result of dividing a matrix by a scalar.</returns>
/// <summary>
/// Compares whether two <see cref="Matrix"/> instances are equal without any tolerance.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/> on the left of the equal sign.</param>
/// <param name="matrix2">Source <see cref="Matrix"/> on the right of the equal sign.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether two <see cref="Matrix"/> instances are not equal without any tolerance.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/> on the left of the not equal sign.</param>
/// <param name="matrix2">Source <see cref="Matrix"/> on the right of the not equal sign.</param>
/// <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Multiplies two matrixes.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/> on the left of the mul sign.</param>
/// <param name="matrix2">Source <see cref="Matrix"/> on the right of the mul sign.</param>
/// <returns>Result of the matrix multiplication.</returns>
/// <remarks>
/// Using matrix multiplication algorithm - see http://en.wikipedia.org/wiki/Matrix_multiplication.
/// </remarks>
/// <summary>
/// Multiplies the elements of matrix by a scalar.
/// </summary>
/// <param name="matrix">Source <see cref="Matrix"/> on the left of the mul sign.</param>
/// <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
/// <returns>Result of the matrix multiplication with a scalar.</returns>
/// <summary>
/// Subtracts the values of one <see cref="Matrix"/> from another <see cref="Matrix"/>.
/// </summary>
/// <param name="matrix1">Source <see cref="Matrix"/> on the left of the sub sign.</param>
/// <param name="matrix2">Source <see cref="Matrix"/> on the right of the sub sign.</param>
/// <returns>Result of the matrix subtraction.</returns>
/// <summary>
/// Inverts values in the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="matrix">Source <see cref="Matrix"/> on the right of the sub sign.</param>
/// <returns>Result of the inversion.</returns>
/// <summary>
/// Creates a new <see cref="Matrix"/> that contains subtraction of one matrix from another.
/// </summary>
/// <param name="matrix1">The first <see cref="Matrix"/>.</param>
/// <param name="matrix2">The second <see cref="Matrix"/>.</param>
/// <returns>The result of the matrix subtraction.</returns>
/// <summary>
/// Creates a new <see cref="Matrix"/> that contains subtraction of one matrix from another.
/// </summary>
/// <param name="matrix1">The first <see cref="Matrix"/>.</param>
/// <param name="matrix2">The second <see cref="Matrix"/>.</param>
/// <param name="result">The result of the matrix subtraction as an output parameter.</param>
/// <summary>
/// Returns a <see cref="String"/> representation of this <see cref="Matrix"/> in the format:
/// {M11:[<see cref="M11"/>] M12:[<see cref="M12"/>] M13:[<see cref="M13"/>] M14:[<see cref="M14"/>]}
/// {M21:[<see cref="M21"/>] M12:[<see cref="M22"/>] M13:[<see cref="M23"/>] M14:[<see cref="M24"/>]}
/// {M31:[<see cref="M31"/>] M32:[<see cref="M32"/>] M33:[<see cref="M33"/>] M34:[<see cref="M34"/>]}
/// {M41:[<see cref="M41"/>] M42:[<see cref="M42"/>] M43:[<see cref="M43"/>] M44:[<see cref="M44"/>]}
/// </summary>
/// <returns>A <see cref="String"/> representation of this <see cref="Matrix"/>.</returns>
/// <summary>
/// Swap the matrix rows and columns.
/// </summary>
/// <param name="matrix">The matrix for transposing operation.</param>
/// <returns>The new <see cref="Matrix"/> which contains the transposing result.</returns>
/// <summary>
/// Swap the matrix rows and columns.
/// </summary>
/// <param name="matrix">The matrix for transposing operation.</param>
/// <param name="result">The new <see cref="Matrix"/> which contains the transposing result as an output parameter.</param>
/// <summary>
/// Helper method for using the Laplace expansion theorem using two rows expansions to calculate major and 
/// minor determinants of a 4x4 matrix. This method is used for inverting a matrix.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\NamespaceDocs.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides functionality to handle input from keyboards, mice, gamepads, etc.
/// </summary>
/// <summary>
/// Support for playing sound effects and XACT audio.
/// </summary>
/// <summary>
/// The runtime support for loading content pipeline content.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Plane.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Returns a value indicating what side (positive/negative) of a plane a point is
/// </summary>
/// <param name="point">The point to check with</param>
/// <param name="plane">The plane to check against</param>
/// <returns>Greater than zero if on the positive side, less than zero if on the negative size, 0 otherwise</returns>
/// <summary>
/// Returns the perpendicular distance from a point to a plane
/// </summary>
/// <param name="point">The point to check</param>
/// <param name="plane">The place to check</param>
/// <returns>The perpendicular distance from the point to the plane</returns>
// dist = (ax + by + cz + d) / sqrt(a*a + b*b + c*c)
/// <summary>
/// Create a <see cref="Plane"/> that contains the specified point and has the specified <see cref="Normal"/> vector.
/// </summary>
/// <param name="pointOnPlane">A point the created <see cref="Plane"/> should contain.</param>
/// <param name="normal">The normal of the plane.</param>
/// <summary>
/// Transforms a normalized plane by a matrix.
/// </summary>
/// <param name="plane">The normalized plane to transform.</param>
/// <param name="matrix">The transformation matrix.</param>
/// <returns>The transformed plane.</returns>
/// <summary>
/// Transforms a normalized plane by a matrix.
/// </summary>
/// <param name="plane">The normalized plane to transform.</param>
/// <param name="matrix">The transformation matrix.</param>
/// <param name="result">The transformed plane.</param>
// See "Transforming Normals" in http://www.glprogramming.com/red/appendixf.html
// for an explanation of how this works.
/// <summary>
/// Transforms a normalized plane by a quaternion rotation.
/// </summary>
/// <param name="plane">The normalized plane to transform.</param>
/// <param name="rotation">The quaternion rotation.</param>
/// <returns>The transformed plane.</returns>
/// <summary>
/// Transforms a normalized plane by a quaternion rotation.
/// </summary>
/// <param name="plane">The normalized plane to transform.</param>
/// <param name="rotation">The quaternion rotation.</param>
/// <param name="result">The transformed plane.</param>
/// <summary>
/// Deconstruction method for <see cref="Plane"/>.
/// </summary>
/// <param name="normal"></param>
/// <param name="d"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\PlaneIntersectionType.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines the intersection between a <see cref="Plane"/> and a bounding volume.
/// </summary>
/// <summary>
/// There is no intersection, the bounding volume is in the negative half space of the plane.
/// </summary>
/// <summary>
/// There is no intersection, the bounding volume is in the positive half space of the plane.
/// </summary>
/// <summary>
/// The plane is intersected.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\PlayerIndex.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines the index of player for various MonoGame components.
/// </summary>
/// <summary>
/// The first player index.
/// </summary>
/// <summary>
/// The second player index.
/// </summary>
/// <summary>
/// The third player index.
/// </summary>
/// <summary>
/// The fourth player index.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Point.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes a 2D-point.
/// </summary>
/// <summary>
/// The x coordinate of this <see cref="Point"/>.
/// </summary>
/// <summary>
/// The y coordinate of this <see cref="Point"/>.
/// </summary>
/// <summary>
/// Returns a <see cref="Point"/> with coordinates 0, 0.
/// </summary>
/// <summary>
/// Constructs a point with X and Y from two values.
/// </summary>
/// <param name="x">The x coordinate in 2d-space.</param>
/// <param name="y">The y coordinate in 2d-space.</param>
/// <summary>
/// Constructs a point with X and Y set to the same value.
/// </summary>
/// <param name="value">The x and y coordinates in 2d-space.</param>
/// <summary>
/// Adds two points.
/// </summary>
/// <param name="value1">Source <see cref="Point"/> on the left of the add sign.</param>
/// <param name="value2">Source <see cref="Point"/> on the right of the add sign.</param>
/// <returns>Sum of the points.</returns>
/// <summary>
/// Subtracts a <see cref="Point"/> from a <see cref="Point"/>.
/// </summary>
/// <param name="value1">Source <see cref="Point"/> on the left of the sub sign.</param>
/// <param name="value2">Source <see cref="Point"/> on the right of the sub sign.</param>
/// <returns>Result of the subtraction.</returns>
/// <summary>
/// Multiplies the components of two points by each other.
/// </summary>
/// <param name="value1">Source <see cref="Point"/> on the left of the mul sign.</param>
/// <param name="value2">Source <see cref="Point"/> on the right of the mul sign.</param>
/// <returns>Result of the multiplication.</returns>
/// <summary>
/// Divides the components of a <see cref="Point"/> by the components of another <see cref="Point"/>.
/// </summary>
/// <param name="source">Source <see cref="Point"/> on the left of the div sign.</param>
/// <param name="divisor">Divisor <see cref="Point"/> on the right of the div sign.</param>
/// <returns>The result of dividing the points.</returns>
/// <summary>
/// Compares whether two <see cref="Point"/> instances are equal.
/// </summary>
/// <param name="a"><see cref="Point"/> instance on the left of the equal sign.</param>
/// <param name="b"><see cref="Point"/> instance on the right of the equal sign.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether two <see cref="Point"/> instances are not equal.
/// </summary>
/// <param name="a"><see cref="Point"/> instance on the left of the not equal sign.</param>
/// <param name="b"><see cref="Point"/> instance on the right of the not equal sign.</param>
/// <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Object"/>.
/// </summary>
/// <param name="obj">The <see cref="Object"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Point"/>.
/// </summary>
/// <param name="other">The <see cref="Point"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets the hash code of this <see cref="Point"/>.
/// </summary>
/// <returns>Hash code of this <see cref="Point"/>.</returns>
/// <summary>
/// Returns a <see cref="String"/> representation of this <see cref="Point"/> in the format:
/// {X:[<see cref="X"/>] Y:[<see cref="Y"/>]}
/// </summary>
/// <returns><see cref="String"/> representation of this <see cref="Point"/>.</returns>
/// <summary>
/// Gets a <see cref="Vector2"/> representation for this object.
/// </summary>
/// <returns>A <see cref="Vector2"/> representation for this object.</returns>
/// <summary>
/// Deconstruction method for <see cref="Point"/>.
/// </summary>
/// <param name="x"></param>
/// <param name="y"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\PreparingDeviceSettingsEventArgs.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The arguments to the <see cref="GraphicsDeviceManager.PreparingDeviceSettings"/> event.
/// </summary>
/// <summary>
/// Create a new instance of the event.
/// </summary>
/// <param name="graphicsDeviceInformation">The default settings to be used in device creation.</param>
/// <summary>
/// The default settings that will be used in device creation.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Quaternion.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// An efficient mathematical representation for three dimensional rotations.
/// </summary>
/// <summary>
/// The x coordinate of this <see cref="Quaternion"/>.
/// </summary>
/// <summary>
/// The y coordinate of this <see cref="Quaternion"/>.
/// </summary>
/// <summary>
/// The z coordinate of this <see cref="Quaternion"/>.
/// </summary>
/// <summary>
/// The rotation component of this <see cref="Quaternion"/>.
/// </summary>
/// <summary>
/// Constructs a quaternion with X, Y, Z and W from four values.
/// </summary>
/// <param name="x">The x coordinate in 3d-space.</param>
/// <param name="y">The y coordinate in 3d-space.</param>
/// <param name="z">The z coordinate in 3d-space.</param>
/// <param name="w">The rotation component.</param>
/// <summary>
/// Constructs a quaternion with X, Y, Z from <see cref="Vector3"/> and rotation component from a scalar.
/// </summary>
/// <param name="value">The x, y, z coordinates in 3d-space.</param>
/// <param name="w">The rotation component.</param>
/// <summary>
/// Constructs a quaternion from <see cref="Vector4"/>.
/// </summary>
/// <param name="value">The x, y, z coordinates in 3d-space and the rotation component.</param>
/// <summary>
/// Returns a quaternion representing no rotation.
/// </summary>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains the sum of two quaternions.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/>.</param>
/// <returns>The result of the quaternion addition.</returns>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains the sum of two quaternions.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/>.</param>
/// <param name="result">The result of the quaternion addition as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains concatenation between two quaternion.
/// </summary>
/// <param name="value1">The first <see cref="Quaternion"/> to concatenate.</param>
/// <param name="value2">The second <see cref="Quaternion"/> to concatenate.</param>
/// <returns>The result of rotation of <paramref name="value1"/> followed by <paramref name="value2"/> rotation.</returns>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains concatenation between two quaternion.
/// </summary>
/// <param name="value1">The first <see cref="Quaternion"/> to concatenate.</param>
/// <param name="value2">The second <see cref="Quaternion"/> to concatenate.</param>
/// <param name="result">The result of rotation of <paramref name="value1"/> followed by <paramref name="value2"/> rotation as an output parameter.</param>
/// <summary>
/// Transforms this quaternion into its conjugated version.
/// </summary>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains conjugated version of the specified quaternion.
/// </summary>
/// <param name="value">The quaternion which values will be used to create the conjugated version.</param>
/// <returns>The conjugate version of the specified quaternion.</returns>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains conjugated version of the specified quaternion.
/// </summary>
/// <param name="value">The quaternion which values will be used to create the conjugated version.</param>
/// <param name="result">The conjugated version of the specified quaternion as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Quaternion"/> from the specified axis and angle.
/// </summary>
/// <param name="axis">The axis of rotation.</param>
/// <param name="angle">The angle in radians.</param>
/// <returns>The new quaternion builded from axis and angle.</returns>
/// <summary>
/// Creates a new <see cref="Quaternion"/> from the specified axis and angle.
/// </summary>
/// <param name="axis">The axis of rotation.</param>
/// <param name="angle">The angle in radians.</param>
/// <param name="result">The new quaternion builded from axis and angle as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Quaternion"/> from the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="matrix">The rotation matrix.</param>
/// <returns>A quaternion composed from the rotation part of the matrix.</returns>
/// <summary>
/// Creates a new <see cref="Quaternion"/> from the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="matrix">The rotation matrix.</param>
/// <param name="result">A quaternion composed from the rotation part of the matrix as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Quaternion"/> from the specified yaw, pitch and roll angles.
/// </summary>
/// <param name="yaw">Yaw around the y axis in radians.</param>
/// <param name="pitch">Pitch around the x axis in radians.</param>
/// <param name="roll">Roll around the z axis in radians.</param>
/// <returns>A new quaternion from the concatenated yaw, pitch, and roll angles.</returns>
/// <summary>
/// Creates a new <see cref="Quaternion"/> from the specified yaw, pitch and roll angles.
/// </summary>
/// <param name="yaw">Yaw around the y axis in radians.</param>
/// <param name="pitch">Pitch around the x axis in radians.</param>
/// <param name="roll">Roll around the z axis in radians.</param>
/// <param name="result">A new quaternion from the concatenated yaw, pitch, and roll angles as an output parameter.</param>
/// <summary>
/// Divides a <see cref="Quaternion"/> by the other <see cref="Quaternion"/>.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Divisor <see cref="Quaternion"/>.</param>
/// <returns>The result of dividing the quaternions.</returns>
/// <summary>
/// Divides a <see cref="Quaternion"/> by the other <see cref="Quaternion"/>.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Divisor <see cref="Quaternion"/>.</param>
/// <param name="result">The result of dividing the quaternions as an output parameter.</param>
/// <summary>
/// Returns a dot product of two quaternions.
/// </summary>
/// <param name="quaternion1">The first quaternion.</param>
/// <param name="quaternion2">The second quaternion.</param>
/// <returns>The dot product of two quaternions.</returns>
/// <summary>
/// Returns a dot product of two quaternions.
/// </summary>
/// <param name="quaternion1">The first quaternion.</param>
/// <param name="quaternion2">The second quaternion.</param>
/// <param name="result">The dot product of two quaternions as an output parameter.</param>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Object"/>.
/// </summary>
/// <param name="obj">The <see cref="Object"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Quaternion"/>.
/// </summary>
/// <param name="other">The <see cref="Quaternion"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets the hash code of this <see cref="Quaternion"/>.
/// </summary>
/// <returns>Hash code of this <see cref="Quaternion"/>.</returns>
/// <summary>
/// Returns the inverse quaternion which represents the opposite rotation.
/// </summary>
/// <param name="quaternion">Source <see cref="Quaternion"/>.</param>
/// <returns>The inverse quaternion.</returns>
/// <summary>
/// Returns the inverse quaternion which represents the opposite rotation.
/// </summary>
/// <param name="quaternion">Source <see cref="Quaternion"/>.</param>
/// <param name="result">The inverse quaternion as an output parameter.</param>
/// <summary>
/// Returns the magnitude of the quaternion components.
/// </summary>
/// <returns>The magnitude of the quaternion components.</returns>
/// <summary>
/// Returns the squared magnitude of the quaternion components.
/// </summary>
/// <returns>The squared magnitude of the quaternion components.</returns>
/// <summary>
/// Performs a linear blend between two quaternions.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/>.</param>
/// <param name="amount">The blend amount where 0 returns <paramref name="quaternion1"/> and 1 <paramref name="quaternion2"/>.</param>
/// <returns>The result of linear blending between two quaternions.</returns>
/// <summary>
/// Performs a linear blend between two quaternions.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/>.</param>
/// <param name="amount">The blend amount where 0 returns <paramref name="quaternion1"/> and 1 <paramref name="quaternion2"/>.</param>
/// <param name="result">The result of linear blending between two quaternions as an output parameter.</param>
/// <summary>
/// Performs a spherical linear blend between two quaternions.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/>.</param>
/// <param name="amount">The blend amount where 0 returns <paramref name="quaternion1"/> and 1 <paramref name="quaternion2"/>.</param>
/// <returns>The result of spherical linear blending between two quaternions.</returns>
/// <summary>
/// Performs a spherical linear blend between two quaternions.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/>.</param>
/// <param name="amount">The blend amount where 0 returns <paramref name="quaternion1"/> and 1 <paramref name="quaternion2"/>.</param>
/// <param name="result">The result of spherical linear blending between two quaternions as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains subtraction of one <see cref="Quaternion"/> from another.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/>.</param>
/// <returns>The result of the quaternion subtraction.</returns>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains subtraction of one <see cref="Quaternion"/> from another.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/>.</param>
/// <param name="result">The result of the quaternion subtraction as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains a multiplication of two quaternions.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/>.</param>
/// <returns>The result of the quaternion multiplication.</returns>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains a multiplication of <see cref="Quaternion"/> and a scalar.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="scaleFactor">Scalar value.</param>
/// <returns>The result of the quaternion multiplication with a scalar.</returns>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains a multiplication of <see cref="Quaternion"/> and a scalar.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="scaleFactor">Scalar value.</param>
/// <param name="result">The result of the quaternion multiplication with a scalar as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Quaternion"/> that contains a multiplication of two quaternions.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/>.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/>.</param>
/// <param name="result">The result of the quaternion multiplication as an output parameter.</param>
/// <summary>
/// Flips the sign of the all the quaternion components.
/// </summary>
/// <param name="quaternion">Source <see cref="Quaternion"/>.</param>
/// <returns>The result of the quaternion negation.</returns>
/// <summary>
/// Flips the sign of the all the quaternion components.
/// </summary>
/// <param name="quaternion">Source <see cref="Quaternion"/>.</param>
/// <param name="result">The result of the quaternion negation as an output parameter.</param>
/// <summary>
/// Scales the quaternion magnitude to unit length.
/// </summary>
/// <summary>
/// Scales the quaternion magnitude to unit length.
/// </summary>
/// <param name="quaternion">Source <see cref="Quaternion"/>.</param>
/// <returns>The unit length quaternion.</returns>
/// <summary>
/// Scales the quaternion magnitude to unit length.
/// </summary>
/// <param name="quaternion">Source <see cref="Quaternion"/>.</param>
/// <param name="result">The unit length quaternion an output parameter.</param>
/// <summary>
/// Returns a <see cref="String"/> representation of this <see cref="Quaternion"/> in the format:
/// {X:[<see cref="X"/>] Y:[<see cref="Y"/>] Z:[<see cref="Z"/>] W:[<see cref="W"/>]}
/// </summary>
/// <returns>A <see cref="String"/> representation of this <see cref="Quaternion"/>.</returns>
/// <summary>
/// Gets a <see cref="Vector4"/> representation for this object.
/// </summary>
/// <returns>A <see cref="Vector4"/> representation for this object.</returns>
/// <summary>
/// Adds two quaternions.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/> on the left of the add sign.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/> on the right of the add sign.</param>
/// <returns>Sum of the vectors.</returns>
/// <summary>
/// Divides a <see cref="Quaternion"/> by the other <see cref="Quaternion"/>.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/> on the left of the div sign.</param>
/// <param name="quaternion2">Divisor <see cref="Quaternion"/> on the right of the div sign.</param>
/// <returns>The result of dividing the quaternions.</returns>
/// <summary>
/// Compares whether two <see cref="Quaternion"/> instances are equal.
/// </summary>
/// <param name="quaternion1"><see cref="Quaternion"/> instance on the left of the equal sign.</param>
/// <param name="quaternion2"><see cref="Quaternion"/> instance on the right of the equal sign.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether two <see cref="Quaternion"/> instances are not equal.
/// </summary>
/// <param name="quaternion1"><see cref="Quaternion"/> instance on the left of the not equal sign.</param>
/// <param name="quaternion2"><see cref="Quaternion"/> instance on the right of the not equal sign.</param>
/// <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Multiplies two quaternions.
/// </summary>
/// <param name="quaternion1">Source <see cref="Quaternion"/> on the left of the mul sign.</param>
/// <param name="quaternion2">Source <see cref="Quaternion"/> on the right of the mul sign.</param>
/// <returns>Result of the quaternions multiplication.</returns>
/// <summary>
/// Multiplies the components of quaternion by a scalar.
/// </summary>
/// <param name="quaternion1">Source <see cref="Vector3"/> on the left of the mul sign.</param>
/// <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
/// <returns>Result of the quaternion multiplication with a scalar.</returns>
/// <summary>
/// Subtracts a <see cref="Quaternion"/> from a <see cref="Quaternion"/>.
/// </summary>
/// <param name="quaternion1">Source <see cref="Vector3"/> on the left of the sub sign.</param>
/// <param name="quaternion2">Source <see cref="Vector3"/> on the right of the sub sign.</param>
/// <returns>Result of the quaternion subtraction.</returns>
/// <summary>
/// Flips the sign of the all the quaternion components.
/// </summary>
/// <param name="quaternion">Source <see cref="Quaternion"/> on the right of the sub sign.</param>
/// <returns>The result of the quaternion negation.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Ray.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// adapted from http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/
// having a positive tMin and a negative tMax means the ray is inside the box
// we expect the intesection distance to be 0 in that case
// a negative tMin means that the intersection point is behind the ray's origin
// we discard these as not hitting the AABB
/*
// Find the vector between where the ray starts the the sphere's centre
// If the distance between the ray start and the sphere's centre is less than
// the radius of the sphere, it means we've intersected. N.B. checking the LengthSquared is faster.
// If the ray is pointing away from the sphere then we don't ever intersect
// Next we kinda use Pythagoras to check if we are within the bounds of the sphere
// if x = radius of sphere
// if y = distance between ray position and sphere centre
// if z = the distance we've travelled along the ray
// if x^2 + z^2 - y^2 < 0, we do not intersect
/// <summary>
/// Deconstruction method for <see cref="Ray"/>.
/// </summary>
/// <param name="position">Receives the start position of the ray.</param>
/// <param name="direction">Receives the direction of the ray.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Rectangle.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes a 2D-rectangle. 
/// </summary>
/// <summary>
/// The x coordinate of the top-left corner of this <see cref="Rectangle"/>.
/// </summary>
/// <summary>
/// The y coordinate of the top-left corner of this <see cref="Rectangle"/>.
/// </summary>
/// <summary>
/// The width of this <see cref="Rectangle"/>.
/// </summary>
/// <summary>
/// The height of this <see cref="Rectangle"/>.
/// </summary>
/// <summary>
/// Returns a <see cref="Rectangle"/> with X=0, Y=0, Width=0, Height=0.
/// </summary>
/// <summary>
/// Returns the x coordinate of the left edge of this <see cref="Rectangle"/>.
/// </summary>
/// <summary>
/// Returns the x coordinate of the right edge of this <see cref="Rectangle"/>.
/// </summary>
/// <summary>
/// Returns the y coordinate of the top edge of this <see cref="Rectangle"/>.
/// </summary>
/// <summary>
/// Returns the y coordinate of the bottom edge of this <see cref="Rectangle"/>.
/// </summary>
/// <summary>
/// Whether or not this <see cref="Rectangle"/> has a <see cref="Width"/> and
/// <see cref="Height"/> of 0, and a <see cref="Location"/> of (0, 0).
/// </summary>
/// <summary>
/// The top-left coordinates of this <see cref="Rectangle"/>.
/// </summary>
/// <summary>
/// The width-height coordinates of this <see cref="Rectangle"/>.
/// </summary>
/// <summary>
/// A <see cref="Point"/> located in the center of this <see cref="Rectangle"/>.
/// </summary>
/// <remarks>
/// If <see cref="Width"/> or <see cref="Height"/> is an odd number,
/// the center point will be rounded down.
/// </remarks>
/// <summary>
/// Creates a new instance of <see cref="Rectangle"/> struct, with the specified
/// position, width, and height.
/// </summary>
/// <param name="x">The x coordinate of the top-left corner of the created <see cref="Rectangle"/>.</param>
/// <param name="y">The y coordinate of the top-left corner of the created <see cref="Rectangle"/>.</param>
/// <param name="width">The width of the created <see cref="Rectangle"/>.</param>
/// <param name="height">The height of the created <see cref="Rectangle"/>.</param>
/// <summary>
/// Creates a new instance of <see cref="Rectangle"/> struct, with the specified
/// location and size.
/// </summary>
/// <param name="location">The x and y coordinates of the top-left corner of the created <see cref="Rectangle"/>.</param>
/// <param name="size">The width and height of the created <see cref="Rectangle"/>.</param>
/// <summary>
/// Compares whether two <see cref="Rectangle"/> instances are equal.
/// </summary>
/// <param name="a"><see cref="Rectangle"/> instance on the left of the equal sign.</param>
/// <param name="b"><see cref="Rectangle"/> instance on the right of the equal sign.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether two <see cref="Rectangle"/> instances are not equal.
/// </summary>
/// <param name="a"><see cref="Rectangle"/> instance on the left of the not equal sign.</param>
/// <param name="b"><see cref="Rectangle"/> instance on the right of the not equal sign.</param>
/// <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not the provided coordinates lie within the bounds of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="x">The x coordinate of the point to check for containment.</param>
/// <param name="y">The y coordinate of the point to check for containment.</param>
/// <returns><c>true</c> if the provided coordinates lie inside this <see cref="Rectangle"/>; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not the provided coordinates lie within the bounds of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="x">The x coordinate of the point to check for containment.</param>
/// <param name="y">The y coordinate of the point to check for containment.</param>
/// <returns><c>true</c> if the provided coordinates lie inside this <see cref="Rectangle"/>; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not the provided <see cref="Point"/> lies within the bounds of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="value">The coordinates to check for inclusion in this <see cref="Rectangle"/>.</param>
/// <returns><c>true</c> if the provided <see cref="Point"/> lies inside this <see cref="Rectangle"/>; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not the provided <see cref="Point"/> lies within the bounds of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="value">The coordinates to check for inclusion in this <see cref="Rectangle"/>.</param>
/// <param name="result"><c>true</c> if the provided <see cref="Point"/> lies inside this <see cref="Rectangle"/>; <c>false</c> otherwise. As an output parameter.</param>
/// <summary>
/// Gets whether or not the provided <see cref="Vector2"/> lies within the bounds of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="value">The coordinates to check for inclusion in this <see cref="Rectangle"/>.</param>
/// <returns><c>true</c> if the provided <see cref="Vector2"/> lies inside this <see cref="Rectangle"/>; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not the provided <see cref="Vector2"/> lies within the bounds of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="value">The coordinates to check for inclusion in this <see cref="Rectangle"/>.</param>
/// <param name="result"><c>true</c> if the provided <see cref="Vector2"/> lies inside this <see cref="Rectangle"/>; <c>false</c> otherwise. As an output parameter.</param>
/// <summary>
/// Gets whether or not the provided <see cref="Rectangle"/> lies within the bounds of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="value">The <see cref="Rectangle"/> to check for inclusion in this <see cref="Rectangle"/>.</param>
/// <returns><c>true</c> if the provided <see cref="Rectangle"/>'s bounds lie entirely inside this <see cref="Rectangle"/>; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not the provided <see cref="Rectangle"/> lies within the bounds of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="value">The <see cref="Rectangle"/> to check for inclusion in this <see cref="Rectangle"/>.</param>
/// <param name="result"><c>true</c> if the provided <see cref="Rectangle"/>'s bounds lie entirely inside this <see cref="Rectangle"/>; <c>false</c> otherwise. As an output parameter.</param>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Object"/>.
/// </summary>
/// <param name="obj">The <see cref="Object"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Rectangle"/>.
/// </summary>
/// <param name="other">The <see cref="Rectangle"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets the hash code of this <see cref="Rectangle"/>.
/// </summary>
/// <returns>Hash code of this <see cref="Rectangle"/>.</returns>
/// <summary>
/// Adjusts the edges of this <see cref="Rectangle"/> by specified horizontal and vertical amounts. 
/// </summary>
/// <param name="horizontalAmount">Value to adjust the left and right edges.</param>
/// <param name="verticalAmount">Value to adjust the top and bottom edges.</param>
/// <summary>
/// Adjusts the edges of this <see cref="Rectangle"/> by specified horizontal and vertical amounts. 
/// </summary>
/// <param name="horizontalAmount">Value to adjust the left and right edges.</param>
/// <param name="verticalAmount">Value to adjust the top and bottom edges.</param>
/// <summary>
/// Gets whether or not the other <see cref="Rectangle"/> intersects with this rectangle.
/// </summary>
/// <param name="value">The other rectangle for testing.</param>
/// <returns><c>true</c> if other <see cref="Rectangle"/> intersects with this rectangle; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets whether or not the other <see cref="Rectangle"/> intersects with this rectangle.
/// </summary>
/// <param name="value">The other rectangle for testing.</param>
/// <param name="result"><c>true</c> if other <see cref="Rectangle"/> intersects with this rectangle; <c>false</c> otherwise. As an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Rectangle"/> that contains overlapping region of two other rectangles.
/// </summary>
/// <param name="value1">The first <see cref="Rectangle"/>.</param>
/// <param name="value2">The second <see cref="Rectangle"/>.</param>
/// <returns>Overlapping region of the two rectangles.</returns>
/// <summary>
/// Creates a new <see cref="Rectangle"/> that contains overlapping region of two other rectangles.
/// </summary>
/// <param name="value1">The first <see cref="Rectangle"/>.</param>
/// <param name="value2">The second <see cref="Rectangle"/>.</param>
/// <param name="result">Overlapping region of the two rectangles as an output parameter.</param>
/// <summary>
/// Changes the <see cref="Location"/> of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="offsetX">The x coordinate to add to this <see cref="Rectangle"/>.</param>
/// <param name="offsetY">The y coordinate to add to this <see cref="Rectangle"/>.</param>
/// <summary>
/// Changes the <see cref="Location"/> of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="offsetX">The x coordinate to add to this <see cref="Rectangle"/>.</param>
/// <param name="offsetY">The y coordinate to add to this <see cref="Rectangle"/>.</param>
/// <summary>
/// Changes the <see cref="Location"/> of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="amount">The x and y components to add to this <see cref="Rectangle"/>.</param>
/// <summary>
/// Changes the <see cref="Location"/> of this <see cref="Rectangle"/>.
/// </summary>
/// <param name="amount">The x and y components to add to this <see cref="Rectangle"/>.</param>
/// <summary>
/// Returns a <see cref="String"/> representation of this <see cref="Rectangle"/> in the format:
/// {X:[<see cref="X"/>] Y:[<see cref="Y"/>] Width:[<see cref="Width"/>] Height:[<see cref="Height"/>]}
/// </summary>
/// <returns><see cref="String"/> representation of this <see cref="Rectangle"/>.</returns>
/// <summary>
/// Creates a new <see cref="Rectangle"/> that completely contains two other rectangles.
/// </summary>
/// <param name="value1">The first <see cref="Rectangle"/>.</param>
/// <param name="value2">The second <see cref="Rectangle"/>.</param>
/// <returns>The union of the two rectangles.</returns>
/// <summary>
/// Creates a new <see cref="Rectangle"/> that completely contains two other rectangles.
/// </summary>
/// <param name="value1">The first <see cref="Rectangle"/>.</param>
/// <param name="value2">The second <see cref="Rectangle"/>.</param>
/// <param name="result">The union of the two rectangles as an output parameter.</param>
/// <summary>
/// Deconstruction method for <see cref="Rectangle"/>.
/// </summary>
/// <param name="x"></param>
/// <param name="y"></param>
/// <param name="width"></param>
/// <param name="height"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\ReusableItemList.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Damm...Mono fails in this!
//return (T) Activator.CreateInstance(typeof(T));
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\TextInputEventArgs.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// This class is used for the game window's TextInput event as EventArgs.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\TitleContainer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Returns an open stream to an exsiting file in the title storage area.
/// </summary>
/// <param name="name">The filepath relative to the title storage area.</param>
/// <returns>A open stream or null if the file is not found.</returns>
// We do not accept absolute paths here.
// Normalize the file path.
// Call the platform code to open the stream.  Any errors
// at this point should result in a file not found.
///" + name);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Vector2.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes a 2D-vector.
/// </summary>
/// <summary>
/// The x coordinate of this <see cref="Vector2"/>.
/// </summary>
/// <summary>
/// The y coordinate of this <see cref="Vector2"/>.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector2"/> with components 0, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector2"/> with components 1, 1.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector2"/> with components 1, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector2"/> with components 0, 1.
/// </summary>
/// <summary>
/// Constructs a 2d vector with X and Y from two values.
/// </summary>
/// <param name="x">The x coordinate in 2d-space.</param>
/// <param name="y">The y coordinate in 2d-space.</param>
/// <summary>
/// Constructs a 2d vector with X and Y set to the same value.
/// </summary>
/// <param name="value">The x and y coordinates in 2d-space.</param>
/// <summary>
/// Inverts values in the specified <see cref="Vector2"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/> on the right of the sub sign.</param>
/// <returns>Result of the inversion.</returns>
/// <summary>
/// Adds two vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/> on the left of the add sign.</param>
/// <param name="value2">Source <see cref="Vector2"/> on the right of the add sign.</param>
/// <returns>Sum of the vectors.</returns>
/// <summary>
/// Subtracts a <see cref="Vector2"/> from a <see cref="Vector2"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/> on the left of the sub sign.</param>
/// <param name="value2">Source <see cref="Vector2"/> on the right of the sub sign.</param>
/// <returns>Result of the vector subtraction.</returns>
/// <summary>
/// Multiplies the components of two vectors by each other.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/> on the left of the mul sign.</param>
/// <param name="value2">Source <see cref="Vector2"/> on the right of the mul sign.</param>
/// <returns>Result of the vector multiplication.</returns>
/// <summary>
/// Multiplies the components of vector by a scalar.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/> on the left of the mul sign.</param>
/// <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
/// <returns>Result of the vector multiplication with a scalar.</returns>
/// <summary>
/// Multiplies the components of vector by a scalar.
/// </summary>
/// <param name="scaleFactor">Scalar value on the left of the mul sign.</param>
/// <param name="value">Source <see cref="Vector2"/> on the right of the mul sign.</param>
/// <returns>Result of the vector multiplication with a scalar.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector2"/> by the components of another <see cref="Vector2"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/> on the left of the div sign.</param>
/// <param name="value2">Divisor <see cref="Vector2"/> on the right of the div sign.</param>
/// <returns>The result of dividing the vectors.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector2"/> by a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/> on the left of the div sign.</param>
/// <param name="divider">Divisor scalar on the right of the div sign.</param>
/// <returns>The result of dividing a vector by a scalar.</returns>
/// <summary>
/// Compares whether two <see cref="Vector2"/> instances are equal.
/// </summary>
/// <param name="value1"><see cref="Vector2"/> instance on the left of the equal sign.</param>
/// <param name="value2"><see cref="Vector2"/> instance on the right of the equal sign.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether two <see cref="Vector2"/> instances are not equal.
/// </summary>
/// <param name="value1"><see cref="Vector2"/> instance on the left of the not equal sign.</param>
/// <param name="value2"><see cref="Vector2"/> instance on the right of the not equal sign.</param>
/// <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
/// <summary>
/// Performs vector addition on <paramref name="value1"/> and <paramref name="value2"/>.
/// </summary>
/// <param name="value1">The first vector to add.</param>
/// <param name="value2">The second vector to add.</param>
/// <returns>The result of the vector addition.</returns>
/// <summary>
/// Performs vector addition on <paramref name="value1"/> and
/// <paramref name="value2"/>, storing the result of the
/// addition in <paramref name="result"/>.
/// </summary>
/// <param name="value1">The first vector to add.</param>
/// <param name="value2">The second vector to add.</param>
/// <param name="result">The result of the vector addition.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2d-triangle.
/// </summary>
/// <param name="value1">The first vector of 2d-triangle.</param>
/// <param name="value2">The second vector of 2d-triangle.</param>
/// <param name="value3">The third vector of 2d-triangle.</param>
/// <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 2d-triangle.</param>
/// <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 2d-triangle.</param>
/// <returns>The cartesian translation of barycentric coordinates.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2d-triangle.
/// </summary>
/// <param name="value1">The first vector of 2d-triangle.</param>
/// <param name="value2">The second vector of 2d-triangle.</param>
/// <param name="value3">The third vector of 2d-triangle.</param>
/// <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 2d-triangle.</param>
/// <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 2d-triangle.</param>
/// <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains CatmullRom interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector in interpolation.</param>
/// <param name="value2">The second vector in interpolation.</param>
/// <param name="value3">The third vector in interpolation.</param>
/// <param name="value4">The fourth vector in interpolation.</param>
/// <param name="amount">Weighting factor.</param>
/// <returns>The result of CatmullRom interpolation.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains CatmullRom interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector in interpolation.</param>
/// <param name="value2">The second vector in interpolation.</param>
/// <param name="value3">The third vector in interpolation.</param>
/// <param name="value4">The fourth vector in interpolation.</param>
/// <param name="amount">Weighting factor.</param>
/// <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
/// <summary>
/// Round the members of this <see cref="Vector2"/> towards positive infinity.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains members from another vector rounded towards positive infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <returns>The rounded <see cref="Vector2"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains members from another vector rounded towards positive infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <param name="result">The rounded <see cref="Vector2"/>.</param>
/// <summary>
/// Clamps the specified value within a range.
/// </summary>
/// <param name="value1">The value to clamp.</param>
/// <param name="min">The min value.</param>
/// <param name="max">The max value.</param>
/// <returns>The clamped value.</returns>
/// <summary>
/// Clamps the specified value within a range.
/// </summary>
/// <param name="value1">The value to clamp.</param>
/// <param name="min">The min value.</param>
/// <param name="max">The max value.</param>
/// <param name="result">The clamped value as an output parameter.</param>
/// <summary>
/// Returns the distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The distance between two vectors.</returns>
/// <summary>
/// Returns the distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The distance between two vectors as an output parameter.</param>
/// <summary>
/// Returns the squared distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The squared distance between two vectors.</returns>
/// <summary>
/// Returns the squared distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The squared distance between two vectors as an output parameter.</param>
/// <summary>
/// Divides the components of a <see cref="Vector2"/> by the components of another <see cref="Vector2"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="value2">Divisor <see cref="Vector2"/>.</param>
/// <returns>The result of dividing the vectors.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector2"/> by the components of another <see cref="Vector2"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="value2">Divisor <see cref="Vector2"/>.</param>
/// <param name="result">The result of dividing the vectors as an output parameter.</param>
/// <summary>
/// Divides the components of a <see cref="Vector2"/> by a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="divider">Divisor scalar.</param>
/// <returns>The result of dividing a vector by a scalar.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector2"/> by a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="divider">Divisor scalar.</param>
/// <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
/// <summary>
/// Returns a dot product of two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The dot product of two vectors.</returns>
/// <summary>
/// Returns a dot product of two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The dot product of two vectors as an output parameter.</param>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Object"/>.
/// </summary>
/// <param name="obj">The <see cref="Object"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Vector2"/>.
/// </summary>
/// <param name="other">The <see cref="Vector2"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Round the members of this <see cref="Vector2"/> towards negative infinity.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains members from another vector rounded towards negative infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <returns>The rounded <see cref="Vector2"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains members from another vector rounded towards negative infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <param name="result">The rounded <see cref="Vector2"/>.</param>
/// <summary>
/// Gets the hash code of this <see cref="Vector2"/>.
/// </summary>
/// <returns>Hash code of this <see cref="Vector2"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains hermite spline interpolation.
/// </summary>
/// <param name="value1">The first position vector.</param>
/// <param name="tangent1">The first tangent vector.</param>
/// <param name="value2">The second position vector.</param>
/// <param name="tangent2">The second tangent vector.</param>
/// <param name="amount">Weighting factor.</param>
/// <returns>The hermite spline interpolation vector.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains hermite spline interpolation.
/// </summary>
/// <param name="value1">The first position vector.</param>
/// <param name="tangent1">The first tangent vector.</param>
/// <param name="value2">The second position vector.</param>
/// <param name="tangent2">The second tangent vector.</param>
/// <param name="amount">Weighting factor.</param>
/// <param name="result">The hermite spline interpolation vector as an output parameter.</param>
/// <summary>
/// Returns the length of this <see cref="Vector2"/>.
/// </summary>
/// <returns>The length of this <see cref="Vector2"/>.</returns>
/// <summary>
/// Returns the squared length of this <see cref="Vector2"/>.
/// </summary>
/// <returns>The squared length of this <see cref="Vector2"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains linear interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <returns>The result of linear interpolation of the specified vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains linear interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains linear interpolation of the specified vectors.
/// Uses <see cref="MathHelper.LerpPrecise"/> on MathHelper for the interpolation.
/// Less efficient but more precise compared to <see cref="Vector2.Lerp(Vector2, Vector2, float)"/>.
/// See remarks section of <see cref="MathHelper.LerpPrecise"/> on MathHelper for more info.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <returns>The result of linear interpolation of the specified vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains linear interpolation of the specified vectors.
/// Uses <see cref="MathHelper.LerpPrecise"/> on MathHelper for the interpolation.
/// Less efficient but more precise compared to <see cref="Vector2.Lerp(ref Vector2, ref Vector2, float, out Vector2)"/>.
/// See remarks section of <see cref="MathHelper.LerpPrecise"/> on MathHelper for more info.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a maximal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The <see cref="Vector2"/> with maximal values from the two vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a maximal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The <see cref="Vector2"/> with maximal values from the two vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a minimal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The <see cref="Vector2"/> with minimal values from the two vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a minimal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The <see cref="Vector2"/> with minimal values from the two vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a multiplication of two vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="value2">Source <see cref="Vector2"/>.</param>
/// <returns>The result of the vector multiplication.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a multiplication of two vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="value2">Source <see cref="Vector2"/>.</param>
/// <param name="result">The result of the vector multiplication as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a multiplication of <see cref="Vector2"/> and a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="scaleFactor">Scalar value.</param>
/// <returns>The result of the vector multiplication with a scalar.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a multiplication of <see cref="Vector2"/> and a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="scaleFactor">Scalar value.</param>
/// <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains the specified vector inversion.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <returns>The result of the vector inversion.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains the specified vector inversion.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <param name="result">The result of the vector inversion as an output parameter.</param>
/// <summary>
/// Turns this <see cref="Vector2"/> to a unit vector with the same direction.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a normalized values from another vector.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <returns>Unit vector.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a normalized values from another vector.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <param name="result">Unit vector as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains reflect vector of the given vector and normal.
/// </summary>
/// <param name="vector">Source <see cref="Vector2"/>.</param>
/// <param name="normal">Reflection normal.</param>
/// <returns>Reflected vector.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains reflect vector of the given vector and normal.
/// </summary>
/// <param name="vector">Source <see cref="Vector2"/>.</param>
/// <param name="normal">Reflection normal.</param>
/// <param name="result">Reflected vector as an output parameter.</param>
/// <summary>
/// Round the members of this <see cref="Vector2"/> to the nearest integer value.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains members from another vector rounded to the nearest integer value.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <returns>The rounded <see cref="Vector2"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains members from another vector rounded to the nearest integer value.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <param name="result">The rounded <see cref="Vector2"/>.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains cubic interpolation of the specified vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="value2">Source <see cref="Vector2"/>.</param>
/// <param name="amount">Weighting value.</param>
/// <returns>Cubic interpolation of the specified vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains cubic interpolation of the specified vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="value2">Source <see cref="Vector2"/>.</param>
/// <param name="amount">Weighting value.</param>
/// <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains subtraction of on <see cref="Vector2"/> from a another.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="value2">Source <see cref="Vector2"/>.</param>
/// <returns>The result of the vector subtraction.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains subtraction of on <see cref="Vector2"/> from a another.
/// </summary>
/// <param name="value1">Source <see cref="Vector2"/>.</param>
/// <param name="value2">Source <see cref="Vector2"/>.</param>
/// <param name="result">The result of the vector subtraction as an output parameter.</param>
/// <summary>
/// Returns a <see cref="String"/> representation of this <see cref="Vector2"/> in the format:
/// {X:[<see cref="X"/>] Y:[<see cref="Y"/>]}
/// </summary>
/// <returns>A <see cref="String"/> representation of this <see cref="Vector2"/>.</returns>
/// <summary>
/// Gets a <see cref="Point"/> representation for this object.
/// </summary>
/// <returns>A <see cref="Point"/> representation for this object.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="position">Source <see cref="Vector2"/>.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <returns>Transformed <see cref="Vector2"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="position">Source <see cref="Vector2"/>.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="result">Transformed <see cref="Vector2"/> as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="Quaternion"/>, representing the rotation.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <returns>Transformed <see cref="Vector2"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="Quaternion"/>, representing the rotation.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <param name="result">Transformed <see cref="Vector2"/> as an output parameter.</param>
/// <summary>
/// Apply transformation on vectors within array of <see cref="Vector2"/> by the specified <see cref="Matrix"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="sourceIndex">The starting index of transformation in the source array.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="destinationArray">Destination array.</param>
/// <param name="destinationIndex">The starting index in the destination array, where the first <see cref="Vector2"/> should be written.</param>
/// <param name="length">The number of vectors to be transformed.</param>
/// <summary>
/// Apply transformation on vectors within array of <see cref="Vector2"/> by the specified <see cref="Quaternion"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="sourceIndex">The starting index of transformation in the source array.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <param name="destinationArray">Destination array.</param>
/// <param name="destinationIndex">The starting index in the destination array, where the first <see cref="Vector2"/> should be written.</param>
/// <param name="length">The number of vectors to be transformed.</param>
/// <summary>
/// Apply transformation on all vectors within array of <see cref="Vector2"/> by the specified <see cref="Matrix"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="destinationArray">Destination array.</param>
/// <summary>
/// Apply transformation on all vectors within array of <see cref="Vector2"/> by the specified <see cref="Quaternion"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <param name="destinationArray">Destination array.</param>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a transformation of the specified normal by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="normal">Source <see cref="Vector2"/> which represents a normal vector.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <returns>Transformed normal.</returns>
/// <summary>
/// Creates a new <see cref="Vector2"/> that contains a transformation of the specified normal by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="normal">Source <see cref="Vector2"/> which represents a normal vector.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="result">Transformed normal as an output parameter.</param>
/// <summary>
/// Apply transformation on normals within array of <see cref="Vector2"/> by the specified <see cref="Matrix"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="sourceIndex">The starting index of transformation in the source array.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="destinationArray">Destination array.</param>
/// <param name="destinationIndex">The starting index in the destination array, where the first <see cref="Vector2"/> should be written.</param>
/// <param name="length">The number of normals to be transformed.</param>
/// <summary>
/// Apply transformation on all normals within array of <see cref="Vector2"/> by the specified <see cref="Matrix"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="destinationArray">Destination array.</param>
/// <summary>
/// Deconstruction method for <see cref="Vector2"/>.
/// </summary>
/// <param name="x"></param>
/// <param name="y"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Vector3.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes a 3D-vector.
/// </summary>
/// <summary>
/// The x coordinate of this <see cref="Vector3"/>.
/// </summary>
/// <summary>
/// The y coordinate of this <see cref="Vector3"/>.
/// </summary>
/// <summary>
/// The z coordinate of this <see cref="Vector3"/>.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector3"/> with components 0, 0, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector3"/> with components 1, 1, 1.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector3"/> with components 1, 0, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector3"/> with components 0, 1, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector3"/> with components 0, 0, 1.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector3"/> with components 0, 1, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector3"/> with components 0, -1, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector3"/> with components 1, 0, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector3"/> with components -1, 0, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector3"/> with components 0, 0, -1.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector3"/> with components 0, 0, 1.
/// </summary>
/// <summary>
/// Constructs a 3d vector with X, Y and Z from three values.
/// </summary>
/// <param name="x">The x coordinate in 3d-space.</param>
/// <param name="y">The y coordinate in 3d-space.</param>
/// <param name="z">The z coordinate in 3d-space.</param>
/// <summary>
/// Constructs a 3d vector with X, Y and Z set to the same value.
/// </summary>
/// <param name="value">The x, y and z coordinates in 3d-space.</param>
/// <summary>
/// Constructs a 3d vector with X, Y from <see cref="Vector2"/> and Z from a scalar.
/// </summary>
/// <param name="value">The x and y coordinates in 3d-space.</param>
/// <param name="z">The z coordinate in 3d-space.</param>
/// <summary>
/// Performs vector addition on <paramref name="value1"/> and <paramref name="value2"/>.
/// </summary>
/// <param name="value1">The first vector to add.</param>
/// <param name="value2">The second vector to add.</param>
/// <returns>The result of the vector addition.</returns>
/// <summary>
/// Performs vector addition on <paramref name="value1"/> and
/// <paramref name="value2"/>, storing the result of the
/// addition in <paramref name="result"/>.
/// </summary>
/// <param name="value1">The first vector to add.</param>
/// <param name="value2">The second vector to add.</param>
/// <param name="result">The result of the vector addition.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3d-triangle.
/// </summary>
/// <param name="value1">The first vector of 3d-triangle.</param>
/// <param name="value2">The second vector of 3d-triangle.</param>
/// <param name="value3">The third vector of 3d-triangle.</param>
/// <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 3d-triangle.</param>
/// <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 3d-triangle.</param>
/// <returns>The cartesian translation of barycentric coordinates.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3d-triangle.
/// </summary>
/// <param name="value1">The first vector of 3d-triangle.</param>
/// <param name="value2">The second vector of 3d-triangle.</param>
/// <param name="value3">The third vector of 3d-triangle.</param>
/// <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 3d-triangle.</param>
/// <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 3d-triangle.</param>
/// <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains CatmullRom interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector in interpolation.</param>
/// <param name="value2">The second vector in interpolation.</param>
/// <param name="value3">The third vector in interpolation.</param>
/// <param name="value4">The fourth vector in interpolation.</param>
/// <param name="amount">Weighting factor.</param>
/// <returns>The result of CatmullRom interpolation.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains CatmullRom interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector in interpolation.</param>
/// <param name="value2">The second vector in interpolation.</param>
/// <param name="value3">The third vector in interpolation.</param>
/// <param name="value4">The fourth vector in interpolation.</param>
/// <param name="amount">Weighting factor.</param>
/// <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
/// <summary>
/// Round the members of this <see cref="Vector3"/> towards positive infinity.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains members from another vector rounded towards positive infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <returns>The rounded <see cref="Vector3"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains members from another vector rounded towards positive infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <param name="result">The rounded <see cref="Vector3"/>.</param>
/// <summary>
/// Clamps the specified value within a range.
/// </summary>
/// <param name="value1">The value to clamp.</param>
/// <param name="min">The min value.</param>
/// <param name="max">The max value.</param>
/// <returns>The clamped value.</returns>
/// <summary>
/// Clamps the specified value within a range.
/// </summary>
/// <param name="value1">The value to clamp.</param>
/// <param name="min">The min value.</param>
/// <param name="max">The max value.</param>
/// <param name="result">The clamped value as an output parameter.</param>
/// <summary>
/// Computes the cross product of two vectors.
/// </summary>
/// <param name="vector1">The first vector.</param>
/// <param name="vector2">The second vector.</param>
/// <returns>The cross product of two vectors.</returns>
/// <summary>
/// Computes the cross product of two vectors.
/// </summary>
/// <param name="vector1">The first vector.</param>
/// <param name="vector2">The second vector.</param>
/// <param name="result">The cross product of two vectors as an output parameter.</param>
/// <summary>
/// Returns the distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The distance between two vectors.</returns>
/// <summary>
/// Returns the distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The distance between two vectors as an output parameter.</param>
/// <summary>
/// Returns the squared distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The squared distance between two vectors.</returns>
/// <summary>
/// Returns the squared distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The squared distance between two vectors as an output parameter.</param>
/// <summary>
/// Divides the components of a <see cref="Vector3"/> by the components of another <see cref="Vector3"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="value2">Divisor <see cref="Vector3"/>.</param>
/// <returns>The result of dividing the vectors.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector3"/> by a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="divider">Divisor scalar.</param>
/// <returns>The result of dividing a vector by a scalar.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector3"/> by a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="divider">Divisor scalar.</param>
/// <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
/// <summary>
/// Divides the components of a <see cref="Vector3"/> by the components of another <see cref="Vector3"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="value2">Divisor <see cref="Vector3"/>.</param>
/// <param name="result">The result of dividing the vectors as an output parameter.</param>
/// <summary>
/// Returns a dot product of two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The dot product of two vectors.</returns>
/// <summary>
/// Returns a dot product of two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The dot product of two vectors as an output parameter.</param>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Object"/>.
/// </summary>
/// <param name="obj">The <see cref="Object"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Vector3"/>.
/// </summary>
/// <param name="other">The <see cref="Vector3"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Round the members of this <see cref="Vector3"/> towards negative infinity.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains members from another vector rounded towards negative infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <returns>The rounded <see cref="Vector3"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains members from another vector rounded towards negative infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <param name="result">The rounded <see cref="Vector3"/>.</param>
/// <summary>
/// Gets the hash code of this <see cref="Vector3"/>.
/// </summary>
/// <returns>Hash code of this <see cref="Vector3"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains hermite spline interpolation.
/// </summary>
/// <param name="value1">The first position vector.</param>
/// <param name="tangent1">The first tangent vector.</param>
/// <param name="value2">The second position vector.</param>
/// <param name="tangent2">The second tangent vector.</param>
/// <param name="amount">Weighting factor.</param>
/// <returns>The hermite spline interpolation vector.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains hermite spline interpolation.
/// </summary>
/// <param name="value1">The first position vector.</param>
/// <param name="tangent1">The first tangent vector.</param>
/// <param name="value2">The second position vector.</param>
/// <param name="tangent2">The second tangent vector.</param>
/// <param name="amount">Weighting factor.</param>
/// <param name="result">The hermite spline interpolation vector as an output parameter.</param>
/// <summary>
/// Returns the length of this <see cref="Vector3"/>.
/// </summary>
/// <returns>The length of this <see cref="Vector3"/>.</returns>
/// <summary>
/// Returns the squared length of this <see cref="Vector3"/>.
/// </summary>
/// <returns>The squared length of this <see cref="Vector3"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains linear interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <returns>The result of linear interpolation of the specified vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains linear interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains linear interpolation of the specified vectors.
/// Uses <see cref="MathHelper.LerpPrecise"/> on MathHelper for the interpolation.
/// Less efficient but more precise compared to <see cref="Vector3.Lerp(Vector3, Vector3, float)"/>.
/// See remarks section of <see cref="MathHelper.LerpPrecise"/> on MathHelper for more info.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <returns>The result of linear interpolation of the specified vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains linear interpolation of the specified vectors.
/// Uses <see cref="MathHelper.LerpPrecise"/> on MathHelper for the interpolation.
/// Less efficient but more precise compared to <see cref="Vector3.Lerp(ref Vector3, ref Vector3, float, out Vector3)"/>.
/// See remarks section of <see cref="MathHelper.LerpPrecise"/> on MathHelper for more info.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a maximal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The <see cref="Vector3"/> with maximal values from the two vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a maximal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The <see cref="Vector3"/> with maximal values from the two vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a minimal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The <see cref="Vector3"/> with minimal values from the two vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a minimal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The <see cref="Vector3"/> with minimal values from the two vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a multiplication of two vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="value2">Source <see cref="Vector3"/>.</param>
/// <returns>The result of the vector multiplication.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a multiplication of <see cref="Vector3"/> and a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="scaleFactor">Scalar value.</param>
/// <returns>The result of the vector multiplication with a scalar.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a multiplication of <see cref="Vector3"/> and a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="scaleFactor">Scalar value.</param>
/// <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a multiplication of two vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="value2">Source <see cref="Vector3"/>.</param>
/// <param name="result">The result of the vector multiplication as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains the specified vector inversion.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <returns>The result of the vector inversion.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains the specified vector inversion.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <param name="result">The result of the vector inversion as an output parameter.</param>
/// <summary>
/// Turns this <see cref="Vector3"/> to a unit vector with the same direction.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a normalized values from another vector.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <returns>Unit vector.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a normalized values from another vector.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <param name="result">Unit vector as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains reflect vector of the given vector and normal.
/// </summary>
/// <param name="vector">Source <see cref="Vector3"/>.</param>
/// <param name="normal">Reflection normal.</param>
/// <returns>Reflected vector.</returns>
// I is the original array
// N is the normal of the incident plane
// R = I - (2 * N * ( DotProduct[ I,N] ))
// inline the dotProduct here instead of calling method
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains reflect vector of the given vector and normal.
/// </summary>
/// <param name="vector">Source <see cref="Vector3"/>.</param>
/// <param name="normal">Reflection normal.</param>
/// <param name="result">Reflected vector as an output parameter.</param>
// I is the original array
// N is the normal of the incident plane
// R = I - (2 * N * ( DotProduct[ I,N] ))
// inline the dotProduct here instead of calling method
/// <summary>
/// Round the members of this <see cref="Vector3"/> towards the nearest integer value.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains members from another vector rounded to the nearest integer value.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <returns>The rounded <see cref="Vector3"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains members from another vector rounded to the nearest integer value.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <param name="result">The rounded <see cref="Vector3"/>.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains cubic interpolation of the specified vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="value2">Source <see cref="Vector3"/>.</param>
/// <param name="amount">Weighting value.</param>
/// <returns>Cubic interpolation of the specified vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains cubic interpolation of the specified vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="value2">Source <see cref="Vector3"/>.</param>
/// <param name="amount">Weighting value.</param>
/// <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains subtraction of on <see cref="Vector3"/> from a another.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="value2">Source <see cref="Vector3"/>.</param>
/// <returns>The result of the vector subtraction.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains subtraction of on <see cref="Vector3"/> from a another.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/>.</param>
/// <param name="value2">Source <see cref="Vector3"/>.</param>
/// <param name="result">The result of the vector subtraction as an output parameter.</param>
/// <summary>
/// Returns a <see cref="String"/> representation of this <see cref="Vector3"/> in the format:
/// {X:[<see cref="X"/>] Y:[<see cref="Y"/>] Z:[<see cref="Z"/>]}
/// </summary>
/// <returns>A <see cref="String"/> representation of this <see cref="Vector3"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="position">Source <see cref="Vector3"/>.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <returns>Transformed <see cref="Vector3"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="position">Source <see cref="Vector3"/>.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="result">Transformed <see cref="Vector3"/> as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="Quaternion"/>, representing the rotation.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <returns>Transformed <see cref="Vector3"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="Quaternion"/>, representing the rotation.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <param name="result">Transformed <see cref="Vector3"/> as an output parameter.</param>
/// <summary>
/// Apply transformation on vectors within array of <see cref="Vector3"/> by the specified <see cref="Matrix"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="sourceIndex">The starting index of transformation in the source array.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="destinationArray">Destination array.</param>
/// <param name="destinationIndex">The starting index in the destination array, where the first <see cref="Vector3"/> should be written.</param>
/// <param name="length">The number of vectors to be transformed.</param>
// TODO: Are there options on some platforms to implement a vectorized version of this?
/// <summary>
/// Apply transformation on vectors within array of <see cref="Vector3"/> by the specified <see cref="Quaternion"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="sourceIndex">The starting index of transformation in the source array.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <param name="destinationArray">Destination array.</param>
/// <param name="destinationIndex">The starting index in the destination array, where the first <see cref="Vector3"/> should be written.</param>
/// <param name="length">The number of vectors to be transformed.</param>
// TODO: Are there options on some platforms to implement a vectorized version of this?
/// <summary>
/// Apply transformation on all vectors within array of <see cref="Vector3"/> by the specified <see cref="Matrix"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="destinationArray">Destination array.</param>
// TODO: Are there options on some platforms to implement a vectorized version of this?
/// <summary>
/// Apply transformation on all vectors within array of <see cref="Vector3"/> by the specified <see cref="Quaternion"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <param name="destinationArray">Destination array.</param>
// TODO: Are there options on some platforms to implement a vectorized version of this?
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a transformation of the specified normal by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="normal">Source <see cref="Vector3"/> which represents a normal vector.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <returns>Transformed normal.</returns>
/// <summary>
/// Creates a new <see cref="Vector3"/> that contains a transformation of the specified normal by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="normal">Source <see cref="Vector3"/> which represents a normal vector.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="result">Transformed normal as an output parameter.</param>
/// <summary>
/// Apply transformation on normals within array of <see cref="Vector3"/> by the specified <see cref="Matrix"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="sourceIndex">The starting index of transformation in the source array.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="destinationArray">Destination array.</param>
/// <param name="destinationIndex">The starting index in the destination array, where the first <see cref="Vector3"/> should be written.</param>
/// <param name="length">The number of normals to be transformed.</param>
/// <summary>
/// Apply transformation on all normals within array of <see cref="Vector3"/> by the specified <see cref="Matrix"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="destinationArray">Destination array.</param>
/// <summary>
/// Deconstruction method for <see cref="Vector3"/>.
/// </summary>
/// <param name="x"></param>
/// <param name="y"></param>
/// <param name="z"></param>
/// <summary>
/// Compares whether two <see cref="Vector3"/> instances are equal.
/// </summary>
/// <param name="value1"><see cref="Vector3"/> instance on the left of the equal sign.</param>
/// <param name="value2"><see cref="Vector3"/> instance on the right of the equal sign.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether two <see cref="Vector3"/> instances are not equal.
/// </summary>
/// <param name="value1"><see cref="Vector3"/> instance on the left of the not equal sign.</param>
/// <param name="value2"><see cref="Vector3"/> instance on the right of the not equal sign.</param>
/// <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
/// <summary>
/// Adds two vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/> on the left of the add sign.</param>
/// <param name="value2">Source <see cref="Vector3"/> on the right of the add sign.</param>
/// <returns>Sum of the vectors.</returns>
/// <summary>
/// Inverts values in the specified <see cref="Vector3"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/> on the right of the sub sign.</param>
/// <returns>Result of the inversion.</returns>
/// <summary>
/// Subtracts a <see cref="Vector3"/> from a <see cref="Vector3"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/> on the left of the sub sign.</param>
/// <param name="value2">Source <see cref="Vector3"/> on the right of the sub sign.</param>
/// <returns>Result of the vector subtraction.</returns>
/// <summary>
/// Multiplies the components of two vectors by each other.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/> on the left of the mul sign.</param>
/// <param name="value2">Source <see cref="Vector3"/> on the right of the mul sign.</param>
/// <returns>Result of the vector multiplication.</returns>
/// <summary>
/// Multiplies the components of vector by a scalar.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/> on the left of the mul sign.</param>
/// <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
/// <returns>Result of the vector multiplication with a scalar.</returns>
/// <summary>
/// Multiplies the components of vector by a scalar.
/// </summary>
/// <param name="scaleFactor">Scalar value on the left of the mul sign.</param>
/// <param name="value">Source <see cref="Vector3"/> on the right of the mul sign.</param>
/// <returns>Result of the vector multiplication with a scalar.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector3"/> by the components of another <see cref="Vector3"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/> on the left of the div sign.</param>
/// <param name="value2">Divisor <see cref="Vector3"/> on the right of the div sign.</param>
/// <returns>The result of dividing the vectors.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector3"/> by a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector3"/> on the left of the div sign.</param>
/// <param name="divider">Divisor scalar on the right of the div sign.</param>
/// <returns>The result of dividing a vector by a scalar.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Vector4.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes a 4D-vector.
/// </summary>
/// <summary>
/// The x coordinate of this <see cref="Vector4"/>.
/// </summary>
/// <summary>
/// The y coordinate of this <see cref="Vector4"/>.
/// </summary>
/// <summary>
/// The z coordinate of this <see cref="Vector4"/>.
/// </summary>
/// <summary>
/// The w coordinate of this <see cref="Vector4"/>.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector4"/> with components 0, 0, 0, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector4"/> with components 1, 1, 1, 1.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector4"/> with components 1, 0, 0, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector4"/> with components 0, 1, 0, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector4"/> with components 0, 0, 1, 0.
/// </summary>
/// <summary>
/// Returns a <see cref="Vector4"/> with components 0, 0, 0, 1.
/// </summary>
/// <summary>
/// Constructs a 3d vector with X, Y, Z and W from four values.
/// </summary>
/// <param name="x">The x coordinate in 4d-space.</param>
/// <param name="y">The y coordinate in 4d-space.</param>
/// <param name="z">The z coordinate in 4d-space.</param>
/// <param name="w">The w coordinate in 4d-space.</param>
/// <summary>
/// Constructs a 3d vector with X and Z from <see cref="Vector2"/> and Z and W from the scalars.
/// </summary>
/// <param name="value">The x and y coordinates in 4d-space.</param>
/// <param name="z">The z coordinate in 4d-space.</param>
/// <param name="w">The w coordinate in 4d-space.</param>
/// <summary>
/// Constructs a 3d vector with X, Y, Z from <see cref="Vector3"/> and W from a scalar.
/// </summary>
/// <param name="value">The x, y and z coordinates in 4d-space.</param>
/// <param name="w">The w coordinate in 4d-space.</param>
/// <summary>
/// Constructs a 4d vector with X, Y, Z and W set to the same value.
/// </summary>
/// <param name="value">The x, y, z and w coordinates in 4d-space.</param>
/// <summary>
/// Performs vector addition on <paramref name="value1"/> and <paramref name="value2"/>.
/// </summary>
/// <param name="value1">The first vector to add.</param>
/// <param name="value2">The second vector to add.</param>
/// <returns>The result of the vector addition.</returns>
/// <summary>
/// Performs vector addition on <paramref name="value1"/> and
/// <paramref name="value2"/>, storing the result of the
/// addition in <paramref name="result"/>.
/// </summary>
/// <param name="value1">The first vector to add.</param>
/// <param name="value2">The second vector to add.</param>
/// <param name="result">The result of the vector addition.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 4d-triangle.
/// </summary>
/// <param name="value1">The first vector of 4d-triangle.</param>
/// <param name="value2">The second vector of 4d-triangle.</param>
/// <param name="value3">The third vector of 4d-triangle.</param>
/// <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 4d-triangle.</param>
/// <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 4d-triangle.</param>
/// <returns>The cartesian translation of barycentric coordinates.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 4d-triangle.
/// </summary>
/// <param name="value1">The first vector of 4d-triangle.</param>
/// <param name="value2">The second vector of 4d-triangle.</param>
/// <param name="value3">The third vector of 4d-triangle.</param>
/// <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 4d-triangle.</param>
/// <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 4d-triangle.</param>
/// <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains CatmullRom interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector in interpolation.</param>
/// <param name="value2">The second vector in interpolation.</param>
/// <param name="value3">The third vector in interpolation.</param>
/// <param name="value4">The fourth vector in interpolation.</param>
/// <param name="amount">Weighting factor.</param>
/// <returns>The result of CatmullRom interpolation.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains CatmullRom interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector in interpolation.</param>
/// <param name="value2">The second vector in interpolation.</param>
/// <param name="value3">The third vector in interpolation.</param>
/// <param name="value4">The fourth vector in interpolation.</param>
/// <param name="amount">Weighting factor.</param>
/// <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
/// <summary>
/// Round the members of this <see cref="Vector4"/> towards positive infinity.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains members from another vector rounded towards positive infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <returns>The rounded <see cref="Vector4"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains members from another vector rounded towards positive infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <param name="result">The rounded <see cref="Vector4"/>.</param>
/// <summary>
/// Clamps the specified value within a range.
/// </summary>
/// <param name="value1">The value to clamp.</param>
/// <param name="min">The min value.</param>
/// <param name="max">The max value.</param>
/// <returns>The clamped value.</returns>
/// <summary>
/// Clamps the specified value within a range.
/// </summary>
/// <param name="value1">The value to clamp.</param>
/// <param name="min">The min value.</param>
/// <param name="max">The max value.</param>
/// <param name="result">The clamped value as an output parameter.</param>
/// <summary>
/// Returns the distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The distance between two vectors.</returns>
/// <summary>
/// Returns the distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The distance between two vectors as an output parameter.</param>
/// <summary>
/// Returns the squared distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The squared distance between two vectors.</returns>
/// <summary>
/// Returns the squared distance between two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The squared distance between two vectors as an output parameter.</param>
/// <summary>
/// Divides the components of a <see cref="Vector4"/> by the components of another <see cref="Vector4"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="value2">Divisor <see cref="Vector4"/>.</param>
/// <returns>The result of dividing the vectors.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector4"/> by a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="divider">Divisor scalar.</param>
/// <returns>The result of dividing a vector by a scalar.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector4"/> by a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="divider">Divisor scalar.</param>
/// <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
/// <summary>
/// Divides the components of a <see cref="Vector4"/> by the components of another <see cref="Vector4"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="value2">Divisor <see cref="Vector4"/>.</param>
/// <param name="result">The result of dividing the vectors as an output parameter.</param>
/// <summary>
/// Returns a dot product of two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The dot product of two vectors.</returns>
/// <summary>
/// Returns a dot product of two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The dot product of two vectors as an output parameter.</param>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Object"/>.
/// </summary>
/// <param name="obj">The <see cref="Object"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether current instance is equal to specified <see cref="Vector4"/>.
/// </summary>
/// <param name="other">The <see cref="Vector4"/> to compare.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Round the members of this <see cref="Vector4"/> towards negative infinity.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains members from another vector rounded towards negative infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <returns>The rounded <see cref="Vector4"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains members from another vector rounded towards negative infinity.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <param name="result">The rounded <see cref="Vector4"/>.</param>
/// <summary>
/// Gets the hash code of this <see cref="Vector4"/>.
/// </summary>
/// <returns>Hash code of this <see cref="Vector4"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains hermite spline interpolation.
/// </summary>
/// <param name="value1">The first position vector.</param>
/// <param name="tangent1">The first tangent vector.</param>
/// <param name="value2">The second position vector.</param>
/// <param name="tangent2">The second tangent vector.</param>
/// <param name="amount">Weighting factor.</param>
/// <returns>The hermite spline interpolation vector.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains hermite spline interpolation.
/// </summary>
/// <param name="value1">The first position vector.</param>
/// <param name="tangent1">The first tangent vector.</param>
/// <param name="value2">The second position vector.</param>
/// <param name="tangent2">The second tangent vector.</param>
/// <param name="amount">Weighting factor.</param>
/// <param name="result">The hermite spline interpolation vector as an output parameter.</param>
/// <summary>
/// Returns the length of this <see cref="Vector4"/>.
/// </summary>
/// <returns>The length of this <see cref="Vector4"/>.</returns>
/// <summary>
/// Returns the squared length of this <see cref="Vector4"/>.
/// </summary>
/// <returns>The squared length of this <see cref="Vector4"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains linear interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <returns>The result of linear interpolation of the specified vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains linear interpolation of the specified vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains linear interpolation of the specified vectors.
/// Uses <see cref="MathHelper.LerpPrecise"/> on MathHelper for the interpolation.
/// Less efficient but more precise compared to <see cref="Vector4.Lerp(Vector4, Vector4, float)"/>.
/// See remarks section of <see cref="MathHelper.LerpPrecise"/> on MathHelper for more info.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <returns>The result of linear interpolation of the specified vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains linear interpolation of the specified vectors.
/// Uses <see cref="MathHelper.LerpPrecise"/> on MathHelper for the interpolation.
/// Less efficient but more precise compared to <see cref="Vector4.Lerp(ref Vector4, ref Vector4, float, out Vector4)"/>.
/// See remarks section of <see cref="MathHelper.LerpPrecise"/> on MathHelper for more info.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="amount">Weighting value(between 0.0 and 1.0).</param>
/// <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a maximal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The <see cref="Vector4"/> with maximal values from the two vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a maximal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The <see cref="Vector4"/> with maximal values from the two vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a minimal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <returns>The <see cref="Vector4"/> with minimal values from the two vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a minimal values from the two vectors.
/// </summary>
/// <param name="value1">The first vector.</param>
/// <param name="value2">The second vector.</param>
/// <param name="result">The <see cref="Vector4"/> with minimal values from the two vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a multiplication of two vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="value2">Source <see cref="Vector4"/>.</param>
/// <returns>The result of the vector multiplication.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a multiplication of <see cref="Vector4"/> and a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="scaleFactor">Scalar value.</param>
/// <returns>The result of the vector multiplication with a scalar.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a multiplication of <see cref="Vector4"/> and a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="scaleFactor">Scalar value.</param>
/// <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a multiplication of two vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="value2">Source <see cref="Vector4"/>.</param>
/// <param name="result">The result of the vector multiplication as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains the specified vector inversion.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <returns>The result of the vector inversion.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains the specified vector inversion.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <param name="result">The result of the vector inversion as an output parameter.</param>
/// <summary>
/// Turns this <see cref="Vector4"/> to a unit vector with the same direction.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a normalized values from another vector.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <returns>Unit vector.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a normalized values from another vector.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <param name="result">Unit vector as an output parameter.</param>
/// <summary>
/// Round the members of this <see cref="Vector4"/> to the nearest integer value.
/// </summary>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains members from another vector rounded to the nearest integer value.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <returns>The rounded <see cref="Vector4"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains members from another vector rounded to the nearest integer value.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <param name="result">The rounded <see cref="Vector4"/>.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains cubic interpolation of the specified vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="value2">Source <see cref="Vector4"/>.</param>
/// <param name="amount">Weighting value.</param>
/// <returns>Cubic interpolation of the specified vectors.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains cubic interpolation of the specified vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="value2">Source <see cref="Vector4"/>.</param>
/// <param name="amount">Weighting value.</param>
/// <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains subtraction of on <see cref="Vector4"/> from a another.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="value2">Source <see cref="Vector4"/>.</param>
/// <returns>The result of the vector subtraction.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains subtraction of on <see cref="Vector4"/> from a another.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/>.</param>
/// <param name="value2">Source <see cref="Vector4"/>.</param>
/// <param name="result">The result of the vector subtraction as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 2d-vector by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <returns>Transformed <see cref="Vector4"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 2d-vector by the specified <see cref="Quaternion"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <returns>Transformed <see cref="Vector4"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 3d-vector by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <returns>Transformed <see cref="Vector4"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 3d-vector by the specified <see cref="Quaternion"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <returns>Transformed <see cref="Vector4"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 4d-vector by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <returns>Transformed <see cref="Vector4"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 4d-vector by the specified <see cref="Quaternion"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <returns>Transformed <see cref="Vector4"/>.</returns>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 2d-vector by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="result">Transformed <see cref="Vector4"/> as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 2d-vector by the specified <see cref="Quaternion"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector2"/>.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <param name="result">Transformed <see cref="Vector4"/> as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 3d-vector by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="result">Transformed <see cref="Vector4"/> as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 3d-vector by the specified <see cref="Quaternion"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector3"/>.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <param name="result">Transformed <see cref="Vector4"/> as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 4d-vector by the specified <see cref="Matrix"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="result">Transformed <see cref="Vector4"/> as an output parameter.</param>
/// <summary>
/// Creates a new <see cref="Vector4"/> that contains a transformation of 4d-vector by the specified <see cref="Quaternion"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/>.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <param name="result">Transformed <see cref="Vector4"/> as an output parameter.</param>
/// <summary>
/// Apply transformation on vectors within array of <see cref="Vector4"/> by the specified <see cref="Matrix"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="sourceIndex">The starting index of transformation in the source array.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="destinationArray">Destination array.</param>
/// <param name="destinationIndex">The starting index in the destination array, where the first <see cref="Vector4"/> should be written.</param>
/// <param name="length">The number of vectors to be transformed.</param>
/// <summary>
/// Apply transformation on vectors within array of <see cref="Vector4"/> by the specified <see cref="Quaternion"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="sourceIndex">The starting index of transformation in the source array.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <param name="destinationArray">Destination array.</param>
/// <param name="destinationIndex">The starting index in the destination array, where the first <see cref="Vector4"/> should be written.</param>
/// <param name="length">The number of vectors to be transformed.</param>
/// <summary>
/// Apply transformation on all vectors within array of <see cref="Vector4"/> by the specified <see cref="Matrix"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="matrix">The transformation <see cref="Matrix"/>.</param>
/// <param name="destinationArray">Destination array.</param>
/// <summary>
/// Apply transformation on all vectors within array of <see cref="Vector4"/> by the specified <see cref="Quaternion"/> and places the results in an another array.
/// </summary>
/// <param name="sourceArray">Source array.</param>
/// <param name="rotation">The <see cref="Quaternion"/> which contains rotation transformation.</param>
/// <param name="destinationArray">Destination array.</param>
/// <summary>
/// Returns a <see cref="String"/> representation of this <see cref="Vector4"/> in the format:
/// {X:[<see cref="X"/>] Y:[<see cref="Y"/>] Z:[<see cref="Z"/>] W:[<see cref="W"/>]}
/// </summary>
/// <returns>A <see cref="String"/> representation of this <see cref="Vector4"/>.</returns>
/// <summary>
/// Deconstruction method for <see cref="Vector4"/>.
/// </summary>
/// <param name="x"></param>
/// <param name="y"></param>
/// <param name="z"></param>
/// <param name="w"></param>
/// <summary>
/// Inverts values in the specified <see cref="Vector4"/>.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/> on the right of the sub sign.</param>
/// <returns>Result of the inversion.</returns>
/// <summary>
/// Compares whether two <see cref="Vector4"/> instances are equal.
/// </summary>
/// <param name="value1"><see cref="Vector4"/> instance on the left of the equal sign.</param>
/// <param name="value2"><see cref="Vector4"/> instance on the right of the equal sign.</param>
/// <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
/// <summary>
/// Compares whether two <see cref="Vector4"/> instances are not equal.
/// </summary>
/// <param name="value1"><see cref="Vector4"/> instance on the left of the not equal sign.</param>
/// <param name="value2"><see cref="Vector4"/> instance on the right of the not equal sign.</param>
/// <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
/// <summary>
/// Adds two vectors.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/> on the left of the add sign.</param>
/// <param name="value2">Source <see cref="Vector4"/> on the right of the add sign.</param>
/// <returns>Sum of the vectors.</returns>
/// <summary>
/// Subtracts a <see cref="Vector4"/> from a <see cref="Vector4"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/> on the left of the sub sign.</param>
/// <param name="value2">Source <see cref="Vector4"/> on the right of the sub sign.</param>
/// <returns>Result of the vector subtraction.</returns>
/// <summary>
/// Multiplies the components of two vectors by each other.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/> on the left of the mul sign.</param>
/// <param name="value2">Source <see cref="Vector4"/> on the right of the mul sign.</param>
/// <returns>Result of the vector multiplication.</returns>
/// <summary>
/// Multiplies the components of vector by a scalar.
/// </summary>
/// <param name="value">Source <see cref="Vector4"/> on the left of the mul sign.</param>
/// <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
/// <returns>Result of the vector multiplication with a scalar.</returns>
/// <summary>
/// Multiplies the components of vector by a scalar.
/// </summary>
/// <param name="scaleFactor">Scalar value on the left of the mul sign.</param>
/// <param name="value">Source <see cref="Vector4"/> on the right of the mul sign.</param>
/// <returns>Result of the vector multiplication with a scalar.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector4"/> by the components of another <see cref="Vector4"/>.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/> on the left of the div sign.</param>
/// <param name="value2">Divisor <see cref="Vector4"/> on the right of the div sign.</param>
/// <returns>The result of dividing the vectors.</returns>
/// <summary>
/// Divides the components of a <see cref="Vector4"/> by a scalar.
/// </summary>
/// <param name="value1">Source <see cref="Vector4"/> on the left of the div sign.</param>
/// <param name="divider">Divisor scalar on the right of the div sign.</param>
/// <returns>The result of dividing a vector by a scalar.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\AudioChannels.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents how many channels are used in the audio data.
/// </summary>
/// <summary>Single channel.</summary> 
/// <summary>Two channels.</summary> 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\AudioEmitter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a 3D audio emitter. Used to simulate 3D audio effects.
/// </summary>
/// <summary>Initializes a new AudioEmitter instance.</summary>
/// <summary>Gets or sets a scale applied to the Doppler effect between the AudioEmitter and an AudioListener.</summary>
/// <remarks>
/// <para>Defaults to 1.0</para>
/// <para>A value of 1.0 leaves the Doppler effect unmodified.</para>
/// </remarks>
/// <summary>Gets or sets the emitter's forward vector.</summary>
/// <remarks>
/// <para>Defaults to Vector3.Forward. (new Vector3(0, 0, -1))</para>
/// <para>Used with AudioListener.Velocity to calculate Doppler values.</para>
/// <para>The Forward and Up values must be orthonormal.</para>
/// </remarks>
/// <summary>Gets or sets the position of this emitter.</summary>
/// <summary>Gets or sets the emitter's Up vector.</summary>
/// <remarks>
/// <para>Defaults to Vector3.Up. (new Vector3(0, -1, 1)).</para>
/// <para>The Up and Forward vectors must be orthonormal.</para>
/// </remarks>
/// <summary>Gets or sets the emitter's velocity vector.</summary>
/// <remarks>
/// <para>Defaults to Vector3.Zero.</para>
/// <para>This value is only used when calculating Doppler values.</para>
/// </remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\AudioListener.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a 3D audio listener. Used when simulating 3D Audio.
/// </summary>
/// <summary>Gets or sets the listener's forward vector.</summary>
/// <remarks>
/// <para>Defaults to Vector3.Forward. (new Vector3(0, 0, -1))</para>
/// <para>Used with AudioListener.Velocity and AudioEmitter.Velocity to calculate Doppler values.</para>
/// <para>The Forward and Up vectors must be orthonormal.</para>
/// </remarks>
/// <summary>Gets or sets the listener's position.</summary>
/// <remarks>
/// Defaults to Vector3.Zero.
/// </remarks>
/// <summary>
/// Gets or sets the listener's up vector..
/// </summary>
/// <remarks>
/// <para>Defaults to Vector3.Up (New Vector3(0, -1, 0)).</para>
/// <para>Used with AudioListener.Velocity and AudioEmitter.Velocity to calculate Doppler values.</para>
/// <para>The values of the Forward and Up vectors must be orthonormal.</para>
/// </remarks>
/// <summary>Gets or sets the listener's velocity vector.</summary>
/// <remarks>
/// <para>Defaults to Vector3.Zero.</para>
/// <para>Scaled by DopplerScale to calculate the Doppler effect value applied to a Cue.</para>
/// <para>This value is only used to calculate Doppler values.</para>
/// </remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\AudioUtil.cs
/// <summary>
/// Takes WAV data and appends a header to it.
/// </summary>
//buffer should contain 16-bit PCM wave data
//chunk id
//chunk size
//RIFF type
//chunk id
//format header size
//format (PCM)
//byte rate
//chunk id
//data size
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\DynamicSoundEffectInstance.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A <see cref="SoundEffectInstance"/> for which the audio buffer is provided by the game at run time.
/// </summary>
/// <summary>
/// This value has no effect on DynamicSoundEffectInstance.
/// It may not be set.
/// </summary>
/// <summary>
/// Returns the number of audio buffers queued for playback.
/// </summary>
/// <summary>
/// The event that occurs when the number of queued audio buffers is less than or equal to 2.
/// </summary>
/// <remarks>
/// This event may occur when <see cref="Play()"/> is called or during playback when a buffer is completed.
/// </remarks>
/// <param name="sampleRate">Sample rate, in Hertz (Hz).</param>
/// <param name="channels">Number of channels (mono or stereo).</param>
// This instance is added to the pool so that its volume reflects master volume changes
// and it contributes to the playing instances limit, but the source/voice is not owned by the pool.
/// <summary>
/// Returns the duration of an audio buffer of the specified size, based on the settings of this instance.
/// </summary>
/// <param name="sizeInBytes">Size of the buffer, in bytes.</param>
/// <returns>The playback length of the buffer.</returns>
/// <summary>
/// Returns the size, in bytes, of a buffer of the specified duration, based on the settings of this instance.
/// </summary>
/// <param name="duration">The playback length of the buffer.</param>
/// <returns>The data size of the buffer, in bytes.</returns>
/// <summary>
/// Plays or resumes the DynamicSoundEffectInstance.
/// </summary>
// Ensure that the volume reflects master volume, which is done by the setter.
// Add the instance to the pool
/// <summary>
/// Pauses playback of the DynamicSoundEffectInstance.
/// </summary>
/// <summary>
/// Resumes playback of the DynamicSoundEffectInstance.
/// </summary>
// Add the instance to the pool
/// <summary>
/// Immediately stops playing the DynamicSoundEffectInstance.
/// </summary>
/// <remarks>
/// Calling this also releases all queued buffers.
/// </remarks>
/// <summary>
/// Stops playing the DynamicSoundEffectInstance.
/// If the <paramref name="immediate"/> parameter is false, this call has no effect.
/// </summary>
/// <remarks>
/// Calling this also releases all queued buffers.
/// </remarks>
/// <param name="immediate">When set to false, this call has no effect.</param>
/// <summary>
/// Queues an audio buffer for playback.
/// </summary>
/// <remarks>
/// The buffer length must conform to alignment requirements for the audio format.
/// </remarks>
/// <param name="buffer">The buffer containing PCM audio data.</param>
// Ensure that the buffer length matches alignment.
// The data must be 16-bit, so the length is a multiple of 2 (mono) or 4 (stereo).
/// <summary>
/// Queues an audio buffer for playback.
/// </summary>
/// <remarks>
/// The buffer length must conform to alignment requirements for the audio format.
/// </remarks>
/// <param name="buffer">The buffer containing PCM audio data.</param>
/// <param name="offset">The starting position of audio data.</param>
/// <param name="count">The amount of bytes to use.</param>
// Ensure that the buffer length and start position match alignment.
// Update the buffers
// Raise the event
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\DynamicSoundEffectInstanceManager.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Handles the buffer events of all DynamicSoundEffectInstance instances.
/// </summary>
/// <summary>
/// Updates buffer queues of the currently playing instances.
/// </summary>
/// <remarks>
/// XNA posts <see cref="DynamicSoundEffectInstance.BufferNeeded"/> events always on the main thread.
/// </remarks>
// The instance has been disposed.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\InstancePlayLimitException.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The exception thrown when the system attempts to play more SoundEffectInstances than allotted.
/// </summary>
/// <remarks>
/// Most platforms have a hard limit on how many sounds can be played simultaneously. This exception is thrown when that limit is exceeded.
/// </remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Microphone.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Microphone state. 
/// </summary>
/// <summary>
/// Provides microphones capture features. 
/// </summary>
/// <summary>
/// Returns the friendly name of the microphone.
/// </summary>
/// <summary>
/// Gets or sets the capture buffer duration. This value must be greater than 100 milliseconds, lower than 1000 milliseconds, and must be 10 milliseconds aligned (BufferDuration % 10 == 10).
/// </summary>
// always true on mobile, this can't be queried on any platform (it was most probably only set to true if the headset was plugged in an XInput controller)
/// <summary>
/// Determines if the microphone is a wired headset.
/// Note: XNA could know if a headset microphone was plugged in an Xbox 360 controller but MonoGame can't.
/// Hence, this is always true on mobile platforms, and always false otherwise.
/// </summary>
// XNA default is 44100, don't know if it supports any other rates
/// <summary>
/// Returns the sample rate of the captured audio.
/// Note: default value is 44100hz
/// </summary>
/// <summary>
/// Returns the state of the Microphone. 
/// </summary>
/// <summary>
/// Returns all compatible microphones.
/// </summary>
/// <summary>
/// Returns the default microphone.
/// </summary>
/// <summary>
/// Returns the duration based on the size of the buffer (assuming 16-bit PCM data).
/// </summary>
/// <param name="sizeInBytes">Size, in bytes</param>
/// <returns>TimeSpan of the duration.</returns>
// this should be 10ms aligned
// this assumes 16bit mono data
/// <summary>
/// Returns the size, in bytes, of the array required to hold the specified duration of 16-bit PCM data. 
/// </summary>
/// <param name="duration">TimeSpan of the duration of the sample.</param>
/// <returns>Size, in bytes, of the buffer.</returns>
// this should be 10ms aligned
// this assumes 16bit mono data
/// <summary>
/// Starts microphone capture.
/// </summary>
/// <summary>
/// Stops microphone capture.
/// </summary>
/// <summary>
/// Gets the latest available data from the microphone.
/// </summary>
/// <param name="buffer">Buffer, in bytes, of the captured data (16-bit PCM).</param>
/// <returns>The buffer size, in bytes, of the captured data.</returns>
/// <summary>
/// Gets the latest available data from the microphone.
/// </summary>
/// <param name="buffer">Buffer, in bytes, of the captured data (16-bit PCM).</param>
/// <param name="offset">Byte offset.</param>
/// <param name="count">Amount, in bytes.</param>
/// <returns>The buffer size, in bytes, of the captured data.</returns>
/// <summary>
/// Event fired when the audio data are available.
/// </summary>
// querying all running microphones for new samples available
// stopping all running microphones before shutting down audio devices
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\NoAudioHardwareException.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The exception thrown when no audio hardware is present, or driver issues are detected.
/// </summary>
/// <param name="msg">A message describing the error.</param>
/// <param name="msg">A message describing the error.</param>
/// <param name="innerException">The exception that is the underlying cause of the current exception. If not null, the current exception is raised in a try/catch block that handled the innerException.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\NoMicrophoneConnectedException.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The exception thrown when no audio hardware is present, or driver issues are detected.
/// </summary>
/// <param name="msg">A message describing the error.</param>
/// <param name="msg">A message describing the error.</param>
/// <param name="innerException">The exception that is the underlying cause of the current exception. If not null, the current exception is raised in a try/catch block that handled the innerException.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\SoundEffect.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>Represents a loaded sound resource.</summary>
/// <remarks>
/// <para>A SoundEffect represents the buffer used to hold audio data and metadata. SoundEffectInstances are used to play from SoundEffects. Multiple SoundEffectInstance objects can be created and played from the same SoundEffect object.</para>
/// <para>The only limit on the number of loaded SoundEffects is restricted by available memory. When a SoundEffect is disposed, all SoundEffectInstances created from it will become invalid.</para>
/// <para>SoundEffect.Play() can be used for 'fire and forget' sounds. If advanced playback controls like volume or pitch is required, use SoundEffect.CreateInstance().</para>
/// </remarks>
// Only used from SoundEffect.FromStream.
/*
// Only used from SoundEffectReader.
// Peek at the format... handle regular PCM data.
// Everything else is platform specific.
// Only used from XACT WaveBank.
// Handle the common case... the rest is platform specific.
/// <summary>
/// Initializes the sound system for SoundEffect support.
/// This method is automatically called when a SoundEffect is loaded, a DynamicSoundEffectInstance is created, or Microphone.All is queried.
/// You can however call this method manually (preferably in, or before the Game constructor) to catch any Exception that may occur during the sound system initialization (and act accordingly).
/// </summary>
/// <summary>
/// Create a sound effect.
/// </summary>
/// <param name="buffer">The buffer with the sound data.</param>
/// <param name="sampleRate">The sound data sample rate in hertz.</param>
/// <param name="channels">The number of channels in the sound data.</param>
/// <remarks>This only supports uncompressed 16bit PCM wav data.</remarks>
/// <summary>
/// Create a sound effect.
/// </summary>
/// <param name="buffer">The buffer with the sound data.</param>
/// <param name="offset">The offset to the start of the sound data in bytes.</param>
/// <param name="count">The length of the sound data in bytes.</param>
/// <param name="sampleRate">The sound data sample rate in hertz.</param>
/// <param name="channels">The number of channels in the sound data.</param>
/// <param name="loopStart">The position where the sound should begin looping in samples.</param>
/// <param name="loopLength">The duration of the sound data loop in samples.</param>
/// <remarks>This only supports uncompressed 16bit PCM wav data.</remarks>
/// <summary>
/// Releases unmanaged resources and performs other cleanup operations before the
/// <see cref="Microsoft.Xna.Framework.Audio.SoundEffect"/> is reclaimed by garbage collection.
/// </summary>
/// <summary>
/// Creates a new SoundEffectInstance for this SoundEffect.
/// </summary>
/// <returns>A new SoundEffectInstance for this SoundEffect.</returns>
/// <remarks>Creating a SoundEffectInstance before calling SoundEffectInstance.Play() allows you to access advanced playback features, such as volume, pitch, and 3D positioning.</remarks>
/// <summary>
/// Creates a new SoundEffect object based on the specified data stream.
/// This internally calls <see cref="FromStream"/>.
/// </summary>
/// <param name="path">The path to the audio file.</param>
/// <returns>The <see cref="SoundEffect"/> loaded from the given file.</returns>
/// <remarks>The stream must point to the head of a valid wave file in the RIFF bitstream format.  The formats supported are:
/// <list type="bullet">
/// <item>
/// <description>8-bit unsigned PCM</description>
/// <description>16-bit signed PCM</description>
/// <description>24-bit signed PCM</description>
/// <description>32-bit IEEE float PCM</description>
/// <description>MS-ADPCM 4-bit compressed</description>
/// <description>IMA/ADPCM (IMA4) 4-bit compressed</description>
/// </item>
/// </list>
/// </remarks>
/// <summary>
/// Creates a new SoundEffect object based on the specified data stream.
/// </summary>
/// <param name="stream">A stream containing the wave data.</param>
/// <returns>A new SoundEffect object.</returns>
/// <remarks>The stream must point to the head of a valid wave file in the RIFF bitstream format.  The formats supported are:
/// <list type="bullet">
/// <item>
/// <description>8-bit unsigned PCM</description>
/// <description>16-bit signed PCM</description>
/// <description>24-bit signed PCM</description>
/// <description>32-bit IEEE float PCM</description>
/// <description>MS-ADPCM 4-bit compressed</description>
/// <description>IMA/ADPCM (IMA4) 4-bit compressed</description>
/// </item>
/// </list>
/// </remarks>
/// <summary>
/// Returns the duration for 16-bit PCM audio.
/// </summary>
/// <param name="sizeInBytes">The length of the audio data in bytes.</param>
/// <param name="sampleRate">Sample rate, in Hertz (Hz). Must be between 8000 Hz and 48000 Hz</param>
/// <param name="channels">Number of channels in the audio data.</param>
/// <returns>The duration of the audio data.</returns>
// Reference
// http://tinyurl.com/hq9slfy
/// <summary>
/// Returns the data size in bytes for 16bit PCM audio.
/// </summary>
/// <param name="duration">The total duration of the audio data.</param>
/// <param name="sampleRate">Sample rate, in Hertz (Hz), of audio data. Must be between 8,000 and 48,000 Hz.</param>
/// <param name="channels">Number of channels in the audio data.</param>
/// <returns>The size in bytes of a single sample of audio data.</returns>
// Reference
// http://tinyurl.com/hq9slfy
/// <summary>Gets an internal SoundEffectInstance and plays it.</summary>
/// <returns>True if a SoundEffectInstance was successfully played, false if not.</returns>
/// <remarks>
/// <para>Play returns false if more SoundEffectInstances are currently playing then the platform allows.</para>
/// <para>To loop a sound or apply 3D effects, call SoundEffect.CreateInstance() and SoundEffectInstance.Play() instead.</para>
/// <para>SoundEffectInstances used by SoundEffect.Play() are pooled internally.</para>
/// </remarks>
/// <summary>Gets an internal SoundEffectInstance and plays it with the specified volume, pitch, and panning.</summary>
/// <returns>True if a SoundEffectInstance was successfully created and played, false if not.</returns>
/// <param name="volume">Volume, ranging from 0.0 (silence) to 1.0 (full volume). Volume during playback is scaled by SoundEffect.MasterVolume.</param>
/// <param name="pitch">Pitch adjustment, ranging from -1.0 (down an octave) to 0.0 (no change) to 1.0 (up an octave).</param>
/// <param name="pan">Panning, ranging from -1.0 (left speaker) to 0.0 (centered), 1.0 (right speaker).</param>
/// <remarks>
/// <para>Play returns false if more SoundEffectInstances are currently playing then the platform allows.</para>
/// <para>To apply looping or simulate 3D audio, call SoundEffect.CreateInstance() and SoundEffectInstance.Play() instead.</para>
/// <para>SoundEffectInstances used by SoundEffect.Play() are pooled internally.</para>
/// </remarks>
/// <summary>
/// Returns a sound effect instance from the pool or null if none are available.
/// </summary>
/// <summary>Gets the duration of the SoundEffect.</summary>
/// <summary>Gets or sets the asset name of the SoundEffect.</summary>
/// <summary>
/// Gets or sets the master volume scale applied to all SoundEffectInstances.
/// </summary>
/// <remarks>
/// <para>Each SoundEffectInstance has its own Volume property that is independent to SoundEffect.MasterVolume. During playback SoundEffectInstance.Volume is multiplied by SoundEffect.MasterVolume.</para>
/// <para>This property is used to adjust the volume on all current and newly created SoundEffectInstances. The volume of an individual SoundEffectInstance can be adjusted on its own.</para>
/// </remarks>
/// <summary>
/// Gets or sets the scale of distance calculations.
/// </summary>
/// <remarks> 
/// <para>DistanceScale defaults to 1.0 and must be greater than 0.0.</para>
/// <para>Higher values reduce the rate of falloff between the sound and listener.</para>
/// </remarks>
/// <summary>
/// Gets or sets the scale of Doppler calculations applied to sounds.
/// </summary>
/// <remarks>
/// <para>DopplerScale defaults to 1.0 and must be greater or equal to 0.0</para>
/// <para>Affects the relative velocity of emitters and listeners.</para>
/// <para>Higher values more dramatically shift the pitch for the given relative velocity of the emitter and listener.</para>
/// </remarks>
// As per documenation it does not look like the value can be less than 0
//   although the documentation does not say it throws an error we will anyway
//   just so it is like the DistanceScale
/// <summary>Returns the speed of sound used when calculating the Doppler effect..</summary>
/// <remarks>
/// <para>Defaults to 343.5. Value is measured in meters per second.</para>
/// <para>Has no effect on distance attenuation.</para>
/// </remarks>
/// <summary>Indicates whether the object is disposed.</summary>
/// <summary>Releases the resources held by this <see cref="Microsoft.Xna.Framework.Audio.SoundEffect"/>.</summary>
/// <summary>
/// Releases the resources held by this <see cref="Microsoft.Xna.Framework.Audio.SoundEffect"/>.
/// </summary>
/// <param name="disposing">If set to <c>true</c>, Dispose was called explicitly.</param>
/// <remarks>If the disposing parameter is true, the Dispose method was called explicitly. This
/// means that managed objects referenced by this instance should be disposed or released as
/// required.  If the disposing parameter is false, Dispose was called by the finalizer and
/// no managed objects should be touched because we do not know if they are still valid or
/// not at that time.  Unmanaged resources should always be released.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\SoundEffectInstance.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>Represents a single instance of a playing, paused, or stopped sound.</summary>
/// <remarks>
/// <para>SoundEffectInstances are created through SoundEffect.CreateInstance() and used internally by SoundEffect.Play()</para>
/// </remarks>
/// <summary>Enables or Disables whether the SoundEffectInstance should repeat after playback.</summary>
/// <remarks>This value has no effect on an already playing sound.</remarks>
/// <summary>Gets or sets the pan, or speaker balance..</summary>
/// <value>Pan value ranging from -1.0 (left speaker) to 0.0 (centered), 1.0 (right speaker). Values outside of this range will throw an exception.</value>
/// <summary>Gets or sets the pitch adjustment.</summary>
/// <value>Pitch adjustment, ranging from -1.0 (down an octave) to 0.0 (no change) to 1.0 (up an octave). Values outside of this range will throw an Exception.</value>
// XAct sounds effects don't have pitch limits
/// <summary>Gets or sets the volume of the SoundEffectInstance.</summary>
/// <value>Volume, ranging from 0.0 (silence) to 1.0 (full volume). Volume during playback is scaled by SoundEffect.MasterVolume.</value>
/// <remarks>
/// This is the volume relative to SoundEffect.MasterVolume. Before playback, this Volume property is multiplied by SoundEffect.MasterVolume when determining the final mix volume.
/// </remarks>
// XAct sound effects don't have volume limits.
// XAct sound effects are not tied to the SoundEffect master volume.
/// <summary>Gets the SoundEffectInstance's current playback state.</summary>
/// <summary>Indicates whether the object is disposed.</summary>
/// <summary>
/// Releases unmanaged resources and performs other cleanup operations before the
/// <see cref="Microsoft.Xna.Framework.Audio.SoundEffectInstance"/> is reclaimed by garbage collection.
/// </summary>
/// <summary>Applies 3D positioning to the SoundEffectInstance using a single listener.</summary>
/// <param name="listener">Data about the listener.</param>
/// <param name="emitter">Data about the source of emission.</param>
/// <summary>Applies 3D positioning to the SoundEffectInstance using multiple listeners.</summary>
/// <param name="listeners">Data about each listener.</param>
/// <param name="emitter">Data about the source of emission.</param>
/// <summary>Pauses playback of a SoundEffectInstance.</summary>
/// <remarks>Paused instances can be resumed with SoundEffectInstance.Play() or SoundEffectInstance.Resume().</remarks>
/// <summary>Plays or resumes a SoundEffectInstance.</summary>
/// <remarks>Throws an exception if more sounds are playing than the platform allows.</remarks>
// We don't need to check if we're at the instance play limit
// if we're resuming from a paused state.
// For non-XAct sounds we need to be sure the latest
// master volume level is applied before playback.
/// <summary>Resumes playback for a SoundEffectInstance.</summary>
/// <remarks>Only has effect on a SoundEffectInstance in a paused state.</remarks>
/// <summary>Immediately stops playing a SoundEffectInstance.</summary>
/// <summary>Stops playing a SoundEffectInstance, either immediately or as authored.</summary>
/// <param name="immediate">Determined whether the sound stops immediately, or after playing its release phase and/or transitions.</param>
/// <remarks>Stopping a sound with the immediate argument set to false will allow it to play any release phases, such as fade, before coming to a stop.</remarks>
/// <summary>Releases the resources held by this <see cref="Microsoft.Xna.Framework.Audio.SoundEffectInstance"/>.</summary>
/// <summary>
/// Releases the resources held by this <see cref="Microsoft.Xna.Framework.Audio.SoundEffectInstance"/>.
/// </summary>
/// <param name="disposing">If set to <c>true</c>, Dispose was called explicitly.</param>
/// <remarks>If the disposing parameter is true, the Dispose method was called explicitly. This
/// means that managed objects referenced by this instance should be disposed or released as
/// required.  If the disposing parameter is false, Dispose was called by the finalizer and
/// no managed objects should be touched because we do not know if they are still valid or
/// not at that time.  Unmanaged resources should always be released.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\SoundEffectInstancePool.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Reduce garbage generation by allocating enough capacity for
// the maximum playing instances or at least some reasonable value.
/// <summary>
/// Gets a value indicating whether the platform has capacity for more sounds to be played at this time.
/// </summary>
/// <value><c>true</c> if more sounds can be played; otherwise, <c>false</c>.</value>
/// <summary>
/// Add the specified instance to the pool if it is a pooled instance and removes it from the
/// list of playing instances.
/// </summary>
/// <param name="inst">The SoundEffectInstance</param>
// lock(_locker)
/// <summary>
/// Adds the SoundEffectInstance to the list of playing instances.
/// </summary>
/// <param name="inst">The SoundEffectInstance to add to the playing list.</param>
/// <summary>
/// Returns a pooled SoundEffectInstance if one is available, or allocates a new
/// SoundEffectInstance if the pool is empty.
/// </summary>
/// <returns>The SoundEffectInstance.</returns>
// Grab the item at the end of the list so the remove doesn't copy all
// the list items down one slot.
// Reset used instance to the "default" state.
// lock (_locker)
/// <summary>
/// Iterates the list of playing instances, returning them to the pool if they
/// have stopped playing.
/// </summary>
// Cleanup instances which have finished playing.                    
// Don't consume XACT instances... XACT will
// clear this flag when it is done with the wave.
// force stopping it to free its AL source
// lock (_locker)
/// <summary>
/// Iterates the list of playing instances, stop them and return them to the pool if they are instances of the given SoundEffect.
/// </summary>
/// <param name="effect">The SoundEffect</param>
// stop immediatly
// lock (_locker)
// XAct sounds are not controlled by the SoundEffect
// master volume, so we can skip them completely.
// Re-applying the volume to itself will update
// the sound with the current master volume.
// lock (_locker)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\SoundState.cs
/*
/// <summary>Described the playback state of a SoundEffectInstance.</summary>
/// <summary>The SoundEffectInstance is currently playing.</summary>
/// <summary>The SoundEffectInstance is currently paused.</summary>
/// <summary>The SoundEffectInstance is currently stopped.</summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\AudioCategory.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides functionality for manipulating multiple sounds at a time.
/// </summary>
// This is a bit gross, but we use an array here
// instead of a field since AudioCategory is a struct
// This allows us to save _volume when the user
// holds onto a reference of AudioCategory, or when a cue
// is created/loaded after the volume's already been set.
//unkn
/// <summary>
/// Gets the category's friendly name.
/// </summary>
/// <summary>
/// Pauses all associated sounds.
/// </summary>
/// <summary>
/// Resumes all associated paused sounds.
/// </summary>
/// <summary>
/// Stops all associated sounds.
/// </summary>
// Updating all the sounds in a category can be
// very expensive... so avoid it if we can.
/// <summary>
/// Determines whether two AudioCategory instances are equal.
/// </summary>
/// <param name="first">First AudioCategory instance to compare.</param>
/// <param name="second">Second AudioCategory instance to compare.</param>
/// <returns>true if the objects are equal or false if they aren't.</returns>
/// <summary>
/// Determines whether two AudioCategory instances are not equal.
/// </summary>
/// <param name="first">First AudioCategory instance to compare.</param>
/// <param name="second">Second AudioCategory instance to compare.</param>
/// <returns>true if the objects are not equal or false if they are.</returns>
/// <summary>
/// Determines whether two AudioCategory instances are equal.
/// </summary>
/// <param name="other">AudioCategory to compare with this instance.</param>
/// <returns>true if the objects are equal or false if they aren't</returns>
/// <summary>
/// Determines whether two AudioCategory instances are equal.
/// </summary>
/// <param name="obj">Object to compare with this instance.</param>
/// <returns>true if the objects are equal or false if they aren't.</returns>
/// <summary>
/// Gets the hash code for this instance.
/// </summary>
/// <returns>Hash code for this object.</returns>
/// <summary>
/// Returns the name of this AudioCategory
/// </summary>
/// <returns>Friendly name of the AudioCategory</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\AudioEngine.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Class used to create and manipulate code audio objects.
/// </summary> 
/// <summary>
/// The current content version.
/// </summary>
/// <param name="settingsFile">Path to a XACT settings file.</param>
// Read the asset into memory in one go. This results in a ~50% reduction
// in load times on Android due to slow Android asset streams.
/// <param name="settingsFile">Path to a XACT settings file.</param>
/// <param name="lookAheadTime">Determines how many milliseconds the engine will look ahead when determing when to transition to another sound.</param>
/// <param name="rendererId">A string that specifies the audio renderer to use.</param>
/// <remarks>For the best results, use a lookAheadTime of 250 milliseconds or greater.</remarks>
// Read the xact settings file
// Credits to alisci01 for initial format documentation
//'XGFS'
// toolVersion
// crc
// lastModifiedLow
// lastModifiedHigh
//unkn, 0x03. Platform?
//unkn, 0x16
//unkn, 0x16
//unknown, leads to a short with value of 1?
// catNameIndexOffset
//unknown, two shorts of values 2 and 3?
// varNameIndexOffset
// dspPresetsOffset
// If the parameter is greater than the max then this is a DSP
// parameter which is for reverb.
// Note:  It seemed like MS designed this to support multiple
// DSP effects, but in practice XACT only has one... Microsoft Reverb.
//
// So because of this we know exactly how many presets and 
// parameters we should have.
/// <summary>
/// Performs periodic work required by the audio engine.
/// </summary>
/// <remarks>Must be called at least once per frame.</remarks>
// The only global curves we can process seem to be 
// specifically for the reverb DSP effect.
/// <summary>Returns an audio category by name.</summary>
/// <param name="name">Friendly name of the category to get.</param>
/// <returns>The AudioCategory with a matching name. Throws an exception if not found.</returns>
/// <summary>Gets the value of a global variable.</summary>
/// <param name="name">Friendly name of the variable.</param>
/// <returns>float value of the queried variable.</returns>
/// <remarks>A global variable has global scope. It can be accessed by all code within a project.</remarks>
/// <summary>Sets the value of a global variable.</summary>
/// <param name="name">Friendly name of the variable.</param>
/// <param name="value">Value of the global variable.</param>
/// <summary>
/// This event is triggered when the AudioEngine is disposed.
/// </summary>
/// <summary>
/// Is true if the AudioEngine has been disposed.
/// </summary>
/// <summary>
/// Disposes the AudioEngine.
/// </summary>
// TODO: Should we be forcing any active
// audio cues to stop here?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\AudioStopOptions.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>Controls how Cue objects should cease playback when told to stop.</summary>
/// <summary>Stop normally, playing any pending release phases or transitions.</summary>
/// <summary>Immediately stops the cue, ignoring any pending release phases or transitions.</summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\ClipEvent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\CrossfadeType.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\Cue.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>Manages the playback of a sound or set of sounds.</summary>
/// <remarks>
/// <para>Cues are comprised of one or more sounds.</para>
/// <para>Cues also define specific properties such as pitch or volume.</para>
/// <para>Cues are referenced through SoundBank objects.</para>
/// </remarks>
/// <summary>Indicates whether or not the cue is currently paused.</summary>
/// <remarks>IsPlaying and IsPaused both return true if a cue is paused while playing.</remarks>
/// <summary>Indicates whether or not the cue is currently playing.</summary>
/// <remarks>IsPlaying and IsPaused both return true if a cue is paused while playing.</remarks>
/// <summary>Indicates whether or not the cue is currently stopped.</summary>
// TODO: Implement me!
/// <summary>Gets the friendly name of the cue.</summary>
/// <remarks>The friendly name is a value set from the designer.</remarks>
/// <summary>Pauses playback.</summary>
/// <summary>Requests playback of a prepared or preparing Cue.</summary>
/// <remarks>Calling Play when the Cue already is playing can result in an InvalidOperationException.</remarks>
//TODO: Probabilities
/// <summary>Resumes playback of a paused Cue.</summary>
/// <summary>Stops playback of a Cue.</summary>
/// <param name="options">Specifies if the sound should play any pending release phases or transitions before stopping.</param>
// Do a simple linear search... which is fast
// for as little variables as most cues have.
/// <summary>
/// Sets the value of a cue-instance variable based on its friendly name.
/// </summary>
/// <param name="name">Friendly name of the variable to set.</param>
/// <param name="value">Value to assign to the variable.</param>
/// <remarks>The friendly name is a value set from the designer.</remarks>
/// <summary>Gets a cue-instance variable value based on its friendly name.</summary>
/// <param name="name">Friendly name of the variable.</param>
/// <returns>Value of the variable.</returns>
/// <remarks>
/// <para>Cue-instance variables are useful when multiple instantiations of a single cue (and its associated sounds) are required (for example, a "car" cue where there may be more than one car at any given time). While a global variable allows multiple audio elements to be controlled in unison, a cue instance variable grants discrete control of each instance of a cue, even for each copy of the same cue.</para>
/// <para>The friendly name is a value set from the designer.</para>
/// </remarks>
/// <summary>Updates the simulated 3D Audio settings calculated between an AudioEmitter and AudioListener.</summary>
/// <param name="listener">The listener to calculate.</param>
/// <param name="emitter">The emitter to calculate.</param>
/// <remarks>
/// <para>This must be called before Play().</para>
/// <para>Calling this method automatically converts the sound to monoaural and sets the speaker mix for any sound played by this cue to a value calculated with the listener's and emitter's positions. Any stereo information in the sound will be discarded.</para>
/// </remarks>
// Set the distance for falloff.
// Calculate the orientation.
// Calculate doppler effect.
// Evaluate the runtime parameter controls.
// Some curves are driven by global variables and others by cue instance variables.
// Process the final curve value based on the parameter type it is.
/// <summary>
/// This event is triggered when the Cue is disposed.
/// </summary>
/// <summary>
/// Is true if the Cue has been disposed.
/// </summary>
/// <summary>
/// Disposes the Cue.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\DspParameter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// This is 1 if the type is byte sized and 0 for 
// floats... not sure if we should use this info.
// The value and the min/max range for limiting the 
// results from the RPC curve when animated.
// Looks to always be zero...  maybe some padding
// for future expansion that never occured?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\FilterMode.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\MaxInstanceBehavior.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\MiniFormatTag.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// We allow XMA to be reused for a platform specific format.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\PlayWaveEvent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Do we need to pick a new wav to play first?
// TODO: Need some sort of deck implementation.
// We couldn't create a sound effect instance, most likely
// because we've reached the sound pool limits.
// Do all the randoms before we play.
// This is a shortcut for infinite looping of a single track.
// Update all the wave states then play.
// The RPC filter overrides the randomized track filter.
// TODO
// If we're not looping or reached our loop 
// limit then we can stop.
// Increment the loop count if it isn't infinite.
// Play the next track.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\ReverbSettings.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// ReflectionsDelayMs
// ReverbDelayMs
// PositionLeft
// PositionRight
// PositionLeftMatrix
// PositionRightMatrix
// EarlyDiffusion
// LateDiffusion
// LowEqGain
// LowEqCutoff
// HighEqGain
// HighEqCutoff
// RearDelayMs
// RoomFilterFrequencyHz
// RoomFilterMainDb
// RoomFilterHighFrequencyDb
// ReflectionsGainDb
// ReverbGainDb
// DecayTimeSec
// DensityPct
// RoomSizeFeet
// WetDryMixPct
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\RpcCurve.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: We need to implement the different RpcPointTypes.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\RpcParameter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\RpcPoint.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\RpcPointType.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\RpcVariable.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\SoundBank.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>Represents a collection of Cues.</summary>
/// <summary>
/// Is true if the SoundBank has any live Cues in use.
/// </summary>
/// <param name="audioEngine">AudioEngine that will be associated with this sound bank.</param>
/// <param name="fileName">Path to a .xsb SoundBank file.</param>
// Thanks to Liandril for "xactxtract" for some of the offsets.
//"SDBK"
// toolVersion
// crc, TODO: Verify crc (FCS16)
// lastModifiedLow
// lastModifiedHigh
// platform ???
//unkn
// numTotalCues
// numSounds
//unkn
//unkn
//unkn
// variationTablesOffset
//unkn
// cueNameHashTableOffset
// cueNameHashValsOffset
// soundsOffset
//name = System.Text.Encoding.UTF8.GetString(soundbankreader.ReadBytes(64),0,64).Replace("\0","");
//parse wave bank name table
//parse cue name table
// Simple cues
// flags
// Complex cues
//unkn
// transitionTableOffset
//parse variation table
//Wave
// weightMin
// weightMax
// weightMin
// weightMax
// weightMin
// weightMax
// flags
//CompactWave
// Instance limiting
//instanceLimit
//fadeInSec, divide by 1000.0f
//fadeOutSec, divide by 1000.0f
//instanceFlags
// If the wave bank has not been resolved then do so now.
/// <summary>
/// Returns a pooled Cue object.
/// </summary>
/// <param name="name">Friendly name of the cue to get.</param>
/// <returns>a unique Cue object from a pool.</returns>
/// <remarks>
/// <para>Cue instances are unique, even when sharing the same name. This allows multiple instances to simultaneously play.</para>
/// </remarks>
/// <summary>
/// Plays a cue.
/// </summary>
/// <param name="name">Name of the cue to play.</param>
/// <summary>
/// Plays a cue with static 3D positional information.
/// </summary>
/// <remarks>
/// Commonly used for short lived effects.  To dynamically change the 3D 
/// positional information on a cue over time use <see cref="GetCue"/> and <see cref="Cue.Apply3D"/>.</remarks>
/// <param name="name">The name of the cue to play.</param>
/// <param name="listener">The listener state.</param>
/// <param name="emitter">The cue emitter state.</param>
/// <summary>
/// This event is triggered when the SoundBank is disposed.
/// </summary>
/// <summary>
/// Is true if the SoundBank has been disposed.
/// </summary>
/// <summary>
/// Disposes the SoundBank.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\VolumeEvent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\WaveBank.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>Represents a collection of wave files.</summary>
// Bank flags
// Number of entries in the bank
// Bank friendly name
// Size of each entry meta-data element, in bytes
// Size of each entry name element, in bytes
// Entry alignment, in bytes
// Format data for compact bank
// Build timestamp
// Bank includes entry names
// Bank uses compact format
// Bank is disabled for audition sync
// Bank includes seek tables.
/// <summary>
/// </summary>
/// <summary>
/// </summary>
/// <param name="audioEngine">Instance of the AudioEngine to associate this wave bank with.</param>
/// <param name="nonStreamingWaveBankFilename">Path to the .xwb file to load.</param>
/// <remarks>This constructor immediately loads all wave data into memory at once.</remarks>
// Is this a streaming wavebank?
//XWB PARSING
//Adapted from MonoXNA
//Originally adaped from Luigi Auriemma's unxwb
//if (wavebankheader.Version == 1) goto WAVEBANKDATA;
// skip HeaderVersion
//WAVEBANKDATA:
//wavebank_offset = (int)ftell(fd) - file_offset;
//METADATASEGMENT
// compact_format
// The compact format requires us to load stuff differently.
// Load the sound data offset table from disk.
// Now figure out the sound data lengths.
// The next and current offsets used to calculate the length.
// Unused
// TODO: What is this doing?
// If this isn't a streaming wavebank then load all the sounds now.
// Read the data.
// Decode the format information.
// Call the special constuctor on SoundEffect to sort it out.
// I'm not 100% sure if the following is correct
// version 1:
// 1 00000000 000101011000100010 0 001 0
// | |         |                 | |   |
// | |         |                 | |   wFormatTag
// | |         |                 | nChannels
// | |         |                 ???
// | |         nSamplesPerSec
// | wBlockAlign
// wBitsPerSample
//bits = (format >> (1 + 3 + 1 + 18 + 8)) & ((1 << 1) - 1);
// I'm not 100% sure if the following is correct
/*} else if(wavebankheader.dwVersion == 23) { // I'm not 100% sure if the following is correct
// 1000000000 001011101110000000 001 1
// | |        |                  |   |
// | |        |                  |   ???
// | |        |                  nChannels?
// | |        nSamplesPerSec
// | ???
// !!!UNKNOWN FORMAT!!!
//codec = -1;
//chans = (wavebankentry.Format >>  1) & ((1 <<  3) - 1);
//rate  = (wavebankentry.Format >>  4) & ((1 << 18) - 1);
//bits  = (wavebankentry.Format >> 31) & ((1 <<  1) - 1);
// 0 00000000 000111110100000000 010 01
// | |        |                  |   |
// | |        |                  |   wFormatTag
// | |        |                  nChannels
// | |        nSamplesPerSec
// | wBlockAlign
// wBitsPerSample
//bits = (info.Format >> (2 + 3 + 18 + 8)) & ((1 << 1) - 1);
/// <param name="audioEngine">Instance of the AudioEngine to associate this wave bank with.</param>
/// <param name="streamingWaveBankFilename">Path to the .xwb to stream from.</param>
/// <param name="offset">DVD sector-aligned offset within the wave bank data file.</param>
/// <param name="packetsize">Stream packet size, in sectors, to use for each stream. The minimum value is 2.</param>
/// <remarks>
/// <para>This constructor streams wave data as needed.</para>
/// <para>Note that packetsize is in sectors, which is 2048 bytes.</para>
/// <para>AudioEngine.Update() must be called at least once before using data from a streaming wave bank.</para>
/// </remarks>
/// <summary>
/// This event is triggered when the WaveBank is disposed.
/// </summary>
/// <summary>
/// Is true if the WaveBank has been disposed.
/// </summary>
/// <summary>
/// Disposes the WaveBank.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\WaveBank.Default.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\XactClip.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Read the filter info.
// TODO: eventInfo still has 11 bits that are unknown!
// Stop Event
// Unknown!
// Event flags
// Unknown!
// Event flags
// The number of tracks for the variations.
// Not sure what most of this is.
// The variation playlist type seems to be 
// stored in the bottom 4bits only.
// Unknown!
// Read in the variation playlist.
// Unknown!
// Event flags
// Pitch variation range
// Volume variation range
// Filter variation
// Unknown!
// Enable pitch variation
// Enable volume variation
// Enable filter variation
// Unknown!
// Event flags
// Pitch variation range
// Volume variation range
// Filter variation range
// Unknown!
// TODO: Still has unknown bits!
// Enable pitch variation
// Enable volume variation
// Enable filter variation
// The number of tracks for the variations.
// Not sure what most of this is.
// The variation playlist type seems to be 
// stored in the bottom 4bits only.
// Unknown!
// Read in the variation playlist.
// Pitch Event
// Unknown!
// Event flags
// The replacement or additive volume.
// Unknown!
// Volume Repeat Event
// Marker Event
// Play the next event.
// Update all the active events.
// Update the state.
/// <summary>
/// Set the combined volume scale from the parent objects.
/// </summary>
/// <param name="volume">The volume scale.</param>
/// <summary>
/// Set the volume for the clip.
/// </summary>
/// <param name="volume">The volume level.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\XactHelpers.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//lazy 4-param fitting:
//0xff 6.0
//0xca 2.0
//0xbf 1.0
//0xb4 0.0
//0x8f -4.0
//0x5a -12.0
//0x14 -38.0
//0x00 -96.0
//lazy 4-param fitting:
//0xff 6.0
//0xca 2.0
//0xbf 1.0
//0xb4 0.0
//0x8f -4.0
//0x5a -12.0
//0x14 -38.0
//0x00 -96.0
// Convert from decibles to linear volume.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Audio\Xact\XactSound.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//priority
// filter stuff?
// This doesn't seem to be used... might have been there
// to allow for some future file format expansion.
// Just in case seek to the right spot.
// The file format for this seems to follow the pattern for 
// the RPC curves above, but in this case XACT only supports
// a single effect...  Microsoft Reverb... so just set it.
// TODO:
// We couldn't create a sound effect instance, most likely
// because we've reached the sound pool limits.
// The different volumes modulate each other.
// All clips must be stopped for the sound to be stopped.
// We null the wave when it it stopped.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentExtensions.cs
// Sometimes, overridden properties of abstract classes can show up even with 
// BindingFlags.DeclaredOnly is passed to GetProperties. Make sure that
// all properties in this list are defined in this class by comparing
// its get method with that of it's base class. If they're the same
// Then it's an overridden property.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentLoadException.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentManager.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Windows (XNA & DirectX)
// Xbox360 (XNA)
// WindowsPhone7.0 (XNA)
// iOS
// Android
// DesktopGL
// MacOSX
// WindowsStoreApp
// NativeClient
// WindowsPhone8
// RaspberryPi
// PlayStation4
// PSVita
// XboxOne
// Nintendo Switch
// Google Stadia
// WebAssembly and Bridge.NET
// NOTE: There are additional idenfiers for consoles that 
// are not defined in this repository.  Be sure to ask the
// console port maintainers to ensure no collisions occur.
// Legacy identifiers... these could be reused in the
// future if we feel enough time has passed.
// PlayStationMobile
// Windows (OpenGL)
// Linux
// Allow any per-platform static initialization to occur.
// Check if the list contains this content manager already. Also take
// the opportunity to prune the list of any finalized content managers.
// Check if the list contains this content manager and remove it. Also
// take the opportunity to prune the list of any finalized content managers.
// Reload the graphic assets of each content manager. Also take the
// opportunity to prune the list of any finalized content managers.
// Use C# destructor syntax for finalization code.
// This destructor will run only if the Dispose method
// does not get called.
// It gives your base class the opportunity to finalize.
// Do not provide destructors in types derived from this class.
// Do not re-create Dispose clean-up code here.
// Calling Dispose(false) is optimal in terms of
// readability and maintainability.
// Tell the garbage collector not to call the finalizer
// since all the cleanup will already be done.
// Once disposed, content manager wont be used again
// If disposing is true, it was called explicitly and we should dispose managed objects.
// If disposing is false, it was called by the finalizer and managed objects should not be disposed.
// eg. "en-US"
// eg. "en"
// Look first for a specialized language-country version of the asset,
// then if that fails, loop back around to see if we can find one that
// specifies just the language without the country part.
// If we didn't find any localized asset, fall back to the default name.
// On some platforms, name and slash direction matter.
// We store the asset by a /-seperating key rather than how the
// path to the file was passed to us to avoid
// loading "content/asset1.xnb" and "content\\ASSET1.xnb" as if they were two 
// different files. This matches stock XNA behavior.
// The dictionary will ignore case differences
// Check for a previously loaded asset first
// Load the asset.
// This is primarily for editor support. 
// Setting the RootDirectory to an absolute path is useful in editor
// situations, but TitleContainer can ONLY be passed relative paths.                
// Read the asset into memory in one go. This results in a ~50% reduction
// in load times on Android due to slow Android asset streams.
// Try to load as XNB file
// The first 4 bytes should be the "XNB" header. i use that to detect an invalid file
// The next int32 is the length of the XNB file
// Decompress the xnb
// Avoid recording disposable objects twice. ReloadAsset will try to record the disposables again.
// We don't know which asset recorded which disposable so just guard against storing multiple of the same instance.
/// <summary>
/// Virtual property to allow a derived ContentManager to have it's assets reloaded
/// </summary>
// This never executes as asset.Key is never null.  This just forces the 
// linker to include the ReloadAsset function when AOT compiled.
// Look for disposable assets.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReader.cs
// MIT License - Copyright (C) The Mono.Xna Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Read primary object
// Read shared resources
// Read primary object
// Read shared resources
// Fixup shared resources by calling each registered action
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaderExtensions.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the GraphicsDevice from the ContentManager.ServiceProvider.
/// </summary>
/// <returns>The <see cref="GraphicsDevice"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentSerializerAttribute.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Creates an instance of the attribute.
/// </summary>
/// <summary>
/// Returns the overriden XML element name or the default "Item".
/// </summary>
// Return the defaul if unset.
/// <summary>
/// Returns true if the default CollectionItemName value was overridden.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentSerializerCollectionItemNameAttribute.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// This is used to specify the XML element name to use for each item in a collection.
/// </summary>
/// <summary>
/// Creates an instance of the attribute.
/// </summary>
/// <param name="collectionItemName">The XML element name to use for each item in the collection.</param>
/// <summary>
/// The XML element name to use for each item in the collection.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentSerializerIgnoreAttribute.cs
// #region License
// /*
/*
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
// #endregion License
//
// Author: Kenneth James Pouncey
//
// http://msdn.microsoft.com/en-us/library/bb195465.aspx
// The class definition on msdn site shows: [AttributeUsageAttribute(384)]
// The following code var ff = (AttributeTargets)384; shows that ff is Field | Property
//  so that is what we use.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentSerializerRuntimeTypeAttribute.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// This is used to specify the type to use when deserializing this object at runtime.
/// </summary>
/// <summary>
/// Creates an instance of the attribute.
/// </summary>
/// <param name="runtimeType">The name of the type to use at runtime.</param>
/// <summary>
/// The name of the type to use at runtime.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentSerializerTypeVersionAttribute.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// This is used to specify the version when deserializing this object at runtime.
/// </summary>
/// <summary>
/// Creates an instance of the attribute.
/// </summary>
/// <param name="typeVersion">The version passed to the type at runtime.</param>
/// <summary>
/// The version passed to the type at runtime.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentTypeReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// The default version (unless overridden) is zero
// Do nothing. Are we supposed to add ourselves to the manager?
// Nothing
// as per the documentation http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.content.contenttypereader.read.aspx
// existingInstance
// The object receiving the data, or null if a new instance of the object should be created.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentTypeReaderManager.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Trick to prevent the linker removing the code, but not actually execute the code
// Trick to prevent the linker removing the code, but not actually execute the code
// Dummy variables required for it to work on iDevices ** DO NOT DELETE ** 
// This forces the classes not to be optimized out when deploying to iDevices
// At the moment the Video class doesn't exist
// on all platforms... Allow it to compile anyway.
// The first content byte i read tells me the number of content readers in this XNB file
// Lock until we're done allocating and initializing any new
// content type readers...  this ensures we can load content
// from multiple threads and still cache the readers.
// For each reader in the file, we read out the length of the string which contains the type of the reader,
// then we read out the string. Finally we instantiate an instance of that reader using reflection
// This string tells us what reader we need to decode the following data
// string readerTypeString = reader.ReadString();
//System.Diagnostics.Debug.WriteLine(originalReaderTypeString);
// Need to resolve namespace differences
// If you are getting here, the Mono runtime is most likely not able to JIT the type.
// In particular, MonoTouch needs help instantiating types that are only defined in strings in Xnb files. 
// I think the next 4 bytes refer to the "Version" of the type reader,
// although it always seems to be zero
// Initialize any new readers.
// lock (_locker)
/// <summary>
/// Removes Version, Culture and PublicKeyToken from a type string.
/// </summary>
/// <remarks>
/// Supports multiple generic types (e.g. Dictionary&lt;TKey,TValue&gt;) and nested generic types (e.g. List&lt;List&lt;int&gt;&gt;).
/// </remarks> 
/// <param name="type">
/// A <see cref="System.String"/>
/// </param>
/// <returns>
/// A <see cref="System.String"/>
/// </returns>
//Needed to support nested types
//Handle non generic types
// TODO: For WinRT this is most likely broken!
// Static map of type names to creation functions. Required as iOS requires all types at compile time
/// <summary>
/// Adds the type creator.
/// </summary>
/// <param name='typeString'>
/// Type string.
/// </param>
/// <param name='createFunction'>
/// Create function.
/// </param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\LzxDecoder.cs
/* This file was derived from libmspack
/* GNU LESSER GENERAL PUBLIC LICENSE version 2.1
/* 
//www.opensource.org/licenses/ms-pl.html>. 
/*
//http://www.cabextract.org.uk/
// setup proper exception
// let's initialise our state
/* initialize static tables */
/* calculate required position slots */
// yo dawg i herd u liek arrays so we put arrays in ur arrays so u can array while u array
/* initialise tables to 0 (because deltas will be applied to them) */
/* read header if necessary */
// read the filesize
/* main decoding loop */
/* last block finished, new block expected */
// TODO may screw something up here
/* realign bitstream to word */
/* rest of aligned header is same as verbatim */
/* because we can't assume otherwise */
/* get up to 16 pad bits into the buffer */
/* and align the bitstream! */
// TODO throw proper exception
/* buffer exhaustion check */
/* it's possible to have a file where the next run is less than
//Debug.WriteLine("WTF");
//TODO throw proper exception
/* apply 2^x-1 mask */
/* runs can't straddle the window wraparound */
//TODO throw proper exception
/* literal: 0 to NUM_CHARS-1 */
/* match: NUM_CHARS + ((slot<<3) | length_header (3 bits)) */
/* not repeated offset */
/* update repeated offset LRU queue */
/* match_offset == 2 */
/* copy any wrapped around source data */
/* no wrap */
/* copy match data - no worries about destination wraps */
/* literal 0 to NUM_CHARS-1 */
/* match: NUM_CHARS + ((slot<<3) | length_header (3 bits)) */
/* not repeated offset */
/* verbatim and aligned bits */
/* aligned bits only */
/* extra==1, extra==2 */
/* verbatim bits only */
/* extra == 0 */
/* ??? */
/* update repeated offset LRU queue */
/* match_offset == 2 */
/* copy any wrapped around source data */
/* no wrap */
/* copy match data - no worries about destination wraps */
//TODO throw proper exception
//TODO throw proper exception
//TODO throw proper exception
// TODO finish intel E8 decoding
/* intel E8 decoding */
// READ_LENGTHS(table, first, last)
// if(lzx_read_lens(LENTABLE(table), first, last, bitsleft))
//   return ERROR (ILLEGAL_DATA)
// 
// TODO make returns throw exceptions
/* the current position in the decode table */
/* don't do 0 length codes */
/* base of allocation for long codes */
/* fill entries for codes short enough for a direct mapping */
/* table overrun */
/* fill all possible lookups of this symbol with the symbol itself */
/* if there are any codes longer than nbits */
/* clear the remainder of the table */
/* give ourselves room for codes to grow by up to 16 more bits */
/* if this path hasn't been taken yet, 'allocate' two entries */
/* follow the path and select either left or right for next bit */
/* full talbe? */
/* either erroneous table, or all elements are 0 - let's find out. */
// TODO throw exceptions instead of returns
// hufftbl pointer here?
// TODO throw proper exception
//int amount2shift = sizeof(uint)*8 - 16 - bitsleft;
/* for the LRU offset system				*/
/* number of main tree elements				*/
/* have we started decoding at all yet? 	*/
/* type of this block						*/
/* uncompressed length of this block 		*/
/* uncompressed bytes still left to decode	*/
/* the number of CFDATA blocks processed	*/
/* magic header value used for transform	*/
/* current offset in transform space		*/
/* have we seen any translateable data yet?	*/
// NEEDED MEMBERS
// CAB actualsize
// CAB window
// CAB window_size
// CAB window_posn
/* CONSTANTS */
/* EXCEPTIONS */
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ResourceContentManager.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\AlphaTestEffectReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\ArrayReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\BasicEffectReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\BooleanReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\BoundingBoxReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\BoundingFrustumReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\BoundingSphereReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\ByteReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\CharReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\ColorReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Read RGBA as four separate bytes to make sure we comply with XNB format document
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\CurveReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\DateTimeReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\DecimalReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\DictionaryReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\DoubleReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\DualTextureEffectReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\EffectMaterialReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\EffectReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\EnumReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\EnvironmentMapEffectReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\ExternalReferenceReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// External reference reader, provided for compatibility with XNA Framework built content
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\IndexBufferReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\Int16Reader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\Int32Reader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\Int64Reader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\ListReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\MatrixReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\ModelReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//      List<VertexBuffer> vertexBuffers = new List<VertexBuffer>();
//      List<IndexBuffer> indexBuffers = new List<IndexBuffer>();
//      List<Effect> effects = new List<Effect>();
//      List<GraphicsResource> sharedResources = new List<GraphicsResource>();
// Read the bone ID, which may be encoded as either an 8 or 32 bit value.
// Print out the bone ID.
//Debug.WriteLine("bone #{0}", boneId - 1);
//Debug.WriteLine("null");
// Read the bone names and transforms.
//Debug.WriteLine("Bone count: {0}", boneCount);
// Read the bone hierarchy.
//Debug.WriteLine("Bone {0} hierarchy:", i);
// Read the parent bone reference.
//Debug.WriteLine("Parent: ");
// Read the child bone references.
//Debug.WriteLine("Children:");
//// Read the mesh data.
//Debug.WriteLine("Mesh count: {0}", meshCount);
//Debug.WriteLine("Mesh {0}", i);
// Tag
// Read the mesh part data.
//Debug.WriteLine("Mesh part count: {0}", partCount);
// tag
// Tag reassignment
// Read past remaining data and return existing instance
// Read the final pieces of model data.
// Tag?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\MultiArrayReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//new T[count];
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\NullableReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\PlaneReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\PointReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\QuaternionReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\RayReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\RectangleReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\ReflectiveReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Gather the properties.
// Gather the fields.
// Properties must have at least a getter.
// Skip over indexer properties.
// Are we explicitly asked to ignore this item?
// There is no ContentSerializerAttribute, so non-public
// properties cannot be deserialized.
// If the read-only property has a type reader,
// and CanDeserializeIntoExistingObject is true,
// then it is safe to deserialize into the existing object.
// There is no ContentSerializerAttribute, so non-public
// fields cannot be deserialized.
// evolutional: Added check to skip initialise only fields
// Shared resources get special treatment.
// We need to have a reader at this point.
// We use the construct delegate to pick the correct existing 
// object to be the target of deserialization.
// Box the type.
// Unbox it... required for value types.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\SByteReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\SingleReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\SkinnedEffectReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\SongReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Add the ContentManager's RootDirectory
// Resolve the relative path
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\SoundEffectReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// XNB format for SoundEffect...
//            
// Byte [format size]	Format	WAVEFORMATEX structure
// UInt32	Data size	
// Byte [data size]	Data	Audio waveform data
// Int32	Loop start	In bytes (start must be format block aligned)
// Int32	Loop length	In bytes (length must be format block aligned)
// Int32	Duration	In milliseconds
// The header containss the WAVEFORMATEX header structure
// defined as the following...
//
//  WORD  wFormatTag;       // byte[0]  +2
//  WORD  nChannels;        // byte[2]  +2
//  DWORD nSamplesPerSec;   // byte[4]  +4
//  DWORD nAvgBytesPerSec;  // byte[8]  +4
//  WORD  nBlockAlign;      // byte[12] +2
//  WORD  wBitsPerSample;   // byte[14] +2
//  WORD  cbSize;           // byte[16] +2
//
// We let the sound effect deal with parsing this based
// on what format the audio data actually is.
// Read the audio data buffer.
// Create the effect.
// Store the original asset name for debugging later.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\SpriteFontReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Read the texture into the existing texture instance
// discard the rest of the SpriteFont data as we are only reloading GPU resources for now
// Create a fresh SpriteFont instance
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\StringReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\Texture2DReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Do nothing
// If the system does not fully support Power of Two textures,
// skip any mip maps supplied with any non PoT textures.
//Convert the image data if required
// Shift the channels to suit OpenGL
// Shift the channels to suit OpenGL
//R:=W
//G:=V
//B:=U
//A:=Q
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\Texture3DReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Calculate dimensions of next mip level.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\TextureCubeReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\TextureReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\TimeSpanReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Could not find any information on this really but from all the searching it looks
// like the constructor of number of ticks is long so I have placed that here for now
// long is a Int64 so we read with 64
// <Duration>PT2S</Duration>
// 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\UInt16Reader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\UInt32Reader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\UInt64Reader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\Vector2Reader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\Vector3Reader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\Vector4Reader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\VertexBufferReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\VertexDeclarationReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Content\ContentReaders\VideoReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Add the ContentManager's RootDirectory
// Resolve the relative path
// 0 = Music, 1 = Dialog, 2 = Music and dialog
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Design\Vector2TypeConverter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Design\Vector3TypeConverter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Design\Vector4TypeConverter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Design\VectorConversion.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\ClearOptions.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines the buffers for clearing when calling <see cref="GraphicsDevice.Clear(ClearOptions, Color, float, int)"/> operation.
/// </summary>
/// <summary>
/// Color buffer.
/// </summary>
/// <summary>
/// Depth buffer.
/// </summary>
/// <summary>
/// Stencil buffer.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\ColorWriteChannels.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines the color channels for render target blending operations.
/// </summary>
/// <summary>
/// No channels selected.
/// </summary>
/// <summary>
/// Red channel selected.
/// </summary>
/// <summary>
/// Green channel selected.
/// </summary>
/// <summary>
/// Blue channel selected.
/// </summary>
/// <summary>
/// Alpha channel selected.
/// </summary>
/// <summary>
/// All channels selected.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\CubeMapFace.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines the faces in a cube map for the <see cref="TextureCube"/> class.
/// </summary>
/// <summary>
/// Positive X face in the cube map.
/// </summary>
/// <summary>
/// Negative X face in the cube map.
/// </summary>
/// <summary>
/// Positive Y face in the cube map.
/// </summary>
/// <summary>
/// Negative Y face in the cube map.
/// </summary>
/// <summary>
/// Positive Z face in the cube map.
/// </summary>
/// <summary>
/// Negative Z face in the cube map.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\DeviceLostException.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\DeviceNotResetException.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\DirectionalLight.cs
// #region License
// /*
/*
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
// #endregion License
// 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\DisplayMode.cs
/*
//Same object or both are null
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\DisplayModeCollection.cs
/*
// Sort the modes in a consistent way that happens
// to match XNA behavior on some graphics devices.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\DxtUtil.cs
// #region License
// /*
/*
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
// #endregion License
// 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\GraphicsAdapter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines the driver type for graphics adapter. Usable only on DirectX platforms for now.
/// </summary>
/// <summary>
/// Hardware device been used for rendering. Maximum speed and performance.
/// </summary>
/// <summary>
/// Emulates the hardware device on CPU. Slowly, only for testing.
/// </summary>
/// <summary>
/// Useful when <see cref="DriverType.Hardware"/> acceleration does not work.
/// </summary>
// NOTE: An adapter is a monitor+device combination, so we expect
// at lease one adapter per connected monitor.
// The first adapter is considered the default.
/// <summary>
/// Used to request creation of the reference graphics device, 
/// or the default hardware accelerated device (when set to false).
/// </summary>
/// <remarks>
/// This only works on DirectX platforms where a reference graphics
/// device is available and must be defined before the graphics device
/// is created. It defaults to false.
/// </remarks>
/// <summary>
/// Used to request creation of a specific kind of driver.
/// </summary>
/// <remarks>
/// These values only work on DirectX platforms and must be defined before the graphics device
/// is created. <see cref="DriverType.Hardware"/> by default.
/// </remarks>
/// <summary>
/// Used to request the graphics device should be created with debugging
/// features enabled.
/// </summary>
/// <summary>
/// Returns true if the <see cref="GraphicsAdapter.CurrentDisplayMode"/> is widescreen.
/// </summary>
/// <remarks>
/// Common widescreen modes include 16:9, 16:10 and 2:1.
/// </remarks>
// Seems like XNA treats aspect ratios above 16:10 as wide screen.
/// <summary>
/// Queries for support of the requested render target format on the adaptor.
/// </summary>
/// <param name="graphicsProfile">The graphics profile.</param>
/// <param name="format">The requested surface format.</param>
/// <param name="depthFormat">The requested depth stencil format.</param>
/// <param name="multiSampleCount">The requested multisample count.</param>
/// <param name="selectedFormat">Set to the best format supported by the adaptor for the requested surface format.</param>
/// <param name="selectedDepthFormat">Set to the best format supported by the adaptor for the requested depth stencil format.</param>
/// <param name="selectedMultiSampleCount">Set to the best count supported by the adaptor for the requested multisample count.</param>
/// <returns>True if the requested format is supported by the adaptor. False if one or more of the values was changed.</returns>
// fallback for unsupported renderTarget surface formats.
// We don't keep any resources, so we have
// nothing to do... just here for XNA compatibility.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\GraphicsCapabilities.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides information about the capabilities of the
/// current graphics device. A very useful thread for investigating GL extenion names
/// http://stackoverflow.com/questions/3881197/opengl-es-2-0-extensions-on-android-devices
/// </summary>
/// <summary>
/// Whether the device fully supports non power-of-two textures, including
/// mip maps and wrap modes other than CLAMP_TO_EDGE
/// </summary>
/// <summary>
/// Whether the device supports anisotropic texture filtering
/// </summary>
/// <summary>
/// Gets the support for DXT1
/// </summary>
/// <summary>
/// Gets the support for S3TC (DXT1, DXT3, DXT5)
/// </summary>
/// <summary>
/// Gets the support for PVRTC
/// </summary>
/// <summary>
/// Gets the support for ETC1
/// </summary>
/// <summary>
/// Gets the support for ETC2
/// </summary>
/// <summary>
/// Gets the support for ATITC
/// </summary>
/// <summary>
/// True, if sRGB is supported. On Direct3D platforms, this is always <code>true</code>.
/// On OpenGL platforms, it is <code>true</code> if both framebuffer sRGB
/// and texture sRGB are supported.
/// </summary>
/// <summary>
/// True, if the underlying platform supports floating point textures. 
/// For Direct3D platforms this is always <code>true</code>.
/// For OpenGL Desktop platforms it is always <code>true</code>.
/// For OpenGL Mobile platforms it requires `GL_EXT_color_buffer_float`.
/// If the requested format is not supported an <code>NotSupportedException</code>
/// will be thrown.
/// </summary>
/// <summary>
/// True, if the underlying platform supports half floating point textures. 
/// For Direct3D platforms this is always <code>true</code>.
/// For OpenGL Desktop platforms it is always <code>true</code>.
/// For OpenGL Mobile platforms it requires `GL_EXT_color_buffer_half_float`.
/// If the requested format is not supported an <code>NotSupportedException</code>
/// will be thrown.
/// </summary>
/// <summary>
/// Gets the max texture anisotropy. This value typically lies
/// between 0 and 16, where 0 means anisotropic filtering is not
/// supported.
/// </summary>
// The highest possible MSCount
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\GraphicsDebug.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Attempt to dequeue a debugging message from the graphics subsystem.
/// </summary>
/// <remarks>
/// When running on a graphics device with debugging enabled, this allows you to retrieve
/// subsystem-specific (e.g. DirectX, OpenGL, etc.) debugging messages including information
/// about improper usage of shaders and APIs.
/// </remarks>
/// <param name="message">The graphics debugging message if retrieved, null otherwise.</param>
/// <returns>True if a graphics debugging message was retrieved, false otherwise.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\GraphicsDebugMessage.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\GraphicsDevice.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Indicates if DX9 style pixel addressing or current standard
/// pixel addressing should be used. This flag is set to
/// <c>false</c> by default. If `UseHalfPixelOffset` is
/// `true` you have to add half-pixel offset to a Projection matrix.
/// See also <see cref="GraphicsDeviceManager.PreferHalfPixelOffset"/>.
/// </summary>
/// <remarks>
/// XNA uses DirectX9 for its graphics. DirectX9 interprets UV
/// coordinates differently from other graphics API's. This is
/// typically referred to as the half-pixel offset. MonoGame
/// replicates XNA behavior if this flag is set to <c>true</c>.
/// </remarks>
// On Intel Integrated graphics, there is a fast hw unit for doing
// clears to colors where all components are either 0 or 255.
// Despite XNA4 using Purple here, we use black (in Release) to avoid
// performance warnings on Intel/Mesa
/// <summary>
/// Get or set the color a <see cref="RenderTarget2D"/> is cleared to when it is set.
/// </summary>
/// <summary>
/// The active vertex shader.
/// </summary>
/// <summary>
/// The active pixel shader.
/// </summary>
/// <summary>
/// The cache of effects from unique byte streams.
/// </summary>
// Resources may be added to and removed from the list from many threads.
// Use WeakReference for the global resources list as we do not know when a resource
// may be disposed and collected. We do not want to prevent a resource from being
// collected by holding a strong reference to it in this list.
// TODO Graphics Device events need implementing
// We will just return IsDisposed for now
// as that is the only case I can see for now
/// <summary>
/// The rendering information for debugging and profiling.
/// The metrics are reset every frame after draw within <see cref="GraphicsDevice.Present"/>. 
/// </summary>
/// <summary>
/// Access debugging APIs for the graphics subsystem.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="GraphicsDevice" /> class.
/// </summary>
/// <param name="adapter">The graphics adapter.</param>
/// <param name="graphicsProfile">The graphics profile.</param>
/// <param name="presentationParameters">The presentation options.</param>
/// <exception cref="ArgumentNullException">
/// <paramref name="presentationParameters"/> is <see langword="null"/>.
/// </exception>
/// <summary>
/// Initializes a new instance of the <see cref="GraphicsDevice" /> class.
/// </summary>
/// <param name="adapter">The graphics adapter.</param>
/// <param name="graphicsProfile">The graphics profile.</param>
/// <param name="preferHalfPixelOffset"> Indicates if DX9 style pixel addressing or current standard pixel addressing should be used. This value is passed to <see cref="GraphicsDevice.UseHalfPixelOffset"/></param>
/// <param name="presentationParameters">The presentation options.</param>
/// <exception cref="ArgumentNullException">
/// <paramref name="presentationParameters"/> is <see langword="null"/>.
/// </exception>
// TODO we need to figure out how to inject the half pixel offset into DX shaders
//github.com/MonoGame/MonoGame/issues/5040 for more information.");
// Initialize the main viewport
// Round down MultiSampleCount to the nearest power of two
// hack from http://stackoverflow.com/a/2681094
// Note: this will return an incorrect, but large value
// for very large numbers. That doesn't matter because
// the number will get clamped below anyway in this case.
// and clamp it to what the device can handle
// Force set the default render states.
// Clear the texture and sampler collections forcing
// the state to be reapplied.
// Clear constant buffers
// Force set the buffers and shaders on next ApplyState() call
// Set the default scissor rect.
// Set the default render target.
// Don't set the same state twice!
// Static state properties never actually get bound;
// instead we use our GraphicsDevice-specific version of them.
/// <summary>
/// The color used as blend factor when alpha blending.
/// </summary>
/// <remarks>
/// When only changing BlendFactor, use this rather than <see cref="Graphics.BlendState.BlendFactor"/> to
/// only update BlendFactor so the whole BlendState does not have to be updated.
/// </remarks>
// Don't set the same state twice!
// Static state properties never actually get bound;
// instead we use our GraphicsDevice-specific version of them.
// Blend state is now bound to a device... no one should
// be changing the state of the blend state object now!
// Don't set the same state twice!
// Static state properties never actually get bound;
// instead we use our GraphicsDevice-specific version of them.
// Dispose of all remaining graphics resources before disposing of the graphics device
// Clear the effect cache.
// We cannot present with a RT set on the device.
/*
// Update the back buffer.
/// <summary>
/// Trigger the DeviceResetting event
/// Currently internal to allow the various platforms to send the event at the appropriate time.
/// </summary>
// Remove references to resources that have been garbage collected.
/// <summary>
/// Trigger the DeviceReset event to allow games to be notified of a device reset.
/// Currently internal to allow the various platforms to send the event at the appropriate time.
/// </summary>
// Avoid having to check for null and zero length.
// Try to early out if the current and new bindings are equal.
// Clear the current bindings.
// Copy the new bindings.
// We clear the render target if asked.
// Set the viewport to the size of the first render target.
// Set the scissor rectangle to the size of the first render target.
// In XNA 4, because of hardware limitations on Xbox, when
// a render target doesn't have PreserveContents as its usage
// it is cleared before being rendered to.
// Return a correctly sized copy our internal array.
// Validate vertexOffset.
/// <summary>
/// Draw geometry by indexing into the vertex buffer.
/// </summary>
/// <param name="primitiveType">The type of primitives in the index buffer.</param>
/// <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
/// <param name="minVertexIndex">This is unused and remains here only for XNA API compatibility.</param>
/// <param name="numVertices">This is unused and remains here only for XNA API compatibility.</param>
/// <param name="startIndex">The index within the index buffer to start drawing from.</param>
/// <param name="primitiveCount">The number of primitives to render from the index buffer.</param>
/// <remarks>Note that minVertexIndex and numVertices are unused in MonoGame and will be ignored.</remarks>
/// <summary>
/// Draw geometry by indexing into the vertex buffer.
/// </summary>
/// <param name="primitiveType">The type of primitives in the index buffer.</param>
/// <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
/// <param name="startIndex">The index within the index buffer to start drawing from.</param>
/// <param name="primitiveCount">The number of primitives to render from the index buffer.</param>
/// <summary>
/// Draw primitives of the specified type from the data in an array of vertices without indexing.
/// </summary>
/// <typeparam name="T">The type of the vertices.</typeparam>
/// <param name="primitiveType">The type of primitives to draw with the vertices.</param>
/// <param name="vertexData">An array of vertices to draw.</param>
/// <param name="vertexOffset">The index in the array of the first vertex that should be rendered.</param>
/// <param name="primitiveCount">The number of primitives to draw.</param>
/// <remarks>The <see cref="VertexDeclaration"/> will be found by getting <see cref="IVertexType.VertexDeclaration"/>
/// from an instance of <typeparamref name="T"/> and cached for subsequent calls.</remarks>
/// <summary>
/// Draw primitives of the specified type from the data in the given array of vertices without indexing.
/// </summary>
/// <typeparam name="T">The type of the vertices.</typeparam>
/// <param name="primitiveType">The type of primitives to draw with the vertices.</param>
/// <param name="vertexData">An array of vertices to draw.</param>
/// <param name="vertexOffset">The index in the array of the first vertex that should be rendered.</param>
/// <param name="primitiveCount">The number of primitives to draw.</param>
/// <param name="vertexDeclaration">The layout of the vertices.</param>
/// <summary>
/// Draw primitives of the specified type from the currently bound vertexbuffers without indexing.
/// </summary>
/// <param name="primitiveType">The type of primitives to draw.</param>
/// <param name="vertexStart">Index of the vertex to start at.</param>
/// <param name="primitiveCount">The number of primitives to draw.</param>
/// <summary>
/// Draw primitives of the specified type by indexing into the given array of vertices with 16-bit indices.
/// </summary>
/// <typeparam name="T">The type of the vertices.</typeparam>
/// <param name="primitiveType">The type of primitives to draw with the vertices.</param>
/// <param name="vertexData">An array of vertices to draw.</param>
/// <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
/// <param name="indexOffset">The index in the array of indices of the first index to use</param>
/// <param name="primitiveCount">The number of primitives to draw.</param>
/// <param name="numVertices">The number of vertices to draw.</param>
/// <param name="indexData">The index data.</param>
/// <remarks>The <see cref="VertexDeclaration"/> will be found by getting <see cref="IVertexType.VertexDeclaration"/>
/// from an instance of <typeparamref name="T"/> and cached for subsequent calls.</remarks>
/// <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
/// For example a value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
/// in the array of vertices.</remarks>
/// <summary>
/// Draw primitives of the specified type by indexing into the given array of vertices with 16-bit indices.
/// </summary>
/// <typeparam name="T">The type of the vertices.</typeparam>
/// <param name="primitiveType">The type of primitives to draw with the vertices.</param>
/// <param name="vertexData">An array of vertices to draw.</param>
/// <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
/// <param name="indexOffset">The index in the array of indices of the first index to use</param>
/// <param name="primitiveCount">The number of primitives to draw.</param>
/// <param name="numVertices">The number of vertices to draw.</param>
/// <param name="indexData">The index data.</param>
/// <param name="vertexDeclaration">The layout of the vertices.</param>
/// <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
/// For example a value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
/// in the array of vertices.</remarks>
// These parameter checks are a duplicate of the checks in the int[] overload of DrawUserIndexedPrimitives.
// Inlined here for efficiency.
/// <summary>
/// Draw primitives of the specified type by indexing into the given array of vertices with 32-bit indices.
/// </summary>
/// <typeparam name="T">The type of the vertices.</typeparam>
/// <param name="primitiveType">The type of primitives to draw with the vertices.</param>
/// <param name="vertexData">An array of vertices to draw.</param>
/// <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
/// <param name="indexOffset">The index in the array of indices of the first index to use</param>
/// <param name="primitiveCount">The number of primitives to draw.</param>
/// <param name="numVertices">The number of vertices to draw.</param>
/// <param name="indexData">The index data.</param>
/// <remarks>The <see cref="VertexDeclaration"/> will be found by getting <see cref="IVertexType.VertexDeclaration"/>
/// from an instance of <typeparamref name="T"/> and cached for subsequent calls.</remarks>
/// <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
/// For example a value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
/// in the array of vertices.</remarks>
/// <summary>
/// Draw primitives of the specified type by indexing into the given array of vertices with 32-bit indices.
/// </summary>
/// <typeparam name="T">The type of the vertices.</typeparam>
/// <param name="primitiveType">The type of primitives to draw with the vertices.</param>
/// <param name="vertexData">An array of vertices to draw.</param>
/// <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
/// <param name="indexOffset">The index in the array of indices of the first index to use</param>
/// <param name="primitiveCount">The number of primitives to draw.</param>
/// <param name="numVertices">The number of vertices to draw.</param>
/// <param name="indexData">The index data.</param>
/// <param name="vertexDeclaration">The layout of the vertices.</param>
/// <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
/// For example value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
/// in the array of vertices.</remarks>
// These parameter checks are a duplicate of the checks in the short[] overload of DrawUserIndexedPrimitives.
// Inlined here for efficiency.
/// <summary>
/// Draw instanced geometry from the bound vertex buffers and index buffer.
/// </summary>
/// <param name="primitiveType">The type of primitives in the index buffer.</param>
/// <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
/// <param name="minVertexIndex">This is unused and remains here only for XNA API compatibility.</param>
/// <param name="numVertices">This is unused and remains here only for XNA API compatibility.</param>
/// <param name="startIndex">The index within the index buffer to start drawing from.</param>
/// <param name="primitiveCount">The number of primitives in a single instance.</param>
/// <param name="instanceCount">The number of instances to render.</param>
/// <remarks>Note that minVertexIndex and numVertices are unused in MonoGame and will be ignored.</remarks>
/// <summary>
/// Draw instanced geometry from the bound vertex buffers and index buffer.
/// </summary>
/// <param name="primitiveType">The type of primitives in the index buffer.</param>
/// <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
/// <param name="startIndex">The index within the index buffer to start drawing from.</param>
/// <param name="primitiveCount">The number of primitives in a single instance.</param>
/// <param name="instanceCount">The number of instances to render.</param>
/// <remarks>Draw geometry with data from multiple bound vertex streams at different frequencies.</remarks>
/// <summary>
/// Draw instanced geometry from the bound vertex buffers and index buffer.
/// </summary>
/// <param name="primitiveType">The type of primitives in the index buffer.</param>
/// <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
/// <param name="startIndex">The index within the index buffer to start drawing from.</param>
/// <param name="primitiveCount">The number of primitives in a single instance.</param>
/// <param name="instanceCount">The number of instances to render.</param>
/// <param name="baseInstance">Used to offset the instance range indexed from the instance buffer.</param>
/// <remarks>Draw geometry with data from multiple bound vertex streams at different frequencies.</remarks>
/// <summary>
/// Gets the Pixel data of what is currently drawn on screen.
/// The format is whatever the current format of the backbuffer is.
/// </summary>
/// <typeparam name="T">A byte[] of size (ViewPort.Width * ViewPort.Height * 4)</typeparam>
// uniformly scales down the given rectangle by 10%
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\GraphicsDeviceStatus.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes the status of the <see cref="GraphicsDevice"/>.
/// </summary>
/// <summary>
/// The device is normal.
/// </summary>
/// <summary>
/// The device has been lost.
/// </summary>
/// <summary>
/// The device has not been reset.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\GraphicsExtensions.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: This may or may not be the right behavor.  
//
// For instance the VertexElementFormat.Byte4 format is not supposed
// to be normalized, but this line makes it so.
//
// The question is in MS XNA are types normalized based on usage or
// normalized based to their format?
//
/// <summary>
/// Convert a <see cref="SurfaceFormat"/> to an OpenTK.Graphics.ColorFormat.
/// This is used for setting up the backbuffer format of the OpenGL context.
/// </summary>
/// <returns>An OpenTK.Graphics.ColorFormat instance.</returns>
/// <param name="format">The <see cref="SurfaceFormat"/> to convert.</param>
// Floating point backbuffers formats could be implemented
// but they are not typically used on the backbuffer. In
// those cases it is better to create a render target instead.
/// <summary>
/// Converts <see cref="PresentInterval"/> to OpenGL swap interval.
/// </summary>
/// <returns>A value according to EXT_swap_control</returns>
/// <param name="interval">The <see cref="PresentInterval"/> to convert.</param>
// See http://www.opengl.org/registry/specs/EXT/swap_control.txt
// and https://www.opengl.org/registry/specs/EXT/glx_swap_control_tear.txt
// OpenTK checks for EXT_swap_control_tear:
// if supported, a swap interval of -1 enables adaptive vsync;
// otherwise -1 is converted to 1 (vsync enabled.)
// HdrBlendable implemented as HalfVector4 (see http://blogs.msdn.com/b/shawnhar/archive/2010/07/09/surfaceformat-hdrblendable.aspx)
// GL_ETC1_RGB8_OES
// GL_COMPRESSED_RGB8_ETC2
// GL_COMPRESSED_SRGB8_ETC2
// GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
// GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
// GL_COMPRESSED_RGBA8_ETC2_EAC
// GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
// OPENGL
// One texel in DXT1, PVRTC (2bpp and 4bpp) and ETC1 is a minimum 4x4 block (8x4 for PVRTC 2bpp), which is 8 bytes
// One texel in DXT3 and DXT5 is a minimum 4x4 block, which is 16 bytes
//Console.WriteLine(error);
// Todo: Add generic MonoGame logging interface
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\GraphicsMetrics.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A snapshot of rendering statistics from <see cref="GraphicsDevice.Metrics"/> to be used for runtime debugging and profiling.
/// </summary>
/// <summary>
/// Number of times Clear was called.
/// </summary>
/// <summary>
/// Number of times Draw was called.
/// </summary>
/// <summary>
/// Number of times the pixel shader was changed on the GPU.
/// </summary>
/// <summary>
/// Number of rendered primitives.
/// </summary>
/// <summary>
/// Number of sprites and text characters rendered via <see cref="SpriteBatch"/>.
/// </summary>
/// <summary>
/// Number of times a target was changed on the GPU.
/// </summary>
/// <summary>
/// Number of times a texture was changed on the GPU.
/// </summary>
/// <summary>
/// Number of times the vertex shader was changed on the GPU.
/// </summary>
/// <summary>
/// Returns the difference between two sets of metrics.
/// </summary>
/// <param name="value1">Source <see cref="GraphicsMetrics"/> on the left of the sub sign.</param>
/// <param name="value2">Source <see cref="GraphicsMetrics"/> on the right of the sub sign.</param>
/// <returns>Difference between two sets of metrics.</returns>
/// <summary>
/// Returns the combination of two sets of metrics.
/// </summary>
/// <param name="value1">Source <see cref="GraphicsMetrics"/> on the left of the add sign.</param>
/// <param name="value2">Source <see cref="GraphicsMetrics"/> on the right of the add sign.</param>
/// <returns>Combination of two sets of metrics.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\GraphicsProfile.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines a set of graphic capabilities.
/// </summary>
/// <summary>
/// Use a limited set of graphic features and capabilities, allowing the game to support the widest variety of devices.
/// </summary>
/// <summary>
/// Use the largest available set of graphic features and capabilities to target devices, that have more enhanced graphic capabilities.        
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\GraphicsResource.cs
// /*
/*
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
// The GraphicsDevice property should only be accessed in Dispose(bool) if the disposing
// parameter is true. If disposing is false, the GraphicsDevice may or may not be
// disposed yet.
// Pass false so the managed objects are not released
/// <summary>
/// Called before the device is reset. Allows graphics resources to 
/// invalidate their state so they can be recreated after the device reset.
/// Warning: This may be called after a call to Dispose() up until
/// the resource is garbage collected.
/// </summary>
// Dispose of managed objects as well
// Since we have been manually disposed, do not call the finalizer on this object
/// <summary>
/// The method that derived classes should override to implement disposing of managed and native resources.
/// </summary>
/// <param name="disposing">True if managed objects should be disposed.</param>
/// <remarks>Native resources should always be released regardless of the value of the disposing parameter.</remarks>
// Release managed objects
// ...
// Release native objects
// ...
// Do not trigger the event if called from the finalizer
// Remove from the global list of graphics resources
// VertexDeclaration objects can be bound to multiple GraphicsDevice objects
// during their lifetime. But only one GraphicsDevice should retain ownership.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\IGraphicsDeviceService.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\IRenderTarget.cs
// Microsoft Public License (Ms-PL)
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
/// <summary>
/// Represents a render target.
/// </summary>
/// <summary>
/// Gets the width of the render target in pixels
/// </summary>
/// <value>The width of the render target in pixels.</value>
/// <summary>
/// Gets the height of the render target in pixels
/// </summary>
/// <value>The height of the render target in pixels.</value>
/// <summary>
/// Gets the usage mode of the render target.
/// </summary>
/// <value>The usage mode of the render target.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Model.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A basic 3D model with per mesh parent bones.
/// </summary>
/// <summary>
/// A collection of <see cref="ModelBone"/> objects which describe how each mesh in the
/// mesh collection for this model relates to its parent mesh.
/// </summary>
/// <summary>
/// A collection of <see cref="ModelMesh"/> objects which compose the model. Each <see cref="ModelMesh"/>
/// in a model may be moved independently and may be composed of multiple materials
/// identified as <see cref="ModelMeshPart"/> objects.
/// </summary>
/// <summary>
/// Root bone for this model.
/// </summary>
/// <summary>
/// Custom attached object.
/// <remarks>
/// Skinning data is example of attached object for model.
/// </remarks>
/// </summary>
/// <summary>
/// Constructs a model. 
/// </summary>
/// <param name="graphicsDevice">A valid reference to <see cref="GraphicsDevice"/>.</param>
/// <param name="bones">The collection of bones.</param>
/// <param name="meshes">The collection of meshes.</param>
/// <exception cref="ArgumentNullException">
/// <paramref name="graphicsDevice"/> is null.
/// </exception>
/// <exception cref="ArgumentNullException">
/// <paramref name="bones"/> is null.
/// </exception>
/// <exception cref="ArgumentNullException">
/// <paramref name="meshes"/> is null.
/// </exception>
// TODO: Complete member initialization
//string s = string.Empty;
//
//for (int i = 0; i < level; i++) 
//{
//	s += "\t";
//}
//
//Debug.WriteLine("{0}:{1}", s, node.Name);
/// <summary>
/// Draws the model meshes.
/// </summary>
/// <param name="world">The world transform.</param>
/// <param name="view">The view transform.</param>
/// <param name="projection">The projection transform.</param>
// Look up combined bone matrices for the entire model.            
// Draw the model.
/// <summary>
/// Copies bone transforms relative to all parent bones of the each bone from this model to a given array.
/// </summary>
/// <param name="destinationBoneTransforms">The array receiving the transformed bones.</param>
/// <summary>
/// Copies bone transforms relative to <see cref="Model.Root"/> bone from a given array to this model.
/// </summary>
/// <param name="sourceBoneTransforms">The array of prepared bone transform data.</param>
/// <exception cref="ArgumentNullException">
/// <paramref name="sourceBoneTransforms"/> is null.
/// </exception>
/// <exception cref="ArgumentOutOfRangeException">
/// <paramref name="sourceBoneTransforms"/> is invalid.
/// </exception>
/// <summary>
/// Copies bone transforms relative to <see cref="Model.Root"/> bone from this model to a given array.
/// </summary>
/// <param name="destinationBoneTransforms">The array receiving the transformed bones.</param>
/// <exception cref="ArgumentNullException">
/// <paramref name="destinationBoneTransforms"/> is null.
/// </exception>
/// <exception cref="ArgumentOutOfRangeException">
/// <paramref name="destinationBoneTransforms"/> is invalid.
/// </exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\ModelBone.cs
// Summary:
//     Represents bone data for a model. Reference page contains links to related
//     conceptual articles.
// Summary:
//     Gets a collection of bones that are children of this bone.
//
// Summary:
//     Gets the index of this bone in the Bones collection.
//
// Summary:
//     Gets the name of this bone.
//
// Summary:
//     Gets the parent of this bone.
//
// Summary:
//     Gets or sets the matrix used to transform this bone relative to its parent
//     bone.
/// <summary>
/// Transform of this node from the root of the model not from the parent
/// </summary>
//// Summary:
////     Represents bone data for a model. Reference page contains links to related
////     conceptual articles.
//public sealed class ModelBone
//{
//    // Summary:
//    //     Gets a collection of bones that are children of this bone.
//    public ModelBoneCollection Children { get { throw new NotImplementedException(); } }
//    //
//    // Summary:
//    //     Gets the index of this bone in the Bones collection.
//    public int Index { get { throw new NotImplementedException(); } }
//    //
//    // Summary:
//    //     Gets the name of this bone.
//    public string Name { get { throw new NotImplementedException(); } }
//    //
//    // Summary:
//    //     Gets the parent of this bone.
//    public ModelBone Parent { get { throw new NotImplementedException(); } }
//    //
//    // Summary:
//    //     Gets or sets the matrix used to transform this bone relative to its parent
//    //     bone.
//    public Matrix Transform { get { throw new NotImplementedException(); } set { throw new NotImplementedException(); } }
//}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\ModelBoneCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a set of bones associated with a model.
/// </summary>
/// <summary>
/// Retrieves a ModelBone from the collection, given the name of the bone.
/// </summary>
/// <param name="boneName">The name of the bone to retrieve.</param>
/// <summary>
/// Finds a bone with a given name if it exists in the collection.
/// </summary>
/// <param name="boneName">The name of the bone to find.</param>
/// <param name="value">The bone named boneName, if found.</param>
/// <returns>true if the bone was found</returns>
/// <summary>
/// Returns a ModelMeshCollection.Enumerator that can iterate through a ModelMeshCollection.
/// </summary>
/// <returns></returns>
/// <summary>
/// Provides the ability to iterate through the bones in an ModelMeshCollection.
/// </summary>
/// <summary>
/// Gets the current element in the ModelMeshCollection.
/// </summary>
/// <summary>
/// Advances the enumerator to the next element of the ModelMeshCollection.
/// </summary>
/// <summary>
/// Immediately releases the unmanaged resources used by this object.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\ModelEffectCollection.cs
// Summary:
//     Represents a collection of effects associated with a model.
//ModelMeshPart needs to be able to add to ModelMesh's effects list
// Summary:
//     Returns a ModelEffectCollection.Enumerator that can iterate through a ModelEffectCollection.
// Summary:
//     Provides the ability to iterate through the bones in an ModelEffectCollection.
// Summary:
//     Gets the current element in the ModelEffectCollection.
// Summary:
//     Immediately releases the unmanaged resources used by this object.
//
// Summary:
//     Advances the enumerator to the next element of the ModelEffectCollection.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\ModelMesh.cs
// Summary:
//     Represents a mesh that is part of a Model.
// TODO: Complete member initialization
/*internal void BuildEffectList()
// Summary:
//     Gets the BoundingSphere that contains this mesh.
//
// Summary:
//     Gets a collection of effects associated with this mesh.
//
// Summary:
//     Gets the ModelMeshPart objects that make up this mesh. Each part of a mesh
//     is composed of a set of primitives that share the same material.
//
// Summary:
//     Gets the name of this mesh.
//
// Summary:
//     Gets the parent bone for this mesh. The parent bone of a mesh contains a
//     transformation matrix that describes how the mesh is located relative to
//     any parent meshes in a model.
//
// Summary:
//     Gets or sets an object identifying this mesh.
// Summary:
//     Draws all of the ModelMeshPart objects in this mesh, using their current
//     Effect settings.
//// Summary:
////     Represents a mesh that is part of a Model.
//public sealed class ModelMesh
//{
//    // Summary:
//    //     Gets the BoundingSphere that contains this mesh.
//    public BoundingSphere BoundingSphere { get { throw new NotImplementedException(); } }
//    //
//    // Summary:
//    //     Gets a collection of effects associated with this mesh.
//    public ModelEffectCollection Effects { get { throw new NotImplementedException(); } }
//    //
//    // Summary:
//    //     Gets the ModelMeshPart objects that make up this mesh. Each part of a mesh
//    //     is composed of a set of primitives that share the same material.
//    public ModelMeshPartCollection MeshParts { get { throw new NotImplementedException(); } }
//    //
//    // Summary:
//    //     Gets the name of this mesh.
//    public string Name { get { throw new NotImplementedException(); } }
//    //
//    // Summary:
//    //     Gets the parent bone for this mesh. The parent bone of a mesh contains a
//    //     transformation matrix that describes how the mesh is located relative to
//    //     any parent meshes in a model.
//    public ModelBone ParentBone { get { throw new NotImplementedException(); } }
//    //
//    // Summary:
//    //     Gets or sets an object identifying this mesh.
//    public object Tag { get { throw new NotImplementedException(); } set { throw new NotImplementedException(); } }
//    // Summary:
//    //     Draws all of the ModelMeshPart objects in this mesh, using their current
//    //     Effect settings.
//    public void Draw() { throw new NotImplementedException(); }
//}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\ModelMeshCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a collection of ModelMesh objects.
/// </summary>
/// <summary>
/// Retrieves a ModelMesh from the collection, given the name of the mesh.
/// </summary>
/// <param name="meshName">The name of the mesh to retrieve.</param>
/// <summary>
/// Finds a mesh with a given name if it exists in the collection.
/// </summary>
/// <param name="meshName">The name of the mesh to find.</param>
/// <param name="value">The mesh named meshName, if found.</param>
/// <returns>true if a mesh was found</returns>
/// <summary>
/// Returns a ModelMeshCollection.Enumerator that can iterate through a ModelMeshCollection.
/// </summary>
/// <returns></returns>
/// <summary>
/// Provides the ability to iterate through the bones in an ModelMeshCollection.
/// </summary>
/// <summary>
/// Gets the current element in the ModelMeshCollection.
/// </summary>
/// <summary>
/// Advances the enumerator to the next element of the ModelMeshCollection.
/// </summary>
/// <summary>
/// Immediately releases the unmanaged resources used by this object.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\ModelMeshPart.cs
// First check to see any other parts are also using this effect.
// Set the new effect.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\ModelMeshPartCollection.cs
//// Summary:
////     Represents a collection of ModelMeshPart objects.
//public sealed class ModelMeshPartCollection : ReadOnlyCollection<ModelMeshPart>
//{
//    internal ModelMeshPartCollection()
//        : base(new List<ModelMeshPart>())
//    {
//    }
//    // Summary:
//    //     Returns a ModelMeshPartCollection.Enumerator that can iterate through a ModelMeshPartCollection.
//    public ModelMeshPartCollection.Enumerator GetEnumerator() { throw new NotImplementedException(); }
//    // Summary:
//    //     Provides the ability to iterate through the bones in an ModelMeshPartCollection.
//    public struct Enumerator : IEnumerator<ModelMeshPart>, IDisposable, IEnumerator
//    {
//        // Summary:
//        //     Gets the current element in the ModelMeshPartCollection.
//        public ModelMeshPart Current { get { throw new NotImplementedException(); } }
//        // Summary:
//        //     Immediately releases the unmanaged resources used by this object.
//        public void Dispose() { throw new NotImplementedException(); }
//        //
//        // Summary:
//        //     Advances the enumerator to the next element of the ModelMeshPartCollection.
//        public bool MoveNext() { throw new NotImplementedException(); }
//        #region IEnumerator Members
//        object IEnumerator.Current
//        {
//            get { throw new NotImplementedException(); }
//        }
//        public void Reset()
//        {
//            throw new NotImplementedException();
//        }
//        #endregion
//    }
//}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\NoSuitableGraphicsDeviceException.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\OcclusionQuery.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// true if Begin was called and End was not yet called.
// true if Begin+End were called at least once.
// true if the result is available in _pixelCount.
// The query result.
/// <summary>
/// Gets a value indicating whether the occlusion query has completed.
/// </summary>
/// <value>
/// <see langword="true"/> if the occlusion query has completed; otherwise,
/// <see langword="false"/>.
/// </value>
/// <summary>
/// Gets the number of visible pixels.
/// </summary>
/// <value>The number of visible pixels.</value>
/// <exception cref="InvalidOperationException">
/// The occlusion query has not yet completed. Check <see cref="IsComplete"/> before reading
/// the result!
/// </exception>
/// <summary>
/// Initializes a new instance of the <see cref="OcclusionQuery"/> class.
/// </summary>
/// <param name="graphicsDevice">The graphics device.</param>
/// <exception cref="ArgumentNullException">
/// <paramref name="graphicsDevice"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="NotSupportedException">
/// The current graphics profile does not support occlusion queries.
/// </exception>
/// <summary>
/// Begins the occlusion query.
/// </summary>
/// <exception cref="InvalidOperationException">
/// <see cref="Begin"/> is called again before calling <see cref="End"/>.
/// </exception>
/// <summary>
/// Ends the occlusion query.
/// </summary>
/// <exception cref="InvalidOperationException">
/// <see cref="End"/> is called before calling <see cref="Begin"/>.
/// </exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PresentationEventArgs.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PresentationParameters.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Create a <see cref="PresentationParameters"/> instance with default values for all properties.
/// </summary>
/// <summary>
/// Get or set the format of the back buffer.
/// </summary>
/// <summary>
/// Get or set the height of the back buffer.
/// </summary>
/// <summary>
/// Get or set the width of the back buffer.
/// </summary>
/// <summary>
/// Get the bounds of the back buffer.
/// </summary>
/// <summary>
/// Get or set the handle of the window that will present the back buffer.
/// </summary>
/// <summary>
/// Get or set the depth stencil format for the back buffer.
/// </summary>
/// <summary>
/// Get or set a value indicating if we are in full screen mode.
/// </summary>
/// <summary>
/// If <code>true</code> the <see cref="GraphicsDevice"/> will do a mode switch
/// when going to full screen mode. If <code>false</code> it will instead do a
/// soft full screen by maximizing the window and making it borderless.
/// </summary>
/// <summary>
/// Get or set the multisample count for the back buffer.
/// </summary>
/// <summary>
/// Get or set the presentation interval.
/// </summary>
/// <summary>
/// Get or set the display orientation.
/// </summary>
/// <summary>
/// Get or set the RenderTargetUsage for the back buffer.
/// Determines if the back buffer is cleared when it is set as the
/// render target by the <see cref="GraphicsDevice"/>.
/// <see cref="GraphicsDevice"/> target.
/// </summary>
/// <summary>
/// Reset all properties to their default values.
/// </summary>
// Mainscreen.Bounds does not account for the device's orientation. it ALWAYS assumes portrait
// Flip the dimensions if we need to.
// isFullScreen = false;
/// <summary>
/// Create a copy of this <see cref="PresentationParameters"/> instance.
/// </summary>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PresentInterval.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines how <see cref="GraphicsDevice.Present"/> updates the game window.
/// </summary>
/// <summary>
/// Equivalent to <see cref="PresentInterval.One"/>.
/// </summary>
/// <summary>
/// The driver waits for the vertical retrace period, before updating window client area. Present operations are not affected more frequently than the screen refresh rate.
/// </summary>
/// <summary>
/// The driver waits for the vertical retrace period, before updating window client area. Present operations are not affected more frequently than every second screen refresh. 
/// </summary>
/// <summary>
/// The driver updates the window client area immediately. Present operations might be affected immediately. There is no limit for framerate.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\RenderTarget2D.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Allows child class to specify the surface type, eg: a swap chain.
/// </summary>        
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\RenderTarget3D.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// If we don't need a depth buffer then we're done.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\RenderTargetBinding.cs
// #region License
// /*
/*
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
// #endregion License
//
// Author: Kenneth James Pouncey
// http://msdn.microsoft.com/en-us/library/ff434403.aspx
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\RenderTargetCube.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a texture cube that can be used as a render target.
/// </summary>
/// <summary>
/// Gets the depth-stencil buffer format of this render target.
/// </summary>
/// <value>The format of the depth-stencil buffer.</value>
/// <summary>
/// Gets the number of multisample locations.
/// </summary>
/// <value>The number of multisample locations.</value>
/// <summary>
/// Gets the usage mode of this render target.
/// </summary>
/// <value>The usage mode of the render target.</value>
/// <inheritdoc/>
/// <inheritdoc/>
/// <summary>
/// Initializes a new instance of the <see cref="RenderTargetCube"/> class.
/// </summary>
/// <param name="graphicsDevice">The graphics device.</param>
/// <param name="size">The width and height of a texture cube face in pixels.</param>
/// <param name="mipMap"><see langword="true"/> to generate a full mipmap chain; otherwise <see langword="false"/>.</param>
/// <param name="preferredFormat">The preferred format of the surface.</param>
/// <param name="preferredDepthFormat">The preferred format of the depth-stencil buffer.</param>
/// <summary>
/// Initializes a new instance of the <see cref="RenderTargetCube"/> class.
/// </summary>
/// <param name="graphicsDevice">The graphics device.</param>
/// <param name="size">The width and height of a texture cube face in pixels.</param>
/// <param name="mipMap"><see langword="true"/> to generate a full mipmap chain; otherwise <see langword="false"/>.</param>
/// <param name="preferredFormat">The preferred format of the surface.</param>
/// <param name="preferredDepthFormat">The preferred format of the depth-stencil buffer.</param>
/// <param name="preferredMultiSampleCount">The preferred number of multisample locations.</param>
/// <param name="usage">The usage mode of the render target.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\RenderTargetUsage.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines if the previous content in a render target is preserved when it set on the graphics device.
/// </summary>
/// <summary>
/// The render target content will not be preserved.
/// </summary>
/// <summary>
/// The render target content will be preserved even if it is slow or requires extra memory.
/// </summary>
/// <summary>
/// The render target content might be preserved if the platform can do so without a penalty in performance or memory usage.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\ResourceCreatedEventArgs.cs
/// <summary>
/// The newly created resource object.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\ResourceDestroyedEventArgs.cs
/// <summary>
/// The name of the destroyed resource.
/// </summary>
/// <summary>
/// The resource manager tag of the destroyed resource.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\SamplerStateCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//
// Author: Kenneth James Pouncey
// Static state properties never actually get bound;
// instead we use our GraphicsDevice-specific version of them.
/// <summary>
/// Mark all the sampler slots as dirty.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\SetDataOptions.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines how vertex or index buffer data will be flushed during a SetData operation.
/// </summary>
/// <summary>
/// The SetData can overwrite the portions of existing data.
/// </summary>
/// <summary>
/// The SetData will discard the entire buffer. A pointer to a new memory area is returned and rendering from the previous area do not stall.
/// </summary>
/// <summary>
/// The SetData operation will not overwrite existing data. This allows the driver to return immediately from a SetData operation and continue rendering.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\SpriteBatch.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Helper class for drawing text strings and sprites in one or more optimized batches.
/// </summary>
/// <summary>
/// Constructs a <see cref="SpriteBatch"/>.
/// </summary>
/// <param name="graphicsDevice">The <see cref="GraphicsDevice"/>, which will be used for sprite rendering.</param>        
/// <exception cref="ArgumentNullException">Thrown when <paramref name="graphicsDevice"/> is null.</exception>
/// <summary>
/// Constructs a <see cref="SpriteBatch"/>.
/// </summary>
/// <param name="graphicsDevice">The <see cref="GraphicsDevice"/>, which will be used for sprite rendering.</param>
/// <param name="capacity">The initial capacity of the internal array holding batch items (the value will be rounded to the next multiple of 64).</param>
/// <exception cref="ArgumentNullException">Thrown when <paramref name="graphicsDevice"/> is null.</exception>
/// <summary>
/// Begins a new sprite and text batch with the specified render state.
/// </summary>
/// <param name="sortMode">The drawing order for sprite and text drawing. <see cref="SpriteSortMode.Deferred"/> by default.</param>
/// <param name="blendState">State of the blending. Uses <see cref="BlendState.AlphaBlend"/> if null.</param>
/// <param name="samplerState">State of the sampler. Uses <see cref="SamplerState.LinearClamp"/> if null.</param>
/// <param name="depthStencilState">State of the depth-stencil buffer. Uses <see cref="DepthStencilState.None"/> if null.</param>
/// <param name="rasterizerState">State of the rasterization. Uses <see cref="RasterizerState.CullCounterClockwise"/> if null.</param>
/// <param name="effect">A custom <see cref="Effect"/> to override the default sprite effect. Uses default sprite effect if null.</param>
/// <param name="transformMatrix">An optional matrix used to transform the sprite geometry. Uses <see cref="Matrix.Identity"/> if null.</param>
/// <exception cref="InvalidOperationException">Thrown if <see cref="Begin"/> is called next time without previous <see cref="End"/>.</exception>
/// <remarks>This method uses optional parameters.</remarks>
/// <remarks>The <see cref="Begin"/> Begin should be called before drawing commands, and you cannot call it again before subsequent <see cref="End"/>.</remarks>
// defaults
// Setup things now so a user can change them.
/// <summary>
/// Flushes all batched text and sprites to the screen.
/// </summary>
/// <remarks>This command should be called after <see cref="Begin"/> and drawing commands.</remarks>
/// <summary>
/// Submit a sprite for drawing in the current batch.
/// </summary>
/// <param name="texture">A texture.</param>
/// <param name="position">The drawing location on screen.</param>
/// <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
/// <param name="color">A color mask.</param>
/// <param name="rotation">A rotation of this sprite.</param>
/// <param name="origin">Center of the rotation. 0,0 by default.</param>
/// <param name="scale">A scaling of this sprite.</param>
/// <param name="effects">Modificators for drawing. Can be combined.</param>
/// <param name="layerDepth">A depth of the layer of this sprite.</param>
// set SortKey based on SpriteSortMode.
// Comparison of Texture objects.
// Comparison of Depth
// Comparison of Depth in reverse
/// <summary>
/// Submit a sprite for drawing in the current batch.
/// </summary>
/// <param name="texture">A texture.</param>
/// <param name="position">The drawing location on screen.</param>
/// <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
/// <param name="color">A color mask.</param>
/// <param name="rotation">A rotation of this sprite.</param>
/// <param name="origin">Center of the rotation. 0,0 by default.</param>
/// <param name="scale">A scaling of this sprite.</param>
/// <param name="effects">Modificators for drawing. Can be combined.</param>
/// <param name="layerDepth">A depth of the layer of this sprite.</param>
/// <summary>
/// Submit a sprite for drawing in the current batch.
/// </summary>
/// <param name="texture">A texture.</param>
/// <param name="destinationRectangle">The drawing bounds on screen.</param>
/// <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
/// <param name="color">A color mask.</param>
/// <param name="rotation">A rotation of this sprite.</param>
/// <param name="origin">Center of the rotation. 0,0 by default.</param>
/// <param name="effects">Modificators for drawing. Can be combined.</param>
/// <param name="layerDepth">A depth of the layer of this sprite.</param>
// set SortKey based on SpriteSortMode.
// Comparison of Texture objects.
// Comparison of Depth
// Comparison of Depth in reverse
// Mark the end of a draw operation for Immediate SpriteSortMode.
/// <summary>
/// Submit a sprite for drawing in the current batch.
/// </summary>
/// <param name="texture">A texture.</param>
/// <param name="position">The drawing location on screen.</param>
/// <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
/// <param name="color">A color mask.</param>
// set SortKey based on SpriteSortMode.
/// <summary>
/// Submit a sprite for drawing in the current batch.
/// </summary>
/// <param name="texture">A texture.</param>
/// <param name="destinationRectangle">The drawing bounds on screen.</param>
/// <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
/// <param name="color">A color mask.</param>
// set SortKey based on SpriteSortMode.
/// <summary>
/// Submit a sprite for drawing in the current batch.
/// </summary>
/// <param name="texture">A texture.</param>
/// <param name="position">The drawing location on screen.</param>
/// <param name="color">A color mask.</param>
// set SortKey based on SpriteSortMode.
/// <summary>
/// Submit a sprite for drawing in the current batch.
/// </summary>
/// <param name="texture">A texture.</param>
/// <param name="destinationRectangle">The drawing bounds on screen.</param>
/// <param name="color">A color mask.</param>
// set SortKey based on SpriteSortMode.
/// <summary>
/// Submit a text string of sprites for drawing in the current batch.
/// </summary>
/// <param name="spriteFont">A font.</param>
/// <param name="text">The text which will be drawn.</param>
/// <param name="position">The drawing location on screen.</param>
/// <param name="color">A color mask.</param>
// The first character on a line might have a negative left side bearing.
// In this scenario, SpriteBatch/SpriteFont normally offset the text to the right,
//  so that text does not hang off the left side of its rectangle.
// We need to flush if we're using Immediate sort mode.
/// <summary>
/// Submit a text string of sprites for drawing in the current batch.
/// </summary>
/// <param name="spriteFont">A font.</param>
/// <param name="text">The text which will be drawn.</param>
/// <param name="position">The drawing location on screen.</param>
/// <param name="color">A color mask.</param>
/// <param name="rotation">A rotation of this string.</param>
/// <param name="origin">Center of the rotation. 0,0 by default.</param>
/// <param name="scale">A scaling of this string.</param>
/// <param name="effects">Modificators for drawing. Can be combined.</param>
/// <param name="layerDepth">A depth of the layer of this string.</param>
/// <summary>
/// Submit a text string of sprites for drawing in the current batch.
/// </summary>
/// <param name="spriteFont">A font.</param>
/// <param name="text">The text which will be drawn.</param>
/// <param name="position">The drawing location on screen.</param>
/// <param name="color">A color mask.</param>
/// <param name="rotation">A rotation of this string.</param>
/// <param name="origin">Center of the rotation. 0,0 by default.</param>
/// <param name="scale">A scaling of this string.</param>
/// <param name="effects">Modificators for drawing. Can be combined.</param>
/// <param name="layerDepth">A depth of the layer of this string.</param>
// set SortKey based on SpriteSortMode.
// Comparison of Texture objects.
// Comparison of Depth
// Comparison of Depth in reverse
// The first character on a line might have a negative left side bearing.
// In this scenario, SpriteBatch/SpriteFont normally offset the text to the right,
//  so that text does not hang off the left side of its rectangle.
// We need to flush if we're using Immediate sort mode.
/// <summary>
/// Submit a text string of sprites for drawing in the current batch.
/// </summary>
/// <param name="spriteFont">A font.</param>
/// <param name="text">The text which will be drawn.</param>
/// <param name="position">The drawing location on screen.</param>
/// <param name="color">A color mask.</param>
// The first character on a line might have a negative left side bearing.
// In this scenario, SpriteBatch/SpriteFont normally offset the text to the right,
//  so that text does not hang off the left side of its rectangle.
// We need to flush if we're using Immediate sort mode.
/// <summary>
/// Submit a text string of sprites for drawing in the current batch.
/// </summary>
/// <param name="spriteFont">A font.</param>
/// <param name="text">The text which will be drawn.</param>
/// <param name="position">The drawing location on screen.</param>
/// <param name="color">A color mask.</param>
/// <param name="rotation">A rotation of this string.</param>
/// <param name="origin">Center of the rotation. 0,0 by default.</param>
/// <param name="scale">A scaling of this string.</param>
/// <param name="effects">Modificators for drawing. Can be combined.</param>
/// <param name="layerDepth">A depth of the layer of this string.</param>
/// <summary>
/// Submit a text string of sprites for drawing in the current batch.
/// </summary>
/// <param name="spriteFont">A font.</param>
/// <param name="text">The text which will be drawn.</param>
/// <param name="position">The drawing location on screen.</param>
/// <param name="color">A color mask.</param>
/// <param name="rotation">A rotation of this string.</param>
/// <param name="origin">Center of the rotation. 0,0 by default.</param>
/// <param name="scale">A scaling of this string.</param>
/// <param name="effects">Modificators for drawing. Can be combined.</param>
/// <param name="layerDepth">A depth of the layer of this string.</param>
// set SortKey based on SpriteSortMode.
// Comparison of Texture objects.
// Comparison of Depth
// Comparison of Depth in reverse
// The first character on a line might have a negative left side bearing.
// In this scenario, SpriteBatch/SpriteFont normally offset the text to the right,
//  so that text does not hang off the left side of its rectangle.
// We need to flush if we're using Immediate sort mode.
/// <summary>
/// Immediately releases the unmanaged resources used by this object.
/// </summary>
/// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\SpriteBatcher.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// This class handles the queueing of batch items into the GPU by creating the triangle tesselations
/// that are used to draw the sprite textures. This class supports int.MaxValue number of sprites to be
/// batched and will process them into short.MaxValue groups (strided by 6 for the number of vertices
/// sent to the GPU). 
/// </summary>
/*
/// <summary>
/// Initialization size for the batch item list and queue.
/// </summary>
/// <summary>
/// The maximum number of batch items that can be processed per iteration
/// </summary>
// 6 = 4 vertices unique and 2 shared, per quad
/// <summary>
/// Initialization size for the vertex array, in batch units.
/// </summary>
/// <summary>
/// The list of batch items to process.
/// </summary>
/// <summary>
/// Index pointer to the next available SpriteBatchItem in _batchItemList.
/// </summary>
/// <summary>
/// The target graphics device.
/// </summary>
/// <summary>
/// Vertex index array. The values in this array never change.
/// </summary>
// ensure chunks of 64.
/// <summary>
/// Reuse a previously allocated SpriteBatchItem from the item pool. 
/// if there is none available grow the pool and initialize new items.
/// </summary>
/// <returns></returns>
// grow by x1.5
// grow in chunks of 64.
/// <summary>
/// Resize and recreate the missing indices for the index and vertex position color buffers.
/// </summary>
/// <param name="numBatchItems"></param>
// Short circuit out of here because we have enough capacity.
/*
// Triangle 1
// Triangle 2
/// <summary>
/// Sorts the batch items and then groups batch drawing into maximal allowed batch sets that do not
/// overflow the 16 bit array indices for vertices.
/// </summary>
/// <param name="sortMode">The type of depth sorting desired for the rendering.</param>
/// <param name="effect">The custom effect to apply to the drawn geometry</param>
// nothing to do
// sort the batch items
// Determine how many iterations through the drawing code we need to make
// Iterate through the batches, doing short.MaxValue sets of vertices only.
// setup the vertexArray array
// Avoid the array checking overhead by using pointer indexing!
// Draw the batches
// if the texture changed, we need to flush and bind the new texture
// store the SpriteBatchItem data in our vertexArray
// Release the texture.
// flush the remaining vertexArray data
// Update our batch count to continue the process of culling down
// large batches
// return items to the pool.  
/// <summary>
/// Sends the triangle list to the graphics device. Here is where the actual drawing starts.
/// </summary>
/// <param name="start">Start index of vertices to draw. Not used except to compute the count of vertices to draw.</param>
/// <param name="end">End index of vertices to draw. Not used except to compute the count of vertices to draw.</param>
/// <param name="effect">The custom effect to apply to the geometry</param>
/// <param name="texture">The texture to draw.</param>
// If the effect is not null, then apply each pass and render the geometry
// Whatever happens in pass.Apply, make sure the texture being drawn
// ends up in Textures[0].
// If no custom effect is defined, then simply render.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\SpriteBatchItem.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO, Should we be just assigning the Depth Value to Z?
// According to http://blogs.msdn.com/b/shawnhar/archive/2011/01/12/spritebatch-billboards-in-a-3d-world.aspx
// We do.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\SpriteEffects.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines sprite visual options for mirroring.
/// </summary>
/// <summary>
/// No options specified.
/// </summary>
/// <summary>
/// Render the sprite reversed along the X axis.
/// </summary>
/// <summary>
/// Render the sprite reversed along the Y axis.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\SpriteFont.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Original code from SilverSprite Project
/// <summary>
/// All the glyphs in this SpriteFont.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="SpriteFont" /> class.
/// </summary>
/// <param name="texture">The font texture.</param>
/// <param name="glyphBounds">The rectangles in the font texture containing letters.</param>
/// <param name="cropping">The cropping rectangles, which are applied to the corresponding glyphBounds to calculate the bounds of the actual character.</param>
/// <param name="characters">The characters.</param>
/// <param name="lineSpacing">The line spacing (the distance from baseline to baseline) of the font.</param>
/// <param name="spacing">The spacing (tracking) between characters in the font.</param>
/// <param name="kerning">The letters kernings(X - left side bearing, Y - width and Z - right side bearing).</param>
/// <param name="defaultCharacter">The character that will be substituted when a given character is not included in the font.</param>
// Start a new region
// include character in currentRegion
// characters[i] < (regions.Peek().End+1)
/// <summary>
/// Gets the texture that this SpriteFont draws from.
/// </summary>
/// <remarks>Can be used to implement custom rendering of a SpriteFont</remarks>
/// <summary>
/// Returns a copy of the dictionary containing the glyphs in this SpriteFont.
/// </summary>
/// <returns>A new Dictionary containing all of the glyphs inthis SpriteFont</returns>
/// <remarks>Can be used to calculate character bounds when implementing custom SpriteFont rendering.</remarks>
/// <summary>
/// Gets a collection of the characters in the font.
/// </summary>
/// <summary>
/// Gets or sets the character that will be substituted when a
/// given character is not included in the font.
/// </summary>
// Get the default glyph index here once.
/// <summary>
/// Gets or sets the line spacing (the distance from baseline
/// to baseline) of the font.
/// </summary>
/// <summary>
/// Gets or sets the spacing (tracking) between characters in
/// the font.
/// </summary>
/// <summary>
/// Returns the size of a string when rendered in this font.
/// </summary>
/// <param name="text">The text to measure.</param>
/// <returns>The size, in pixels, of 'text' when rendered in
/// this font.</returns>
/// <summary>
/// Returns the size of the contents of a StringBuilder when
/// rendered in this font.
/// </summary>
/// <param name="text">The text to measure.</param>
/// <returns>The size, in pixels, of 'text' when rendered in
/// this font.</returns>
// The first character on a line might have a negative left side bearing.
// In this scenario, SpriteBatch/SpriteFont normally offset the text to the right,
//  so that text does not hang off the left side of its rectangle.
// Get region Index 
/// <summary>
/// Struct that defines the spacing, Kerning, and bounds of a character.
/// </summary>
/// <remarks>Provides the data necessary to implement custom SpriteFont rendering.</remarks>
/// <summary>
/// The char associated with this glyph.
/// </summary>
/// <summary>
/// Rectangle in the font texture where this letter exists.
/// </summary>
/// <summary>
/// Cropping applied to the BoundsInTexture to calculate the bounds of the actual character.
/// </summary>
/// <summary>
/// The amount of space between the left side ofthe character and its first pixel in the X dimention.
/// </summary>
/// <summary>
/// The amount of space between the right side of the character and its last pixel in the X dimention.
/// </summary>
/// <summary>
/// Width of the character before kerning is applied. 
/// </summary>
/// <summary>
/// Width of the character before kerning is applied. 
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\SpriteSortMode.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines sprite sort rendering options.
/// </summary>
/// <summary>
/// All sprites are drawing when <see cref="SpriteBatch.End"/> invokes, in order of draw call sequence. Depth is ignored.
/// </summary>
/// <summary>
/// Each sprite is drawing at individual draw call, instead of <see cref="SpriteBatch.End"/>. Depth is ignored.
/// </summary>
/// <summary>
/// Same as <see cref="SpriteSortMode.Deferred"/>, except sprites are sorted by texture prior to drawing. Depth is ignored.
/// </summary>
/// <summary>
/// Same as <see cref="SpriteSortMode.Deferred"/>, except sprites are sorted by depth in back-to-front order prior to drawing.
/// </summary>
/// <summary>
/// Same as <see cref="SpriteSortMode.Deferred"/>, except sprites are sorted by depth in front-to-back order prior to drawing.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\SurfaceFormat.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines types of surface formats.
/// </summary>
/// <summary>
/// Unsigned 32-bit ARGB pixel format for store 8 bits per channel. 
/// </summary>
/// <summary>
/// Unsigned 16-bit BGR pixel format for store 5 bits for blue, 6 bits for green, and 5 bits for red.   
/// </summary>
/// <summary>
/// Unsigned 16-bit BGRA pixel format where 5 bits reserved for each color and last bit is reserved for alpha.
/// </summary>
/// <summary>
/// Unsigned 16-bit BGRA pixel format for store 4 bits per channel.
/// </summary>
/// <summary>
/// DXT1. Texture format with compression. Surface dimensions must be a multiple 4.
/// </summary>
/// <summary>
/// DXT3. Texture format with compression. Surface dimensions must be a multiple 4.
/// </summary>
/// <summary>
/// DXT5. Texture format with compression. Surface dimensions must be a multiple 4.
/// </summary>
/// <summary>
/// Signed 16-bit bump-map format for store 8 bits for <c>u</c> and <c>v</c> data.
/// </summary>
/// <summary>
/// Signed 32-bit bump-map format for store 8 bits per channel.
/// </summary>
/// <summary>
/// Unsigned 32-bit RGBA pixel format for store 10 bits for each color and 2 bits for alpha.
/// </summary>
/// <summary>
/// Unsigned 32-bit RG pixel format using 16 bits per channel.
/// </summary>
/// <summary>
/// Unsigned 64-bit RGBA pixel format using 16 bits per channel.
/// </summary>
/// <summary>
/// Unsigned A 8-bit format for store 8 bits to alpha channel.
/// </summary>
/// <summary>
/// IEEE 32-bit R float format for store 32 bits to red channel.
/// </summary>
/// <summary>
/// IEEE 64-bit RG float format for store 32 bits per channel.
/// </summary>
/// <summary>
/// IEEE 128-bit RGBA float format for store 32 bits per channel.
/// </summary>
/// <summary>
/// Float 16-bit R format for store 16 bits to red channel.   
/// </summary>
/// <summary>
/// Float 32-bit RG format for store 16 bits per channel. 
/// </summary>
/// <summary>
/// Float 64-bit ARGB format for store 16 bits per channel. 
/// </summary>
/// <summary>
/// Float pixel format for high dynamic range data.
/// </summary>
/// <summary>
/// For compatibility with WPF D3DImage.
/// </summary>
// B8G8R8X8
/// <summary>
/// For compatibility with WPF D3DImage.
/// </summary>
// B8G8R8A8    
/// <summary>
/// Unsigned 32-bit RGBA sRGB pixel format that supports 8 bits per channel.
/// </summary>
/// <summary>
/// Unsigned 32-bit sRGB pixel format that supports 8 bits per channel. 8 bits are unused.
/// </summary>
/// <summary>
/// Unsigned 32-bit sRGB pixel format that supports 8 bits per channel.
/// </summary>
/// <summary>
/// DXT1. sRGB texture format with compression. Surface dimensions must be a multiple of 4.
/// </summary>
/// <summary>
/// DXT3. sRGB texture format with compression. Surface dimensions must be a multiple of 4.
/// </summary>
/// <summary>
/// DXT5. sRGB texture format with compression. Surface dimensions must be a multiple of 4.
/// </summary>
/// <summary>
/// PowerVR texture compression format (iOS and Android).
/// </summary>
/// <summary>
/// PowerVR texture compression format (iOS and Android).
/// </summary>
/// <summary>
/// PowerVR texture compression format (iOS and Android).
/// </summary>
/// <summary>
/// PowerVR texture compression format (iOS and Android).
/// </summary>
/// <summary>
/// Ericcson Texture Compression (Android)
/// </summary>
/// <summary>
/// DXT1 version where 1-bit alpha is used.
/// </summary>
/// <summary>
/// ATC/ATITC compression (Android)
/// </summary>
/// <summary>
/// ATC/ATITC compression (Android)
/// </summary>
/// <summary>
/// Etc2 RGB8 (Android/iOS withh OpenglES 3.0)
/// </summary>
/// <summary>
/// Etc2 SRGB8 (Android/iOS withh OpenglES 3.0)
/// </summary>
/// <summary>
/// Etc2 RGB8A1 (Android/iOS withh OpenglES 3.0)
/// </summary>
/// <summary>
/// Etc2 SRGB8A1 (Android/iOS withh OpenglES 3.0)
/// </summary>
/// <summary>
/// Etc2 RGBA8 EAC (Android/iOS withh OpenglES 3.0)
/// </summary>
/// <summary>
/// Etc2 SRGB8A8 EAC (Android/iOS withh OpenglES 3.0)
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Texture.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets a unique identifier of this texture for sorting purposes.
/// </summary>
/// <remarks>
/// <para>For example, this value is used by <see cref="SpriteBatch"/> when drawing with <see cref="SpriteSortMode.Texture"/>.</para>
/// <para>The value is an implementation detail and may change between application launches or MonoGame versions.
/// It is only guaranteed to stay consistent during application lifetime.</para>
/// </remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Texture2D.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the dimensions of the texture
/// </summary>
/// <summary>
/// Creates a new texture of the given size
/// </summary>
/// <param name="graphicsDevice"></param>
/// <param name="width"></param>
/// <param name="height"></param>
/// <summary>
/// Creates a new texture of a given size with a surface format and optional mipmaps 
/// </summary>
/// <param name="graphicsDevice"></param>
/// <param name="width"></param>
/// <param name="height"></param>
/// <param name="mipmap"></param>
/// <param name="format"></param>
/// <summary>
/// Creates a new texture array of a given size with a surface format and optional mipmaps.
/// Throws ArgumentException if the current GraphicsDevice can't work with texture arrays
/// </summary>
/// <param name="graphicsDevice"></param>
/// <param name="width"></param>
/// <param name="height"></param>
/// <param name="mipmap"></param>
/// <param name="format"></param>
/// <param name="arraySize"></param>
/// <summary>
///  Creates a new texture of a given size with a surface format and optional mipmaps.
/// </summary>
/// <param name="graphicsDevice"></param>
/// <param name="width"></param>
/// <param name="height"></param>
/// <param name="mipmap"></param>
/// <param name="format"></param>
/// <param name="type"></param>
// Texture will be assigned by the swap chain.
/// <summary>
/// Gets the width of the texture in pixels.
/// </summary>
/// <summary>
/// Gets the height of the texture in pixels.
/// </summary>
/// <summary>
/// Changes the pixels of the texture
/// Throws ArgumentNullException if data is null
/// Throws ArgumentException if arraySlice is greater than 0, and the GraphicsDevice does not support texture arrays
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="level">Layer of the texture to modify</param>
/// <param name="arraySlice">Index inside the texture array</param>
/// <param name="rect">Area to modify</param>
/// <param name="data">New data for the texture</param>
/// <param name="startIndex">Start position of data</param>
/// <param name="elementCount"></param>
/// <summary>
/// Changes the pixels of the texture
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="level">Layer of the texture to modify</param>
/// <param name="rect">Area to modify</param>
/// <param name="data">New data for the texture</param>
/// <param name="startIndex">Start position of data</param>
/// <param name="elementCount"></param>
/// <summary>
/// Changes the texture's pixels
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="data">New data for the texture</param>
/// <param name="startIndex">Start position of data</param>
/// <param name="elementCount"></param>
/// <summary>
/// Changes the texture's pixels
/// </summary>
/// <typeparam name="T">New data for the texture</typeparam>
/// <param name="data"></param>
/// <summary>
/// Retrieves the contents of the texture
/// Throws ArgumentException if data is null, data.length is too short or
/// if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="level">Layer of the texture</param>
/// <param name="arraySlice">Index inside the texture array</param>
/// <param name="rect">Area of the texture to retrieve</param>
/// <param name="data">Destination array for the data</param>
/// <param name="startIndex">Starting index of data where to write the pixel data</param>
/// <param name="elementCount">Number of pixels to read</param>
/// <summary>
/// Retrieves the contents of the texture
/// Throws ArgumentException if data is null, data.length is too short or
/// if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="level">Layer of the texture</param>
/// <param name="rect">Area of the texture</param>
/// <param name="data">Destination array for the texture data</param>
/// <param name="startIndex">First position in data where to write the pixel data</param>
/// <param name="elementCount">Number of pixels to read</param>
/// <summary>
/// Retrieves the contents of the texture
/// Throws ArgumentException if data is null, data.length is too short or
/// if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="data">Destination array for the texture data</param>
/// <param name="startIndex">First position in data where to write the pixel data</param>
/// <param name="elementCount">Number of pixels to read</param>
/// <summary>
/// Retrieves the contents of the texture
/// Throws ArgumentException if data is null, data.length is too short or
/// if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="data">Destination array for the texture data</param>
/// <summary>
/// Creates a <see cref="Texture2D"/> from a file, supported formats bmp, gif, jpg, png, tif and dds (only for simple textures).
/// May work with other formats, but will not work with tga files.
/// This internally calls <see cref="FromStream"/>.
/// </summary>
/// <param name="graphicsDevice">The graphics device to use to create the texture.</param>
/// <param name="path">The path to the image file.</param>
/// <returns>The <see cref="Texture2D"/> created from the given file.</returns>
/// <remarks>Note that different image decoders may generate slight differences between platforms, but perceptually 
/// the images should be identical.  This call does not premultiply the image alpha, but areas of zero alpha will
/// result in black color data.
/// </remarks>
/// <summary>
/// Creates a <see cref="Texture2D"/> from a stream, supported formats bmp, gif, jpg, png, tif and dds (only for simple textures).
/// May work with other formats, but will not work with tga files.
/// </summary>
/// <param name="graphicsDevice">The graphics device to use to create the texture.</param>
/// <param name="stream">The stream from which to read the image data.</param>
/// <returns>The <see cref="Texture2D"/> created from the image stream.</returns>
/// <remarks>Note that different image decoders may generate slight differences between platforms, but perceptually 
/// the images should be identical.  This call does not premultiply the image alpha, but areas of zero alpha will
/// result in black color data.
/// </remarks>
/// <summary>
/// Converts the texture to a JPG image
/// </summary>
/// <param name="stream">Destination for the image</param>
/// <param name="width"></param>
/// <param name="height"></param>
/// <summary>
/// Converts the texture to a PNG image
/// </summary>
/// <param name="stream">Destination for the image</param>
/// <param name="width"></param>
/// <param name="height"></param>
// This method allows games that use Texture2D.FromStream 
// to reload their textures after the GL context is lost.
//Converts Pixel Data from ARGB to ABGR
// round x and y down to next multiple of block size; width and height up to next multiple of block size
// OpenGL only: The last two mip levels require the width and height to be
// passed as 2x2 and 1x1, but there needs to be enough data passed to occupy
// a full block.
// Export as a greyscale image.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Texture3D.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets a copy of 3D texture data, specifying a mipmap level, source box, start index, and number of elements.
/// </summary>
/// <typeparam name="T">The type of the elements in the array.</typeparam>
/// <param name="level">Mipmap level.</param>
/// <param name="left">Position of the left side of the box on the x-axis.</param>
/// <param name="top">Position of the top of the box on the y-axis.</param>
/// <param name="right">Position of the right side of the box on the x-axis.</param>
/// <param name="bottom">Position of the bottom of the box on the y-axis.</param>
/// <param name="front">Position of the front of the box on the z-axis.</param>
/// <param name="back">Position of the back of the box on the z-axis.</param>
/// <param name="data">Array of data.</param>
/// <param name="startIndex">Index of the first element to get.</param>
/// <param name="elementCount">Number of elements to get.</param>
/// <summary>
/// Gets a copy of 3D texture data, specifying a start index and number of elements.
/// </summary>
/// <typeparam name="T">The type of the elements in the array.</typeparam>
/// <param name="data">Array of data.</param>
/// <param name="startIndex">Index of the first element to get.</param>
/// <param name="elementCount">Number of elements to get.</param>
/// <summary>
/// Gets a copy of 3D texture data.
/// </summary>
/// <typeparam name="T">The type of the elements in the array.</typeparam>
/// <param name="data">Array of data.</param>
// Disallow negative box size
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\TextureCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Marks all texture slots as dirty.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\TextureCube.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the width and height of the cube map face in pixels.
/// </summary>
/// <value>The width and height of a cube map face in pixels.</value>
/// <summary>
/// Gets a copy of cube texture data specifying a cubemap face.
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="cubeMapFace">The cube map face.</param>
/// <param name="data">The data.</param>
// round x and y down to next multiple of four; width and height up to next multiple of four
// OpenGL only: The last two mip levels require the width and height to be
// passed as 2x2 and 1x1, but there needs to be enough data passed to occupy
// a 4x4 block.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Viewport.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes the view bounds for render-target surface.
/// </summary>
/// <summary>
/// The height of the bounds in pixels.
/// </summary>
/// <summary>
/// The upper limit of depth of this viewport.
/// </summary>
/// <summary>
/// The lower limit of depth of this viewport.
/// </summary>
/// <summary>
/// The width of the bounds in pixels.
/// </summary>
/// <summary>
/// The y coordinate of the beginning of this viewport.
/// </summary>
/// <summary>
/// The x coordinate of the beginning of this viewport.
/// </summary>
/// <summary>
/// Gets the aspect ratio of this <see cref="Viewport"/>, which is width / height. 
/// </summary>
/// <summary>
/// Gets or sets a boundary of this <see cref="Viewport"/>.
/// </summary>
/// <summary>
/// Returns the subset of the viewport that is guaranteed to be visible on a lower quality display.
/// </summary>
/// <summary>
/// Constructs a viewport from the given values. The <see cref="MinDepth"/> will be 0.0 and <see cref="MaxDepth"/> will be 1.0.
/// </summary>
/// <param name="x">The x coordinate of the upper-left corner of the view bounds in pixels.</param>
/// <param name="y">The y coordinate of the upper-left corner of the view bounds in pixels.</param>
/// <param name="width">The width of the view bounds in pixels.</param>
/// <param name="height">The height of the view bounds in pixels.</param>
/// <summary>
/// Constructs a viewport from the given values.
/// </summary>
/// <param name="x">The x coordinate of the upper-left corner of the view bounds in pixels.</param>
/// <param name="y">The y coordinate of the upper-left corner of the view bounds in pixels.</param>
/// <param name="width">The width of the view bounds in pixels.</param>
/// <param name="height">The height of the view bounds in pixels.</param>
/// <param name="minDepth">The lower limit of depth.</param>
/// <param name="maxDepth">The upper limit of depth.</param>
/// <summary>
/// Creates a new instance of <see cref="Viewport"/> struct.
/// </summary>
/// <param name="bounds">A <see cref="Rectangle"/> that defines the location and size of the <see cref="Viewport"/> in a render target.</param>
/// <summary>
/// Projects a <see cref="Vector3"/> from model space into screen space.
/// The source point is transformed from model space to world space by the world matrix,
/// then from world space to view space by the view matrix, and
/// finally from view space to screen space by the projection matrix.
/// </summary>
/// <param name="source">The <see cref="Vector3"/> to project.</param>
/// <param name="projection">The projection <see cref="Matrix"/>.</param>
/// <param name="view">The view <see cref="Matrix"/>.</param>
/// <param name="world">The world <see cref="Matrix"/>.</param>
/// <returns></returns>
/// <summary>
/// Unprojects a <see cref="Vector3"/> from screen space into model space.
/// The source point is transformed from screen space to view space by the inverse of the projection matrix,
/// then from view space to world space by the inverse of the view matrix, and
/// finally from world space to model space by the inverse of the world matrix.
/// Note source.Z must be less than or equal to MaxDepth.
/// </summary>
/// <param name="source">The <see cref="Vector3"/> to unproject.</param>
/// <param name="projection">The projection <see cref="Matrix"/>.</param>
/// <param name="view">The view <see cref="Matrix"/>.</param>
/// <param name="world">The world <see cref="Matrix"/>.</param>
/// <returns></returns>
/// <summary>
/// Returns a <see cref="String"/> representation of this <see cref="Viewport"/> in the format:
/// {X:[<see cref="X"/>] Y:[<see cref="Y"/>] Width:[<see cref="Width"/>] Height:[<see cref="Height"/>] MinDepth:[<see cref="MinDepth"/>] MaxDepth:[<see cref="MaxDepth"/>]}
/// </summary>
/// <returns>A <see cref="String"/> representation of this <see cref="Viewport"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\AlphaTestEffect.cs
//-----------------------------------------------------------------------------
// AlphaTestEffect.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
/// <summary>
/// Built-in effect that supports alpha testing.
/// </summary>
/// <summary>
/// Gets or sets the world matrix.
/// </summary>
/// <summary>
/// Gets or sets the view matrix.
/// </summary>
/// <summary>
/// Gets or sets the projection matrix.
/// </summary>
/// <summary>
/// Gets or sets the material diffuse color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets or sets the material alpha.
/// </summary>
/// <summary>
/// Gets or sets the fog enable flag.
/// </summary>
/// <summary>
/// Gets or sets the fog start distance.
/// </summary>
/// <summary>
/// Gets or sets the fog end distance.
/// </summary>
/// <summary>
/// Gets or sets the fog color.
/// </summary>
/// <summary>
/// Gets or sets the current texture.
/// </summary>
/// <summary>
/// Gets or sets whether vertex color is enabled.
/// </summary>
/// <summary>
/// Gets or sets the alpha compare function (default Greater).
/// </summary>
/// <summary>
/// Gets or sets the reference alpha value (default 0).
/// </summary>
/// <summary>
/// Creates a new AlphaTestEffect with default parameter settings.
/// </summary>
/// <summary>
/// Creates a new AlphaTestEffect by cloning parameter settings from an existing instance.
/// </summary>
/// <summary>
/// Creates a clone of the current AlphaTestEffect instance.
/// </summary>
/// <summary>
/// Looks up shortcut references to our effect parameters.
/// </summary>
/// <summary>
/// Lazily computes derived parameter values immediately before applying the effect.
/// </summary>
// Recompute the world+view+projection matrix or fog vector?
// Recompute the diffuse/alpha material color parameter?
// Recompute the alpha test settings?
// Convert reference alpha from 8 bit integer to 0-1 float format.
// Comparison tolerance of half the 8 bit integer precision.
// Shader will evaluate: clip((a < x) ? z : w)
// Shader will evaluate: clip((a < x) ? z : w)
// Shader will evaluate: clip((a < x) ? z : w)
// Shader will evaluate: clip((a < x) ? z : w)
// Shader will evaluate: clip((abs(a - x) < Y) ? z : w)
// Shader will evaluate: clip((abs(a - x) < Y) ? z : w)
// Shader will evaluate: clip((a < x) ? z : w)
// Shader will evaluate: clip((a < x) ? z : w)
// If we changed between less/greater vs. equal/notequal
// compare modes, we must also update the shader index.
// Recompute the shader index?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\BasicEffect.cs
//-----------------------------------------------------------------------------
// BasicEffect.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
/// <summary>
/// Built-in effect that supports optional texturing, vertex coloring, fog, and lighting.
/// </summary>
/// <summary>
/// Gets or sets the world matrix.
/// </summary>
/// <summary>
/// Gets or sets the view matrix.
/// </summary>
/// <summary>
/// Gets or sets the projection matrix.
/// </summary>
/// <summary>
/// Gets or sets the material diffuse color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets or sets the material emissive color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets or sets the material specular color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets or sets the material specular power.
/// </summary>
/// <summary>
/// Gets or sets the material alpha.
/// </summary>
/// <inheritdoc/>
/// <summary>
/// Gets or sets the per-pixel lighting prefer flag.
/// </summary>
/// <inheritdoc/>
/// <inheritdoc/>
/// <inheritdoc/>
/// <inheritdoc/>
/// <inheritdoc/>
/// <inheritdoc/>
/// <inheritdoc/>
/// <inheritdoc/>
/// <summary>
/// Gets or sets whether texturing is enabled.
/// </summary>
/// <summary>
/// Gets or sets the current texture.
/// </summary>
/// <summary>
/// Gets or sets whether vertex color is enabled.
/// </summary>
/// <summary>
/// Creates a new BasicEffect with default parameter settings.
/// </summary>
/// <summary>
/// Creates a new BasicEffect by cloning parameter settings from an existing instance.
/// </summary>
/// <summary>
/// Creates a clone of the current BasicEffect instance.
/// </summary>
/// <inheritdoc/>
/// <summary>
/// Looks up shortcut references to our effect parameters.
/// </summary>
/// <summary>
/// Lazily computes derived parameter values immediately before applying the effect.
/// </summary>
// Recompute the world+view+projection matrix or fog vector?
// Recompute the diffuse/emissive/alpha material color parameters?
// Recompute the world inverse transpose and eye position?
// Check if we can use the only-bother-with-the-first-light shader optimization.
// Recompute the shader index?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\DualTextureEffect.cs
//-----------------------------------------------------------------------------
// DualTextureEffect.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
/// <summary>
/// Built-in effect that supports two-layer multitexturing.
/// </summary>
/// <summary>
/// Gets or sets the world matrix.
/// </summary>
/// <summary>
/// Gets or sets the view matrix.
/// </summary>
/// <summary>
/// Gets or sets the projection matrix.
/// </summary>
/// <summary>
/// Gets or sets the material diffuse color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets or sets the material alpha.
/// </summary>
/// <summary>
/// Gets or sets the fog enable flag.
/// </summary>
/// <summary>
/// Gets or sets the fog start distance.
/// </summary>
/// <summary>
/// Gets or sets the fog end distance.
/// </summary>
/// <summary>
/// Gets or sets the fog color.
/// </summary>
/// <summary>
/// Gets or sets the current base texture.
/// </summary>
/// <summary>
/// Gets or sets the current overlay texture.
/// </summary>
/// <summary>
/// Gets or sets whether vertex color is enabled.
/// </summary>
/// <summary>
/// Creates a new DualTextureEffect with default parameter settings.
/// </summary>
/// <summary>
/// Creates a new DualTextureEffect by cloning parameter settings from an existing instance.
/// </summary>
/// <summary>
/// Creates a clone of the current DualTextureEffect instance.
/// </summary>
/// <summary>
/// Looks up shortcut references to our effect parameters.
/// </summary>
/// <summary>
/// Lazily computes derived parameter values immediately before applying the effect.
/// </summary>
// Recompute the world+view+projection matrix or fog vector?
// Recompute the diffuse/alpha material color parameter?
// Recompute the shader index?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\Effect.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The MonoGame Effect file format header identifier ("MGFX"). 
/// </summary>
/// <summary>
/// The current MonoGame Effect file format versions
/// used to detect old packaged content.
/// </summary>
/// <remarks>
/// We should avoid supporting old versions for very long if at all 
/// as users should be rebuilding content when packaging their game.
/// </remarks>
// By default we currently cache all unique byte streams
// and use cloning to populate the effect with parameters,
// techniques, and passes.
//
// This means all the immutable types in an effect:
//
//  - Shaders
//  - Annotations
//  - Names
//  - State Objects
//
// Are shared for every instance of an effect while the 
// parameter values and constant buffers are copied.
//
// This might need to change slightly if/when we support
// shared constant buffers as 'new' should return unique
// effects without any shared instance state.
//Read the header
// First look for it in the cache.
//
// Create one.
// Cache the effect for later in its original unmodified state.
// Clone it.
/// <summary>
/// Clone the source into this existing object.
/// </summary>
/// <remarks>
/// Note this is not overloaded in derived classes on purpose.  This is
/// only a reason this exists is for caching effects.
/// </remarks>
/// <param name="cloneSource">The source effect to clone from.</param>
// Copy the mutable members of the effect.
// Make a copy of the immutable constant buffers.
// Find and set the current technique.
// Take a reference to the original shader list.
/// <summary>
/// Returns a deep copy of the effect where immutable types 
/// are shared and mutable data is duplicated.
/// </summary>
/// <remarks>
/// See "Cloning an Effect" in MSDN:
/// http://msdn.microsoft.com/en-us/library/windows/desktop/ff476138(v=vs.85).aspx
/// </remarks>
/// <returns>The cloned effect.</returns>
// Only the clone source can dispose the shaders.
// TODO: Maybe we should be reading in a string 
// table here to save some bytes in the file.
// Read in all the constant buffers.
// Create the backing system memory buffer.
// Read the parameter index values.
// Read in all the shader objects.
// Read in the parameters.
// Read the techniques.
// TODO: Annotations are not implemented!
// Get the vertex shader.
// Get the pixel shader.
// Under most platforms we properly store integers and 
// booleans in an integer type.
//
// MojoShader on the otherhand stores everything in float
// types which is why this code is disabled under OpenGL.
// TODO: We have not investigated what a string
// type should do in the parameter list.  Till then
// throw to let the user know.
// NOTE: We skip over all other types as they 
// don't get added to the constant buffer.
// Effect File Reader
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectAnnotation.cs
// TODO: This class needs to be finished!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectAnnotationCollection.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectHelpers.cs
//#region File Description
//-----------------------------------------------------------------------------
// EffectHelpers.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
//#endregion
//#region Using Statements
//#endregion
/// <summary>
/// Track which effect parameters need to be recomputed during the next OnApply.
/// </summary>
/// <summary>
/// Helper code shared between the various built-in effects.
/// </summary>
/// <summary>
/// Sets up the standard key/fill/back lighting rig.
/// </summary>
// Key light.
// Fill light.
// Back light.
// Ambient light.
/// <summary>
/// Lazily recomputes the world+view+projection matrix and
/// fog vector based on the current effect parameter settings.
/// </summary>
// Recompute the world+view+projection matrix?
// Recompute the fog vector?
// When fog is disabled, make sure the fog vector is reset to zero.
/// <summary>
/// Sets a vector which can be dotted with the object space vertex position to compute fog amount.
/// </summary>
// Degenerate case: force everything to 100% fogged if start and end are the same.
// We want to transform vertex positions into view space, take the resulting
// Z value, then scale and offset according to the fog start/end distances.
// Because we only care about the Z component, the shader can do all this
// with a single dot product, using only the Z row of the world+view matrix.
/// <summary>
/// Lazily recomputes the world inverse transpose matrix and
/// eye position based on the current effect parameter settings.
/// </summary>
// Set the world and world inverse transpose matrices.
// Set the eye position.
/// <summary>
/// Sets the diffuse/emissive/alpha material color parameters.
/// </summary>
// Desired lighting model:
//
//     ((AmbientLightColor + sum(diffuse directional light)) * DiffuseColor) + EmissiveColor
//
// When lighting is disabled, ambient and directional lights are ignored, leaving:
//
//     DiffuseColor + EmissiveColor
//
// For the lighting disabled case, we can save one shader instruction by precomputing
// diffuse+emissive on the CPU, after which the shader can use DiffuseColor directly,
// ignoring its emissive parameter.
//
// When lighting is enabled, we can merge the ambient and emissive settings. If we
// set our emissive parameter to emissive+(ambient*diffuse), the shader no longer
// needs to bother adding the ambient contribution, simplifying its computation to:
//
//     (sum(diffuse directional light) * DiffuseColor) + EmissiveColor
//
// For futher optimization goodness, we merge material alpha with the diffuse
// color parameter, and premultiply all color values by this alpha.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectMaterial.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectParameter.cs
/// <summary>
/// The next state key used when an effect parameter
/// is updated by any of the 'set' methods.
/// </summary>
// Share all the immutable types.
// Clone the mutable types.
// The data is mutable, so we have to clone it.
// TODO: Using object adds alot of boxing/unboxing overhead
// and garbage generation.  We should consider a templated
// type implementation to fix this!
/// <summary>
/// The current state key which is used to detect
/// if the parameter value has been changed.
/// </summary>
/// <summary>
/// Property referenced by the DebuggerDisplayAttribute.
/// </summary>
// Object types are stored directly in the Data property.
// Display Data's string value.
// Matrix types are stored in a float[16] which we don't really have room for.
// Display "...".
// Scalar types are stored as a float[1].
// Display the first (and only) element's string value.                    
// Vector types are stored as an Array<Type>.
// Display the string value of each array element.
// Handle additional cases here...
// MojoShader encodes even booleans into a float.
/*
// MojoShader encodes integers into a float.
/*
// TODO: Should this fetch int and bool as a float?
// MojoShader encodes even booleans into a float.
/*
// MojoShader encodes integers into a float.
// HLSL expects matrices to be transposed by default.
// These unrolled loops do the transpose during assignment.
// HLSL expects matrices to be transposed by default, so copying them straight
// from the in-memory version effectively transposes them back to row-major.
/*
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectParameterClass.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines classes for effect parameters and shader constants.
/// </summary>
/// <summary>
/// Scalar class type.
/// </summary>
/// <summary>
/// Vector class type.
/// </summary>
/// <summary>
/// Matrix class type.
/// </summary>
/// <summary>
/// Class type for textures, shaders or strings. 
/// </summary>
/// <summary>
/// Structure class type.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectParameterCollection.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectParameterType.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines types for effect parameters and shader constants.
/// </summary>
/// <summary>
/// Pointer to void type.
/// </summary>
/// <summary>
/// Boolean type. Any non-zero will be <c>true</c>; <c>false</c> otherwise.
/// </summary>
/// <summary>
/// 32-bit integer type.
/// </summary>
/// <summary>
/// Float type.
/// </summary>
/// <summary>
/// String type.
/// </summary>
/// <summary>
/// Any texture type.
/// </summary>
/// <summary>
/// 1D-texture type.
/// </summary>
/// <summary>
/// 2D-texture type.
/// </summary>
/// <summary>
/// 3D-texture type.
/// </summary>
/// <summary>
/// Cubic texture type.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectPass.cs
// Share all the immutable types.
// Set/get the correct shader handle/cleanups.
// Update the texture parameters.
// Update the constant buffers.
// Update the texture parameters.
// Update the constant buffers.
// Set the render states if we have some.
// If there is a sampler state set it.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectPassCollection.cs
// TODO: Add a name to pass lookup table.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectResource.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Internal helper for accessing the bytecode for stock effects.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectTechnique.cs
// Share all the immutable types.
// Clone the mutable types.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EffectTechniqueCollection.cs
// TODO: Add a name to technique lookup table.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\EnvironmentMapEffect.cs
//-----------------------------------------------------------------------------
// EnvironmentMapEffect.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
/// <summary>
/// Built-in effect that supports environment mapping.
/// </summary>
/// <summary>
/// Gets or sets the world matrix.
/// </summary>
/// <summary>
/// Gets or sets the view matrix.
/// </summary>
/// <summary>
/// Gets or sets the projection matrix.
/// </summary>
/// <summary>
/// Gets or sets the material diffuse color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets or sets the material emissive color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets or sets the material alpha.
/// </summary>
/// <summary>
/// Gets or sets the ambient light color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets the first directional light.
/// </summary>
/// <summary>
/// Gets the second directional light.
/// </summary>
/// <summary>
/// Gets the third directional light.
/// </summary>
/// <summary>
/// Gets or sets the fog enable flag.
/// </summary>
/// <summary>
/// Gets or sets the fog start distance.
/// </summary>
/// <summary>
/// Gets or sets the fog end distance.
/// </summary>
/// <summary>
/// Gets or sets the fog color.
/// </summary>
/// <summary>
/// Gets or sets the current texture.
/// </summary>
/// <summary>
/// Gets or sets the current environment map texture.
/// </summary>
/// <summary>
/// Gets or sets the amount of the environment map RGB that will be blended over 
/// the base texture. Range 0 to 1, default 1. If set to zero, the RGB channels 
/// of the environment map will completely ignored (but the environment map alpha 
/// may still be visible if EnvironmentMapSpecular is greater than zero).
/// </summary>
/// <summary>
/// Gets or sets the amount of the environment map alpha channel that will 
/// be added to the base texture. Range 0 to 1, default 0. This can be used 
/// to implement cheap specular lighting, by encoding one or more specular 
/// highlight patterns into the environment map alpha channel, then setting 
/// EnvironmentMapSpecular to the desired specular light color.
/// </summary>
/// <summary>
/// Gets or sets the Fresnel factor used for the environment map blending. 
/// Higher values make the environment map only visible around the silhouette 
/// edges of the object, while lower values make it visible everywhere. 
/// Setting this property to 0 disables Fresnel entirely, making the 
/// environment map equally visible regardless of view angle. The default is 
/// 1. Fresnel only affects the environment map RGB (the intensity of which is 
/// controlled by EnvironmentMapAmount). The alpha contribution (controlled by 
/// EnvironmentMapSpecular) is not affected by the Fresnel setting.
/// </summary>
/// <summary>
/// This effect requires lighting, so we explicitly implement
/// IEffectLights.LightingEnabled, and do not allow turning it off.
/// </summary>
/// <summary>
/// Creates a new EnvironmentMapEffect with default parameter settings.
/// </summary>
/// <summary>
/// Creates a new EnvironmentMapEffect by cloning parameter settings from an existing instance.
/// </summary>
/// <summary>
/// Creates a clone of the current EnvironmentMapEffect instance.
/// </summary>
/// <summary>
/// Sets up the standard key/fill/back lighting rig.
/// </summary>
/// <summary>
/// Looks up shortcut references to our effect parameters.
/// </summary>
/// <summary>
/// Lazily computes derived parameter values immediately before applying the effect.
/// </summary>
// Recompute the world+view+projection matrix or fog vector?
// Recompute the world inverse transpose and eye position?
// Recompute the diffuse/emissive/alpha material color parameters?
// Check if we can use the only-bother-with-the-first-light shader optimization.
// Recompute the shader index?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\IEffectFog.cs
// #region License
// /*
/*
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
// #endregion License
// 
/// <summary>
/// The common effect fog rendering parameters.
/// </summary>
/// <summary>
/// The floating point fog color.
/// </summary>
/// <summary>
/// Used to toggle the rendering of fog.
/// </summary>
/// <summary>
/// The world space distance from the camera at which fogging is fully applied.
/// </summary>
/// <remarks>
/// FogEnd should be greater than FogStart.  If FogEnd and FogStart 
/// are the same value everything is fully fogged.
/// </remarks>
/// <summary>
/// The world space distance from the camera at which fogging begins.
/// </summary>
/// <remarks>
/// FogStart should be less than FogEnd.  If FogEnd and FogStart are the
/// same value everything is fully fogged.
/// </remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\IEffectLights.cs
// #region License
// /*
/*
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
// #endregion License
// 
/// <summary>
/// The common effect light rendering parameters.
/// </summary>
/// <summary>
/// The floating point ambient light color.
/// </summary>
/// <summary>
/// Returns the first directional light.
/// </summary>
/// <summary>
/// Returns the second directional light.
/// </summary>
/// <summary>
/// Returns the third directional light.
/// </summary>
/// <summary>
/// Toggles the rendering of lighting.
/// </summary>
/// <summary>
/// Initializes the lights to the standard key/fill/back lighting rig.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\IEffectMatrices.cs
// #region License
// /*
/*
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
// #endregion License
// 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\SkinnedEffect.cs
//-----------------------------------------------------------------------------
// SkinnedEffect.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
/// <summary>
/// Built-in effect for rendering skinned character models.
/// </summary>
/// <summary>
/// Gets or sets the world matrix.
/// </summary>
/// <summary>
/// Gets or sets the view matrix.
/// </summary>
/// <summary>
/// Gets or sets the projection matrix.
/// </summary>
/// <summary>
/// Gets or sets the material diffuse color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets or sets the material emissive color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets or sets the material specular color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets or sets the material specular power.
/// </summary>
/// <summary>
/// Gets or sets the material alpha.
/// </summary>
/// <summary>
/// Gets or sets the per-pixel lighting prefer flag.
/// </summary>
/// <summary>
/// Gets or sets the ambient light color (range 0 to 1).
/// </summary>
/// <summary>
/// Gets the first directional light.
/// </summary>
/// <summary>
/// Gets the second directional light.
/// </summary>
/// <summary>
/// Gets the third directional light.
/// </summary>
/// <summary>
/// Gets or sets the fog enable flag.
/// </summary>
/// <summary>
/// Gets or sets the fog start distance.
/// </summary>
/// <summary>
/// Gets or sets the fog end distance.
/// </summary>
/// <summary>
/// Gets or sets the fog color.
/// </summary>
/// <summary>
/// Gets or sets the current texture.
/// </summary>
/// <summary>
/// Gets or sets the number of skinning weights to evaluate for each vertex (1, 2, or 4).
/// </summary>
/// <summary>
/// Sets an array of skinning bone transform matrices.
/// </summary>
/// <summary>
/// Gets a copy of the current skinning bone transform matrices.
/// </summary>
// Convert matrices from 43 to 44 format.
/// <summary>
/// This effect requires lighting, so we explicitly implement
/// IEffectLights.LightingEnabled, and do not allow turning it off.
/// </summary>
/// <summary>
/// Creates a new SkinnedEffect with default parameter settings.
/// </summary>
/// <summary>
/// Creates a new SkinnedEffect by cloning parameter settings from an existing instance.
/// </summary>
/// <summary>
/// Creates a clone of the current SkinnedEffect instance.
/// </summary>
/// <summary>
/// Sets up the standard key/fill/back lighting rig.
/// </summary>
/// <summary>
/// Looks up shortcut references to our effect parameters.
/// </summary>
/// <summary>
/// Lazily computes derived parameter values immediately before applying the effect.
/// </summary>
// Recompute the world+view+projection matrix or fog vector?
// Recompute the world inverse transpose and eye position?
// Recompute the diffuse/emissive/alpha material color parameters?
// Check if we can use the only-bother-with-the-first-light shader optimization.
// Recompute the shader index?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Effect\SpriteEffect.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
/// <summary>
/// The default effect used by SpriteBatch.
/// </summary>
/// <summary>
/// Creates a new SpriteEffect.
/// </summary>
/// <summary>
/// An optional matrix used to transform the sprite geometry. Uses <see cref="Matrix.Identity"/> if null.
/// </summary>
/// <summary>
/// Creates a new SpriteEffect by cloning parameter settings from an existing instance.
/// </summary>
/// <summary>
/// Creates a clone of the current SpriteEffect instance.
/// </summary>
/// <summary>
/// Looks up shortcut references to our effect parameters.
/// </summary>
/// <summary>
/// Lazily computes derived parameter values immediately before applying the effect.
/// </summary>
// Normal 3D cameras look into the -z direction (z = 1 is in front of z = 0). The
// sprite batch layer depth is the opposite (z = 0 is in front of z = 1).
// --> We get the correct matrix with near plane 0 and far plane -1.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\Alpha8.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Packed vector type containing a single 8 bit normalized W values that is ranging from 0 to 1.
/// </summary>
/// <summary>
/// Gets and sets the packed value.
/// </summary>
/// <summary>
/// Creates a new instance of Alpha8.
/// </summary>
/// <param name="alpha">The alpha component</param>
/// <summary>
/// Gets the packed vector in float format.
/// </summary>
/// <returns>The packed vector in Vector3 format</returns>
/// <summary>
/// Sets the packed vector from a Vector4.
/// </summary>
/// <param name="vector">Vector containing the components.</param>
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
/// <summary>
/// Compares an object with the packed vector.
/// </summary>
/// <param name="obj">The object to compare.</param>
/// <returns>True if the object is equal to the packed vector.</returns>
/// <summary>
/// Compares another Alpha8 packed vector with the packed vector.
/// </summary>
/// <param name="other">The Alpha8 packed vector to compare.</param>
/// <returns>True if the packed vectors are equal.</returns>
/// <summary>
/// Gets a string representation of the packed vector.
/// </summary>
/// <returns>A string representation of the packed vector.</returns>
/// <summary>
/// Gets a hash code of the packed vector.
/// </summary>
/// <returns>The hash code for the packed vector.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\Bgr565.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Packed vector type containing unsigned normalized values ranging from 0 to 1. The x and z components use 5 bits, and the y component uses 6 bits.
/// </summary>
/// <summary>
/// Creates a new instance of Bgr565.
/// </summary>
/// <param name="x">The x component</param>
/// <param name="y">The y component</param>
/// <param name="z">The z component</param>
/// <summary>
/// Creates a new instance of Bgr565.
/// </summary>
/// <param name="vector">Vector containing the components for the packed vector.</param>
/// <summary>
/// Gets and sets the packed value.
/// </summary>
/// <summary>
/// Gets the packed vector in Vector3 format.
/// </summary>
/// <returns>The packed vector in Vector3 format</returns>
/// <summary>
/// Sets the packed vector from a Vector4.
/// </summary>
/// <param name="vector">Vector containing the components.</param>
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
/// <summary>
/// Compares an object with the packed vector.
/// </summary>
/// <param name="obj">The object to compare.</param>
/// <returns>true if the object is equal to the packed vector.</returns>
/// <summary>
/// Compares another Bgr565 packed vector with the packed vector.
/// </summary>
/// <param name="other">The Bgr565 packed vector to compare.</param>
/// <returns>true if the packed vectors are equal.</returns>
/// <summary>
/// Gets a string representation of the packed vector.
/// </summary>
/// <returns>A string representation of the packed vector.</returns>
/// <summary>
/// Gets a hash code of the packed vector.
/// </summary>
/// <returns>The hash code for the packed vector.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\Bgra4444.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 4 bits each for x, y, z, and w.
/// </summary>
/// <summary>
/// Creates a new instance of Bgra4444.
/// </summary>
/// <param name="x">The x component</param>
/// <param name="y">The y component</param>
/// <param name="z">The z component</param>
/// <param name="w">The w component</param>
/// <summary>
/// Creates a new instance of Bgra4444.
/// </summary>
/// <param name="vector">Vector containing the components for the packed vector.</param>
/// <summary>
/// Gets and sets the packed value.
/// </summary>
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
/// <summary>
/// Sets the packed vector from a Vector4.
/// </summary>
/// <param name="vector">Vector containing the components.</param>
/// <summary>
/// Compares an object with the packed vector.
/// </summary>
/// <param name="obj">The object to compare.</param>
/// <returns>true if the object is equal to the packed vector.</returns>
/// <summary>
/// Compares another Bgra4444 packed vector with the packed vector.
/// </summary>
/// <param name="other">The Bgra4444 packed vector to compare.</param>
/// <returns>true if the packed vectors are equal.</returns>
/// <summary>
/// Gets a string representation of the packed vector.
/// </summary>
/// <returns>A string representation of the packed vector.</returns>
/// <summary>
/// Gets a hash code of the packed vector.
/// </summary>
/// <returns>The hash code for the packed vector.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\Bgra5551.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Packed vector type containing unsigned normalized values ranging from 0 to 1.
/// The x , y and z components use 5 bits, and the w component uses 1 bit.
/// </summary>
/// <summary>
/// Gets and sets the packed value.
/// </summary>
/// <summary>
/// Creates a new instance of Bgra5551.
/// </summary>
/// <param name="x">The x component</param>
/// <param name="y">The y component</param>
/// <param name="z">The z component</param>
/// <param name="w">The w component</param>
/// <summary>
/// Creates a new instance of Bgra5551.
/// </summary>
/// <param name="vector">
/// Vector containing the components for the packed vector.
/// </param>
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
/// <summary>
/// Sets the packed vector from a Vector4.
/// </summary>
/// <param name="vector">Vector containing the components.</param>
/// <summary>
/// Compares an object with the packed vector.
/// </summary>
/// <param name="obj">The object to compare.</param>
/// <returns>True if the object is equal to the packed vector.</returns>
/// <summary>
/// Compares another Bgra5551 packed vector with the packed vector.
/// </summary>
/// <param name="other">The Bgra5551 packed vector to compare.</param>
/// <returns>True if the packed vectors are equal.</returns>
/// <summary>
/// Gets a string representation of the packed vector.
/// </summary>
/// <returns>A string representation of the packed vector.</returns>
/// <summary>
/// Gets a hash code of the packed vector.
/// </summary>
/// <returns>The hash code for the packed vector.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\Byte4.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Packed vector type containing four 8-bit unsigned integer values, ranging from 0 to 255.
/// </summary>
/// <summary>
/// Initializes a new instance of the Byte4 class.
/// </summary>
/// <param name="vector">A vector containing the initial values for the components of the Byte4 structure.</param>
/// <summary>
/// Initializes a new instance of the Byte4 class.
/// </summary>
/// <param name="x">Initial value for the x component.</param>
/// <param name="y">Initial value for the y component.</param>
/// <param name="z">Initial value for the z component.</param>
/// <param name="w">Initial value for the w component.</param>
/// <summary>
/// Compares the current instance of a class to another instance to determine whether they are different.
/// </summary>
/// <param name="a">The object to the left of the equality operator.</param>
/// <param name="b">The object to the right of the equality operator.</param>
/// <returns>true if the objects are different; false otherwise.</returns>
/// <summary>
/// Compares the current instance of a class to another instance to determine whether they are the same.
/// </summary>
/// <param name="a">The object to the left of the equality operator.</param>
/// <param name="b">The object to the right of the equality operator.</param>
/// <returns>true if the objects are the same; false otherwise.</returns>
/// <summary>
/// Directly gets or sets the packed representation of the value.
/// </summary>
/// <value>The packed representation of the value.</value>
/// <summary>
/// Returns a value that indicates whether the current instance is equal to a specified object.
/// </summary>
/// <param name="obj">The object with which to make the comparison.</param>
/// <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
/// <summary>
/// Returns a value that indicates whether the current instance is equal to a specified object.
/// </summary>
/// <param name="other">The object with which to make the comparison.</param>
/// <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
/// <summary>
/// Gets the hash code for the current instance.
/// </summary>
/// <returns>Hash code for the instance.</returns>
/// <summary>
/// Returns a string representation of the current instance.
/// </summary>
/// <returns>String that represents the object.</returns>
/// <summary>
/// Packs a vector into a uint.
/// </summary>
/// <param name="vector">The vector containing the values to pack.</param>
/// <returns>The ulong containing the packed values.</returns>
// clamp the value between min and max values
/// <summary>
/// Sets the packed representation from a Vector4.
/// </summary>
/// <param name="vector">The vector to create the packed representation from.</param>
/// <summary>
/// Expands the packed representation into a Vector4.
/// </summary>
/// <returns>The expanded vector.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\HalfSingle.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\HalfTypeHelper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\HalfVector2.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\HalfVector4.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Packed vector type containing four 16-bit floating-point values.
/// </summary>
/// <summary>
/// Initializes a new instance of the HalfVector4 structure.
/// </summary>
/// <param name="x">Initial value for the x component.</param>
/// <param name="y">Initial value for the y component.</param>
/// <param name="z">Initial value for the z component.</param>
/// <param name="w">Initial value for the q component.</param>
/// <summary>
/// Initializes a new instance of the HalfVector4 structure.
/// </summary>
/// <param name="vector">A vector containing the initial values for the components of the HalfVector4 structure.</param>
/// <summary>
/// Sets the packed representation from a Vector4.
/// </summary>
/// <param name="vector">The vector to create the packed representation from.</param>
/// <summary>
/// Packs a vector into a ulong.
/// </summary>
/// <param name="vector">The vector containing the values to pack.</param>
/// <returns>The ulong containing the packed values.</returns>
/// <summary>
/// Expands the packed representation into a Vector4.
/// </summary>
/// <returns>The expanded vector.</returns>
/// <summary>
/// Directly gets or sets the packed representation of the value.
/// </summary>
/// <value>The packed representation of the value.</value>
/// <summary>
/// Returns a string representation of the current instance.
/// </summary>
/// <returns>String that represents the object.</returns>
/// <summary>
/// Gets the hash code for the current instance.
/// </summary>
/// <returns>Hash code for the instance.</returns>
/// <summary>
/// Returns a value that indicates whether the current instance is equal to a specified object.
/// </summary>
/// <param name="obj">The object with which to make the comparison.</param>
/// <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
/// <summary>
/// Returns a value that indicates whether the current instance is equal to a specified object.
/// </summary>
/// <param name="other">The object with which to make the comparison.</param>
/// <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
/// <summary>
/// Compares the current instance of a class to another instance to determine whether they are the same.
/// </summary>
/// <param name="a">The object to the left of the equality operator.</param>
/// <param name="b">The object to the right of the equality operator.</param>
/// <returns>true if the objects are the same; false otherwise.</returns>
/// <summary>
/// Compares the current instance of a class to another instance to determine whether they are different.
/// </summary>
/// <param name="a">The object to the left of the equality operator.</param>
/// <param name="b">The object to the right of the equality operator.</param>
/// <returns>true if the objects are different; false otherwise.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\IPackedVector.cs
// #region License
// /*
/*
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
// #endregion License
//
// Author: Kenneth James Pouncey
// http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.packedvector.ipackedvector.aspx
// PackedVector Generic interface
// http://msdn.microsoft.com/en-us/library/bb197661.aspx
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\NormalizedByte2.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\NormalizedByte4.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\NormalizedShort2.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// clamp the value between min and max values
// Round rather than truncate.
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\NormalizedShort4.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// clamp the value between min and max values
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\Rg32.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Packed vector type containing two 16-bit unsigned normalized values ranging from 0 to 1.
/// </summary>
/// <summary>
/// Gets and sets the packed value.
/// </summary>
/// <summary>
/// Creates a new instance of Rg32.
/// </summary>
/// <param name="x">The x component</param>
/// <param name="y">The y component</param>
/// <summary>
/// Creates a new instance of Rg32.
/// </summary>
/// <param name="vector">
/// Vector containing the components for the packed vector.
/// </param>
/// <summary>
/// Gets the packed vector in Vector2 format.
/// </summary>
/// <returns>The packed vector in Vector2 format</returns>
/// <summary>
/// Sets the packed vector from a Vector4.
/// </summary>
/// <param name="vector">Vector containing the components.</param>
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
/// <summary>
/// Compares an object with the packed vector.
/// </summary>
/// <param name="obj">The object to compare.</param>
/// <returns>True if the object is equal to the packed vector.</returns>
/// <summary>
/// Compares another Rg32 packed vector with the packed vector.
/// </summary>
/// <param name="other">The Rg32 packed vector to compare.</param>
/// <returns>True if the packed vectors are equal.</returns>
/// <summary>
/// Gets a string representation of the packed vector.
/// </summary>
/// <returns>A string representation of the packed vector.</returns>
/// <summary>
/// Gets a hash code of the packed vector.
/// </summary>
/// <returns>The hash code for the packed vector.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\Rgba1010102.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Packed vector type containing unsigned normalized values ranging from 0 to 1.
/// The x, y and z components use 10 bits, and the w component uses 2 bits.
/// </summary>
/// <summary>
/// Gets and sets the packed value.
/// </summary>
/// <summary>
/// Creates a new instance of Rgba1010102.
/// </summary>
/// <param name="x">The x component</param>
/// <param name="y">The y component</param>
/// <param name="z">The z component</param>
/// <param name="w">The w component</param>
/// <summary>
/// Creates a new instance of Rgba1010102.
/// </summary>
/// <param name="vector">
/// Vector containing the components for the packed vector.
/// </param>
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
/// <summary>
/// Sets the packed vector from a Vector4.
/// </summary>
/// <param name="vector">Vector containing the components.</param>
/// <summary>
/// Compares an object with the packed vector.
/// </summary>
/// <param name="obj">The object to compare.</param>
/// <returns>True if the object is equal to the packed vector.</returns>
/// <summary>
/// Compares another Rgba1010102 packed vector with the packed vector.
/// </summary>
/// <param name="other">The Rgba1010102 packed vector to compare.</param>
/// <returns>True if the packed vectors are equal.</returns>
/// <summary>
/// Gets a string representation of the packed vector.
/// </summary>
/// <returns>A string representation of the packed vector.</returns>
/// <summary>
/// Gets a hash code of the packed vector.
/// </summary>
/// <returns>The hash code for the packed vector.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\Rgba64.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Packed vector type containing four 16-bit unsigned normalized values ranging from 0 to 1.
/// </summary>
/// <summary>
/// Gets and sets the packed value.
/// </summary>
/// <summary>
/// Creates a new instance of Rgba64.
/// </summary>
/// <param name="x">The x component</param>
/// <param name="y">The y component</param>
/// <param name="z">The z component</param>
/// <param name="w">The w component</param>
/// <summary>
/// Creates a new instance of Rgba64.
/// </summary>
/// <param name="vector">
/// Vector containing the components for the packed vector.
/// </param>
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
/// <summary>
/// Sets the packed vector from a Vector4.
/// </summary>
/// <param name="vector">Vector containing the components.</param>
/// <summary>
/// Compares an object with the packed vector.
/// </summary>
/// <param name="obj">The object to compare.</param>
/// <returns>True if the object is equal to the packed vector.</returns>
/// <summary>
/// Compares another Rgba64 packed vector with the packed vector.
/// </summary>
/// <param name="other">The Rgba64 packed vector to compare.</param>
/// <returns>True if the packed vectors are equal.</returns>
/// <summary>
/// Gets a string representation of the packed vector.
/// </summary>
/// <returns>A string representation of the packed vector.</returns>
/// <summary>
/// Gets a hash code of the packed vector.
/// </summary>
/// <returns>The hash code for the packed vector.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\Short2.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Largest two byte positive number 0xFFFF >> 1;
// two's complement
// clamp the value between min and max values
/// <summary>
/// Gets the packed vector in Vector4 format.
/// </summary>
/// <returns>The packed vector in Vector4 format</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\PackedVector\Short4.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Packed vector type containing four 16-bit signed integer values.
/// </summary>
/// <summary>
/// Initializes a new instance of the Short4 class.
/// </summary>
/// <param name="vector">A vector containing the initial values for the components of the Short4 structure.</param>
/// <summary>
/// Initializes a new instance of the Short4 class.
/// </summary>
/// <param name="x">Initial value for the x component.</param>
/// <param name="y">Initial value for the y component.</param>
/// <param name="z">Initial value for the z component.</param>
/// <param name="w">Initial value for the w component.</param>
/// <summary>
/// Compares the current instance of a class to another instance to determine whether they are different.
/// </summary>
/// <param name="a">The object to the left of the equality operator.</param>
/// <param name="b">The object to the right of the equality operator.</param>
/// <returns>true if the objects are different; false otherwise.</returns>
/// <summary>
/// Compares the current instance of a class to another instance to determine whether they are the same.
/// </summary>
/// <param name="a">The object to the left of the equality operator.</param>
/// <param name="b">The object to the right of the equality operator.</param>
/// <returns>true if the objects are the same; false otherwise.</returns>
/// <summary>
/// Directly gets or sets the packed representation of the value.
/// </summary>
/// <value>The packed representation of the value.</value>
/// <summary>
/// Returns a value that indicates whether the current instance is equal to a specified object.
/// </summary>
/// <param name="obj">The object with which to make the comparison.</param>
/// <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
/// <summary>
/// Returns a value that indicates whether the current instance is equal to a specified object.
/// </summary>
/// <param name="other">The object with which to make the comparison.</param>
/// <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
/// <summary>
/// Gets the hash code for the current instance.
/// </summary>
/// <returns>Hash code for the instance.</returns>
/// <summary>
/// Returns a string representation of the current instance.
/// </summary>
/// <returns>String that represents the object.</returns>
/// <summary>
/// Packs a vector into a ulong.
/// </summary>
/// <param name="vector">The vector containing the values to pack.</param>
/// <returns>The ulong containing the packed values.</returns>
// Largest two byte positive number 0xFFFF >> 1;
// two's complement
// clamp the value between min and max values
/// <summary>
/// Sets the packed representation from a Vector4.
/// </summary>
/// <param name="vector">The vector to create the packed representation from.</param>
/// <summary>
/// Expands the packed representation into a Vector4.
/// </summary>
/// <returns>The expanded vector.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Shader\ConstantBuffer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Share the immutable types.
// Clone the mutable types.
// Shader registers are always 4 bytes and all the
// incoming data objects should be 4 bytes per element.
// Take care of a single element.
// EffectParameter stores all values in arrays by default.             
// TODO: When we eventually expose the internal Shader 
// API then we will need to deal with non-array elements.
// Take care of the single copy case!
// take care of shader compiler optimization
// HLSL assumes matrices are column-major, whereas in-memory we use row-major.
// TODO: HLSL can be told to use row-major. We should handle that too.
// TODO:  We should be doing some sort of dirty state 
// testing here.
//
// It should let us skip all parameter updates if
// nothing has changed.  It should not be per-parameter
// as that is why you should use multiple constant
// buffers.
// If our state key becomes larger than the 
// next state key then the keys have rolled 
// over and we need to reset.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Shader\ConstantBufferCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// If there are no constant buffers then skip it.
// Early out if this is the last one.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Shader\Shader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: We should convert the types below 
// into the start of a Shader reflection API.
// TODO: This should be moved to EffectPass.
/// <summary>
/// Returns the platform specific shader profile identifier.
/// </summary>
/// <summary>
/// A hash value which can be used to compare shaders.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Shader\ShaderStage.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\Blend.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines a blend mode.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by {1, 1, 1, 1}.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by {0, 0, 0, 0}.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by the source color. 
/// {Rs, Gs, Bs, As}, where Rs, Gs, Bs, As are color source values.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by the inverse of the source color.
///  {1 − Rs, 1 − Gs, 1 − Bs, 1 − As}, where Rs, Gs, Bs, As are color source values.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by the alpha value of the source. 
/// {As, As, As, As}, where As is the source alpha value.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by the inverse of the alpha value of the source. 
/// {1 − As, 1 − As, 1 − As, 1 − As}, where As is the source alpha value.
/// </summary>
/// <summary>
/// Each component color is multiplied by the destination color. 
/// {Rd, Gd, Bd, Ad}, where Rd, Gd, Bd, Ad are color destination values.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by the inversed destination color. 
/// {1 − Rd, 1 − Gd, 1 − Bd, 1 − Ad}, where Rd, Gd, Bd, Ad are color destination values.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by the alpha value of the destination.
/// {Ad, Ad, Ad, Ad}, where Ad is the destination alpha value.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by the inversed alpha value of the destination. 
/// {1 − Ad, 1 − Ad, 1 − Ad, 1 − Ad}, where Ad is the destination alpha value.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by a constant in the <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BlendFactor"/>.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by a inversed constant in the <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BlendFactor"/>.
/// </summary>
/// <summary>
/// Each component of the color is multiplied by either the alpha of the source color, or the inverse of the alpha of the source color, whichever is greater. 
/// {f, f, f, 1}, where f = min(As, 1 − As), where As is the source alpha value.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\BlendFunction.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines a function for color blending.
/// </summary>
/// <summary>
/// The function will adds destination to the source. (srcColor * srcBlend) + (destColor * destBlend)
/// </summary>
/// <summary>
/// The function will subtracts destination from source. (srcColor * srcBlend) − (destColor * destBlend)
/// </summary>
/// <summary>
/// The function will subtracts source from destination. (destColor * destBlend) - (srcColor * srcBlend) 
/// </summary>
/// <summary>
/// The function will extracts minimum of the source and destination. min((srcColor * srcBlend),(destColor * destBlend))
/// </summary>
/// <summary>
/// The function will extracts maximum of the source and destination. max((srcColor * srcBlend),(destColor * destBlend))
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\BlendState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Returns the target specific blend state.
/// </summary>
/// <param name="index">The 0 to 3 target blend state index.</param>
/// <returns>A target blend state.</returns>
/// <summary>
/// The color used as blend factor when alpha blending.
/// </summary>
/// <remarks>
/// <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BlendFactor"/> is set to this value when this <see cref="BlendState"/>
/// is bound to a GraphicsDevice.
/// </remarks>
/// <summary>
/// Enables use of the per-target blend states.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\CompareFunction.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The comparison function used for depth, stencil, and alpha tests.
/// </summary>
/// <summary>
/// Always passes the test.
/// </summary>
/// <summary>
/// Never passes the test.
/// </summary>
/// <summary>
/// Passes the test when the new pixel value is less than current pixel value.
/// </summary>
/// <summary>
/// Passes the test when the new pixel value is less than or equal to current pixel value.
/// </summary>
/// <summary>
/// Passes the test when the new pixel value is equal to current pixel value.
/// </summary>
/// <summary>
/// Passes the test when the new pixel value is greater than or equal to current pixel value.
/// </summary>
/// <summary>
/// Passes the test when the new pixel value is greater than current pixel value.
/// </summary>
/// <summary>
/// Passes the test when the new pixel value does not equal to current pixel value.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\CullMode.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines a culling mode for faces in rasterization process.
/// </summary>
/// <summary>
/// Do not cull faces.
/// </summary>
/// <summary>
/// Cull faces with clockwise order.
/// </summary>
/// <summary>
/// Cull faces with counter clockwise order.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\DepthFormat.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines formats for depth-stencil buffer.
/// </summary>
/// <summary>
/// Depth-stencil buffer will not be created.
/// </summary>
/// <summary>
/// 16-bit depth buffer.
/// </summary>
/// <summary>
/// 24-bit depth buffer. Equivalent of <see cref="DepthFormat.Depth24Stencil8"/> for DirectX platforms.
/// </summary>
/// <summary>
/// 32-bit depth-stencil buffer. Where 24-bit depth and 8-bit for stencil used.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\DepthStencilState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\FillMode.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines options for filling the primitive.
/// </summary>
/// <summary>
/// Draw solid faces for each primitive.
/// </summary>
/// <summary>
/// Draw lines for each primitive.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\RasterizerState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\SamplerState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// When using comparison sampling, also set <see cref="FilterMode"/> to <see cref="TextureFilterMode.Comparison"/>.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\StencilOperation.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines stencil buffer operations.
/// </summary>
/// <summary>
/// Does not update the stencil buffer entry.
/// </summary>
/// <summary>
/// Sets the stencil buffer entry to 0.
/// </summary>
/// <summary>
/// Replaces the stencil buffer entry with a reference value.
/// </summary>
/// <summary>
/// Increments the stencil buffer entry, wrapping to 0 if the new value exceeds the maximum value.
/// </summary>
/// <summary>
/// Decrements the stencil buffer entry, wrapping to the maximum value if the new value is less than 0.
/// </summary>
/// <summary>
/// Increments the stencil buffer entry, clamping to the maximum value.
/// </summary>
/// <summary>
/// Decrements the stencil buffer entry, clamping to 0.
/// </summary>
/// <summary>
/// Inverts the bits in the stencil buffer entry.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\TargetBlendState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// We're blending if we're not in the opaque state.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\TextureAddressMode.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines modes for addressing texels using texture coordinates that are outside of the range of 0.0 to 1.0.
/// </summary>
/// <summary>
/// Texels outside range will form the tile at every integer junction.
/// </summary>
/// <summary>
/// Texels outside range will be set to color of 0.0 or 1.0 texel.
/// </summary>
/// <summary>
/// Same as <see cref="TextureAddressMode.Wrap"/> but tiles will also flipped at every integer junction.
/// </summary>
/// <summary>
/// Texels outside range will be set to the border color.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\TextureFilter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines filtering types for texture sampler.
/// </summary>
/// <summary>
/// Use linear filtering.
/// </summary>
/// <summary>
/// Use point filtering.
/// </summary>
/// <summary>
/// Use anisotropic filtering.
/// </summary>
/// <summary>
/// Use linear filtering to shrink or expand, and point filtering between mipmap levels (mip).
/// </summary>
/// <summary>
/// Use point filtering to shrink (minify) or expand (magnify), and linear filtering between mipmap levels.
/// </summary>
/// <summary>
/// Use linear filtering to shrink, point filtering to expand, and linear filtering between mipmap levels.
/// </summary>
/// <summary>
/// Use linear filtering to shrink, point filtering to expand, and point filtering between mipmap levels.
/// </summary>
/// <summary>
/// Use point filtering to shrink, linear filtering to expand, and linear filtering between mipmap levels.
/// </summary>
/// <summary>
/// Use point filtering to shrink, linear filtering to expand, and point filtering between mipmap levels.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\States\TextureFilterMode.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Filtering modes for texture samplers.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\BufferUsage.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A usage hint for optimizing memory placement of graphics buffers.
/// </summary>
/// <summary>
/// No special usage.
/// </summary>
/// <summary>
/// The buffer will not be readable and will be optimized for rendering and writing.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\DynamicIndexBuffer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Special offset used internally by GraphicsDevice.DrawUserXXX() methods.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\DynamicVertexBuffer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Special offset used internally by GraphicsDevice.DrawUserXXX() methods.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\IndexBuffer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the relevant IndexElementSize enum value for the given type.
/// </summary>
/// <param name="graphicsDevice">The graphics device.</param>
/// <param name="type">The type to use for the index buffer</param>
/// <returns>The IndexElementSize enum value that matches the type</returns>
/// <summary>
/// The GraphicsDevice is resetting, so GPU resources must be recreated.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\IndexElementSize.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines size for index in <see cref="IndexBuffer"/> and <see cref="DynamicIndexBuffer"/>.
/// </summary>
/// <summary>
/// 16-bit short/ushort value been used.
/// </summary>
/// <summary>
/// 32-bit int/uint value been used.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\IVertexType.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\PrimitiveType.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines how vertex data is ordered.
/// </summary>
/// <summary>
/// Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Back-face culling is affected by the current winding-order render state.
/// </summary>
/// <summary>
/// Renders the vertices as a triangle strip. The back-face culling flag is flipped automatically on even-numbered triangles.
/// </summary>
/// <summary>
/// Renders the vertices as a list of isolated straight line segments; the count may be any positive integer.
/// </summary>
/// <summary>
/// Renders the vertices as a single polyline; the count may be any positive integer.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexBuffer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Make sure the graphics device is assigned in the vertex declaration.
/// <summary>
/// The GraphicsDevice is resetting, so GPU resources must be recreated.
/// </summary>
/// <summary>
/// Get the vertex data froom this VertexBuffer.
/// </summary>
/// <typeparam name="T">The struct you want to fill.</typeparam>
/// <param name="offsetInBytes">The offset to the first element in the vertex buffer in bytes.</param>
/// <param name="data">An array of T's to be filled.</param>
/// <param name="startIndex">The index to start filling the data array.</param>
/// <param name="elementCount">The number of T's to get.</param>
/// <param name="vertexStride">The size of how a vertex buffer element should be interpreted.</param>
///
/// <remarks>
/// Note that this pulls data from VRAM into main memory and because of that is a very expensive operation.
/// It is often a better idea to keep a copy of the data in main memory.
/// </remarks>
///
/// <remarks>
/// <p>Using this operation it is easy to get certain vertex elements from a VertexBuffer.</p>
/// <p>
/// For example to get the texture coordinates from a VertexBuffer of <see cref="VertexPositionTexture"/> you can call 
/// GetData(4 * 3, data, elementCount, 20). 'data'should be an array of <see cref="Vector2"/> in this example.
/// The offsetInBytes is the number of bytes taken up by the <see cref="VertexPositionTexture.Position"/> of the vertex.
/// For vertexStride we pass the size of a <see cref="VertexPositionTexture"/>.
/// </p>
/// </remarks>
/// <summary>
/// Sets the vertex buffer data, specifying the index at which to start copying from the source data array,
/// the number of elements to copy from the source data array, 
/// and how far apart elements from the source data array should be when they are copied into the vertex buffer.
/// </summary>
/// <typeparam name="T">Type of elements in the data array.</typeparam>
/// <param name="offsetInBytes">Offset in bytes from the beginning of the vertex buffer to the start of the copied data.</param>
/// <param name="data">Data array.</param>
/// <param name="startIndex">Index at which to start copying from <paramref name="data"/>.
/// Must be within the <paramref name="data"/> array bounds.</param>
/// <param name="elementCount">Number of elements to copy from <paramref name="data"/>.
/// The combination of <paramref name="startIndex"/> and <paramref name="elementCount"/> 
/// must be within the <paramref name="data"/> array bounds.</param>
/// <param name="vertexStride">Specifies how far apart, in bytes, elements from <paramref name="data"/> should be when 
/// they are copied into the vertex buffer.
/// In almost all cases this should be <c>sizeof(T)</c>, to create a tightly-packed vertex buffer.
/// If you specify <c>sizeof(T)</c>, elements from <paramref name="data"/> will be copied into the 
/// vertex buffer with no padding between each element.
/// If you specify a value greater than <c>sizeof(T)</c>, elements from <paramref name="data"/> will be copied 
/// into the vertex buffer with padding between each element.
/// If you specify <c>0</c> for this parameter, it will be treated as if you had specified <c>sizeof(T)</c>.
/// With the exception of <c>0</c>, you must specify a value greater than or equal to <c>sizeof(T)</c>.</param>
/// <remarks>
/// If <c>T</c> is <c>VertexPositionTexture</c>, but you want to set only the position component of the vertex data,
/// you would call this method as follows:
/// <code>
/// Vector3[] positions = new Vector3[numVertices];
/// vertexBuffer.SetData(0, positions, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride);
/// </code>
/// 
/// Continuing from the previous example, if you want to set only the texture coordinate component of the vertex data,
/// you would call this method as follows (note the use of <paramref name="offsetInBytes"/>:
/// <code>
/// Vector2[] texCoords = new Vector2[numVertices];
/// vertexBuffer.SetData(12, texCoords, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride);
/// </code>
/// </remarks>
/// <remarks>
/// If you provide a <c>byte[]</c> in the <paramref name="data"/> parameter, then you should almost certainly
/// set <paramref name="vertexStride"/> to <c>1</c>, to avoid leaving any padding between the <c>byte</c> values
/// when they are copied into the vertex buffer.
/// </remarks>
/// <summary>
/// Sets the vertex buffer data, specifying the index at which to start copying from the source data array,
/// and the number of elements to copy from the source data array. This is the same as calling 
/// <see cref="SetData{T}(int, T[], int, int, int)"/>  with <c>offsetInBytes</c> equal to <c>0</c>,
/// and <c>vertexStride</c> equal to <c>sizeof(T)</c>.
/// </summary>
/// <typeparam name="T">Type of elements in the data array.</typeparam>
/// <param name="data">Data array.</param>
/// <param name="startIndex">Index at which to start copying from <paramref name="data"/>.
/// Must be within the <paramref name="data"/> array bounds.</param>
/// <param name="elementCount">Number of elements to copy from <paramref name="data"/>.
/// The combination of <paramref name="startIndex"/> and <paramref name="elementCount"/> 
/// must be within the <paramref name="data"/> array bounds.</param>
/// <summary>
/// Sets the vertex buffer data. This is the same as calling <see cref="SetData{T}(int, T[], int, int, int)"/> 
/// with <c>offsetInBytes</c> and <c>startIndex</c> equal to <c>0</c>, <c>elementCount</c> equal to <c>data.Length</c>, 
/// and <c>vertexStride</c> equal to <c>sizeof(T)</c>.
/// </summary>
/// <typeparam name="T">Type of elements in the data array.</typeparam>
/// <param name="data">Data array.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexBufferBinding.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines how a vertex buffer is bound to the graphics device for rendering.
/// </summary>
/// <summary>
/// Gets the vertex buffer.
/// </summary>
/// <value>The vertex buffer.</value>
/// <summary>
/// Gets the index of the first vertex in the vertex buffer to use.
/// </summary>
/// <value>The index of the first vertex in the vertex buffer to use.</value>
/// <summary>
/// Gets the number of instances to draw using the same per-instance data before advancing
/// in the buffer by one element.
/// </summary>
/// <value>
/// The number of instances to draw using the same per-instance data before advancing in the
/// buffer by one element. This value must be 0 for an element that contains per-vertex
/// data and greater than 0 for per-instance data.
/// </value>
/// <summary>
/// Creates an instance of <see cref="VertexBufferBinding"/>.
/// </summary>
/// <param name="vertexBuffer">The vertex buffer to bind.</param>
/// <summary>
/// Creates an instance of <see cref="VertexBufferBinding"/>.
/// </summary>
/// <param name="vertexBuffer">The vertex buffer to bind.</param>
/// <param name="vertexOffset">
/// The index of the first vertex in the vertex buffer to use.
/// </param>
/// <summary>
/// Creates an instance of VertexBufferBinding.
/// </summary>
/// <param name="vertexBuffer">The vertex buffer to bind.</param>
/// <param name="vertexOffset">
/// The index of the first vertex in the vertex buffer to use.
/// </param>
/// <param name="instanceFrequency">
/// The number of instances to draw using the same per-instance data before advancing in the
/// buffer by one element. This value must be 0 for an element that contains per-vertex data
/// and greater than 0 for per-instance data.
/// </param>
/// <exception cref="ArgumentNullException">
/// <paramref name="vertexBuffer"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentOutOfRangeException">
/// <paramref name="vertexOffset"/> or <paramref name="instanceFrequency"/> is invalid.
/// </exception>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexBufferBindings.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Stores the vertex buffers to be bound to the input assembler stage.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="VertexBufferBindings" /> class.
/// </summary>
/// <param name="maxVertexBufferSlots">The maximum number of vertex buffer slots.</param>
/// <summary>
/// Clears the vertex buffer slots.
/// </summary>
/// <returns>
/// <see langword="true"/> if the input layout was changed; otherwise,
/// <see langword="false"/>.
/// </returns>
/// <summary>
/// Binds the specified vertex buffer to the first input slot.
/// </summary>
/// <param name="vertexBuffer">The vertex buffer.</param>
/// <param name="vertexOffset">
/// The offset (in vertices) from the beginning of the vertex buffer to the first vertex to 
/// use.
/// </param>
/// <returns>
/// <see langword="true"/> if the input layout was changed; otherwise,
/// <see langword="false"/>.
/// </returns>
/// <summary>
/// Binds the the specified vertex buffers to the input slots.
/// </summary>
/// <param name="vertexBufferBindings">The vertex buffer bindings.</param>
/// <returns>
/// <see langword="true"/> if the input layout was changed; otherwise,
/// <see langword="false"/>.
/// </returns>
/// <summary>
/// Gets vertex buffer bound to the specified input slots.
/// </summary>
/// <returns>The vertex buffer binding.</returns>
/// <summary>
/// Gets vertex buffers bound to the input slots.
/// </summary>
/// <returns>The vertex buffer bindings.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexDeclaration.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines per-vertex data of a vertex buffer.
/// </summary>
/// <remarks>
/// <see cref="VertexDeclaration"/> implements <see cref="IEquatable{T}"/> and can be used as
/// a key in a dictionary. Two vertex declarations are considered equal if the vertices are
/// structurally equivalent, i.e. the vertex elements and the vertex stride are identical. (The
/// properties <see cref="GraphicsResource.Name"/> and <see cref="GraphicsResource.Tag"/> are
/// ignored in <see cref="GetHashCode"/> and <see cref="Equals(VertexDeclaration)"/>!)
/// </remarks>
// Note for future refactoring:
// For XNA-compatibility VertexDeclaration is derived from GraphicsResource, which means it
// has GraphicsDevice, Name, Tag and implements IDisposable. This is unnecessary in
// MonoGame. VertexDeclaration.GraphicsDevice is never set.
// --> VertexDeclaration should be a lightweight immutable type. No base class, no IDisposable.
//     (Use the internal type Data. Do not expose a constructor. Use a factory method to
//     cache the vertex declarations.)
// Pre-calculate hash code for fast comparisons and lookup in dictionaries.
// Data.Elements have already been set in the Data ctor. However, entries
// in the vertex declaration cache must be immutable. Therefore, we create a 
// copy of the array, which the user cannot access.
/// <summary>
/// Gets the internal vertex elements array.
/// </summary>
/// <value>The internal vertex elements array.</value>
/// <summary>
/// Initializes a new instance of the <see cref="VertexDeclaration"/> class.
/// </summary>
/// <param name="elements">The vertex elements.</param>
/// <exception cref="ArgumentNullException">
/// <paramref name="elements"/> is <see langword="null"/> or empty.
/// </exception>
/// <summary>
/// Initializes a new instance of the <see cref="VertexDeclaration"/> class.
/// </summary>
/// <param name="vertexStride">The size of a vertex (including padding) in bytes.</param>
/// <param name="elements">The vertex elements.</param>
/// <exception cref="ArgumentNullException">
/// <paramref name="elements"/> is <see langword="null"/> or empty.
/// </exception>
// Reuse existing data.
// Cache new vertex declaration.
/// <summary>
/// Returns the VertexDeclaration for Type.
/// </summary>
/// <param name="vertexType">A value type which implements the IVertexType interface.</param>
/// <returns>The VertexDeclaration.</returns>
/// <remarks>
/// Prefer to use VertexDeclarationCache when the declaration lookup
/// can be performed with a templated type.
/// </remarks>
/// <summary>
/// Gets a copy of the vertex elements.
/// </summary>
/// <returns>A copy of the vertex elements.</returns>
/// <summary>
/// Gets the size of a vertex (including padding) in bytes.
/// </summary>
/// <value>The size of a vertex (including padding) in bytes.</value>
/// <summary>
/// Determines whether the specified <see cref="object"/> is equal to this instance.
/// </summary>
/// <param name="obj">The object to compare with the current object.</param>
/// <returns>
/// <see langword="true"/> if the specified <see cref="object"/> is equal to this instance;
/// otherwise, <see langword="false"/>.
/// </returns>
/// <summary>
/// Determines whether the specified <see cref="VertexDeclaration"/> is equal to this
/// instance.
/// </summary>
/// <param name="other">The object to compare with the current object.</param>
/// <returns>
/// <see langword="true"/> if the specified <see cref="VertexDeclaration"/> is equal to this
/// instance; otherwise, <see langword="false"/>.
/// </returns>
/// <summary>
/// Returns a hash code for this instance.
/// </summary>
/// <returns>
/// A hash code for this instance, suitable for use in hashing algorithms and data
/// structures like a hash table.
/// </returns>
/// <summary>
/// Compares two <see cref="VertexElement"/> instances to determine whether they are the
/// same.
/// </summary>
/// <param name="left">The first instance.</param>
/// <param name="right">The second instance.</param>
/// <returns>
/// <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are
/// the same; otherwise, <see langword="false"/>.
/// </returns>
/// <summary>
/// Compares two <see cref="VertexElement"/> instances to determine whether they are
/// different.
/// </summary>
/// <param name="left">The first instance.</param>
/// <param name="right">The second instance.</param>
/// <returns>
/// <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are
/// the different; otherwise, <see langword="false"/>.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexDeclarationCache.cs
/// <summary>
/// Helper class which ensures we only lookup a vertex 
/// declaration for a particular type once.
/// </summary>
/// <typeparam name="T">A vertex structure which implements IVertexType.</typeparam>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexElement.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines a single element in a vertex.
/// </summary>
/// <summary>
/// Gets or sets the offset in bytes from the beginning of the stream to the vertex element.
/// </summary>
/// <value>The offset in bytes.</value>
/// <summary>
/// Gets or sets the data format.
/// </summary>
/// <value>The data format.</value>
/// <summary>
/// Gets or sets the HLSL semantic of the element in the vertex shader input.
/// </summary>
/// <value>The HLSL semantic of the element in the vertex shader input.</value>
/// <summary>
/// Gets or sets the semantic index.
/// </summary>
/// <value>
/// The semantic index, which is required if the semantic is used for more than one vertex
/// element.
/// </value>
/// <remarks>
/// Usage indices in a vertex declaration usually start with 0. When multiple vertex buffers
/// are bound to the input assembler stage (see <see cref="GraphicsDevice.SetVertexBuffers"/>),
/// MonoGame internally adjusts the usage indices based on the order in which the vertex
/// buffers are bound.
/// </remarks>
/// <summary>
/// Initializes a new instance of the <see cref="VertexElement"/> struct.
/// </summary>
/// <param name="offset">The offset in bytes from the beginning of the stream to the vertex element.</param>
/// <param name="elementFormat">The element format.</param>
/// <param name="elementUsage">The HLSL semantic of the element in the vertex shader input-signature.</param>
/// <param name="usageIndex">The semantic index, which is required if the semantic is used for more than one vertex element.</param>
/// <summary>
/// Returns a hash code for this instance.
/// </summary>
/// <returns>
/// A hash code for this instance, suitable for use in hashing algorithms and data
/// structures like a hash table.
/// </returns>
// ReSharper disable NonReadonlyMemberInGetHashCode
// Optimized hash:
// - DirectX 11 has max 32 registers. A register is max 16 byte. _offset is in the range
//   0 to 512 (exclusive). --> _offset needs 9 bit.
// - VertexElementFormat has 12 values. --> _format needs 4 bit.
// - VertexElementUsage has 13 values. --> _usage needs 4 bit.
// - DirectX 11 has max 32 registers. --> _usageIndex needs 6 bit.
// (Note: If these assumptions are correct we get a unique hash code. If these 
// assumptions are not correct, we still get a useful hash code because we use XOR.)
// ReSharper restore NonReadonlyMemberInGetHashCode
/// <summary>
/// Returns a <see cref="string" /> that represents this instance.
/// </summary>
/// <returns>A <see cref="string" /> that represents this instance.</returns>
/// <summary>
/// Determines whether the specified <see cref="object"/> is equal to this instance.
/// </summary>
/// <param name="obj">The object to compare with the current object.</param>
/// <returns>
/// <see langword="true"/> if the specified <see cref="object"/> is equal to this instance;
/// otherwise, <see langword="false"/>.
/// </returns>
/// <summary>
/// Determines whether the specified <see cref="VertexElement"/> is equal to this
/// instance.
/// </summary>
/// <param name="other">The object to compare with the current object.</param>
/// <returns>
/// <see langword="true"/> if the specified <see cref="VertexElement"/> is equal to this
/// instance; otherwise, <see langword="false"/>.
/// </returns>
/// <summary>
/// Compares two <see cref="VertexElement"/> instances to determine whether they are the
/// same.
/// </summary>
/// <param name="left">The first instance.</param>
/// <param name="right">The second instance.</param>
/// <returns>
/// <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are
/// the same; otherwise, <see langword="false"/>.
/// </returns>
/// <summary>
/// Compares two <see cref="VertexElement"/> instances to determine whether they are
/// different.
/// </summary>
/// <param name="left">The first instance.</param>
/// <param name="right">The second instance.</param>
/// <returns>
/// <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are
/// the different; otherwise, <see langword="false"/>.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexElementFormat.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines vertex element formats.
/// </summary>
/// <summary>
/// Single 32-bit floating point number.
/// </summary>
/// <summary>
/// Two component 32-bit floating point number.
/// </summary>
/// <summary>
/// Three component 32-bit floating point number.
/// </summary>
/// <summary>
/// Four component 32-bit floating point number.
/// </summary>
/// <summary>
/// Four component, packed unsigned byte, mapped to 0 to 1 range. 
/// </summary>
/// <summary>
/// Four component unsigned byte.
/// </summary>
/// <summary>
/// Two component signed 16-bit integer.
/// </summary>
/// <summary>
/// Four component signed 16-bit integer.
/// </summary>
/// <summary>
/// Normalized, two component signed 16-bit integer.
/// </summary>
/// <summary>
/// Normalized, four component signed 16-bit integer.
/// </summary>
/// <summary>
/// Two component 16-bit floating point number.
/// </summary>
/// <summary>
/// Four component 16-bit floating point number.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexElementUsage.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines usage for vertex elements.
/// </summary>
/// <summary>
/// Position data.
/// </summary>
/// <summary>
/// Color data.
/// </summary>
/// <summary>
/// Texture coordinate data or can be used for user-defined data.
/// </summary>
/// <summary>
/// Normal data.
/// </summary>
/// <summary>
/// Binormal data.
/// </summary>
/// <summary>
/// Tangent data.
/// </summary>
/// <summary>
/// Blending indices data.
/// </summary>
/// <summary>
/// Blending weight data.
/// </summary>
/// <summary>
/// Depth data.
/// </summary>
/// <summary>
/// Fog data.
/// </summary>
/// <summary>
/// Point size data. Usable for drawing point sprites.
/// </summary>
/// <summary>
/// Sampler data for specifies the displacement value to look up.
/// </summary>
/// <summary>
/// Single, positive float value, specifies a tessellation factor used in the tessellation unit to control the rate of tessellation.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexInputLayout.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Stores the vertex layout (input elements) for the input assembler stage.
/// </summary>
/// <remarks>
/// In the DirectX version the input layouts are cached in a dictionary. The
/// <see cref="VertexInputLayout"/> is used as the key in the dictionary and therefore needs to
/// implement <see cref="IEquatable{T}"/>. Two <see cref="VertexInputLayout"/> instance are
/// considered equal if the vertex layouts are structurally identical.
/// </remarks>
/// <summary>
/// Gets or sets the number of used input slots.
/// </summary>
/// <value>The number of used input slots.</value>
/// <summary>
/// Initializes a new instance of the <see cref="VertexInputLayout"/> class.
/// </summary>
/// <param name="maxVertexBufferSlots">The maximum number of vertex buffer slots.</param>
/// <summary>
/// Initializes a new instance of the <see cref="VertexInputLayout"/> class.
/// </summary>
/// <param name="vertexDeclarations">The array for storing vertex declarations.</param>
/// <param name="instanceFrequencies">The array for storing instance frequencies.</param>
/// <param name="count">The number of used slots.</param>
/// <summary>
/// Determines whether the specified <see cref="object"/> is equal to this instance.
/// </summary>
/// <param name="obj">The object to compare with the current object.</param>
/// <returns>
/// <see langword="true"/> if the specified <see cref="object"/> is equal to this instance;
/// otherwise, <see langword="false"/>.
/// </returns>
/// <summary>
/// Determines whether the specified <see cref="VertexInputLayout"/> is equal to this
/// instance.
/// </summary>
/// <param name="other">The object to compare with the current object.</param>
/// <returns>
/// <see langword="true"/> if the specified <see cref="VertexInputLayout"/> is equal to this
/// instance; otherwise, <see langword="false"/>.
/// </returns>
/// <summary>
/// Returns a hash code for this instance.
/// </summary>
/// <returns>
/// A hash code for this instance, suitable for use in hashing algorithms and data
/// structures like a hash table.
/// </returns>
// ReSharper disable NonReadonlyMemberInGetHashCode
// ReSharper restore NonReadonlyMemberInGetHashCode
/// <summary>
/// Compares two <see cref="VertexInputLayout"/> instances to determine whether they are the
/// same.
/// </summary>
/// <param name="left">The first instance.</param>
/// <param name="right">The second instance.</param>
/// <returns>
/// <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are
/// the same; otherwise, <see langword="false"/>.
/// </returns>
/// <summary>
/// Compares two <see cref="VertexInputLayout"/> instances to determine whether they are
/// different.
/// </summary>
/// <param name="left">The first instance.</param>
/// <param name="right">The second instance.</param>
/// <returns>
/// <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are
/// the different; otherwise, <see langword="false"/>.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexPosition.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexPositionColor.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexPositionColorTexture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexPositionNormalTexture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Graphics\Vertices\VertexPositionTexture.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Buttons.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines the buttons on gamepad.
/// </summary>
/// <summary>
/// Directional pad up.
/// </summary>
/// <summary>
/// Directional pad down.
/// </summary>
/// <summary>
/// Directional pad left.
/// </summary>
/// <summary>
/// Directional pad right.
/// </summary>
/// <summary>
/// START button.
/// </summary>
/// <summary>
/// BACK button.
/// </summary>
/// <summary>
/// Left stick button (pressing the left stick).
/// </summary>
/// <summary>
/// Right stick button (pressing the right stick).
/// </summary>
/// <summary>
/// Left bumper (shoulder) button.
/// </summary>
/// <summary>
/// Right bumper (shoulder) button.
/// </summary>
/// <summary>
/// Big button.
/// </summary>    
/// <summary>
/// A button.
/// </summary>
/// <summary>
/// B button.
/// </summary>
/// <summary>
/// X button.
/// </summary>
/// <summary>
/// Y button.
/// </summary>
/// <summary>
/// Left stick is towards the left.
/// </summary>
/// <summary>
/// Right trigger.
/// </summary>
/// <summary>
/// Left trigger.
/// </summary>
/// <summary>
/// Right stick is towards up.
/// </summary>   
/// <summary>
/// Right stick is towards down.
/// </summary>   
/// <summary>
/// Right stick is towards the right.
/// </summary>
/// <summary>
/// Right stick is towards the left.
/// </summary>
/// <summary>
/// Left stick is towards up.
/// </summary>  
/// <summary>
/// Left stick is towards down.
/// </summary>  
/// <summary>
/// Left stick is towards the right.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\ButtonState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines a button state for buttons of mouse, gamepad or joystick.
/// </summary>
/// <summary>
/// The button is released.
/// </summary>
/// <summary>
/// The button is pressed.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\GamePad.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary> 
/// Supports querying the game controllers and setting the vibration motors.
/// </summary>
/// <summary>
/// Returns the capabilites of the connected controller.
/// </summary>
/// <param name="playerIndex">Player index for the controller you want to query.</param>
/// <returns>The capabilites of the controller.</returns>
/// <summary>
/// Returns the capabilites of the connected controller.
/// </summary>
/// <param name="index">Index for the controller you want to query.</param>
/// <returns>The capabilites of the controller.</returns>
/// <summary>
/// Gets the current state of a game pad controller with an independent axes dead zone.
/// </summary>
/// <param name="playerIndex">Player index for the controller you want to query.</param>
/// <returns>The state of the controller.</returns>
/// <summary>
/// Gets the current state of a game pad controller with an independent axes dead zone.
/// </summary>
/// <param name="index">Index for the controller you want to query.</param>
/// <returns>The state of the controller.</returns>
/// <summary>
/// Gets the current state of a game pad controller, using a specified dead zone
/// on analog stick positions.
/// </summary>
/// <param name="playerIndex">Player index for the controller you want to query.</param>
/// <param name="deadZoneMode">Enumerated value that specifies what dead zone type to use.</param>
/// <returns>The state of the controller.</returns>
/// <summary>
/// Gets the current state of a game pad controller, using a specified dead zone
/// on analog stick positions.
/// </summary>
/// <param name="index">Index for the controller you want to query.</param>
/// <param name="deadZoneMode">Enumerated value that specifies what dead zone type to use.</param>
/// <returns>The state of the controller.</returns>
/// <summary>
/// Gets the current state of a game pad controller, using a specified dead zone
/// on analog stick positions.
/// </summary>
/// <param name="playerIndex">Player index for the controller you want to query.</param>
/// <param name="leftDeadZoneMode">Enumerated value that specifies what dead zone type to use for the left stick.</param>
/// <param name="rightDeadZoneMode">Enumerated value that specifies what dead zone type to use for the right stick.</param>
/// <returns>The state of the controller.</returns>
/// <summary>
/// Gets the current state of a game pad controller, using a specified dead zone
/// on analog stick positions.
/// </summary>
/// <param name="index">Index for the controller you want to query.</param>
/// <param name="leftDeadZoneMode">Enumerated value that specifies what dead zone type to use for the left stick.</param>
/// <param name="rightDeadZoneMode">Enumerated value that specifies what dead zone type to use for the right stick.</param>
/// <returns>The state of the controller.</returns>
/// <summary>
/// Sets the vibration motor speeds on the controller device if supported.
/// </summary>
/// <param name="playerIndex">Player index that identifies the controller to set.</param>
/// <param name="leftMotor">The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.</param>
/// <param name="rightMotor">The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
/// <returns>Returns true if the vibration motors were set.</returns>
/// <summary>
/// Sets the vibration motor speeds on the controller device if supported.
/// </summary>
/// <param name="playerIndex">Player index that identifies the controller to set.</param>
/// <param name="leftMotor">The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.</param>
/// <param name="rightMotor">The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
/// <param name="leftTrigger">(Xbox One controller only) The speed of the left trigger motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
/// <param name="rightTrigger">(Xbox One controller only) The speed of the right trigger motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
/// <returns>Returns true if the vibration motors were set.</returns>
/// <summary>
/// Sets the vibration motor speeds on the controller device if supported.
/// </summary>
/// <param name="index">Index for the controller you want to query.</param>
/// <param name="leftMotor">The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.</param>
/// <param name="rightMotor">The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
/// <returns>Returns true if the vibration motors were set.</returns>
/// <summary>
/// Sets the vibration motor speeds on the controller device if supported.
/// </summary>
/// <param name="index">Index for the controller you want to query.</param>
/// <param name="leftMotor">The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.</param>
/// <param name="rightMotor">The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
/// <param name="leftTrigger">(Xbox One controller only) The speed of the left trigger motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
/// <param name="rightTrigger">(Xbox One controller only) The speed of the right trigger motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
/// <returns>Returns true if the vibration motors were set.</returns>
/// <summary>
/// The maximum number of game pads supported on this system.  Attempting to
/// access a gamepad index higher than this number will result in an <see cref="InvalidOperationException"/>
/// being thrown by the API.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\GamePadButtons.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A struct that represents the current button states for the controller.
/// </summary>
/// <summary>
/// Gets a value indicating if the button A is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the button A is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating if the button B is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the button B is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating if the button Back is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the button Back is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating if the button X is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the button X is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating if the button Y is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the button Y is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating if the button Start is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the button Start is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating if the left shoulder button is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the left shoulder button is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating if the left stick button is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the left stick button is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating if the right shoulder button is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the right shoulder button is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating if the right stick button is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the right stick button is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating if the guide button is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the guide button is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Determines whether two specified instances of <see cref="GamePadButtons"/> are equal.
/// </summary>
/// <param name="left">The first object to compare.</param>
/// <param name="right">The second object to compare.</param>
/// <returns>true if <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.</returns>
/// <summary>
/// Determines whether two specified instances of <see cref="GamePadButtons"/> are not equal.
/// </summary>
/// <param name="left">The first object to compare.</param>
/// <param name="right">The second object to compare.</param>
/// <returns>true if <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.</returns>
/// <summary>
/// Returns a value indicating whether this instance is equal to a specified object.
/// </summary>
/// <param name="obj">An object to compare to this instance.</param>
/// <returns>true if <paramref name="obj"/> is a <see cref="GamePadButtons"/> and has the same value as this instance; otherwise, false.</returns>
/// <summary>
/// Serves as a hash function for a <see cref="T:Microsoft.Xna.Framework.Input.GamePadButtons"/> object.
/// </summary>
/// <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
/// hash table.</returns>
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadButtons"/>.
/// </summary>
/// <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadButtons"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\GamePadCapabilities.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A stuct that represents the controller capabilities.
/// </summary>
/// <summary>
/// Gets a value indicating if the controller is connected.
/// </summary>
/// <value><c>true</c> if it is connected; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets the gamepad display name.
/// 
/// This property is not available in XNA.
/// </summary>
/// <value>String representing the display name of the gamepad.</value>
/// <summary>
/// Gets the unique identifier of the gamepad.
/// 
/// This property is not available in XNA.
/// </summary>
/// <value>String representing the unique identifier of the gamepad.</value>
/// <summary>
/// Gets a value indicating whether the controller has the button A.
/// </summary>
/// <value><c>true</c> if it has the button A; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the button Back.
/// </summary>
/// <value><c>true</c> if it has the button Back; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the button B.
/// </summary>
/// <value><c>true</c> if it has the button B; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the directional pad down button.
/// </summary>
/// <value><c>true</c> if it has the directional pad down button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the directional pad left button.
/// </summary>
/// <value><c>true</c> if it has the directional pad left button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the directional pad right button.
/// </summary>
/// <value><c>true</c> if it has the directional pad right button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the directional pad up button.
/// </summary>
/// <value><c>true</c> if it has the directional pad up button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the left shoulder button.
/// </summary>
/// <value><c>true</c> if it has the left shoulder button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the left stick button.
/// </summary>
/// <value><c>true</c> if it has the left stick button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the right shoulder button.
/// </summary>
/// <value><c>true</c> if it has the right shoulder button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the right stick button.
/// </summary>
/// <value><c>true</c> if it has the right stick button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the button Start.
/// </summary>
/// <value><c>true</c> if it has the button Start; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the button X.
/// </summary>
/// <value><c>true</c> if it has the button X; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the button Y.
/// </summary>
/// <value><c>true</c> if it has the button Y; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the guide button.
/// </summary>
/// <value><c>true</c> if it has the guide button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has X axis for the left stick (thumbstick) button.
/// </summary>
/// <value><c>true</c> if it has X axis for the left stick (thumbstick) button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has Y axis for the left stick (thumbstick) button.
/// </summary>
/// <value><c>true</c> if it has Y axis for the left stick (thumbstick) button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has X axis for the right stick (thumbstick) button.
/// </summary>
/// <value><c>true</c> if it has X axis for the right stick (thumbstick) button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has Y axis for the right stick (thumbstick) button.
/// </summary>
/// <value><c>true</c> if it has Y axis for the right stick (thumbstick) button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the left trigger button.
/// </summary>
/// <value><c>true</c> if it has the left trigger button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the right trigger button.
/// </summary>
/// <value><c>true</c> if it has the right trigger button; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the left vibration motor.
/// </summary>
/// <value><c>true</c> if it has the left vibration motor; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has the right vibration motor.
/// </summary>
/// <value><c>true</c> if it has the right vibration motor; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating whether the controller has a microphone.
/// </summary>
/// <value><c>true</c> if it has a microphone; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets the type of the controller.
/// </summary>
/// <value>A <see cref="GamePadType"/> representing the controller type..</value>
/// <summary>
/// Determines whether a specified instance of <see cref="Microsoft.Xna.Framework.Input.GamePadCapabilities"/>
/// is equal to another specified <see cref="Microsoft.Xna.Framework.Input.GamePadCapabilities"/>.
/// </summary>
/// <param name="left">The first <see cref="Microsoft.Xna.Framework.Input.GamePadCapabilities"/> to compare.</param>
/// <param name="right">The second <see cref="Microsoft.Xna.Framework.Input.GamePadCapabilities"/> to compare.</param>
/// <returns><c>true</c> if <c>left</c> and <c>right</c> are equal; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether a specified instance of <see cref="Microsoft.Xna.Framework.Input.GamePadCapabilities"/>
/// is not equal to another specified <see cref="Microsoft.Xna.Framework.Input.GamePadCapabilities"/>.
/// </summary>
/// <param name="left">The first <see cref="Microsoft.Xna.Framework.Input.GamePadCapabilities"/> to compare.</param>
/// <param name="right">The second <see cref="Microsoft.Xna.Framework.Input.GamePadCapabilities"/> to compare.</param>
/// <returns><c>true</c> if <c>left</c> and <c>right</c> are not equal; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the specified <see cref="object"/> is equal to the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadCapabilities"/>.
/// </summary>
/// <param name="obj">The <see cref="object"/> to compare with the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadCapabilities"/>.</param>
/// <returns><c>true</c> if the specified <see cref="object"/> is equal to the current
/// <see cref="T:Microsoft.Xna.Framework.Input.GamePadCapabilities"/>; otherwise, <c>false</c>.</returns>
/// <summary>
/// Serves as a hash function for a <see cref="T:Microsoft.Xna.Framework.Input.GamePadCapabilities"/> object.
/// </summary>
/// <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
/// hash table.</returns>
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadCapabilities"/>.
/// </summary>
/// <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadCapabilities"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\GamePadDeadZone.cs
/// <summary>
/// Specifies a type of dead zone processing to apply to Xbox 360 Controller
/// analog sticks when calling GetState.
/// </summary>
/// <summary>
/// The values of each stick are not processed and are returned by GetState as
/// "raw" values. This is best if you intend to implement your own dead zone
/// processing.
/// </summary>
/// <summary>
/// The X and Y positions of each stick are compared against the dead zone independently.
/// This setting is the default when calling GetState.
/// </summary>
/// <summary>
/// The combined X and Y position of each stick is compared to the dead zone.
/// This provides better control than IndependentAxes when the stick is used
/// as a two-dimensional control surface, such as when controlling a character's
/// view in a first-person game.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\GamePadDPad.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets a value indicating wethever down is pressed on the directional pad.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the down button is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating wethever left is pressed on the directional pad.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the left button is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating wethever right is pressed on the directional pad.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the right button is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets a value indicating wethever up is pressed on the directional pad.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the up button is pressed; otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Input.GamePadDPad"/> struct.
/// </summary>
/// <param name="upValue">Current state of directional pad up.</param>
/// <param name="downValue">Current state of directional pad down.</param>
/// <param name="leftValue">Current state of directional pad left.</param>
/// <param name="rightValue">Current state of directional pad right.</param>
/// <summary>
/// Determines whether two specified instances of <see cref="GamePadDPad"/> are equal.
/// </summary>
/// <param name="left">The first object to compare.</param>
/// <param name="right">The second object to compare.</param>
/// <returns>true if <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.</returns>
/// <summary>
/// Determines whether two specified instances of <see cref="GamePadDPad"/> are not equal.
/// </summary>
/// <param name="left">The first object to compare.</param>
/// <param name="right">The second object to compare.</param>
/// <returns>true if <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.</returns>
/// <summary>
/// Returns a value indicating whether this instance is equal to a specified object.
/// </summary>
/// <param name="obj">An object to compare to this instance.</param>
/// <returns>true if <paramref name="obj"/> is a <see cref="GamePadDPad"/> and has the same value as this instance; otherwise, false.</returns>
/// <summary>
/// Serves as a hash function for a <see cref="T:Microsoft.Xna.Framework.Input.GamePadDPad"/> object.
/// </summary>
/// <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
/// hash table.</returns>
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadDPad"/>
/// in a format of 0000 where each number represents a boolean value of each respecting object property: Left, Up, Right, Down.
/// </summary>
/// <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadDPad"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\GamePadState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents specific information about the state of the controller,
/// including the current state of buttons and sticks.
///
/// This is implemented as a partial struct to allow for individual platforms
/// to offer additional data without separate state queries to GamePad.
/// </summary>
/// <summary>
/// The default initialized gamepad state.
/// </summary>
/// <summary>
/// Gets a value indicating if the controller is connected.
/// </summary>
/// <value><c>true</c> if it is connected; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets the packet number associated with this state.
/// </summary>
/// <value>The packet number.</value>
/// <summary>
/// Gets a structure that identifies what buttons on the controller are pressed.
/// </summary>
/// <value>The buttons structure.</value>
/// <summary>
/// Gets a structure that identifies what directions of the directional pad on the controller are pressed.
/// </summary>
/// <value>The directional pad structure.</value>
/// <summary>
/// Gets a structure that indicates the position of the controller sticks (thumbsticks).
/// </summary>
/// <value>The thumbsticks position.</value>
/// <summary>
/// Gets a structure that identifies the position of triggers on the controller.
/// </summary>
/// <value>Positions of the triggers.</value>
/// <summary>
/// Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Input.GamePadState"/> struct
/// using the specified GamePadThumbSticks, GamePadTriggers, GamePadButtons, and GamePadDPad.
/// </summary>
/// <param name="thumbSticks">Initial thumbstick state.</param>
/// <param name="triggers">Initial trigger state..</param>
/// <param name="buttons">Initial button state.</param>
/// <param name="dPad">Initial directional pad state.</param>
/// <summary>
/// Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Input.GamePadState"/> struct
/// using the specified stick, trigger, and button values.
/// </summary>
/// <param name="leftThumbStick">Left stick value. Each axis is clamped between −1.0 and 1.0.</param>
/// <param name="rightThumbStick">Right stick value. Each axis is clamped between −1.0 and 1.0.</param>
/// <param name="leftTrigger">Left trigger value. This value is clamped between 0.0 and 1.0.</param>
/// <param name="rightTrigger">Right trigger value. This value is clamped between 0.0 and 1.0.</param>
/// <param name="button">Button(s) to initialize as pressed.</param>
/// <summary>
/// Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Input.GamePadState"/> struct
/// using the specified stick, trigger, and button values.
/// </summary>
/// <param name="leftThumbStick">Left stick value. Each axis is clamped between −1.0 and 1.0.</param>
/// <param name="rightThumbStick">Right stick value. Each axis is clamped between −1.0 and 1.0.</param>
/// <param name="leftTrigger">Left trigger value. This value is clamped between 0.0 and 1.0.</param>
/// <param name="rightTrigger">Right trigger value. This value is clamped between 0.0 and 1.0.</param>
/// <param name="buttons"> Array of Buttons to initialize as pressed.</param>
/// <summary>
/// Define this method in platform partial classes to initialize default
/// values for platform-specific fields.
/// </summary>
/// <summary>
/// Gets the button mask along with 'virtual buttons' like LeftThumbstickLeft.
/// </summary>
/// <summary>
/// Determines whether specified input device buttons are pressed in this GamePadState.
/// </summary>
/// <returns><c>true</c>, if button was pressed, <c>false</c> otherwise.</returns>
/// <param name="button">Buttons to query. Specify a single button, or combine multiple buttons using a bitwise OR operation.</param>
/// <summary>
/// Determines whether specified input device buttons are released (not pressed) in this GamePadState.
/// </summary>
/// <returns><c>true</c>, if button was released (not pressed), <c>false</c> otherwise.</returns>
/// <param name="button">Buttons to query. Specify a single button, or combine multiple buttons using a bitwise OR operation.</param>
/// <summary>
/// Determines whether a specified instance of <see cref="Microsoft.Xna.Framework.Input.GamePadState"/> is equal
/// to another specified <see cref="Microsoft.Xna.Framework.Input.GamePadState"/>.
/// </summary>
/// <param name="left">The first <see cref="Microsoft.Xna.Framework.Input.GamePadState"/> to compare.</param>
/// <param name="right">The second <see cref="Microsoft.Xna.Framework.Input.GamePadState"/> to compare.</param>
/// <returns><c>true</c> if <c>left</c> and <c>right</c> are equal; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether a specified instance of <see cref="Microsoft.Xna.Framework.Input.GamePadState"/> is not
/// equal to another specified <see cref="Microsoft.Xna.Framework.Input.GamePadState"/>.
/// </summary>
/// <param name="left">The first <see cref="Microsoft.Xna.Framework.Input.GamePadState"/> to compare.</param>
/// <param name="right">The second <see cref="Microsoft.Xna.Framework.Input.GamePadState"/> to compare.</param>
/// <returns><c>true</c> if <c>left</c> and <c>right</c> are not equal; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the specified <see cref="object"/> is equal to the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadState"/>.
/// </summary>
/// <param name="obj">The <see cref="object"/> to compare with the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadState"/>.</param>
/// <returns><c>true</c> if the specified <see cref="object"/> is equal to the current
/// <see cref="T:Microsoft.Xna.Framework.Input.GamePadState"/>; otherwise, <c>false</c>.</returns>
/// <summary>
/// Serves as a hash function for a <see cref="T:Microsoft.Xna.Framework.Input.GamePadState"/> object.
/// </summary>
/// <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
/// hash table.</returns>
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadState"/>.
/// </summary>
/// <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadState"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\GamePadThumbSticks.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A struct that represents the current stick (thumbstick) states for the controller.
/// </summary>
// XInput Xbox 360 Controller dead zones
// Dead zones are slighty different between left and right sticks, this may come from Microsoft usability tests
// Default & SDL Xbox 360 Controller dead zones
// Based on the XInput constants
/// <summary>
/// Gets a value indicating the position of the left stick (thumbstick). 
/// </summary>
/// <value>A <see cref="Vector2"/> indicating the current position of the left stick (thumbstick).</value>
/// <summary>
/// Gets a value indicating the position of the right stick (thumbstick). 
/// </summary>
/// <value>A <see cref="Vector2"/> indicating the current position of the right stick (thumbstick).</value>
// Apply dead zone
// VirtualButtons should always behave like deadzone is IndependentAxes. 
// This is consistent with XNA behaviour and generally most convenient (e.g. for menu navigation)
// XNA applies dead zones before rounding/clamping values. The public ctor does not allow this because the dead zone must be known before
// Apply dead zone
// Apply clamp
/// <summary>
/// Determines whether two specified instances of <see cref="GamePadThumbSticks"/> are equal.
/// </summary>
/// <param name="left">The first object to compare.</param>
/// <param name="right">The second object to compare.</param>
/// <returns>true if <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.</returns>
/// <summary>
/// Determines whether two specified instances of <see cref="GamePadThumbSticks"/> are not equal.
/// </summary>
/// <param name="left">The first object to compare.</param>
/// <param name="right">The second object to compare.</param>
/// <returns>true if <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.</returns>
/// <summary>
/// Returns a value indicating whether this instance is equal to a specified object.
/// </summary>
/// <param name="obj">An object to compare to this instance.</param>
/// <returns>true if <paramref name="obj"/> is a <see cref="GamePadThumbSticks"/> and has the same value as this instance; otherwise, false.</returns>
/// <summary>
/// Serves as a hash function for a <see cref="T:Microsoft.Xna.Framework.Input.GamePadThumbSticks"/> object.
/// </summary>
/// <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
/// hash table.</returns>
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadThumbSticks"/>.
/// </summary>
/// <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadThumbSticks"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\GamePadTriggers.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A struct that countains information on the left and the right trigger buttons.
/// </summary>
/// <summary>
/// Gets the position of the left trigger.
/// </summary>
/// <value>A value from 0.0f to 1.0f representing left trigger.</value>
/// <summary>
/// Gets the position of the right trigger.
/// </summary>
/// <value>A value from 0.0f to 1.0f representing right trigger.</value>
/// <summary>
/// Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Input.GamePadTriggers"/> struct.
/// </summary>
/// <param name="leftTrigger">The position of the left trigger, the value will get clamped between 0.0f and 1.0f.</param>
/// <param name="rightTrigger">The position of the right trigger, the value will get clamped between 0.0f and 1.0f.</param>
/// <summary>
/// Determines whether two specified instances of <see cref="GamePadTriggers"/> are equal.
/// </summary>
/// <param name="left">The first object to compare.</param>
/// <param name="right">The second object to compare.</param>
/// <returns>true if <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.</returns>
/// <summary>
/// Determines whether two specified instances of <see cref="GamePadTriggers"/> are not equal.
/// </summary>
/// <param name="left">The first object to compare.</param>
/// <param name="right">The second object to compare.</param>
/// <returns>true if <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.</returns>
/// <summary>
/// Returns a value indicating whether this instance is equal to a specified object.
/// </summary>
/// <param name="obj">An object to compare to this instance.</param>
/// <returns>true if <paramref name="obj"/> is a <see cref="GamePadTriggers"/> and has the same value as this instance; otherwise, false.</returns>
/// <summary>
/// Serves as a hash function for a <see cref="T:Microsoft.Xna.Framework.Input.GamePadTriggers"/> object.
/// </summary>
/// <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
/// hash table.</returns>
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadTriggers"/>.
/// </summary>
/// <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.GamePadTriggers"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\GamePadType.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines a type of gamepad.
/// </summary>
/// <summary>
/// Unknown.
/// </summary>
/// <summary>
/// GamePad is the XBOX controller.
/// </summary>
/// <summary>
/// GamePad is a wheel.
/// </summary>
/// <summary>
/// GamePad is an arcade stick.
/// </summary>
/// <summary>
/// GamePad is a flight stick.
/// </summary>
/// <summary>
/// GamePad is a dance pad.
/// </summary>
/// <summary>
/// GamePad is a guitar.
/// </summary>
/// <summary>
/// GamePad is an alternate guitar.
/// </summary>
/// <summary>
/// GamePad is a drum kit.
/// </summary>
/// <summary>
/// GamePad is a big button pad.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Joystick.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary> 
/// Allows interaction with joysticks. Unlike <see cref="GamePad"/> the number of Buttons/Axes/DPads is not limited.
/// </summary>
/// <summary>
/// A default <see cref="JoystickState"/>.
/// </summary>
/// <summary>
/// Gets a value indicating whether the current platform supports reading raw joystick data.
/// </summary>
/// <value><c>true</c> if the current platform supports reading raw joystick data; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets a value indicating the last joystick index connected to the system. If this value is less than 0, no joysticks are connected.
/// <para>The order joysticks are connected and disconnected determines their index.
/// As such, this value may be larger than 0 even if only one joystick is connected.
/// </para>
/// </summary>
/// <summary>
/// Gets the capabilites of the joystick.
/// </summary>
/// <param name="index">Index of the joystick you want to access.</param>
/// <returns>The capabilites of the joystick.</returns>
/// <summary>
/// Gets the current state of the joystick.
/// </summary>
/// <param name="index">Index of the joystick you want to access.</param>
/// <returns>The state of the joystick.</returns>
/// <summary>
/// Gets the current state of the joystick by updating an existing <see cref="JoystickState"/>.
/// </summary>
/// <param name="joystickState">The <see cref="JoystickState"/> to update.</param>
/// <param name="index">Index of the joystick you want to access.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\JoystickCapabilities.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes joystick capabilities.
/// </summary>
/// <summary>
/// Gets a value indicating whether the joystick is connected.
/// </summary>
/// <value><c>true</c> if the joystick is connected; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets the unique identifier of the joystick.
/// </summary>
/// <value>String representing the unique identifier of the joystick.</value>
/// <summary>
/// Gets the joystick's display name.
/// </summary>
/// <value>String representing the display name of the joystick.</value>
/// <summary>
/// Gets a value indicating if the joystick is a gamepad.
/// </summary>
/// <value><c>true</c> if the joystick is a gamepad; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets the axis count.
/// </summary>
/// <value>The number of axes that the joystick possesses.</value>
/// <summary>
/// Gets the button count.
/// </summary>
/// <value>The number of buttons that the joystick possesses.</value>
/// <summary>
/// Gets the hat count.
/// </summary>
/// <value>The number of hats/dpads that the joystick possesses.</value>
/// <summary>
/// Determines whether a specified instance of <see cref="Microsoft.Xna.Framework.Input.JoystickCapabilities"/>
/// is equal to another specified <see cref="Microsoft.Xna.Framework.Input.JoystickCapabilities"/>.
/// </summary>
/// <param name="left">The first <see cref="Microsoft.Xna.Framework.Input.JoystickCapabilities"/> to compare.</param>
/// <param name="right">The second <see cref="Microsoft.Xna.Framework.Input.JoystickCapabilities"/> to compare.</param>
/// <returns><c>true</c> if <c>left</c> and <c>right</c> are equal; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether a specified instance of <see cref="Microsoft.Xna.Framework.Input.JoystickCapabilities"/>
/// is not equal to another specified <see cref="Microsoft.Xna.Framework.Input.JoystickCapabilities"/>.
/// </summary>
/// <param name="left">The first <see cref="Microsoft.Xna.Framework.Input.JoystickCapabilities"/> to compare.</param>
/// <param name="right">The second <see cref="Microsoft.Xna.Framework.Input.JoystickCapabilities"/> to compare.</param>
/// <returns><c>true</c> if <c>left</c> and <c>right</c> are not equal; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the specified <see cref="object"/> is equal to the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickCapabilities"/>.
/// </summary>
/// <param name="obj">The <see cref="object"/> to compare with the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickCapabilities"/>.</param>
/// <returns><c>true</c> if the specified <see cref="object"/> is equal to the current
/// <see cref="T:Microsoft.Xna.Framework.Input.JoystickCapabilities"/>; otherwise, <c>false</c>.</returns>
/// <summary>
/// Serves as a hash function for a <see cref="T:Microsoft.Xna.Framework.Input.JoystickCapabilities"/> object.
/// </summary>
/// <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
/// hash table.</returns>
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickCapabilities"/>.
/// </summary>
/// <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickCapabilities"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\JoystickHat.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes joystick hat state.
/// </summary>
/// <summary>
/// Gets if joysticks hat "down" is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the button is pressed otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets if joysticks hat "left" is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the button is pressed otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets if joysticks hat "right" is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the button is pressed otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Gets if joysticks hat "up" is pressed.
/// </summary>
/// <value><see cref="ButtonState.Pressed"/> if the button is pressed otherwise, <see cref="ButtonState.Released"/>.</value>
/// <summary>
/// Determines whether a specified instance of <see cref="Microsoft.Xna.Framework.Input.JoystickHat"/> is equal
/// to another specified <see cref="Microsoft.Xna.Framework.Input.JoystickHat"/>.
/// </summary>
/// <param name="left">The first <see cref="Microsoft.Xna.Framework.Input.JoystickHat"/> to compare.</param>
/// <param name="right">The second <see cref="Microsoft.Xna.Framework.Input.JoystickHat"/> to compare.</param>
/// <returns><c>true</c> if <c>left</c> and <c>right</c> are equal; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether a specified instance of <see cref="Microsoft.Xna.Framework.Input.JoystickHat"/> is not
/// equal to another specified <see cref="Microsoft.Xna.Framework.Input.JoystickHat"/>.
/// </summary>
/// <param name="left">The first <see cref="Microsoft.Xna.Framework.Input.JoystickHat"/> to compare.</param>
/// <param name="right">The second <see cref="Microsoft.Xna.Framework.Input.JoystickHat"/> to compare.</param>
/// <returns><c>true</c> if <c>left</c> and <c>right</c> are not equal; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the specified <see cref="object"/> is equal to the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickHat"/>.
/// </summary>
/// <param name="obj">The <see cref="object"/> to compare with the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickHat"/>.</param>
/// <returns><c>true</c> if the specified <see cref="object"/> is equal to the current
/// <see cref="T:Microsoft.Xna.Framework.Input.JoystickHat"/>; otherwise, <c>false</c>.</returns>
/// <summary>
/// Serves as a hash function for a <see cref="T:Microsoft.Xna.Framework.Input.JoystickHat"/> object.
/// </summary>
/// <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
/// hash table.</returns>
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickHat"/> in a format of 0000 where each number represents a boolean value of each respecting object property: Left, Up, Right, Down.
/// </summary>
/// <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickHat"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\JoystickState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes current joystick state.
/// </summary>
/// <summary>
/// Gets a value indicating whether the joystick is connected.
/// </summary>
/// <value><c>true</c> if the joystick is connected; otherwise, <c>false</c>.</value>
/// <summary>
/// Gets the joystick axis values.
/// </summary>
/// <value>An array list of ints that indicate axis values.</value>
/// <summary>
/// Gets the joystick button values.
/// </summary>
/// <value>An array list of ButtonState that indicate button values.</value>
/// <summary>
/// Gets the joystick hat values.
/// </summary>
/// <value>An array list of <see cref="JoystickHat"/> that indicate hat values.</value>
/// <summary>
/// Determines whether a specified instance of <see cref="Microsoft.Xna.Framework.Input.JoystickState"/> is
/// equal to another specified <see cref="Microsoft.Xna.Framework.Input.JoystickState"/>.
/// </summary>
/// <param name="left">The first <see cref="Microsoft.Xna.Framework.Input.JoystickState"/> to compare.</param>
/// <param name="right">The second <see cref="Microsoft.Xna.Framework.Input.JoystickState"/> to compare.</param>
/// <returns><c>true</c> if <c>left</c> and <c>right</c> are equal; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether a specified instance of <see cref="Microsoft.Xna.Framework.Input.JoystickState"/> is not
/// equal to another specified <see cref="Microsoft.Xna.Framework.Input.JoystickState"/>.
/// </summary>
/// <param name="left">The first <see cref="Microsoft.Xna.Framework.Input.JoystickState"/> to compare.</param>
/// <param name="right">The second <see cref="Microsoft.Xna.Framework.Input.JoystickState"/> to compare.</param>
/// <returns><c>true</c> if <c>left</c> and <c>right</c> are not equal; otherwise, <c>false</c>.</returns>
/// <summary>
/// Determines whether the specified <see cref="object"/> is equal to the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickState"/>.
/// </summary>
/// <param name="obj">The <see cref="object"/> to compare with the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickState"/>.</param>
/// <returns><c>true</c> if the specified <see cref="object"/> is equal to the current
/// <see cref="T:Microsoft.Xna.Framework.Input.JoystickState"/>; otherwise, <c>false</c>.</returns>
/// <summary>
/// Serves as a hash function for a <see cref="T:Microsoft.Xna.Framework.Input.JoystickState"/> object.
/// </summary>
/// <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a
/// hash table.</returns>
/// <summary>
/// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickState"/>.
/// </summary>
/// <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Xna.Framework.Input.JoystickState"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Keyboard.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Allows getting keystrokes from keyboard.
/// </summary>
/// <summary>
/// Returns the current keyboard state.
/// </summary>
/// <returns>Current keyboard state.</returns>
/// <summary>
/// Returns the current keyboard state for a given player.
/// </summary>
/// <param name="playerIndex">Player index of the keyboard.</param>
/// <returns>Current keyboard state.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\KeyboardInput.cs
/// <summary>
/// Displays the keyboard input interface asynchronously.
/// </summary>
/// <param name="title">Title of the dialog box.</param>
/// <param name="description">Description of the dialog box.</param>
/// <param name="defaultText">Default text displayed in the input area.</param>
/// <param name="usePasswordMode">If password mode is enabled, the characters entered are not displayed.</param>
/// <returns>Text entered by the player. Null if back was used.</returns>
/// <exception cref="System.Exception">Thrown when the message box is already visible</exception>
/// <example>
/// <code>
/// var name = await KeyboardInput.Show("Name", "What's your name?", "Player");
/// </code>
/// </example>
/// <summary>
/// Hides the keyboard input interface and returns the parameter as the result of <see cref="Show"/>
/// </summary>
/// <param name="result">Result to return</param>
/// <exception cref="System.Exception">Thrown when the keyboard input is not visible</exception>
/// <example>
/// <code>
/// var nameTask = KeyboardInput.Show("Name", "What's your name?", "Player");
/// KeyboardInput.Cancel("John Doe");
/// var name = await nameTask;
/// </code>
/// </example>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\KeyboardState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Holds the state of keystrokes by a keyboard.
/// </summary>
// Used for the common situation where GetPressedKeys will return an empty array
// Array of 256 bits:
/// <summary>
/// Initializes a new instance of the <see cref="KeyboardState"/> class.
/// </summary>
/// <param name="keys">List of keys to be flagged as pressed on initialization.</param>
/// <param name="capsLock">Caps Lock state.</param>
/// <param name="numLock">Num Lock state.</param>
/// <summary>
/// Initializes a new instance of the <see cref="KeyboardState"/> class.
/// </summary>
/// <param name="keys">List of keys to be flagged as pressed on initialization.</param>
/// <summary>
/// Gets the current state of the Caps Lock key.
/// </summary>
/// <summary>
/// Gets the current state of the Num Lock key.
/// </summary>
/// <summary>
/// Returns the state of a specified key.
/// </summary>
/// <param name="key">The key to query.</param>
/// <returns>The state of the key.</returns>
/// <summary>
/// Gets whether given key is currently being pressed.
/// </summary>
/// <param name="key">The key to query.</param>
/// <returns>true if the key is pressed; false otherwise.</returns>
/// <summary>
/// Gets whether given key is currently being not pressed.
/// </summary>
/// <param name="key">The key to query.</param>
/// <returns>true if the key is not pressed; false otherwise.</returns>
/// <summary>
/// Returns the number of pressed keys in this <see cref="KeyboardState"/>.
/// </summary>
/// <returns>An integer representing the number of keys currently pressed in this <see cref="KeyboardState"/>.</returns>
// http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel
// reuse input as temporary
// temp
// count
/// <summary>
/// Returns an array of values holding keys that are currently being pressed.
/// </summary>
/// <returns>The keys that are currently being pressed.</returns>
/// <summary>
/// Fills an array of values holding keys that are currently being pressed.
/// </summary>
/// <param name="keys">The keys array to fill.
/// This array is not cleared, and it must be equal to or larger than the number of keys pressed.</param>
/// <summary>
/// Gets the hash code for <see cref="KeyboardState"/> instance.
/// </summary>
/// <returns>Hash code of the object.</returns>
/// <summary>
/// Compares whether two <see cref="KeyboardState"/> instances are equal.
/// </summary>
/// <param name="a"><see cref="KeyboardState"/> instance to the left of the equality operator.</param>
/// <param name="b"><see cref="KeyboardState"/> instance to the right of the equality operator.</param>
/// <returns>true if the instances are equal; false otherwise.</returns>
/// <summary>
/// Compares whether two <see cref="KeyboardState"/> instances are not equal.
/// </summary>
/// <param name="a"><see cref="KeyboardState"/> instance to the left of the inequality operator.</param>
/// <param name="b"><see cref="KeyboardState"/> instance to the right of the inequality operator.</param>
/// <returns>true if the instances are different; false otherwise.</returns>
/// <summary>
/// Compares whether current instance is equal to specified object.
/// </summary>
/// <param name="obj">The <see cref="KeyboardState"/> to compare.</param>
/// <returns>true if the provided <see cref="KeyboardState"/> instance is same with current; false otherwise.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Keys.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Defines the keys on a keyboard.
/// </summary>	
/// <summary>
/// Reserved.
/// </summary>
/// <summary>
/// BACKSPACE key.
/// </summary>
/// <summary>
/// TAB key.
/// </summary>
/// <summary>
/// ENTER key.
/// </summary>
/// <summary>
/// CAPS LOCK key.
/// </summary>
/// <summary>
/// ESC key.
/// </summary>
/// <summary>
/// SPACEBAR key.
/// </summary>
/// <summary>
/// PAGE UP key.
/// </summary>
/// <summary>
/// PAGE DOWN key.
/// </summary>
/// <summary>
/// END key.
/// </summary>
/// <summary>
/// HOME key.
/// </summary>
/// <summary>
/// LEFT ARROW key.
/// </summary>
/// <summary>
/// UP ARROW key.
/// </summary>
/// <summary>
/// RIGHT ARROW key.
/// </summary>
/// <summary>
/// DOWN ARROW key.
/// </summary>
/// <summary>
/// SELECT key.
/// </summary>
/// <summary>
/// PRINT key.
/// </summary>
/// <summary>
/// EXECUTE key.
/// </summary>
/// <summary>
/// PRINT SCREEN key.
/// </summary>
/// <summary>
/// INS key.
/// </summary>
/// <summary>
/// DEL key.
/// </summary>
/// <summary>
/// HELP key.
/// </summary>
/// <summary>
/// Used for miscellaneous characters; it can vary by keyboard.
/// </summary>
/// <summary>
/// Used for miscellaneous characters; it can vary by keyboard.
/// </summary>
/// <summary>
/// Used for miscellaneous characters; it can vary by keyboard.
/// </summary>
/// <summary>
/// Used for miscellaneous characters; it can vary by keyboard.
/// </summary>
/// <summary>
/// Used for miscellaneous characters; it can vary by keyboard.
/// </summary>
/// <summary>
/// Used for miscellaneous characters; it can vary by keyboard.
/// </summary>
/// <summary>
/// Used for miscellaneous characters; it can vary by keyboard.
/// </summary>
/// <summary>
/// Used for miscellaneous characters; it can vary by keyboard.
/// </summary>
/// <summary>
/// Used for miscellaneous characters; it can vary by keyboard.
/// </summary>
/// <summary>
/// Used for miscellaneous characters; it can vary by keyboard.
/// </summary>
/// <summary>
/// A key.
/// </summary>
/// <summary>
/// B key.
/// </summary>
/// <summary>
/// C key.
/// </summary>
/// <summary>
/// D key.
/// </summary>
/// <summary>
/// E key.
/// </summary>
/// <summary>
/// F key.
/// </summary>
/// <summary>
/// G key.
/// </summary>
/// <summary>
/// H key.
/// </summary>
/// <summary>
/// I key.
/// </summary>
/// <summary>
/// J key.
/// </summary>
/// <summary>
/// K key.
/// </summary>
/// <summary>
/// L key.
/// </summary>
/// <summary>
/// M key.
/// </summary>
/// <summary>
/// N key.
/// </summary>
/// <summary>
/// O key.
/// </summary>
/// <summary>
/// P key.
/// </summary>
/// <summary>
/// Q key.
/// </summary>
/// <summary>
/// R key.
/// </summary>
/// <summary>
/// S key.
/// </summary>
/// <summary>
/// T key.
/// </summary>
/// <summary>
/// U key.
/// </summary>
/// <summary>
/// V key.
/// </summary>
/// <summary>
/// W key.
/// </summary>
/// <summary>
/// X key.
/// </summary>
/// <summary>
/// Y key.
/// </summary>
/// <summary>
/// Z key.
/// </summary>
/// <summary>
/// Left Windows key.
/// </summary>
/// <summary>
/// Right Windows key.
/// </summary>
/// <summary>
/// Applications key.
/// </summary>
/// <summary>
/// Computer Sleep key.
/// </summary>
/// <summary>
/// Numeric keypad 0 key.
/// </summary>
/// <summary>
/// Numeric keypad 1 key.
/// </summary>
/// <summary>
/// Numeric keypad 2 key.
/// </summary>
/// <summary>
/// Numeric keypad 3 key.
/// </summary>
/// <summary>
/// Numeric keypad 4 key.
/// </summary>
/// <summary>
/// Numeric keypad 5 key.
/// </summary>
/// <summary>
/// Numeric keypad 6 key.
/// </summary>
/// <summary>
/// Numeric keypad 7 key.
/// </summary>
/// <summary>
/// Numeric keypad 8 key.
/// </summary>
/// <summary>
/// Numeric keypad 9 key.
/// </summary>
/// <summary>
/// Multiply key.
/// </summary>
/// <summary>
/// Add key.
/// </summary>
/// <summary>
/// Separator key.
/// </summary>
/// <summary>
/// Subtract key.
/// </summary>
/// <summary>
/// Decimal key.
/// </summary>
/// <summary>
/// Divide key.
/// </summary>
/// <summary>
/// F1 key.
/// </summary>
/// <summary>
/// F2 key.
/// </summary>
/// <summary>
/// F3 key.
/// </summary>
/// <summary>
/// F4 key.
/// </summary>
/// <summary>
/// F5 key.
/// </summary>
/// <summary>
/// F6 key.
/// </summary>
/// <summary>
/// F7 key.
/// </summary>
/// <summary>
/// F8 key.
/// </summary>
/// <summary>
/// F9 key.
/// </summary>
/// <summary>
/// F10 key.
/// </summary>
/// <summary>
/// F11 key.
/// </summary>
/// <summary>
/// F12 key.
/// </summary>
/// <summary>
/// F13 key.
/// </summary>
/// <summary>
/// F14 key.
/// </summary>
/// <summary>
/// F15 key.
/// </summary>
/// <summary>
/// F16 key.
/// </summary>
/// <summary>
/// F17 key.
/// </summary>
/// <summary>
/// F18 key.
/// </summary>
/// <summary>
/// F19 key.
/// </summary>
/// <summary>
/// F20 key.
/// </summary>
/// <summary>
/// F21 key.
/// </summary>
/// <summary>
/// F22 key.
/// </summary>
/// <summary>
/// F23 key.
/// </summary>
/// <summary>
/// F24 key.
/// </summary>
/// <summary>
/// NUM LOCK key.
/// </summary>
/// <summary>
/// SCROLL LOCK key.
/// </summary>
/// <summary>
/// Left SHIFT key.
/// </summary>
/// <summary>
/// Right SHIFT key.
/// </summary>
/// <summary>
/// Left CONTROL key.
/// </summary>
/// <summary>
/// Right CONTROL key.
/// </summary>
/// <summary>
/// Left ALT key.
/// </summary>
/// <summary>
/// Right ALT key.
/// </summary>
/// <summary>
/// Browser Back key.
/// </summary>
/// <summary>
/// Browser Forward key.
/// </summary>
/// <summary>
/// Browser Refresh key.
/// </summary>
/// <summary>
/// Browser Stop key.
/// </summary>
/// <summary>
/// Browser Search key.
/// </summary>
/// <summary>
/// Browser Favorites key.
/// </summary>
/// <summary>
/// Browser Start and Home key.
/// </summary>
/// <summary>
/// Volume Mute key.
/// </summary>
/// <summary>
/// Volume Down key.
/// </summary>
/// <summary>
/// Volume Up key.
/// </summary>
/// <summary>
/// Next Track key.
/// </summary>
/// <summary>
/// Previous Track key.
/// </summary>
/// <summary>
/// Stop Media key.
/// </summary>
/// <summary>
/// Play/Pause Media key.
/// </summary>
/// <summary>
/// Start Mail key.
/// </summary>
/// <summary>
/// Select Media key.
/// </summary>
/// <summary>
/// Start Application 1 key.
/// </summary>
/// <summary>
/// Start Application 2 key.
/// </summary>
/// <summary>
/// The OEM Semicolon key on a US standard keyboard.
/// </summary>
/// <summary>
/// For any country/region, the '+' key.
/// </summary>
/// <summary>
/// For any country/region, the ',' key.
/// </summary>
/// <summary>
/// For any country/region, the '-' key.
/// </summary>
/// <summary>
/// For any country/region, the '.' key.
/// </summary>
/// <summary>
/// The OEM question mark key on a US standard keyboard.
/// </summary>
/// <summary>
/// The OEM tilde key on a US standard keyboard.
/// </summary>
/// <summary>
/// The OEM open bracket key on a US standard keyboard.
/// </summary>
/// <summary>
/// The OEM pipe key on a US standard keyboard.
/// </summary>
/// <summary>
/// The OEM close bracket key on a US standard keyboard.
/// </summary>
/// <summary>
/// The OEM singled/double quote key on a US standard keyboard.
/// </summary>
/// <summary>
/// Used for miscellaneous characters; it can vary by keyboard.
/// </summary>
/// <summary>
/// The OEM angle bracket or backslash key on the RT 102 key keyboard.
/// </summary>
/// <summary>
/// IME PROCESS key.
/// </summary>
/// <summary>
/// Attn key.
/// </summary>
/// <summary>
/// CrSel key.
/// </summary>
/// <summary>
/// ExSel key.
/// </summary>
/// <summary>
/// Erase EOF key.
/// </summary>
/// <summary>
/// Play key.
/// </summary>
/// <summary>
/// Zoom key.
/// </summary>
/// <summary>
/// PA1 key.
/// </summary>
/// <summary>
/// CLEAR key.
/// </summary>
/// <summary>
/// Green ChatPad key.
/// </summary>
/// <summary>
/// Orange ChatPad key.
/// </summary>
/// <summary>
/// PAUSE key.
/// </summary>
/// <summary>
/// IME Convert key.
/// </summary>
/// <summary>
/// IME NoConvert key.
/// </summary>
/// <summary>
/// Kana key on Japanese keyboards.
/// </summary>
/// <summary>
/// Kanji key on Japanese keyboards.
/// </summary>
/// <summary>
/// OEM Auto key.
/// </summary>
/// <summary>
/// OEM Copy key.
/// </summary>
/// <summary>
/// OEM Enlarge Window key.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\KeyState.cs
// /*
/*
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce, " "reproduction,  " "derivative works,  " and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3,  
// each contributor grants you a non-exclusive, worldwide,  royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3,  
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make,  have made, use,  sell, offer for sale, import,  and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
/// <summary>
/// Identifies the state of a keyboard key.
/// </summary>
/// <summary>
/// Key is released.
/// </summary>
/// <summary>
/// Key is pressed.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\MessageBox.cs
/// <summary>
/// Displays the message box interface asynchronously.
/// </summary>
/// <param name="title">Title of the message box.</param>
/// <param name="description">Description of the message box.</param>
/// <param name="buttons">Captions of the message box buttons. Up to three supported.</param>
/// <returns>Index of button selected by the player. Null if back was used.</returns>
/// <exception cref="System.Exception">Thrown when the message box is already visible</exception>
/// <example>
/// <code>
/// var color = await MessageBox.Show("Color", "What's your favorite color?", new[] { "Red", "Green", "Blue" });
/// </code>
/// </example>
/// <summary>
/// Hides the message box interface and returns the parameter as the result of <see cref="Show"/>
/// </summary>
/// <param name="result">Result to return</param>
/// <exception cref="System.Exception">Thrown when the message box is not visible</exception>
/// <example>
/// <code>
/// var colorTask = MessageBox.Show("Color", "What's your favorite color?", new[] { "Red", "Green", "Blue" });
/// MessageBox.Cancel(0);
/// var color = await colorTask;
/// </code>
/// </example>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Mouse.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Allows reading position and button click information from mouse.
/// </summary>
/// <summary>
/// Gets or sets the window handle for current mouse processing.
/// </summary> 
/// <summary>
/// This API is an extension to XNA.
/// Gets mouse state information that includes position and button
/// presses for the provided window
/// </summary>
/// <returns>Current state of the mouse.</returns>
/// <summary>
/// Gets mouse state information that includes position and button presses
/// for the primary window
/// </summary>
/// <returns>Current state of the mouse.</returns>
/// <summary>
/// Sets mouse cursor's relative position to game-window.
/// </summary>
/// <param name="x">Relative horizontal position of the cursor.</param>
/// <param name="y">Relative vertical position of the cursor.</param>
/// <summary>
/// Sets the cursor image to the specified MouseCursor.
/// </summary>
/// <param name="cursor">Mouse cursor to use for the cursor image.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\MouseCursor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Describes a mouse cursor.
/// </summary>
/// <summary>
/// Gets the default arrow cursor.
/// </summary>
/// <summary>
/// Gets the cursor that appears when the mouse is over text editing regions.
/// </summary>
/// <summary>
/// Gets the waiting cursor that appears while the application/system is busy.
/// </summary>
/// <summary>
/// Gets the crosshair ("+") cursor.
/// </summary>
/// <summary>
/// Gets the cross between Arrow and Wait cursors.
/// </summary>
/// <summary>
/// Gets the northwest/southeast ("\") cursor.
/// </summary>
/// <summary>
/// Gets the northeast/southwest ("/") cursor.
/// </summary>
/// <summary>
/// Gets the horizontal west/east ("-") cursor.
/// </summary>
/// <summary>
/// Gets the vertical north/south ("|") cursor.
/// </summary>
/// <summary>
/// Gets the size all cursor which points in all directions.
/// </summary>
/// <summary>
/// Gets the cursor that points that something is invalid, usually a cross.
/// </summary>
/// <summary>
/// Gets the hand cursor, usually used for web links.
/// </summary>
/// <summary>
/// Creates a mouse cursor from the specified texture.
/// </summary>
/// <param name="texture">Texture to use as the cursor image.</param>
/// <param name="originx">X cordinate of the image that will be used for mouse position.</param>
/// <param name="originy">Y cordinate of the image that will be used for mouse position.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\MouseState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a mouse state with cursor position and button press information.
/// </summary>
/// <summary>
/// Initializes a new instance of the MouseState.
/// </summary>
/// <param name="x">Horizontal position of the mouse in relation to the window.</param>
/// <param name="y">Vertical position of the mouse in relation to the window.</param>
/// <param name="scrollWheel">Mouse scroll wheel's value.</param>
/// <param name="leftButton">Left mouse button's state.</param>
/// <param name="middleButton">Middle mouse button's state.</param>
/// <param name="rightButton">Right mouse button's state.</param>
/// <param name="xButton1">XBUTTON1's state.</param>
/// <param name="xButton2">XBUTTON2's state.</param>
/// <remarks>Normally <see cref="Mouse.GetState()"/> should be used to get mouse current state. The constructor is provided for simulating mouse input.</remarks>
/// <summary>
/// Initializes a new instance of the MouseState.
/// </summary>
/// <param name="x">Horizontal position of the mouse in relation to the window.</param>
/// <param name="y">Vertical position of the mouse in relation to the window.</param>
/// <param name="scrollWheel">Mouse scroll wheel's value.</param>
/// <param name="leftButton">Left mouse button's state.</param>
/// <param name="middleButton">Middle mouse button's state.</param>
/// <param name="rightButton">Right mouse button's state.</param>
/// <param name="xButton1">XBUTTON1's state.</param>
/// <param name="xButton2">XBUTTON2's state.</param>
/// <param name="horizontalScrollWheel">Mouse horizontal scroll wheel's value.</param>
/// <remarks>Normally <see cref="Mouse.GetState()"/> should be used to get mouse current state. The constructor is provided for simulating mouse input.</remarks>
/// <summary>
/// Compares whether two MouseState instances are equal.
/// </summary>
/// <param name="left">MouseState instance on the left of the equal sign.</param>
/// <param name="right">MouseState instance  on the right of the equal sign.</param>
/// <returns>true if the instances are equal; false otherwise.</returns>
/// <summary>
/// Compares whether two MouseState instances are not equal.
/// </summary>
/// <param name="left">MouseState instance on the left of the equal sign.</param>
/// <param name="right">MouseState instance  on the right of the equal sign.</param>
/// <returns>true if the objects are not equal; false otherwise.</returns>
/// <summary>
/// Compares whether current instance is equal to specified object.
/// </summary>
/// <param name="obj">The MouseState to compare.</param>
/// <returns></returns>
/// <summary>
/// Gets the hash code for MouseState instance.
/// </summary>
/// <returns>Hash code of the object.</returns>
/// <summary>
/// Returns a string describing the mouse state.
/// </summary>
/// <summary>
/// Gets horizontal position of the cursor in relation to the window.
/// </summary>
/// <summary>
/// Gets vertical position of the cursor in relation to the window.
/// </summary>
/// <summary>
/// Gets cursor position.
/// </summary>
/// <summary>
/// Gets state of the left mouse button.
/// </summary>
/// <summary>
/// Gets state of the middle mouse button.
/// </summary>
/// <summary>
/// Gets state of the right mouse button.
/// </summary>
/// <summary>
/// Returns cumulative scroll wheel value since the game start.
/// </summary>
/// <summary>
/// Returns the cumulative horizontal scroll wheel value since the game start
/// </summary>
/// <summary>
/// Gets state of the XButton1.
/// </summary>
/// <summary>
/// Gets state of the XButton2.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Touch\GestureSample.cs
// /*
/*
// MonoGame - Copyright © 2009-2010 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
/// <summary>
/// Represents data from a multi-touch gesture over a span of time.
/// </summary>
// attributes
/// <summary>
/// Gets the type of the gesture.
/// </summary>
/// <summary>
/// Gets the starting time for this multi-touch gesture sample.
/// </summary>
/// <summary>
/// Gets the position of the first touch-point in the gesture sample.
/// </summary>
/// <summary>
/// Gets the position of the second touch-point in the gesture sample.
/// </summary>
/// <summary>
/// Gets the delta information for the first touch-point in the gesture sample.
/// </summary>
/// <summary>
/// Gets the delta information for the second touch-point in the gesture sample.
/// </summary>
/// <summary>
/// Initializes a new <see cref="GestureSample"/>.
/// </summary>
/// <param name="gestureType"><see cref="GestureType"/></param>
/// <param name="timestamp"></param>
/// <param name="position"></param>
/// <param name="position2"></param>
/// <param name="delta"></param>
/// <param name="delta2"></param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Touch\GestureType.cs
// /*
/*
// MonoGame - Copyright © 2009-2010 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
/// <summary>
/// Enumuration of values that represent different gestures that can be processed by <see cref="TouchPanel.ReadGesture"/>.
/// </summary>
/// <summary>
/// No gestures.
/// </summary>
/// <summary>
/// The user touched a single point.
/// </summary>
/// <summary>
/// States completion of a drag gesture(VerticalDrag, HorizontalDrag, or FreeDrag).
/// </summary>
/// <remarks>No position or delta information is available for this sample.</remarks>
/// <summary>
/// States that a touch was combined with a quick swipe.
/// </summary>    
/// <remarks>Flicks does not contain position information. The velocity of it can be read from <see cref="GestureSample.Delta"/></remarks>
/// <summary>
/// The use touched a point and then performed a free-form drag.
/// </summary>
/// <summary>        
/// The use touched a single point for approximately one second.
/// </summary>
/// <remarks>As this is a single event, it will not be contionusly fired while the user is holding the touch-point.</remarks>
/// <summary>
/// The user touched the screen and performed either left to right or right to left drag gesture.
/// </summary>
/// <summary>
/// The user either converged or diverged two touch-points on the screen which is like a two-finger drag.
/// </summary>
/// <remarks>When this gesture-type is enabled and two fingers are down, it takes precedence over drag gestures.</remarks>
/// <summary>
/// An in-progress pinch operation was completed.
/// </summary>
/// <remarks>No position or delta information is available for this sample.</remarks>
/// <summary>
/// The user tapped the device twice which is always preceded by a Tap gesture.
/// </summary>
/// <remarks>If the time between two touchs are long enough, insted two seperate single Tap gestures will be generated.</remarks>
/// <summary>
/// The user touched the screen and performed either top to bottom or bottom to top drag gesture.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Touch\TouchCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides state information for a touch screen enabled device.
/// </summary>
/// <summary>
/// States if a touch screen is available.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="TouchCollection"/> with a pre-determined set of touch locations.
/// </summary>
/// <param name="touches">Array of <see cref="TouchLocation"/> items to initialize with.</param>
/// <summary>
/// Returns <see cref="TouchLocation"/> specified by ID.
/// </summary>
/// <param name="id"></param>
/// <param name="touchLocation"></param>
/// <returns></returns>
/// <summary>
/// States if touch collection is read only.
/// </summary>
/// <summary>
/// Returns the index of the first occurrence of specified <see cref="TouchLocation"/> item in the collection.
/// </summary>
/// <param name="item"><see cref="TouchLocation"/> to query.</param>
/// <returns></returns>
/// <summary>
/// Inserts a <see cref="TouchLocation"/> item into the indicated position.
/// </summary>
/// <param name="index">The position to insert into.</param>
/// <param name="item">The <see cref="TouchLocation"/> item to insert.</param>
/// <summary>
/// Removes the <see cref="TouchLocation"/> item at specified index.
/// </summary>
/// <param name="index">Index of the item that will be removed from collection.</param>
/// <summary>
/// Gets or sets the item at the specified index of the collection.
/// </summary>
/// <param name="index">Position of the item.</param>
/// <returns><see cref="TouchLocation"/></returns>
/// <summary>
/// Adds a <see cref="TouchLocation"/> to the collection.
/// </summary>
/// <param name="item">The <see cref="TouchLocation"/> item to be added. </param>
/// <summary>
/// Clears all the items in collection.
/// </summary>
/// <summary>
/// Returns true if specified <see cref="TouchLocation"/> item exists in the collection, false otherwise./>
/// </summary>
/// <param name="item">The <see cref="TouchLocation"/> item to query for.</param>
/// <returns>Returns true if queried item is found, false otherwise.</returns>
/// <summary>
/// Copies the <see cref="TouchLocation"/>collection to specified array starting from the given index.
/// </summary>
/// <param name="array">The array to copy <see cref="TouchLocation"/> items.</param>
/// <param name="arrayIndex">The starting index of the copy operation.</param>
/// <summary>
/// Returns the number of <see cref="TouchLocation"/> items that exist in the collection.
/// </summary>
/// <summary>
/// Removes the specified <see cref="TouchLocation"/> item from the collection.
/// </summary>
/// <param name="item">The <see cref="TouchLocation"/> item to remove.</param>
/// <returns></returns>
/// <summary>
/// Returns an enumerator for the <see cref="TouchCollection"/>.
/// </summary>
/// <returns>Enumerable list of <see cref="TouchLocation"/> objects.</returns>
/// <summary>
/// Returns an enumerator for the <see cref="TouchCollection"/>.
/// </summary>
/// <returns>Enumerable list of <see cref="TouchLocation"/> objects.</returns>
/// <summary>
/// Returns an enumerator for the <see cref="TouchCollection"/>.
/// </summary>
/// <returns>Enumerable list of objects.</returns>
// IList<TouchLocation>
/// <summary>
/// Provides the ability to iterate through the TouchLocations in an TouchCollection.
/// </summary>
/// <summary>
/// Gets the current element in the TouchCollection.
/// </summary>
/// <summary>
/// Advances the enumerator to the next element of the TouchCollection.
/// </summary>
/// <summary>
/// Immediately releases the unmanaged resources used by this object.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Touch\TouchLocation.cs
// /*
/*
// MonoGame - Copyright  2009-2010 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
/// <summary>
///Attributes 
/// </summary>
// Only used in Android, for now
// Used for gesture recognition.
/// <summary>
/// True if this touch was pressed and released on the same frame.
/// In this case we will keep it around for the user to get by GetState that frame.
/// However if they do not call GetState that frame, this touch will be forgotten.
/// </summary>
/// <summary>
/// Helper for assigning an invalid touch location.
/// </summary>
// If this is a pressed location then store the 
// current position and timestamp as pressed.
/// <summary>
/// Returns a copy of the touch with the state changed to moved.
/// </summary>
/// <returns>The new touch location.</returns>
// Store the current state as the previous.
// Set the new state.
/// <summary>
/// Updates the touch location using the new event.
/// </summary>
/// <param name="touchEvent">The next event for this touch location.</param>
// Store the current state as the previous one.
// Set the new state.
// If time has elapsed then update the velocity.
// Use a simple low pass filter to accumulate velocity.
//Going straight from pressed to released on the same frame
//Lie that we are pressed for now
// Set the new timestamp.
// Return true if the state actually changed.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Touch\TouchLocationState.cs
// /*
/*
// MonoGame - Copyright  2009-2010 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
/// <summary>
/// Holds the possible state information for a touch location..
/// </summary>
/// <summary>
/// This touch location position is invalid.
/// </summary>
/// <remarks>Typically, you will encounter this state when a new touch location attempts to get the previous state of itself.</remarks>
/// <summary>
/// This touch location position was updated or pressed at the same position.
/// </summary>
/// <summary>
/// This touch location position is new. 
/// </summary>
/// <summary>
/// This touch location position was released. 
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Touch\TouchPanel.cs
// /*
/*
// XnaTouch - Copyright  2009-2010 The XnaTouch Team
//
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
/// <summary>
/// Allows retrieval of information from Touch Panel device.
/// </summary>
/// <summary>
/// Gets the current state of the touch panel.
/// </summary>
/// <returns><see cref="TouchCollection"/></returns>
/// <summary>
/// Returns the next available gesture on touch panel device.
/// </summary>
/// <returns><see cref="GestureSample"/></returns>
// Return the next gesture.
/// <summary>
/// The window handle of the touch panel. Purely for Xna compatibility.
/// </summary>
/// <summary>
/// Gets or sets the display height of the touch panel.
/// </summary>
/// <summary>
/// Gets or sets the display orientation of the touch panel.
/// </summary>
/// <summary>
/// Gets or sets the display width of the touch panel.
/// </summary>
/// <summary>
/// Gets or sets enabled gestures.
/// </summary>
/// <summary>
/// Returns true if a touch gesture is available.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Touch\TouchPanelCapabilities.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Allows retrieval of capabilities information from touch panel device.
/// </summary>
// There does not appear to be a way of finding out if a touch device supports pressure.
// XNA does not expose a pressure value, so let's assume it doesn't support it.
// Is a touch device present?
// Iterate through all pointer devices and find the maximum number of concurrent touches possible
// http://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TOUCHSCREEN
//iPhone supports 5, iPad 11
//Pad
//Touch isn't implemented in OpenTK, so no linux or mac https://github.com/opentk/opentk/issues/80
/// <summary>
/// Returns true if a device is available for use.
/// </summary>
/// <summary>
/// Returns the maximum number of touch locations tracked by the touch panel device.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Input\Touch\TouchPanelState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The reserved touchId for all mouse touch points.
/// </summary>
/// <summary>
/// The current touch state.
/// </summary>
/// <summary>
/// The current gesture state.
/// </summary>
/// <summary>
/// The positional scale to apply to touch input.
/// </summary>
/// <summary>
/// The current size of the display.
/// </summary>
/// <summary>
/// The next touch location identifier.
/// The value 1 is reserved for the mouse touch point.
/// </summary>
/// <summary>
/// The current timestamp that we use for setting the timestamp of new TouchLocations
/// </summary>
/// <summary>
/// The mapping between platform specific touch ids
/// and the touch ids we assign to touch locations.
/// </summary>
/// <summary>
/// The window handle of the touch panel. Purely for Xna compatibility.
/// </summary>
/// <summary>
/// Returns capabilities of touch panel device.
/// </summary>
/// <returns><see cref="TouchPanelCapabilities"/></returns>
/// <summary>
/// Age all the touches, so any that were Pressed become Moved, and any that were Released are removed
/// </summary>
/// <summary>
/// Apply the given new touch to the state. If it is a Pressed it will be added as a new touch, otherwise we update the existing touch it matches
/// </summary>
//Find the matching touch
//If we are moving straight from Pressed to Released and we've existed for multiple frames, that means we've never been seen, so just get rid of us
//Otherwise update the touch based on the new one
//Clear out touches from previous frames that were released on the same frame they were touched that haven't been seen
//If a touch was pressed and released in a previous frame and the user didn't ask about it then trash it.
// Different platforms return different touch identifiers
// based on the specifics of their implementation and the
// system drivers.
//
// Sometimes these ids are suitable for our use, but other
// times it can recycle ids or do cute things like return
// the same id for double tap events.
//
// We instead provide consistent ids by generating them
// ourselves on the press and looking them up on move 
// and release events.
// 
// Mouse pointing devices always use a reserved Id
// Try to find the touch id.
// If we got here that means either the device is sending
// us bad, out of order, or old touch events.  In any case
// just ignore them.
// Add the new touch event keeping the list from getting
// too large if no one happens to be requesting the state.
//If we have gestures enabled then collect events for those too.
//We also have to keep tracking any touches while we know about touches so we don't miss releases even if gesture recognition is disabled
// If this is a release unmap the hardware id.
// Get the window size.
// Recalculate the touch scale.
/// <summary>
/// This will release all touch locations.  It should only be 
/// called on platforms where touch state is reset all at once.
/// </summary>
// Submit a new event for each non-released location.
// Release all the touch id mappings.
/// <summary>
/// Gets or sets the display height of the touch panel.
/// </summary>
/// <summary>
/// Gets or sets the display orientation of the touch panel.
/// </summary>
/// <summary>
/// Gets or sets the display width of the touch panel.
/// </summary>
/// <summary>
/// Gets or sets enabled gestures.
/// </summary>
/// <summary>
/// Returns true if a touch gesture is available.
/// </summary>
// Process the pending gesture events. (May cause hold events)
/// <summary>
/// Returns the next available gesture on touch panel device.
/// </summary>
/// <returns><see cref="GestureSample"/></returns>
// Return the next gesture.
/// <summary>
/// Maximum distance a touch location can wiggle and 
/// not be considered to have moved.
/// </summary>
/// <summary>
/// The pinch touch locations.
/// </summary>
/// <summary>
/// If true the pinch touch locations are valid and
/// a pinch gesture has begun.
/// </summary>
/// <summary>
/// Used to disable emitting of tap gestures.
/// </summary>
/// <summary>
/// Used to disable emitting of hold gestures.
/// </summary>
// These are observed XNA gesture rules which we follow below.  Please
// add to them if a new case is found.
//
//  - Tap occurs on release.
//  - DoubleTap occurs on the first press after a Tap.
//  - Tap, Double Tap, and Hold are disabled if a drag begins or more than one finger is pressed.
//  - Drag occurs when one finger is down and actively moving.
//  - Pinch occurs if 2 or more fingers are down and at least one is moving.
//  - If you enter a Pinch during a drag a DragComplete is fired.
//  - Drags are classified as horizontal, vertical, free, or none and stay that way.
//
// First get a count of touch locations which 
// are not in the released state.
// As soon as we have more than one held point then 
// tap and hold gestures are disabled until all the 
// points are released.
// Process the touch locations for gestures.
// The DoubleTap event is emitted on first press as
// opposed to Tap which happens on release.
// Any time more than one finger is down and pinch is
// enabled then we exclusively do pinch processing.
// Save or update the first pinch point.
// Save or update the second pinch point.
// NOTE: Actual pinch processing happens outside and
// below this loop to ensure both points are updated
// before gestures are emitted.
// If we're not dragging try to process a hold event.
// If the touch state has changed then do a drag gesture.
// If the touch state hasn't changed then this
// is an old release event... skip it.
// If this is one of the pinch locations then we
// need to fire off the complete event and stop
// the pinch gesture operation.
// If there are still other pressed locations then there
// is nothing more we can do with this release.
// From testing XNA it seems we need a velocity 
// of about 100 to classify this as a flick.
//fall through, a drag should still happen even if a flick does
// If a drag is active then we need to finalize it.
// If all else fails try to process it as a tap.
// If the touch state hasn't changed then there is no 
// cleanup to do and no pinch to process.
// If we have two pinch points then update the pinch state.
// Make sure a partial pinch state 
// is not left hanging around.
// If all points are released then clear some states.
// If the new tap is too far away from the last then
// this cannot be a double tap event.
// Check that this tap happened within the standard 
// double tap time threshold of 300 milliseconds.
// Disable taps until after the next release.
// If the release is too far away from the press 
// position then this cannot be a tap event.
// If we pressed and held too long then don't 
// generate a tap event for it.
// Store the last tap for 
// double tap processing.
// Fire off the tap event immediately.
// Make sure this is a move event and that we have
// a previous touch location.
// If we're free dragging then stick to it.
// Once we enter either vertical or horizontal drags
// we stick to it... regardless of the delta.
// If the delta isn't either horizontal or vertical
//then it could be a free drag if not classified.
// If we couldn't classify the drag then
// it is nothing... set it to complete.
// If the drag could not be classified then no gesture.
// Get the newest timestamp.
// If we were already in a drag state then fire
// off the drag completion event.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\Album.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the duration of the Album.
/// </summary>
// Not implemented
/// <summary>
/// Gets the Genre of the Album.
/// </summary>
/// <summary>
/// Gets a value indicating whether the Album has associated album art.
/// </summary>
// If album art is missing the bounds will be: Infinity, Infinity, 0, 0
/// <summary>
/// Gets a value indicating whether the object is disposed.
/// </summary>
/// <summary>
/// Gets the name of the Album.
/// </summary>
/// <summary>
/// Gets a SongCollection that contains the songs on the album.
/// </summary>
/// <summary>
/// Immediately releases the unmanaged resources used by this object.
/// </summary>
/// <summary>
/// Returns the stream that contains the album art image data.
/// </summary>
/// <summary>
/// Returns the stream that contains the album thumbnail image data.
/// </summary>
/// <summary>
/// Returns a String representation of this Album.
/// </summary>
/// <summary>
/// Gets the hash code for this instance.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\AlbumCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the number of Album objects in the AlbumCollection.
/// </summary>
/// <summary>
/// Gets a value indicating whether the object is disposed.
/// </summary>
/// <summary>
/// Gets the Album at the specified index in the AlbumCollection.
/// </summary>
/// <param name="index">Index of the Album to get.</param>
/// <summary>
/// Immediately releases the unmanaged resources used by this object.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\Artist.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the AlbumCollection for the Artist.
/// </summary>
/// <summary>
/// Gets a value indicating whether the object is disposed.
/// </summary>
/// <summary>
/// Gets the name of the Artist.
/// </summary>
/// <summary>
/// Gets the SongCollection for the Artist.
/// </summary>
/// <summary>
/// Immediately releases the unmanaged resources used by this object.
/// </summary>
/// <summary>
/// Returns a String representation of the Artist.
/// </summary>
/// <summary>
/// Gets the hash code for this instance.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\Genre.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the AlbumCollection for the Genre.
/// </summary>
/// <summary>
/// Gets a value indicating whether the object is disposed.
/// </summary>
/// <summary>
/// Gets the name of the Genre.
/// </summary>
/// <summary>
/// Gets the SongCollection for the Genre.
/// </summary>
/// <summary>
/// Immediately releases the unmanaged resources used by this object.
/// </summary>
/// <summary>
/// Returns a String representation of the Genre.
/// </summary>
/// <summary>
/// Gets the hash code for this instance.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\MediaLibrary.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//public ArtistCollection Artists { get; private set; }
//public GenreCollection Genres { get; private set; }
//public PlaylistCollection Playlists { get; private set; }
/// <summary>
/// Load the contents of MediaLibrary. This blocking call might take up to a few minutes depending on the platform and the size of the user's music library.
/// </summary>
/// <param name="progressCallback">Callback that reports back the progress of the music library loading in percents (0-100).</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\MediaPlayer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Need to hold onto this to keep track of how many songs
// have played when in shuffle mode
/// <summary>
/// Play clears the current playback queue, and then queues up the specified song for playback. 
/// Playback starts immediately at the beginning of the song.
/// </summary>
/// <summary>
/// Play clears the current playback queue, and then queues up the specified song for playback. 
/// Playback starts immediately at the given position of the song.
/// </summary>
// TODO: Check args to see if song sucessfully played
// Setting direction to 0 will force the first song
// in the queue to be played.
// if we're on "shuffle", then it'll pick a random one
// anyway, regardless of the "direction".
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\MediaQueue.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\MediaSource.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\MediaSourceType.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\MediaState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\Playlist.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/*public SongCollection Songs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\PlaylistCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\Song.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the Album on which the Song appears.
/// </summary>
/// <summary>
/// Gets the Artist of the Song.
/// </summary>
/// <summary>
/// Gets the Genre of the Song.
/// </summary>
/// <summary>
/// Returns a song that can be played via <see cref="MediaPlayer"/>.
/// </summary>
/// <param name="name">The name for the song. See <see cref="Song.Name"/>.</param>
/// <param name="uri">The path to the song file.</param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\SongCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\Video.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a video.
/// </summary>
/// <summary>
/// I actually think this is a file PATH...
/// </summary>
/// <summary>
/// Gets the duration of the Video.
/// </summary>
/// <summary>
/// Gets the frame rate of this video.
/// </summary>
/// <summary>
/// Gets the height of this video, in pixels.
/// </summary>
/// <summary>
/// Gets the VideoSoundtrackType for this video.
/// </summary>
/// <summary>
/// Gets the width of this video, in pixels.
/// </summary>
//PlatformDispose(disposing);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\VideoPlayer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets a value that indicates whether the object is disposed.
/// </summary>
/// <summary>
/// Gets a value that indicates whether the player is playing video in a loop.
/// </summary>
/// <summary>
/// Gets or sets the muted setting for the video player.
/// </summary>
/// <summary>
/// Gets the play position within the currently playing video.
/// </summary>
/// <summary>
/// Gets the media playback state, MediaState.
/// </summary>
// Give the platform code a chance to update 
// the playback state before we return the result.
/// <summary>
/// Gets the Video that is currently playing.
/// </summary>
/// <summary>
/// Video player volume, from 0.0f (silence) to 1.0f (full volume relative to the current device volume).
/// </summary>
/// <summary>
/// Retrieves a Texture2D containing the current frame of video being played.
/// </summary>
/// <returns>The current frame of video.</returns>
/// <exception cref="InvalidOperationException">Thrown if no video is set on the player</exception>
/// <exception cref="InvalidOperationException">Thrown if the platform was unable to get a texture in a reasonable amount of time. Often the platform specific media code is running
/// in a different thread or process. Note: This may be a change from XNA behaviour</exception>
//XNA never returns a null texture
//Sleep for longer and longer times
/// <summary>
/// Pauses the currently playing video.
/// </summary>
/// <summary>
/// Plays a Video.
/// </summary>
/// <param name="video">Video to play.</param>
// No work to do if we're already
// playing this video.
// If we try to Play the same video
// from a paused state, just resume it instead.
// XNA doesn't return until the video is playing
//Sleep for longer and longer times
//We timed out - attempt to stop to fix any bad state
/// <summary>
/// Resumes a paused video.
/// </summary>
// No work to do if we're already playing
/// <summary>
/// Stops playing a video.
/// </summary>
/// <summary>
/// Immediately releases the unmanaged resources used by this object.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Media\VideoSoundtrackType.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Type of sounds in a video
/// </summary>
/// <summary>
/// This video contains only music.
/// </summary>
/// <summary>
/// This video contains only dialog.
/// </summary>
/// <summary>
/// This video contains music and dialog.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\GamePlatform.Desktop.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\GamePlatform.Mobile.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\GraphicsDeviceManager.Legacy.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Preferred buffer width/height is used to determine default supported orientations,
// so set the default values to match Xna behaviour of landscape only by default.
// Note also that it's using the device window dimensions.
// XNA would read this from the manifest, but it would always default
// to Reach unless changed.  So lets mimic that without the manifest bit.
// FIXME: Why does the GraphicsDeviceManager not know enough about the
//        GraphicsDevice to raise these events without help?
// FIXME: Why does the GraphicsDeviceManager not know enough about the
//        GraphicsDevice to raise these events without help?
// FIXME: Why does the GraphicsDeviceManager not know enough about the
//        GraphicsDevice to raise these events without help?
// FIXME: Why does the GraphicsDeviceManager not know enough about the
//        GraphicsDevice to raise these events without help?
// Calling ApplyChanges() before CreateDevice() should have no effect
// TODO:  Does this need to occur here?
// TODO: We probably should be resetting the whole device
// if this changes as we are targeting a different 
// hardware feature level.
// The graphics device can use a XAML panel or a window
// to created the default swapchain target.
// Update the back buffer.
// TODO: We probably should be resetting the whole 
// device if this changes as we are targeting a different
// hardware feature level.
// Update the back buffer.
//Set the swap interval based on if vsync is desired or not.
//See GetSwapInterval for more details
// TODO: Implement multisampling (aka anti-alising) for all platforms!
// Trigger a change in orientation in case the supported orientations have changed
// Ensure the presentation parameter orientation and buffer size matches the window
// Set the presentation parameters' actual buffer size to match the orientation
// Set the new display size on the touch panel.
//
// TODO: In XNA this seems to be done as part of the 
// GraphicsDevice.DeviceReset event... we need to get 
// those working.
//
// Set "full screen"  as default
// MONOMAC
// WINDOWS || WINRT
// TODO: Implement multisampling (aka anti-alising) for all platforms!
// Microsoft defaults this to Reach.
// Needs to be before ApplyChanges()
// Set the new display size on the touch panel.
//
// TODO: In XNA this seems to be done as part of the 
// GraphicsDevice.DeviceReset event... we need to get 
// those working.
//
// Just ignore this as it is not relevant on Windows 8
/// <summary>
/// Indicates if DX9 style pixel addressing or current standard
/// pixel addressing should be used. This flag is set to
/// <c>false</c> by default. It should be set to <c>true</c>
/// for XNA compatibility. It is recommended to leave this flag
/// set to <c>false</c> for projects that are not ported from
/// XNA. This value is passed to <see cref="GraphicsDevice.UseHalfPixelOffset"/>.
/// </summary>
/// <remarks>
/// XNA uses DirectX9 for its graphics. DirectX9 interprets UV
/// coordinates differently from other graphics API's. This is
/// typically referred to as the half-pixel offset. MonoGame
/// replicates XNA behavior if this flag is set to <c>true</c>.
/// </remarks>
/// <summary>
/// Gets or sets the boolean which defines how window switches from windowed to fullscreen state.
/// "Hard" mode(true) is slow to switch, but more effecient for performance, while "soft" mode(false) is vice versa.
/// The default value is <c>true</c>.
/// </summary>
/// <summary>
/// This method is used by MonoGame Android to adjust the game's drawn to area to fill
/// as much of the screen as possible whilst retaining the aspect ratio inferred from
/// aspectRatio = (PreferredBackBufferWidth / PreferredBackBufferHeight)
///
/// NOTE: this is a hack that should be removed if proper back buffer to screen scaling
/// is implemented. To disable it's effect, in the game's constructor use:
///
///     graphics.IsFullScreen = true;
///     graphics.PreferredBackBufferHeight = Window.ClientBounds.Height;
///     graphics.PreferredBackBufferWidth = Window.ClientBounds.Width;
///
/// </summary>
// Invert preferred aspect ratio if it's orientation differs from the display mode orientation.
// This occurs when user sets preferredBackBufferWidth/Height and also allows multiple supported orientations
// Fill the entire height and reduce the width to keep aspect ratio
// Fill the entire width and reduce the height to keep aspect ratio
// Set the ClientBounds to match the DisplayMode
// Ensure buffer size is reported correctly
// Set the veiwport so the (potentially) resized client bounds are drawn in the middle of the screen
// Touch panel needs latest buffer size for scaling
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\GraphicsDeviceManager.SDL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO Need to get this data from the Presentation Parameters
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\GraphicsDeviceManager.WinRT.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// The graphics device can use a XAML panel or a window
// to created the default swapchain target.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\PrimaryThreadLoader.cs
/// <summary>
/// Interface used to add an object to be loaded on the primary thread
/// </summary>
/// <summary>
/// Static class that is called before every draw to load resources that need to finish loading on the primary thread
/// </summary>
/// <summary>
/// Loops through list and loads the item.  If successful, it is removed from the list.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Threading.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// In milliseconds
//static Mutex actionsMutex = new Mutex();
/// <summary>
/// Checks if the code is currently running on the UI thread.
/// </summary>
/// <returns>true if the code is currently running on the UI thread.</returns>
/// <summary>
/// Throws an exception if the code is not currently running on the UI thread.
/// </summary>
/// <exception cref="InvalidOperationException">Thrown if the code is not currently running on the UI thread.</exception>
/// <summary>
/// Runs the given action on the UI thread and blocks the current thread while the action is running.
/// If the current thread is the UI thread, the action will run immediately.
/// </summary>
/// <param name="action">The action to be run on the UI thread</param>
// If we are already on the UI thread, just call the action and be done with it
//if (!Game.Instance.Window.GraphicsContext.IsCurrent)
/// <summary>
/// Runs all pending actions.  Must be called from the UI thread.
/// </summary>
// Make the context current on this thread if it is not already
// Must flush the GL calls so the GPU asset is ready for the main context to use it
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\TitleContainer.Android.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\TitleContainer.Desktop.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Check for the package Resources Folder first. This is where the assets
// will be bundled.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\TitleContainer.MacOS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Insert the @#x immediately prior to the extension. If this file exists
// and we are on a Retina device, return this file instead.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\TitleContainer.WinRT.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
///" + name));
// The file must not exist... return a null stream.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\AndroidCompatibility.cs
/// <summary>
/// Properties that change from how XNA works by default
/// </summary>
/// <summary>
/// Because the Kindle Fire devices default orientation is fliped by 180 degrees from all the other android devices
/// on the market we need to do some special processing to make sure that LandscapeLeft is the correct way round.
/// This list contains all the Build.Model strings of the effected devices, it should be added to if and when
/// more devices exhibit the same issues.
/// </summary>
// Orientation is reported by the device in degrees compared to the natural orientation
// Some tablets have a natural landscape orientation, which we need to account for
// Round orientation into one of 4 positions, either 0, 90, 180, 270. 
// Surprisingly 90 degree is landscape right, except on Kindle devices
/// <summary>
/// Get the absolute orientation of the device, accounting for platform differences.
/// </summary>
/// <returns></returns>
// Landscape degrees (provided by the OrientationListener) are swapped by default
// Since we use the code used by OrientationListener, we have to swap manually
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\AndroidGameActivity.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// OnCreate called when the activity is launched from cold or after the app
/// has been killed due to a higher priority app needing the memory
/// </summary>
/// <param name='savedInstanceState'>
/// Saved instance state.
/// </param>
// we need to refresh the viewport here.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\AndroidGamePlatform.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Run it as fast as we can to allow for more response on threaded GPU resource creation
// Force the Viewport to be correctly set
// EnterForeground
// EnterBackground
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\AndroidGameWindow.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// GetRealSize() was defined in JellyBeanMr1 / API 17 / Android 4.2
//Only call draw if an update has occured
/// <summary>
/// In Xna, setting SupportedOrientations = DisplayOrientation.Default (which is the default value)
/// has the effect of setting SupportedOrientations to landscape only or portrait only, based on the
/// aspect ratio of PreferredBackBufferWidth / PreferredBackBufferHeight
/// </summary>
/// <returns></returns>
/// <summary>
/// Updates the screen orientation. Filters out requests for unsupported orientations.
/// </summary>
// If the new orientation is not supported, force a supported orientation
// Do nothing; Ignore rather than raising an exception
// A copy of ScreenOrientation from Android 2.3
// This allows us to continue to support 2.2 whilst
// utilising the 2.3 improved orientation support.
// Android 2.3 and above support reverse orientations
// Check if the requested orientation is supported. Default means all are supported.
// Check if the requested orientation is either of the landscape orientations and any landscape orientation is supported.
// Check if the requested orientation is either of the portrain orientations and any portrait orientation is supported.
// Android doesn't fire Released events for existing touches
// so we need to clear them out.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\IResumeManager.cs
/*
/// <summary>
/// Interface for a class that handles resuming after a device lost event.
/// In particular, this allows the game to draw something to the screen whilst
/// graphics content is reloaded - a potentially lengthy operation.
/// </summary>
/// <summary>
/// Called at the start of the resume process. Textures should always be reloaded here.
/// If using a ContentManager, it should be disposed and recreated.
/// </summary>
/// <summary>
/// Called whilst the game is resuming. Draw something to the screen here.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\MonoGameAndroidGameView.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// What is the state of the app, for tracking surface recreation inside this class.
// This acts as a replacement for the all-out monitor wait approach which caused code to be quite fragile.
// set by android UI thread and the game thread process it and transitions into 'Paused' state
// set by android UI thread and the game thread process it and transitions into 'Running' state
// set either by game or android UI thread and the game thread process it and transitions into 'Exited' state          
// set by game thread after processing 'Pausing' state
// set by game thread after processing 'Resuming' state
// set by game thread after processing 'Exiting' state
// also used to create the surface the 1st time or when screen orientation changes
// Events that are triggered on the game thread
// default
// Add callback to get the SurfaceCreated etc events
// Set flag to recreate gl surface or rendering can be bad on orienation change or if app 
// is closed in one orientation and re-opened in another.
// can only be triggered when main loop is running, is unsafe to overwrite other states
//var syncContext = new SynchronizationContext ();
// We always start a new task, regardless if we render on UI thread or not.
// if triggered in quick succession and blocked by graphics device creation, 
// pause can be triggered twice, without resume in between on some phones.
// this guarantees that resume finished processing, since we cannot wait inside resume because we deadlock as surface wouldn't get created
// in case it was enabled
// happens if pause is called immediately after resume so that the surfaceCreated callback was not called yet.
// use local because the wait below must be outside lock
// prepare for next game loop iteration
// processing the pausing state only if the surface was created already
// do not wait for state transition here since surface creation must be triggered first
// either use UI thread to render one frame or this worker thread
// pause this thread
// do not run game if surface is not avalible
// check if app wants to exit
// change state to exit and skip game loop
// Surface we are using needs to go away
// trigger callbacks, must pause openAL device here
// go to next state
// must sleep outside lock!
// sleep so UI thread easier acquires lock
// this can happen if pause is triggered immediately after resume so that SurfaceCreated callback doesn't get called yet,
// in this case we skip the resume process and pause sets a new state.   
// create surface if context is avalible
// We failed to create the surface for some reason
// create context if not avalible
// Start or Restart due to context loss
// we actually lost the context
// so we need to free up our existing 
// objects and re-create one.
// we lost the gl context, we need to let the programmer
// know so they can re-create textures etc.
// finish state if surface created, may take a frame or two until the android UI thread callbacks fire
// trigger callbacks, must resume openAL device here
// go to next state
// go to next state
// needed at app start
// go to next state
// Return true to trigger worker thread pause
// set main game thread global ID
// exit states
// when ui thread wants to exit
// when game thread processed exiting event
// pause states
// when ui thread wants to pause              
// when game thread processed pausing event
// this must be processed outside of this loop, in the new task thread!
// trigger pause of worker thread
// other states
// when ui thread wants to resume
// pause must wait for resume in case pause/resume is called in very quick succession
// when we are running game 
// default case, error
// this method is called on the main thread
// If there is an existing surface, destroy the old one
// Must set viewport after creation, the viewport has correct values in it already as we call it, but
// the surface is created after the correct viewport is already applied so we must do it again.
// Reload textures on a different thread so the resumer can be drawn
// DeviceReset events
// we need to handle the Back key here because it doesnt work any other way
/// <summary>The visibility of the window. Always returns true.</summary>
/// <value></value>
/// <exception cref="T:System.ObjectDisposed">The instance has been disposed</exception>
/// <summary>The size of the current view.</summary>
/// <value>A <see cref="T:System.Drawing.Size" /> which is the size of the current view.</value>
/// <exception cref="T:System.ObjectDisposed">The instance has been disposed</exception>
/// <summary>
/// Constructs a new FrameEventArgs instance.
/// </summary>
/// <summary>
/// Constructs a new FrameEventArgs instance.
/// </summary>
/// <param name="elapsed">The amount of time that has elapsed since the previous event, in seconds.</param>
/// <summary>
/// Gets a <see cref="System.Double"/> that indicates how many seconds of time elapsed since the previous event.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\OrientationListener.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Constructor. SensorDelay.Ui is passed to the base class as this orientation listener 
/// is just used for flipping the screen orientation, therefore high frequency data is not required.
/// </summary>
// Avoid changing orientation whilst the screen is locked
// Check if screen orientation is locked by user: if it's locked, do not change orientation.
// Do nothing (or log warning?). In case android API or Xamarin do not support this Android system property.
// Only auto-rotate if target orientation is supported and not current
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\ResumeManager.cs
/*
/// <summary>
/// A default implementation of IResumeManager. Loads a user specified
/// image file (eg png) and draws it the middle of the screen.
/// 
/// Example usage in Game.Initialise():
/// 
/// #if ANDROID
///    this.Window.SetResumer(new ResumeManager(this.Services, 
///                                             spriteBatch, 
///                                             "UI/ResumingTexture",
///                                             1.0f, 0.01f));
/// #endif                                         
/// </summary>
// Draw the resume texture in the middle of the screen and make it spin
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\ScreenReceiver.cs
// If the user turns the screen on just after it has automatically turned off, 
// the keyguard will not have had time to activate and the ActionUserPreset intent
// will not be broadcast. We need to check if the lock is currently active
// and if not re-enable the game related functions.
// http://stackoverflow.com/questions/4260794/how-to-tell-if-device-is-sleeping
// This intent is broadcast when the user unlocks the phone
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\Devices\Sensors\Accelerometer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides Android applications access to the devices accelerometer sensor.
/// </summary>
/// <summary>
/// Gets or sets whether the device on which the application is running supports the accelerometer sensor.
/// </summary>
/// <summary>
/// Gets the current state of the accelerometer. The value is a member of the SensorState enumeration.
/// </summary>
/// <summary>
/// Creates a new instance of the Accelerometer object.
/// </summary>
/// <summary>
/// Initializes the platform resources required for the accelerometer sensor.
/// </summary>
/// <summary>
/// Starts data acquisition from the accelerometer.
/// </summary>
// So the system can pause and resume the sensor when the activity is paused
/// <summary>
/// Stops data acquisition from the accelerometer.
/// </summary>
//do nothing
//Occassionally an NullReferenceException is thrown when accessing e.Values??
// mono    : Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object
// mono    :   at Android.Runtime.JNIEnv.GetObjectField (IntPtr jobject, IntPtr jfieldID) [0x00000] in <filename unknown>:0 
// mono    :   at Android.Hardware.SensorEvent.get_Values () [0x00000] in <filename unknown>:0
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\Devices\Sensors\Compass.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides Android applications access to the devices compass sensor.
/// </summary>
/// <summary>
/// Gets whether the device on which the application is running supports the compass sensor.
/// </summary>
/// <summary>
/// Gets the current state of the compass. The value is a member of the SensorState enumeration.
/// </summary>
/// <summary>
/// Creates a new instance of the Compass object.
/// </summary>
/// <summary>
/// Initializes the platform resources required for the compass sensor.
/// </summary>
/// <summary>
/// Starts data acquisition from the compass.
/// </summary>
/// <summary>
/// Stops data acquisition from the accelerometer.
/// </summary>
//do nothing
// We need the magnetic declination from true north to calculate the true heading from the magnetic heading.
// On Android, this is available through Android.Hardware.GeomagneticField, but this requires your geo position.
//Occassionally an NullReferenceException is thrown when accessing e.Values??
// mono    : Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object
// mono    :   at Android.Runtime.JNIEnv.GetObjectField (IntPtr jobject, IntPtr jfieldID) [0x00000] in <filename unknown>:0 
// mono    :   at Android.Hardware.SensorEvent.get_Values () [0x00000] in <filename unknown>:0
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\Input\Keyboard.cs
// #region License
// /*
/*
// MonoGame - Copyright © 2009 The MonoGame Team
// 
// All rights reserved.
// 
// This license governs use of the accompanying software. If you use the software, you accept this license. If you do not
// accept the license, do not use the software.
// 
// 1. Definitions
// The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under 
// U.S. copyright law.
// 
// A "contribution" is the original software, or any additions or changes to the software.
// A "contributor" is any person that distributes its contribution under this license.
// "Licensed patents" are a contributor's patent claims that read directly on its contribution.
// 
// 2. Grant of Rights
// (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
// (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, 
// each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
// 
// 3. Conditions and Limitations
// (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.
// (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, 
// your patent license from such contributor to the software ends automatically.
// (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution 
// notices that are present in the software.
// (D) If you distribute any portion of the software in source code form, you may do so only under this license by including 
// a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object 
// code form, you may only do so under a license that complies with this license.
// (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees
// or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent
// permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular
// purpose and non-infringement.
// */
// #endregion License
// 
// create a map for every Keycode and default it to none so that every possible key is mapped
// then update it with the actual mappings
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Android\Input\Touch\AndroidTouchEventManager.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Manages touch events for Android. Maps new presses to new touch Ids as per Xna WP7 incrementing touch Id behaviour. 
/// This is required as Android reports touch IDs of 0 to 5, which leads to incorrect handling of touch events.
/// Motivation and discussion: http://monogame.codeplex.com/discussions/382252
/// </summary>
// DOWN                
// UP                
// MOVE                
// CANCEL, OUTSIDE                
//Fix for ClientBounds
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\AudioLoader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// PCM
// Microsoft ADPCM
// IEEE Float
// IMA4 ADPCM
// Converts block alignment in bytes to sample alignment, primarily for compressed formats
// Calculation of sample alignment from http://kcat.strangesoft.net/openal-extensions/SOFT_block_alignment.txt
/// <summary>
/// Load a WAV file from stream.
/// </summary>
/// <param name="stream">The stream positioned at the start of the WAV file.</param>
/// <param name="format">Gets the OpenAL format enumeration value.</param>
/// <param name="frequency">Gets the frequency or sample rate.</param>
/// <param name="channels">Gets the number of channels.</param>
/// <param name="blockAlignment">Gets the block alignment, important for compressed sounds.</param>
/// <param name="bitsPerSample">Gets the number of bits per sample.</param>
/// <param name="samplesPerBlock">Gets the number of samples per block.</param>
/// <param name="sampleCount">Gets the total number of samples.</param>
/// <returns>The byte buffer containing the waveform data or compressed blocks.</returns>
// for now we'll only support wave files
//header
// riff_chunk_size
// WAVE header
// 2
// 4
// 8
// 12
// 14
// 16
// Read extra data if present
// Skip any remaining chunk data
// Skip this chunk
// Calculate fields we didn't read from the file
// Convert buffer containing 24-bit signed PCM wav data to a 16-bit signed PCM buffer
// Sample count includes both channels if stereo
// Drop the least significant byte from the 24-bit sample to get the 16-bit sample
// Convert buffer containing IEEE 32-bit float wav data to a 16-bit signed PCM buffer
// Sample count includes both channels if stereo
// Step table
// Step index tables
// ADPCM data size is 4
// Convert buffer containing IMA/ADPCM wav data to a 16-bit signed PCM buffer
// Convert buffer containing MS-ADPCM wav data to a 16-bit signed PCM buffer
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\DynamicSoundEffectInstance.OpenAL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Ensure that the source is not looped (due to source recycling)
// Remove all queued buffers
// Get a buffer
// Bind the data
// BindDataBuffer does not support offset
// Queue the buffer
// If the source has run out of buffers, restart it
// SFXI disposal handles buffer detachment and source recycling
// Get the completed buffers
// Unqueue them
// Raise the event for each removed buffer, if needed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\DynamicSoundEffectInstance.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\DynamicSoundEffectInstance.XAudio.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Dequeue all the submitted buffers
// we need to copy so datastream does not pin the buffer that the user might modify later
// The XAudio implementation utilizes callbacks, so no work here.
// _voice is disposed by SoundEffectInstance.PlatformDispose
// Release the buffer
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\Microphone.Default.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides microphones capture features. 
/// </summary>	
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\Microphone.OpenAL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides microphones capture features.  
/// </summary>
// clear microphones
// default device
//DESKTOPGL
// enumerating capture devices
// Marshal native UTF-8 character array to .NET string
// The native string is a null-char separated list of known capture device specifiers ending with an empty string
// increase the offset, add one extra for the terminator
// Xamarin platforms don't provide an handle to alGetString that allow to marshal string arrays
// so we're basically only adding the default microphone
// 16bit adjust
// 16bit adjust
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\OALSoundBuffer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Clean up managed objects
// Release unmanaged resources
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\OggStream.cs
// This code originated from:
//
//    http://theinstructionlimit.com/ogg-streaming-using-opentk-and-nvorbis
//    https://github.com/renaudbedard/nvorbis/
//
// It was released to the public domain by the author (Renaud Bedard).
// No other license is intended or required.
// force the queued buffers to be unqueued to avoid issues on Mac
// This is a bug in the OpenAL implementation
// Salvage what we can
// Try turning it off again?
// Fill first buffer synchronously
// queue only successfully filled buffers
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\OpenAL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/* Effect API */
//[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
//private delegate bool alIsEffectDelegate (uint effect);
/* Filter API */
//private alIsEffectDelegate alIsEffect;
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\OpenALSoundController.cs
// MacOS & Linux shares a limit of 256.
// Reference: http://stackoverflow.com/questions/3894044/maximum-number-of-openal-sound-buffers-on-iphone
// Set to the same as OpenAL on iOS
/// <summary>
/// Sets up the hardware resources used by the controller.
/// </summary>
// We have hardware here and it is ready
/// <summary>
/// Open the sound device, sets up an audio context, and makes the new context
/// the current context. Note that this method will stop the playback of
/// music that was running prior to the game start. If any error occurs, then
/// the state of the controller is reset.
/// </summary>
/// <returns>True if the sound controller was setup, and false if not.</returns>
// Attach activity event handlers so we can pause and resume all playing sounds
// Query the device for the ideal frequency and update buffer size so
// we can get the low latency sound path.
/*
//stackoverflow.com/questions/14842803/low-latency-audio-playback-on-android
// If 4.4 or higher, then we don't need to double buffer on the application side.
// See http://stackoverflow.com/a/15006327
// These are missing and non-standard ALC constants
// NOTE: Do not override AVAudioSessionCategory set by the game developer:
//       see https://github.com/MonoGame/MonoGame/issues/6595
// Activate the instance or else the interruption handler will not be called.
/// <summary>
/// Destroys the AL context and closes the device, when they exist.
/// </summary>
/// <summary>
/// Dispose of the OpenALSoundCOntroller.
/// </summary>
/// <summary>
/// Dispose of the OpenALSoundCOntroller.
/// </summary>
/// <param name="disposing">If true, the managed resources are to be disposed.</param>
/// <summary>
/// Reserves a sound buffer and return its identifier. If there are no available sources
/// or the controller was not able to setup the hardware then an
/// <see cref="InstancePlayLimitException"/> is thrown.
/// </summary>
/// <returns>The source number of the reserved sound buffer.</returns>
// Pause all currently playing sounds by pausing the mixer
// Resume all sounds that were playing when the activity was paused
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\SoundEffect.OpenAL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Convert 24-bit signed PCM to 16-bit signed PCM
// bind buffer
// If 32-bit IEEE float is not supported, convert to 16-bit signed PCM
// bind buffer
// If MS-ADPCM is not supported, convert to 16-bit signed PCM
// bind buffer
// Buffer length must be aligned with the block alignment
// If IMA/ADPCM is not supported, convert to 16-bit signed PCM
// bind buffer
// map these from range 0-15 to 0-1
// According to Xamarin docs EaxReverbReflectionsGain Unit: Linear gain Range [0.0f .. 3.16f] Default: 0.05f
// map these from 0-100 down to 0-1
// Dont know what to do with these EFX has no mapping for them. Just ignore for now
// we can enable them as we go. 
//efx.SetEffectParam (ReverbEffect, EfxEffectf.PositionLeft, reverbSettings.PositionLeft);
//efx.SetEffectParam (ReverbEffect, EfxEffectf.PositionRight, reverbSettings.PositionRight);
//efx.SetEffectParam (ReverbEffect, EfxEffectf.PositionLeftMatrix, reverbSettings.PositionLeftMatrix);
//efx.SetEffectParam (ReverbEffect, EfxEffectf.PositionRightMatrix, reverbSettings.PositionRightMatrix);
//efx.SetEffectParam (ReverbEffect, EfxEffectf.LowFrequencyReference, reverbSettings.RearDelayMs);
//efx.SetEffectParam (ReverbEffect, EfxEffectf.LowFrequencyReference, reverbSettings.RoomFilterFrequencyHz);
//efx.SetEffectParam (ReverbEffect, EfxEffectf.LowFrequencyReference, reverbSettings.RoomFilterMainDb);
//efx.SetEffectParam (ReverbEffect, EfxEffectf.LowFrequencyReference, reverbSettings.RoomFilterHighFrequencyDb);
//efx.SetEffectParam (ReverbEffect, EfxEffectf.LowFrequencyReference, reverbSettings.DecayTimeSec);
//efx.SetEffectParam (ReverbEffect, EfxEffectf.LowFrequencyReference, reverbSettings.RoomSizeFeet);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\SoundEffect.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// This platform is only limited by memory.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\SoundEffect.XAudio.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// These platforms are only limited by memory.
// XNA does not expose this, but it exists in X3DAudio.
/// <summary>
/// Initializes XAudio.
/// </summary>
//Fails if the XAudio2 SDK is not installed
// Just use the default device.
// Let windows autodetect number of channels and sample rate.
// The autodetected value of MasterVoice.ChannelMask corresponds to the speaker layout.
// Release the device and null it as
// we have no audio support.
// NOTE: We make a copy here because old versions of 
// DataStream.Create didn't work correctly for offsets.
// If the instance came from the pool then it could
// already have a valid voice assigned.
// TODO: This really shouldn't be here.  Instead we should fix the 
// SoundEffectInstancePool to internally to look for a compatible
// instance or return a new instance without a voice.
//
// For now we do the same test that the pool should be doing here.
// Ensure the output matrix is set for this new voice
// All parameters related to sampling rate or time are relative to a 48kHz 
// voice and must be scaled for use with other sampling rates.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\SoundEffectInstance.OpenAL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Creates a standalone SoundEffectInstance from given wavedata.
/// </summary>
/// <summary>
/// Gets the OpenAL sound controller, constructs the sound buffer, and sets up the event delegates for
/// the reserved and recycled events.
/// </summary>
// Initialization
/// <summary>
/// Converts the XNA [-1, 1] pitch range to OpenAL pitch (0, INF) or Android SoundPool playback rate [0.5, 2].
/// <param name="xnaPitch">The pitch of the sound in the Microsoft XNA range.</param>
/// </summary>
// get AL's listener position
// get the emitter offset from origin
// set up orientation matrix
// set up our final position and velocity according to orientation of listener
// set the position based on relative positon
// Send the position, gain, looping, pitch, and distance model to the OpenAL driver.
// Distance Model
// Pan
// Velocity
// Volume
// Looping
// Pitch
// Reset the SendFilter to 0 if we are NOT using reverb since
// sources are recycled
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\SoundEffectInstance.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Audio\SoundEffectInstance.XAudio.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// If we have no voice then nothing to do.
// Convert from XNA Emitter to a SharpDX Emitter
//stereo channel
// Convert from XNA Listener to a SharpDX Listener
// Number of channels in the sound being played.
// Not actually sure if XNA supported 3D attenuation of sterio sounds, but X3DAudio does.
// Number of output channels.
// XNA supports distance attenuation and doppler.            
// Apply Volume settings (from distance attenuation) ...
// Apply Pitch settings (from doppler) ...
// Pulling out Vector properties for efficiency.
// From MSDN:
//  X3DAudio uses a left-handed Cartesian coordinate system, 
//  with values on the x-axis increasing from left to right, on the y-axis from bottom to top, 
//  and on the z-axis from near to far. 
//  Azimuths are measured clockwise from a given reference direction. 
//
// From MSDN:
//  The XNA Framework uses a right-handed coordinate system, 
//  with the positive z-axis pointing toward the observer when the positive x-axis is pointing to the right, 
//  and the positive y-axis is pointing up. 
//
// Programmer Notes:         
//  According to this description the z-axis (forward vector) is inverted between these two coordinate systems.
//  Therefore, we need to negate the z component of any position/velocity values, and negate any forward vectors.
// Pulling out Vector properties for efficiency.
// From MSDN:
//  X3DAudio uses a left-handed Cartesian coordinate system, 
//  with values on the x-axis increasing from left to right, on the y-axis from bottom to top, 
//  and on the z-axis from near to far. 
//  Azimuths are measured clockwise from a given reference direction. 
//
// From MSDN:
//  The XNA Framework uses a right-handed coordinate system, 
//  with the positive z-axis pointing toward the observer when the positive x-axis is pointing to the right, 
//  and the positive y-axis is pointing up. 
//
// Programmer Notes:         
//  According to this description the z-axis (forward vector) is inverted between these two coordinate systems.
//  Therefore, we need to negate the z component of any position/velocity values, and negate any forward vectors.
// Choose the correct buffer depending on if we are looped.            
// Restart the sound if (and only if) it stopped playing
// According to XNA documentation:
// "Panning, ranging from -1.0f (full left) to 1.0f (full right). 0.0f is centered."
// If we have no voice then nothing more to do.
// Set the pan on the correct channels based on the reverb mix.
// XNA only ever outputs to the front left/right speakers (channels 0 and 1)
// Assumes there are at least 2 speaker channels to output to
// Clear all the channels.
// Mono source
// Left/Right output levels:
//   Pan -1.0: L = 1.0, R = 0.0
//   Pan  0.0: L = 1.0, R = 1.0
//   Pan +1.0: L = 0.0, R = 1.0
// Front-left output
// Front-right output
// Stereo source
// Left/Right input (Li/Ri) mix for Left/Right outputs (Lo/Ro):
//   Pan -1.0: Lo = 0.5Li + 0.5Ri, Ro = 0.0Li + 0.0Ri
//   Pan  0.0: Lo = 1.0Li + 0.0Ri, Ro = 0.0Li + 1.0Ri
//   Pan +1.0: Lo = 0.0Li + 0.0Ri, Ro = 0.5Li + 0.5Ri
// Front-left output, Left input
// Front-left output, Right input
// Front-right output, Left input
// Front-right output, Right input
// Front-left output, Left input
// Front-left output, Right input
// Front-right output, Left input
// Front-right output, Right input
// NOTE: This is copy of what XAudio2.SemitonesToFrequencyRatio() does
// which avoids the native call and is actually more accurate.
// If no voice or no buffers queued the sound is stopped.
// Because XAudio2 does not actually provide if a SourceVoice is Started / Stopped
// we have to save the "paused" state ourself.
// At least for XACT we can't go over 2x the volume on the mix.
// If we have no voice then nothing more to do.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsAdapter.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// This can fail on headless machines, so just assume the desktop size
// is a valid mode and return that... so at least our unit tests work.
// Skip duplicate modes with the same width/height/formats.
//(i.e. desktop mode wasn't found in the available modes)
// No supported feature levels!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsAdapter.Legacy.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// NOTE: This is the legacy graphics adapter implementation
// which should no longer be updated.  All new development
// should go into the new one.
/// <summary>
/// Defines the driver type for graphics adapter. Usable only on DirectX platforms for now.
/// </summary>
/// <summary>
/// Hardware device been used for rendering. Maximum speed and performance.
/// </summary>
/// <summary>
/// Emulates the hardware device on CPU. Slowly, only for testing.
/// </summary>
/// <summary>
/// Useful when <see cref="DriverType.Hardware"/> acceleration does not work.
/// </summary>
/// <summary>
/// Used to request creation of the reference graphics device, 
/// or the default hardware accelerated device (when set to false).
/// </summary>
/// <remarks>
/// This only works on DirectX platforms where a reference graphics
/// device is available and must be defined before the graphics device
/// is created. It defaults to false.
/// </remarks>
/// <summary>
/// Used to request creation of a specific kind of driver.
/// </summary>
/// <remarks>
/// These values only work on DirectX platforms and must be defined before the graphics device
/// is created. <see cref="DriverType.Hardware"/> by default.
/// </remarks>
/// <summary>
/// Queries for support of the requested render target format on the adaptor.
/// </summary>
/// <param name="graphicsProfile">The graphics profile.</param>
/// <param name="format">The requested surface format.</param>
/// <param name="depthFormat">The requested depth stencil format.</param>
/// <param name="multiSampleCount">The requested multisample count.</param>
/// <param name="selectedFormat">Set to the best format supported by the adaptor for the requested surface format.</param>
/// <param name="selectedDepthFormat">Set to the best format supported by the adaptor for the requested depth stencil format.</param>
/// <param name="selectedMultiSampleCount">Set to the best count supported by the adaptor for the requested multisample count.</param>
/// <returns>True if the requested format is supported by the adaptor. False if one or more of the values was changed.</returns>
// fallback for unsupported renderTarget surface formats.
/*
// We are only using one format, Color
// mode.Format gets the Color format from SDL
/*
/// <summary>
/// Gets a <see cref="System.Boolean"/> indicating whether
/// <see cref="GraphicsAdapter.CurrentDisplayMode"/> has a
/// Width:Height ratio corresponding to a widescreen <see cref="DisplayMode"/>.
/// Common widescreen modes include 16:9, 16:10 and 2:1.
/// </summary>
// Common non-widescreen modes: 4:3, 5:4, 1:1
// Common widescreen modes: 16:9, 16:10, 2:1
// XNA does not appear to account for rotated displays on the desktop
// TODO: check adapter capabilities...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsCapabilities.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Texture compression
// Find the maximum supported level starting with the game's requested multisampling level
// and halving each time until reaching 0 (meaning no multisample support).
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsCapabilities.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// True, if GL_ARB_framebuffer_object is supported; false otherwise.
/// </summary>
/// <summary>
/// True, if GL_EXT_framebuffer_object is supported; false otherwise.
/// </summary>
/// <summary>
/// True, if GL_IMG_multisampled_render_to_texture is supported; false otherwise.
/// </summary>
// Unfortunately non PoT texture support is patchy even on desktop systems and we can't
// rely on the fact that GL2.0+ supposedly supports npot in the core.
// Reference: http://aras-p.info/blog/2012/10/17/non-power-of-two-textures/
// Texture compression
// Framebuffer objects
// always supported on GLES 2.0+
// if we're on GL 3.0+, frame buffer extensions are guaranteed to be present, but extensions may be missing
// it is then safe to assume that GL_ARB_framebuffer_object is present so that the standard function are loaded
// Anisotropic filtering
// sRGB
// TODO: Implement OpenGL support for texture arrays
// once we can author shaders that use texture arrays.
// For now, until we implement vertex textures in OpenGL.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsCapabilities.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsContext.SDL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// GL entry points must be loaded after the GL context creation, otherwise some Windows drivers will return only GL 1.3 compatible functions
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsDebug.Default.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsDebug.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Grab all current messages and put them in the cached messages queue.
// No messages to grab from DirectX.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsDevice.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Core Direct3D Objects
// Declare Direct2D Objects
// Declare DirectWrite & Windows Imaging Component Objects
// The swap chain resources.
// The active render targets.
// The active depth view.
//if (OnDpiChanged != null)
//OnDpiChanged(this);
/// <summary>
/// Returns a handle to internal device object. Valid only on DirectX platforms.
/// For usage, convert this to SharpDX.Direct3D11.Device.
/// </summary>
/// <summary>
/// Creates resources not tied the active graphics device.
/// </summary>
// Dispose previous references.
// Allocate new references
/// <summary>
/// Create graphics device specific resources.
/// </summary>
// Dispose previous references.
// Windows requires BGRA support out of DX.
// Pass the preferred feature levels based on the
// target profile that may have been set by the user.
// Feature levels below 10 are not supported for the HiDef profile
// Reach profile
// For the Reach profile, first try use the highest supported 9_X feature level
// If level 9 is not supported, then just use the highest supported level
// Create the Direct3D device.
// Necessary to enable video playback
// Try again without the debug flag.  This allows debug builds to run
// on machines that don't have the debug runtime installed.
// Get Direct3D 11.1 context
// Create the Direct2D device.
// Create Direct2D context
// Clamp MultiSampleCount
// Clear the current render targets.
// Make sure all pending rendering commands are flushed.
// We need presentation parameters to continue here.
// Did we change swap panels?
// If the swap chain already exists... update it.
// Otherwise, create a new swap chain.
// SwapChain description
// Automatic sizing
// By default we scale the backbuffer to the window 
// rectangle to function more like a WP7 game.
// Once the desired swap chain description is configured, it must be created on the same adapter as our D3D Device
// First, retrieve the underlying DXGI Device from the D3D Device.
// Creates the swap chain 
// Creates a SwapChain from a CoreWindow pointer.
// Ensure that DXGI does not queue more than one frame at a time. This both reduces 
// latency and ensures that the application will only render after each VSync, minimizing 
// power consumption.
// Counter act the composition scale of the render target as 
// we already handle this in the platform window code. 
// Obtain the backbuffer for this window which will be the final 3D rendertarget.
// Create a view interface on the rendertarget to use on bind.
// Get the rendertarget dimensions for later.
// Create the depth buffer if we need it.
// Allocate a 2-D surface as the depth/stencil buffer.
// Create a DepthStencil view on this surface to use on bind.
// Set the current viewport.
// Now we set up the Direct2D render target bitmap linked to the swapchain. 
// Whenever we render to this bitmap, it will be directly rendered to the 
// swapchain associated with the window.
// Direct2D needs the dxgi version of the backbuffer surface pointer.
// Get a D2D surface from the DXGI back buffer to use as the D2D render target.
// So now we can set the Direct2D render target.
// Set D2D text anti-alias mode to Grayscale to 
// ensure proper rendering of text on intermediate surfaces.
// Window size can be modified when we're going full screen, we need to take that into account
// so the back buffer has the right size.
/// <summary>
/// Create graphics device specific resources.
/// </summary>
// Dispose previous references.
// Windows requires BGRA support out of DX.
// Pass the preferred feature levels based on the
// target profile that may have been set by the user.
// Feature levels below 10 are not supported for the HiDef profile
// Reach profile
// For the Reach profile, first try use the highest supported 9_X feature level
// If level 9 is not supported, then just use the highest supported level
//Default value
// Create the Direct3D device.
// Try again without the debug flag.  This allows debug builds to run
// on machines that don't have the debug runtime installed.
// Get Direct3D 11.1 context
// Create a new instance of GraphicsDebug because we support it on Windows platforms.
// get the primary output
/* ContainingOutput fails on a headless device */ }
// Clamp MultiSampleCount
// Clear the current render targets.
// Make sure all pending rendering commands are flushed.
// We need presentation parameters to continue here.
// If the swap chain already exists... update it.
// check if multisampling hasn't changed
// Otherwise, create a new swap chain.
// Dispose of old swap chain if exists
// Before releasing a swap chain, first switch to windowed mode
// SwapChain description
// Once the desired swap chain description is configured, it must be created on the same adapter as our D3D Device
// First, retrieve the underlying DXGI Device from the D3D Device.
// Creates the swap chain 
// To reduce latency, ensure that DXGI does not queue more than one frame at a time.
// Docs: https://msdn.microsoft.com/en-us/library/windows/desktop/ff471334(v=vs.85).aspx
// Preserve full screen state, after swap chain is re-created 
// Obtain the backbuffer for this window which will be the final 3D rendertarget.
// Create a view interface on the rendertarget to use on bind.
// Get the rendertarget dimensions for later.
// Create the depth buffer if we need it.
// Allocate a 2-D surface as the depth/stencil buffer.
// Create a DepthStencil view on this surface to use on bind.
// Set the current viewport.
/* ContainingOutput fails on a headless device */ }
// WINDOWS
/// <summary>
/// Get highest multisample quality level for specified format and multisample count.
/// Returns 0 if multisampling is not supported for input parameters.
/// </summary>
/// <param name="format">The texture format.</param>
/// <param name="multiSampleCount">The number of samples during multisampling.</param>
/// <returns>
/// Higher than zero if multiSampleCount is supported. 
/// Zero if multiSampleCount is not supported.
/// </returns>
// The valid range is between zero and one less than the level returned by CheckMultisampleQualityLevels
// https://msdn.microsoft.com/en-us/library/windows/desktop/bb173072(v=vs.85).aspx
// NOTE: should we always return highest quality?
// clamp minimum to 0 
// Clear options for depth/stencil buffer if not attached.
// Clear the diffuse render buffer.
// Clear the depth/stencil render buffer.
// make sure to release full screen or this might cause issues on exit
// The application may optionally specify "dirty" or "scroll" rects to improve efficiency
// in certain scenarios.  In this sample, however, we do not utilize those features.
// TODO: Hook in PresentationParameters here!
// The first argument instructs DXGI to block until VSync, putting the application
// to sleep until the next VSync. This ensures we don't waste any cycles rendering
// frames that will never be displayed to the screen.
// TODO: How should we deal with a device lost case here?
/*               
// must completely reinitialize the renderer.
// The first argument instructs DXGI to block n VSyncs before presenting.
// TODO: How should we deal with a device lost case here?
// Only implemented for DirectX right now, so not in GraphicsDevice.cs
// Only implemented for DirectX right now, so not in GraphicsDevice.cs
// Set the default swap chain.
// Resolve MSAA render targets
// Generate mipmaps.
// Clear the current render targets.
// Make sure none of the new targets are bound
// to the device as a texture resource.
// Use the depth from the first target.
// Set the targets.
// NOTE: This code assumes _d3dContext has been locked by the caller.
// If we're not applying shaders then early out now.
// Dispose the previous buffer if we have one.
// TODO share code with Texture2D.GetData and do pooling for staging textures
// first set up a staging texture
//You can't Map the BackBuffer surface, so we copy to another texture
// Copy the data from the GPU to the staging texture.
// if MSAA is enabled we need to first copy to a resource without MSAA
// Copy the data to the array.
// Some drivers may add pitch to rows.
// We need to copy each row separately and skip trailing zeroes.
/// <summary>
/// Sends queued-up commands in the command buffer to the graphics processing unit (GPU).
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsDevice.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Keeps track of last applied state to avoid redundant OpenGL calls
// Get a hashed value based on the currently bound shaders
// throws an exception if no shaders are bound
// If instancing is not supported, but InstanceFrequency of the buffer is not zero, throw an exception
// only set the divisor if instancing is supported
// try getting the context version
// GL_MAJOR_VERSION and GL_MINOR_VERSION are GL 3.0+ only, so we need to rely on the GL_VERSION string
// for non GLES this string always starts with the version number in the "major.minor" format, but can be followed by
// multiple vendor specific characters
// For GLES this string is formatted as: OpenGL<space>ES<space><version number><space><vendor-specific information>
//if it fails we default to 1.1 context
// if it fails, we assume to be on a 1.1 context
// Initialize draw buffer attachment array
// Ensure the vertex attributes are reset
// Free all the cached shader programs. 
// Force resetting states
// TODO: We need to figure out how to detect if we have a
// depth stencil buffer or not, and clear options relating
// to them if not attached.
// Unlike with XNA and DirectX...  GL.Clear() obeys several
// different render states:
//
//  - The color write flags.
//  - The scissor rectangle.
//  - The depth/stencil state.
//
// So overwrite these states with what is needed to perform
// the clear correctly and restore it afterwards.
//
// DepthStencilState.Default has the Stencil Test disabled; 
// make sure stencil test is enabled before we clear since
// some drivers won't clear with stencil test disabled
// Restore the previous render state.
// Free all the cached shader programs.
// Dispose of any GL resources that were disposed in another thread
// Swap lists so resources added during this draw will be released after the next draw
// In OpenGL we have to re-apply the special "posFixup"
// vertex shader uniform if the viewport changes.
// Reset the raster state because we flip vertices
// when rendering offscreen and hence the cull direction.
// Textures will need to be rebound to render correctly in the new render target.
// FBO cache, we create 1 FBO per RenderTargetBinding combination
// FBO cache used to resolve MSAA rendertargets, we create 1 FBO per RenderTargetBinding combination
// The only fragment operations which affect the resolve are the pixel ownership test, the scissor test, and dithering.
// Reset the raster state because we flip vertices
// when rendering offscreen and hence the cull direction.
// Textures will need to be rebound to render correctly in the new render target.
/// <summary>
/// Activates the Current Vertex/Pixel shader pair into a program.         
/// </summary>
// Lookup the shader program.
// Set the new program if it has changed.
// Apply vertex shader fix:
// The following two lines are appended to the end of vertex shaders
// to account for rendering differences between OpenGL and DirectX:
//
// gl_Position.y = gl_Position.y * posFixup.y;
// gl_Position.xy += posFixup.zw * gl_Position.ww;
//
// (the following paraphrased from wine, wined3d/state.c and wined3d/glsl_shader.c)
//
// - We need to flip along the y-axis in case of offscreen rendering.
// - D3D coordinates refer to pixel centers while GL coordinates refer
//   to pixel corners.
// - D3D has a top-left filling convention. We need to maintain this
//   even after the y-flip mentioned above.
// In order to handle the last two points, we translate by
// (63.0 / 128.0) / VPw and (63.0 / 128.0) / VPh. This is equivalent to
// translating slightly less than half a pixel. We want the difference to
// be large enough that it doesn't get lost due to rounding inside the
// driver, but small enough to prevent it from interfering with any
// anti-aliasing.
//
// OpenGL coordinates specify the center of the pixel while d3d coords specify
// the corner. The offsets are stored in z and w in posFixup. posFixup.y contains
// 1.0 or -1.0 to turn the rendering upside down for offscreen rendering. PosFixup.x
// contains 1.0 to allow a mad.
//If we have a render target bound (rendering offscreen)
//flip vertically
// If we're not applying shaders then early out now.
// Unbind current VBOs.
// Pin the buffers.
// Setup the vertex declaration to point at the VB data.
//Draw
// Release the handles.
// Unbind current VBOs.
// Pin the buffers.
// Setup the vertex declaration to point at the VB data.
//Draw
// Release the handles.
// Unbind current VBOs.
// Pin the buffers.
// Setup the vertex declaration to point at the VB data.
//Draw
// Release the handles.
// buffer is returned upside down, so we swap the rows around when copying over
// copy the bottom row to buffer
// copy top row to bottom row
// copy buffer to top row
// Holds information for caching
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsDevice.OpenGL.FramebufferHelper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// ARB_framebuffer_object implementation
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\GraphicsDevice.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Resolving MSAA render targets should be done here.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\IGraphicsContext.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\IRenderTarget.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the <see cref="RenderTargetView"/> for the specified array slice.
/// </summary>
/// <param name="arraySlice">The array slice.</param>
/// <returns>The <see cref="RenderTargetView"/>.</returns>
/// <remarks>
/// For texture cubes: The array slice is the index of the cube map face.
/// </remarks>
/// <summary>
/// Gets the <see cref="DepthStencilView"/>.
/// </summary>
/// <returns>The <see cref="DepthStencilView"/>. Can be <see langword="null"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\IRenderTarget.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\IWindowInfo.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\OcclusionQuery.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//if (graphicsDevice._d3dDevice.FeatureLevel == SharpDX.Direct3D.FeatureLevel.Level_9_1)
//    throw new NotSupportedException("The Reach profile does not support occlusion queries.");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\OcclusionQuery.Null.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\OcclusionQuery.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\OpenGL.Android.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// internal for Android is not used on other platforms
// it allows us to use either GLES or Full GL (if the GPU supports it)
//new GraphicsContext(info);
// We pass -1 becuase when requesting a GLES 2.0 context we
// dont provide the Minor version.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\OpenGL.Common.cs
// Required to allow platforms other than iOS use the same code.
// just don't include this on iOS
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// GLES Values
// ios MaxExt
// ios MinExt
// PVRTC
// ATITC
// ETC1
// ETC2 RGB8A1
//GLES
// Render Target Support. These might be null if they are not supported
// see GraphicsDevice.OpenGL.FramebufferHelper.cs for handling other extensions.
// Instanced drawing requires GL 3.2 or up, if the either of the following entry points can not be loaded
// this will get flagged by setting SupportsInstancing in GraphicsCapabilities to false.
// this will be detected in the initialization of GraphicsCapabilities
// Ignore the debug message callback if the entry point can not be found
//[Conditional("DEBUG")]
//[DebuggerHidden]
// now load Extensions :)
/* Helper Functions */
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\OpenGL.iOS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Fall back to GLES 2.0
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\OpenGL.SDL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\RenderTarget2D.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// set the actual multisample count, not the preferred value
// Create a view interface on the rendertarget to use on bind.
// If we don't need a depth buffer then we're done.
// The depth stencil view's multisampling configuration must strictly
// match the texture's multisampling configuration.  Ignore whatever parameters
// were provided and use the texture's configuration so that things are
// guarenteed to work.
// Create a descriptor for the depth/stencil buffer.
// Allocate a 2-D surface as the depth/stencil buffer.
// Create a DepthStencil view on this surface to use on bind.
// Create the view for binding to the device.
// MSAA RT needs a MSAA texture and a non-MSAA texture where it is resolved
// we store the resolved texture in _texture and the multi sampled texture
// in _msTexture when MSAA is enabled
// the multi sampled texture can never be bound directly
// mip mapping is applied to the resolved texture, not the multisampled texture
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\RenderTarget2D.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\RenderTarget2D.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\RenderTarget3D.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Setup the multisampling description.
// Create a descriptor for the depth/stencil buffer.
// Allocate a 2-D surface as the depth/stencil buffer.
// Create a DepthStencil view on this surface to use on bind.
// Create the view for binding to the device.
// Dispose the previous target.
// Create the new target view interface.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\RenderTargetCube.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Create one render target view per cube map face.
// If we don't need a depth buffer then we're done.
/// <inheritdoc/>
/// <inheritdoc/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\RenderTargetCube.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\RenderTargetCube.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\SamplerStateCollection.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//
// Author: Kenneth James Pouncey
// Skip out if nothing has changed.
// NOTE: We make the assumption here that the caller has
// locked the d3dContext for us to use.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\SamplerStateCollection.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//
// Author: Kenneth James Pouncey
// TODO: Avoid doing this redundantly (see TextureCollection.SetTextures())
// However, I suspect that rendering from the same texture with different sampling modes
// is a relatively rare occurrence...
// NOTE: We don't have to bind the texture here because it is already bound in
// TextureCollection.SetTextures(). This, of course, assumes that SetTextures() is called
// before this method is called. If that ever changes this code will misbehave.
// GL.BindTexture(texture.glTarget, texture.glTexture);
// GraphicsExtensions.CheckGLError();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\SamplerStateCollection.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//
// Author: Kenneth James Pouncey
// TODO
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\SwapChainRenderTarget.cs
/// <summary>
/// A swap chain used for rendering to a secondary GameWindow.
/// </summary>
/// <remarks>
/// This is an extension and not part of stock XNA.
/// It is currently implemented for Windows and DirectX only.
/// </remarks>
// Once the desired swap chain description is configured, it must 
// be created on the same adapter as our D3D Device
// First, retrieve the underlying DXGI Device from the D3D Device.
// Creates the swap chain 
// Obtain the backbuffer for this window which will be the final 3D rendertarget.
// Create a view interface on the rendertarget to use on bind.
// Get the rendertarget dimensions for later.
// Create the depth buffer if we need it.
// Allocate a 2-D surface as the depth/stencil buffer.
// Create a DepthStencil view on this surface to use on bind.
// TODO: We need to expose the other Present() overloads
// for passing source/dest rectangles.
/// <summary>
/// Displays the contents of the active back buffer to the screen.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Texture.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the handle to a shared resource.
/// </summary>
/// <returns>
/// The handle of the shared resource, or <see cref="IntPtr.Zero"/> if the texture was not
/// created as a shared resource.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Texture.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Texture.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Texture2D.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// For DXT compressed formats the width and height must be
// a multiple of 4 for the complete mip level to be set.
// Use try..finally to make sure dataHandle is freed in case of an error
// TODO: We need to deal with threaded contexts here!
// Use try..finally to make sure dataHandle is freed in case of an error
// TODO: We need to deal with threaded contexts here!
// Create a temp staging resource for copying the data.
// 
// TODO: We should probably be pooling these staging resources
// and not creating a new one each time.
//
// Copy the data from the GPU to the staging texture.
// Copy the data to the array.
// for 4x4 block compression formats an element is one block, so elementsInRow
// and number of rows are 1/4 of number of pixels in width and height of the rectangle
// Some drivers may add pitch to rows.
// We need to copy each row separatly and skip trailing zeros.
// TODO: Move this to SetData() if we want to make Immutable textures!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Texture2D.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// OPENGL
// PVRTC has explicit calculations for imageSize
// https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt
// Use try..finally to make sure dataHandle is freed in case of an error
// Store the current bound texture.
// Required to make sure that any texture uploads on a thread are completed
// before the main thread tries to use the texture.
// Restore the bound texture.
// Use try..finally to make sure dataHandle is freed in case of an error
// Store the current bound texture.
// Required to make sure that any texture uploads on a thread are completed
// before the main thread tries to use the texture.
// Restore the bound texture.
// TODO: check for for non renderable formats (formats that can't be attached to FBO)
// Note: for compressed format Format.GetSize() returns the size of a 4x4 block
// we need to convert from our format size to the size of T here
// Convert from ARGB to ABGR
// Convert from ARGB to ABGR
// This method allows games that use Texture2D.FromStream
// to reload their textures after the GL context is lost.
// For best compatibility and to keep the default wrap mode of XNA, only set ClampToEdge if either
// dimension is not a power of two.
// Set mipmap levels
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Texture2D.StbSharp.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Rewind stream if it is at end
// Copy it's data to memory
// As some platforms dont provide full stream functionality and thus streams can't be read as it is
// The data returned is always four channel BGRA
// XNA blacks out any pixels with an alpha of zero.
// Write
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Texture2D.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Texture3D.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Create texture
// Note: XNA 4 does not have a method Texture.GenerateMipMaps() 
// because generation of mipmaps is not supported on the Xbox 360.
// TODO: New method Texture.GenerateMipMaps() required.
// For 3D texture: Size of 2D image.
// Create a temp staging resource for copying the data.
// 
// TODO: Like in Texture2D, we should probably be pooling these staging resources
// and not creating a new one each time.
//
// Copy the data from the GPU to the staging texture.
// Copy the data to the array.
// Some drivers may add pitch to rows or slices.
// We need to copy each row separatly and skip trailing zeros.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Texture3D.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Texture3D.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\TextureCollection.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// NOTE: We make the assumption here that the caller has
// locked the d3dContext for us to use.
// We assume 4 targets to avoid a loop within a loop below.
// Make one pass across all the texture slots.
// Immediately clear the texture from the device.
// Skip out if nothing has changed.
// NOTE: We make the assumption here that the caller has
// locked the d3dContext for us to use.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\TextureCollection.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Skip out if nothing has changed.
// Clear the previous binding if the 
// target is different from the new one.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\TextureCollection.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\TextureCube.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Create texture
// A texture cube is a 2D texture array with 6 textures.
// Create a temp staging resource for copying the data.
// 
// TODO: Like in Texture2D, we should probably be pooling these staging resources
// and not creating a new one each time.
//
// Copy the data from the GPU to the staging texture.
// Copy the data to the array.
// for 4x4 block compression formats an element is one block, so elementsInRow
// and number of rows are 1/4 of number of pixels in width and height of the rectangle
// Some drivers may add pitch to rows.
// We need to copy each row separatly and skip trailing zeros.
// Use try..finally to make sure dataHandle is freed in case of an error
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\TextureCube.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// This updates the mipmaps after a change in the base texture
// Note: for compressed format Format.GetSize() returns the size of a 4x4 block
// we need to convert from our format size to the size of T here
// Use try..finally to make sure dataHandle is freed in case of an error
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\TextureCube.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\WindowInfo.SDL.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Effect\EffectResource.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Effect\EffectResource.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Shader\ConstantBuffer.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Allocate the hardware constant buffer.
// NOTE: We make the assumption here that the caller has
// locked the d3dContext for us to use.
// Update the hardware buffer.
// Set the buffer to the right stage.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Shader\ConstantBuffer.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A hash value which can be used to compare constant buffers.
/// </summary>
// Force the uniform location to be looked up again
// NOTE: We assume here the program has 
// already been set on the device.
// If the program changed then lookup the
// uniform again and apply the state.
// If the shader program is the same, the effect may still be different and have different values in the buffer
// If the buffer content hasn't changed then we're
// done... use the previously set uniform state.
// TODO: We need to know the type of buffer float/int/bool
// and cast this correctly... else it doesn't work as i guess
// GL is checking the type of the uniform.
// Clear the dirty flag.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Shader\ConstantBuffer.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Shader\Shader.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Caches the DirectX input layouts for this vertex shader.
// We need the bytecode later for allocating the
// input layout from the vertex declaration.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Shader\Shader.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// The shader handle.
// We keep this around for recompiling on context lost and debugging.
// If the shader has already been created then return it.
//
// Assign the texture unit index to the sampler uniforms.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Shader\Shader.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Shader\ShaderProgramCache.cs
/// <summary>
/// This class is used to Cache the links between Vertex/Pixel Shaders and Constant Buffers.
/// It will be responsible for linking the programs under OpenGL if they have not been linked
/// before. If an existing link exists it will be resused.
/// </summary>
/// <summary>
/// Clear the program cache releasing all shader programs.
/// </summary>
// TODO: We should be hashing in the mix of constant 
// buffers here as well.  This would allow us to optimize
// setting uniforms to only when a constant buffer changes.
// the key does not exist so we need to link the programs
// NOTE: No need to worry about background threads here
// as this is only called at draw time when we're in the
// main drawing thread.
//vertexShader.BindVertexAttributes(program);
// OPENGL
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\BlendState.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Build the description.
// This is a new DX11 feature we should consider 
// exposing as part of the extended MonoGame API.
// Create the state.
// Apply the state!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\BlendState.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\BlendState.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\DepthStencilState.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Build the description.
// TODO: Should this instead grab the upper 8bits?
//use same settings as frontFace 
// Create the state.
// NOTE: We make the assumption here that the caller has
// locked the d3dContext for us to use.
// Apply the state!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\DepthStencilState.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// enable Depth Buffer
// enable Stencil
// set function
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\DepthStencilState.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\RasterizerState.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Build the description.
// discussion and explanation in https://github.com/MonoGame/MonoGame/issues/4826
// These are new DX11 features we should consider exposing
// as part of the extended MonoGame API.
// To support feature level 9.1 these must 
// be set to these exact values.
// Create the state.
// NOTE: We make the assumption here that the caller has
// locked the d3dContext for us to use.
// Apply the state!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\RasterizerState.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// When rendering offscreen the faces change order.
// Turn off dithering to make sure data returned by Texture.GetData is accurate
// from the docs it seems this works the same as for Direct3D
// https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPolygonOffset.xml
// explanation for Direct3D is  in https://github.com/MonoGame/MonoGame/issues/4826
// should be EnableCap.DepthClamp, but not available in OpenTK.Graphics.ES20.EnableCap
// TODO: Implement MultiSampleAntiAlias
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\RasterizerState.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\SamplerState.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Build the description.
// TODO: How do i do this?
// To support feature level 9.1 these must 
// be set to these exact values.
// Create the state.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\SamplerState.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// We're now bound to a device... no one should
// be changing the state of this object now!
// Set up texture addressing.
// Border color is not supported by glTexParameter in OpenGL ES 2.0
// LOD bias is not supported by glTexParameter in OpenGL ES 2.0
// Comparison samplers are not supported in OpenGL ES 2.0 (without an extension, anyway)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\States\SamplerState.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\ImmutableVertexInputLayout.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Immutable version of <see cref="VertexInputLayout"/>. Can be used as a key in the
/// <see cref="InputLayoutCache"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ImmutableVertexInputLayout"/> class.
/// </summary>
/// <param name="vertexDeclarations">The vertex declarations per resource slot.</param>
/// <param name="instanceFrequencies">The instance frequencies per resource slot.</param>
/// <remarks>
/// The specified arrays are stored internally - the arrays are not copied.
/// </remarks>
// Pre-calculate hash code for fast lookup in dictionary.
/// <summary>
/// Returns a hash code for this instance.
/// </summary>
/// <returns>
/// A hash code for this instance, suitable for use in hashing algorithms and data
/// structures like a hash table.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\IndexBuffer.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: To use true Immutable resources we would need to delay creation of 
// the Buffer until SetData() and recreate them if set more than once.
// StructureSizeInBytes
// Copy the texture to a staging resource
// Map the staging resource to a CPU accessible memory
// Make sure that we unmap the resource in case of an exception
// We assume discard by default.
// TODO: We need to deal with threaded contexts here!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\IndexBuffer.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// If the IBO does not exist, create it.
/// </summary>
// Buffers are write-only on OpenGL ES 1.1 and 2.0.  See the GL_OES_mapbuffer extension for more information.
// http://www.khronos.org/registry/gles/extensions/OES/OES_mapbuffer.txt
// Pointer to the start of data to read in the index buffer
// If data is already a byte[] we can skip the temporary buffer
// Copy from the index buffer to the destination array
// Temporary buffer to store the copied section of data
// Copy from the index buffer to the temporary buffer
// Copy from the temporary buffer to the destination array
// By assigning NULL data to the buffer this gives a hint
// to the device to discard the previous content.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\IndexBuffer.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\InputLayoutCache.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Caches DirectX input layouts for the input assembler stage.
/// </summary>
// Flag to print warning only once per shader.
/// <summary>
/// Initializes a new instance of the <see cref="InputLayoutCache"/> class.
/// </summary>
/// <param name="graphicsDevice">The graphics device.</param>
/// <param name="shaderByteCode">The byte code of the vertex shader.</param>
/// <summary>
/// Releases all resources used by an instance of the <see cref="InputLayoutCache"/> class.
/// </summary>
/// <remarks>
/// This method calls the virtual <see cref="Dispose(bool)"/> method, passing in
/// <see langword="true"/>, and then suppresses finalization of the instance.
/// </remarks>
/// <summary>
/// Releases the unmanaged resources used by an instance of the
/// <see cref="InputLayoutCache"/> class and optionally releases the managed resources.
/// </summary>
/// <param name="disposing">
/// <see langword="true"/> to release both managed and unmanaged resources;
/// <see langword="false"/> to release only unmanaged resources.
/// </param>
// Dispose managed resources.
/// <summary>
/// Gets or create the DirectX input layout for the specified vertex buffers.
/// </summary>
/// <param name="vertexBuffers">The vertex buffers.</param>
/// <returns>The DirectX input layout.</returns>
// If InputLayout ctor fails with InvalidArg then it's most likely because the 
// vertex declaration doesn't match the vertex shader. 
// Shader probably used the semantic "SV_Position" in the vertex shader input.
// Background information:
// "SV_Position" is a "system-value semantic" which is interpreted by the
// rasterizer stage. This means it needs to be used in the vertex shader output
// or the pixel shader input. (See
// https://msdn.microsoft.com/en-us/library/windows/desktop/bb509647.aspx)
//
// However, some effects (notably the original XNA stock effects) use
// "SV_Position" for the vertex shader input. This is technically allowed, but
// rather uncommon and causes problems:
// - XNA/MonoGame only has VertexElementUsage.Position, so there is no way to
//   distinguish between "POSITION" and "SV_Position".
// - "SV_Position" cannot be used with any index other than 0, i.e. the DirectX
//   FX compiler does not accept "SV_Position1", "SV_Position2", ...
//   This is a problem when using multiple vertex streams, e.g. for blend shape
//   animations. It makes it impossible to correctly match the vertex
//   declaration with the vertex shader signature.
//
// Conclusion:
// - MonoGame needs to translate VertexElementUsage.Position to "POSITION".
// - MonoGame effects should always use "POSITION" for vertex shader inputs.
// Here is a workaround ("hack") for old vertex shaders which haven't been
// updated: Rename "POSITION0" to "SV_Position" and try again.
// Workaround succeeded? This means that there is a vertex shader that needs
// to be updated.
// Workaround failed.
/// <summary>
/// Gets a more helpful message for the SharpDX invalid arg error.
/// </summary>
/// <param name="inputElements">The input elements.</param>
/// <returns>The exception message.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\VertexBuffer.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: To use Immutable resources we would need to delay creation of 
// the Buffer until SetData() and recreate them if set more than once.
// StructureSizeInBytes
// Map the staging resource to a CPU accessible memory
// Make sure that we unmap the resource in case of an exception
// We assume discard by default.
// Map the staging resource to a CPU accessible memory
// Make sure that we unmap the resource in case of an exception
// Copy back from staging resource to real buffer.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\VertexBuffer.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//internal uint vao;
/// <summary>
/// If the VBO does not exist, create it.
/// </summary>
//GLExt.Oes.GenVertexArrays(1, out this.vao);
//GLExt.Oes.BindVertexArray(this.vao);
// Buffers are write-only on OpenGL ES 1.1 and 2.0.  See the GL_OES_mapbuffer extension for more information.
// http://www.khronos.org/registry/gles/extensions/OES/OES_mapbuffer.txt
// Pointer to the start of data in the vertex buffer
// If data is already a byte[] and stride is 1 we can skip the temporary buffer
// Temporary buffer to store the copied section of data
// Copy from the vertex buffer to the temporary buffer
// Copy from the temporary buffer to the destination array
// By assigning NULL data to the buffer this gives a hint
// to the device to discard the previous content.
// there are no gaps so we can copy in one go
// else we must copy each element separately
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\VertexBuffer.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\VertexBufferBindings.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Creates an <see cref="ImmutableVertexInputLayout"/> that can be used as a key in the
/// <see cref="InputLayoutCache"/>.
/// </summary>
/// <returns>The <see cref="ImmutableVertexInputLayout"/>.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\VertexDeclaration.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Get the vertex attribute info and cache it
// XNA appears to ignore usages it can't find a match for, so we will do the same
// Apply the vertex attribute info
/// <summary>
/// Vertex attribute information for a particular shader/vertex declaration combination.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\VertexDeclaration.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\VertexElement.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the DirectX <see cref="SharpDX.Direct3D11.InputElement"/>.
/// </summary>
/// <param name="slot">The input resource slot.</param>
/// <param name="instanceFrequency">
/// The number of instances to draw using the same per-instance data before advancing in the
/// buffer by one element. This value must be 0 for an element that contains per-vertex
/// data.
/// </param>
/// <returns><see cref="SharpDX.Direct3D11.InputElement"/>.</returns>
/// <exception cref="NotSupportedException">
/// Unknown vertex element format or usage!
/// </exception>
// Note that instancing is only supported in feature level 9.3 and above.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Graphics\Vertices\VertexInputLayout.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Fix semantics indices. (If there are more vertex declarations with, for example, 
// POSITION0, the indices are changed to POSITION1/2/3/...)
// Semantic index already used.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\GamePad.Android.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// build out supported inputs from what the gamepad exposes
// get a bool[] with indices matching the keyMap
// HasKeys() was defined in Kitkat / API19 / Android 4.4
// we only check for the thumb button to see if we have 2 thumbsticks
// if ever a controller doesn't support buttons on the thumbsticks,
// this will need fixing
// we will support up to 4 local controllers
// support the back button when we don't have a gamepad connected
// we need to add the default "no gamepad connected but the user hit back"
// behaviour here
// Check if the device was disconnected
// we need to add the default "no gamepad connected but the user hit back"
// behaviour here
// Consume state
// If we get here, we failed to find a game pad or an empty slot to create one.
// If we're holding onto a disconnected pad, overwrite it with this one
// All pad slots are taken so ignore further devices.
//Iterate and 'connect' any detected gamepads
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\GamePad.iOS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//All iOS controllers have these basics
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\GamePad.SDL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// SDL Axis ranges from -32768 to 32767, so we need to divide with different numbers depending on if it's positive
// Y gamepad axis is rotate between SDL and XNA
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\GamePad.tvOS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//All iOS controllers have these basics
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\GamePad.UWP.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Attempts to mimic SharpDX.XInput.Gamepad which defines the trigger threshold as 30 with a range of 0 to 255. 
// The trigger here has a range of 0.0 to 1.0. So, 30 / 255 = 0.11765.
// we can't check gamepad capabilities for most stuff with Windows.Gaming.Input.Gamepad
//we can't detect the big button from Windows.Gaming.Input.Gamepad, so it's always false
//BigButton is unavailable by Windows.Gaming.Input.Gamepad
// Check triggers
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\GamePad.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Chrome has a limit of 4 gamepads
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\GamePad.XInput.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// If the device was disconneced then wait for 
// the timeout to elapsed before we test it again.
// Check to see if the device is connected.
// If the device is disconnected retry it after the
// timeout period has elapsed to avoid the overhead.
// TODO: Should this be BigButtonPad?
// Note: XNA doesn't distinguish between Guitar and GuitarBass, but 
// GuitarBass is identical to Guitar in XInput, distinguished only
// to help setup for those controllers. 
// digital buttons
// TODO: what IS this? Is it related to GamePadType.BigGamePad?
// analog controls
// vibration
// other
// If the device was disconneced then wait for 
// the timeout to elapsed before we test it again.
// Try to get the controller state.
// If the device is disconnected retry it after the
// timeout period has elapsed to avoid the overhead.
// Check for the hardware back button.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\GamepadUtil.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\InputKeyEventArgs.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The key that was either pressed or released.
/// </summary>
/// <summary>
/// Create a new keyboard input event
/// </summary>
/// <param name="key">The key involved in this event</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\Joystick.Default.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\Joystick.SDL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//Resize each array if the length is less than the count returned by the capabilities
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\Joystick.Web.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//Stubbed so it compiles
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\Keyboard.Default.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\Keyboard.SDL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\Keyboard.Windows.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\Keyboard.WinRT.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\KeyboardInput.Android.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\KeyboardInput.iOS.cs
// UIAlertView's textfield does not show keyboard in iOS8
// http://stackoverflow.com/questions/25563108/uialertviews-textfield-does-not-show-keyboard-in-ios8
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\KeyboardInput.Windows.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\KeyboardInput.WinRT.cs
// Hide input panel
// Button OK
// Button Cancel
// Show dialog
// Wait for button click
// Hide dialog
//_virtualKeyboardSlideAnimation.To = value;
//_virtualKeyboardSlideStoryboard.Begin();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\KeyboardUtil.SDL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\KeyboardUtil.Web.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\KeysHelper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Checks if specified value is valid Key.
/// </summary>
/// <param name="value">Keys base value</param>
/// <returns>Returns true if value is valid Key, false otherwise</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\MessageBox.Android.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\MessageBox.iOS.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\MessageBox.Windows.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\MessageBox.WinRT.cs
// TODO: MessageDialog only supports two buttons
// PlatformSetResult will cancel the task, resulting in an exception
// TODO: MessageDialog doesn't hide on Windows Phone 8.1
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\Mouse.Default.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\Mouse.SDL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Window has mouse focus, position will be set from the motion event
// Window does not have mouse focus, we need to manually get the position
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\Mouse.Windows.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\MouseCursor.Default.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\MouseCursor.SDL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\MouseCursor.Windows.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// convert ABGR to ARGB
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Input\Touch\TouchQueue.cs
/// <summary>
/// Stores touches to apply them once a frame for platforms that dispatch touches asynchronously
/// while user code is running.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\iOS\iOSGamePlatform.cs
/*
//using Microsoft.Xna.Framework.GamerServices;
//This also runs the TitleContainer static constructor, ensuring it is done on the main thread
// Create a full-screen window
//_mainWindow.AutoresizingMask = UIViewAutoresizing.FlexibleDimensions;
//(SJ) Why is this called here when it's not in any other project
//Guide.Initialise(game);
// FrameInterval represents how many frames must pass before the selector
// is called again. We calculate this by dividing our target elapsed time by
// the duration of a frame on iOS (Which is 1/60.0f at the time of writing this).
// FIXME: VideoPlayer 'needs' this to set up its own movie player view
//        controller.
// Show the window
// In iOS 8+ we need to set the root view controller *after* Window MakeKey
// This ensures that the viewController's supported interface orientations
// will be respected at launch
// FIXME: Remove this call, and the whole Tick method, once
//        GraphicsDevice is where platform-specific Present
//        functionality is actually implemented.  At that
//        point, it should be possible to pass Game.Tick
//        directly to NSTimer.CreateRepeatingTimer.
// GraphicsDevice.Present() takes care of actually 
// disposing resources disposed from a non-ui thread
// Do nothing: iOS games are always full screen
// Do nothing: iOS games are always full screen
// Do Nothing: iOS games do not "exit" or shut down.
//TouchPanel.Reset();
// FIXME: Cleanly end the run loop.
// TODO MonoGameGame.Terminate();
// FIXME: The presentation parameters for the GraphicsDevice should
//        be managed by the GraphicsDevice itself.  Not by
//        iOSGamePlatform.
// Recalculate our views.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\iOS\iOSGameView.cs
/*
// FIXME: Someday, hopefully it will be possible to move
//        GraphicsContext into an iOS-specific GraphicsDevice.
//        Some level of cooperation with the UIView/Layer will
//        probably always be necessary, unfortunately.
// RetainedBacking controls if the content of the colorbuffer should be preserved after being displayed
// This is the XNA equivalent to set PreserveContent when initializing the GraphicsDevice
// (should be false by default for better performance)
//var strVersion = OpenTK.Graphics.ES11.GL.GetString (OpenTK.Graphics.ES11.All.Version);
//strVersion = OpenTK.Graphics.ES20.GL.GetString (OpenTK.Graphics.ES20.All.Version);
//var version = Version.Parse (strVersion);
//new GraphicsContext (null, null, 2, 0, GraphicsContextFlags.Embedded)
// HACK:  GraphicsDevice itself should be calling
//        glViewport, so we shouldn't need to do it
//        here and then force the state into
//        GraphicsDevice.  However, that change is a
//        ways off, yet.
// Create our Depth buffer. Color buffer must be the last one bound
// TODO: EAGLContext.RenderBufferStorage returns false
//       on all but the first call.  Nevertheless, it
//       works.  Still, it would be nice to know why it
//       claims to have failed.
// FIXME: These static methods on GraphicsDevice need
//        to go away someday.
// FIXME: This logic belongs in GraphicsDevice.Present, not
//        here.  If it can someday be moved there, then the
//        normal call to Present in Game.Tick should cover
//        this.  For now, iOSGamePlatform will call Present
//        in the Draw/Update loop handler.
// FIXME: This functionality belongs in GraphicsDevice.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\iOS\iOSGameViewController.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// iOS 7 and older reverses width/height in landscape mode when reporting resolution,
// iOS 8+ reports resolution correctly in all cases
// Need to set resize mask to ensure a view resize (which in iOS 8+ corresponds with a rotation) adjusts
// the view and underlying CALayer correctly
// In iOS 8+ DidRotate is no longer called after a rotation
// But we need to notify iOSGamePlatform to update back buffer so we explicitly call it 
// We do this within the animateAlongside action, which at the point of calling
// will have the new InterfaceOrientation set
/// <summary>
/// Defer system gestures on all screen edges in full screen mode.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\iOS\iOSGameView_GLAbstraction.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\iOS\iOSGameView_Touch.cs
/*
// TODO: Review FillTouchCollection
//Get position touch
//case UITouchPhase.Stationary:
// TODO: Review GetOffsetPosition, hopefully it can be removed now.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\iOS\iOSGameWindow.cs
/*
/* Do nothing. */ }
// TODO: Calculate this only when dirty.
// TODO: Verify that View.Handle is a sensible
//       value to return here.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\iOS\OrientationConverter.cs
/*
// NOTE: in XNA, Orientation Left is a 90 degree rotation counterclockwise, while on iOS
// it is a 90 degree rotation CLOCKWISE. They are BACKWARDS! 
// NOTE: in XNA, Orientation Left is a 90 degree rotation counterclockwise, while on iOS
// it is a 90 degree rotation CLOCKWISE. They are BACKWARDS! 
// NOTE: in XNA, Orientation Left is a 90 degree rotation counterclockwise, while on iOS
// it is a 90 degree rotation CLOCKWISE. They are BACKWARDS! 
// Xna's "default" displayorientation is Landscape Left/Right.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\iOS\Devices\Sensors\Accelerometer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\iOS\Devices\Sensors\Compass.cs
// For true north use CMAttitudeReferenceFrame.XTrueNorthZVertical, but be aware that it requires location service
// Send calibrate event if needed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\MediaLibrary.Android.cs
// Note: Grabbing album art using MediaStore.Audio.AlbumColumns.AlbumArt and
// MediaStore.Audio.AudioColumns.AlbumArt is broken
// See: https://code.google.com/p/android/issues/detail?id=1630
// Workaround: http://stackoverflow.com/questions/1954434/cover-art-on-android
// Also broken :(
// Exclude sound effects
//media/external/audio/albumart"), albumId) : null;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\MediaLibrary.Default.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\MediaLibrary.iOS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// The Asset URL check will exclude iTunes match items from the Media Library that are not downloaded, but show up in the music app
/*_playLists = new PlaylistCollection();
//private static readonly NSString MPMediaPlaylistPropertyName = new NSString(MPMediaPlaylistProperty.Name);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\MediaLibrary.WinRT.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Read cache
// Write cache
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\MediaManagerState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// This class provides a way for the MediaManager to be initialised exactly once, 
/// regardless of how many different places need it, and which is called first.
/// </summary>
/// <summary>
/// Ensures that the MediaManager has been initialised. Must be called from UI thread.
/// </summary>
/// <summary>
/// Ensures that the MediaManager has been shutdown. Must be called from UI thread.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\MediaPlayer.Default.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: Fix me!
// Loop through so that we reset the PlayCount as well
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\MediaPlayer.WME.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// RAYB: This needs to be turned back into a readonly.
// TODO: Fix me!
//We start playing when we get a LoadedData event in MediaEngineExOnPlaybackEvent
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\MediaPlayer.WMS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// The GUID is specified in a GuidAttribute attached to the class
// The presentation clock is most likely not quite ready yet
// TODO: Fix me!
// The song will be started after the SessionStopped event is received
// The session needs to be stopped to reset the play position
// The new song will be started after the SessionStopped event is received
//We need to start playing from 0, then seek the stream when the topology is ready, otherwise the song doesn't play.
// The volume service won't be available until the session topology
// is ready, so we now need to wait for the event indicating this
// The play position needs to be reset before stopping otherwise the next song may not start playing
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\MusicProperties.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\Song.Android.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Nothing to do here
/// <summary>
/// Set the event handler for "Finished Playing". Done this way to prevent multiple bindings.
/// </summary>
// Appears to be a noOp on Android
// Prepare the player
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\Song.Default.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Set the event handler for "Finished Playing". Done this way to prevent multiple bindings.
/// </summary>
//Should be possible to implement in OpenAL
// TODO: Implement
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\Song.iOS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Set the event handler for "Finished Playing". Done this way to prevent multiple bindings.
/// </summary>
// MediaLibrary items are lazy loaded
// Seek to start to ensure playback at the start.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\Song.NVorbis.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// init OpenAL if need be
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\Song.WinRT.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\Song.WMS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\Video.Android.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a video.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\Video.iOS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a video.
/// </summary>
/*
// It looks like BackgroundColor doesn't even exist anymore
// in recent versions of iOS... Why still have this?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\Video.MacOS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a video.
/// </summary>
// TODO When Xamarain fix the set Volume mMovie.Volume = value;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\Video.WMS.cs
// Specify that we want the data to come in as RGB32.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\VideoPlayer.Android.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\VideoPlayer.iOS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\VideoPlayer.MacOS.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\VideoPlayer.WME.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// This will return a null texture if
// the video hasn't started playing yet
// or the last frame if the video is stopped
// as per XNA's behavior.
// Calling PlatformGetTexture() manually will save the last frame
// so we can return the same one without doing unnecessary copies
// if GetTexture() keeps getting called while paused
// Calling PlatformGetTexture() manually will save the last frame
// so we can return the same one without doing unnecessary copies
// if GetTexture() keeps getting called while stopped
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\VideoPlayer.WMS.cs
// HACK: Need SharpDX to fix this.
// Trigger an "on Video Ended" event here if needed
// The GUID is specified in a GuidAttribute attached to the class
// NOTE: It's entirely possible that we could lose the d3d context and therefore lose this texture, but it's better than allocating a new texture each call!
// Cleanup the last song first.
//create the callback if it hasn't been created yet
// Set the new song.
// Get the clock.
// Start playing.
// we need to dispose of the old texture if we have one
// Create cached texture
// Get the volume interface.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Media\VideoSampleGrabber.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Microsoft\Devices\Sensors\AccelerometerFailedException.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The exception that may be thrown during a call to Start() or Stop(). The Message field describes the reason for the exception and the ErrorId field contains the error code from the underlying native code implementation of the accelerometer framework.
/// </summary>
/// <summary>
/// Initializes a new instance of AccelerometerFailedException
/// </summary>
/// <param name="message">The descriptive reason for the exception</param>
/// <param name="errorId">The native error code that caused the exception</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Microsoft\Devices\Sensors\AccelerometerReading.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Microsoft\Devices\Sensors\CalibrationEventArgs.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides data for Calibrate and events.
/// </summary>
/// <summary>
/// Initializes a new instance of the CalibrationEventArgs class.
/// </summary>
/// <remarks>
/// Obtain a CalibrationEventArgs object by implementing a handler for the Compass.Calibrate event.
/// </remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Microsoft\Devices\Sensors\CompassReading.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Microsoft\Devices\Sensors\ISensorReading.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Microsoft\Devices\Sensors\SensorBase.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Derived classes override this method to dispose of managed and unmanaged resources.
/// </summary>
/// <param name="disposing">True if unmanaged resources are to be disposed.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Microsoft\Devices\Sensors\SensorFailedException.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Microsoft\Devices\Sensors\SensorReadingEventArgs.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Microsoft\Devices\Sensors\SensorState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Properties\AssemblyInfo.Android.cs
// Specific platform information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Properties\AssemblyInfo.Angle.cs
// Specific platform information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Properties\AssemblyInfo.DesktopGL.cs
// Specific platform information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Properties\AssemblyInfo.iOS.cs
// Specific platform information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Properties\AssemblyInfo.Mac.cs
// Specific platform information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Properties\AssemblyInfo.TVOS.cs
// Specific platform information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Properties\AssemblyInfo.UWP.cs
// Specific platform information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Properties\AssemblyInfo.Web.cs
// Specific platform information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Properties\AssemblyInfo.Windows.cs
// Specific platform information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\SDL\SDL2.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//The mapping string returned by SDL is owned by us and thus must be freed
// For some reason, different game controllers have different maximum value supported
// Also, the more the value is close to their limit, the more they tend to randomly ignore it
// Hence, we're setting an abitrary safe value as a maximum
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\SDL\SDLGamePlatform.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Needed so VS can debug the project on Windows
// using an int to encode multibyte characters longer than 2 bytes
// UTF8 char lenght to decode
// we're reading the first UTF8 byte, we need to check if it's multibyte
// assembling the character
// finished decoding the current character
// shifting it to full UTF8 scope
// SDL returns UTF8-encoded characters while C# char type is UTF16-encoded (and limited to the 0-FFFF range / does not support surrogate pairs)
// so we need to convert it to Unicode codepoint and check if it's within the supported range
// UTF16 characters beyond 0xFFFF are not supported (and would require a surrogate encoding that is not supported by the char type)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\SDL\SDLGameWindow.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// when running NUnit tests entry assembly can be null
// if we are on Linux, start on the current screen
// If going to exclusive full-screen mode, force the window to minimize on focus loss (Windows only)
// We need to get the display information again in case
// the resolution of it was changed.
// This centering only occurs when exiting fullscreen
// so it should center the window on the current display.
// If this window is resizable, there is a bug in SDL 2.0.4 where
// after the window gets resized, window position information
// becomes wrong (for me it always returned 10 8). Solution is
// to not try and set the window position because it will be wrong.
// SDL reports many resize events even if the Size didn't change.
// Only call the code below if it actually changed.
// Nothing to do here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Utilities\AssemblyHelper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Set the window title.
// When running unit tests this can return null.
// Use the Title attribute of the Assembly if possible.
// Nope, wasn't possible :/
// Otherwise, fallback to the Name of the assembly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Utilities\CurrentPlatform.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Utilities\FuncLoader.Android.cs
// Let the OS search for the library by default.
// Some Android devices won't search the native library path
// for the library, so we have to do it manually here.
// TODO: Use the function bellow once Protobuild gets axed
// requires .NET Framework 4.5.1 and its useful for corert
// return Marshal.GetDelegateForFunctionPointer<T>(ret);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Utilities\FuncLoader.Desktop.cs
// Try .NET Framework / mono locations
// Look in Frameworks for .app bundles
// Try .NET Core development locations
// Try current folder (.NET Core will copy it there after publish)
// Try loading system library
// Welp, all failed, PANIC!!!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Utilities\FuncLoader.iOS.cs
// TODO: Use the function bellow once Protobuild gets axed
// requires .NET Framework 4.5.1 and its useful for corert
// return Marshal.GetDelegateForFunctionPointer<T>(ret);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Utilities\InteropHelpers.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Convert a pointer to a Utf8 null-terminated string to a .NET System.String
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Utilities\ReflectionHelpers.Default.cs
/// <summary>
/// Generics handler for Marshal.SizeOf
/// </summary>
/// <summary>
/// Fallback handler for Marshal.SizeOf(type)
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Utilities\ReflectionHelpers.Legacy.cs
/// <summary>
/// Generics handler for Marshal.SizeOf
/// </summary>
/// <summary>
/// Fallback handler for Marshal.SizeOf(type)
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Utilities\TimerHelper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Returns the current timer resolution in milliseconds
/// </summary>
/// <summary>
/// Sleeps as long as possible without exceeding the specified period
/// </summary>
// Assumption is that Thread.Sleep(t) will sleep for at least (t), and at most (t + timerResolution)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Web\WebGamePlatform.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Web\WebGameWindow.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Web\WebHelper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Windows\HorizontalMouseWheelEventArgs.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Windows\SharpDXHelper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//if (present.RenderTargetUsage != RenderTargetUsage.PreserveContents && present.MultiSampleCount == 0)
//effect = SharpDX.DXGI.SwapEffect.Discard;
// TODO: This needs to check the graphics device and 
// return the best hdr blendable format for the device.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Windows\WinFormsGameForm.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// This disables the windows touch helpers, popups, and 
// guides that get in the way of touch gameplay.
// TABLET_DISABLE_PRESSANDHOLD
// TABLET_DISABLE_PENTAPFEEDBACK
// TABLET_DISABLE_PENBARRELFEEDBACK
// TABLET_DISABLE_TOUCHUIFORCEON
// TABLET_DISABLE_TOUCHUIFORCEOFF
// TABLET_DISABLE_TOUCHSWITCH
// TABLET_DISABLE_FLICKS
// TABLET_DISABLE_SMOOTHSCROLLING 
// TABLET_DISABLE_FLICKFALLBACKKEYS
// Left Windows Key
// Right Windows Key
// Disable the system menu from being toggled by
// keyboard input so we can own the ALT key.
// SC_KEYMENU
// WinForms does not distinguish between left/right keys
// We have to check for special keys such as control/shift/alt/ etc
// left shift is 0x2A, right shift is 0x36. IsExtendedKey is always false.
// Note that the Alt key is now refered to as Menu.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Windows\WinFormsGamePlatform.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//internal static string LaunchParameters;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\Windows\WinFormsGameWindow.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// flag to indicate that we're switching to/from full screen and should ignore resize events
// true if window position was moved either through code or by dragging/resizing the form
// Capture mouse events.
// When running unit tests this can return null.
// If in exclusive mode full-screen, force it out of exclusive mode and minimize the window
// This is true when the user presses the Windows key while game window has focus
// If we call the form client functions before the form has
// been made visible it will cause the wrong window size to
// be applied at startup.
// Don't process touch state if we're not active 
// and the mouse is within the client area.
// Release mouse TouchLocation
// this event can be triggered when moving the window through Windows hotkeys
// in that case we should no longer center the window after resize
// we may need to restore full screen when coming back from a minimized window
// the display that the window is on might have changed, so we need to
// check and possibly update the Adapter of the GraphicsDevice
// Set the default new back buffer size
// We need to remove the WM_QUIT message in the message 
// pump as it will keep us from restarting on this 
// same thread.
//
// This is critical for some NUnit runners which
// typically will run all the tests on the same
// process/thread.
// Run game loop when the app becomes Idle.
// Update the mouse state for each window.
// make sure we don't see the events from this as a user resize
// if the window wasn't moved manually and it's resized, it should be centered
// We won't use this maliciously
// stay in hardware full screen, need to call ResizeTargets so the displaymode can be switched
// This needs to be called in case the user presses the Windows key while the focus is on the second monitor,
//	which (sometimes) causes the window to exit fullscreen mode, but still keeps it visible
// store the location of the window so we can restore it later
// FIXME: setting the WindowState to Maximized when the form is not shown will not update the ClientBounds
// this causes the back buffer to be the wrong size when initializing in soft full screen
// we show the form to bypass the issue
// Windows does not always correctly redraw the desktop when exiting soft full screen, so force a redraw
// Windows does not always correctly redraw the desktop when exiting soft full screen, so force a redraw
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\WindowsUniversal\GameFrameworkViewSource.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\WindowsUniversal\InputEvents.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// To convert from DIPs (device independent pixels) to actual screen resolution pixels.
/// <summary>
/// Sets the cursor of <see cref="CoreIndependentInputSource"/> thread
/// </summary>
// The key events are always tied to the window as those will
// only arrive here if some other control hasn't gotten it.
// Create a thread to precess input events.
// If we have an input UIElement then we bind input events
// to it else we'll get events for overlapping XAML controls.
// If we only have a CoreWindow then use it for input events.
//Capture this pointer so we continue getting events even if it is dragged off us
// UIElement Events
// CoreWindow Events
// Mouse or stylus event.
// Capture future pointer events until a release.		
// Mouse or stylus event.
// Mouse or stylus event.
// Release the captured pointer.
// Update the keyboard state.
// WinRT does not distinguish between left/right keys
// We have to check for special keys such as control/shift/alt/ etc
// we can detect right Control by checking the IsExtendedKey value.
// we can detect right shift by checking the scancode value.
// left shift is 0x2A, right shift is 0x36. IsExtendedKey is always false.
// Note that the Alt key is now refered to as Menu.
// ALT key doesn't get fired by KeyUp/KeyDown events.
// One solution could be to check CoreWindow.GetKeyState(...) on every tick.
// If the window is resized then also 
// drop any current key states.
// required of input can stop working if we change focus
// Forget about the held keys when we lose focus as we don't
// receive key events for them while we are in the background
// required of input can stop working if we change focus
// Forget about the held keys when we disappear as we don't
// receive key events for them while we are in the background
// required of input can stop working if we change focus
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\WindowsUniversal\UAPFrameworkView.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Save any launch parameters to be parsed by the platform.
// Construct the game.                
//Initializes it, if delegate was provided
// Save any protocol launch parameters to be parsed by the platform.
// Construct the game if it does not exist
// Protocol can be used to reactivate a suspended game
//Initializes it, if delegate was provided
// Initialize and run the game.
// Initialize the singleton window.
// TODO: I have no idea when and if this is
// called... as of Win8 build 8250 this seems 
// like its never called.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\WindowsUniversal\UAPGamePlatform.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//using Microsoft.Xna.Framework.Audio;
// Setup the game window.
// Setup the launch parameters.
// - Parameters can optionally start with a forward slash.
// - Keys can be separated from values by a colon or equals sign
// - Double quotes can be used to enclose spaces in a key or value.
// For a UAP app we need to re-apply the
// render target before every draw.  
// 
// I guess the OS changes it and doesn't restore it?
// Make sure we dispose the graphics system.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\WindowsUniversal\UAPGameWindow.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// window.Title
// You cannot resize a Metro window!
// We don't want to trigger orientation changes 
// when no preference is being changed.
// Make the decision based on the preferred backbuffer dimensions.
// Register the CoreWindow with the services registry
// Set the new client bounds.
// Set the default new back buffer size and viewport, but this
// can be overloaded by the two events below.
// Set the new view state which will trigger the 
// Game.ApplicationViewChanged event and signal
// the client size changed event.
// NOTE: Dispatcher event is used becuase KeyDown event doesn't handle Alt key
//_appView.SetPreferredMinSize(viewSize);
// TODO: What now?
// Set the new orientation.
// Call the user callback.
// If we have a valid client bounds then update the graphics device.
// We need to manually hide the keyboard input UI when the back button is pressed
// On UAP platform it is also necessary to set the cursor of CoreIndependentInputSource in InputEvents
// Process events incoming to the window.
// Update input
// Update TextInput
// Update size
// Update orientation
// Update focus
// Update back button
// Update state based on window events.
// Update and render the game.
//window.Dispose();
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Platform\WindowsUniversal\XamlGame.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Static class for initializing a Game object for a XAML application.
/// </summary>
/// <typeparam name="T">A class derived from Game with a public parameterless constructor.</typeparam>
/// <summary>
/// Creates your Game class initializing it to work within a XAML application window.
/// </summary>
/// <param name="launchParameters">The command line arguments from launch.</param>
/// <param name="window">The core window object.</param>
/// <param name="swapChainPanel">The XAML SwapChainPanel to which we render the scene and receive input events.</param>
/// <returns>Returns an instance of T generated with default parameterless T constructor</returns>
/// <summary>
/// Creates your Game class initializing it with <paramref name="gameConstructor"/> to work within a XAML application window.
/// </summary>
/// <param name="gameConstructor">The method to construct T</param>
/// <param name="launchParameters">The command line arguments from launch.</param>
/// <param name="window">The core window object.</param>
/// <param name="swapChainPanel">The XAML SwapChainPanel to which we render the scene and receive input events.</param>
/// <returns>Returns an instance of T generated with <paramref name="gameConstructor"/></returns>
// Save any launch parameters to be parsed by the platform.
// Setup the window class.
// Construct the game.
// Set the swap chain panel on the graphics mananger.
// Start running the game.
// Return the created game object.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Properties\AssemblyInfo.cs
// Common information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Mark the assembly as CLS compliant so it can be safely used in other .NET languages
// Allow the content pipeline assembly to access
// some of our internal helper methods that it needs.
//Tests projects need access too
// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// This was needed in WinRT releases to inform the system that we
// don't need to load any language specific resources.
// Version information for the assembly which is automatically
// set by our automated build process.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\BinaryReaderEx.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\BinaryWriterEx.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\ByteBufferPool.cs
/// <summary>
/// Get a buffer that is at least as big as size.
/// </summary>
/// <summary>
/// Return the given buffer to the pool.
/// </summary>
// Find the smallest buffer that is larger than or equally large as size or -1 if none exist
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\FileHelpers.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Combines the filePath and relativeFile based on relativeFile being a file in the same location as filePath.
/// Relative directory operators (..) are also resolved
/// </summary>
/// <example>"A\B\C.txt","D.txt" becomes "A\B\D.txt"</example>
/// <example>"A\B\C.txt","..\D.txt" becomes "A\D.txt"</example>
/// <param name="filePath">Path to the file we are starting from</param>
/// <param name="relativeFile">Relative location of another file to resolve the path to</param>
// Uri accepts forward slashes
// Sanitize the path of double slashes, they confuse Uri
//"))
//", "/");
// Get a uri for filePath using the file:// schema and no host.
//" + UrlEncode(filePath));
// The uri now contains the path to the relativeFile with 
// relative addresses resolved... get the local path.
// Convert the directory separator characters to the 
// correct platform specific separator.
// Remove . in filePath
// Remove .. in filePath
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\GraphicsBackend.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Type of the underlying graphics backend.
/// </summary>
/// <summary>
/// Represents the Microsoft DirectX graphics backend.
/// </summary>
/// <summary>
/// Represents the OpenGL graphics backend.
/// </summary>
/// <summary>
/// Represents the Vulkan graphics backend.
/// </summary>
/// <summary>
/// Represents the Apple Metal graphics backend.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Hash.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Compute a hash from a byte array.
/// </summary>
/// <remarks>
/// Modified FNV Hash in C#
/// http://stackoverflow.com/a/468084
/// </remarks>
/// <summary>
/// Compute a hash from the content of a stream and restore the position.
/// </summary>
/// <remarks>
/// Modified FNV Hash in C#
/// http://stackoverflow.com/a/468084
/// </remarks>
// Restore stream position.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\MonoGamePlatform.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Type of the underlying game platform.
/// </summary>
/// <summary>
/// MonoGame Android platform.
/// </summary>
/// <summary>
/// MonoGame iOS platform.
/// </summary>
/// <summary>
/// MonoGame tvOS platform.
/// </summary>
/// <summary>
/// MonoGame cross platform desktop OpenGL platform.
/// </summary>
/// <summary>
/// MonoGame Win32 Windows platform.
/// </summary>
/// <summary>
/// MonoGame Windows universal platform.
/// </summary>
/// <summary>
/// MonoGame WebGL platform.
/// </summary>
/// <summary>
/// MonoGame PSVita platform.
/// </summary>
/// <summary>
/// MonoGame Xbox One platform.
/// </summary>
/// <summary>
/// MonoGame PlayStation 4 platform.
/// </summary>
/// <summary>
/// MonoGame Nintendo Switch platform.
/// </summary>
/// <summary>
/// MonoGame Google Stadia platform.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\PlatformInfo.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Utility class that returns information about the underlying platform
/// </summary>
/// <summary>
/// Underlying game platform type
/// </summary>
/// <summary>
/// Graphics backend
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\ReflectionHelpers.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Returns the Assembly of a Type
/// </summary>
/// <summary>
/// Returns true if the given type represents a non-object type that is not abstract.
/// </summary>
/// <summary>
/// Returns true if the get method of the given property exist and are public.
/// Note that we allow a getter-only property to be serialized (and deserialized),
/// *if* CanDeserializeIntoExistingObject is true for the property type.
/// </summary>
/// <summary>
/// Returns true if the given type can be assigned the given value
/// </summary>
/// <summary>
/// Returns true if the given type can be assigned a value with the given object type
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\CRC32.cs
// CRC32.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2011 Dino Chiesa.
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License.
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// Last Saved: <2011-August-02 18:25:54>
//
// ------------------------------------------------------------------
//
// This module defines the CRC32 class, which can do the CRC32 algorithm, using
// arbitrary starting polynomials, and bit reversal. The bit reversal is what
// distinguishes this CRC-32 used in BZip2 from the CRC-32 that is used in PKZIP
// files, or GZIP files. This class does both.
//
// ------------------------------------------------------------------
/// <summary>
///   Computes a CRC-32. The CRC-32 algorithm is parameterized - you
///   can set the polynomial and enable or disable bit
///   reversal. This can be used for GZIP, BZip2, or ZIP.
/// </summary>
/// <remarks>
///   This type is used internally by DotNetZip; it is generally not used
///   directly by applications wishing to create, read, or manipulate zip
///   archive files.
/// </remarks>
/// <summary>
///   Indicates the total number of bytes applied to the CRC.
/// </summary>
/// <summary>
/// Indicates the current CRC for all blocks slurped in.
/// </summary>
/// <summary>
/// Returns the CRC32 for the specified stream.
/// </summary>
/// <param name="input">The stream over which to calculate the CRC32</param>
/// <returns>the CRC32 calculation</returns>
/// <summary>
/// Returns the CRC32 for the specified stream, and writes the input into the
/// output stream.
/// </summary>
/// <param name="input">The stream over which to calculate the CRC32</param>
/// <param name="output">The stream into which to deflate the input</param>
/// <returns>the CRC32 calculation</returns>
/// <summary>
///   Get the CRC32 for the given (word,byte) combo.  This is a
///   computation defined by PKzip for PKZIP 2.0 (weak) encryption.
/// </summary>
/// <param name="W">The word to start with.</param>
/// <param name="B">The byte to combine it with.</param>
/// <returns>The CRC-ized result.</returns>
/// <summary>
/// Update the value for the running CRC32 using the given block of bytes.
/// This is useful when using the CRC32() class in a Stream.
/// </summary>
/// <param name="block">block of bytes to slurp</param>
/// <param name="offset">starting point in the block</param>
/// <param name="count">how many bytes within the block to slurp</param>
// bzip algorithm
/// <summary>
///   Process one byte in the CRC.
/// </summary>
/// <param name = "b">the byte to include into the CRC .  </param>
/// <summary>
///   Process a run of N identical bytes into the CRC.
/// </summary>
/// <remarks>
///   <para>
///     This method serves as an optimization for updating the CRC when a
///     run of identical bytes is found. Rather than passing in a buffer of
///     length n, containing all identical bytes b, this method accepts the
///     byte value and the length of the (virtual) buffer - the length of
///     the run.
///   </para>
/// </remarks>
/// <param name = "b">the byte to include into the CRC.  </param>
/// <param name = "n">the number of times that byte should be repeated. </param>
/// <summary>
///   Combines the given CRC32 value with the current running total.
/// </summary>
/// <remarks>
///   This is useful when using a divide-and-conquer approach to
///   calculating a CRC.  Multiple threads can each calculate a
///   CRC32 on a segment of the data, and then combine the
///   individual CRC32 values at the end.
/// </remarks>
/// <param name="crc">the crc value to be combined with this one</param>
/// <param name="length">the length of data the CRC value was calculated on</param>
// even-power-of-two zeros operator
// odd-power-of-two zeros operator
// put operator for one zero bit in odd
// the CRC-32 polynomial
// put operator for two zero bits in even
// put operator for four zero bits in odd
// apply len2 zeros to crc1 (first square will put the operator for one
// zero byte, eight zero bits, in even)
// apply zeros operator for this bit of len2
// another iteration of the loop with odd and even swapped
//return (int) crc1;
/// <summary>
///   Create an instance of the CRC32 class using the default settings: no
///   bit reversal, and a polynomial of 0xEDB88320.
/// </summary>
/// <summary>
///   Create an instance of the CRC32 class, specifying whether to reverse
///   data bits or not.
/// </summary>
/// <param name='reverseBits'>
///   specify true if the instance should reverse data bits.
/// </param>
/// <remarks>
///   <para>
///     In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
///     want a CRC32 with compatibility with BZip2, you should pass true
///     here. In the CRC-32 used by GZIP and PKZIP, the bits are not
///     reversed; Therefore if you want a CRC32 with compatibility with
///     those, you should pass false.
///   </para>
/// </remarks>
/// <summary>
///   Create an instance of the CRC32 class, specifying the polynomial and
///   whether to reverse data bits or not.
/// </summary>
/// <param name='polynomial'>
///   The polynomial to use for the CRC, expressed in the reversed (LSB)
///   format: the highest ordered bit in the polynomial value is the
///   coefficient of the 0th power; the second-highest order bit is the
///   coefficient of the 1 power, and so on. Expressed this way, the
///   polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
/// </param>
/// <param name='reverseBits'>
///   specify true if the instance should reverse data bits.
/// </param>
///
/// <remarks>
///   <para>
///     In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
///     want a CRC32 with compatibility with BZip2, you should pass true
///     here for the <c>reverseBits</c> parameter. In the CRC-32 used by
///     GZIP and PKZIP, the bits are not reversed; Therefore if you want a
///     CRC32 with compatibility with those, you should pass false for the
///     <c>reverseBits</c> parameter.
///   </para>
/// </remarks>
/// <summary>
///   Reset the CRC-32 class - clear the CRC "remainder register."
/// </summary>
/// <remarks>
///   <para>
///     Use this when employing a single instance of this class to compute
///     multiple, distinct CRCs on multiple, distinct data blocks.
///   </para>
/// </remarks>
// private member vars
/// <summary>
/// A Stream that calculates a CRC32 (a checksum) on all bytes read,
/// or on all bytes written.
/// </summary>
///
/// <remarks>
/// <para>
/// This class can be used to verify the CRC of a ZipEntry when
/// reading from a stream, or to calculate a CRC when writing to a
/// stream.  The stream should be used to either read, or write, but
/// not both.  If you intermix reads and writes, the results are not
/// defined.
/// </para>
///
/// <para>
/// This class is intended primarily for use internally by the
/// DotNetZip library.
/// </para>
/// </remarks>
/// <summary>
/// The default constructor.
/// </summary>
/// <remarks>
///   <para>
///     Instances returned from this constructor will leave the underlying
///     stream open upon Close().  The stream uses the default CRC32
///     algorithm, which implies a polynomial of 0xEDB88320.
///   </para>
/// </remarks>
/// <param name="stream">The underlying stream</param>
/// <summary>
///   The constructor allows the caller to specify how to handle the
///   underlying stream at close.
/// </summary>
/// <remarks>
///   <para>
///     The stream uses the default CRC32 algorithm, which implies a
///     polynomial of 0xEDB88320.
///   </para>
/// </remarks>
/// <param name="stream">The underlying stream</param>
/// <param name="leaveOpen">true to leave the underlying stream
/// open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
/// <summary>
///   A constructor allowing the specification of the length of the stream
///   to read.
/// </summary>
/// <remarks>
///   <para>
///     The stream uses the default CRC32 algorithm, which implies a
///     polynomial of 0xEDB88320.
///   </para>
///   <para>
///     Instances returned from this constructor will leave the underlying
///     stream open upon Close().
///   </para>
/// </remarks>
/// <param name="stream">The underlying stream</param>
/// <param name="length">The length of the stream to slurp</param>
/// <summary>
///   A constructor allowing the specification of the length of the stream
///   to read, as well as whether to keep the underlying stream open upon
///   Close().
/// </summary>
/// <remarks>
///   <para>
///     The stream uses the default CRC32 algorithm, which implies a
///     polynomial of 0xEDB88320.
///   </para>
/// </remarks>
/// <param name="stream">The underlying stream</param>
/// <param name="length">The length of the stream to slurp</param>
/// <param name="leaveOpen">true to leave the underlying stream
/// open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
/// <summary>
///   A constructor allowing the specification of the length of the stream
///   to read, as well as whether to keep the underlying stream open upon
///   Close(), and the CRC32 instance to use.
/// </summary>
/// <remarks>
///   <para>
///     The stream uses the specified CRC32 instance, which allows the
///     application to specify how the CRC gets calculated.
///   </para>
/// </remarks>
/// <param name="stream">The underlying stream</param>
/// <param name="length">The length of the stream to slurp</param>
/// <param name="leaveOpen">true to leave the underlying stream
/// open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
/// <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
// This ctor is private - no validation is done here.  This is to allow the use
// of a (specific) negative value for the _lengthLimit, to indicate that there
// is no length set.  So we validate the length limit in those ctors that use an
// explicit param, otherwise we don't validate, because it could be our special
// value.
/// <summary>
///   Gets the total number of bytes run through the CRC32 calculator.
/// </summary>
///
/// <remarks>
///   This is either the total number of bytes read, or the total number of
///   bytes written, depending on the direction of this stream.
/// </remarks>
/// <summary>
///   Provides the current CRC for all blocks slurped in.
/// </summary>
/// <remarks>
///   <para>
///     The running total of the CRC is kept as data is written or read
///     through the stream.  read this property after all reads or writes to
///     get an accurate CRC for the entire stream.
///   </para>
/// </remarks>
/// <summary>
///   Indicates whether the underlying stream will be left open when the
///   <c>CrcCalculatorStream</c> is Closed.
/// </summary>
/// <remarks>
///   <para>
///     Set this at any point before calling <see cref="Close()"/>.
///   </para>
/// </remarks>
/// <summary>
/// Read from the stream
/// </summary>
/// <param name="buffer">the buffer to read</param>
/// <param name="offset">the offset at which to start</param>
/// <param name="count">the number of bytes to read</param>
/// <returns>the number of bytes actually read</returns>
// Need to limit the # of bytes returned, if the stream is intended to have
// a definite length.  This is especially useful when returning a stream for
// the uncompressed data directly to the application.  The app won't
// necessarily read only the UncompressedSize number of bytes.  For example
// wrapping the stream returned from OpenReader() into a StreadReader() and
// calling ReadToEnd() on it, We can "over-read" the zip data and get a
// corrupt string.  The length limits that, prevents that problem.
// EOF
/// <summary>
/// Write to the stream.
/// </summary>
/// <param name="buffer">the buffer from which to write</param>
/// <param name="offset">the offset at which to start writing</param>
/// <param name="count">the number of bytes to write</param>
/// <summary>
/// Indicates whether the stream supports reading.
/// </summary>
/// <summary>
///   Indicates whether the stream supports seeking.
/// </summary>
/// <remarks>
///   <para>
///     Always returns false.
///   </para>
/// </remarks>
/// <summary>
/// Indicates whether the stream supports writing.
/// </summary>
/// <summary>
/// Flush the stream.
/// </summary>
/// <summary>
///   Returns the length of the underlying stream.
/// </summary>
/// <summary>
///   The getter for this property returns the total bytes read.
///   If you use the setter, it will throw
/// <see cref="NotSupportedException"/>.
/// </summary>
/// <summary>
/// Seeking is not supported on this stream. This method always throws
/// <see cref="NotSupportedException"/>
/// </summary>
/// <param name="offset">N/A</param>
/// <param name="origin">N/A</param>
/// <returns>N/A</returns>
/// <summary>
/// This method always throws
/// <see cref="NotSupportedException"/>
/// </summary>
/// <param name="value">N/A</param>
/// <summary>
/// Closes the stream.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\Deflate.cs
// Deflate.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009 Dino Chiesa and Microsoft Corporation.
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License.
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// last saved (in emacs):
// Time-stamp: <2011-August-03 19:52:15>
//
// ------------------------------------------------------------------
//
// This module defines logic for handling the Deflate or compression.
//
// This code is based on multiple sources:
// - the original zlib v1.2.3 source, which is Copyright (C) 1995-2005 Jean-loup Gailly.
// - the original jzlib, which is Copyright (c) 2000-2003 ymnk, JCraft,Inc.
//
// However, this code is significantly different from both.
// The object model is not the same, and many of the behaviors are different.
//
// In keeping with the license for these other works, the copyrights for
// jzlib and zlib are here.
//
// -----------------------------------------------------------------------
// Copyright (c) 2000,2001,2002,2003 ymnk, JCraft,Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in
// the documentation and/or other materials provided with the distribution.
//
// 3. The names of the authors may not be used to endorse or promote products
// derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
// INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// -----------------------------------------------------------------------
//
// This program is based on zlib-1.1.3; credit to authors
// Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
// and contributors of zlib.
//
// -----------------------------------------------------------------------
// block not completed, need more input or more output
// block flush performed
// finish started, need only more output at next deflate
// finish done, accept no more input or output
// Use a faster search when the previous match is longer than this
// reduce lazy search above this match length
// Attempt to find a better match only when the current match is
// strictly smaller than this value. This mechanism is used only for
// compression levels >= 4.  For levels 1,2,3: MaxLazy is actually
// MaxInsertLength. (See DeflateFast)
// do not perform lazy search above this match length
// quit search above this match length
// To speed up deflation, hash chains are never searched beyond this
// length.  A higher limit improves compression ratio but degrades the speed.
// preset dictionary flag in zlib header
// The deflate compression method
// The three kinds of block type
// the zlib encoder/decoder
// as the name implies
// output still pending - waiting to be compressed
// index of next pending byte to output to the stream
// number of bytes in the pending buffer
// UNKNOWN, BINARY or ASCII
// value of flush param for previous deflate call
// LZ77 window size (32K by default)
// log2(w_size)  (8..16)
// w_size - 1
//internal byte[] dictionary;
// Sliding window. Input bytes are read into the second half of the window,
// and move to the first half later to keep a dictionary of at least wSize
// bytes. With this organization, matches are limited to a distance of
// wSize-MAX_MATCH bytes, but this ensures that IO is always
// performed with a length multiple of the block size.
//
// To do: use the user input buffer as sliding window.
// Actual size of window: 2*wSize, except when the user input buffer
// is directly used as sliding window.
// Link to older string with same hash index. To limit the size of this
// array to 64K, this link is maintained only for the last 32K strings.
// An index in this array is thus a window index modulo 32K.
// Heads of the hash chains or NIL.
// hash index of string to be inserted
// number of elements in hash table
// log2(hash_size)
// hash_size-1
// Number of bits by which ins_h must be shifted at each input
// step. It must be such that after MIN_MATCH steps, the oldest
// byte no longer takes part in the hash key, that is:
// hash_shift * MIN_MATCH >= hash_bits
// Window position at the beginning of the current output block. Gets
// negative when the window is moved backwards.
// length of best match
// previous match
// set if previous match exists
// start of string to insert into.....????
// start of matching string
// number of valid bytes ahead in window
// Length of the best match at previous step. Matches not greater than this
// are discarded. This is used in the lazy match evaluation.
// Insert new strings in the hash table only if the match length is not
// greater than this length. This saves time but degrades compression.
// max_insert_length is used only for compression levels <= 3.
// compression level (1..9)
// favor or force Huffman coding
// literal and length tree
// distance tree
// Huffman tree for bit lengths
// desc for literal tree
// desc for distance tree
// desc for bit length tree
// number of codes at each bit length for an optimal tree
// heap used to build the Huffman trees
// number of elements in the heap
// element of largest frequency
// The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
// The same heap array is used to build all trees.
// Depth of each subtree used as tie breaker for trees of equal frequency
// index for literals or lengths
// Size of match buffer for literals/lengths.  There are 4 reasons for
// limiting lit_bufsize to 64K:
//   - frequencies can be kept in 16 bit counters
//   - if compression is not successful for the first block, all input
//     data is still in the window so we can still emit a stored block even
//     when input comes from standard input.  (This can also be done for
//     all blocks if lit_bufsize is not greater than 32K.)
//   - if compression is not successful for a file smaller than 64K, we can
//     even emit a stored file instead of a stored block (saving 5 bytes).
//     This is applicable only for zip (not gzip or zlib).
//   - creating new Huffman trees less frequently may not provide fast
//     adaptation to changes in the input data statistics. (Take for
//     example a binary file with poorly compressible code followed by
//     a highly compressible string table.) Smaller buffer sizes give
//     fast adaptation but have of course the overhead of transmitting
//     trees more frequently.
// running index in l_buf
// Buffer for distances. To simplify the code, d_buf and l_buf have
// the same number of elements. To use different lengths, an extra flag
// array would be necessary.
// index into pending; points to distance data??
// bit length of current block with optimal trees
// bit length of current block with static trees
// number of string matches in current block
// bit length of EOB code for last block
// Output buffer. bits are inserted starting at the bottom (least
// significant bits).
// Number of valid bits in bi_buf.  All bits above the last valid bit
// are always zero.
// distance tree
// Huffman tree for bit lengths
// lm_init
// clear the hash - workitem 9063
//for (int i = 0; i < hash_size; i++) head[i] = 0;
// Initialize the tree data structures for a new zlib stream.
// enough lookahead for inflate
// Initialize the first block of the first file:
// Initialize the trees.
// Restore the heap property by moving down the tree starting at node k,
// exchanging a node with the smallest of its two sons if necessary, stopping
// when the heap property is re-established (each father smaller than its
// two sons).
// left son of k
// Set j to the smallest of the two sons:
// Exit if v is smaller than both sons
// Exchange v with the smallest son
// And continue down the tree, setting j to the left son of k
// Scan a literal or distance tree to determine the frequencies of the codes
// in the bit length tree.
// iterates over all tree elements
// last emitted length
// length of current code
// length of next code
// repeat count of the current code
// max repeat count
// min repeat count
// guard //??
// Construct the Huffman tree for the bit lengths and return the index in
// bl_order of the last bit length code to send.
// index of last bit length code of non zero freq
// Determine the bit length frequencies for literal and distance trees
// Build the bit length tree:
// opt_len now includes the length of the tree representations, except
// the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
// Determine the number of bit length codes to send. The pkzip format
// requires that at least 4 bit length codes be sent. (appnote.txt says
// 3 but the actual value used is 4.)
// Update opt_len to include the bit length tree and counts
// Send the header for a block using dynamic Huffman trees: the counts, the
// lengths of the bit length codes, the literal tree and the distance tree.
// IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
// index in bl_order
// not +255 as stated in appnote.txt
// not -3 as stated in appnote.txt
// literal tree
// distance tree
// Send a literal or distance tree in compressed form, using the codes in
// bl_tree.
// iterates over all tree elements
// last emitted length
// length of current code
// length of next code
// repeat count of the current code
// max repeat count
// min repeat count
// Output a block of bytes on the stream.
// IN assertion: there is enough room in pending_buf.
//int val = value;
//      bi_buf |= (val << bi_valid);
//put_short(bi_buf);
//      bi_buf |= (value) << bi_valid;
// Send one empty static block to give enough lookahead for inflate.
// This takes 10 bits, of which 7 may remain in the bit buffer.
// The current inflate code requires 9 bits of lookahead. If the
// last two codes for the previous block (real code plus EOB) were coded
// on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode
// the last real code. In this case we send two empty static blocks instead
// of one. (There are no problems if the previous block is stored or fixed.)
// To simplify the code, we assume the worst case of last real code encoded
// on one bit only.
// Of the 10 bits for the empty block, we have already sent
// (10 - bi_valid) bits. The lookahead for the last real code (before
// the EOB of the previous block) was thus at least one plus the length
// of the EOB plus what we have just sent of the empty static block.
// Save the match info and tally the frequency counts. Return true if
// the current block must be flushed.
// lc is the unmatched char
// Here, lc is the match length - MIN_MATCH
// dist = match distance - 1
// Compute an upper bound for the compressed length
// dinoch - wraparound?
// We avoid equality with lit_bufsize because of wraparound at 64K
// on 16 bit machines and because stored blocks are restricted to
// 64K-1 bytes.
// Send the block data compressed using the given Huffman trees
// distance of matched string
// match length or unmatched char (if dist == 0)
// running index in l_buf
// the code to send
// number of extra bits to send
// send a literal byte
// literal or match pair
// Here, lc is the match length - MIN_MATCH
// send the length code
// send the extra length bits
// dist is now the match distance - 1
// send the distance code
// send the extra distance bits
// Check that the overlay between pending and d_buf+l_buf is ok:
// Set the data type to ASCII or BINARY, using a crude approximation:
// binary if more than 20% of the bytes are <= 6 or >= 128, ascii otherwise.
// IN assertion: the fields freq of dyn_ltree are set and the total of all
// frequencies does not exceed 64K (to fit in an int on 16 bit machines).
// Flush the bit buffer, keeping at most 7 bits in it.
//put_byte((byte)bi_buf);
// Flush the bit buffer and align the output on a byte boundary
//put_byte((byte)bi_buf);
// Copy a stored block, storing first the length and its
// one's complement if requested.
// align on byte boundary
// enough lookahead for inflate
//put_short((short)len);
//put_short((short)~len);
// Copy without compression as much as possible from the input stream, return
// the current block state.
// This function does not insert new strings in the dictionary since
// uncompressible data is probably not useful. This function is used
// only for the level=0 compression option.
// NOTE: this function should be optimized to avoid extra copying from
// window to pending_buf.
// Stored blocks are limited to 0xffff bytes, pending is limited
// to pending_buf_size, and each stored block has a 5 byte header:
// Copy as much as possible from input to output:
// Fill the window as much as possible:
// flush the current block
// Emit a stored block if pending will be full:
// strstart == 0 is possible when wraparound on 16-bit machine
// Flush if we may have to slide, otherwise block_start may become
// negative and the data will be gone:
// Send a stored block
// send block type
// with header
// Determine the best encoding for the current block: dynamic trees, static
// trees or store, and output the encoded block to the zip file.
// opt_len and static_len in bytes
// index of last bit length code of non zero freq
// Build the Huffman trees unless a stored block is forced
// Check if the file is ascii or binary
// Construct the literal and distance trees
// At this point, opt_len and static_len are the total bit lengths of
// the compressed block data, excluding the tree representations.
// Build the bit length tree for the above two trees, and get the index
// in bl_order of the last bit length code to send.
// Determine the best encoding. Compute first the block length in bytes
// force a stored block
// 4: two words for the lengths
// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
// Otherwise we can't have processed more than WSIZE input bytes since
// the last block flush, because compression would have been
// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
// transform a block into a stored block.
// The above check is made mod 2^32, for files larger than 512 MB
// and uLong implemented on 32 bits.
// Fill the window when the lookahead becomes insufficient.
// Updates strstart and lookahead.
//
// IN assertion: lookahead < MIN_LOOKAHEAD
// OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
//    At least one byte has been read, or avail_in == 0; reads are
//    performed for at least two bytes (required for the zip translate_eol
//    option -- not supported here).
// Amount of free space at the end of the window.
// Deal with !@#$% 64K limit:
// Very unlikely, but possible on 16 bit machine if strstart == 0
// and lookahead == 1 (input done one byte at time)
// If the window is almost full and there is insufficient lookahead,
// move the upper half to the lower one to make room in the upper half.
// we now have strstart >= MAX_DIST
// Slide the hash table (could be avoided with 32 bit values
// at the expense of memory usage). We slide even when level == 0
// to keep the hash table consistent if we switch back to level > 0
// later. (Using level 0 permanently is not an optimal usage of
// zlib, so we don't care about this pathological case.)
// If n is not on any hash chain, prev[n] is garbage but
// its value will never be used.
// If there was no sliding:
//    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
//    more == window_size - lookahead - strstart
// => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
// => more >= window_size - 2*WSIZE + 2
// In the BIG_MEM or MMAP case (not yet supported),
//   window_size == input_size + MIN_LOOKAHEAD  &&
//   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
// Otherwise, window_size == 2*WSIZE so more >= 2.
// If there was sliding, more >= WSIZE. So in all cases, more >= 2.
// Initialize the hash value now that we have some input:
// If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
// but this is not important since only literal bytes will be emitted.
// Compress as much as possible from the input stream, return the current
// block state.
// This function does not perform lazy evaluation of matches and inserts
// new strings in the dictionary only for unmatched strings or for short
// matches. It is used only for the fast compression options.
//    short hash_head = 0; // head of the hash chain
// head of the hash chain
// set if current block must be flushed
// Make sure that we always have enough lookahead, except
// at the end of the input file. We need MAX_MATCH bytes
// for the next match, plus MIN_MATCH bytes to insert the
// string following the next match.
// flush the current block
// Insert the string window[strstart .. strstart+2] in the
// dictionary, and set hash_head to the head of the hash chain:
//  prev[strstart&w_mask]=hash_head=head[ins_h];
// Find the longest match, discarding those <= prev_length.
// At this point we have always match_length < MIN_MATCH
// To simplify the code, we prevent matches with the string
// of window index 0 (in particular we have to avoid a match
// of the string with itself at the start of the input file).
// longest_match() sets match_start
//        check_match(strstart, match_start, match_length);
// Insert new strings in the hash table only if the match length
// is not too large. This saves time but degrades compression.
// string at strstart already in hash table
//      prev[strstart&w_mask]=hash_head=head[ins_h];
// strstart never exceeds WSIZE-MAX_MATCH, so there are
// always MIN_MATCH bytes ahead.
// If lookahead < MIN_MATCH, ins_h is garbage, but it does not
// matter since it will be recomputed at next deflate call.
// No match, output a literal byte
// Same as above, but achieves better compression. We use a lazy
// evaluation for matches: a match is finally adopted only if there is
// no better match at the next window position.
//    short hash_head = 0;    // head of hash chain
// head of hash chain
// set if current block must be flushed
// Process the input block.
// Make sure that we always have enough lookahead, except
// at the end of the input file. We need MAX_MATCH bytes
// for the next match, plus MIN_MATCH bytes to insert the
// string following the next match.
// flush the current block
// Insert the string window[strstart .. strstart+2] in the
// dictionary, and set hash_head to the head of the hash chain:
//  prev[strstart&w_mask]=hash_head=head[ins_h];
// Find the longest match, discarding those <= prev_length.
// To simplify the code, we prevent matches with the string
// of window index 0 (in particular we have to avoid a match
// of the string with itself at the start of the input file).
// longest_match() sets match_start
// If prev_match is also MIN_MATCH, match_start is garbage
// but we will ignore the current match anyway.
// If there was a match at the previous step and the current
// match is not better, output the previous match:
// Do not insert strings in hash table beyond this.
//          check_match(strstart-1, prev_match, prev_length);
// Insert in hash table all strings up to the end of the match.
// strstart-1 and strstart are already inserted. If there is not
// enough lookahead, the last two strings are not inserted in
// the hash table.
//prev[strstart&w_mask]=hash_head=head[ins_h];
// If there was no match at the previous position, output a
// single literal. If there was a match but the current match
// is longer, truncate the previous match to a single literal.
// There is no previous match to compare with, wait for
// the next step to decide.
// max hash chain length
// current string
// matched string
// length of current match
// best match length so far
// Stop when cur_match becomes <= limit. To simplify the code,
// we prevent matches with the string of window index 0.
// The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
// It is easy to get rid of this optimization if necessary.
// Do not waste too much time if we already have a good match:
// Do not look for matches beyond the end of the input. This is necessary
// to make deflate deterministic.
// Skip to next match if the match length cannot increase
// or if the match length is less than 2:
// The check at best_len-1 can be removed because it will be made
// again later. (This heuristic is not always a win.)
// It is not necessary to compare scan[2] and match[2] since they
// are always equal when the other bytes match, given that
// the hash keys are equal and that HASH_BITS >= 8.
// We check for insufficient lookahead only every 8th comparison;
// the 256th check will be made at strstart+258.
// validation
// for memLevel==8, this will be 16384, 16k
// Use a single array as the buffer for data pending compression,
// the output distance codes, and the output length codes (aka tree).
// orig comment: This works just fine since the average
// output size for (length,distance) codes is <= 24 bits.
// So, for memLevel 8, the length of the pending buffer is 65536. 64k.
// The first 16k are pending bytes.
// The middle slice, of 32k, is used for distance codes.
// The final 16k are length codes.
//strm.data_type = Z_UNKNOWN;
// Deallocate in reverse order of allocations:
// free
// dstate=null;
// change in the deflate flavor (Fast vs slow vs none)?
// Flush the last buffer:
// no need to flush with change in strategy?  Really?
// use the tail of the dictionary
// Insert all strings in the hash table (except for the last two bytes).
// s->lookahead stays null, so s->ins_h will be recomputed at the next
// call of fill_window.
// Write the zlib (rfc1950) header bytes
//putShortMSB(header);
// Save the adler32 of the preset dictionary:
// Flush as much pending output as possible
//System.out.println("  avail_out==0");
// Since avail_out is 0, deflate will be called again with
// more output space, but possibly with both pending and
// avail_in equal to zero. There won't be anything to do,
// but this is not an error situation so make sure we
// return OK instead of BUF_ERROR at next call of deflate:
// Make sure there is something to do and avoid duplicate consecutive
// flushes. For repeated and useless calls with Z_FINISH, we keep
// returning Z_STREAM_END instead of Z_BUFF_ERROR.
// workitem 8557
//
// Not sure why this needs to be an error.  pendingCount == 0, which
// means there's nothing to deflate.  And the caller has not asked
// for a FlushType.Finish, but...  that seems very non-fatal.  We
// can just say "OK" and do nothing.
// _codec.Message = z_errmsg[ZlibConstants.Z_NEED_DICT - (ZlibConstants.Z_BUF_ERROR)];
// throw new ZlibException("AvailableBytesIn == 0 && flush<=old_flush && flush != FlushType.Finish");
// User must not provide more input after the first FINISH:
// Start a new block or continue the current one.
// avoid BUF_ERROR next call, see above
// If flush != Z_NO_FLUSH && avail_out == 0, the next call
// of deflate should use the same flush parameter to make sure
// that the flush is complete. So we don't have to output an
// empty block here, this will be done at next call. This also
// ensures that for a very small output buffer, we emit at most
// one empty block.
// FlushType.Full or FlushType.Sync
// For a full flush, this empty block will be recognized
// as a special marker by inflate_sync().
// clear hash (forget the history)
// avoid BUF_ERROR at next call, see above
// Write the zlib trailer (adler32)
//putShortMSB((int)(SharedUtils.URShift(_codec._Adler32, 16)));
//putShortMSB((int)(_codec._Adler32 & 0xffff));
// If avail_out is zero, the application will call deflate again
// to flush the rest.
// write the trailer only once!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\DeflateStream.cs
// DeflateStream.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009-2010 Dino Chiesa.
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License.
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// last saved (in emacs):
// Time-stamp: <2011-July-31 14:48:11>
//
// ------------------------------------------------------------------
//
// This module defines the DeflateStream class, which can be used as a replacement for
// the System.IO.Compression.DeflateStream class in the .NET BCL.
//
// ------------------------------------------------------------------
/// <summary>
/// A class for compressing and decompressing streams using the Deflate algorithm.
/// </summary>
///
/// <remarks>
///
/// <para>
///   The DeflateStream is a <see
///   href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
///   cref="System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any
///   stream.
/// </para>
///
/// <para>
///   Using this stream, applications can compress or decompress data via stream
///   <c>Read</c> and <c>Write</c> operations.  Either compresssion or decompression
///   can occur through either reading or writing. The compression format used is
///   DEFLATE, which is documented in <see
///   href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
///   Compressed Data Format Specification version 1.3.".
/// </para>
///
/// <para>
///   This class is similar to <see cref="ZlibStream"/>, except that
///   <c>ZlibStream</c> adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
///   1950 - ZLIB</see> framing bytes to a compressed stream when compressing, or
///   expects the RFC1950 framing bytes when decompressing. The <c>DeflateStream</c>
///   does not.
/// </para>
///
/// </remarks>
///
/// <seealso cref="ZlibStream" />
/// <seealso cref="GZipStream" />
/// <summary>
///   Create a DeflateStream using the specified CompressionMode.
/// </summary>
///
/// <remarks>
///   When mode is <c>CompressionMode.Compress</c>, the DeflateStream will use
///   the default compression level. The "captive" stream will be closed when
///   the DeflateStream is closed.
/// </remarks>
///
/// <example>
/// This example uses a DeflateStream to compress data from a file, and writes
/// the compressed data to another file.
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
///     {
///         using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
/// }
/// </code>
///
/// <code lang="VB">
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
///         Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
///             Dim buffer As Byte() = New Byte(4096) {}
///             Dim n As Integer = -1
///             Do While (n &lt;&gt; 0)
///                 If (n &gt; 0) Then
///                     compressor.Write(buffer, 0, n)
///                 End If
///                 n = input.Read(buffer, 0, buffer.Length)
///             Loop
///         End Using
///     End Using
/// End Using
/// </code>
/// </example>
/// <param name="stream">The stream which will be read or written.</param>
/// <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
/// <summary>
/// Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
/// </summary>
///
/// <remarks>
///
/// <para>
///   When mode is <c>CompressionMode.Decompress</c>, the level parameter is
///   ignored.  The "captive" stream will be closed when the DeflateStream is
///   closed.
/// </para>
///
/// </remarks>
///
/// <example>
///
///   This example uses a DeflateStream to compress data from a file, and writes
///   the compressed data to another file.
///
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
///     {
///         using (Stream compressor = new DeflateStream(raw,
///                                                      CompressionMode.Compress,
///                                                      CompressionLevel.BestCompression))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n= -1;
///             while (n != 0)
///             {
///                 if (n &gt; 0)
///                     compressor.Write(buffer, 0, n);
///                 n= input.Read(buffer, 0, buffer.Length);
///             }
///         }
///     }
/// }
/// </code>
///
/// <code lang="VB">
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
///         Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
///             Dim buffer As Byte() = New Byte(4096) {}
///             Dim n As Integer = -1
///             Do While (n &lt;&gt; 0)
///                 If (n &gt; 0) Then
///                     compressor.Write(buffer, 0, n)
///                 End If
///                 n = input.Read(buffer, 0, buffer.Length)
///             Loop
///         End Using
///     End Using
/// End Using
/// </code>
/// </example>
/// <param name="stream">The stream to be read or written while deflating or inflating.</param>
/// <param name="mode">Indicates whether the <c>DeflateStream</c> will compress or decompress.</param>
/// <param name="level">A tuning knob to trade speed for effectiveness.</param>
/// <summary>
///   Create a <c>DeflateStream</c> using the specified
///   <c>CompressionMode</c>, and explicitly specify whether the
///   stream should be left open after Deflation or Inflation.
/// </summary>
///
/// <remarks>
///
/// <para>
///   This constructor allows the application to request that the captive stream
///   remain open after the deflation or inflation occurs.  By default, after
///   <c>Close()</c> is called on the stream, the captive stream is also
///   closed. In some cases this is not desired, for example if the stream is a
///   memory stream that will be re-read after compression.  Specify true for
///   the <paramref name="leaveOpen"/> parameter to leave the stream open.
/// </para>
///
/// <para>
///   The <c>DeflateStream</c> will use the default compression level.
/// </para>
///
/// <para>
///   See the other overloads of this constructor for example code.
/// </para>
/// </remarks>
///
/// <param name="stream">
///   The stream which will be read or written. This is called the
///   "captive" stream in other places in this documentation.
/// </param>
///
/// <param name="mode">
///   Indicates whether the <c>DeflateStream</c> will compress or decompress.
/// </param>
///
/// <param name="leaveOpen">true if the application would like the stream to
/// remain open after inflation/deflation.</param>
/// <summary>
///   Create a <c>DeflateStream</c> using the specified <c>CompressionMode</c>
///   and the specified <c>CompressionLevel</c>, and explicitly specify whether
///   the stream should be left open after Deflation or Inflation.
/// </summary>
///
/// <remarks>
///
/// <para>
///   When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
/// </para>
///
/// <para>
///   This constructor allows the application to request that the captive stream
///   remain open after the deflation or inflation occurs.  By default, after
///   <c>Close()</c> is called on the stream, the captive stream is also
///   closed. In some cases this is not desired, for example if the stream is a
///   <see cref="System.IO.MemoryStream"/> that will be re-read after
///   compression.  Specify true for the <paramref name="leaveOpen"/> parameter
///   to leave the stream open.
/// </para>
///
/// </remarks>
///
/// <example>
///
///   This example shows how to use a <c>DeflateStream</c> to compress data from
///   a file, and store the compressed data into another file.
///
/// <code>
/// using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
/// {
///     using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
///     {
///         using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n= -1;
///             while (n != 0)
///             {
///                 if (n &gt; 0)
///                     compressor.Write(buffer, 0, n);
///                 n= input.Read(buffer, 0, buffer.Length);
///             }
///         }
///     }
///     // can write additional data to the output stream here
/// }
/// </code>
///
/// <code lang="VB">
/// Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
///     Using input As Stream = File.OpenRead(fileToCompress)
///         Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
///             Dim buffer As Byte() = New Byte(4096) {}
///             Dim n As Integer = -1
///             Do While (n &lt;&gt; 0)
///                 If (n &gt; 0) Then
///                     compressor.Write(buffer, 0, n)
///                 End If
///                 n = input.Read(buffer, 0, buffer.Length)
///             Loop
///         End Using
///     End Using
///     ' can write additional data to the output stream here.
/// End Using
/// </code>
/// </example>
/// <param name="stream">The stream which will be read or written.</param>
/// <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
/// <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
/// <param name="level">A tuning knob to trade speed for effectiveness.</param>
/// <summary>
/// This property sets the flush behavior on the stream.
/// </summary>
/// <remarks> See the ZLIB documentation for the meaning of the flush behavior.
/// </remarks>
/// <summary>
///   The size of the working buffer for the compression codec.
/// </summary>
///
/// <remarks>
/// <para>
///   The working buffer is used for all stream operations.  The default size is
///   1024 bytes.  The minimum size is 128 bytes. You may get better performance
///   with a larger buffer.  Then again, you might not.  You would have to test
///   it.
/// </para>
///
/// <para>
///   Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
///   stream. If you try to set it afterwards, it will throw.
/// </para>
/// </remarks>
/// <summary>
///   The ZLIB strategy to be used during compression.
/// </summary>
///
/// <remarks>
///   By tweaking this parameter, you may be able to optimize the compression for
///   data with particular characteristics.
/// </remarks>
/// <summary> Returns the total number of bytes input so far.</summary>
/// <summary> Returns the total number of bytes output so far.</summary>
/// <summary>
///   Dispose the stream.
/// </summary>
/// <remarks>
///   <para>
///     This may or may not result in a <c>Close()</c> call on the captive
///     stream.  See the constructors that have a <c>leaveOpen</c> parameter
///     for more information.
///   </para>
///   <para>
///     Application code won't call this code directly.  This method may be
///     invoked in two distinct scenarios.  If disposing == true, the method
///     has been called directly or indirectly by a user's code, for example
///     via the public Dispose() method. In this case, both managed and
///     unmanaged resources can be referenced and disposed.  If disposing ==
///     false, the method has been called by the runtime from inside the
///     object finalizer and this method should not reference other objects;
///     in that case only unmanaged resources must be referenced or
///     disposed.
///   </para>
/// </remarks>
/// <param name="disposing">
///   true if the Dispose method was invoked by user code.
/// </param>
/// <summary>
/// Indicates whether the stream can be read.
/// </summary>
/// <remarks>
/// The return value depends on whether the captive stream supports reading.
/// </remarks>
/// <summary>
/// Indicates whether the stream supports Seek operations.
/// </summary>
/// <remarks>
/// Always returns false.
/// </remarks>
/// <summary>
/// Indicates whether the stream can be written.
/// </summary>
/// <remarks>
/// The return value depends on whether the captive stream supports writing.
/// </remarks>
/// <summary>
/// Flush the stream.
/// </summary>
/// <summary>
/// Reading this property always throws a <see cref="NotImplementedException"/>.
/// </summary>
/// <summary>
/// The position of the stream pointer.
/// </summary>
///
/// <remarks>
///   Setting this property always throws a <see
///   cref="NotImplementedException"/>. Reading will return the total bytes
///   written out, if used in writing, or the total bytes read in, if used in
///   reading.  The count may refer to compressed bytes or uncompressed bytes,
///   depending on how you've used the stream.
/// </remarks>
/// <summary>
/// Read data from the stream.
/// </summary>
/// <remarks>
///
/// <para>
///   If you wish to use the <c>DeflateStream</c> to compress data while
///   reading, you can create a <c>DeflateStream</c> with
///   <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
///   Then call Read() on that <c>DeflateStream</c>, and the data read will be
///   compressed as you read.  If you wish to use the <c>DeflateStream</c> to
///   decompress data while reading, you can create a <c>DeflateStream</c> with
///   <c>CompressionMode.Decompress</c>, providing a readable compressed data
///   stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
///   will be decompressed as you read.
/// </para>
///
/// <para>
///   A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
/// </para>
///
/// </remarks>
/// <param name="buffer">The buffer into which the read data should be placed.</param>
/// <param name="offset">the offset within that data array to put the first byte read.</param>
/// <param name="count">the number of bytes to read.</param>
/// <returns>the number of bytes actually read</returns>
/// <summary>
/// Calling this method always throws a <see cref="NotImplementedException"/>.
/// </summary>
/// <param name="offset">this is irrelevant, since it will always throw!</param>
/// <param name="origin">this is irrelevant, since it will always throw!</param>
/// <returns>irrelevant!</returns>
/// <summary>
/// Calling this method always throws a <see cref="NotImplementedException"/>.
/// </summary>
/// <param name="value">this is irrelevant, since it will always throw!</param>
/// <summary>
///   Write data to the stream.
/// </summary>
/// <remarks>
///
/// <para>
///   If you wish to use the <c>DeflateStream</c> to compress data while
///   writing, you can create a <c>DeflateStream</c> with
///   <c>CompressionMode.Compress</c>, and a writable output stream.  Then call
///   <c>Write()</c> on that <c>DeflateStream</c>, providing uncompressed data
///   as input.  The data sent to the output stream will be the compressed form
///   of the data written.  If you wish to use the <c>DeflateStream</c> to
///   decompress data while writing, you can create a <c>DeflateStream</c> with
///   <c>CompressionMode.Decompress</c>, and a writable output stream.  Then
///   call <c>Write()</c> on that stream, providing previously compressed
///   data. The data sent to the output stream will be the decompressed form of
///   the data written.
/// </para>
///
/// <para>
///   A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>,
///   but not both.
/// </para>
///
/// </remarks>
///
/// <param name="buffer">The buffer holding data to write to the stream.</param>
/// <param name="offset">the offset within that data array to find the first byte to write.</param>
/// <param name="count">the number of bytes to write.</param>
/// <summary>
///   Compress a string into a byte array using DEFLATE (RFC 1951).
/// </summary>
///
/// <remarks>
///   Uncompress it with <see cref="DeflateStream.UncompressString(byte[])"/>.
/// </remarks>
///
/// <seealso cref="DeflateStream.UncompressString(byte[])">DeflateStream.UncompressString(byte[])</seealso>
/// <seealso cref="DeflateStream.CompressBuffer(byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
/// <seealso cref="GZipStream.CompressString(string)">GZipStream.CompressString(string)</seealso>
/// <seealso cref="ZlibStream.CompressString(string)">ZlibStream.CompressString(string)</seealso>
///
/// <param name="s">
///   A string to compress. The string will first be encoded
///   using UTF8, then compressed.
/// </param>
///
/// <returns>The string in compressed form</returns>
/// <summary>
///   Compress a byte array into a new byte array using DEFLATE.
/// </summary>
///
/// <remarks>
///   Uncompress it with <see cref="DeflateStream.UncompressBuffer(byte[])"/>.
/// </remarks>
///
/// <seealso cref="DeflateStream.CompressString(string)">DeflateStream.CompressString(string)</seealso>
/// <seealso cref="DeflateStream.UncompressBuffer(byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
/// <seealso cref="GZipStream.CompressBuffer(byte[])">GZipStream.CompressBuffer(byte[])</seealso>
/// <seealso cref="ZlibStream.CompressBuffer(byte[])">ZlibStream.CompressBuffer(byte[])</seealso>
///
/// <param name="b">
///   A buffer to compress.
/// </param>
///
/// <returns>The data in compressed form</returns>
/// <summary>
///   Uncompress a DEFLATE'd byte array into a single string.
/// </summary>
///
/// <seealso cref="DeflateStream.CompressString(String)">DeflateStream.CompressString(String)</seealso>
/// <seealso cref="DeflateStream.UncompressBuffer(byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
/// <seealso cref="GZipStream.UncompressString(byte[])">GZipStream.UncompressString(byte[])</seealso>
/// <seealso cref="ZlibStream.UncompressString(byte[])">ZlibStream.UncompressString(byte[])</seealso>
///
/// <param name="compressed">
///   A buffer containing DEFLATE-compressed data.
/// </param>
///
/// <returns>The uncompressed string</returns>
/// <summary>
///   Uncompress a DEFLATE'd byte array into a byte array.
/// </summary>
///
/// <seealso cref="DeflateStream.CompressBuffer(byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
/// <seealso cref="DeflateStream.UncompressString(byte[])">DeflateStream.UncompressString(byte[])</seealso>
/// <seealso cref="GZipStream.UncompressBuffer(byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
/// <seealso cref="ZlibStream.UncompressBuffer(byte[])">ZlibStream.UncompressBuffer(byte[])</seealso>
///
/// <param name="compressed">
///   A buffer containing data that has been compressed with DEFLATE.
/// </param>
///
/// <returns>The data in uncompressed form</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\GZipStream.cs
// GZipStream.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009 Dino Chiesa and Microsoft Corporation.
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License.
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// last saved (in emacs):
// Time-stamp: <2011-August-08 18:14:39>
//
// ------------------------------------------------------------------
//
// This module defines the GZipStream class, which can be used as a replacement for
// the System.IO.Compression.GZipStream class in the .NET BCL.  NB: The design is not
// completely OO clean: there is some intelligence in the ZlibBaseStream that reads the
// GZip header.
//
// ------------------------------------------------------------------
/// <summary>
///   A class for compressing and decompressing GZIP streams.
/// </summary>
/// <remarks>
///
/// <para>
///   The <c>GZipStream</c> is a <see
///   href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
///   <see cref="Stream"/>. It adds GZIP compression or decompression to any
///   stream.
/// </para>
///
/// <para>
///   Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
///   <c>MonoGame.Utilities.Deflate.GZipStream</c> can compress while writing, or decompress while
///   reading, but not vice versa.  The compression method used is GZIP, which is
///   documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
///   1952</see>, "GZIP file format specification version 4.3".</para>
///
/// <para>
///   A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
///   to compress data (through <c>Write()</c>), but not both.
/// </para>
///
/// <para>
///   If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
///   around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
///   data will be compressed into the GZIP format.  If you want to decompress data,
///   you must wrap the <c>GZipStream</c> around a readable stream that contains an
///   IETF RFC 1952-compliant stream.  The data will be decompressed as you call
///   <c>Read()</c> on the <c>GZipStream</c>.
/// </para>
///
/// <para>
///   Though the GZIP format allows data from multiple files to be concatenated
///   together, this stream handles only a single segment of GZIP format, typically
///   representing a single file.
/// </para>
///
/// <para>
///   This class is similar to <see cref="ZlibStream"/> and <see cref="DeflateStream"/>.
///   <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="DeflateStream"/>
///   handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
/// </para>
///
/// </remarks>
///
/// <seealso cref="DeflateStream" />
/// <seealso cref="ZlibStream" />
// GZip format
// source: http://tools.ietf.org/html/rfc1952
//
//  header id:           2 bytes    1F 8B
//  compress method      1 byte     8= DEFLATE (none other supported)
//  flag                 1 byte     bitfield (See below)
//  mtime                4 bytes    time_t (seconds since jan 1, 1970 UTC of the file.
//  xflg                 1 byte     2 = max compress used , 4 = max speed (can be ignored)
//  OS                   1 byte     OS for originating archive. set to 0xFF in compression.
//  extra field length   2 bytes    optional - only if FEXTRA is set.
//  extra field          varies
//  filename             varies     optional - if FNAME is set.  zero terminated. ISO-8859-1.
//  file comment         varies     optional - if FCOMMENT is set. zero terminated. ISO-8859-1.
//  crc16                1 byte     optional - present only if FHCRC bit is set
//  compressed data      varies
//  CRC32                4 bytes
//  isize                4 bytes    data size modulo 2^32
//
//     FLG (FLaGs)
//                bit 0   FTEXT - indicates file is ASCII text (can be safely ignored)
//                bit 1   FHCRC - there is a CRC16 for the header immediately following the header
//                bit 2   FEXTRA - extra fields are present
//                bit 3   FNAME - the zero-terminated filename is present. encoding; ISO-8859-1.
//                bit 4   FCOMMENT  - a zero-terminated file comment is present. encoding: ISO-8859-1
//                bit 5   reserved
//                bit 6   reserved
//                bit 7   reserved
//
// On consumption:
// Extra field is a bunch of nonsense and can be safely ignored.
// Header CRC and OS, likewise.
//
// on generation:
// all optional fields get 0, except for the OS, which gets 255.
//
/// <summary>
///   The comment on the GZIP stream.
/// </summary>
///
/// <remarks>
/// <para>
///   The GZIP format allows for each file to optionally have an associated
///   comment stored with the file.  The comment is encoded with the ISO-8859-1
///   code page.  To include a comment in a GZIP stream you create, set this
///   property before calling <c>Write()</c> for the first time on the
///   <c>GZipStream</c>.
/// </para>
///
/// <para>
///   When using <c>GZipStream</c> to decompress, you can retrieve this property
///   after the first call to <c>Read()</c>.  If no comment has been set in the
///   GZIP bytestream, the Comment property will return <c>null</c>
///   (<c>Nothing</c> in VB).
/// </para>
/// </remarks>
/// <summary>
///   The FileName for the GZIP stream.
/// </summary>
///
/// <remarks>
///
/// <para>
///   The GZIP format optionally allows each file to have an associated
///   filename.  When compressing data (through <c>Write()</c>), set this
///   FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
///   The actual filename is encoded into the GZIP bytestream with the
///   ISO-8859-1 code page, according to RFC 1952. It is the application's
///   responsibility to insure that the FileName can be encoded and decoded
///   correctly with this code page.
/// </para>
///
/// <para>
///   When decompressing (through <c>Read()</c>), you can retrieve this value
///   any time after the first <c>Read()</c>.  In the case where there was no filename
///   encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
///   in VB).
/// </para>
/// </remarks>
// trim any leading path
/// <summary>
///   The last modified time for the GZIP stream.
/// </summary>
///
/// <remarks>
///   GZIP allows the storage of a last modified time with each GZIP entry.
///   When compressing data, you can set this before the first call to
///   <c>Write()</c>.  When decompressing, you can retrieve this value any time
///   after the first call to <c>Read()</c>.
/// </remarks>
/// <summary>
/// The CRC on the GZIP stream.
/// </summary>
/// <remarks>
/// This is used for internal error checking. You probably don't need to look at this property.
/// </remarks>
/// <summary>
///   Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
/// </summary>
/// <remarks>
///
/// <para>
///   When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
///   default compression level.
/// </para>
///
/// <para>
///   As noted in the class documentation, the <c>CompressionMode</c> (Compress
///   or Decompress) also establishes the "direction" of the stream.  A
///   <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
///   <c>Write()</c>.  A <c>GZipStream</c> with
///   <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
/// </para>
///
/// </remarks>
///
/// <example>
///   This example shows how to use a GZipStream to compress data.
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(outputFile))
///     {
///         using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
/// }
/// </code>
/// <code lang="VB">
/// Dim outputFile As String = (fileToCompress &amp; ".compressed")
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(outputFile)
///     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
///         Dim buffer As Byte() = New Byte(4096) {}
///         Dim n As Integer = -1
///         Do While (n &lt;&gt; 0)
///             If (n &gt; 0) Then
///                 compressor.Write(buffer, 0, n)
///             End If
///             n = input.Read(buffer, 0, buffer.Length)
///         Loop
///     End Using
///     End Using
/// End Using
/// </code>
/// </example>
///
/// <example>
/// This example shows how to use a GZipStream to uncompress a file.
/// <code>
/// private void GunZipFile(string filename)
/// {
///     if (!filename.EndsWith(".gz))
///         throw new ArgumentException("filename");
///     var DecompressedFile = filename.Substring(0,filename.Length-3);
///     byte[] working = new byte[WORKING_BUFFER_SIZE];
///     int n= 1;
///     using (System.IO.Stream input = System.IO.File.OpenRead(filename))
///     {
///         using (Stream decompressor= new MonoGame.Utilities.Deflate.GZipStream(input, CompressionMode.Decompress, true))
///         {
///             using (var output = System.IO.File.Create(DecompressedFile))
///             {
///                 while (n !=0)
///                 {
///                     n= decompressor.Read(working, 0, working.Length);
///                     if (n > 0)
///                     {
///                         output.Write(working, 0, n);
///                     }
///                 }
///             }
///         }
///     }
/// }
/// </code>
///
/// <code lang="VB">
/// Private Sub GunZipFile(ByVal filename as String)
///     If Not (filename.EndsWith(".gz)) Then
///         Throw New ArgumentException("filename")
///     End If
///     Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
///     Dim working(WORKING_BUFFER_SIZE) as Byte
///     Dim n As Integer = 1
///     Using input As Stream = File.OpenRead(filename)
///         Using decompressor As Stream = new MonoGame.Utilities.Deflate.GZipStream(input, CompressionMode.Decompress, True)
///             Using output As Stream = File.Create(UncompressedFile)
///                 Do
///                     n= decompressor.Read(working, 0, working.Length)
///                     If n > 0 Then
///                         output.Write(working, 0, n)
///                     End IF
///                 Loop While (n  > 0)
///             End Using
///         End Using
///     End Using
/// End Sub
/// </code>
/// </example>
///
/// <param name="stream">The stream which will be read or written.</param>
/// <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
/// <summary>
///   Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
///   the specified <c>CompressionLevel</c>.
/// </summary>
/// <remarks>
///
/// <para>
///   The <c>CompressionMode</c> (Compress or Decompress) also establishes the
///   "direction" of the stream.  A <c>GZipStream</c> with
///   <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
///   <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
///   through <c>Read()</c>.
/// </para>
///
/// </remarks>
///
/// <example>
///
/// This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
///
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
///     {
///         using (Stream compressor = new GZipStream(raw,
///                                                   CompressionMode.Compress,
///                                                   CompressionLevel.BestCompression))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
/// }
/// </code>
///
/// <code lang="VB">
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
///         Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
///             Dim buffer As Byte() = New Byte(4096) {}
///             Dim n As Integer = -1
///             Do While (n &lt;&gt; 0)
///                 If (n &gt; 0) Then
///                     compressor.Write(buffer, 0, n)
///                 End If
///                 n = input.Read(buffer, 0, buffer.Length)
///             Loop
///         End Using
///     End Using
/// End Using
/// </code>
/// </example>
/// <param name="stream">The stream to be read or written while deflating or inflating.</param>
/// <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
/// <param name="level">A tuning knob to trade speed for effectiveness.</param>
/// <summary>
///   Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
///   explicitly specify whether the stream should be left open after Deflation
///   or Inflation.
/// </summary>
///
/// <remarks>
/// <para>
///   This constructor allows the application to request that the captive stream
///   remain open after the deflation or inflation occurs.  By default, after
///   <c>Close()</c> is called on the stream, the captive stream is also
///   closed. In some cases this is not desired, for example if the stream is a
///   memory stream that will be re-read after compressed data has been written
///   to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
///   the stream open.
/// </para>
///
/// <para>
///   The <see cref="CompressionMode"/> (Compress or Decompress) also
///   establishes the "direction" of the stream.  A <c>GZipStream</c> with
///   <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
///   with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
/// </para>
///
/// <para>
///   The <c>GZipStream</c> will use the default compression level. If you want
///   to specify the compression level, see <see cref="GZipStream(Stream,
///   CompressionMode, CompressionLevel, bool)"/>.
/// </para>
///
/// <para>
///   See the other overloads of this constructor for example code.
/// </para>
///
/// </remarks>
///
/// <param name="stream">
///   The stream which will be read or written. This is called the "captive"
///   stream in other places in this documentation.
/// </param>
///
/// <param name="mode">Indicates whether the GZipStream will compress or decompress.
/// </param>
///
/// <param name="leaveOpen">
///   true if the application would like the base stream to remain open after
///   inflation/deflation.
/// </param>
/// <summary>
///   Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
///   specified <c>CompressionLevel</c>, and explicitly specify whether the
///   stream should be left open after Deflation or Inflation.
/// </summary>
///
/// <remarks>
///
/// <para>
///   This constructor allows the application to request that the captive stream
///   remain open after the deflation or inflation occurs.  By default, after
///   <c>Close()</c> is called on the stream, the captive stream is also
///   closed. In some cases this is not desired, for example if the stream is a
///   memory stream that will be re-read after compressed data has been written
///   to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
///   leave the stream open.
/// </para>
///
/// <para>
///   As noted in the class documentation, the <c>CompressionMode</c> (Compress
///   or Decompress) also establishes the "direction" of the stream.  A
///   <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
///   <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
///   through <c>Read()</c>.
/// </para>
///
/// </remarks>
///
/// <example>
///   This example shows how to use a <c>GZipStream</c> to compress data.
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(outputFile))
///     {
///         using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
/// }
/// </code>
/// <code lang="VB">
/// Dim outputFile As String = (fileToCompress &amp; ".compressed")
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(outputFile)
///     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
///         Dim buffer As Byte() = New Byte(4096) {}
///         Dim n As Integer = -1
///         Do While (n &lt;&gt; 0)
///             If (n &gt; 0) Then
///                 compressor.Write(buffer, 0, n)
///             End If
///             n = input.Read(buffer, 0, buffer.Length)
///         Loop
///     End Using
///     End Using
/// End Using
/// </code>
/// </example>
/// <param name="stream">The stream which will be read or written.</param>
/// <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
/// <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
/// <param name="level">A tuning knob to trade speed for effectiveness.</param>
/// <summary>
/// This property sets the flush behavior on the stream.
/// </summary>
/// <summary>
///   The size of the working buffer for the compression codec.
/// </summary>
///
/// <remarks>
/// <para>
///   The working buffer is used for all stream operations.  The default size is
///   1024 bytes.  The minimum size is 128 bytes. You may get better performance
///   with a larger buffer.  Then again, you might not.  You would have to test
///   it.
/// </para>
///
/// <para>
///   Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
///   stream. If you try to set it afterwards, it will throw.
/// </para>
/// </remarks>
/// <summary> Returns the total number of bytes input so far.</summary>
/// <summary> Returns the total number of bytes output so far.</summary>
/// <summary>
///   Dispose the stream.
/// </summary>
/// <remarks>
///   <para>
///     This may or may not result in a <c>Close()</c> call on the captive
///     stream.  See the constructors that have a <c>leaveOpen</c> parameter
///     for more information.
///   </para>
///   <para>
///     This method may be invoked in two distinct scenarios.  If disposing
///     == true, the method has been called directly or indirectly by a
///     user's code, for example via the public Dispose() method. In this
///     case, both managed and unmanaged resources can be referenced and
///     disposed.  If disposing == false, the method has been called by the
///     runtime from inside the object finalizer and this method should not
///     reference other objects; in that case only unmanaged resources must
///     be referenced or disposed.
///   </para>
/// </remarks>
/// <param name="disposing">
///   indicates whether the Dispose method was invoked by user code.
/// </param>
/// <summary>
/// Indicates whether the stream can be read.
/// </summary>
/// <remarks>
/// The return value depends on whether the captive stream supports reading.
/// </remarks>
/// <summary>
/// Indicates whether the stream supports Seek operations.
/// </summary>
/// <remarks>
/// Always returns false.
/// </remarks>
/// <summary>
/// Indicates whether the stream can be written.
/// </summary>
/// <remarks>
/// The return value depends on whether the captive stream supports writing.
/// </remarks>
/// <summary>
/// Flush the stream.
/// </summary>
/// <summary>
/// Reading this property always throws a <see cref="NotImplementedException"/>.
/// </summary>
/// <summary>
///   The position of the stream pointer.
/// </summary>
///
/// <remarks>
///   Setting this property always throws a <see
///   cref="NotImplementedException"/>. Reading will return the total bytes
///   written out, if used in writing, or the total bytes read in, if used in
///   reading.  The count may refer to compressed bytes or uncompressed bytes,
///   depending on how you've used the stream.
/// </remarks>
/// <summary>
///   Read and decompress data from the source stream.
/// </summary>
///
/// <remarks>
///   With a <c>GZipStream</c>, decompression is done through reading.
/// </remarks>
///
/// <example>
/// <code>
/// byte[] working = new byte[WORKING_BUFFER_SIZE];
/// using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
/// {
///     using (Stream decompressor= new MonoGame.Utilities.Deflate.GZipStream(input, CompressionMode.Decompress, true))
///     {
///         using (var output = System.IO.File.Create(_DecompressedFile))
///         {
///             int n;
///             while ((n= decompressor.Read(working, 0, working.Length)) !=0)
///             {
///                 output.Write(working, 0, n);
///             }
///         }
///     }
/// }
/// </code>
/// </example>
/// <param name="buffer">The buffer into which the decompressed data should be placed.</param>
/// <param name="offset">the offset within that data array to put the first byte read.</param>
/// <param name="count">the number of bytes to read.</param>
/// <returns>the number of bytes actually read</returns>
// Console.WriteLine("GZipStream::Read(buffer, off({0}), c({1}) = {2}", offset, count, n);
// Console.WriteLine( Util.FormatByteArray(buffer, offset, n) );
/// <summary>
///   Calling this method always throws a <see cref="NotImplementedException"/>.
/// </summary>
/// <param name="offset">irrelevant; it will always throw!</param>
/// <param name="origin">irrelevant; it will always throw!</param>
/// <returns>irrelevant!</returns>
/// <summary>
///   Calling this method always throws a <see cref="NotImplementedException"/>.
/// </summary>
/// <param name="value">irrelevant; this method will always throw!</param>
/// <summary>
///   Write data to the stream.
/// </summary>
///
/// <remarks>
/// <para>
///   If you wish to use the <c>GZipStream</c> to compress data while writing,
///   you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
///   writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
///   providing uncompressed data as input.  The data sent to the output stream
///   will be the compressed form of the data written.
/// </para>
///
/// <para>
///   A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
///   both. Writing implies compression.  Reading implies decompression.
/// </para>
///
/// </remarks>
/// <param name="buffer">The buffer holding data to write to the stream.</param>
/// <param name="offset">the offset within that data array to find the first byte to write.</param>
/// <param name="count">the number of bytes to write.</param>
//Console.WriteLine("GZipStream: First write");
// first write in compression, therefore, emit the GZIP header
// ID
// compression method
// flag
// mtime
// xflg
// this field is totally useless
// OS
// 0xFF == unspecified
// extra field length - only if FEXTRA is set, which it is not.
//header[i++]= 0;
//header[i++]= 0;
// filename
// terminate
// comment
// terminate
// bytes written
/// <summary>
///   Compress a string into a byte array using GZip.
/// </summary>
///
/// <remarks>
///   Uncompress it with <see cref="GZipStream.UncompressString(byte[])"/>.
/// </remarks>
///
/// <seealso cref="GZipStream.UncompressString(byte[])"/>
/// <seealso cref="GZipStream.CompressBuffer(byte[])"/>
///
/// <param name="s">
///   A string to compress. The string will first be encoded
///   using UTF8, then compressed.
/// </param>
///
/// <returns>The string in compressed form</returns>
/// <summary>
///   Compress a byte array into a new byte array using GZip.
/// </summary>
///
/// <remarks>
///   Uncompress it with <see cref="GZipStream.UncompressBuffer(byte[])"/>.
/// </remarks>
///
/// <seealso cref="GZipStream.CompressString(string)"/>
/// <seealso cref="GZipStream.UncompressBuffer(byte[])"/>
///
/// <param name="b">
///   A buffer to compress.
/// </param>
///
/// <returns>The data in compressed form</returns>
/// <summary>
///   Uncompress a GZip'ed byte array into a single string.
/// </summary>
///
/// <seealso cref="GZipStream.CompressString(String)"/>
/// <seealso cref="GZipStream.UncompressBuffer(byte[])"/>
///
/// <param name="compressed">
///   A buffer containing GZIP-compressed data.
/// </param>
///
/// <returns>The uncompressed string</returns>
/// <summary>
///   Uncompress a GZip'ed byte array into a byte array.
/// </summary>
///
/// <seealso cref="GZipStream.CompressBuffer(byte[])"/>
/// <seealso cref="GZipStream.UncompressString(byte[])"/>
///
/// <param name="compressed">
///   A buffer containing data that has been compressed with GZip.
/// </param>
///
/// <returns>The data in uncompressed form</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\Inflate.cs
// Inflate.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009 Dino Chiesa and Microsoft Corporation.
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License.
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// last saved (in emacs):
// Time-stamp: <2010-January-08 18:32:12>
//
// ------------------------------------------------------------------
//
// This module defines classes for decompression. This code is derived
// from the jzlib implementation of zlib, but significantly modified.
// The object model is not the same, and many of the behaviors are
// different.  Nonetheless, in keeping with the license for jzlib, I am
// reproducing the copyright to that code here.
//
// ------------------------------------------------------------------
//
// Copyright (c) 2000,2001,2002,2003 ymnk, JCraft,Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in
// the documentation and/or other materials provided with the distribution.
//
// 3. The names of the authors may not be used to endorse or promote products
// derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
// INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// -----------------------------------------------------------------------
//
// This program is based on zlib-1.1.3; credit to authors
// Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
// and contributors of zlib.
//
// -----------------------------------------------------------------------
// Table for deflate from PKZIP's appnote.txt.
// get type bits (3, including end bit)
// get lengths for stored
// processing stored block
// get table lengths
// get bit lengths tree for a dynamic block
// get length, distance trees for a dynamic block
// processing fixed or dynamic block
// output remaining window bytes
// finished last block, done
// ot a data error--stuck here
// current inflate_block mode
// if STORED, bytes left to copy
// table lengths (14 bits)
// index into blens (or border)
// bit lengths of codes
// bit length tree depth
// bit length decoding tree
// if CODES, current state
// true if this block is the last block
// pointer back to this zlib stream
// mode independent information
// bits in bit buffer
// bit buffer
// single malloc for tree space
// sliding window
// one byte after sliding window
// window read pointer
// window write pointer
// check function
// check on output
// temporary storage
// bit buffer
// bits in bit buffer
// input data pointer
// bytes available there
// output window write pointer
// bytes to end of window or read pointer
// copy input/output information to locals (UPDATE macro restores)
// process input based on current state
// stored
// go to byte boundary
// get length of stored block
// fixed
// dynamic
// illegal
// dump bits
// for (int i = 0; i < t; i++)
// {
//     blens[i] = 0;
// }
// c == 16..18
// must be <= 9 for lookahead assumptions
// must be <= 9 for lookahead assumptions
// Returns true if inflate is currently at the end of a block generated
// by Z_SYNC_FLUSH or Z_FULL_FLUSH.
// copy as much as possible from the sliding window to the output area
// compute number of bytes to copy as far as end of window
// compute bytes to copy
// workitem 8870
// update counters
// update check information
// copy as far as end of window
// see if more to copy at beginning of window
// wrap pointers
// done
// And'ing with mask[n] masks the lower n bits
// waiting for "i:"=input,
//             "o:"=output,
//             "x:"=nothing
// x: set up for LEN
// i: get length/literal/eob next
// i: getting length extra (have base)
// i: get distance next
// i: getting distance extra
// o: copying bytes in window, waiting for space
// o: got literal, waiting for output space
// o: got eob, possibly still output waiting
// x: got eob and all data flushed
// x: got error
// current inflate_codes mode
// mode dependent information
// pointer into tree
// bits needed
// if EXT or COPY, where and how much
// bits to get for extra
// distance back to copy from
// ltree bits decoded per branch
// dtree bits decoder per branch
// literal/length/eob tree
// literal/length/eob tree
// distance tree
// distance tree
// temporary storage
// temporary pointer
// extra bits or operation
// bit buffer
// bits in bit buffer
// input data pointer
// bytes available there
// output window write pointer
// bytes to end of window or read pointer
// pointer to copy strings from
// copy input/output information to locals (UPDATE macro restores)
// process input and output based on current state
// waiting for "i:"=input, "o:"=output, "x:"=nothing
// x: set up for LEN
// i: get length/literal/eob next
// literal
// length
// next table
// end of block
// invalid code
// i: getting length extra (have base)
// i: get distance next
// distance
// next table
// invalid code
// i: getting distance extra
// o: copying bytes in window, waiting for space
// modulo window size-"while" instead
// of "if" handles invalid distances
// o: got literal, waiting for output space
// o: got eob, possibly more output
// return unused byte, if any
// can always return one
// x: got error
// Called with number of bytes left to write in window at least 258
// (the maximum string length) and number of input bytes available
// at least ten.  The ten bytes are six bytes for the longest length/
// distance pair plus four bytes for overloading the bit buffer.
// temporary pointer
// temporary pointer
// temporary pointer
// extra bits or operation
// bit buffer
// bits in bit buffer
// input data pointer
// bytes available there
// output window write pointer
// bytes to end of window or read pointer
// mask for literal/length tree
// mask for distance tree
// bytes to copy
// distance back to copy from
// copy source pointer
// (tp_index+t)*3
// load input, output, bit values
// initialize masks
// do until not enough input or output space for fast loop
// assume called with m >= 258 && n >= 10
// get literal/length code
// max bits for literal/length code
// decode distance base of block to copy
// max bits for distance code
// get extra bits to add to distance base
// get extra bits (up to 13)
// do the copy
// offset before dest
//  just copy
// minimum count is three,
// so unroll loop a little
// else offset after destination
// force pointer in window
// covers invalid distances
// if source crosses,
// wrapped copy
// copy rest from start of window
// copy all or what's left
// not enough input or output--restore pointers and return
// preset dictionary flag in zlib header
// waiting for method byte
// waiting for flag byte
// four dictionary check bytes to go
// three dictionary check bytes to go
// two dictionary check bytes to go
// one dictionary check byte to go
// waiting for inflateSetDictionary
// decompressing blocks
// four check bytes to go
// three check bytes to go
// two check bytes to go
// one check byte to go
// finished check, done
// got an error--stay here
// current inflate mode
// pointer back to this zlib stream
// mode dependent information
// if FLAGS, method byte
// if CHECK, check values to compare
// computed check value
// stream check value
// if BAD, inflateSync's marker bytes count
// mode independent information
//internal int nowrap; // flag for no wrapper
// log2(window size)  (8..15, defaults to 15)
// current inflate_blocks state
// handle undocumented nowrap option (no zlib header or check)
//nowrap = 0;
//if (w < 0)
//{
//    w = - w;
//    nowrap = 1;
//}
// set window size
//return ZlibConstants.Z_STREAM_ERROR;
// reset state
//             int f = (flush == FlushType.Finish)
//                 ? ZlibConstants.Z_BUF_ERROR
//                 : ZlibConstants.Z_OK;
// workitem 8870
// can't try inflateSync
// can't try inflateSync
// can't try inflateSync
// can try inflateSync
// can try inflateSync
// can't try inflateSync
// number of bytes to look at
// pointer to bytes
// number of marker bytes found in a row
// temporaries to save total_in and total_out
// set up
// search
// restore
// return no joy or set up to restart on a new block
// Returns true if inflate is currently at the end of a block generated
// by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP
// implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH
// but removes the length bytes of the resulting empty stored block. When
// decompressing, PPP checks that at the end of input packet, inflate is
// waiting for these length bytes.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\InfTree.cs
// Inftree.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009 Dino Chiesa and Microsoft Corporation.  
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License. 
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// last saved (in emacs): 
// Time-stamp: <2009-October-28 12:43:54>
//
// ------------------------------------------------------------------
//
// This module defines classes used in  decompression. This code is derived
// from the jzlib implementation of zlib. In keeping with the license for jzlib, 
// the copyright to that code is below.
//
// ------------------------------------------------------------------
// 
// Copyright (c) 2000,2001,2002,2003 ymnk, JCraft,Inc. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in 
// the documentation and/or other materials provided with the distribution.
// 
// 3. The names of the authors may not be used to endorse or promote products
// derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
// INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// -----------------------------------------------------------------------
//
// This program is based on zlib-1.1.3; credit to authors
// Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
// and contributors of zlib.
//
// -----------------------------------------------------------------------
//UPGRADE_NOTE: Final was removed from the declaration of 'fixed_tl'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
//UPGRADE_NOTE: Final was removed from the declaration of 'fixed_td'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
// Tables for deflate from PKZIP's appnote.txt.
//UPGRADE_NOTE: Final was removed from the declaration of 'cplens'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
// see note #13 above about 258
//UPGRADE_NOTE: Final was removed from the declaration of 'cplext'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
//UPGRADE_NOTE: Final was removed from the declaration of 'cpdist'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
//UPGRADE_NOTE: Final was removed from the declaration of 'cpdext'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
// If BMAX needs to be larger than 16, then h and x[] should be uLong.
// maximum bit length of any code
// hufts used in space
// work area for huft_build 
// bit length count table
// table entry for structure assignment
// table stack
// bit offsets, then code stack
// Given a list of code lengths and a maximum table size, make a set of
// tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR
// if the given code set is incomplete (the tables are still built in this
// case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of
// lengths), or Z_MEM_ERROR if not enough memory.
// counter for codes of length k
// i repeats in table every f entries
// maximum code length
// table level
// counter, current code
// counter
// number of bits in current code
// bits per table (returned in m)
// (1 << w) - 1, to avoid cc -O bug on HP
// pointer into c[], b[], or v[]
// points to current table
// bits before this table == (l * h)
// pointer into x
// number of dummy codes added
// number of entries in current table
// Generate counts for each bit length
// assume all entries <= BMAX
// null input--all zero length codes
// Find minimum and maximum length, bound *m by those
// minimum code length
// maximum code length
// Adjust last length count to fill out codes, if needed
// Generate starting offsets into the value table for each length
// note that i == g from above
// Make a table of values in order of bit lengths
// set n to length of v
// Generate the Huffman codes and for each, make the table entries
// first Huffman code is zero
// grab values in bit order
// no tables yet--level -1
// bits decoded == (l * h)
// just to keep compilers happy
// ditto
// ditto
// go through the bit lengths (k already is bits in shortest code)
// here i is the Huffman code of length k bits for value *p
// make tables up to required level
// previous table always l bits
// compute minimum size table less than or equal to l bits
// table size upper limit
// try a k-w bit table
// too few codes for k-w bit table
// deduct codes from patterns left
// try smaller tables up to z bits
// enough codes to use up j bits
// else deduct codes from patterns
// table entries for j-bit table
// allocate new table
// (note: doesn't matter for fixed)
// overflow of MANY
// DEBUG
// connect to last table, if there is one
// save pattern for backing up
// bits in this table
// bits to dump before this table
// offset to this table
// connect to last table
// first table is returned result
// set up table entry in r
// out of values--invalid code
// 256 is end-of-block
// simple code is just the value
// non-simple--look up in lists
// fill code-like entries with r
// backwards increment the k-bit code i
// backup over finished tables
// needed on HP, cc -O bug
// don't need to update q
// Return Z_BUF_ERROR if we were given an incomplete table
// build literal/length tree
// build distance tree
//  for(int i=0; i<BMAX; i++){u[i]=0;}
//Array.Copy(c, 0, u, 0, BMAX);
//  for(int i=0; i<BMAX+1; i++){x[i]=0;}
//Array.Copy(c, 0, x, 0, BMAX + 1);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\Tree.cs
// Tree.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009 Dino Chiesa and Microsoft Corporation.  
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License. 
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// last saved (in emacs): 
// Time-stamp: <2009-October-28 13:29:50>
//
// ------------------------------------------------------------------
//
// This module defines classes for zlib compression and
// decompression. This code is derived from the jzlib implementation of
// zlib. In keeping with the license for jzlib, the copyright to that
// code is below.
//
// ------------------------------------------------------------------
// 
// Copyright (c) 2000,2001,2002,2003 ymnk, JCraft,Inc. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in 
// the documentation and/or other materials provided with the distribution.
// 
// 3. The names of the authors may not be used to endorse or promote products
// derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
// INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// -----------------------------------------------------------------------
//
// This program is based on zlib-1.1.3; credit to authors
// Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
// and contributors of zlib.
//
// -----------------------------------------------------------------------
// extra bits for each length code
// extra bits for each distance code
// extra bits for each bit length code
// The lengths of the bit length codes are sent in order of decreasing
// probability, to avoid transmitting the lengths for unused bit
// length codes.
// see definition of array dist_code below
//internal const int DIST_CODE_LEN = 512;
/// <summary>
/// Map from a distance to a distance code.
/// </summary>
/// <remarks> 
/// No side effects. _dist_code[256] and _dist_code[257] are never used.
/// </remarks>
// the dynamic tree
// largest code with non zero frequency
// the corresponding static tree
// Compute the optimal bit lengths for a tree and update the total bit length
// for the current block.
// IN assertion: the fields freq and dad are set, heap[heap_max] and
//    above are the tree nodes sorted by increasing frequency.
// OUT assertions: the field len is set to the optimal bit length, the
//     array bl_count contains the frequencies for each bit length.
//     The length opt_len is updated; static_len is also updated if stree is
//     not null.
// heap index
// iterate over the tree elements
// bit length
// extra bits
// frequency
// number of elements with bit length too large
// In a first pass, compute the optimal bit lengths (which may
// overflow in the case of the bit length tree).
// root of the heap
// We overwrite tree[n*2+1] which is no longer needed
// not a leaf node
// This happens for example on obj2 and pic of the Calgary corpus
// Find the first bit length which could increase:
// move one leaf down the tree
// move one overflow item as its brother
// The brother of the overflow item also moves one step up,
// but this does not affect bl_count[max_length]
// Construct one Huffman tree and assigns the code bit strings and lengths.
// Update the total bit length for the current block.
// IN assertion: the field freq is set for all tree elements.
// OUT assertions: the fields len and code are set to the optimal bit length
//     and corresponding code. The length opt_len is updated; static_len is
//     also updated if stree is not null. The field max_code is set.
// iterate over heap elements
// largest code with non zero frequency
// new node being created
// Construct the initial heap, with least frequent element in
// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
// heap[0] is not used.
// The pkzip format requires that at least one distance code exists,
// and that at least one bit should be sent even if there is only one
// possible code. So to avoid special checks later on we force at least
// two codes of non zero frequency.
// node is 0 or 1 so it does not have extra bits
// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
// establish sub-heaps of increasing lengths:
// Construct the Huffman tree by repeatedly combining the least two
// frequent nodes.
// next internal node of the tree
// n = node of least frequency
// m = node of next least frequency
// keep the nodes sorted by frequency
// Create a new node father of n and m
// and insert the new node in the heap
// At this point, the fields freq and dad are set. We can now
// generate the bit lengths.
// The field len is now set, we can generate the bit codes
// Generate the codes for a given tree and bit counts (which need not be
// optimal).
// IN assertion: the array bl_count contains the bit length statistics for
// the given tree and the field len is set for all tree elements.
// OUT assertion: the field code is set for all tree elements of non
//     zero code length.
// next code value for each bit length
// running code value
// bit index
// code index
// The distribution counts are first used to generate the code values
// without bit reversal.
// Check that the bit counts in bl_count are consistent. The last code
// must be all ones.
//Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
//        "inconsistent bit counts");
//Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
// Now reverse the bits
// Reverse the first len bits of a code, using straightforward code (a faster
// method would use a table)
// IN assertion: 1 <= len <= 15
//SharedUtils.URShift(code, 1);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\Zlib.cs
// Zlib.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009-2011 Dino Chiesa and Microsoft Corporation.
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License.
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// Last Saved: <2011-August-03 19:52:28>
//
// ------------------------------------------------------------------
//
// This module defines classes for ZLIB compression and
// decompression. This code is derived from the jzlib implementation of
// zlib, but significantly modified.  The object model is not the same,
// and many of the behaviors are new or different.  Nonetheless, in
// keeping with the license for jzlib, the copyright to that code is
// included below.
//
// ------------------------------------------------------------------
//
// The following notice applies to jzlib:
//
// Copyright (c) 2000,2001,2002,2003 ymnk, JCraft,Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in
// the documentation and/or other materials provided with the distribution.
//
// 3. The names of the authors may not be used to endorse or promote products
// derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
// INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// -----------------------------------------------------------------------
//
// jzlib is based on zlib-1.1.3.
//
// The following notice applies to zlib:
//
// -----------------------------------------------------------------------
//
// Copyright (C) 1995-2004 Jean-loup Gailly and Mark Adler
//
//   The ZLIB software is provided 'as-is', without any express or implied
//   warranty.  In no event will the authors be held liable for any damages
//   arising from the use of this software.
//
//   Permission is granted to anyone to use this software for any purpose,
//   including commercial applications, and to alter it and redistribute it
//   freely, subject to the following restrictions:
//
//   1. The origin of this software must not be misrepresented; you must not
//      claim that you wrote the original software. If you use this software
//      in a product, an acknowledgment in the product documentation would be
//      appreciated but is not required.
//   2. Altered source versions must be plainly marked as such, and must not be
//      misrepresented as being the original software.
//   3. This notice may not be removed or altered from any source distribution.
//
//   Jean-loup Gailly jloup@gzip.org
//   Mark Adler madler@alumni.caltech.edu
//
// -----------------------------------------------------------------------
/// <summary>
/// Describes how to flush the current deflate operation.
/// </summary>
/// <remarks>
/// The different FlushType values are useful when using a Deflate in a streaming application.
/// </remarks>
/// <summary>No flush at all.</summary>
/// <summary>Closes the current block, but doesn't flush it to
/// the output. Used internally only in hypothetical
/// scenarios.  This was supposed to be removed by Zlib, but it is
/// still in use in some edge cases.
/// </summary>
/// <summary>
/// Use this during compression to specify that all pending output should be
/// flushed to the output buffer and the output should be aligned on a byte
/// boundary.  You might use this in a streaming communication scenario, so that
/// the decompressor can get all input data available so far.  When using this
/// with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
/// enough output space has been provided before the call.  Flushing will
/// degrade compression and so it should be used only when necessary.
/// </summary>
/// <summary>
/// Use this during compression to specify that all output should be flushed, as
/// with <c>FlushType.Sync</c>, but also, the compression state should be reset
/// so that decompression can restart from this point if previous compressed
/// data has been damaged or if random access is desired.  Using
/// <c>FlushType.Full</c> too often can significantly degrade the compression.
/// </summary>
/// <summary>Signals the end of the compression/decompression stream.</summary>
/// <summary>
/// The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
/// </summary>
/// <summary>
/// None means that the data will be simply stored, with no change at all.
/// If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
/// cannot be opened with the default zip reader. Use a different CompressionLevel.
/// </summary>
/// <summary>
/// Same as None.
/// </summary>
/// <summary>
/// The fastest but least effective compression.
/// </summary>
/// <summary>
/// A synonym for BestSpeed.
/// </summary>
/// <summary>
/// A little slower, but better, than level 1.
/// </summary>
/// <summary>
/// A little slower, but better, than level 2.
/// </summary>
/// <summary>
/// A little slower, but better, than level 3.
/// </summary>
/// <summary>
/// A little slower than level 4, but with better compression.
/// </summary>
/// <summary>
/// The default compression level, with a good balance of speed and compression efficiency.
/// </summary>
/// <summary>
/// A synonym for Default.
/// </summary>
/// <summary>
/// Pretty good compression!
/// </summary>
/// <summary>
///  Better compression than Level7!
/// </summary>
/// <summary>
/// The "best" compression, where best means greatest reduction in size of the input data stream.
/// This is also the slowest compression.
/// </summary>
/// <summary>
/// A synonym for BestCompression.
/// </summary>
/// <summary>
/// Describes options for how the compression algorithm is executed.  Different strategies
/// work better on different sorts of data.  The strategy parameter can affect the compression
/// ratio and the speed of compression but not the correctness of the compresssion.
/// </summary>
/// <summary>
/// The default strategy is probably the best for normal data.
/// </summary>
/// <summary>
/// The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
/// filter or predictor.  By this definition, filtered data consists mostly of small
/// values with a somewhat random distribution.  In this case, the compression algorithm
/// is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
/// coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
/// </summary>
/// <summary>
/// Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
/// string matching.
/// </summary>
/// <summary>
/// An enum to specify the direction of transcoding - whether to compress or decompress.
/// </summary>
/// <summary>
/// Used to specify that the stream should compress the data.
/// </summary>
/// <summary>
/// Used to specify that the stream should decompress the data.
/// </summary>
/// <summary>
/// A general purpose exception class for exceptions in the Zlib library.
/// </summary>
/// <summary>
/// The ZlibException class captures exception information generated
/// by the Zlib library.
/// </summary>
/// <summary>
/// This ctor collects a message attached to the exception.
/// </summary>
/// <param name="s">the message for the exception.</param>
/// <summary>
/// Performs an unsigned bitwise right shift with the specified number
/// </summary>
/// <param name="number">Number to operate on</param>
/// <param name="bits">Ammount of bits to shift</param>
/// <returns>The resulting number from the shift operation</returns>
/// <summary>
/// Performs an unsigned bitwise right shift with the specified number
/// </summary>
/// <param name="number">Number to operate on</param>
/// <param name="bits">Ammount of bits to shift</param>
/// <returns>The resulting number from the shift operation</returns>
/// <summary>
///   Reads a number of characters from the current source TextReader and writes
///   the data to the target array at the specified index.
/// </summary>
///
/// <param name="sourceTextReader">The source TextReader to read from</param>
/// <param name="target">Contains the array of characteres read from the source TextReader.</param>
/// <param name="start">The starting index of the target array.</param>
/// <param name="count">The maximum number of characters to read from the source TextReader.</param>
///
/// <returns>
///   The number of characters read. The number will be less than or equal to
///   count depending on the data available in the source TextReader. Returns -1
///   if the end of the stream is reached.
/// </returns>
// Returns 0 bytes if not enough space in target
// Returns -1 if EOF
// Bit length codes must not exceed MAX_BL_BITS bits
// repeat previous bit length 3-6 times (2 bits of repeat count)
// repeat a zero length 3-10 times  (3 bits of repeat count)
// repeat a zero length 11-138 times  (7 bits of repeat count)
// static tree or null
// extra bits for each code or null
// base index for extra_bits
// max number of elements in the tree
// max bit length for the codes
/// <summary>
/// Computes an Adler-32 checksum.
/// </summary>
/// <remarks>
/// The Adler checksum is similar to a CRC checksum, but faster to compute, though less
/// reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
/// is a required part of the "ZLIB" standard.  Applications will almost never need to
/// use this class directly.
/// </remarks>
///
/// <exclude/>
// largest prime smaller than 65536
// NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1
/// <summary>
///   Calculates the Adler32 checksum.
/// </summary>
/// <remarks>
///   <para>
///     This is used within ZLIB.  You probably don't need to use this directly.
///   </para>
/// </remarks>
/// <example>
///    To compute an Adler32 checksum on a byte array:
///  <code>
///    var adler = Adler.Adler32(0, null, 0, 0);
///    adler = Adler.Adler32(adler, buffer, index, length);
///  </code>
/// </example>
//s1 += (buf[index++] & 0xff); s2 += s1;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\ZlibBaseStream.cs
// ZlibBaseStream.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009 Dino Chiesa and Microsoft Corporation.
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License.
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// last saved (in emacs):
// Time-stamp: <2011-August-06 21:22:38>
//
// ------------------------------------------------------------------
//
// This module defines the ZlibBaseStream class, which is an intnernal
// base class for DeflateStream, ZlibStream and GZipStream.
//
// ------------------------------------------------------------------
// deferred init... new ZlibCodec();
// workitem 7159
//this._workingBuffer = new byte[WORKING_BUFFER_SIZE_DEFAULT];
// workitem 7159
// workitem 7159
// calculate the CRC on the unccompressed data  (before writing)
// first reference of z property will initialize the private var _z
//if (_workingBuffer.Length - _z.AvailableBytesOut > 0)
// If GZIP and de-compress, we're done when 8 bytes remain.
// If GZIP and de-compress, we're done when 8 bytes remain.
// workitem 7159
// Emit the GZIP trailer: CRC32 and  size mod 2^32
// workitem 7159
// workitem 8501: handle edge case (decompress empty stream)
// Read and potentially verify the GZIP trailer:
// CRC32 and size mod 2^32
// workitems 8679 & 12554
// Make sure we have read to the end of the stream
//_outStream.Seek(offset, origin);
// calculate CRC after reading
// workitem 7740
// read the header on the first read
// workitem 8501: handle edge case (decompress empty stream)
// read and discard extra field
// 2-byte length field
// CRC16, ignore
// According to MS documentation, any implementation of the IO.Stream.Read function must:
// (a) throw an exception if offset & count reference an invalid part of the buffer,
//     or if count < 0, or if buffer is null
// (b) return 0 only upon EOF, or if count = 0
// (c) if not EOF, then return at least 1 byte, up to <count> bytes
// for the first read, set up some controls.
// (The first reference to _z goes through the private accessor which
// may initialize it.)
// workitem 8501: handle edge case (decompress empty stream)
// workitem 8557
// set up the output of the deflate/inflate codec:
// This is necessary in case _workingBuffer has been resized. (new byte[])
// (The first reference to _workingBuffer goes through the private accessor which
// may initialize it.)
// need data in _workingBuffer in order to deflate/inflate.  Here, we check if we have any.
// No data available, so try to Read data from the captive stream.
// we have data in InputBuffer; now compress or decompress as appropriate
// nothing more to read
//while (_z.AvailableBytesOut == count && rc == ZlibConstants.Z_OK);
// workitem 8557
// is there more room in output?
// deferred
// are we completely done reading?
// and in compression?
// no more input data available; therefore we flush to
// try to complete the read
// calculate CRC after reading
// workitem 8460
// workitem 8460
// reset to allow read from start
// workitem 8460
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\ZlibCodec.cs
// ZlibCodec.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009 Dino Chiesa and Microsoft Corporation.  
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License. 
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// last saved (in emacs): 
// Time-stamp: <2009-November-03 15:40:51>
//
// ------------------------------------------------------------------
//
// This module defines a Codec for ZLIB compression and
// decompression. This code extends code that was based the jzlib
// implementation of zlib, but this code is completely novel.  The codec
// class is new, and encapsulates some behaviors that are new, and some
// that were present in other classes in the jzlib code base.  In
// keeping with the license for jzlib, the copyright to the jzlib code
// is included below.
//
// ------------------------------------------------------------------
// 
// Copyright (c) 2000,2001,2002,2003 ymnk, JCraft,Inc. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in 
// the documentation and/or other materials provided with the distribution.
// 
// 3. The names of the authors may not be used to endorse or promote products
// derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
// INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// -----------------------------------------------------------------------
//
// This program is based on zlib-1.1.3; credit to authors
// Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
// and contributors of zlib.
//
// -----------------------------------------------------------------------
/// <summary>
/// Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
/// </summary>
///
/// <remarks>
/// This class compresses and decompresses data according to the Deflate algorithm
/// and optionally, the ZLIB format, as documented in <see
/// href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
/// href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
/// </remarks>
/// <summary>
/// The buffer from which data is taken.
/// </summary>
/// <summary>
/// An index into the InputBuffer array, indicating where to start reading. 
/// </summary>
/// <summary>
/// The number of bytes available in the InputBuffer, starting at NextIn. 
/// </summary>
/// <remarks>
/// Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
/// The class will update this number as calls to Inflate/Deflate are made.
/// </remarks>
/// <summary>
/// Total number of bytes read so far, through all calls to Inflate()/Deflate().
/// </summary>
/// <summary>
/// Buffer to store output data.
/// </summary>
/// <summary>
/// An index into the OutputBuffer array, indicating where to start writing. 
/// </summary>
/// <summary>
/// The number of bytes available in the OutputBuffer, starting at NextOut. 
/// </summary>
/// <remarks>
/// Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
/// The class will update this number as calls to Inflate/Deflate are made.
/// </remarks>
/// <summary>
/// Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
/// </summary>
/// <summary>
/// used for diagnostics, when something goes wrong!
/// </summary>
/// <summary>
/// The compression level to use in this codec.  Useful only in compression mode.
/// </summary>
/// <summary>
/// The number of Window Bits to use.  
/// </summary>
/// <remarks>
/// This gauges the size of the sliding window, and hence the 
/// compression effectiveness as well as memory consumption. It's best to just leave this 
/// setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
/// a 32k window.  
/// </remarks>
/// <summary>
/// The compression strategy to use.
/// </summary>
/// <remarks>
/// This is only effective in compression.  The theory offered by ZLIB is that different
/// strategies could potentially produce significant differences in compression behavior
/// for different data sets.  Unfortunately I don't have any good recommendations for how
/// to set it differently.  When I tested changing the strategy I got minimally different
/// compression performance. It's best to leave this property alone if you don't have a
/// good feel for it.  Or, you may want to produce a test harness that runs through the
/// different strategy options and evaluates them on different file types. If you do that,
/// let me know your results.
/// </remarks>
/// <summary>
/// The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
/// </summary>
/// <summary>
/// Create a ZlibCodec.
/// </summary>
/// <remarks>
/// If you use this default constructor, you will later have to explicitly call 
/// InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
/// or decompress. 
/// </remarks>
/// <summary>
/// Create a ZlibCodec that either compresses or decompresses.
/// </summary>
/// <param name="mode">
/// Indicates whether the codec should compress (deflate) or decompress (inflate).
/// </param>
/// <summary>
/// Initialize the inflation state. 
/// </summary>
/// <remarks>
/// It is not necessary to call this before using the ZlibCodec to inflate data; 
/// It is implicitly called when you call the constructor.
/// </remarks>
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// Initialize the inflation state with an explicit flag to
/// govern the handling of RFC1950 header bytes.
/// </summary>
///
/// <remarks>
/// By default, the ZLIB header defined in <see
/// href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
/// you want to read a zlib stream you should specify true for
/// expectRfc1950Header.  If you have a deflate stream, you will want to specify
/// false. It is only necessary to invoke this initializer explicitly if you
/// want to specify false.
/// </remarks>
///
/// <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
/// pair when reading the stream of data to be inflated.</param>
///
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// Initialize the ZlibCodec for inflation, with the specified number of window bits. 
/// </summary>
/// <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
/// then you shouldn't be calling this initializer.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Initialize the inflation state with an explicit flag to govern the handling of
/// RFC1950 header bytes. 
/// </summary>
///
/// <remarks>
/// If you want to read a zlib stream you should specify true for
/// expectRfc1950Header. In this case, the library will expect to find a ZLIB
/// header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
/// 1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
/// GZIP stream, which does not have such a header, you will want to specify
/// false.
/// </remarks>
///
/// <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
/// the stream of data to be inflated.</param>
/// <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
/// then you shouldn't be calling this initializer.</param>
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
/// </summary>
/// <remarks>
/// You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
/// AvailableBytesOut  before calling this method.
/// </remarks>
/// <example>
/// <code>
/// private void InflateBuffer()
/// {
///     int bufferSize = 1024;
///     byte[] buffer = new byte[bufferSize];
///     ZlibCodec decompressor = new ZlibCodec();
/// 
///     Console.WriteLine("\n============================================");
///     Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
///     MemoryStream ms = new MemoryStream(DecompressedBytes);
/// 
///     int rc = decompressor.InitializeInflate();
/// 
///     decompressor.InputBuffer = CompressedBytes;
///     decompressor.NextIn = 0;
///     decompressor.AvailableBytesIn = CompressedBytes.Length;
/// 
///     decompressor.OutputBuffer = buffer;
/// 
///     // pass 1: inflate 
///     do
///     {
///         decompressor.NextOut = 0;
///         decompressor.AvailableBytesOut = buffer.Length;
///         rc = decompressor.Inflate(FlushType.None);
/// 
///         if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
///             throw new Exception("inflating: " + decompressor.Message);
/// 
///         ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
///     }
///     while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
/// 
///     // pass 2: finish and flush
///     do
///     {
///         decompressor.NextOut = 0;
///         decompressor.AvailableBytesOut = buffer.Length;
///         rc = decompressor.Inflate(FlushType.Finish);
/// 
///         if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
///             throw new Exception("inflating: " + decompressor.Message);
/// 
///         if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
///             ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
///     }
///     while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
/// 
///     decompressor.EndInflate();
/// }
///
/// </code>
/// </example>
/// <param name="flush">The flush to use when inflating.</param>
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// Ends an inflation session. 
/// </summary>
/// <remarks>
/// Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
/// After calling this you cannot call Inflate() without a intervening call to one of the
/// InitializeInflate() overloads.
/// </remarks>
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// I don't know what this does!
/// </summary>
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// Initialize the ZlibCodec for deflation operation.
/// </summary>
/// <remarks>
/// The codec will use the MAX window bits and the default level of compression.
/// </remarks>
/// <example>
/// <code>
///  int bufferSize = 40000;
///  byte[] CompressedBytes = new byte[bufferSize];
///  byte[] DecompressedBytes = new byte[bufferSize];
///  
///  ZlibCodec compressor = new ZlibCodec();
///  
///  compressor.InitializeDeflate(CompressionLevel.Default);
///  
///  compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
///  compressor.NextIn = 0;
///  compressor.AvailableBytesIn = compressor.InputBuffer.Length;
///  
///  compressor.OutputBuffer = CompressedBytes;
///  compressor.NextOut = 0;
///  compressor.AvailableBytesOut = CompressedBytes.Length;
///  
///  while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
///  {
///    compressor.Deflate(FlushType.None);
///  }
///  
///  while (true)
///  {
///    int rc= compressor.Deflate(FlushType.Finish);
///    if (rc == ZlibConstants.Z_STREAM_END) break;
///  }
///  
///  compressor.EndDeflate();
///   
/// </code>
/// </example>
/// <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
/// <summary>
/// Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
/// </summary>
/// <remarks>
/// The codec will use the maximum window bits (15) and the specified
/// CompressionLevel.  It will emit a ZLIB stream as it compresses.
/// </remarks>
/// <param name="level">The compression level for the codec.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
/// and the explicit flag governing whether to emit an RFC1950 header byte pair.
/// </summary>
/// <remarks>
/// The codec will use the maximum window bits (15) and the specified CompressionLevel.
/// If you want to generate a zlib stream, you should specify true for
/// wantRfc1950Header. In this case, the library will emit a ZLIB
/// header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
/// 1950</see>, in the compressed stream.  
/// </remarks>
/// <param name="level">The compression level for the codec.</param>
/// <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
/// and the specified number of window bits. 
/// </summary>
/// <remarks>
/// The codec will use the specified number of window bits and the specified CompressionLevel.
/// </remarks>
/// <param name="level">The compression level for the codec.</param>
/// <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Initialize the ZlibCodec for deflation operation, using the specified
/// CompressionLevel, the specified number of window bits, and the explicit flag
/// governing whether to emit an RFC1950 header byte pair.
/// </summary>
///
/// <param name="level">The compression level for the codec.</param>
/// <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
/// <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Deflate one batch of data.
/// </summary>
/// <remarks>
/// You must have set InputBuffer and OutputBuffer before calling this method.
/// </remarks>
/// <example>
/// <code>
/// private void DeflateBuffer(CompressionLevel level)
/// {
///     int bufferSize = 1024;
///     byte[] buffer = new byte[bufferSize];
///     ZlibCodec compressor = new ZlibCodec();
/// 
///     Console.WriteLine("\n============================================");
///     Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
///     MemoryStream ms = new MemoryStream();
/// 
///     int rc = compressor.InitializeDeflate(level);
/// 
///     compressor.InputBuffer = UncompressedBytes;
///     compressor.NextIn = 0;
///     compressor.AvailableBytesIn = UncompressedBytes.Length;
/// 
///     compressor.OutputBuffer = buffer;
/// 
///     // pass 1: deflate 
///     do
///     {
///         compressor.NextOut = 0;
///         compressor.AvailableBytesOut = buffer.Length;
///         rc = compressor.Deflate(FlushType.None);
/// 
///         if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
///             throw new Exception("deflating: " + compressor.Message);
/// 
///         ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
///     }
///     while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
/// 
///     // pass 2: finish and flush
///     do
///     {
///         compressor.NextOut = 0;
///         compressor.AvailableBytesOut = buffer.Length;
///         rc = compressor.Deflate(FlushType.Finish);
/// 
///         if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
///             throw new Exception("deflating: " + compressor.Message);
/// 
///         if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
///             ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
///     }
///     while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
/// 
///     compressor.EndDeflate();
/// 
///     ms.Seek(0, SeekOrigin.Begin);
///     CompressedBytes = new byte[compressor.TotalBytesOut];
///     ms.Read(CompressedBytes, 0, CompressedBytes.Length);
/// }
/// </code>
/// </example>
/// <param name="flush">whether to flush all data as you deflate. Generally you will want to 
/// use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
/// flush everything. 
/// </param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// End a deflation session.
/// </summary>
/// <remarks>
/// Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
/// </remarks>
/// <returns>Z_OK if all goes well.</returns>
// TODO: dinoch Tue, 03 Nov 2009  15:39 (test this)
//int ret = dstate.End();
//ret;
/// <summary>
/// Reset a codec for another deflation session.
/// </summary>
/// <remarks>
/// Call this to reset the deflation state.  For example if a thread is deflating
/// non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
/// block and before the next Deflate(None) of the second block.
/// </remarks>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Set the CompressionStrategy and CompressionLevel for a deflation session.
/// </summary>
/// <param name="level">the level of compression to use.</param>
/// <param name="strategy">the strategy to use for compression.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Set the dictionary to be used for either Inflation or Deflation.
/// </summary>
/// <param name="dictionary">The dictionary bytes to use.</param>
/// <returns>Z_OK if all goes well.</returns>
// Flush as much pending output as possible. All deflate() output goes
// through this function so some applications may wish to modify it
// to avoid allocating a large strm->next_out buffer and copying into it.
// (See also read_buf()).
// Read a new buffer from the current input stream, update the adler32
// and total number of bytes read.  All deflate() input goes through
// this function so some applications may wish to modify it to avoid
// allocating a large strm->next_in buffer and copying from it.
// (See also flush_pending()).
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\ZlibConstants.cs
// ZlibConstants.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009 Dino Chiesa and Microsoft Corporation.  
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License. 
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// last saved (in emacs): 
// Time-stamp: <2009-November-03 18:50:19>
//
// ------------------------------------------------------------------
//
// This module defines constants used by the zlib class library.  This
// code is derived from the jzlib implementation of zlib, but
// significantly modified.  In keeping with the license for jzlib, the
// copyright to that code is included here.
//
// ------------------------------------------------------------------
// 
// Copyright (c) 2000,2001,2002,2003 ymnk, JCraft,Inc. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright 
// notice, this list of conditions and the following disclaimer in 
// the documentation and/or other materials provided with the distribution.
// 
// 3. The names of the authors may not be used to endorse or promote products
// derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
// INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// -----------------------------------------------------------------------
//
// This program is based on zlib-1.1.3; credit to authors
// Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
// and contributors of zlib.
//
// -----------------------------------------------------------------------
/// <summary>
/// A bunch of constants used in the Zlib interface.
/// </summary>
/// <summary>
/// The maximum number of window bits for the Deflate algorithm.
/// </summary>
// 32K LZ77 window
/// <summary>
/// The default number of window bits for the Deflate algorithm.
/// </summary>
/// <summary>
/// indicates everything is A-OK
/// </summary>
/// <summary>
/// Indicates that the last operation reached the end of the stream.
/// </summary>
/// <summary>
/// The operation ended in need of a dictionary. 
/// </summary>
/// <summary>
/// There was an error with the stream - not enough data, not open and readable, etc.
/// </summary>
/// <summary>
/// There was an error with the data - not enough data, bad data, etc.
/// </summary>
/// <summary>
/// There was an error with the working buffer.
/// </summary>
/// <summary>
/// The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
/// </summary>
/// <summary>
/// The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Deflate\ZlibStream.cs
// ZlibStream.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009 Dino Chiesa and Microsoft Corporation.
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License.
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// last saved (in emacs):
// Time-stamp: <2011-July-31 14:53:33>
//
// ------------------------------------------------------------------
//
// This module defines the ZlibStream class, which is similar in idea to
// the System.IO.Compression.DeflateStream and
// System.IO.Compression.GZipStream classes in the .NET BCL.
//
// ------------------------------------------------------------------
/// <summary>
/// Represents a Zlib stream for compression or decompression.
/// </summary>
/// <remarks>
///
/// <para>
/// The ZlibStream is a <see
/// href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
/// cref="System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
/// stream.
/// </para>
///
/// <para> Using this stream, applications can compress or decompress data via
/// stream <c>Read()</c> and <c>Write()</c> operations.  Either compression or
/// decompression can occur through either reading or writing. The compression
/// format used is ZLIB, which is documented in <see
/// href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
/// Data Format Specification version 3.3". This implementation of ZLIB always uses
/// DEFLATE as the compression method.  (see <see
/// href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
/// Compressed Data Format Specification version 1.3.") </para>
///
/// <para>
/// The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
/// This implementation always uses the DEFLATE compression method, a preset dictionary,
/// and 15 window bits by default.
/// </para>
///
/// <para>
/// This class is similar to <see cref="DeflateStream"/>, except that it adds the
/// RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
/// the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
/// <see cref="GZipStream"/>.
/// </para>
/// </remarks>
/// <seealso cref="DeflateStream" />
/// <seealso cref="GZipStream" />
/// <summary>
/// Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
/// </summary>
/// <remarks>
///
/// <para>
///   When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
///   will use the default compression level. The "captive" stream will be
///   closed when the <c>ZlibStream</c> is closed.
/// </para>
///
/// </remarks>
///
/// <example>
/// This example uses a <c>ZlibStream</c> to compress a file, and writes the
/// compressed data to another file.
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
///     {
///         using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
/// }
/// </code>
/// <code lang="VB">
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
///     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
///         Dim buffer As Byte() = New Byte(4096) {}
///         Dim n As Integer = -1
///         Do While (n &lt;&gt; 0)
///             If (n &gt; 0) Then
///                 compressor.Write(buffer, 0, n)
///             End If
///             n = input.Read(buffer, 0, buffer.Length)
///         Loop
///     End Using
///     End Using
/// End Using
/// </code>
/// </example>
///
/// <param name="stream">The stream which will be read or written.</param>
/// <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
/// <summary>
///   Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
///   the specified <c>CompressionLevel</c>.
/// </summary>
///
/// <remarks>
///
/// <para>
///   When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
///   The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
/// </para>
///
/// </remarks>
///
/// <example>
///   This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
///   compressed data to another file.
///
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
///     {
///         using (Stream compressor = new ZlibStream(raw,
///                                                   CompressionMode.Compress,
///                                                   CompressionLevel.BestCompression))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
/// }
/// </code>
///
/// <code lang="VB">
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
///         Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
///             Dim buffer As Byte() = New Byte(4096) {}
///             Dim n As Integer = -1
///             Do While (n &lt;&gt; 0)
///                 If (n &gt; 0) Then
///                     compressor.Write(buffer, 0, n)
///                 End If
///                 n = input.Read(buffer, 0, buffer.Length)
///             Loop
///         End Using
///     End Using
/// End Using
/// </code>
/// </example>
///
/// <param name="stream">The stream to be read or written while deflating or inflating.</param>
/// <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
/// <param name="level">A tuning knob to trade speed for effectiveness.</param>
/// <summary>
///   Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
///   explicitly specify whether the captive stream should be left open after
///   Deflation or Inflation.
/// </summary>
///
/// <remarks>
///
/// <para>
///   When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
///   the default compression level.
/// </para>
///
/// <para>
///   This constructor allows the application to request that the captive stream
///   remain open after the deflation or inflation occurs.  By default, after
///   <c>Close()</c> is called on the stream, the captive stream is also
///   closed. In some cases this is not desired, for example if the stream is a
///   <see cref="System.IO.MemoryStream"/> that will be re-read after
///   compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
///   open.
/// </para>
///
/// <para>
/// See the other overloads of this constructor for example code.
/// </para>
///
/// </remarks>
///
/// <param name="stream">The stream which will be read or written. This is called the
/// "captive" stream in other places in this documentation.</param>
/// <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
/// <param name="leaveOpen">true if the application would like the stream to remain
/// open after inflation/deflation.</param>
/// <summary>
///   Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
///   and the specified <c>CompressionLevel</c>, and explicitly specify
///   whether the stream should be left open after Deflation or Inflation.
/// </summary>
///
/// <remarks>
///
/// <para>
///   This constructor allows the application to request that the captive
///   stream remain open after the deflation or inflation occurs.  By
///   default, after <c>Close()</c> is called on the stream, the captive
///   stream is also closed. In some cases this is not desired, for example
///   if the stream is a <see cref="System.IO.MemoryStream"/> that will be
///   re-read after compression.  Specify true for the <paramref
///   name="leaveOpen"/> parameter to leave the stream open.
/// </para>
///
/// <para>
///   When mode is <c>CompressionMode.Decompress</c>, the level parameter is
///   ignored.
/// </para>
///
/// </remarks>
///
/// <example>
///
/// This example shows how to use a ZlibStream to compress the data from a file,
/// and store the result into another file. The filestream remains open to allow
/// additional data to be written to it.
///
/// <code>
/// using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
/// {
///     using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
///     {
///         using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
///     // can write additional data to the output stream here
/// }
/// </code>
/// <code lang="VB">
/// Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
///     Using input As Stream = File.OpenRead(fileToCompress)
///         Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
///             Dim buffer As Byte() = New Byte(4096) {}
///             Dim n As Integer = -1
///             Do While (n &lt;&gt; 0)
///                 If (n &gt; 0) Then
///                     compressor.Write(buffer, 0, n)
///                 End If
///                 n = input.Read(buffer, 0, buffer.Length)
///             Loop
///         End Using
///     End Using
///     ' can write additional data to the output stream here.
/// End Using
/// </code>
/// </example>
///
/// <param name="stream">The stream which will be read or written.</param>
///
/// <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
///
/// <param name="leaveOpen">
/// true if the application would like the stream to remain open after
/// inflation/deflation.
/// </param>
///
/// <param name="level">
/// A tuning knob to trade speed for effectiveness. This parameter is
/// effective only when mode is <c>CompressionMode.Compress</c>.
/// </param>
/// <summary>
/// This property sets the flush behavior on the stream.
/// Sorry, though, not sure exactly how to describe all the various settings.
/// </summary>
/// <summary>
///   The size of the working buffer for the compression codec.
/// </summary>
///
/// <remarks>
/// <para>
///   The working buffer is used for all stream operations.  The default size is
///   1024 bytes. The minimum size is 128 bytes. You may get better performance
///   with a larger buffer.  Then again, you might not.  You would have to test
///   it.
/// </para>
///
/// <para>
///   Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
///   stream. If you try to set it afterwards, it will throw.
/// </para>
/// </remarks>
/// <summary> Returns the total number of bytes input so far.</summary>
/// <summary> Returns the total number of bytes output so far.</summary>
/// <summary>
///   Dispose the stream.
/// </summary>
/// <remarks>
///   <para>
///     This may or may not result in a <c>Close()</c> call on the captive
///     stream.  See the constructors that have a <c>leaveOpen</c> parameter
///     for more information.
///   </para>
///   <para>
///     This method may be invoked in two distinct scenarios.  If disposing
///     == true, the method has been called directly or indirectly by a
///     user's code, for example via the public Dispose() method. In this
///     case, both managed and unmanaged resources can be referenced and
///     disposed.  If disposing == false, the method has been called by the
///     runtime from inside the object finalizer and this method should not
///     reference other objects; in that case only unmanaged resources must
///     be referenced or disposed.
///   </para>
/// </remarks>
/// <param name="disposing">
///   indicates whether the Dispose method was invoked by user code.
/// </param>
/// <summary>
/// Indicates whether the stream can be read.
/// </summary>
/// <remarks>
/// The return value depends on whether the captive stream supports reading.
/// </remarks>
/// <summary>
/// Indicates whether the stream supports Seek operations.
/// </summary>
/// <remarks>
/// Always returns false.
/// </remarks>
/// <summary>
/// Indicates whether the stream can be written.
/// </summary>
/// <remarks>
/// The return value depends on whether the captive stream supports writing.
/// </remarks>
/// <summary>
/// Flush the stream.
/// </summary>
/// <summary>
/// Reading this property always throws a <see cref="NotSupportedException"/>.
/// </summary>
/// <summary>
///   The position of the stream pointer.
/// </summary>
///
/// <remarks>
///   Setting this property always throws a <see
///   cref="NotSupportedException"/>. Reading will return the total bytes
///   written out, if used in writing, or the total bytes read in, if used in
///   reading.  The count may refer to compressed bytes or uncompressed bytes,
///   depending on how you've used the stream.
/// </remarks>
/// <summary>
/// Read data from the stream.
/// </summary>
///
/// <remarks>
///
/// <para>
///   If you wish to use the <c>ZlibStream</c> to compress data while reading,
///   you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
///   providing an uncompressed data stream.  Then call <c>Read()</c> on that
///   <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
///   use the <c>ZlibStream</c> to decompress data while reading, you can create
///   a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
///   readable compressed data stream.  Then call <c>Read()</c> on that
///   <c>ZlibStream</c>, and the data will be decompressed as it is read.
/// </para>
///
/// <para>
///   A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
///   not both.
/// </para>
///
/// </remarks>
///
/// <param name="buffer">
/// The buffer into which the read data should be placed.</param>
///
/// <param name="offset">
/// the offset within that data array to put the first byte read.</param>
///
/// <param name="count">the number of bytes to read.</param>
///
/// <returns>the number of bytes read</returns>
/// <summary>
/// Calling this method always throws a <see cref="NotSupportedException"/>.
/// </summary>
/// <param name="offset">
///   The offset to seek to....
///   IF THIS METHOD ACTUALLY DID ANYTHING.
/// </param>
/// <param name="origin">
///   The reference specifying how to apply the offset....  IF
///   THIS METHOD ACTUALLY DID ANYTHING.
/// </param>
///
/// <returns>nothing. This method always throws.</returns>
/// <summary>
/// Calling this method always throws a <see cref="NotSupportedException"/>.
/// </summary>
/// <param name="value">
///   The new value for the stream length....  IF
///   THIS METHOD ACTUALLY DID ANYTHING.
/// </param>
/// <summary>
/// Write data to the stream.
/// </summary>
///
/// <remarks>
///
/// <para>
///   If you wish to use the <c>ZlibStream</c> to compress data while writing,
///   you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
///   and a writable output stream.  Then call <c>Write()</c> on that
///   <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
///   the output stream will be the compressed form of the data written.  If you
///   wish to use the <c>ZlibStream</c> to decompress data while writing, you
///   can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
///   writable output stream.  Then call <c>Write()</c> on that stream,
///   providing previously compressed data. The data sent to the output stream
///   will be the decompressed form of the data written.
/// </para>
///
/// <para>
///   A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
/// </para>
/// </remarks>
/// <param name="buffer">The buffer holding data to write to the stream.</param>
/// <param name="offset">the offset within that data array to find the first byte to write.</param>
/// <param name="count">the number of bytes to write.</param>
/// <summary>
///   Compress a string into a byte array using ZLIB.
/// </summary>
///
/// <remarks>
///   Uncompress it with <see cref="ZlibStream.UncompressString(byte[])"/>.
/// </remarks>
///
/// <seealso cref="ZlibStream.UncompressString(byte[])"/>
/// <seealso cref="ZlibStream.CompressBuffer(byte[])"/>
/// <seealso cref="GZipStream.CompressString(string)"/>
///
/// <param name="s">
///   A string to compress.  The string will first be encoded
///   using UTF8, then compressed.
/// </param>
///
/// <returns>The string in compressed form</returns>
/// <summary>
///   Compress a byte array into a new byte array using ZLIB.
/// </summary>
///
/// <remarks>
///   Uncompress it with <see cref="ZlibStream.UncompressBuffer(byte[])"/>.
/// </remarks>
///
/// <seealso cref="ZlibStream.CompressString(string)"/>
/// <seealso cref="ZlibStream.UncompressBuffer(byte[])"/>
///
/// <param name="b">
/// A buffer to compress.
/// </param>
///
/// <returns>The data in compressed form</returns>
/// <summary>
///   Uncompress a ZLIB-compressed byte array into a single string.
/// </summary>
///
/// <seealso cref="ZlibStream.CompressString(String)"/>
/// <seealso cref="ZlibStream.UncompressBuffer(byte[])"/>
///
/// <param name="compressed">
///   A buffer containing ZLIB-compressed data.
/// </param>
///
/// <returns>The uncompressed string</returns>
/// <summary>
///   Uncompress a ZLIB-compressed byte array into a byte array.
/// </summary>
///
/// <seealso cref="ZlibStream.CompressBuffer(byte[])"/>
/// <seealso cref="ZlibStream.UncompressString(byte[])"/>
///
/// <param name="compressed">
///   A buffer containing ZLIB-compressed data.
/// </param>
///
/// <returns>The data in uncompressed form</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\Lz4Stream\Lz4DecoderStream.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//#define LOCAL_SHADOW
//because we might not be able to match back across invocations,
//we have to keep the last window's worth of bytes around for reuse
//we use a circular buffer for this - every time we write into this
//buffer, we also write the same into our output buffer
//we keep track of which phase we're in so that we can jump right back
//into the correct part of decoding
//state within interruptable phases and across phase boundaries is
//kept here - again, so that we can punt out and restart freely
//the stringy gotos are obnoxious, but their purpose is to
//make it *blindingly* obvious how the state machine transitions
//back and forth as it reads - remember, we can yield out of
//this routine in several places, and we must be able to re-enter
//and pick up where we left off!
//offset is fairly far back, we need to pull from the buffer
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\LzxStream\LzxDecoderStream.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: Rewrite using block decompression like Lz4DecoderStream
// Decompress into MemoryStream
//thanks to ShinAli (https://bitbucket.org/alisci01/xnbdecompressor)
// default window size for XNB encoded files is 64Kb (need 16 bits to represent it)
// the compressed stream is seperated into blocks that will decompress
// into 32Kb or some other size if specified.
// normal, 32Kb output blocks will have a short indicating the size
// of the block before the block starts
// blocks that have a defined output will be preceded by a byte of value
// 0xFF (255), then a short indicating the output size and another
// for the block size
// all shorts for these cases are encoded in big endian order
// frame size is 32Kb by default
// does this block define a frame size?
// either says there is nothing to decode
// reset the position of the input just incase the bit buffer
// read in some unused bytes
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework\Utilities\ZLibStream\ZlibStream.cs
// ZlibStream.cs
// ------------------------------------------------------------------
//
// Copyright (c) 2009 Dino Chiesa and Microsoft Corporation.
// All rights reserved.
//
// This code module is part of DotNetZip, a zipfile class library.
//
// ------------------------------------------------------------------
//
// This code is licensed under the Microsoft Public License.
// See the file License.txt for the license details.
// More info on: http://dotnetzip.codeplex.com
//
// ------------------------------------------------------------------
//
// last saved (in emacs):
// Time-stamp: <2011-July-31 14:53:33>
//
// ------------------------------------------------------------------
//
// This module defines the ZlibStream class, which is similar in idea to
// the System.IO.Compression.DeflateStream and
// System.IO.Compression.GZipStream classes in the .NET BCL.
//
// ------------------------------------------------------------------
// The following notice applies to jzlib:
// -----------------------------------------------------------------------------
// Copyright (c) 2000,2001,2002,2003 ymnk, JCraft,Inc. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in
// the documentation and/or other materials provided with the distribution.
// 3. The names of the authors may not be used to endorse or promote products
// derived from this software without specific prior written permission.
// THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
// INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -----------------------------------------------------------------------------
// jzlib is based on zlib-1.1.3.
// The following notice applies to zlib:
// -----------------------------------------------------------------------------
// Copyright (C) 1995-2004 Jean-loup Gailly and Mark Adler
// The ZLIB software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
//    claim that you wrote the original software. If you use this software
//    in a product, an acknowledgment in the product documentation would be
//    appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//    misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// Jean-loup Gailly jloup@gzip.org
// Mark Adler madler@alumni.caltech.edu
//------------------------------------------------------------------------------
/// <summary>
/// Represents a Zlib stream for compression or decompression.
/// </summary>
/// <remarks>
///
/// <para>
/// The ZlibStream is a <see
/// href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
/// cref="System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
/// stream.
/// </para>
///
/// <para> Using this stream, applications can compress or decompress data via
/// stream <c>Read()</c> and <c>Write()</c> operations.  Either compression or
/// decompression can occur through either reading or writing. The compression
/// format used is ZLIB, which is documented in <see
/// href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
/// Data Format Specification version 3.3". This implementation of ZLIB always uses
/// DEFLATE as the compression method.  (see <see
/// href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
/// Compressed Data Format Specification version 1.3.") </para>
///
/// <para>
/// The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
/// This implementation always uses the DEFLATE compression method, a preset dictionary,
/// and 15 window bits by default.
/// </para>
///
/// <para>
/// This class is similar to DeflateStream, except that it adds the
/// RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
/// the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
/// <see cref="GZipStream"/>.
/// </para>
/// </remarks>
/// <seealso cref="GZipStream" />
/// <summary>
/// Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
/// </summary>
/// <remarks>
///
/// <para>
///   When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
///   will use the default compression level. The "captive" stream will be
///   closed when the <c>ZlibStream</c> is closed.
/// </para>
///
/// </remarks>
///
/// <example>
/// This example uses a <c>ZlibStream</c> to compress a file, and writes the
/// compressed data to another file.
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
///     {
///         using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
/// }
/// </code>
/// <code lang="VB">
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
///     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
///         Dim buffer As Byte() = New Byte(4096) {}
///         Dim n As Integer = -1
///         Do While (n &lt;&gt; 0)
///             If (n &gt; 0) Then
///                 compressor.Write(buffer, 0, n)
///             End If
///             n = input.Read(buffer, 0, buffer.Length)
///         Loop
///     End Using
///     End Using
/// End Using
/// </code>
/// </example>
///
/// <param name="stream">The stream which will be read or written.</param>
/// <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
/// <summary>
///   Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
///   the specified <c>CompressionLevel</c>.
/// </summary>
///
/// <remarks>
///
/// <para>
///   When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
///   The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
/// </para>
///
/// </remarks>
///
/// <example>
///   This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
///   compressed data to another file.
///
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
///     {
///         using (Stream compressor = new ZlibStream(raw,
///                                                   CompressionMode.Compress,
///                                                   CompressionLevel.BestCompression))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
/// }
/// </code>
///
/// <code lang="VB">
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
///         Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
///             Dim buffer As Byte() = New Byte(4096) {}
///             Dim n As Integer = -1
///             Do While (n &lt;&gt; 0)
///                 If (n &gt; 0) Then
///                     compressor.Write(buffer, 0, n)
///                 End If
///                 n = input.Read(buffer, 0, buffer.Length)
///             Loop
///         End Using
///     End Using
/// End Using
/// </code>
/// </example>
///
/// <param name="stream">The stream to be read or written while deflating or inflating.</param>
/// <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
/// <param name="level">A tuning knob to trade speed for effectiveness.</param>
/// <summary>
///   Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
///   explicitly specify whether the captive stream should be left open after
///   Deflation or Inflation.
/// </summary>
///
/// <remarks>
///
/// <para>
///   When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
///   the default compression level.
/// </para>
///
/// <para>
///   This constructor allows the application to request that the captive stream
///   remain open after the deflation or inflation occurs.  By default, after
///   <c>Close()</c> is called on the stream, the captive stream is also
///   closed. In some cases this is not desired, for example if the stream is a
///   <see cref="System.IO.MemoryStream"/> that will be re-read after
///   compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
///   open.
/// </para>
///
/// <para>
/// See the other overloads of this constructor for example code.
/// </para>
///
/// </remarks>
///
/// <param name="stream">The stream which will be read or written. This is called the
/// "captive" stream in other places in this documentation.</param>
/// <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
/// <param name="leaveOpen">true if the application would like the stream to remain
/// open after inflation/deflation.</param>
/// <summary>
///   Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
///   and the specified <c>CompressionLevel</c>, and explicitly specify
///   whether the stream should be left open after Deflation or Inflation.
/// </summary>
///
/// <remarks>
///
/// <para>
///   This constructor allows the application to request that the captive
///   stream remain open after the deflation or inflation occurs.  By
///   default, after <c>Close()</c> is called on the stream, the captive
///   stream is also closed. In some cases this is not desired, for example
///   if the stream is a <see cref="System.IO.MemoryStream"/> that will be
///   re-read after compression.  Specify true for the <paramref
///   name="leaveOpen"/> parameter to leave the stream open.
/// </para>
///
/// <para>
///   When mode is <c>CompressionMode.Decompress</c>, the level parameter is
///   ignored.
/// </para>
///
/// </remarks>
///
/// <example>
///
/// This example shows how to use a ZlibStream to compress the data from a file,
/// and store the result into another file. The filestream remains open to allow
/// additional data to be written to it.
///
/// <code>
/// using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
/// {
///     using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
///     {
///         using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
///     // can write additional data to the output stream here
/// }
/// </code>
/// <code lang="VB">
/// Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
///     Using input As Stream = File.OpenRead(fileToCompress)
///         Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
///             Dim buffer As Byte() = New Byte(4096) {}
///             Dim n As Integer = -1
///             Do While (n &lt;&gt; 0)
///                 If (n &gt; 0) Then
///                     compressor.Write(buffer, 0, n)
///                 End If
///                 n = input.Read(buffer, 0, buffer.Length)
///             Loop
///         End Using
///     End Using
///     ' can write additional data to the output stream here.
/// End Using
/// </code>
/// </example>
///
/// <param name="stream">The stream which will be read or written.</param>
///
/// <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
///
/// <param name="leaveOpen">
/// true if the application would like the stream to remain open after
/// inflation/deflation.
/// </param>
///
/// <param name="level">
/// A tuning knob to trade speed for effectiveness. This parameter is
/// effective only when mode is <c>CompressionMode.Compress</c>.
/// </param>
/// <summary>
/// This property sets the flush behavior on the stream.
/// Sorry, though, not sure exactly how to describe all the various settings.
/// </summary>
/// <summary>
///   The size of the working buffer for the compression codec.
/// </summary>
///
/// <remarks>
/// <para>
///   The working buffer is used for all stream operations.  The default size is
///   1024 bytes. The minimum size is 128 bytes. You may get better performance
///   with a larger buffer.  Then again, you might not.  You would have to test
///   it.
/// </para>
///
/// <para>
///   Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
///   stream. If you try to set it afterwards, it will throw.
/// </para>
/// </remarks>
/// <summary> Returns the total number of bytes input so far.</summary>
/// <summary> Returns the total number of bytes output so far.</summary>
/// <summary>
///   Dispose the stream.
/// </summary>
/// <remarks>
///   <para>
///     This may or may not result in a <c>Close()</c> call on the captive
///     stream.  See the constructors that have a <c>leaveOpen</c> parameter
///     for more information.
///   </para>
///   <para>
///     This method may be invoked in two distinct scenarios.  If disposing
///     == true, the method has been called directly or indirectly by a
///     user's code, for example via the public Dispose() method. In this
///     case, both managed and unmanaged resources can be referenced and
///     disposed.  If disposing == false, the method has been called by the
///     runtime from inside the object finalizer and this method should not
///     reference other objects; in that case only unmanaged resources must
///     be referenced or disposed.
///   </para>
/// </remarks>
/// <param name="disposing">
///   indicates whether the Dispose method was invoked by user code.
/// </param>
/// <summary>
/// Indicates whether the stream can be read.
/// </summary>
/// <remarks>
/// The return value depends on whether the captive stream supports reading.
/// </remarks>
/// <summary>
/// Indicates whether the stream supports Seek operations.
/// </summary>
/// <remarks>
/// Always returns false.
/// </remarks>
/// <summary>
/// Indicates whether the stream can be written.
/// </summary>
/// <remarks>
/// The return value depends on whether the captive stream supports writing.
/// </remarks>
/// <summary>
/// Flush the stream.
/// </summary>
/// <summary>
/// Reading this property always throws a <see cref="NotSupportedException"/>.
/// </summary>
/// <summary>
///   The position of the stream pointer.
/// </summary>
///
/// <remarks>
///   Setting this property always throws a <see
///   cref="NotSupportedException"/>. Reading will return the total bytes
///   written out, if used in writing, or the total bytes read in, if used in
///   reading.  The count may refer to compressed bytes or uncompressed bytes,
///   depending on how you've used the stream.
/// </remarks>
/// <summary>
/// Read data from the stream.
/// </summary>
///
/// <remarks>
///
/// <para>
///   If you wish to use the <c>ZlibStream</c> to compress data while reading,
///   you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
///   providing an uncompressed data stream.  Then call <c>Read()</c> on that
///   <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
///   use the <c>ZlibStream</c> to decompress data while reading, you can create
///   a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
///   readable compressed data stream.  Then call <c>Read()</c> on that
///   <c>ZlibStream</c>, and the data will be decompressed as it is read.
/// </para>
///
/// <para>
///   A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
///   not both.
/// </para>
///
/// </remarks>
///
/// <param name="buffer">
/// The buffer into which the read data should be placed.</param>
///
/// <param name="offset">
/// the offset within that data array to put the first byte read.</param>
///
/// <param name="count">the number of bytes to read.</param>
///
/// <returns>the number of bytes read</returns>
/// <summary>
/// Calling this method always throws a <see cref="NotSupportedException"/>.
/// </summary>
/// <param name="offset">
///   The offset to seek to....
///   IF THIS METHOD ACTUALLY DID ANYTHING.
/// </param>
/// <param name="origin">
///   The reference specifying how to apply the offset....  IF
///   THIS METHOD ACTUALLY DID ANYTHING.
/// </param>
///
/// <returns>nothing. This method always throws.</returns>
/// <summary>
/// Calling this method always throws a <see cref="NotSupportedException"/>.
/// </summary>
/// <param name="value">
///   The new value for the stream length....  IF
///   THIS METHOD ACTUALLY DID ANYTHING.
/// </param>
/// <summary>
/// Write data to the stream.
/// </summary>
///
/// <remarks>
///
/// <para>
///   If you wish to use the <c>ZlibStream</c> to compress data while writing,
///   you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
///   and a writable output stream.  Then call <c>Write()</c> on that
///   <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
///   the output stream will be the compressed form of the data written.  If you
///   wish to use the <c>ZlibStream</c> to decompress data while writing, you
///   can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
///   writable output stream.  Then call <c>Write()</c> on that stream,
///   providing previously compressed data. The data sent to the output stream
///   will be the decompressed form of the data written.
/// </para>
///
/// <para>
///   A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
/// </para>
/// </remarks>
/// <param name="buffer">The buffer holding data to write to the stream.</param>
/// <param name="offset">the offset within that data array to find the first byte to write.</param>
/// <param name="count">the number of bytes to write.</param>
/// <summary>
///   Compress a string into a byte array using ZLIB.
/// </summary>
///
/// <remarks>
///   Uncompress it with <see cref="ZlibStream.UncompressString(byte[])"/>.
/// </remarks>
///
/// <seealso cref="ZlibStream.UncompressString(byte[])"/>
/// <seealso cref="ZlibStream.CompressBuffer(byte[])"/>
/// <seealso cref="GZipStream.CompressString(string)"/>
///
/// <param name="s">
///   A string to compress.  The string will first be encoded
///   using UTF8, then compressed.
/// </param>
///
/// <returns>The string in compressed form</returns>
/// <summary>
///   Compress a byte array into a new byte array using ZLIB.
/// </summary>
///
/// <remarks>
///   Uncompress it with <see cref="ZlibStream.UncompressBuffer(byte[])"/>.
/// </remarks>
///
/// <seealso cref="ZlibStream.CompressString(string)"/>
/// <seealso cref="ZlibStream.UncompressBuffer(byte[])"/>
///
/// <param name="b">
/// A buffer to compress.
/// </param>
///
/// <returns>The data in compressed form</returns>
/// <summary>
///   Uncompress a ZLIB-compressed byte array into a single string.
/// </summary>
///
/// <seealso cref="ZlibStream.CompressString(String)"/>
/// <seealso cref="ZlibStream.UncompressBuffer(byte[])"/>
///
/// <param name="compressed">
///   A buffer containing ZLIB-compressed data.
/// </param>
///
/// <returns>The uncompressed string</returns>
/// <summary>
///   Uncompress a ZLIB-compressed byte array into a byte array.
/// </summary>
///
/// <seealso cref="ZlibStream.CompressBuffer(byte[])"/>
/// <seealso cref="ZlibStream.UncompressString(byte[])"/>
///
/// <param name="compressed">
///   A buffer containing ZLIB-compressed data.
/// </param>
///
/// <returns>The data in uncompressed form</returns>
/// <summary>
/// A bunch of constants used in the Zlib interface.
/// </summary>
/// <summary>
/// The maximum number of window bits for the Deflate algorithm.
/// </summary>
// 32K LZ77 window
/// <summary>
/// The default number of window bits for the Deflate algorithm.
/// </summary>
/// <summary>
/// indicates everything is A-OK
/// </summary>
/// <summary>
/// Indicates that the last operation reached the end of the stream.
/// </summary>
/// <summary>
/// The operation ended in need of a dictionary. 
/// </summary>
/// <summary>
/// There was an error with the stream - not enough data, not open and readable, etc.
/// </summary>
/// <summary>
/// There was an error with the data - not enough data, bad data, etc.
/// </summary>
/// <summary>
/// There was an error with the working buffer.
/// </summary>
/// <summary>
/// The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
/// </summary>
/// <summary>
/// The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
/// </summary>
/// <summary>
/// Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
/// </summary>
///
/// <remarks>
/// This class compresses and decompresses data according to the Deflate algorithm
/// and optionally, the ZLIB format, as documented in <see
/// href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
/// href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
/// </remarks>
/// <summary>
/// The buffer from which data is taken.
/// </summary>
/// <summary>
/// An index into the InputBuffer array, indicating where to start reading. 
/// </summary>
/// <summary>
/// The number of bytes available in the InputBuffer, starting at NextIn. 
/// </summary>
/// <remarks>
/// Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
/// The class will update this number as calls to Inflate/Deflate are made.
/// </remarks>
/// <summary>
/// Total number of bytes read so far, through all calls to Inflate()/Deflate().
/// </summary>
/// <summary>
/// Buffer to store output data.
/// </summary>
/// <summary>
/// An index into the OutputBuffer array, indicating where to start writing. 
/// </summary>
/// <summary>
/// The number of bytes available in the OutputBuffer, starting at NextOut. 
/// </summary>
/// <remarks>
/// Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
/// The class will update this number as calls to Inflate/Deflate are made.
/// </remarks>
/// <summary>
/// Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
/// </summary>
/// <summary>
/// used for diagnostics, when something goes wrong!
/// </summary>
/// <summary>
/// The compression level to use in this codec.  Useful only in compression mode.
/// </summary>
/// <summary>
/// The number of Window Bits to use.  
/// </summary>
/// <remarks>
/// This gauges the size of the sliding window, and hence the 
/// compression effectiveness as well as memory consumption. It's best to just leave this 
/// setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
/// a 32k window.  
/// </remarks>
/// <summary>
/// The compression strategy to use.
/// </summary>
/// <remarks>
/// This is only effective in compression.  The theory offered by ZLIB is that different
/// strategies could potentially produce significant differences in compression behavior
/// for different data sets.  Unfortunately I don't have any good recommendations for how
/// to set it differently.  When I tested changing the strategy I got minimally different
/// compression performance. It's best to leave this property alone if you don't have a
/// good feel for it.  Or, you may want to produce a test harness that runs through the
/// different strategy options and evaluates them on different file types. If you do that,
/// let me know your results.
/// </remarks>
/// <summary>
/// The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
/// </summary>
/// <summary>
/// Create a ZlibCodec.
/// </summary>
/// <remarks>
/// If you use this default constructor, you will later have to explicitly call 
/// InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
/// or decompress. 
/// </remarks>
/// <summary>
/// Create a ZlibCodec that either compresses or decompresses.
/// </summary>
/// <param name="mode">
/// Indicates whether the codec should compress (deflate) or decompress (inflate).
/// </param>
/// <summary>
/// Initialize the inflation state. 
/// </summary>
/// <remarks>
/// It is not necessary to call this before using the ZlibCodec to inflate data; 
/// It is implicitly called when you call the constructor.
/// </remarks>
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// Initialize the inflation state with an explicit flag to
/// govern the handling of RFC1950 header bytes.
/// </summary>
///
/// <remarks>
/// By default, the ZLIB header defined in <see
/// href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
/// you want to read a zlib stream you should specify true for
/// expectRfc1950Header.  If you have a deflate stream, you will want to specify
/// false. It is only necessary to invoke this initializer explicitly if you
/// want to specify false.
/// </remarks>
///
/// <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
/// pair when reading the stream of data to be inflated.</param>
///
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// Initialize the ZlibCodec for inflation, with the specified number of window bits. 
/// </summary>
/// <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
/// then you shouldn't be calling this initializer.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Initialize the inflation state with an explicit flag to govern the handling of
/// RFC1950 header bytes. 
/// </summary>
///
/// <remarks>
/// If you want to read a zlib stream you should specify true for
/// expectRfc1950Header. In this case, the library will expect to find a ZLIB
/// header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
/// 1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
/// GZIP stream, which does not have such a header, you will want to specify
/// false.
/// </remarks>
///
/// <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
/// the stream of data to be inflated.</param>
/// <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
/// then you shouldn't be calling this initializer.</param>
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
/// </summary>
/// <remarks>
/// You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
/// AvailableBytesOut  before calling this method.
/// </remarks>
/// <example>
/// <code>
/// private void InflateBuffer()
/// {
///     int bufferSize = 1024;
///     byte[] buffer = new byte[bufferSize];
///     ZlibCodec decompressor = new ZlibCodec();
/// 
///     Console.WriteLine("\n============================================");
///     Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
///     MemoryStream ms = new MemoryStream(DecompressedBytes);
/// 
///     int rc = decompressor.InitializeInflate();
/// 
///     decompressor.InputBuffer = CompressedBytes;
///     decompressor.NextIn = 0;
///     decompressor.AvailableBytesIn = CompressedBytes.Length;
/// 
///     decompressor.OutputBuffer = buffer;
/// 
///     // pass 1: inflate 
///     do
///     {
///         decompressor.NextOut = 0;
///         decompressor.AvailableBytesOut = buffer.Length;
///         rc = decompressor.Inflate(FlushType.None);
/// 
///         if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
///             throw new Exception("inflating: " + decompressor.Message);
/// 
///         ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
///     }
///     while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
/// 
///     // pass 2: finish and flush
///     do
///     {
///         decompressor.NextOut = 0;
///         decompressor.AvailableBytesOut = buffer.Length;
///         rc = decompressor.Inflate(FlushType.Finish);
/// 
///         if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
///             throw new Exception("inflating: " + decompressor.Message);
/// 
///         if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
///             ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
///     }
///     while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
/// 
///     decompressor.EndInflate();
/// }
///
/// </code>
/// </example>
/// <param name="flush">The flush to use when inflating.</param>
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// Ends an inflation session. 
/// </summary>
/// <remarks>
/// Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
/// After calling this you cannot call Inflate() without a intervening call to one of the
/// InitializeInflate() overloads.
/// </remarks>
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// I don't know what this does!
/// </summary>
/// <returns>Z_OK if everything goes well.</returns>
/// <summary>
/// Initialize the ZlibCodec for deflation operation.
/// </summary>
/// <remarks>
/// The codec will use the MAX window bits and the default level of compression.
/// </remarks>
/// <example>
/// <code>
///  int bufferSize = 40000;
///  byte[] CompressedBytes = new byte[bufferSize];
///  byte[] DecompressedBytes = new byte[bufferSize];
///  
///  ZlibCodec compressor = new ZlibCodec();
///  
///  compressor.InitializeDeflate(CompressionLevel.Default);
///  
///  compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
///  compressor.NextIn = 0;
///  compressor.AvailableBytesIn = compressor.InputBuffer.Length;
///  
///  compressor.OutputBuffer = CompressedBytes;
///  compressor.NextOut = 0;
///  compressor.AvailableBytesOut = CompressedBytes.Length;
///  
///  while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
///  {
///    compressor.Deflate(FlushType.None);
///  }
///  
///  while (true)
///  {
///    int rc= compressor.Deflate(FlushType.Finish);
///    if (rc == ZlibConstants.Z_STREAM_END) break;
///  }
///  
///  compressor.EndDeflate();
///   
/// </code>
/// </example>
/// <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
/// <summary>
/// Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
/// </summary>
/// <remarks>
/// The codec will use the maximum window bits (15) and the specified
/// CompressionLevel.  It will emit a ZLIB stream as it compresses.
/// </remarks>
/// <param name="level">The compression level for the codec.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
/// and the explicit flag governing whether to emit an RFC1950 header byte pair.
/// </summary>
/// <remarks>
/// The codec will use the maximum window bits (15) and the specified CompressionLevel.
/// If you want to generate a zlib stream, you should specify true for
/// wantRfc1950Header. In this case, the library will emit a ZLIB
/// header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
/// 1950</see>, in the compressed stream.  
/// </remarks>
/// <param name="level">The compression level for the codec.</param>
/// <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
/// and the specified number of window bits. 
/// </summary>
/// <remarks>
/// The codec will use the specified number of window bits and the specified CompressionLevel.
/// </remarks>
/// <param name="level">The compression level for the codec.</param>
/// <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Initialize the ZlibCodec for deflation operation, using the specified
/// CompressionLevel, the specified number of window bits, and the explicit flag
/// governing whether to emit an RFC1950 header byte pair.
/// </summary>
///
/// <param name="level">The compression level for the codec.</param>
/// <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
/// <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Deflate one batch of data.
/// </summary>
/// <remarks>
/// You must have set InputBuffer and OutputBuffer before calling this method.
/// </remarks>
/// <example>
/// <code>
/// private void DeflateBuffer(CompressionLevel level)
/// {
///     int bufferSize = 1024;
///     byte[] buffer = new byte[bufferSize];
///     ZlibCodec compressor = new ZlibCodec();
/// 
///     Console.WriteLine("\n============================================");
///     Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
///     MemoryStream ms = new MemoryStream();
/// 
///     int rc = compressor.InitializeDeflate(level);
/// 
///     compressor.InputBuffer = UncompressedBytes;
///     compressor.NextIn = 0;
///     compressor.AvailableBytesIn = UncompressedBytes.Length;
/// 
///     compressor.OutputBuffer = buffer;
/// 
///     // pass 1: deflate 
///     do
///     {
///         compressor.NextOut = 0;
///         compressor.AvailableBytesOut = buffer.Length;
///         rc = compressor.Deflate(FlushType.None);
/// 
///         if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
///             throw new Exception("deflating: " + compressor.Message);
/// 
///         ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
///     }
///     while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
/// 
///     // pass 2: finish and flush
///     do
///     {
///         compressor.NextOut = 0;
///         compressor.AvailableBytesOut = buffer.Length;
///         rc = compressor.Deflate(FlushType.Finish);
/// 
///         if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
///             throw new Exception("deflating: " + compressor.Message);
/// 
///         if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
///             ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
///     }
///     while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
/// 
///     compressor.EndDeflate();
/// 
///     ms.Seek(0, SeekOrigin.Begin);
///     CompressedBytes = new byte[compressor.TotalBytesOut];
///     ms.Read(CompressedBytes, 0, CompressedBytes.Length);
/// }
/// </code>
/// </example>
/// <param name="flush">whether to flush all data as you deflate. Generally you will want to 
/// use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
/// flush everything. 
/// </param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// End a deflation session.
/// </summary>
/// <remarks>
/// Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
/// </remarks>
/// <returns>Z_OK if all goes well.</returns>
// TODO: dinoch Tue, 03 Nov 2009  15:39 (test this)
//int ret = dstate.End();
//ret;
/// <summary>
/// Reset a codec for another deflation session.
/// </summary>
/// <remarks>
/// Call this to reset the deflation state.  For example if a thread is deflating
/// non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
/// block and before the next Deflate(None) of the second block.
/// </remarks>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Set the CompressionStrategy and CompressionLevel for a deflation session.
/// </summary>
/// <param name="level">the level of compression to use.</param>
/// <param name="strategy">the strategy to use for compression.</param>
/// <returns>Z_OK if all goes well.</returns>
/// <summary>
/// Set the dictionary to be used for either Inflation or Deflation.
/// </summary>
/// <param name="dictionary">The dictionary bytes to use.</param>
/// <returns>Z_OK if all goes well.</returns>
// Flush as much pending output as possible. All deflate() output goes
// through this function so some applications may wish to modify it
// to avoid allocating a large strm->next_out buffer and copying into it.
// (See also read_buf()).
// Read a new buffer from the current input stream, update the adler32
// and total number of bytes read.  All deflate() input goes through
// this function so some applications may wish to modify it to avoid
// allocating a large strm->next_in buffer and copying from it.
// (See also flush_pending()).
// deferred init... new ZlibCodec();
// workitem 7159
//this._workingBuffer = new byte[WORKING_BUFFER_SIZE_DEFAULT];
// workitem 7159
// workitem 7159
// calculate the CRC on the unccompressed data  (before writing)
// first reference of z property will initialize the private var _z
//if (_workingBuffer.Length - _z.AvailableBytesOut > 0)
// If GZIP and de-compress, we're done when 8 bytes remain.
// If GZIP and de-compress, we're done when 8 bytes remain.
// workitem 7159
// Emit the GZIP trailer: CRC32 and  size mod 2^32
// workitem 7159
// workitem 8501: handle edge case (decompress empty stream)
// Read and potentially verify the GZIP trailer:
// CRC32 and size mod 2^32
// workitems 8679 & 12554
// Make sure we have read to the end of the stream
//_outStream.Seek(offset, origin);
// calculate CRC after reading
// workitem 7740
// read the header on the first read
// workitem 8501: handle edge case (decompress empty stream)
// read and discard extra field
// 2-byte length field
// CRC16, ignore
// According to MS documentation, any implementation of the IO.Stream.Read function must:
// (a) throw an exception if offset & count reference an invalid part of the buffer,
//     or if count < 0, or if buffer is null
// (b) return 0 only upon EOF, or if count = 0
// (c) if not EOF, then return at least 1 byte, up to <count> bytes
// for the first read, set up some controls.
// (The first reference to _z goes through the private accessor which
// may initialize it.)
// workitem 8501: handle edge case (decompress empty stream)
// workitem 8557
// set up the output of the deflate/inflate codec:
// This is necessary in case _workingBuffer has been resized. (new byte[])
// (The first reference to _workingBuffer goes through the private accessor which
// may initialize it.)
// need data in _workingBuffer in order to deflate/inflate.  Here, we check if we have any.
// No data available, so try to Read data from the captive stream.
// we have data in InputBuffer; now compress or decompress as appropriate
// nothing more to read
//while (_z.AvailableBytesOut == count && rc == ZlibConstants.Z_OK);
// workitem 8557
// is there more room in output?
// deferred
// are we completely done reading?
// and in compression?
// no more input data available; therefore we flush to
// try to complete the read
// calculate CRC after reading
// workitem 8460
// workitem 8460
// reset to allow read from start
// workitem 8460
/// <summary>
/// Describes how to flush the current deflate operation.
/// </summary>
/// <remarks>
/// The different FlushType values are useful when using a Deflate in a streaming application.
/// </remarks>
/// <summary>No flush at all.</summary>
/// <summary>Closes the current block, but doesn't flush it to
/// the output. Used internally only in hypothetical
/// scenarios.  This was supposed to be removed by Zlib, but it is
/// still in use in some edge cases.
/// </summary>
/// <summary>
/// Use this during compression to specify that all pending output should be
/// flushed to the output buffer and the output should be aligned on a byte
/// boundary.  You might use this in a streaming communication scenario, so that
/// the decompressor can get all input data available so far.  When using this
/// with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
/// enough output space has been provided before the call.  Flushing will
/// degrade compression and so it should be used only when necessary.
/// </summary>
/// <summary>
/// Use this during compression to specify that all output should be flushed, as
/// with <c>FlushType.Sync</c>, but also, the compression state should be reset
/// so that decompression can restart from this point if previous compressed
/// data has been damaged or if random access is desired.  Using
/// <c>FlushType.Full</c> too often can significantly degrade the compression.
/// </summary>
/// <summary>Signals the end of the compression/decompression stream.</summary>
/// <summary>
/// The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
/// </summary>
/// <summary>
/// None means that the data will be simply stored, with no change at all.
/// If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
/// cannot be opened with the default zip reader. Use a different CompressionLevel.
/// </summary>
/// <summary>
/// Same as None.
/// </summary>
/// <summary>
/// The fastest but least effective compression.
/// </summary>
/// <summary>
/// A synonym for BestSpeed.
/// </summary>
/// <summary>
/// A little slower, but better, than level 1.
/// </summary>
/// <summary>
/// A little slower, but better, than level 2.
/// </summary>
/// <summary>
/// A little slower, but better, than level 3.
/// </summary>
/// <summary>
/// A little slower than level 4, but with better compression.
/// </summary>
/// <summary>
/// The default compression level, with a good balance of speed and compression efficiency.
/// </summary>
/// <summary>
/// A synonym for Default.
/// </summary>
/// <summary>
/// Pretty good compression!
/// </summary>
/// <summary>
///  Better compression than Level7!
/// </summary>
/// <summary>
/// The "best" compression, where best means greatest reduction in size of the input data stream.
/// This is also the slowest compression.
/// </summary>
/// <summary>
/// A synonym for BestCompression.
/// </summary>
/// <summary>
/// Describes options for how the compression algorithm is executed.  Different strategies
/// work better on different sorts of data.  The strategy parameter can affect the compression
/// ratio and the speed of compression but not the correctness of the compresssion.
/// </summary>
/// <summary>
/// The default strategy is probably the best for normal data.
/// </summary>
/// <summary>
/// The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
/// filter or predictor.  By this definition, filtered data consists mostly of small
/// values with a somewhat random distribution.  In this case, the compression algorithm
/// is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
/// coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
/// </summary>
/// <summary>
/// Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
/// string matching.
/// </summary>
/// <summary>
/// An enum to specify the direction of transcoding - whether to compress or decompress.
/// </summary>
/// <summary>
/// Used to specify that the stream should compress the data.
/// </summary>
/// <summary>
/// Used to specify that the stream should decompress the data.
/// </summary>
/// <summary>
/// A general purpose exception class for exceptions in the Zlib library.
/// </summary>
/// <summary>
/// The ZlibException class captures exception information generated
/// by the Zlib library.
/// </summary>
/// <summary>
/// This ctor collects a message attached to the exception.
/// </summary>
/// <param name="s">the message for the exception.</param>
/// <summary>
/// Performs an unsigned bitwise right shift with the specified number
/// </summary>
/// <param name="number">Number to operate on</param>
/// <param name="bits">Ammount of bits to shift</param>
/// <returns>The resulting number from the shift operation</returns>
/// <summary>
/// Performs an unsigned bitwise right shift with the specified number
/// </summary>
/// <param name="number">Number to operate on</param>
/// <param name="bits">Ammount of bits to shift</param>
/// <returns>The resulting number from the shift operation</returns>
/// <summary>
///   Reads a number of characters from the current source TextReader and writes
///   the data to the target array at the specified index.
/// </summary>
///
/// <param name="sourceTextReader">The source TextReader to read from</param>
/// <param name="target">Contains the array of characteres read from the source TextReader.</param>
/// <param name="start">The starting index of the target array.</param>
/// <param name="count">The maximum number of characters to read from the source TextReader.</param>
///
/// <returns>
///   The number of characters read. The number will be less than or equal to
///   count depending on the data available in the source TextReader. Returns -1
///   if the end of the stream is reached.
/// </returns>
// Returns 0 bytes if not enough space in target
// Returns -1 if EOF
// Bit length codes must not exceed MAX_BL_BITS bits
// repeat previous bit length 3-6 times (2 bits of repeat count)
// repeat a zero length 3-10 times  (3 bits of repeat count)
// repeat a zero length 11-138 times  (7 bits of repeat count)
// static tree or null
// extra bits for each code or null
// base index for extra_bits
// max number of elements in the tree
// max bit length for the codes
/// <summary>
/// Computes an Adler-32 checksum.
/// </summary>
/// <remarks>
/// The Adler checksum is similar to a CRC checksum, but faster to compute, though less
/// reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
/// is a required part of the "ZLIB" standard.  Applications will almost never need to
/// use this class directly.
/// </remarks>
///
/// <exclude/>
// largest prime smaller than 65536
// NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1
/// <summary>
///   Calculates the Adler32 checksum.
/// </summary>
/// <remarks>
///   <para>
///     This is used within ZLIB.  You probably don't need to use this directly.
///   </para>
/// </remarks>
/// <example>
///    To compute an Adler32 checksum on a byte array:
///  <code>
///    var adler = Adler.Adler32(0, null, 0, 0);
///    adler = Adler.Adler32(adler, buffer, index, length);
///  </code>
/// </example>
//s1 += (buf[index++] & 0xff); s2 += s1;
// extra bits for each length code
// extra bits for each distance code
// extra bits for each bit length code
// The lengths of the bit length codes are sent in order of decreasing
// probability, to avoid transmitting the lengths for unused bit
// length codes.
// see definition of array dist_code below
//internal const int DIST_CODE_LEN = 512;
/// <summary>
/// Map from a distance to a distance code.
/// </summary>
/// <remarks> 
/// No side effects. _dist_code[256] and _dist_code[257] are never used.
/// </remarks>
// the dynamic tree
// largest code with non zero frequency
// the corresponding static tree
// Compute the optimal bit lengths for a tree and update the total bit length
// for the current block.
// IN assertion: the fields freq and dad are set, heap[heap_max] and
//    above are the tree nodes sorted by increasing frequency.
// OUT assertions: the field len is set to the optimal bit length, the
//     array bl_count contains the frequencies for each bit length.
//     The length opt_len is updated; static_len is also updated if stree is
//     not null.
// heap index
// iterate over the tree elements
// bit length
// extra bits
// frequency
// number of elements with bit length too large
// In a first pass, compute the optimal bit lengths (which may
// overflow in the case of the bit length tree).
// root of the heap
// We overwrite tree[n*2+1] which is no longer needed
// not a leaf node
// This happens for example on obj2 and pic of the Calgary corpus
// Find the first bit length which could increase:
// move one leaf down the tree
// move one overflow item as its brother
// The brother of the overflow item also moves one step up,
// but this does not affect bl_count[max_length]
// Construct one Huffman tree and assigns the code bit strings and lengths.
// Update the total bit length for the current block.
// IN assertion: the field freq is set for all tree elements.
// OUT assertions: the fields len and code are set to the optimal bit length
//     and corresponding code. The length opt_len is updated; static_len is
//     also updated if stree is not null. The field max_code is set.
// iterate over heap elements
// largest code with non zero frequency
// new node being created
// Construct the initial heap, with least frequent element in
// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
// heap[0] is not used.
// The pkzip format requires that at least one distance code exists,
// and that at least one bit should be sent even if there is only one
// possible code. So to avoid special checks later on we force at least
// two codes of non zero frequency.
// node is 0 or 1 so it does not have extra bits
// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
// establish sub-heaps of increasing lengths:
// Construct the Huffman tree by repeatedly combining the least two
// frequent nodes.
// next internal node of the tree
// n = node of least frequency
// m = node of next least frequency
// keep the nodes sorted by frequency
// Create a new node father of n and m
// and insert the new node in the heap
// At this point, the fields freq and dad are set. We can now
// generate the bit lengths.
// The field len is now set, we can generate the bit codes
// Generate the codes for a given tree and bit counts (which need not be
// optimal).
// IN assertion: the array bl_count contains the bit length statistics for
// the given tree and the field len is set for all tree elements.
// OUT assertion: the field code is set for all tree elements of non
//     zero code length.
// next code value for each bit length
// running code value
// bit index
// code index
// The distribution counts are first used to generate the code values
// without bit reversal.
// Check that the bit counts in bl_count are consistent. The last code
// must be all ones.
//Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
//        "inconsistent bit counts");
//Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
// Now reverse the bits
// Reverse the first len bits of a code, using straightforward code (a faster
// method would use a table)
// IN assertion: 1 <= len <= 15
//SharedUtils.URShift(code, 1);
//UPGRADE_NOTE: Final was removed from the declaration of 'fixed_tl'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
//UPGRADE_NOTE: Final was removed from the declaration of 'fixed_td'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
// Tables for deflate from PKZIP's appnote.txt.
//UPGRADE_NOTE: Final was removed from the declaration of 'cplens'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
// see note #13 above about 258
//UPGRADE_NOTE: Final was removed from the declaration of 'cplext'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
//UPGRADE_NOTE: Final was removed from the declaration of 'cpdist'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
//UPGRADE_NOTE: Final was removed from the declaration of 'cpdext'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
// If BMAX needs to be larger than 16, then h and x[] should be uLong.
// maximum bit length of any code
// hufts used in space
// work area for huft_build 
// bit length count table
// table entry for structure assignment
// table stack
// bit offsets, then code stack
// Given a list of code lengths and a maximum table size, make a set of
// tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR
// if the given code set is incomplete (the tables are still built in this
// case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of
// lengths), or Z_MEM_ERROR if not enough memory.
// counter for codes of length k
// i repeats in table every f entries
// maximum code length
// table level
// counter, current code
// counter
// number of bits in current code
// bits per table (returned in m)
// (1 << w) - 1, to avoid cc -O bug on HP
// pointer into c[], b[], or v[]
// points to current table
// bits before this table == (l * h)
// pointer into x
// number of dummy codes added
// number of entries in current table
// Generate counts for each bit length
// assume all entries <= BMAX
// null input--all zero length codes
// Find minimum and maximum length, bound *m by those
// minimum code length
// maximum code length
// Adjust last length count to fill out codes, if needed
// Generate starting offsets into the value table for each length
// note that i == g from above
// Make a table of values in order of bit lengths
// set n to length of v
// Generate the Huffman codes and for each, make the table entries
// first Huffman code is zero
// grab values in bit order
// no tables yet--level -1
// bits decoded == (l * h)
// just to keep compilers happy
// ditto
// ditto
// go through the bit lengths (k already is bits in shortest code)
// here i is the Huffman code of length k bits for value *p
// make tables up to required level
// previous table always l bits
// compute minimum size table less than or equal to l bits
// table size upper limit
// try a k-w bit table
// too few codes for k-w bit table
// deduct codes from patterns left
// try smaller tables up to z bits
// enough codes to use up j bits
// else deduct codes from patterns
// table entries for j-bit table
// allocate new table
// (note: doesn't matter for fixed)
// overflow of MANY
// DEBUG
// connect to last table, if there is one
// save pattern for backing up
// bits in this table
// bits to dump before this table
// offset to this table
// connect to last table
// first table is returned result
// set up table entry in r
// out of values--invalid code
// 256 is end-of-block
// simple code is just the value
// non-simple--look up in lists
// fill code-like entries with r
// backwards increment the k-bit code i
// backup over finished tables
// needed on HP, cc -O bug
// don't need to update q
// Return Z_BUF_ERROR if we were given an incomplete table
// build literal/length tree
// build distance tree
//  for(int i=0; i<BMAX; i++){u[i]=0;}
//Array.Copy(c, 0, u, 0, BMAX);
//  for(int i=0; i<BMAX+1; i++){x[i]=0;}
//Array.Copy(c, 0, x, 0, BMAX + 1);
// Table for deflate from PKZIP's appnote.txt.
// get type bits (3, including end bit)
// get lengths for stored
// processing stored block
// get table lengths
// get bit lengths tree for a dynamic block
// get length, distance trees for a dynamic block
// processing fixed or dynamic block
// output remaining window bytes
// finished last block, done
// ot a data error--stuck here
// current inflate_block mode
// if STORED, bytes left to copy
// table lengths (14 bits)
// index into blens (or border)
// bit lengths of codes
// bit length tree depth
// bit length decoding tree
// if CODES, current state
// true if this block is the last block
// pointer back to this zlib stream
// mode independent information
// bits in bit buffer
// bit buffer
// single malloc for tree space
// sliding window
// one byte after sliding window
// window read pointer
// window write pointer
// check function
// check on output
// temporary storage
// bit buffer
// bits in bit buffer
// input data pointer
// bytes available there
// output window write pointer
// bytes to end of window or read pointer
// copy input/output information to locals (UPDATE macro restores)
// process input based on current state
// stored
// go to byte boundary
// get length of stored block
// fixed
// dynamic
// illegal
// dump bits
// for (int i = 0; i < t; i++)
// {
//     blens[i] = 0;
// }
// c == 16..18
// must be <= 9 for lookahead assumptions
// must be <= 9 for lookahead assumptions
// Returns true if inflate is currently at the end of a block generated
// by Z_SYNC_FLUSH or Z_FULL_FLUSH.
// copy as much as possible from the sliding window to the output area
// compute number of bytes to copy as far as end of window
// compute bytes to copy
// workitem 8870
// update counters
// update check information
// copy as far as end of window
// see if more to copy at beginning of window
// wrap pointers
// done
// And'ing with mask[n] masks the lower n bits
// waiting for "i:"=input,
//             "o:"=output,
//             "x:"=nothing
// x: set up for LEN
// i: get length/literal/eob next
// i: getting length extra (have base)
// i: get distance next
// i: getting distance extra
// o: copying bytes in window, waiting for space
// o: got literal, waiting for output space
// o: got eob, possibly still output waiting
// x: got eob and all data flushed
// x: got error
// current inflate_codes mode
// mode dependent information
// pointer into tree
// bits needed
// if EXT or COPY, where and how much
// bits to get for extra
// distance back to copy from
// ltree bits decoded per branch
// dtree bits decoder per branch
// literal/length/eob tree
// literal/length/eob tree
// distance tree
// distance tree
// temporary storage
// temporary pointer
// extra bits or operation
// bit buffer
// bits in bit buffer
// input data pointer
// bytes available there
// output window write pointer
// bytes to end of window or read pointer
// pointer to copy strings from
// copy input/output information to locals (UPDATE macro restores)
// process input and output based on current state
// waiting for "i:"=input, "o:"=output, "x:"=nothing
// x: set up for LEN
// i: get length/literal/eob next
// literal
// length
// next table
// end of block
// invalid code
// i: getting length extra (have base)
// i: get distance next
// distance
// next table
// invalid code
// i: getting distance extra
// o: copying bytes in window, waiting for space
// modulo window size-"while" instead
// of "if" handles invalid distances
// o: got literal, waiting for output space
// o: got eob, possibly more output
// return unused byte, if any
// can always return one
// x: got error
// Called with number of bytes left to write in window at least 258
// (the maximum string length) and number of input bytes available
// at least ten.  The ten bytes are six bytes for the longest length/
// distance pair plus four bytes for overloading the bit buffer.
// temporary pointer
// temporary pointer
// temporary pointer
// extra bits or operation
// bit buffer
// bits in bit buffer
// input data pointer
// bytes available there
// output window write pointer
// bytes to end of window or read pointer
// mask for literal/length tree
// mask for distance tree
// bytes to copy
// distance back to copy from
// copy source pointer
// (tp_index+t)*3
// load input, output, bit values
// initialize masks
// do until not enough input or output space for fast loop
// assume called with m >= 258 && n >= 10
// get literal/length code
// max bits for literal/length code
// decode distance base of block to copy
// max bits for distance code
// get extra bits to add to distance base
// get extra bits (up to 13)
// do the copy
// offset before dest
//  just copy
// minimum count is three,
// so unroll loop a little
// else offset after destination
// force pointer in window
// covers invalid distances
// if source crosses,
// wrapped copy
// copy rest from start of window
// copy all or what's left
// not enough input or output--restore pointers and return
// preset dictionary flag in zlib header
// waiting for method byte
// waiting for flag byte
// four dictionary check bytes to go
// three dictionary check bytes to go
// two dictionary check bytes to go
// one dictionary check byte to go
// waiting for inflateSetDictionary
// decompressing blocks
// four check bytes to go
// three check bytes to go
// two check bytes to go
// one check byte to go
// finished check, done
// got an error--stay here
// current inflate mode
// pointer back to this zlib stream
// mode dependent information
// if FLAGS, method byte
// if CHECK, check values to compare
// computed check value
// stream check value
// if BAD, inflateSync's marker bytes count
// mode independent information
//internal int nowrap; // flag for no wrapper
// log2(window size)  (8..15, defaults to 15)
// current inflate_blocks state
// handle undocumented nowrap option (no zlib header or check)
//nowrap = 0;
//if (w < 0)
//{
//    w = - w;
//    nowrap = 1;
//}
// set window size
//return ZlibConstants.Z_STREAM_ERROR;
// reset state
//             int f = (flush == FlushType.Finish)
//                 ? ZlibConstants.Z_BUF_ERROR
//                 : ZlibConstants.Z_OK;
// workitem 8870
// can't try inflateSync
// can't try inflateSync
// can't try inflateSync
// can try inflateSync
// can try inflateSync
// can't try inflateSync
// number of bytes to look at
// pointer to bytes
// number of marker bytes found in a row
// temporaries to save total_in and total_out
// set up
// search
// restore
// return no joy or set up to restart on a new block
// Returns true if inflate is currently at the end of a block generated
// by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP
// implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH
// but removes the length bytes of the resulting empty stored block. When
// decompressing, PPP checks that at the end of input packet, inflate is
// waiting for these length bytes.
/// <summary>
///   A class for compressing and decompressing GZIP streams.
/// </summary>
/// <remarks>
///
/// <para>
///   The <c>GZipStream</c> is a <see
///   href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
///   <see cref="Stream"/>. It adds GZIP compression or decompression to any
///   stream.
/// </para>
///
/// <para>
///   Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
///   <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
///   reading, but not vice versa.  The compression method used is GZIP, which is
///   documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
///   1952</see>, "GZIP file format specification version 4.3".</para>
///
/// <para>
///   A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
///   to compress data (through <c>Write()</c>), but not both.
/// </para>
///
/// <para>
///   If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
///   around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
///   data will be compressed into the GZIP format.  If you want to decompress data,
///   you must wrap the <c>GZipStream</c> around a readable stream that contains an
///   IETF RFC 1952-compliant stream.  The data will be decompressed as you call
///   <c>Read()</c> on the <c>GZipStream</c>.
/// </para>
///
/// <para>
///   Though the GZIP format allows data from multiple files to be concatenated
///   together, this stream handles only a single segment of GZIP format, typically
///   representing a single file.
/// </para>
///
///
/// </remarks>
// GZip format
// source: http://tools.ietf.org/html/rfc1952
//
//  header id:           2 bytes    1F 8B
//  compress method      1 byte     8= DEFLATE (none other supported)
//  flag                 1 byte     bitfield (See below)
//  mtime                4 bytes    time_t (seconds since jan 1, 1970 UTC of the file.
//  xflg                 1 byte     2 = max compress used , 4 = max speed (can be ignored)
//  OS                   1 byte     OS for originating archive. set to 0xFF in compression.
//  extra field length   2 bytes    optional - only if FEXTRA is set.
//  extra field          varies
//  filename             varies     optional - if FNAME is set.  zero terminated. ISO-8859-1.
//  file comment         varies     optional - if FCOMMENT is set. zero terminated. ISO-8859-1.
//  crc16                1 byte     optional - present only if FHCRC bit is set
//  compressed data      varies
//  CRC32                4 bytes
//  isize                4 bytes    data size modulo 2^32
//
//     FLG (FLaGs)
//                bit 0   FTEXT - indicates file is ASCII text (can be safely ignored)
//                bit 1   FHCRC - there is a CRC16 for the header immediately following the header
//                bit 2   FEXTRA - extra fields are present
//                bit 3   FNAME - the zero-terminated filename is present. encoding; ISO-8859-1.
//                bit 4   FCOMMENT  - a zero-terminated file comment is present. encoding: ISO-8859-1
//                bit 5   reserved
//                bit 6   reserved
//                bit 7   reserved
//
// On consumption:
// Extra field is a bunch of nonsense and can be safely ignored.
// Header CRC and OS, likewise.
//
// on generation:
// all optional fields get 0, except for the OS, which gets 255.
//
/// <summary>
///   The comment on the GZIP stream.
/// </summary>
///
/// <remarks>
/// <para>
///   The GZIP format allows for each file to optionally have an associated
///   comment stored with the file.  The comment is encoded with the ISO-8859-1
///   code page.  To include a comment in a GZIP stream you create, set this
///   property before calling <c>Write()</c> for the first time on the
///   <c>GZipStream</c>.
/// </para>
///
/// <para>
///   When using <c>GZipStream</c> to decompress, you can retrieve this property
///   after the first call to <c>Read()</c>.  If no comment has been set in the
///   GZIP bytestream, the Comment property will return <c>null</c>
///   (<c>Nothing</c> in VB).
/// </para>
/// </remarks>
/// <summary>
///   The FileName for the GZIP stream.
/// </summary>
///
/// <remarks>
///
/// <para>
///   The GZIP format optionally allows each file to have an associated
///   filename.  When compressing data (through <c>Write()</c>), set this
///   FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
///   The actual filename is encoded into the GZIP bytestream with the
///   ISO-8859-1 code page, according to RFC 1952. It is the application's
///   responsibility to insure that the FileName can be encoded and decoded
///   correctly with this code page.
/// </para>
///
/// <para>
///   When decompressing (through <c>Read()</c>), you can retrieve this value
///   any time after the first <c>Read()</c>.  In the case where there was no filename
///   encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
///   in VB).
/// </para>
/// </remarks>
// trim any leading path
/// <summary>
///   The last modified time for the GZIP stream.
/// </summary>
///
/// <remarks>
///   GZIP allows the storage of a last modified time with each GZIP entry.
///   When compressing data, you can set this before the first call to
///   <c>Write()</c>.  When decompressing, you can retrieve this value any time
///   after the first call to <c>Read()</c>.
/// </remarks>
/// <summary>
/// The CRC on the GZIP stream.
/// </summary>
/// <remarks>
/// This is used for internal error checking. You probably don't need to look at this property.
/// </remarks>
/// <summary>
///   Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
/// </summary>
/// <remarks>
///
/// <para>
///   When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
///   default compression level.
/// </para>
///
/// <para>
///   As noted in the class documentation, the <c>CompressionMode</c> (Compress
///   or Decompress) also establishes the "direction" of the stream.  A
///   <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
///   <c>Write()</c>.  A <c>GZipStream</c> with
///   <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
/// </para>
///
/// </remarks>
///
/// <example>
///   This example shows how to use a GZipStream to compress data.
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(outputFile))
///     {
///         using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
/// }
/// </code>
/// <code lang="VB">
/// Dim outputFile As String = (fileToCompress &amp; ".compressed")
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(outputFile)
///     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
///         Dim buffer As Byte() = New Byte(4096) {}
///         Dim n As Integer = -1
///         Do While (n &lt;&gt; 0)
///             If (n &gt; 0) Then
///                 compressor.Write(buffer, 0, n)
///             End If
///             n = input.Read(buffer, 0, buffer.Length)
///         Loop
///     End Using
///     End Using
/// End Using
/// </code>
/// </example>
///
/// <example>
/// This example shows how to use a GZipStream to uncompress a file.
/// <code>
/// private void GunZipFile(string filename)
/// {
///     if (!filename.EndsWith(".gz))
///         throw new ArgumentException("filename");
///     var DecompressedFile = filename.Substring(0,filename.Length-3);
///     byte[] working = new byte[WORKING_BUFFER_SIZE];
///     int n= 1;
///     using (System.IO.Stream input = System.IO.File.OpenRead(filename))
///     {
///         using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
///         {
///             using (var output = System.IO.File.Create(DecompressedFile))
///             {
///                 while (n !=0)
///                 {
///                     n= decompressor.Read(working, 0, working.Length);
///                     if (n > 0)
///                     {
///                         output.Write(working, 0, n);
///                     }
///                 }
///             }
///         }
///     }
/// }
/// </code>
///
/// <code lang="VB">
/// Private Sub GunZipFile(ByVal filename as String)
///     If Not (filename.EndsWith(".gz)) Then
///         Throw New ArgumentException("filename")
///     End If
///     Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
///     Dim working(WORKING_BUFFER_SIZE) as Byte
///     Dim n As Integer = 1
///     Using input As Stream = File.OpenRead(filename)
///         Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
///             Using output As Stream = File.Create(UncompressedFile)
///                 Do
///                     n= decompressor.Read(working, 0, working.Length)
///                     If n > 0 Then
///                         output.Write(working, 0, n)
///                     End IF
///                 Loop While (n  > 0)
///             End Using
///         End Using
///     End Using
/// End Sub
/// </code>
/// </example>
///
/// <param name="stream">The stream which will be read or written.</param>
/// <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
/// <summary>
///   Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
///   the specified <c>CompressionLevel</c>.
/// </summary>
/// <remarks>
///
/// <para>
///   The <c>CompressionMode</c> (Compress or Decompress) also establishes the
///   "direction" of the stream.  A <c>GZipStream</c> with
///   <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
///   <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
///   through <c>Read()</c>.
/// </para>
///
/// </remarks>
///
/// <example>
///
/// This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
///
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
///     {
///         using (Stream compressor = new GZipStream(raw,
///                                                   CompressionMode.Compress,
///                                                   CompressionLevel.BestCompression))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
/// }
/// </code>
///
/// <code lang="VB">
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
///         Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
///             Dim buffer As Byte() = New Byte(4096) {}
///             Dim n As Integer = -1
///             Do While (n &lt;&gt; 0)
///                 If (n &gt; 0) Then
///                     compressor.Write(buffer, 0, n)
///                 End If
///                 n = input.Read(buffer, 0, buffer.Length)
///             Loop
///         End Using
///     End Using
/// End Using
/// </code>
/// </example>
/// <param name="stream">The stream to be read or written while deflating or inflating.</param>
/// <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
/// <param name="level">A tuning knob to trade speed for effectiveness.</param>
/// <summary>
///   Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
///   explicitly specify whether the stream should be left open after Deflation
///   or Inflation.
/// </summary>
///
/// <remarks>
/// <para>
///   This constructor allows the application to request that the captive stream
///   remain open after the deflation or inflation occurs.  By default, after
///   <c>Close()</c> is called on the stream, the captive stream is also
///   closed. In some cases this is not desired, for example if the stream is a
///   memory stream that will be re-read after compressed data has been written
///   to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
///   the stream open.
/// </para>
///
/// <para>
///   The <see cref="CompressionMode"/> (Compress or Decompress) also
///   establishes the "direction" of the stream.  A <c>GZipStream</c> with
///   <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
///   with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
/// </para>
///
/// <para>
///   The <c>GZipStream</c> will use the default compression level. If you want
///   to specify the compression level, see <see cref="GZipStream(Stream,
///   CompressionMode, CompressionLevel, bool)"/>.
/// </para>
///
/// <para>
///   See the other overloads of this constructor for example code.
/// </para>
///
/// </remarks>
///
/// <param name="stream">
///   The stream which will be read or written. This is called the "captive"
///   stream in other places in this documentation.
/// </param>
///
/// <param name="mode">Indicates whether the GZipStream will compress or decompress.
/// </param>
///
/// <param name="leaveOpen">
///   true if the application would like the base stream to remain open after
///   inflation/deflation.
/// </param>
/// <summary>
///   Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
///   specified <c>CompressionLevel</c>, and explicitly specify whether the
///   stream should be left open after Deflation or Inflation.
/// </summary>
///
/// <remarks>
///
/// <para>
///   This constructor allows the application to request that the captive stream
///   remain open after the deflation or inflation occurs.  By default, after
///   <c>Close()</c> is called on the stream, the captive stream is also
///   closed. In some cases this is not desired, for example if the stream is a
///   memory stream that will be re-read after compressed data has been written
///   to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
///   leave the stream open.
/// </para>
///
/// <para>
///   As noted in the class documentation, the <c>CompressionMode</c> (Compress
///   or Decompress) also establishes the "direction" of the stream.  A
///   <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
///   <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
///   through <c>Read()</c>.
/// </para>
///
/// </remarks>
///
/// <example>
///   This example shows how to use a <c>GZipStream</c> to compress data.
/// <code>
/// using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
/// {
///     using (var raw = System.IO.File.Create(outputFile))
///     {
///         using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
///         {
///             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
///             int n;
///             while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
///             {
///                 compressor.Write(buffer, 0, n);
///             }
///         }
///     }
/// }
/// </code>
/// <code lang="VB">
/// Dim outputFile As String = (fileToCompress &amp; ".compressed")
/// Using input As Stream = File.OpenRead(fileToCompress)
///     Using raw As FileStream = File.Create(outputFile)
///     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
///         Dim buffer As Byte() = New Byte(4096) {}
///         Dim n As Integer = -1
///         Do While (n &lt;&gt; 0)
///             If (n &gt; 0) Then
///                 compressor.Write(buffer, 0, n)
///             End If
///             n = input.Read(buffer, 0, buffer.Length)
///         Loop
///     End Using
///     End Using
/// End Using
/// </code>
/// </example>
/// <param name="stream">The stream which will be read or written.</param>
/// <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
/// <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
/// <param name="level">A tuning knob to trade speed for effectiveness.</param>
/// <summary>
/// This property sets the flush behavior on the stream.
/// </summary>
/// <summary>
///   The size of the working buffer for the compression codec.
/// </summary>
///
/// <remarks>
/// <para>
///   The working buffer is used for all stream operations.  The default size is
///   1024 bytes.  The minimum size is 128 bytes. You may get better performance
///   with a larger buffer.  Then again, you might not.  You would have to test
///   it.
/// </para>
///
/// <para>
///   Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
///   stream. If you try to set it afterwards, it will throw.
/// </para>
/// </remarks>
/// <summary> Returns the total number of bytes input so far.</summary>
/// <summary> Returns the total number of bytes output so far.</summary>
/// <summary>
///   Dispose the stream.
/// </summary>
/// <remarks>
///   <para>
///     This may or may not result in a <c>Close()</c> call on the captive
///     stream.  See the constructors that have a <c>leaveOpen</c> parameter
///     for more information.
///   </para>
///   <para>
///     This method may be invoked in two distinct scenarios.  If disposing
///     == true, the method has been called directly or indirectly by a
///     user's code, for example via the internal Dispose() method. In this
///     case, both managed and unmanaged resources can be referenced and
///     disposed.  If disposing == false, the method has been called by the
///     runtime from inside the object finalizer and this method should not
///     reference other objects; in that case only unmanaged resources must
///     be referenced or disposed.
///   </para>
/// </remarks>
/// <param name="disposing">
///   indicates whether the Dispose method was invoked by user code.
/// </param>
/// <summary>
/// Indicates whether the stream can be read.
/// </summary>
/// <remarks>
/// The return value depends on whether the captive stream supports reading.
/// </remarks>
/// <summary>
/// Indicates whether the stream supports Seek operations.
/// </summary>
/// <remarks>
/// Always returns false.
/// </remarks>
/// <summary>
/// Indicates whether the stream can be written.
/// </summary>
/// <remarks>
/// The return value depends on whether the captive stream supports writing.
/// </remarks>
/// <summary>
/// Flush the stream.
/// </summary>
/// <summary>
/// Reading this property always throws a <see cref="NotImplementedException"/>.
/// </summary>
/// <summary>
///   The position of the stream pointer.
/// </summary>
///
/// <remarks>
///   Setting this property always throws a <see
///   cref="NotImplementedException"/>. Reading will return the total bytes
///   written out, if used in writing, or the total bytes read in, if used in
///   reading.  The count may refer to compressed bytes or uncompressed bytes,
///   depending on how you've used the stream.
/// </remarks>
/// <summary>
///   Read and decompress data from the source stream.
/// </summary>
///
/// <remarks>
///   With a <c>GZipStream</c>, decompression is done through reading.
/// </remarks>
///
/// <example>
/// <code>
/// byte[] working = new byte[WORKING_BUFFER_SIZE];
/// using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
/// {
///     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
///     {
///         using (var output = System.IO.File.Create(_DecompressedFile))
///         {
///             int n;
///             while ((n= decompressor.Read(working, 0, working.Length)) !=0)
///             {
///                 output.Write(working, 0, n);
///             }
///         }
///     }
/// }
/// </code>
/// </example>
/// <param name="buffer">The buffer into which the decompressed data should be placed.</param>
/// <param name="offset">the offset within that data array to put the first byte read.</param>
/// <param name="count">the number of bytes to read.</param>
/// <returns>the number of bytes actually read</returns>
// Console.WriteLine("GZipStream::Read(buffer, off({0}), c({1}) = {2}", offset, count, n);
// Console.WriteLine( Util.FormatByteArray(buffer, offset, n) );
/// <summary>
///   Calling this method always throws a <see cref="NotImplementedException"/>.
/// </summary>
/// <param name="offset">irrelevant; it will always throw!</param>
/// <param name="origin">irrelevant; it will always throw!</param>
/// <returns>irrelevant!</returns>
/// <summary>
///   Calling this method always throws a <see cref="NotImplementedException"/>.
/// </summary>
/// <param name="value">irrelevant; this method will always throw!</param>
/// <summary>
///   Write data to the stream.
/// </summary>
///
/// <remarks>
/// <para>
///   If you wish to use the <c>GZipStream</c> to compress data while writing,
///   you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
///   writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
///   providing uncompressed data as input.  The data sent to the output stream
///   will be the compressed form of the data written.
/// </para>
///
/// <para>
///   A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
///   both. Writing implies compression.  Reading implies decompression.
/// </para>
///
/// </remarks>
/// <param name="buffer">The buffer holding data to write to the stream.</param>
/// <param name="offset">the offset within that data array to find the first byte to write.</param>
/// <param name="count">the number of bytes to write.</param>
//Console.WriteLine("GZipStream: First write");
// first write in compression, therefore, emit the GZIP header
// ID
// compression method
// flag
// mtime
// xflg
// this field is totally useless
// OS
// 0xFF == unspecified
// extra field length - only if FEXTRA is set, which it is not.
//header[i++]= 0;
//header[i++]= 0;
// filename
// terminate
// comment
// terminate
// bytes written
/// <summary>
///   Compress a string into a byte array using GZip.
/// </summary>
///
/// <remarks>
///   Uncompress it with <see cref="GZipStream.UncompressString(byte[])"/>.
/// </remarks>
///
/// <seealso cref="GZipStream.UncompressString(byte[])"/>
/// <seealso cref="GZipStream.CompressBuffer(byte[])"/>
///
/// <param name="s">
///   A string to compress. The string will first be encoded
///   using UTF8, then compressed.
/// </param>
///
/// <returns>The string in compressed form</returns>
/// <summary>
///   Compress a byte array into a new byte array using GZip.
/// </summary>
///
/// <remarks>
///   Uncompress it with <see cref="GZipStream.UncompressBuffer(byte[])"/>.
/// </remarks>
///
/// <seealso cref="GZipStream.CompressString(string)"/>
/// <seealso cref="GZipStream.UncompressBuffer(byte[])"/>
///
/// <param name="b">
///   A buffer to compress.
/// </param>
///
/// <returns>The data in compressed form</returns>
/// <summary>
///   Uncompress a GZip'ed byte array into a single string.
/// </summary>
///
/// <seealso cref="GZipStream.CompressString(String)"/>
/// <seealso cref="GZipStream.UncompressBuffer(byte[])"/>
///
/// <param name="compressed">
///   A buffer containing GZIP-compressed data.
/// </param>
///
/// <returns>The uncompressed string</returns>
/// <summary>
///   Uncompress a GZip'ed byte array into a byte array.
/// </summary>
///
/// <seealso cref="GZipStream.CompressBuffer(byte[])"/>
/// <seealso cref="GZipStream.UncompressString(byte[])"/>
///
/// <param name="compressed">
///   A buffer containing data that has been compressed with GZip.
/// </param>
///
/// <returns>The data in uncompressed form</returns>
// block not completed, need more input or more output
// block flush performed
// finish started, need only more output at next deflate
// finish done, accept no more input or output
// Use a faster search when the previous match is longer than this
// reduce lazy search above this match length
// Attempt to find a better match only when the current match is
// strictly smaller than this value. This mechanism is used only for
// compression levels >= 4.  For levels 1,2,3: MaxLazy is actually
// MaxInsertLength. (See DeflateFast)
// do not perform lazy search above this match length
// quit search above this match length
// To speed up deflation, hash chains are never searched beyond this
// length.  A higher limit improves compression ratio but degrades the speed.
// preset dictionary flag in zlib header
// The deflate compression method
// The three kinds of block type
// the zlib encoder/decoder
// as the name implies
// output still pending - waiting to be compressed
// index of next pending byte to output to the stream
// number of bytes in the pending buffer
// UNKNOWN, BINARY or ASCII
// value of flush param for previous deflate call
// LZ77 window size (32K by default)
// log2(w_size)  (8..16)
// w_size - 1
//internal byte[] dictionary;
// Sliding window. Input bytes are read into the second half of the window,
// and move to the first half later to keep a dictionary of at least wSize
// bytes. With this organization, matches are limited to a distance of
// wSize-MAX_MATCH bytes, but this ensures that IO is always
// performed with a length multiple of the block size.
//
// To do: use the user input buffer as sliding window.
// Actual size of window: 2*wSize, except when the user input buffer
// is directly used as sliding window.
// Link to older string with same hash index. To limit the size of this
// array to 64K, this link is maintained only for the last 32K strings.
// An index in this array is thus a window index modulo 32K.
// Heads of the hash chains or NIL.
// hash index of string to be inserted
// number of elements in hash table
// log2(hash_size)
// hash_size-1
// Number of bits by which ins_h must be shifted at each input
// step. It must be such that after MIN_MATCH steps, the oldest
// byte no longer takes part in the hash key, that is:
// hash_shift * MIN_MATCH >= hash_bits
// Window position at the beginning of the current output block. Gets
// negative when the window is moved backwards.
// length of best match
// previous match
// set if previous match exists
// start of string to insert into.....????
// start of matching string
// number of valid bytes ahead in window
// Length of the best match at previous step. Matches not greater than this
// are discarded. This is used in the lazy match evaluation.
// Insert new strings in the hash table only if the match length is not
// greater than this length. This saves time but degrades compression.
// max_insert_length is used only for compression levels <= 3.
// compression level (1..9)
// favor or force Huffman coding
// literal and length tree
// distance tree
// Huffman tree for bit lengths
// desc for literal tree
// desc for distance tree
// desc for bit length tree
// number of codes at each bit length for an optimal tree
// heap used to build the Huffman trees
// number of elements in the heap
// element of largest frequency
// The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
// The same heap array is used to build all trees.
// Depth of each subtree used as tie breaker for trees of equal frequency
// index for literals or lengths
// Size of match buffer for literals/lengths.  There are 4 reasons for
// limiting lit_bufsize to 64K:
//   - frequencies can be kept in 16 bit counters
//   - if compression is not successful for the first block, all input
//     data is still in the window so we can still emit a stored block even
//     when input comes from standard input.  (This can also be done for
//     all blocks if lit_bufsize is not greater than 32K.)
//   - if compression is not successful for a file smaller than 64K, we can
//     even emit a stored file instead of a stored block (saving 5 bytes).
//     This is applicable only for zip (not gzip or zlib).
//   - creating new Huffman trees less frequently may not provide fast
//     adaptation to changes in the input data statistics. (Take for
//     example a binary file with poorly compressible code followed by
//     a highly compressible string table.) Smaller buffer sizes give
//     fast adaptation but have of course the overhead of transmitting
//     trees more frequently.
// running index in l_buf
// Buffer for distances. To simplify the code, d_buf and l_buf have
// the same number of elements. To use different lengths, an extra flag
// array would be necessary.
// index into pending; points to distance data??
// bit length of current block with optimal trees
// bit length of current block with static trees
// number of string matches in current block
// bit length of EOB code for last block
// Output buffer. bits are inserted starting at the bottom (least
// significant bits).
// Number of valid bits in bi_buf.  All bits above the last valid bit
// are always zero.
// distance tree
// Huffman tree for bit lengths
// lm_init
// clear the hash - workitem 9063
//for (int i = 0; i < hash_size; i++) head[i] = 0;
// Initialize the tree data structures for a new zlib stream.
// enough lookahead for inflate
// Initialize the first block of the first file:
// Initialize the trees.
// Restore the heap property by moving down the tree starting at node k,
// exchanging a node with the smallest of its two sons if necessary, stopping
// when the heap property is re-established (each father smaller than its
// two sons).
// left son of k
// Set j to the smallest of the two sons:
// Exit if v is smaller than both sons
// Exchange v with the smallest son
// And continue down the tree, setting j to the left son of k
// Scan a literal or distance tree to determine the frequencies of the codes
// in the bit length tree.
// iterates over all tree elements
// last emitted length
// length of current code
// length of next code
// repeat count of the current code
// max repeat count
// min repeat count
// guard //??
// Construct the Huffman tree for the bit lengths and return the index in
// bl_order of the last bit length code to send.
// index of last bit length code of non zero freq
// Determine the bit length frequencies for literal and distance trees
// Build the bit length tree:
// opt_len now includes the length of the tree representations, except
// the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
// Determine the number of bit length codes to send. The pkzip format
// requires that at least 4 bit length codes be sent. (appnote.txt says
// 3 but the actual value used is 4.)
// Update opt_len to include the bit length tree and counts
// Send the header for a block using dynamic Huffman trees: the counts, the
// lengths of the bit length codes, the literal tree and the distance tree.
// IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
// index in bl_order
// not +255 as stated in appnote.txt
// not -3 as stated in appnote.txt
// literal tree
// distance tree
// Send a literal or distance tree in compressed form, using the codes in
// bl_tree.
// iterates over all tree elements
// last emitted length
// length of current code
// length of next code
// repeat count of the current code
// max repeat count
// min repeat count
// Output a block of bytes on the stream.
// IN assertion: there is enough room in pending_buf.
//int val = value;
//      bi_buf |= (val << bi_valid);
//put_short(bi_buf);
//      bi_buf |= (value) << bi_valid;
// Send one empty static block to give enough lookahead for inflate.
// This takes 10 bits, of which 7 may remain in the bit buffer.
// The current inflate code requires 9 bits of lookahead. If the
// last two codes for the previous block (real code plus EOB) were coded
// on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode
// the last real code. In this case we send two empty static blocks instead
// of one. (There are no problems if the previous block is stored or fixed.)
// To simplify the code, we assume the worst case of last real code encoded
// on one bit only.
// Of the 10 bits for the empty block, we have already sent
// (10 - bi_valid) bits. The lookahead for the last real code (before
// the EOB of the previous block) was thus at least one plus the length
// of the EOB plus what we have just sent of the empty static block.
// Save the match info and tally the frequency counts. Return true if
// the current block must be flushed.
// lc is the unmatched char
// Here, lc is the match length - MIN_MATCH
// dist = match distance - 1
// Compute an upper bound for the compressed length
// dinoch - wraparound?
// We avoid equality with lit_bufsize because of wraparound at 64K
// on 16 bit machines and because stored blocks are restricted to
// 64K-1 bytes.
// Send the block data compressed using the given Huffman trees
// distance of matched string
// match length or unmatched char (if dist == 0)
// running index in l_buf
// the code to send
// number of extra bits to send
// send a literal byte
// literal or match pair
// Here, lc is the match length - MIN_MATCH
// send the length code
// send the extra length bits
// dist is now the match distance - 1
// send the distance code
// send the extra distance bits
// Check that the overlay between pending and d_buf+l_buf is ok:
// Set the data type to ASCII or BINARY, using a crude approximation:
// binary if more than 20% of the bytes are <= 6 or >= 128, ascii otherwise.
// IN assertion: the fields freq of dyn_ltree are set and the total of all
// frequencies does not exceed 64K (to fit in an int on 16 bit machines).
// Flush the bit buffer, keeping at most 7 bits in it.
//put_byte((byte)bi_buf);
// Flush the bit buffer and align the output on a byte boundary
//put_byte((byte)bi_buf);
// Copy a stored block, storing first the length and its
// one's complement if requested.
// align on byte boundary
// enough lookahead for inflate
//put_short((short)len);
//put_short((short)~len);
// Copy without compression as much as possible from the input stream, return
// the current block state.
// This function does not insert new strings in the dictionary since
// uncompressible data is probably not useful. This function is used
// only for the level=0 compression option.
// NOTE: this function should be optimized to avoid extra copying from
// window to pending_buf.
// Stored blocks are limited to 0xffff bytes, pending is limited
// to pending_buf_size, and each stored block has a 5 byte header:
// Copy as much as possible from input to output:
// Fill the window as much as possible:
// flush the current block
// Emit a stored block if pending will be full:
// strstart == 0 is possible when wraparound on 16-bit machine
// Flush if we may have to slide, otherwise block_start may become
// negative and the data will be gone:
// Send a stored block
// send block type
// with header
// Determine the best encoding for the current block: dynamic trees, static
// trees or store, and output the encoded block to the zip file.
// opt_len and static_len in bytes
// index of last bit length code of non zero freq
// Build the Huffman trees unless a stored block is forced
// Check if the file is ascii or binary
// Construct the literal and distance trees
// At this point, opt_len and static_len are the total bit lengths of
// the compressed block data, excluding the tree representations.
// Build the bit length tree for the above two trees, and get the index
// in bl_order of the last bit length code to send.
// Determine the best encoding. Compute first the block length in bytes
// force a stored block
// 4: two words for the lengths
// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
// Otherwise we can't have processed more than WSIZE input bytes since
// the last block flush, because compression would have been
// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
// transform a block into a stored block.
// The above check is made mod 2^32, for files larger than 512 MB
// and uLong implemented on 32 bits.
// Fill the window when the lookahead becomes insufficient.
// Updates strstart and lookahead.
//
// IN assertion: lookahead < MIN_LOOKAHEAD
// OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
//    At least one byte has been read, or avail_in == 0; reads are
//    performed for at least two bytes (required for the zip translate_eol
//    option -- not supported here).
// Amount of free space at the end of the window.
// Deal with !@#$% 64K limit:
// Very unlikely, but possible on 16 bit machine if strstart == 0
// and lookahead == 1 (input done one byte at time)
// If the window is almost full and there is insufficient lookahead,
// move the upper half to the lower one to make room in the upper half.
// we now have strstart >= MAX_DIST
// Slide the hash table (could be avoided with 32 bit values
// at the expense of memory usage). We slide even when level == 0
// to keep the hash table consistent if we switch back to level > 0
// later. (Using level 0 permanently is not an optimal usage of
// zlib, so we don't care about this pathological case.)
// If n is not on any hash chain, prev[n] is garbage but
// its value will never be used.
// If there was no sliding:
//    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
//    more == window_size - lookahead - strstart
// => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
// => more >= window_size - 2*WSIZE + 2
// In the BIG_MEM or MMAP case (not yet supported),
//   window_size == input_size + MIN_LOOKAHEAD  &&
//   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
// Otherwise, window_size == 2*WSIZE so more >= 2.
// If there was sliding, more >= WSIZE. So in all cases, more >= 2.
// Initialize the hash value now that we have some input:
// If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
// but this is not important since only literal bytes will be emitted.
// Compress as much as possible from the input stream, return the current
// block state.
// This function does not perform lazy evaluation of matches and inserts
// new strings in the dictionary only for unmatched strings or for short
// matches. It is used only for the fast compression options.
//    short hash_head = 0; // head of the hash chain
// head of the hash chain
// set if current block must be flushed
// Make sure that we always have enough lookahead, except
// at the end of the input file. We need MAX_MATCH bytes
// for the next match, plus MIN_MATCH bytes to insert the
// string following the next match.
// flush the current block
// Insert the string window[strstart .. strstart+2] in the
// dictionary, and set hash_head to the head of the hash chain:
//  prev[strstart&w_mask]=hash_head=head[ins_h];
// Find the longest match, discarding those <= prev_length.
// At this point we have always match_length < MIN_MATCH
// To simplify the code, we prevent matches with the string
// of window index 0 (in particular we have to avoid a match
// of the string with itself at the start of the input file).
// longest_match() sets match_start
//        check_match(strstart, match_start, match_length);
// Insert new strings in the hash table only if the match length
// is not too large. This saves time but degrades compression.
// string at strstart already in hash table
//      prev[strstart&w_mask]=hash_head=head[ins_h];
// strstart never exceeds WSIZE-MAX_MATCH, so there are
// always MIN_MATCH bytes ahead.
// If lookahead < MIN_MATCH, ins_h is garbage, but it does not
// matter since it will be recomputed at next deflate call.
// No match, output a literal byte
// Same as above, but achieves better compression. We use a lazy
// evaluation for matches: a match is finally adopted only if there is
// no better match at the next window position.
//    short hash_head = 0;    // head of hash chain
// head of hash chain
// set if current block must be flushed
// Process the input block.
// Make sure that we always have enough lookahead, except
// at the end of the input file. We need MAX_MATCH bytes
// for the next match, plus MIN_MATCH bytes to insert the
// string following the next match.
// flush the current block
// Insert the string window[strstart .. strstart+2] in the
// dictionary, and set hash_head to the head of the hash chain:
//  prev[strstart&w_mask]=hash_head=head[ins_h];
// Find the longest match, discarding those <= prev_length.
// To simplify the code, we prevent matches with the string
// of window index 0 (in particular we have to avoid a match
// of the string with itself at the start of the input file).
// longest_match() sets match_start
// If prev_match is also MIN_MATCH, match_start is garbage
// but we will ignore the current match anyway.
// If there was a match at the previous step and the current
// match is not better, output the previous match:
// Do not insert strings in hash table beyond this.
//          check_match(strstart-1, prev_match, prev_length);
// Insert in hash table all strings up to the end of the match.
// strstart-1 and strstart are already inserted. If there is not
// enough lookahead, the last two strings are not inserted in
// the hash table.
//prev[strstart&w_mask]=hash_head=head[ins_h];
// If there was no match at the previous position, output a
// single literal. If there was a match but the current match
// is longer, truncate the previous match to a single literal.
// There is no previous match to compare with, wait for
// the next step to decide.
// max hash chain length
// current string
// matched string
// length of current match
// best match length so far
// Stop when cur_match becomes <= limit. To simplify the code,
// we prevent matches with the string of window index 0.
// The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
// It is easy to get rid of this optimization if necessary.
// Do not waste too much time if we already have a good match:
// Do not look for matches beyond the end of the input. This is necessary
// to make deflate deterministic.
// Skip to next match if the match length cannot increase
// or if the match length is less than 2:
// The check at best_len-1 can be removed because it will be made
// again later. (This heuristic is not always a win.)
// It is not necessary to compare scan[2] and match[2] since they
// are always equal when the other bytes match, given that
// the hash keys are equal and that HASH_BITS >= 8.
// We check for insufficient lookahead only every 8th comparison;
// the 256th check will be made at strstart+258.
// validation
// for memLevel==8, this will be 16384, 16k
// Use a single array as the buffer for data pending compression,
// the output distance codes, and the output length codes (aka tree).
// orig comment: This works just fine since the average
// output size for (length,distance) codes is <= 24 bits.
// So, for memLevel 8, the length of the pending buffer is 65536. 64k.
// The first 16k are pending bytes.
// The middle slice, of 32k, is used for distance codes.
// The final 16k are length codes.
//strm.data_type = Z_UNKNOWN;
// Deallocate in reverse order of allocations:
// free
// dstate=null;
// change in the deflate flavor (Fast vs slow vs none)?
// Flush the last buffer:
// no need to flush with change in strategy?  Really?
// use the tail of the dictionary
// Insert all strings in the hash table (except for the last two bytes).
// s->lookahead stays null, so s->ins_h will be recomputed at the next
// call of fill_window.
// Write the zlib (rfc1950) header bytes
//putShortMSB(header);
// Save the adler32 of the preset dictionary:
// Flush as much pending output as possible
//System.out.println("  avail_out==0");
// Since avail_out is 0, deflate will be called again with
// more output space, but possibly with both pending and
// avail_in equal to zero. There won't be anything to do,
// but this is not an error situation so make sure we
// return OK instead of BUF_ERROR at next call of deflate:
// Make sure there is something to do and avoid duplicate consecutive
// flushes. For repeated and useless calls with Z_FINISH, we keep
// returning Z_STREAM_END instead of Z_BUFF_ERROR.
// workitem 8557
//
// Not sure why this needs to be an error.  pendingCount == 0, which
// means there's nothing to deflate.  And the caller has not asked
// for a FlushType.Finish, but...  that seems very non-fatal.  We
// can just say "OK" and do nothing.
// _codec.Message = z_errmsg[ZlibConstants.Z_NEED_DICT - (ZlibConstants.Z_BUF_ERROR)];
// throw new ZlibException("AvailableBytesIn == 0 && flush<=old_flush && flush != FlushType.Finish");
// User must not provide more input after the first FINISH:
// Start a new block or continue the current one.
// avoid BUF_ERROR next call, see above
// If flush != Z_NO_FLUSH && avail_out == 0, the next call
// of deflate should use the same flush parameter to make sure
// that the flush is complete. So we don't have to output an
// empty block here, this will be done at next call. This also
// ensures that for a very small output buffer, we emit at most
// one empty block.
// FlushType.Full or FlushType.Sync
// For a full flush, this empty block will be recognized
// as a special marker by inflate_sync().
// clear hash (forget the history)
// avoid BUF_ERROR at next call, see above
// Write the zlib trailer (adler32)
//putShortMSB((int)(SharedUtils.URShift(_codec._Adler32, 16)));
//putShortMSB((int)(_codec._Adler32 & 0xffff));
// If avail_out is zero, the application will call deflate again
// to flush the rest.
// write the trailer only once!
/// <summary>
///   Computes a CRC-32. The CRC-32 algorithm is parameterized - you
///   can set the polynomial and enable or disable bit
///   reversal. This can be used for GZIP, BZip2, or ZIP.
/// </summary>
/// <remarks>
///   This type is used internally by DotNetZip; it is generally not used
///   directly by applications wishing to create, read, or manipulate zip
///   archive files.
/// </remarks>
/// <summary>
///   Indicates the total number of bytes applied to the CRC.
/// </summary>
/// <summary>
/// Indicates the current CRC for all blocks slurped in.
/// </summary>
/// <summary>
/// Returns the CRC32 for the specified stream.
/// </summary>
/// <param name="input">The stream over which to calculate the CRC32</param>
/// <returns>the CRC32 calculation</returns>
/// <summary>
/// Returns the CRC32 for the specified stream, and writes the input into the
/// output stream.
/// </summary>
/// <param name="input">The stream over which to calculate the CRC32</param>
/// <param name="output">The stream into which to deflate the input</param>
/// <returns>the CRC32 calculation</returns>
/// <summary>
///   Get the CRC32 for the given (word,byte) combo.  This is a
///   computation defined by PKzip for PKZIP 2.0 (weak) encryption.
/// </summary>
/// <param name="W">The word to start with.</param>
/// <param name="B">The byte to combine it with.</param>
/// <returns>The CRC-ized result.</returns>
/// <summary>
/// Update the value for the running CRC32 using the given block of bytes.
/// This is useful when using the CRC32() class in a Stream.
/// </summary>
/// <param name="block">block of bytes to slurp</param>
/// <param name="offset">starting point in the block</param>
/// <param name="count">how many bytes within the block to slurp</param>
// bzip algorithm
/// <summary>
///   Process one byte in the CRC.
/// </summary>
/// <param name = "b">the byte to include into the CRC .  </param>
/// <summary>
///   Process a run of N identical bytes into the CRC.
/// </summary>
/// <remarks>
///   <para>
///     This method serves as an optimization for updating the CRC when a
///     run of identical bytes is found. Rather than passing in a buffer of
///     length n, containing all identical bytes b, this method accepts the
///     byte value and the length of the (virtual) buffer - the length of
///     the run.
///   </para>
/// </remarks>
/// <param name = "b">the byte to include into the CRC.  </param>
/// <param name = "n">the number of times that byte should be repeated. </param>
/// <summary>
///   Combines the given CRC32 value with the current running total.
/// </summary>
/// <remarks>
///   This is useful when using a divide-and-conquer approach to
///   calculating a CRC.  Multiple threads can each calculate a
///   CRC32 on a segment of the data, and then combine the
///   individual CRC32 values at the end.
/// </remarks>
/// <param name="crc">the crc value to be combined with this one</param>
/// <param name="length">the length of data the CRC value was calculated on</param>
// even-power-of-two zeros operator
// odd-power-of-two zeros operator
// put operator for one zero bit in odd
// the CRC-32 polynomial
// put operator for two zero bits in even
// put operator for four zero bits in odd
// apply len2 zeros to crc1 (first square will put the operator for one
// zero byte, eight zero bits, in even)
// apply zeros operator for this bit of len2
// another iteration of the loop with odd and even swapped
//return (int) crc1;
/// <summary>
///   Create an instance of the CRC32 class using the default settings: no
///   bit reversal, and a polynomial of 0xEDB88320.
/// </summary>
/// <summary>
///   Create an instance of the CRC32 class, specifying whether to reverse
///   data bits or not.
/// </summary>
/// <param name='reverseBits'>
///   specify true if the instance should reverse data bits.
/// </param>
/// <remarks>
///   <para>
///     In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
///     want a CRC32 with compatibility with BZip2, you should pass true
///     here. In the CRC-32 used by GZIP and PKZIP, the bits are not
///     reversed; Therefore if you want a CRC32 with compatibility with
///     those, you should pass false.
///   </para>
/// </remarks>
/// <summary>
///   Create an instance of the CRC32 class, specifying the polynomial and
///   whether to reverse data bits or not.
/// </summary>
/// <param name='polynomial'>
///   The polynomial to use for the CRC, expressed in the reversed (LSB)
///   format: the highest ordered bit in the polynomial value is the
///   coefficient of the 0th power; the second-highest order bit is the
///   coefficient of the 1 power, and so on. Expressed this way, the
///   polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
/// </param>
/// <param name='reverseBits'>
///   specify true if the instance should reverse data bits.
/// </param>
///
/// <remarks>
///   <para>
///     In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
///     want a CRC32 with compatibility with BZip2, you should pass true
///     here for the <c>reverseBits</c> parameter. In the CRC-32 used by
///     GZIP and PKZIP, the bits are not reversed; Therefore if you want a
///     CRC32 with compatibility with those, you should pass false for the
///     <c>reverseBits</c> parameter.
///   </para>
/// </remarks>
/// <summary>
///   Reset the CRC-32 class - clear the CRC "remainder register."
/// </summary>
/// <remarks>
///   <para>
///     Use this when employing a single instance of this class to compute
///     multiple, distinct CRCs on multiple, distinct data blocks.
///   </para>
/// </remarks>
// private member vars
/// <summary>
/// A Stream that calculates a CRC32 (a checksum) on all bytes read,
/// or on all bytes written.
/// </summary>
///
/// <remarks>
/// <para>
/// This class can be used to verify the CRC of a ZipEntry when
/// reading from a stream, or to calculate a CRC when writing to a
/// stream.  The stream should be used to either read, or write, but
/// not both.  If you intermix reads and writes, the results are not
/// defined.
/// </para>
///
/// <para>
/// This class is intended primarily for use internally by the
/// DotNetZip library.
/// </para>
/// </remarks>
/// <summary>
/// The default constructor.
/// </summary>
/// <remarks>
///   <para>
///     Instances returned from this constructor will leave the underlying
///     stream open upon Close().  The stream uses the default CRC32
///     algorithm, which implies a polynomial of 0xEDB88320.
///   </para>
/// </remarks>
/// <param name="stream">The underlying stream</param>
/// <summary>
///   The constructor allows the caller to specify how to handle the
///   underlying stream at close.
/// </summary>
/// <remarks>
///   <para>
///     The stream uses the default CRC32 algorithm, which implies a
///     polynomial of 0xEDB88320.
///   </para>
/// </remarks>
/// <param name="stream">The underlying stream</param>
/// <param name="leaveOpen">true to leave the underlying stream
/// open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
/// <summary>
///   A constructor allowing the specification of the length of the stream
///   to read.
/// </summary>
/// <remarks>
///   <para>
///     The stream uses the default CRC32 algorithm, which implies a
///     polynomial of 0xEDB88320.
///   </para>
///   <para>
///     Instances returned from this constructor will leave the underlying
///     stream open upon Close().
///   </para>
/// </remarks>
/// <param name="stream">The underlying stream</param>
/// <param name="length">The length of the stream to slurp</param>
/// <summary>
///   A constructor allowing the specification of the length of the stream
///   to read, as well as whether to keep the underlying stream open upon
///   Close().
/// </summary>
/// <remarks>
///   <para>
///     The stream uses the default CRC32 algorithm, which implies a
///     polynomial of 0xEDB88320.
///   </para>
/// </remarks>
/// <param name="stream">The underlying stream</param>
/// <param name="length">The length of the stream to slurp</param>
/// <param name="leaveOpen">true to leave the underlying stream
/// open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
/// <summary>
///   A constructor allowing the specification of the length of the stream
///   to read, as well as whether to keep the underlying stream open upon
///   Close(), and the CRC32 instance to use.
/// </summary>
/// <remarks>
///   <para>
///     The stream uses the specified CRC32 instance, which allows the
///     application to specify how the CRC gets calculated.
///   </para>
/// </remarks>
/// <param name="stream">The underlying stream</param>
/// <param name="length">The length of the stream to slurp</param>
/// <param name="leaveOpen">true to leave the underlying stream
/// open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
/// <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
// This ctor is private - no validation is done here.  This is to allow the use
// of a (specific) negative value for the _lengthLimit, to indicate that there
// is no length set.  So we validate the length limit in those ctors that use an
// explicit param, otherwise we don't validate, because it could be our special
// value.
/// <summary>
///   Gets the total number of bytes run through the CRC32 calculator.
/// </summary>
///
/// <remarks>
///   This is either the total number of bytes read, or the total number of
///   bytes written, depending on the direction of this stream.
/// </remarks>
/// <summary>
///   Provides the current CRC for all blocks slurped in.
/// </summary>
/// <remarks>
///   <para>
///     The running total of the CRC is kept as data is written or read
///     through the stream.  read this property after all reads or writes to
///     get an accurate CRC for the entire stream.
///   </para>
/// </remarks>
/// <summary>
///   Indicates whether the underlying stream will be left open when the
///   <c>CrcCalculatorStream</c> is Closed.
/// </summary>
/// <remarks>
///   <para>
///     Set this at any point before calling <see cref="Stream.Close"/>.
///   </para>
/// </remarks>
/// <summary>
/// Read from the stream
/// </summary>
/// <param name="buffer">the buffer to read</param>
/// <param name="offset">the offset at which to start</param>
/// <param name="count">the number of bytes to read</param>
/// <returns>the number of bytes actually read</returns>
// Need to limit the # of bytes returned, if the stream is intended to have
// a definite length.  This is especially useful when returning a stream for
// the uncompressed data directly to the application.  The app won't
// necessarily read only the UncompressedSize number of bytes.  For example
// wrapping the stream returned from OpenReader() into a StreadReader() and
// calling ReadToEnd() on it, We can "over-read" the zip data and get a
// corrupt string.  The length limits that, prevents that problem.
// EOF
/// <summary>
/// Write to the stream.
/// </summary>
/// <param name="buffer">the buffer from which to write</param>
/// <param name="offset">the offset at which to start writing</param>
/// <param name="count">the number of bytes to write</param>
/// <summary>
/// Indicates whether the stream supports reading.
/// </summary>
/// <summary>
///   Indicates whether the stream supports seeking.
/// </summary>
/// <remarks>
///   <para>
///     Always returns false.
///   </para>
/// </remarks>
/// <summary>
/// Indicates whether the stream supports writing.
/// </summary>
/// <summary>
/// Flush the stream.
/// </summary>
/// <summary>
///   Returns the length of the underlying stream.
/// </summary>
/// <summary>
///   The getter for this property returns the total bytes read.
///   If you use the setter, it will throw
/// <see cref="NotSupportedException"/>.
/// </summary>
/// <summary>
/// Seeking is not supported on this stream. This method always throws
/// <see cref="NotSupportedException"/>
/// </summary>
/// <param name="offset">N/A</param>
/// <param name="origin">N/A</param>
/// <returns>N/A</returns>
/// <summary>
/// This method always throws
/// <see cref="NotSupportedException"/>
/// </summary>
/// <param name="value">N/A</param>
/// <summary>
/// A custom encoding class that provides encoding capabilities for the
/// 'Western European (ISO)' encoding under Silverlight.<br/>
/// This class was generated by a tool. For more information, visit
/// http://www.hardcodet.net/2010/03/silverlight-text-encoding-class-generator
/// </summary>
/// <summary>
/// Gets the name registered with the
/// Internet Assigned Numbers Authority (IANA) for the current encoding.
/// </summary>
/// <returns>
/// The IANA name for the current <see cref="System.Text.Encoding"/>.
/// </returns>
/// <summary>
/// A character that can be set in order to make the encoding class
/// more fault tolerant. If this property is set, the encoding class will
/// use this property instead of throwing an exception if an unsupported
/// byte value is being passed for decoding.
/// </summary>
/// <summary>
/// A byte value that corresponds to the <see cref="FallbackCharacter"/>.
/// It is used in encoding scenarios in case an unsupported character is
/// being passed for encoding.
/// </summary>
/// <summary>
/// Encodes a set of characters from the specified character array into the specified byte array.
/// </summary>
/// <returns>
/// The actual number of bytes written into <paramref name="bytes"/>.
/// </returns>
/// <param name="chars">The character array containing the set of characters to encode. 
/// </param><param name="charIndex">The index of the first character to encode. 
/// </param><param name="charCount">The number of characters to encode. 
/// </param><param name="bytes">The byte array to contain the resulting sequence of bytes.
/// </param><param name="byteIndex">The index at which to start writing the resulting sequence of bytes. 
/// </param>
//throw exception
/// <summary>
/// Decodes a sequence of bytes from the specified byte array into the specified character array.
/// </summary>
/// <returns>
/// The actual number of characters written into <paramref name="chars"/>.
/// </returns>
/// <param name="bytes">The byte array containing the sequence of bytes to decode. 
/// </param><param name="byteIndex">The index of the first byte to decode. 
/// </param><param name="byteCount">The number of bytes to decode. 
/// </param><param name="chars">The character array to contain the resulting set of characters. 
/// </param><param name="charIndex">The index at which to start writing the resulting set of characters. 
/// </param>
//if the byte value is not in our lookup array, fall back to default character
//throw exception
/// <summary>
/// Calculates the number of bytes produced by encoding a set of characters
/// from the specified character array.
/// </summary>
/// <returns>
/// The number of bytes produced by encoding the specified characters. This class
/// always returns the value of <paramref name="count"/>.
/// </returns>
/// <summary>
/// Calculates the number of characters produced by decoding a sequence
/// of bytes from the specified byte array.
/// </summary>
/// <returns>
/// The number of characters produced by decoding the specified sequence of bytes. This class
/// always returns the value of <paramref name="count"/>. 
/// </returns>
/// <summary>
/// Calculates the maximum number of bytes produced by encoding the specified number of characters.
/// </summary>
/// <returns>
/// The maximum number of bytes produced by encoding the specified number of characters. This
/// class always returns the value of <paramref name="charCount"/>.
/// </returns>
/// <param name="charCount">The number of characters to encode. 
/// </param>
/// <summary>
/// Calculates the maximum number of characters produced by decoding the specified number of bytes.
/// </summary>
/// <returns>
/// The maximum number of characters produced by decoding the specified number of bytes. This class
/// always returns the value of <paramref name="byteCount"/>.
/// </returns>
/// <param name="byteCount">The number of bytes to decode.</param> 
/// <summary>
/// Gets the number of characters that are supported by this encoding.
/// This property returns a maximum value of 256, as the encoding class
/// only supports single byte encodings (1 byte == 256 possible values).
/// </summary>
/// <summary>
/// This table contains characters in an array. The index within the
/// array corresponds to the encoding's mapping of bytes to characters
/// (e.g. if a byte value of 5 is used to encode the character 'x', this
/// character will be stored at the array index 5.
/// </summary>
/* byte 0 */  ,
/* byte 1 */  ,
/* byte 2 */  ,
/* byte 3 */  ,
/* byte 4 */  ,
/* byte 5 */  ,
/* byte 6 */  ,
/* byte 7 */  ,
/* byte 8 */  ,
/* byte 9 */  ,
/* byte 10 */  ,
/* byte 11 */  ,
/* byte 12 */  ,
/* byte 13 */  ,
/* byte 14 */  ,
/* byte 15 */  ,
/* byte 16 */  ,
/* byte 17 */  ,
/* byte 18 */  ,
/* byte 19 */  ,
/* byte 20 */  ,
/* byte 21 */  ,
/* byte 22 */  ,
/* byte 23 */  ,
/* byte 24 */  ,
/* byte 25 */  ,
/* byte 26 */  ,
/* byte 27 */  ,
/* byte 28 */  ,
/* byte 29 */  ,
/* byte 30 */  ,
/* byte 31 */  ,
/* byte 32 */  ,
/* byte 33 */  ,
/* byte 34 */  ,
/* byte 35 */  ,
/* byte 36 */  ,
/* byte 37 */  ,
/* byte 38 */  ,
/* byte 39 */  ,
/* byte 40 */  ,
/* byte 41 */  ,
/* byte 42 */  ,
/* byte 43 */  ,
/* byte 44 */  ,
/* byte 45 */  ,
/* byte 46 */  ,
/* byte 47 */  ,
/* byte 48 */  ,
/* byte 49 */  ,
/* byte 50 */  ,
/* byte 51 */  ,
/* byte 52 */  ,
/* byte 53 */  ,
/* byte 54 */  ,
/* byte 55 */  ,
/* byte 56 */  ,
/* byte 57 */  ,
/* byte 58 */  ,
/* byte 59 */  ,
/* byte 60 */  ,
/* byte 61 */  ,
/* byte 62 */  ,
/* byte 63 */  ,
/* byte 64 */  ,
/* byte 65 */  ,
/* byte 66 */  ,
/* byte 67 */  ,
/* byte 68 */  ,
/* byte 69 */  ,
/* byte 70 */  ,
/* byte 71 */  ,
/* byte 72 */  ,
/* byte 73 */  ,
/* byte 74 */  ,
/* byte 75 */  ,
/* byte 76 */  ,
/* byte 77 */  ,
/* byte 78 */  ,
/* byte 79 */  ,
/* byte 80 */  ,
/* byte 81 */  ,
/* byte 82 */  ,
/* byte 83 */  ,
/* byte 84 */  ,
/* byte 85 */  ,
/* byte 86 */  ,
/* byte 87 */  ,
/* byte 88 */  ,
/* byte 89 */  ,
/* byte 90 */  ,
/* byte 91 */  ,
/* byte 92 */  ,
/* byte 93 */  ,
/* byte 94 */  ,
/* byte 95 */  ,
/* byte 96 */  ,
/* byte 97 */  ,
/* byte 98 */  ,
/* byte 99 */  ,
/* byte 100 */  ,
/* byte 101 */  ,
/* byte 102 */  ,
/* byte 103 */  ,
/* byte 104 */  ,
/* byte 105 */  ,
/* byte 106 */  ,
/* byte 107 */  ,
/* byte 108 */  ,
/* byte 109 */  ,
/* byte 110 */  ,
/* byte 111 */  ,
/* byte 112 */  ,
/* byte 113 */  ,
/* byte 114 */  ,
/* byte 115 */  ,
/* byte 116 */  ,
/* byte 117 */  ,
/* byte 118 */  ,
/* byte 119 */  ,
/* byte 120 */  ,
/* byte 121 */  ,
/* byte 122 */  ,
/* byte 123 */  ,
/* byte 124 */  ,
/* byte 125 */  ,
/* byte 126 */  ,
/* byte 127 */  ,
/* byte 128 */  ,
/* byte 129 */  ,
/* byte 130 */  ,
/* byte 131 */  ,
/* byte 132 */  ,
/* byte 133 */  ,
/* byte 134 */  ,
/* byte 135 */  ,
/* byte 136 */  ,
/* byte 137 */  ,
/* byte 138 */  ,
/* byte 139 */  ,
/* byte 140 */  ,
/* byte 141 */  ,
/* byte 142 */  ,
/* byte 143 */  ,
/* byte 144 */  ,
/* byte 145 */  ,
/* byte 146 */  ,
/* byte 147 */  ,
/* byte 148 */  ,
/* byte 149 */  ,
/* byte 150 */  ,
/* byte 151 */  ,
/* byte 152 */  ,
/* byte 153 */  ,
/* byte 154 */  ,
/* byte 155 */  ,
/* byte 156 */  ,
/* byte 157 */  ,
/* byte 158 */  ,
/* byte 159 */  ,
/* byte 160 */  ,
/* byte 161 */  ,
/* byte 162 */  ,
/* byte 163 */  ,
/* byte 164 */  ,
/* byte 165 */  ,
/* byte 166 */  ,
/* byte 167 */  ,
/* byte 168 */  ,
/* byte 169 */  ,
/* byte 170 */  ,
/* byte 171 */  ,
/* byte 172 */  ,
/* byte 173 */  ,
/* byte 174 */  ,
/* byte 175 */  ,
/* byte 176 */  ,
/* byte 177 */  ,
/* byte 178 */  ,
/* byte 179 */  ,
/* byte 180 */  ,
/* byte 181 */  ,
/* byte 182 */  ,
/* byte 183 */  ,
/* byte 184 */  ,
/* byte 185 */  ,
/* byte 186 */  ,
/* byte 187 */  ,
/* byte 188 */  ,
/* byte 189 */  ,
/* byte 190 */  ,
/* byte 191 */  ,
/* byte 192 */  ,
/* byte 193 */  ,
/* byte 194 */  ,
/* byte 195 */  ,
/* byte 196 */  ,
/* byte 197 */  ,
/* byte 198 */  ,
/* byte 199 */  ,
/* byte 200 */  ,
/* byte 201 */  ,
/* byte 202 */  ,
/* byte 203 */  ,
/* byte 204 */  ,
/* byte 205 */  ,
/* byte 206 */  ,
/* byte 207 */  ,
/* byte 208 */  ,
/* byte 209 */  ,
/* byte 210 */  ,
/* byte 211 */  ,
/* byte 212 */  ,
/* byte 213 */  ,
/* byte 214 */  ,
/* byte 215 */  ,
/* byte 216 */  ,
/* byte 217 */  ,
/* byte 218 */  ,
/* byte 219 */  ,
/* byte 220 */  ,
/* byte 221 */  ,
/* byte 222 */  ,
/* byte 223 */  ,
/* byte 224 */  ,
/* byte 225 */  ,
/* byte 226 */  ,
/* byte 227 */  ,
/* byte 228 */  ,
/* byte 229 */  ,
/* byte 230 */  ,
/* byte 231 */  ,
/* byte 232 */  ,
/* byte 233 */  ,
/* byte 234 */  ,
/* byte 235 */  ,
/* byte 236 */  ,
/* byte 237 */  ,
/* byte 238 */  ,
/* byte 239 */  ,
/* byte 240 */  ,
/* byte 241 */  ,
/* byte 242 */  ,
/* byte 243 */  ,
/* byte 244 */  ,
/* byte 245 */  ,
/* byte 246 */  ,
/* byte 247 */  ,
/* byte 248 */  ,
/* byte 249 */  ,
/* byte 250 */  ,
/* byte 251 */  ,
/* byte 252 */  ,
/* byte 253 */  ,
/* byte 254 */  ,
/* byte 255 */  
/// <summary>
/// This dictionary is used to resolve byte values for a given character.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\AssemblyInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ChildCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides a collection of child objects for a content item.
/// 
/// Links from a child object to its parent are maintained as the collection contents are modified.
/// </summary>
/// <typeparam name="TParent"></typeparam>
/// <typeparam name="TChild"></typeparam>
/// <summary>
/// Creates an instance of ChildCollection.
/// </summary>
/// <param name="parent">Parent object of the child objects returned in the collection.</param>
/// <summary>
/// Removes all children from the collection.
/// </summary>
// Remove parent reference from each child before clearing
/// <summary>
/// Gets the parent of a child object.
/// </summary>
/// <param name="child">The child of the parent being retrieved.</param>
/// <returns>The parent of the child object.</returns>
/// <summary>
/// Inserts a child object into the collection at the specified location.
/// </summary>
/// <param name="index">The position in the collection.</param>
/// <param name="item">The child object being inserted.</param>
// Make sure we have a 
/// <summary>
/// Removes a child object from the collection.
/// </summary>
/// <param name="index">The index of the item being removed.</param>
/// <summary>
/// Modifies the value of the child object at the specified location.
/// </summary>
/// <param name="index">The index of the child object being modified.</param>
/// <param name="item">The new value for the child object.</param>
/// <summary>
/// Modifies the value of the parent object of the specified child object.
/// </summary>
/// <param name="child">The child of the parent being modified.</param>
/// <param name="parent">The new value for the parent object.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ContentBuildLogger.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for reporting informational messages or warnings from content importers and processors.
/// Do not use this class to report errors. Instead, report errors by throwing a PipelineException or InvalidContentException.
/// </summary>
/// <summary>
/// Gets or sets the base reference path used when reporting errors during the content build process.
/// </summary>
/// <summary>
/// Initializes a new instance of ContentBuildLogger.
/// </summary>
/// <summary>
/// Returns the relative path to the filename from the root directory.
/// </summary>
/// <param name="filename">The target filename.</param>
/// <param name="rootDirectory">The root directory. If not specified, the current directory is used.</param>
/// <returns>The relative path.</returns>
/// <summary>
/// Gets the filename currently being processed, for use in warning and error messages.
/// </summary>
/// <param name="contentIdentity">Identity of a content item. If specified, GetCurrentFilename uses this value to refine the search. If no value is specified, the current PushFile state is used.</param>
/// <returns>Name of the file being processed.</returns>
/// <summary>
/// Outputs a high-priority status message from a content importer or processor.
/// </summary>
/// <param name="message">Message being reported.</param>
/// <param name="messageArgs">Arguments for the reported message.</param>
/// <summary>
/// Outputs a low priority status message from a content importer or processor.
/// </summary>
/// <param name="message">Message being reported.</param>
/// <param name="messageArgs">Arguments for the reported message.</param>
/// <summary>
/// Outputs a warning message from a content importer or processor.
/// </summary>
/// <param name="helpLink">Link to an existing online help topic containing related information.</param>
/// <param name="contentIdentity">Identity of the content item that generated the message.</param>
/// <param name="message">Message being reported.</param>
/// <param name="messageArgs">Arguments for the reported message.</param>
/// <summary>
/// Outputs a message indicating that a content asset has completed processing.
/// </summary>
/// <summary>
/// Outputs a message indicating that a content asset has begun processing.
/// All logger warnings or error exceptions from this time forward to the next PopFile call refer to this file.
/// </summary>
/// <param name="filename">Name of the file containing future messages.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ContentIdentity.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides properties describing the origin of the game asset, such as the original source file and creation tool. This information is used for error reporting, and by processors that need to determine from what directory the asset was originally loaded.
/// </summary>
/// <summary>
/// Gets or sets the specific location of the content item within the larger source file.
/// </summary>
/// <summary>
/// Gets or sets the file name of the asset source.
/// </summary>
/// <summary>
/// Gets or sets the creation tool of the asset.
/// </summary>
/// <summary>
/// Initializes a new instance of ContentIdentity.
/// </summary>
/// <summary>
/// Initializes a new instance of ContentIdentity with the specified values.
/// </summary>
/// <param name="sourceFilename">The absolute path to the file name of the asset source.</param>
/// <summary>
/// Initializes a new instance of ContentIdentity with the specified values.
/// </summary>
/// <param name="sourceFilename">The absolute path to the file name of the asset source.</param>
/// <param name="sourceTool">The name of the digital content creation (DCC) tool that created the asset.</param>
/// <summary>
/// Initializes a new instance of ContentIdentity with the specified values.
/// </summary>
/// <param name="sourceFilename">The absolute path to the file name of the asset source.</param>
/// <param name="sourceTool">The name of the digital content creation (DCC) tool that created the asset.</param>
/// <param name="fragmentIdentifier">Specific location of the content item within the larger source file. For example, this could be a line number in the file.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ContentImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Implements a file format importer for use with game assets.
/// Importers, either provided by the framework or written by a developer, must derive from ContentImporter, as well as being marked with a ContentImporterAttribute.
/// An importer should produce results in the standard intermediate object model. If an asset has information not supported by the object model, the importer should output it as opaque data (key/value attributes attached to the relevant object). By following this procedure, a content pipeline can access specialized digital content creation (DCC) tool information, even when that information has not been fully standardized into the official object model.
/// You can also design custom importers that accept and import types containing specific third-party extensions to the object model.
/// </summary>
/// <summary>
/// Initializes a new instance of ContentImporter.
/// </summary>
/// <summary>
/// Called by the framework when importing a game asset. This is the method called by XNA when an asset is to be imported into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
/// <summary>
/// Called by the framework when importing a game asset. This is the method called by XNA when an asset is to be imported into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ContentImporterAttribute.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides properties that identify and provide metadata about the importer, such as supported file extensions and caching information.
/// Importers are required to initialize this attribute.
/// </summary>
/// <summary>
/// Gets and sets the caching of the content during importation.
/// </summary>
/// <summary>
/// Gets or sets the name of the default processor for content read by this importer.
/// </summary>
/// <summary>
/// Gets or sets the string representing the importer in a user interface. This name is not used by the content pipeline and should not be passed to the BuildAssets task (a custom MSBuild task used by XNA Game Studio). It is used for display purposes only.
/// </summary>
/// <summary>
/// Gets the supported file name extensions of the importer.
/// </summary>
/// <summary>
/// Initializes a new instance of ContentImporterAttribute and sets the file name extension supported by the importer.
/// </summary>
/// <param name="fileExtension">The list of file name extensions supported by the importer. Prefix each extension with a '.'.</param>
/// <summary>
/// Initializes a new instance of ContentImporterAttribute and sets the file name extensions supported by the importer.
/// </summary>
/// <param name="fileExtensions">The list of file name extensions supported by the importer. Prefix each extension with a '.'.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ContentImporterContext.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides properties that define logging behavior for the importer.
/// </summary>
/// <summary>
/// The absolute path to the root of the build intermediate (object) directory.
/// </summary>
/// <summary>
/// Gets the logger for an importer.
/// </summary>
/// <summary>
/// The absolute path to the root of the build output (binaries) directory.
/// </summary>
/// <summary>
/// Initializes a new instance of ContentImporterContext.
/// </summary>
/// <summary>
/// Adds a dependency to the specified file. This causes a rebuild of the file, when modified, on subsequent incremental builds.
/// </summary>
/// <param name="filename">Name of an asset file.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ContentItem.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides properties that define various aspects of content stored using the intermediate file format of the XNA Framework.
/// </summary>
/// <summary>
/// Gets or sets the identity of the content item.
/// </summary>
/// <summary>
/// Gets or sets the name of the content item.
/// </summary>
/// <summary>
/// Gets the opaque data of the content item.
/// </summary>
/// <summary>
/// Initializes a new instance of ContentItem.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ContentProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides a base class to use when developing custom processor components. All processors must derive from this class.
/// </summary>
/// <summary>
/// Initializes a new instance of the ContentProcessor class.
/// </summary>
/// <summary>
/// Processes the specified input data and returns the result.
/// </summary>
/// <param name="input">Existing content object being processed.</param>
/// <param name="context">Contains any required custom process parameters.</param>
/// <returns>A typed object representing the processed input.</returns>
/// <summary>
/// Gets the expected object type of the input parameter to IContentProcessor.Process.
/// </summary>
/// <summary>
/// Gets the object type returned by IContentProcessor.Process.
/// </summary>
/// <summary>
/// Processes the specified input data and returns the result.
/// </summary>
/// <param name="input">Existing content object being processed.</param>
/// <param name="context">Contains any required custom process parameters.</param>
/// <returns>The processed input.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ContentProcessorAttribute.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets any existing content processor components.
/// </summary>
/// <summary>
/// Gets or sets the string representing the processor in a user interface. This name is not used by the content pipeline and should not be passed to the BuildAssets task (a custom MSBuild task used by XNA Game Studio). It is used for display purposes only.
/// </summary>
/// <summary>
/// Initializes an instance of ContentProcessorAttribute.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ContentProcessorContext.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides access to custom processor parameters, methods for converting member data, and triggering nested builds.
/// </summary>
/// <summary>
/// Gets the name of the current content build configuration.
/// </summary>
/// <summary>
/// Gets the path of the directory that will contain any intermediate files generated by the content processor.
/// </summary>
/// <summary>
/// Gets the logger interface used for status messages or warnings.
/// </summary>
/// <summary>
/// Gets the ContentIdentity representing the source asset imported.
/// </summary>
/// <summary>
/// Gets the output path of the content processor.
/// </summary>
/// <summary>
/// Gets the output file name of the content processor.
/// </summary>
/// <summary>
/// Gets the collection of parameters used by the content processor.
/// </summary>
/// <summary>
/// Gets the current content build target platform.
/// </summary>
/// <summary>
/// Gets the current content build target profile.
/// </summary>
/// <summary>
/// Initializes a new instance of ContentProcessorContext.
/// </summary>
/// <summary>
/// Adds a dependency to the specified file. This causes a rebuild of the file, when modified, on subsequent incremental builds.
/// </summary>
/// <param name="filename">Name of an asset file.</param>
/// <summary>
/// Add a file name to the list of related output files maintained by the build item. This allows tracking build items that build multiple output files.
/// </summary>
/// <param name="filename">The name of the file.</param>
/// <summary>
/// Initiates a nested build of the specified asset and then loads the result into memory.
/// </summary>
/// <typeparam name="TInput">Type of the input.</typeparam>
/// <typeparam name="TOutput">Type of the converted output.</typeparam>
/// <param name="sourceAsset">Reference to the source asset.</param>
/// <param name="processorName">Optional processor for this content.</param>
/// <returns>Copy of the final converted content.</returns>
/// <remarks>An example of usage would be a mesh processor calling BuildAndLoadAsset to build any associated textures and replace the original .tga file references with an embedded copy of the converted texture.</remarks>
/// <summary>
/// Initiates a nested build of the specified asset and then loads the result into memory.
/// </summary>
/// <typeparam name="TInput">Type of the input.</typeparam>
/// <typeparam name="TOutput">Type of the converted output.</typeparam>
/// <param name="sourceAsset">Reference to the source asset.</param>
/// <param name="processorName">Optional processor for this content.</param>
/// <param name="processorParameters">Optional collection of named values available as input to the content processor.</param>
/// <param name="importerName">Optional importer for this content.</param>
/// <returns>Copy of the final converted content.</returns>
/// <remarks>An example of usage would be a mesh processor calling BuildAndLoadAsset to build any associated textures and replace the original .tga file references with an embedded copy of the converted texture.</remarks>
/// <summary>
/// Initiates a nested build of an additional asset.
/// </summary>
/// <typeparam name="TInput">Type of the input.</typeparam>
/// <typeparam name="TOutput">Type of the output.</typeparam>
/// <param name="sourceAsset">Reference to the source asset.</param>
/// <param name="processorName">Optional processor for this content.</param>
/// <returns>Reference to the final compiled content. The build work is not required to complete before returning. Therefore, this file may not be up to date when BuildAsset returns but it will be available for loading by the game at runtime.</returns>
/// <remarks>An example of usage for BuildAsset is being called by a mesh processor to request that any related textures used are also built, replacing the original TGA file references with new references to the converted texture files.</remarks>
/// <summary>
/// Initiates a nested build of an additional asset.
/// </summary>
/// <typeparam name="TInput">Type of the input.</typeparam>
/// <typeparam name="TOutput">Type of the output.</typeparam>
/// <param name="sourceAsset">Reference to the source asset.</param>
/// <param name="processorName">Optional processor for this content.</param>
/// <param name="processorParameters">Optional collection of named values available as input to the content processor.</param>
/// <param name="importerName">Optional importer for this content.</param>
/// <param name="assetName">Optional name of the final compiled content.</param>
/// <returns>Reference to the final compiled content. The build work is not required to complete before returning. Therefore, this file may not be up to date when BuildAsset returns but it will be available for loading by the game at runtime.</returns>
/// <remarks>An example of usage for BuildAsset is being called by a mesh processor to request that any related textures used are also built, replacing the original TGA file references with new references to the converted texture files.</remarks>
/// <summary>
/// Converts a content item object using the specified content processor.
/// </summary>
/// <typeparam name="TInput">Type of the input content.</typeparam>
/// <typeparam name="TOutput">Type of the converted output.</typeparam>
/// <param name="input">Source content to be converted.</param>
/// <param name="processorName">Optional processor for this content.</param>
/// <returns>Reference of the final converted content.</returns>
/// <summary>
/// Converts a content item object using the specified content processor.
/// </summary>
/// <typeparam name="TInput">Type of the input content.</typeparam>
/// <typeparam name="TOutput">Type of the converted output.</typeparam>
/// <param name="input">Source content to be converted.</param>
/// <param name="processorName">Optional processor for this content.</param>
/// <param name="processorParameters">Optional parameters for the processor.</param>
/// <returns>Reference of the final converted content.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ContentStats.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Content building statistics for a single source content file.
/// </summary>
/// <summary>
/// The absolute path to the source content file.
/// </summary>
/// <summary>
/// The absolute path to the destination content file.
/// </summary>
/// <summary>
/// The content processor type name.
/// </summary>
/// <summary>
/// The content type name.
/// </summary>
/// <summary>
/// The source file size in bytes.
/// </summary>
/// <summary>
/// The destination file size in bytes.
/// </summary>
/// <summary>
/// The content build time in seconds.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ContentStatsCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A collection of content building statistics for use in diagnosing content issues.
/// </summary>
/// <summary>
/// Optionally used for copying stats that were stored in another collection.
/// </summary>
/// <summary>
///  The internal content statistics dictionary.
/// </summary>
/// <summary>
///  Get the content statistics for a source file and returns true if found.
/// </summary>
/// <summary>
/// Clears all the content statistics.
/// </summary>
/// <summary>
/// Store content building stats for a source file.
/// </summary>
/// <param name="sourceFile">The absolute path to the source asset file.</param>
/// <param name="destFile">The absolute path to the destination content file.</param>
/// <param name="processorType">The type name of the content processor.</param>
/// <param name="contentType">The content type object.</param>
/// <param name="buildSeconds">The build time in seconds.</param>
/// <summary>
/// Copy content building stats to the current collection from the PreviousStats.
/// </summary>
/// <param name="sourceFile">The absolute path to the source asset file.</param>
/// <summary>
/// Load the content statistics from a folder.
/// </summary>
/// <param name="outputPath">The folder where the .mgstats file can be found.</param>
/// <returns>Returns the content statistics or an empty collection.</returns>
// The first line is the CSV header... if it doesn't match then
// assume the data is invalid or changed formats.
// Assume the file didn't exist or was incorrectly
// formatted... either way we start from fresh data.
/// <summary>
/// Write the content statistics to a folder with the .mgstats file name.
/// </summary>
/// <param name="outputPath">The folder to write the .mgstats file.</param>
// ensure the output folder exists
// Sort the items alphabetically to ensure a consistent output
// and better mergability of the resulting file.
/// <summary>
/// Merge in statistics from PreviousStats that do not exist in this collection.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\DdsLoader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Loader class for DDS format image files.
/// </summary>
// Required in every DDS file
// Required in every DDS file
// Required in every DDS file
// Required when pitch is provided for an uncompressed texture
// Required in every DDS file
// Required in a mipmapped texture
// Required when pitch is provided for a compressed texture
// Required in a depth texture
// Optional; must be used on any file that contains more than one surface (a mipmap, a cubic environment map, or mipmapped volume texture)
// Optional; should be used for a mipmap
// Required
// Uncompressed format
// Format contains RGB and A
// Format contains RGB only
//else if (pixelFormat.dwFlags.HasFlag(Ddpf.Luminance))
//{
//    return SurfaceFormat.Alpha8;
//}
// It is recommended that the dwPitchOrLinearSize field is ignored and we calculate it ourselves
// https://msdn.microsoft.com/en-us/library/bb943991.aspx
// Read signature ("DDS ")
// Read DDS_HEADER
// The next 11 DWORDs are reserved and unused
// Read DDS_PIXELFORMAT
// Continue reading DDS_HEADER
// dwCaps3 unused
// dwCaps4 unused
// dwReserved2 unused
// Check for the existence of the DDS_HEADER_DXT10 struct next
// A 24-bit format is slightly different
// Fill or add alpha with opaque
// Write signature ("DDS ")
// 11 unsed and reserved DWORDS.
// Write the DDS_PIXELFORMAT
// Continue reading DDS_HEADER
// More reserved unused DWORDs.
// Write out the face data.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\EffectImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for reading effect (.fx) files for use in the Content Pipeline.
/// </summary>
/// <summary>
/// Initializes a new instance of EffectImporter.
/// </summary>
/// <summary>
/// Called by the XNA Framework when importing an .fx file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ExternalReference.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Specifies external references to a data file for the content item.
/// 
/// While the object model is instantiated, reference file names are absolute. When the file containing the external reference is serialized to disk, file names are relative to the file. This allows movement of the content tree to a different location without breaking internal links.
/// </summary>
/// <typeparam name="T"></typeparam>
/// <summary>
/// Gets and sets the file name of an ExternalReference.
/// </summary>
/// <summary>
/// Initializes a new instance of ExternalReference.
/// </summary>
/// <summary>
/// Initializes a new instance of ExternalReference.
/// </summary>
/// <param name="filename">The name of the referenced file.</param>
/// <summary>
/// Initializes a new instance of ExternalReference, specifying the file path relative to another content item.
/// </summary>
/// <param name="filename">The name of the referenced file.</param>
/// <param name="relativeToContent">The content that the path specified in filename is relative to.</param>
// The intermediate serializer from XNA has the external reference
// path walking up to the content project directory and then back
// down to the asset path. We don't appear to have any way to do
// that from here, so we'll work with the absolute path and let the
// higher level process sort out any relative paths they need.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ExternalTool.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Helper to run an external tool installed in the system. Useful for when
/// we don't want to package the tool ourselves (ffmpeg) or it's provided
/// by a third party (console manufacturer).
/// </summary>
// This particular case is likely to be the most common and thus
// warrants its own specific error message rather than falling
// back to a general exception from Process.Start()
// We can't reference ref or out parameters from within
// lambdas (for the thread functions), so we have to store
// the data in a temporary variable and then assign these
// variables to the out parameters.
// We have to run these in threads, because using ReadToEnd
// on one stream can deadlock if the other stream's buffer is
// full.
// Make sure interactive prompts don't block.
/// <summary>
/// Returns the fully-qualified path for a command, searching the system path if necessary.
/// </summary>
/// <remarks>
/// It's apparently necessary to use the full path when running on some systems.
/// </remarks>
// Expand any environment variables.
// If we have a full path just pass it through.
// For Linux check specific subfolder
// For Mac check specific subfolder
// We don't have a full path, so try running through the system path to find it.
/// <summary>   
/// Ensures the specified executable has the executable bit set.  If the    
/// executable doesn't have the executable bit set on Linux or Mac OS, then 
/// Mono will refuse to execute it. 
/// </summary>  
/// <param name="path">The full path to the executable.</param> 
// This platform may not have chmod in the path, in which case we can't 
// do anything reasonable here. 
/// <summary>
/// Safely deletes the file if it exists.
/// </summary>
/// <param name="filePath">The path to the file to delete.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\FbxImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for reading AutoDesk (.fbx) files for use in the Content Pipeline.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\FontDescriptionImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for reading .spritefont files for use in the Content Pipeline.
/// </summary>
/// <summary>
/// Initializes a new instance of FontDescriptionImporter.
/// </summary>
/// <summary>
/// Called by the XNA Framework when importing a .spritefont file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\H264Importer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\IContentImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Accesses a statically typed ContentImporter instance from generic code using dynamic typing.
/// </summary>
/// <summary>
/// Imports an asset from the specified file.
/// </summary>
/// <param name="filename">Name of the game asset file.</param>
/// <param name="context">A ContentImporterContext class containing information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\IContentProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for accessing a statically typed ContentProcessor subclass, using dynamically typed object data.
/// </summary>
/// <summary>
/// Gets the expected object type of the input parameter to IContentProcessor.Process.
/// </summary>
/// <summary>
/// Gets the object type returned by IContentProcessor.Process.
/// </summary>
/// <summary>
/// Processes the specified input data and returns the result.
/// </summary>
/// <param name="input">Existing content object being processed.</param>
/// <param name="context">Contains any required custom process parameters.</param>
/// <returns>An object representing the processed input.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\InvalidContentException.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Thrown when errors are encountered in content during processing.
/// </summary>
/// <summary>
/// Gets or sets the identity of the content item that caused the exception.
/// </summary>
/// <summary>
/// Initializes a new instance of the InvalidContentException class
/// </summary>
/// <summary>
/// Initializes a new instance of the InvalidContentException class with information on serialization and streaming context for the related content item.
/// </summary>
/// <param name="serializationInfo">Information necessary for serialization and deserialization of the content item.</param>
/// <param name="streamingContext">Information necessary for the source and destination of a given serialized stream. Also provides an additional caller-defined context.</param>
/// <summary>
/// Initializes a new instance of the InvalidContentException class with the specified error message.
/// </summary>
/// <param name="message">A message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the InvalidContentException class with the specified error message and the identity of the content throwing the exception.
/// </summary>
/// <param name="message">A message that describes the error.</param>
/// <param name="contentIdentity">Information about the content item that caused this error, including the file name. In some cases, a location within the file (of the problem) is specified.</param>
/// <summary>
/// Initializes a new instance of the InvalidContentException class with the specified error message, the identity of the content throwing the exception, and a reference to the inner exception that is the cause of this exception.
/// </summary>
/// <param name="message">A message that describes the error.</param>
/// <param name="contentIdentity">Information about the content item that caused this error, including the file name. In some cases, a location within the file (of the problem) is specified.</param>
/// <param name="innerException">The exception that is the cause of the current exception. If innerException is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
/// <summary>
/// Initializes a new instance of the InvalidContentException class with the specified error message and a reference to the inner exception that is the cause of this exception.
/// </summary>
/// <param name="message">A message that describes the error.</param>
/// <param name="innerException">The exception that is the cause of the current exception. If innerException is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
/// <summary>
/// When overridden in a derived class, returns information about the exception.
/// In addition to the base behavior, this method provides serialization functionality.
/// </summary>
/// <param name="info">Information necessary for serialization and deserialization of the content item.</param>
/// <param name="context">Information necessary for the source and destination of a given serialized stream. Also provides an additional caller-defined context.</param>
// TODO: Complete me...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\LoadedTypeCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A helper for collecting instances of a particular type
/// by scanning the types in loaded assemblies.
/// </summary>
// Scan the already loaded assemblies.
// Hook into assembly loading events to gather any new
// enumeration types that are found.
// Initialize the list on first use.
// If the assembly doesn't reference our assembly then it
// cannot contain this type... so skip scanning it.
// Create an instance of the type and add it to our list.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Mp3Importer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for reading MP3 audio files for use in the Content Pipeline.
/// </summary>
/// <summary>
/// Initializes a new instance of Mp3Importer.
/// </summary>
/// <summary>
/// Called by the XNA Framework when importing an MP3 audio file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\NamedValueDictionary.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Initializes an instance of NamedValueDictionary.
/// </summary>
/// <summary>
/// Adds the specified key and value to the dictionary.
/// </summary>
/// <param name="key">Identity of the key of the new data pair.</param>
/// <param name="value">The value of the new data pair.</param>
/// <summary>
/// Determines whether the specified key is present in the dictionary.
/// </summary>
/// <param name="key">Identity of a key.</param>
/// <returns></returns>
/// <summary>
/// Gets all keys contained in the dictionary.
/// </summary>
/// <summary>
/// Removes the specified key and value from the dictionary.
/// </summary>
/// <param name="key">Identity of the key to be removed.</param>
/// <returns>true if the value is present; false otherwise.</returns>
/// <summary>
/// Gets the value associated with the specified key.
/// </summary>
/// <param name="key">Identity of the key of the element whose value is to be retrieved.</param>
/// <param name="value">The current value of the element.</param>
/// <returns>true if the value is present; false otherwise.</returns>
/// <summary>
/// Specifies the type hint for the intermediate serializer. Values of this type do not store an explicit type attribute in the related XML source.
/// </summary>
/// <summary>
/// Gets all values contained in the dictionary.
/// </summary>
/// <summary>
/// Gets or sets the specified item.
/// </summary>
/// <param name="key">Identity of a key.</param>
/// <summary>
/// Adds an item to the collection.
/// </summary>
/// <param name="item">The item to add to the collection.</param>
/// <summary>
/// Removes all keys and values from the dictionary.
/// </summary>
/// <summary>
/// Determines whether the collection contains a specific value.
/// </summary>
/// <param name="item">The object to locate in the collection.</param>
/// <returns>true if the collection contains the object; false otherwise.</returns>
/// <summary>
/// Copies the elements of the collection to an array, starting at a specified index.
/// </summary>
/// <param name="array">The destination array.</param>
/// <param name="arrayIndex">The index at which to begin the copy.</param>
/// <summary>
/// Gets the number of items in the dictionary.
/// </summary>
/// <summary>
/// Gets a value indicating if this object is read-only.
/// </summary>
/// <summary>
/// Removes the first occurrence of the specified object from the collection.
/// </summary>
/// <param name="item">The item to remove from the collection.</param>
/// <returns>true if the item was successfully removed from the collection; false otherwise.</returns>
/// <summary>
/// Gets an enumerator that iterates through items in a dictionary.
/// </summary>
/// <returns>Enumerator for iterating through the dictionary.</returns>
/// <summary>
/// Returns an enumerator that can iterate through this collection.
/// </summary>
/// <returns>An enumerator that can iterate through this collection</returns>
/// <summary>
/// Adds an element to the dictionary.
/// </summary>
/// <param name="key">Identity of the key of the new element.</param>
/// <param name="value">The value of the new element.</param>
/// <summary>
/// Removes all elements from the dictionary.
/// </summary>
/// <summary>
/// Removes the specified element from the dictionary.
/// </summary>
/// <param name="key">Identity of the key of the data pair to be removed.</param>
/// <returns>true if the value is present; false otherwise.</returns>
/// <summary>
/// Modifies the value of an existing element.
/// </summary>
/// <param name="key">Identity of the element to be modified.</param>
/// <param name="value">The value to be set.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\OggImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for reading .ogg audio files for use in the Content Pipeline.
/// </summary>
/// <summary>
/// Called by the XNA Framework when importing an ogg audio file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\OpaqueDataDictionary.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Get the value for the specified key
/// </summary>
/// <key>The key of the item to retrieve.</key>
/// <defaultValue>The default value to return if the key does not exist.</defaultValue>
/// <returns>The item cast as T, or the default value if the item is not present in the dictonary.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\OpenAssetImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Collada
// glTF
// Blender 3D
// 3ds Max 3DS
// 3ds Max ASE
// Wavefront Object
// Industry Foundation Classes (IFC/Step)
// XGL
// Stanford Polygon Library
// AutoCAD DXF
// LightWave
// LightWave Scene
// Modo
// Stereolithography
// AC3D
// Milkshape 3D
// TrueSpace
// Biovision BVH
// CharacterStudio Motion
// Irrlicht Mesh
// Irrlicht Scene
// Quake I, 3D GameStudio (3DGS)
// Quake II
// Quake III Mesh
// Quake III Map/BSP
// Return to Castle Wolfenstein
// Doom 3
// Valve Model 
// Open Game Engine Exchange
// Unreal
// BlitzBasic 3D
// Quick3D
// Neutral File Format, Sense8 WorldToolKit
// Object File Format
// Terragen Terrain
// 3D GameStudio (3DGS) Terrain
// Izware Nendo
// Assimp has a few limitations (not all FBX files are supported):
// FBX files reference objects using IDs. Therefore, it is possible to resolve
// bones even if multiple bones/nodes have the same name. But Assimp references
// bones only by name!
// --> Limitation #1: A model cannot have more than one skeleton!
// --> Limitation #2: Bone names need to be unique!
//
// Bones are represented by regular nodes, but there is no flag indicating whether
// a node is a bone. A mesh in Assimp references deformation bones (= bones that
// affect vertices) by name. That means, we can identify the nodes that represent
// deformation bones. But there is no way to identify helper bones (= bones that 
// belong to the skeleton, but do not affect vertices). As described in 
// http://assimp.sourceforge.net/lib_html/data.html and 
// http://gamedev.stackexchange.com/questions/26382/i-cant-figure-out-how-to-animate-my-loaded-model-with-assimp/26442#26442
// we can only guess which nodes belong to a skeleton:
// --> Limitation #3: The skeleton needs to be a direct child of the root node or
//                    the mesh node!
//
// Node.Transform is irrelevant for bones. This transform is just the pose of the
// bone at the time of the export. This could be one of the animation frames. It
// is not necessarily the bind pose (rest pose)! For example, XNA's Dude.fbx does
// NOT store the skeleton in bind pose.
// The correct transform is stored in Mesh.Bones[i].OffsetMatrix. However, this
// information is only available for deformation bones, not for helper bones.
// --> Limitation #4: The skeleton either must not contain helper bones, or it must
//                    be guaranteed that the skeleton is exported in bind pose!
//
// An FBX file does not directly store all animation values. In some FBX scene it
// is insufficient to simply read the animation data from the file. Instead, the
// animation properties of all relevant objects in the scene need to be evaluated.
// For example, some animations are the result of the current skeleton pose + the
// current animation. The current skeleton pose is not imported/processed by XNA.
// Assimp does not include an "animation evaluater" that automatically bakes these
// animations.
// --> Limitation #5: All bones included in an animation need to be key framed.
//                    (There is no automatic evaluation.)
//
// In FBX it is possible to define animations curves for some transform components
// (e.g. translation X and Y) and leave other components (e.g. translation Z) undefined.
// Assimp does not pick the right defaults for undefined components.
// --> Limitation #6: When scale, rotation, or translation is animated, all components
//                    X, Y, Z need to be key framed.
/// <summary>Defines the frame for local scale/rotation/translation of FBX nodes.</summary>
/// <remarks>
/// <para>
/// The transformation pivot defines the frame for local scale/rotation/translation. The
/// local transform of a node is:
/// </para>
/// <para>
/// Local Transform = Translation * RotationOffset * RotationPivot * PreRotation
///                   * Rotation * PostRotation * RotationPivotInverse * ScalingOffset
///                   * ScalingPivot * Scaling * ScalingPivotInverse
/// </para>
/// <para>
/// where the matrix multiplication order is right-to-left.
/// </para>
/// <para>
/// 3ds max uses three additional transformations:
/// </para>
/// <para>
/// Local Transform = Translation * Rotation * Scaling
///                   * GeometricTranslation * GeometricRotation * GeometricScaling
/// </para>
/// <para>
/// Transformation pivots are stored per FBX node. When Assimp hits an FBX node with
/// a transformation pivot it generates additional nodes named
/// </para>
/// <para>
///   <i>OriginalName</i>_$AssimpFbx$_<i>TransformName</i>
/// </para>
/// <para>
/// where <i>TransformName</i> is one of: 
/// </para>
/// <para>
///   Translation, RotationOffset, RotationPivot, PreRotation, Rotation, PostRotation,
///   RotationPivotInverse, ScalingOffset, ScalingPivot, Scaling, ScalingPivotInverse,
///   GeometricTranslation, GeometricRotation, GeometricScaling
/// </para>
/// </remarks>
/// <seealso href="http://download.autodesk.com/us/fbx/20112/FBX_SDK_HELP/index.html?url=WS1a9193826455f5ff1f92379812724681e696651.htm,topicNumber=d0e7429"/>
/// <seealso href="http://area.autodesk.com/forum/autodesk-fbx/fbx-sdk/the-makeup-of-the-local-matrix-of-an-kfbxnode/"/>
// XNA Content importer
// Assimp scene
// The names and offset matrices of all deformation bones.
// The node that represents the root bone.
// All nodes attached to the root bone.
// The transformation pivots.
// XNA content
// This is used to enable backwards compatibility with
// XNA providing a model as expected from the original
// FbxImporter and XImporter.
/// <summary>
/// Default constructor.
/// </summary>
/// <summary>
/// This disables some Assimp model loading features so that
/// the resulting content is the same as what the XNA FbxImporter 
/// </summary>
// FBXPreservePivotsConfig(false) can be set to remove transformation
// pivots. However, Assimp does not automatically correct animations!
// --> Leave default settings, handle transformation pivots explicitly.
//importer.SetConfig(new Assimp.Configs.FBXPreservePivotsConfig(false));
// Set flag to remove degenerate faces (points and lines).
// This flag is very important when PostProcessSteps.FindDegenerates is used
// because FindDegenerates converts degenerate triangles to points and lines!
// Note about Assimp post-processing:
// Keep post-processing to a minimum. The ModelImporter should import
// the model as is. We don't want to lose any information, i.e. empty
// nodes shoud not be thrown away, meshes/materials should not be merged,
// etc. Custom model processors may depend on this information!
// Required for Direct3D
// Required for Direct3D
// Unused: 
//PostProcessSteps.CalculateTangentSpace
//PostProcessSteps.Debone |
//PostProcessSteps.FindInstances |      // No effect + slow?
//PostProcessSteps.FixInFacingNormals |
//PostProcessSteps.GenerateNormals |
//PostProcessSteps.GenerateSmoothNormals |
//PostProcessSteps.GenerateUVCoords | // Might be needed... find test case
//PostProcessSteps.LimitBoneWeights |
//PostProcessSteps.MakeLeftHanded |     // Not necessary, XNA is right-handed.
//PostProcessSteps.OptimizeGraph |      // Will eliminate helper nodes
//PostProcessSteps.PreTransformVertices |
//PostProcessSteps.RemoveComponent |
//PostProcessSteps.RemoveRedundantMaterials |
//PostProcessSteps.SortByPrimitiveType |
//PostProcessSteps.SplitByBoneCount |
//PostProcessSteps.SplitLargeMeshes |
//PostProcessSteps.TransformUVCoords |
//PostProcessSteps.ValidateDataStructure |
// Find _rootBone, _bones, _deformationBones.
// Create _materials.
// Create _pivots and _rootNode (incl. children).
// Create skeleton (incl. animations) and add to _rootNode.
// If we have a simple hierarchy with no bones and just the one
// mesh, we can flatten it out so the mesh is the root node.
/// <summary>
/// Converts all Assimp <see cref="Material"/>s to standard XNA compatible <see cref="MaterialContent"/>s.
/// </summary>
// TODO: What about AlphaTestMaterialContent, DualTextureMaterialContent, 
// EffectMaterialContent, EnvironmentMapMaterialContent, and SkinnedMaterialContent?
/// <summary>
/// Returns all the Assimp <see cref="Material"/> features as a <see cref="MaterialContent"/>.
/// </summary>
// TODO: Should we create a special AssImpMaterial?
// Force the XNA naming standard for diffuse textures
// which allows the material to work with the stock
// model processor.
// We might have multiple textures of the same type so number
// them starting with 2 like in DualTextureMaterialContent.
/// <summary>
/// Converts all Assimp nodes to XNA nodes. (Nodes representing bones are excluded!)
/// </summary>
/// <summary>
/// Converts the specified node and all descendant nodes.
/// </summary>
/// <param name="aiNode">The node.</param>
/// <param name="aiParent">The parent node. Can be <see langword="null"/>.</param>
/// <param name="parent">The <paramref name="aiParent"/> node converted to XNA.</param>
/// <returns>The XNA <see cref="NodeContent"/>.</returns>
/// <remarks>
/// It may be necessary to skip certain "preserve pivot" nodes in the hierarchy. The
/// converted node needs to be relative to <paramref name="aiParent"/>, not <c>node.Parent</c>.
/// </remarks>
// This is a transformation pivot.
//   <OriginalName>_$AssimpFbx$_<TransformName>
// where <TransformName> is one of
//   Translation, RotationOffset, RotationPivot, PreRotation, Rotation,
//   PostRotation, RotationPivotInverse, ScalingOffset, ScalingPivot,
//   Scaling, ScalingPivotInverse
// Ignore bones.
// For the children, this is the new parent.
// Vertices
// No bone weights found for vertex. Use bone 0 as fallback.
// Individual channels go here
/// <summary>
/// Identifies the nodes that represent bones and stores the bone offset matrices.
/// </summary>
// See http://assimp.sourceforge.net/lib_html/data.html, section "Bones"
// and notes above.
// First, identify all deformation bones.
// Walk the tree upwards to find the root bones.
// Add all nodes below root bone to skeleton.
/// <summary>
/// Finds the deformation bones (= bones attached to meshes).
/// </summary>
/// <param name="scene">The scene.</param>
/// <returns>A dictionary of all deformation bones and their offset matrices.</returns>
/// <summary>
/// Finds the root bone of a specific bone in the skeleton.
/// </summary>
/// <param name="scene">The scene.</param>
/// <param name="boneName">The name of a bone in the skeleton.</param>
/// <returns>The root bone.</returns>
// Start with the specified bone.
// Walk all the way up to the scene root or the mesh node.
// Only when FBXPreservePivotsConfig(true):
// The FBX path likes to put these extra preserve pivot nodes in here.
/// <summary>
/// Imports the skeleton including all skeletal animations.
/// </summary>
// Convert nodes to bones and attach to root node.
// Convert animations and add to root bone.
/// <summary>
/// Converts the specified node and all descendant nodes to XNA bones.
/// </summary>
/// <param name="aiNode">The node.</param>
/// <param name="aiParent">The parent node.</param>
/// <param name="parent">The <paramref name="aiParent"/> node converted to XNA.</param>
/// <returns>The XNA <see cref="NodeContent"/>.</returns>
// Ignore pivot nodes
// Null leaf nodes are helpers
// Null leaf node
// Bone
// node.Transform is irrelevant for bones. This transform is just the
// pose of the node at the time of the export. This could, for example,
// be one of the animation frames. It is not necessarily the bind pose
// (rest pose)!
// In XNA BoneContent.Transform needs to be set to the relative bind pose
// matrix. The relative bind pose matrix can be derived from the OffsetMatrix
// which is stored in aiMesh.Bones.
//
// offsetMatrix ... Offset matrix. Transforms the mesh from local space to bone space in bind pose.
// bindPoseRel  ... Relative bind pose matrix. Defines the transform of a bone relative to its parent bone.
// bindPoseAbs  ... Absolute bind pose matrix. Defines the transform of a bone relative to world space.
//
// The offset matrix is the inverse of the absolute bind pose matrix.
//   offsetMatrix = inverse(bindPoseAbs)
//
// bindPoseAbs = bindPoseRel * parentBindPoseAbs
// => bindPoseRel = bindPoseAbs * inverse(parentBindPoseAbs)
//                = inverse(offsetMatrix) * parentOffsetMatrix
// The current bone is the first in the chain.
// The parent offset matrix is missing. :(
// --> Use transformation pivot.
// --> Let's assume that parent's transform is Identity.
// The current bone is the second bone in the chain.
// The parent offset matrix is missing. :(
// --> Derive matrix from parent bone, which is the root bone.
// Offset matrices are not provided by Assimp. :(
// Let's hope that the skeleton was exported in bind pose.
// (Otherwise we are just importing garbage.)
// For the children, this is the new parent.
/// <summary>
/// Converts the specified animation to XNA.
/// </summary>
/// <param name="aiAnimation">The animation.</param>
/// <param name="nodeName">An optional filter.</param>
/// <returns>The animation converted to XNA.</returns>
// In Assimp animation channels may be split into separate channels.
//   "nodeXyz" --> "nodeXyz_$AssimpFbx$_Translation",
//                 "nodeXyz_$AssimpFbx$_Rotation",
//                 "nodeXyz_$AssimpFbx$_Scaling"
// Group animation channels by name (strip the "_$AssimpFbx$" part).
// Get transformation pivot for current bone.
// Get all unique keyframe times. (Assuming that no two key frames
// have the same time, which is usually a safe assumption.)
// Get scaling.
// Scaling key found.
// No scaling key found.
// Lerp between previous and next scaling key.
// Hold previous scaling value.
// Get rotation.
// Rotation key found.
// No rotation key found.
// Lerp between previous and next rotation key.
// Hold previous rotation value.
// Get translation.
// Translation key found.
// No translation key found.
// Lerp between previous and next translation key.
// Hold previous translation value.
// Apply transformation pivot.
/// <summary>
/// Copies the current node and all descendant nodes into a list.
/// </summary>
/// <param name="node">The current node.</param>
/// <param name="list">The list.</param>
/// <summary>
/// Gets the transform of node relative to a specific ancestor node.
/// </summary>
/// <param name="node">The node.</param>
/// <param name="ancestor">The ancestor node. Can be <see langword="null"/>.</param>
/// <returns>
/// The relative transform. If <paramref name="ancestor"/> is <see langword="null"/> the
/// absolute transform of <paramref name="node"/> is returned.
/// </returns>
// Get transform of node relative to ancestor.
/// <summary>
/// Gets the animation name without the "AnimStack::" part.
/// </summary>
/// <param name="name">The mangled animation name.</param>
/// <returns>The original animation name.</returns>
/// <summary>
/// Gets the node name without the "_$AssimpFbx$" part.
/// </summary>
/// <param name="name">The mangled node name.</param>
/// <returns>The original node name.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\PipelineComponentScanner.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Implements a scanner object containing the available importers and processors for an application. Designed for internal use only.
/// </summary>
/// <summary>
/// Gets the list of error messages produced by the last call to Update.
/// </summary>
/// <summary>
/// Gets a dictionary that maps importer names to their associated metadata attributes.
/// </summary>
/// <summary>
/// Gets the names of all available importers.
/// </summary>
/// <summary>
/// Gets a dictionary that maps importer names to the fully qualified name of their return types.
/// </summary>
/// <summary>
/// Gets a dictionary that maps processor names to their associated metadata attributes.
/// </summary>
/// <summary>
/// Gets a dictionary that maps processor names to the fully qualified name of supported input types.
/// </summary>
/// <summary>
/// Gets the names of all available processors.
/// </summary>
/// <summary>
/// Gets a dictionary that maps processor names to the fully qualified name of their output types.
/// </summary>
/// <summary>
/// A collection of supported processor parameters.
/// </summary>
/// <summary>
/// Initializes a new instance of PipelineComponentScanner.
/// </summary>
/// <summary>
/// Updates the scanner object with the latest available assembly states.
/// </summary>
/// <param name="pipelineAssemblies">Enumerated list of available assemblies.</param>
/// <returns>true if an actual scan was required, indicating the collection contents may have changed. false if no assembly changes were detected since the previous call.</returns>
/// <summary>
/// Updates the scanner object with the latest available assembly states.
/// </summary>
/// <param name="pipelineAssemblies">Enumerated list of available assemblies.</param>
/// <param name="pipelineAssemblyDependencies">Enumerated list of dependent assemblies.</param>
/// <returns>true if an actual scan was required, indicating the collection contents may have changed. false if no assembly changes were detected since the previous call.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\PipelineException.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Thrown when errors are encountered during a content pipeline build.
/// </summary>
/// <summary>
/// Creates an instance of PipelineException.
/// </summary>
/// <summary>
/// Creates an instance of PipelineException with information on serialization and streaming context for the related content item.
/// </summary>
/// <param name="serializationInfo">Information necessary for serialization and deserialization of the content item.</param>
/// <param name="streamingContext">Information necessary for the source and destination of a given serialized stream. Also provides an additional caller-defined context.</param>
/// <summary>
/// Initializes a new instance of the PipelineException class with the specified error message.
/// </summary>
/// <param name="message">A message that describes the error.</param>
/// <summary>
/// Initializes a new instance of the PipelineException class with the specified error message and a reference to the inner exception that is the cause of this exception.
/// </summary>
/// <param name="message">A message that describes the error.</param>
/// <param name="innerException">The exception that is the cause of the current exception. If innerException is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
/// <summary>
/// Initializes a new instance of the PipelineException class with the specified error message.
/// </summary>
/// <param name="message">A message that describes the error.</param>
/// <param name="messageArgs">Array of strings specifying message-related arguments.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ProcessorParameter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a processor parameter. Processor parameters are automatically discovered by the content pipeline. Therefore, only custom processor developers should use this class directly.
/// </summary>
/// <summary>
/// Default value of the processor parameter.
/// </summary>
/// <summary>
/// Description of the parameter, as specified by the [Description] attribute.
/// </summary>
/// <summary>
/// Name of the parameter displayed in the designer, as specified by the [DisplayName] attribute.
/// </summary>
/// <summary>
/// Gets a value indicating whether the parameter is an enumeration.
/// </summary>
/// <summary>
/// Available options for enumerated type parameters. For parameters of other types, this value is null.
/// </summary>
/// <summary>
/// Name of the property, as defined in the C# code.
/// </summary>
/// <summary>
/// Type of the parameter.
/// </summary>
/// <summary>
/// Constructs a ProcessorParameter instance.
/// </summary>
/// <param name="propertyInfo">The info for the property.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\ProcessorParameterCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a collection of processor parameters, usually for a single processor. This class is primarily designed for internal use or for custom processor developers.
/// </summary>
/// <summary>
/// Constructs a new ProcessorParameterCollection instance.
/// </summary>
/// <param name="parameters">The parameters in the collection.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\TargetPlatform.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Identifiers for the target platform.
/// </summary>
/// <summary>
/// All desktop versions of Windows using DirectX.
/// </summary>
/// <summary>
/// Xbox 360 video game and entertainment system
/// </summary>
// MonoGame-specific platforms listed below
/// <summary>
/// Apple iOS-based devices (iPod Touch, iPhone, iPad)
/// (MonoGame)
/// </summary>
/// <summary>
/// Android-based devices
/// (MonoGame)
/// </summary>
/// <summary>
/// All desktop versions using OpenGL.
/// (MonoGame)
/// </summary>
/// <summary>
/// Apple Mac OSX-based devices (iMac, MacBook, MacBook Air, etc)
/// (MonoGame)
/// </summary>
/// <summary>
/// Windows Store App
/// (MonoGame)
/// </summary>
/// <summary>
/// Google Chrome Native Client
/// (MonoGame)
/// </summary>
/// <summary>
/// Sony PlayStation Mobile (PS Vita)
/// (MonoGame)
/// </summary>
/// <summary>
/// Windows Phone 8
/// (MonoGame)
/// </summary>
/// <summary>
/// Raspberry Pi
/// (MonoGame)
/// </summary>
/// <summary>
/// Sony PlayStation4
/// </summary>
/// <summary>
/// PlayStation Vita
/// </summary>
/// <summary>
/// Xbox One
/// </summary>
/// <summary>
/// Nintendo Switch
/// </summary>
/// <summary>
/// Google Stadia
/// </summary>
/// <summary>
/// WebAssembly and Bridge.NET
/// </summary>
/// <summary>
/// Deserialize legacy Platforms from .MGCB files.
/// </summary>
// convert legacy Platforms
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\TextureImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for reading texture files for use in the Content Pipeline.
/// </summary>
// Bitmap Image File
// Dr Halo CUT
// Direct Draw Surface
// Raw Fax G3
// RGBE
// Graphcis Interchange Format
// Microsoft Windows Icon
// Interchange File Format
// JBIG
// JPEG
// JPEG 2000
// JPEG XR
// Koala
// Kodak PhotoCD
// Multiple-Image Network Graphics
//Personal Computer Exchange
// Netpbm
// Printer Font Metrics
//Portable Network Graphics
// PICT
// Photoshop
// RAW
// RAW
// RAW
// RAW
// RAW
// Sun RAS
// Silicon Graphics Image
// Truevision TGA/TARGA
// Tagged Image File Format
// Wireless Application Protocol Bitmap Format
// WebP
// X BitMap
// X PixMap
/// <summary>
/// Initializes a new instance of TextureImporter.
/// </summary>
/// <summary>
/// Called by the XNA Framework when importing a texture file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
// Special case for loading some formats
//if freeimage can not recognize the image type
//if freeimage can recognize the file headers but can't read its contents
//uint bpp = FreeImage.GetBPP(fBitmap);
// Swizzle channels and expand to include an alpha channel
// The bits per pixel and image type may have changed
// Create the byte array for the data
//Converts the pixel data to bytes, do not try to use this call to switch the color channels because that only works for 16bpp bitmaps
// Create the Pixel bitmap content depending on the image type
//case FREE_IMAGE_TYPE.FIT_BITMAP:
/// <summary>
/// Expands images to have an alpha channel and swaps red and blue channels
/// </summary>
/// <param name="fBitmap">Image to process</param>
/// <param name="imageType">Type of the image for the procedure</param>
/// <returns></returns>
// Return BGRA images as is
// Add an alpha channel to BGRA images without one
// Add an alpha channel to RGB images
// Swap the red and blue channels of RGBA images
// Bitmap and other formats are converted to 32-bit by default
/// <summary>
/// Switches the red and blue channels
/// </summary>
/// <param name="fBitmap">image</param>
// Loads BMP using StbSharp. This allows us to load BMP files containing BITMAPV4HEADER and BITMAPV5HEADER
// structures, which FreeImage does not support.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\VideoContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides a base class for all video objects.
/// </summary>
/// <summary>
/// Gets the bit rate for this video.
/// </summary>
/// <summary>
/// Gets the duration of this video.
/// </summary>
/// <summary>
/// Gets or sets the file name for this video.
/// </summary>
/// <summary>
/// Gets the frame rate for this video.
/// </summary>
/// <summary>
/// Gets the height of this video.
/// </summary>
/// <summary>
/// Gets or sets the type of soundtrack accompanying the video.
/// </summary>
/// <summary>
/// Gets the width of this video.
/// </summary>
/// <summary>
/// Initializes a new copy of the VideoContent class for the specified video file.
/// </summary>
/// <param name="filename">The file name of the video to import.</param>
/// <summary>
/// Immediately releases the unmanaged resources used by this object.
/// </summary>
// TODO: Free managed resources here
// ...
// TODO: Free unmanaged resources here
// ...
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\WavImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for reading .wav audio files for use in the Content Pipeline.
/// </summary>
/// <summary>
/// Called by the XNA Framework when importing a .wav audio file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
/// <remarks>This importer supports PCM in unsigned 8-bit, signed 16-bit, signed 24-bit, IEEE Float 32-bit, MS-ADPCM or IMA/ADPCM with sample rates from 8KHz up to 48KHz.</remarks>
// Validate the format of the input.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\WmaImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for reading Windows Media Audio (.wma) files for use in the Content Pipeline.
/// </summary>
/// <summary>
/// Initializes a new instance of WmaImporter.
/// </summary>
/// <summary>
/// Called by the XNA Framework when importing a .wma file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\WmvImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for reading Windows Media Video (.wmv) files for use in the Content Pipeline.
/// </summary>
/// <summary>
/// Initializes a new instance of WmvImporter.
/// </summary>
/// <summary>
/// Called by the XNA Framework when importing a .wmv file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\XImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for reading DirectX Object (.x) files for use in the Content Pipeline.
/// </summary>
/// <summary>
/// Initializes a new instance of XImporter.
/// </summary>
/// <summary>
/// Called by the XNA Framework when importing a .x file to be used as a game asset. This is the method called by the XNA Framework when an asset is to be imported into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>Resulting game asset.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\XmlImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Implements an importer for reading intermediate XML files. This is a wrapper around IntermediateSerializer.
/// </summary>
/// <summary>
/// Called by the XNA Framework when importing an intermediate file to be used as a game 
/// asset. This is the method called by the XNA Framework when an asset is to be imported 
/// into an object that can be recognized by the Content Pipeline.
/// </summary>
/// <param name="filename">Name of a game asset file.</param>
/// <param name="context">Contains information for importing a game asset, such as a logger interface.</param>
/// <returns>The imported game asset.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Audio\AudioContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Encapsulates and provides operations, such as format conversions, on the 
/// source audio. This type is produced by the audio importers and used by audio
/// processors to produce compiled audio assets.
/// </summary>
/// <remarks>Note that AudioContent can load and process audio files that are not supported by the importers.</remarks>
/// <summary>
/// The name of the original source audio file.
/// </summary>
/// <summary>
/// The type of the original source audio file.
/// </summary>
/// <summary>
/// The current raw audio data without header information.
/// </summary>
/// <remarks>
/// This changes from the source data to the output data after conversion.
/// For MP3 and WMA files this throws an exception to match XNA behavior.
/// </remarks>
/// <summary>
/// The duration of the audio data.
/// </summary>
/// <summary>
/// The current format of the audio data.
/// </summary>
/// <remarks>This changes from the source format to the output format after conversion.</remarks>
/// <summary>
/// The current loop length in samples.
/// </summary>
/// <remarks>This changes from the source loop length to the output loop length after conversion.</remarks>
/// <summary>
/// The current loop start location in samples.
/// </summary>
/// <remarks>This changes from the source loop start to the output loop start after conversion.</remarks>
/// <summary>
/// Initializes a new instance of AudioContent.
/// </summary>
/// <param name="audioFileName">Name of the audio source file to be processed.</param>
/// <param name="audioFileType">Type of the processed audio: WAV, MP3 or WMA.</param>
/// <remarks>Constructs the object from the specified source file, in the format specified.</remarks>
// Get the full path to the file.
// Use probe to get the details of the file.
// Looks like XNA only cares about type mismatch when
// the type is WAV... else it is ok.
// Only provide the data for WAV files.
// Must be opened in read mode otherwise it fails to open
// read-only files (found in some source control systems)
/// <summary>
/// Transcodes the source audio to the target format and quality.
/// </summary>
/// <param name="formatType">Format to convert this audio to.</param>
/// <param name="quality">Quality of the processed output audio. For streaming formats, it can be one of the following: Low (96 kbps), Medium (128 kbps), Best (192 kbps).  For WAV formats, it can be one of the following: Low (11kHz ADPCM), Medium (22kHz ADPCM), Best (44kHz PCM)</param>
/// <param name="saveToFile">
/// The name of the file that the converted audio should be saved into.  This is used for SongContent, where
/// the audio is stored external to the XNB file.  If this is null, then the converted audio is stored in
/// the Data property.
/// </param>
// Call the legacy conversion code.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Audio\AudioFileType.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Type of the audio file.
/// </summary>
/// <summary>
/// The MP3 format
/// </summary>
/// <summary>
/// The WAV format
/// </summary>
/// <summary>
/// The WMA format
/// </summary>
/// <summary>
/// The Ogg format
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Audio\AudioFormat.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Encapsulates the native audio format (WAVEFORMATEX) information of the audio content.
/// </summary>
/// <summary>
/// Gets the average bytes processed per second.
/// </summary>
/// <value>Average bytes processed per second.</value>
/// <summary>
/// Gets the bit depth of the audio content.
/// </summary>
/// <value>If the audio has not been processed, the source bit depth; otherwise, the bit depth of the new format.</value>
/// <summary>
/// Gets the number of bytes per sample block, taking channels into consideration. For example, for 16-bit stereo audio (PCM format), the size of each sample block is 4 bytes.
/// </summary>
/// <value>Number of bytes, per sample block.</value>
/// <summary>
/// Gets the number of channels.
/// </summary>
/// <value>If the audio has not been processed, the source channel count; otherwise, the new channel count.</value>
/// <summary>
/// Gets the format of the audio content.
/// </summary>
/// <value>If the audio has not been processed, the format tag of the source content; otherwise, the new format tag.</value>
/// <summary>
/// Gets the raw byte buffer for the format. For non-PCM formats, this buffer contains important format-specific information beyond the basic format information exposed in other properties of the AudioFormat type.
/// </summary>
/// <value>The raw byte buffer represented in a collection.</value>
/// <summary>
/// Gets the sample rate of the audio content.
/// </summary>
/// <value>If the audio has not been processed, the source sample rate; otherwise, the new sample rate.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Audio\AudioHelper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Helper methods for audio importing, conversion and processing.
/// </summary>
// This array must remain in sync with the ConversionFormat enum.
/// <summary>
/// Gets the file extension for an audio format.
/// </summary>
/// <param name="format">The conversion format</param>
/// <returns>The file extension for the given conversion format.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Audio\AudioProfile.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Find the profile for this target platform.
/// </summary>
/// <param name="platform">The platform target for audio.</param>
/// <returns></returns>
/// <summary>
/// Returns true if this profile supports audio processing for this platform.
/// </summary>
/// <summary>
/// Converts the audio content to work on targeted platform.
/// </summary>
/// <param name="platform">The platform to build the audio content for.</param>
/// <param name="quality">The suggested audio quality level.</param>
/// <param name="content">The audio content to convert.</param>
/// <returns>The quality used for conversion which could be different from the suggested quality.</returns>
/// <summary>
/// Converts the audio content to a streaming format that works on targeted platform.
/// </summary>
/// <param name="platform">The platform to build the audio content for.</param>
/// <param name="quality">The suggested audio quality level.</param>
/// <param name="content">he audio content to convert.</param>
/// <param name="outputFileName"></param>
/// <returns>The quality used for conversion which could be different from the suggested quality.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Audio\ConversionFormat.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Target formats supported for audio source conversions.
/// </summary>
/// <summary>
/// Microsoft ADPCM encoding technique using 4 bits
/// </summary>
/// <summary>
/// 8/16-bit mono/stereo PCM audio 8KHz-48KHz
/// </summary>
/// <summary>
/// Windows Media CBR formats (64 kbps, 128 kbps, 192 kbps)
/// </summary>
/// <summary>
/// The Xbox compression format
/// </summary>
/// <summary>
/// QuickTime ADPCM format
/// </summary>
/// <summary>
/// Advanced Audio Coding
/// </summary>
/// <summary>
/// Vorbis open, patent-free audio encoding
/// </summary>
/// <summary>
/// mp3 audio format
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Audio\ConversionQuality.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Compression quality of the audio content.
/// </summary>
/// <summary>
/// High compression yielding lower file size, but could compromise audio quality
/// </summary>
/// <summary>
/// Moderate compression resulting in a compromise between audio quality and file size
/// </summary>
/// <summary>
/// Lowest compression, but the best audio quality
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Audio\DefaultAudioProfile.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Default to PCM data, or ADPCM if the source is ADPCM.
// Most platforms will use AAC ("mp4") by default
// Get the song output path with the target format extension.
// Make sure the output folder for the file exists.
// Set default values if information is not available.
// XNA seems to use the sample format for the bits per sample
// in the case of non-PCM formats like MP3 and WMA.
// Figure out the file type.
// XNA seems to calculate the block alignment directly from 
// the bits per sample and channel count regardless of the 
// format of the audio data.
// ffprobe doesn't report blockAlign for ADPCM and we cannot calculate it like this
// XNA seems to only be accurate to the millisecond.
// Looks like XNA calculates the average bps from
// the sample rate and block alignment.
// Loop start and length in number of samples.  For some
// reason XNA doesn't report loop length for non-WAV sources.
// riff_chunck_size
// Look for the data chunk.
//int format;
// ADPCM Microsoft 
//format = 0x0002; /* WAVE_FORMAT_ADPCM */
/* WAVE_FORMAT_ADPCM */
// XNA seems to preserve the bit size of the input
// format when converting to PCM.
//format = 0x0001; /* WAVE_FORMAT_PCM */
/* WAVE_FORMAT_PCM */
// Windows Media Audio 2
//format = 0x0161; /* WAVE_FORMAT_WMAUDIO2 */
/* WAVE_FORMAT_WMAUDIO2 */
// ADPCM IMA WAV
//format = 0x0011; /* WAVE_FORMAT_IMA_ADPCM */
/* WAVE_FORMAT_IMA_ADPCM */
// AAC (Advanced Audio Coding)
// Requires -strict experimental
//format = 0x0000; /* WAVE_FORMAT_UNKNOWN */
/* WAVE_FORMAT_UNKNOWN */
// Vorbis
//format = 0x0000; /* WAVE_FORMAT_UNKNOWN */
/* WAVE_FORMAT_UNKNOWN */
// Vorbis
//format = 0x0000; /* WAVE_FORMAT_UNKNOWN */
/* WAVE_FORMAT_UNKNOWN */
// Unknown format
// Use probe to get the final format and information on the converted file.
// deal with adpcm
// riff contains correct blockAlign
// fix loopLength -> has to be multiple of sample per block
// see https://msdn.microsoft.com/de-de/library/windows/desktop/ee415711(v=vs.85).aspx
// Converts block alignment in bytes to sample alignment, primarily for compressed formats
// Calculation of sample alignment from http://kcat.strangesoft.net/openal-extensions/SOFT_block_alignment.txt
// MS-ADPCM
// IMA/ADPCM
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Builder\FileHelper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Checks  deletes a file from disk without throwing exceptions.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Builder\PathHelper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The/universal/standard/directory/seperator.
/// </summary>
/// <summary>
/// Returns a path string normalized to the/universal/standard.
/// </summary>
/// <summary>
/// Returns a directory path string normalized to the/universal/standard
/// with a trailing seperator.
/// </summary>
/// <summary>
/// Returns a path string normalized to the\Windows\standard.
/// </summary>
/// <summary>
/// Returns a path relative to the base path.
/// </summary>
/// <param name="basePath">The path to make relative to.  Must end with directory seperator.</param>
/// <param name="path">The path to be made relative to the basePath.</param>
/// <returns>The relative path or the original string if it is not absolute or cannot be made relative.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Builder\PipelineBuildEvent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Absolute path to the source file.
/// </summary>
/// <summary>
/// The date/time stamp of the source file.
/// </summary>
/// <summary>
/// Absolute path to the output file.
/// </summary>
/// <summary>
/// The date/time stamp of the destination file.
/// </summary>
/// <summary>
/// The date/time stamp of the DLL containing the importer.
/// </summary>
/// <summary>
/// The date/time stamp of the DLL containing the processor.
/// </summary>
/// <summary>
/// Gets or sets the dependencies.
/// </summary>
/// <value>The dependencies.</value>
/// <remarks>
/// Dependencies are extra files that are required in addition to the <see cref="SourceFile"/>.
/// Dependencies are added using <see cref="ContentProcessorContext.AddDependency"/>. Changes
/// to the dependent file causes a rebuilt of the content.
/// </remarks>
/// <summary>
/// Gets or sets the additional (nested) assets.
/// </summary>
/// <value>The additional (nested) assets.</value>
/// <remarks>
/// <para>
/// Additional assets are built by using an <see cref="ExternalReference{T}"/> and calling
/// <see cref="ContentProcessorContext.BuildAndLoadAsset{TInput,TOutput}(ExternalReference{TInput},string)"/>
/// or <see cref="ContentProcessorContext.BuildAsset{TInput,TOutput}(ExternalReference{TInput},string)"/>.
/// </para>
/// <para>
/// Examples: The mesh processor may build textures and effects in addition to the mesh.
/// </para>
/// </remarks>
/// <summary>
/// Gets or sets the related output files.
/// </summary>
/// <value>The related output files.</value>
/// <remarks>
/// Related output files are non-XNB files that are included in addition to the XNB files.
/// Related output files need to be copied to the output folder by a content processor and
/// registered by calling <see cref="ContentProcessorContext.AddOutputFile"/>.
/// </remarks>
// Repopulate the parameters from the serialized state.
// Make sure the directory exists.
// Convert the parameters into something we can serialize.
// Serialize our state.
// If we have no previously cached build event then we cannot
// be sure that the state hasn't changed... force a rebuild.
// Verify that the last write time of the source file matches
// what we recorded when it was built.  If it is different
// that means someone modified it and we need to rebuild.
// Do the same test for the dest file.
// If the source file is newer than the dest file
// then it must have been updated and needs a rebuild.
// Are any of the dependancy files newer than the dest file?
// This shouldn't happen...  but if the source or dest files changed
// then force a rebuild.
// Did the importer assembly change?
// Did the importer change?
// Did the processor assembly change?
// Did the processor change?
// Did the parameters change?
// Same reference or both null?
// Are both dictionaries empty?
// Compare the values with the second dictionary or
// the default values.
// Compare parameters0 with parameters1 or defaultValues.
// Search for matching parameter.
// Compare parameters which are only in parameters1 with defaultValues.
// Are values equal or both null?
// Is one value null?
// Values are of different type: Compare string representation.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Builder\PipelineBuildLogger.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: How do i make it high importance?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Builder\PipelineImporterContext.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Builder\PipelineManager.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Keep track of all built assets. (Required to resolve automatic names "AssetName_n".)
//   Key = absolute, normalized path of source file
//   Value = list of build events
// (Note: When using external references, an asset may be built multiple times
// with different parameters.)
// Store default values for content processor parameters. (Necessary to compare processor
// parameters. See PipelineBuildEvent.AreParametersEqual.)
//   Key = name of content processor
//   Value = processor parameters
/// <summary>
/// The current target graphics profile for which all content is built.
/// </summary>
/// <summary>
/// The current target platform for which all content is built.
/// </summary>
/// <summary>
/// The build configuration passed thru to content processors.
/// </summary>
/// <summary>
/// Gets or sets if the content is compressed.
/// </summary>
/// <summary>        
/// If true exceptions thrown from within an importer or processor are caught and then 
/// thrown from the context. Default value is true.
/// </summary>
// Load the previous content stats.            
// Make sure we're not adding the same assembly twice.
//TODO need better way to update caches
// Finally load the pipeline assemblies.
// The assembly failed to load... nothing
// we can do but ignore it.
// If no attribute specify default one
// TODO: This doesn't work... how do i find these?
// Search for the importer.
// Search for the importer.
// Search for the importer.
// Search for the importer.
// Search for the processor type.
// Resolve the importer name.
// Resolve the processor name.
// Create the processor.
// Convert and set the parameters on the processor.
// If the property value is already of the correct type then set it.
// Find a type converter for this property.
/// <summary>
/// Gets the default values for the content processor parameters.
/// </summary>
/// <param name="processorName">The name of the content processor.</param>
/// <returns>
/// A dictionary containing the default value for each parameter. Returns
/// <see langword="null"/> if the content processor has not been created yet.
/// </returns>
// null is not allowed as key in dictionary.
// Create the content processor instance and read the default values.
// Ignore exception. Will be handled in ProcessContent.
// Search for the processor.
// Make sure we can assign the value.
// Make sure we can convert the value.
// If the output path is null... build it from the source file path.
// If the extension is not XNB or the source file extension then add XNB.
// If the path isn't rooted then put it into the output directory.
// Register pipeline build event. (Required to correctly resolve external dependencies.)
// Record what we're building and how.
// Load the previous content event if it exists.
// Keep track of all build events. (Required to resolve automatic names "AssetName_n".)
// While this asset doesn't need to be rebuilt the dependent assets might.
// If we cannot find the cached event for the dependancy
// then we have to trigger a rebuild of the parent content.
// Give the asset a chance to rebuild.                    
// Do we need to rebuild?
// Import and process the content.
// Write the content to disk.
// Store the timestamp of the DLLs containing the importer and processor.
// Store the new event into the intermediate folder.
// Record stat for this file.
// Copy the stats from the previous build.
// Store the last write time of the source file
// so we can detect if it has been changed.
// Make sure we can find the importer and processor.
// Try importing the content.
// The pipelineEvent.Processor can be null or empty. In this case the
// asset should be imported but not processed.
// Make sure the input type is valid.
// Process the imported object.
// First try to load the event file.
// Recursively clean additional (nested) assets.
// Remove asset (.xnb file) from output folder.
// Remove event file (.mgcontent file) from intermediate folder.
// Remove related output files (non-XNB files) that were copied to the output folder.
// Remove asset (.xnb file) from output folder.
// Remove event file (.mgcontent file) from intermediate folder.
// Make sure the output directory exists.
// Write the XNB.
// Store the last write time of the output XNB here
// so we can verify it hasn't been tampered with.
/// <summary>
/// Stores the pipeline build event (in memory) if no matching event is found.
/// </summary>
/// <param name="pipelineEvent">The pipeline build event.</param>
/// <summary>
/// Gets an automatic asset name, such as "AssetName_0".
/// </summary>
/// <param name="sourceFileName">The source file name.</param>
/// <param name="importerName">The name of the content importer. Can be <see langword="null"/>.</param>
/// <param name="processorName">The name of the content processor. Can be <see langword="null"/>.</param>
/// <param name="processorParameters">The processor parameters. Can be <see langword="null"/>.</param>
/// <returns>The asset name.</returns>
// Get source file name, which is used for lookup in _pipelineBuildEvents.
// This source file has already been build.
// --> Compare pipeline build events.
// Matching pipeline build event found.
// Remove ".xnb".
// No pipeline build event with matching settings found.
// Get default asset name (= output file name relative to output folder without ".xnb").
/// <summary>
/// Determines whether the specified list contains a matching pipeline build event.
/// </summary>
/// <param name="pipelineBuildEvents">The list of pipeline build events.</param>
/// <param name="destFile">Absolute path to the output file. Can be <see langword="null"/>.</param>
/// <param name="importerName">The name of the content importer. Can be <see langword="null"/>.</param>
/// <param name="processorName">The name of the content processor. Can be <see langword="null"/>.</param>
/// <param name="processorParameters">The processor parameters. Can be <see langword="null"/>.</param>
/// <returns>
/// The matching pipeline build event, or <see langword="null"/>.
/// </returns>
/// <summary>
/// Gets the asset name including a suffix, such as "_0". (The number is incremented
/// automatically.
/// </summary>
/// <param name="baseAssetName">
/// The asset name without suffix (relative to output folder).
/// </param>
/// <returns>The asset name with suffix.</returns>
/// <summary>
/// Determines whether the specified asset name is already used.
/// </summary>
/// <param name="assetName">The asset name (relative to output folder).</param>
/// <returns>
/// <see langword="true"/> if the asset name is already used; otherwise,
/// <see langword="false"/> if the name is available.
/// </returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Builder\PipelineProcessorContext.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Add its dependencies and built assets to ours.
// The processorName can be null or empty. In this case the asset should
// be imported but not processed. This is, for example, necessary to merge
// animation files as described here:
// http://blogs.msdn.com/b/shawnhar/archive/2010/06/18/merging-animation-files.aspx.
// Record that we processed this dependent asset.
// Build the content.
// Record that we built this dependent asset.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Builder\TypeExtensions.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Builder\XmlColor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Helper for serializing color types with the XmlSerializer.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Builder\Convertors\StringToColorConverter.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\AlphaTestMaterialContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\AnimationChannel.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for maintaining an animation channel. An animation channel is a collection of keyframes describing the movement of a single bone or rigid object.
/// </summary>
/// <summary>
/// Gets the number of keyframes in the collection.
/// </summary>
/// <summary>
/// Gets the keyframe at the specified index position.
/// </summary>
/// <summary>
/// Returns a value indicating whether the object is read-only.
/// </summary>
/// <summary>
/// Initializes a new instance of AnimationChannel.
/// </summary>
/// <summary>
/// To satisfy ICollection
/// </summary>
/// <param name="item"></param>
/// <summary>
/// Adds a new keyframe to the collection, automatically sorting the contents according to keyframe times.
/// </summary>
/// <param name="item">Keyframe to be added to the channel.</param>
/// <returns>Index of the new keyframe.</returns>
// Find the correct place at which to insert it, so we can know the index to return.
// The alternative is Add, Sort then return IndexOf, which would be horribly inefficient
// and the order returned by Sort would change each time for keyframes with the same time.
// BinarySearch returns the index of the first item found with the same time, or the bitwise
// complement of the next largest item found.
// If a match is found, we do not know if it is at the start, middle or end of a range of
// keyframes with the same time value.  So look for the end of the range and insert there
// so we have deterministic behaviour.
// If BinarySearch returns a negative value, it is the bitwise complement of the next largest
// item in the list.  So we just do a bitwise complement and insert at that index.
/// <summary>
/// Removes all keyframes from the collection.
/// </summary>
/// <summary>
/// Searches the collection for the specified keyframe.
/// </summary>
/// <param name="item">Keyframe being searched for.</param>
/// <returns>true if the keyframe exists; false otherwise.</returns>
/// <summary>
/// To satisfy ICollection
/// </summary>
/// <param name="array"></param>
/// <param name="arrayIndex"></param>
/// <summary>
/// Determines the index for the specified keyframe.
/// </summary>
/// <param name="item">Identity of a keyframe.</param>
/// <returns>Index of the specified keyframe.</returns>
/// <summary>
/// Removes the specified keyframe from the collection.
/// </summary>
/// <param name="item">Keyframe being removed.</param>
/// <returns>true if the keyframe was removed; false otherwise.</returns>
/// <summary>
/// Removes the keyframe at the specified index position.
/// </summary>
/// <param name="index">Index of the keyframe being removed.</param>
/// <summary>
/// Returns an enumerator that iterates through the keyframes.
/// </summary>
/// <returns>Enumerator for the keyframe collection.</returns>
/// <summary>
/// To satisfy ICollection
/// </summary>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\AnimationChannelDictionary.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Collection of animation data channels, one per bone or rigid object.
/// </summary>
/// <summary>
/// Initializes a new instance of AnimationChannelDictionary.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\AnimationContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides properties for maintaining an animation.
/// </summary>
/// <summary>
/// Gets the collection of animation data channels. Each channel describes the movement of a single bone or rigid object.
/// </summary>
/// <summary>
/// Gets or sets the total length of the animation.
/// </summary>
/// <summary>
/// Initializes a new instance of AnimationContent.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\AnimationContentDictionary.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Collection of named animations.
/// </summary>
/// <summary>
/// Initializes a new instance of AnimationContentDictionary.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\AnimationKeyframe.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for managing a keyframe. A keyframe describes the position of an animation channel at a single point in time.
/// </summary>
/// <summary>
/// Gets the time offset from the start of the animation to the position described by this keyframe.
/// </summary>
/// <summary>
/// Gets or sets the position described by this keyframe.
/// </summary>
/// <summary>
/// Initializes a new instance of AnimationKeyframe with the specified time offsetand transform.
/// </summary>
/// <param name="time">Time offset of the keyframe.</param>
/// <param name="transform">Position of the keyframe.</param>
/// <summary>
/// Compares this instance of a keyframe to another.
/// </summary>
/// <param name="other">Keyframe being compared to.</param>
/// <returns>Indication of their relative values.</returns>
// No sense in comparing the transform, so compare the time.
// This would be used for sorting keyframes in time order.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\AtcBitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// A shortcut for copying the entire bitmap to another bitmap of the same type and format
// Destination region copy is not yet supported
// If the source is not Vector4 or requires resizing, send it through BitmapContent.Copy
// Convert to full colour 32-bit format. Floating point would be preferred for processing, but it appears the ATICompressor does not support this
// A shortcut for copying the entire bitmap to another bitmap of the same type and format
// No other support for copying from a ATC texture yet
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\AtcExplicitBitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Creates an instance of AtcExplicitBitmapContent.
/// </summary>
/// <summary>
/// Creates an instance of AtcExplicitBitmapContent with the specified width and height.
/// </summary>
/// <param name="width">The width in pixels of the bitmap.</param>
/// <param name="height">The height in pixels of the bitmap.</param>
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
/// <summary>
/// Returns a string description of the bitmap.
/// </summary>
/// <returns>Description of the bitmap.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\AtcInterpolatedBitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Creates an instance of AtcInterpolatedBitmapContent.
/// </summary>
/// <summary>
/// Creates an instance of AtcInterpolatedBitmapContent with the specified width and height.
/// </summary>
/// <param name="width">The width in pixels of the bitmap.</param>
/// <param name="height">The height in pixels of the bitmap.</param>
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
/// <summary>
/// Returns a string description of the bitmap.
/// </summary>
/// <returns>Description of the bitmap.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\BasicMaterialContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\BitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides properties and methods for creating and maintaining a bitmap resource.
/// </summary>
/// <summary>
/// Gets or sets the height of the bitmap, in pixels.
/// </summary>
/// <summary>
/// Gets or sets the width of the bitmap, in pixels.
/// </summary>
/// <summary>
/// Initializes a new instance of BitmapContent.
/// </summary>
/// <summary>
/// Initializes a new instance of BitmapContent with the specified width or height.
/// </summary>
/// <param name="width">Width, in pixels, of the bitmap resource.</param>
/// <param name="height">Height, in pixels, of the bitmap resource.</param>
// Write to properties so validation is run.
/// <summary>
/// Copies one bitmap into another.
/// The destination bitmap can be in any format and size. If the destination is larger or smaller, the source bitmap is scaled accordingly.
/// </summary>
/// <param name="sourceBitmap">BitmapContent being copied.</param>
/// <param name="destinationBitmap">BitmapContent being overwritten.</param>
/// <summary>
/// Copies one bitmap into another.
/// The destination bitmap can be in any format and size. If the destination is larger or smaller, the source bitmap is scaled accordingly.
/// </summary>
/// <param name="sourceBitmap">BitmapContent being copied.</param>
/// <param name="sourceRegion">Region of sourceBitmap.</param>
/// <param name="destinationBitmap">BitmapContent being overwritten.</param>
/// <param name="destinationRegion">Region of bitmap to be overwritten.</param>
// If the formats are the same and the regions are the full bounds of the bitmaps and they are the same size, do a simpler copy
// The basic process is
// 1. Copy from source bitmap region to a new PixelBitmapContent<Vector4> using sourceBitmap.TryCopyTo()
// 2. If source and destination regions are a different size, resize Vector4 version
// 3. Copy from Vector4 to destination region using destinationBitmap.TryCopyFrom()
// Copy from the source to the intermediate Vector4 format
// Resize the intermediate if required
// Copy from the intermediate to the destination
// If we got here, one of the above steps didn't work
/// <summary>
/// Reads encoded bitmap content.
/// </summary>
/// <returns>Array containing encoded bitmap data.</returns>
/// <summary>
/// Writes encoded bitmap content.
/// </summary>
/// <param name="sourceData">Array containing encoded bitmap data to be set.</param>
/// <summary>
/// Returns a string description of the bitmap resource.
/// </summary>
/// <returns>Description of the bitmap.</returns>
/// <summary>
/// Attempts to copy a region from a specified bitmap.
/// </summary>
/// <param name="sourceBitmap">BitmapContent being copied.</param>
/// <param name="sourceRegion">Location of sourceBitmap.</param>
/// <param name="destinationRegion">Region of destination bitmap to be overwritten.</param>
/// <returns>true if region copy is supported; false otherwise.</returns>
/// <summary>
/// Attempts to copy a region of the specified bitmap onto another.
/// </summary>
/// <param name="destinationBitmap">BitmapContent being overwritten.</param>
/// <param name="sourceRegion">Location of the source bitmap.</param>
/// <param name="destinationRegion">Region of destination bitmap to be overwritten.</param>
/// <returns>true if region copy is supported; false otherwise.</returns>
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
/// <summary>
/// Validates the arguments to the Copy function.
/// </summary>
/// <param name="sourceBitmap">BitmapContent being copied.</param>
/// <param name="sourceRegion">Location of sourceBitmap.</param>
/// <param name="destinationBitmap">BitmapContent being overwritten.</param>
/// <param name="destinationRegion">Region of bitmap to be overwritten.</param>
// Make sure regions are within the bounds of the bitmaps
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\BoneContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents an animation skeleton.
/// </summary>
/// <summary>
/// Initializes a new instance of BoneContent.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\BoneWeight.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides properties for managing a bone weight.
/// </summary>
/// <summary>
/// Gets the name of the bone.
/// </summary>
/// <summary>
/// Gets the amount of bone influence, ranging from zero to one. The complete set of weights in a BoneWeightCollection should sum to one.
/// </summary>
/// <summary>
/// Initializes a new instance of BoneWeight with the specified name and weight.
/// </summary>
/// <param name="boneName">Name of the bone.</param>
/// <param name="weight">Amount of influence, ranging from zero to one.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\BoneWeightCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Collection of bone weights of a vertex.
/// </summary>
/// <summary>
/// Initializes a new instance of BoneWeightCollection.
/// </summary>
/// <summary>
/// Normalizes the contents of the weights list.
/// </summary>
// Normalization does the following:
//
// - Sorts weights such that the most significant weight is first.
// - Removes zero-value entries.
// - Adjusts values so the sum equals one.
//
// Throws InvalidContentException if all weights are zero.
/// <summary>
/// Normalizes the contents of the bone weights list.
/// </summary>
/// <param name="maxWeights">Maximum number of weights allowed.</param>
// Normalization does the following:
//
// - Sorts weights such that the most significant weight is first.
// - Removes zero-value entries.
// - Discards weights with the smallest value until there are maxWeights or less in the list.
// - Adjusts values so the sum equals one.
//
// Throws InvalidContentException if all weights are zero.
// Sort into descending order
// Find the sum to validate we have weights and to normalize the weights
// Cannot use a foreach or for because the index may not always increment and the length of the list may change.
// Discard any zero weights or if we have exceeded the maximum number of weights
// Normalize each weight
// Old-school trick. Multiplication is faster than division, so multiply by the inverse.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\DefaultTextureProfile.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Select the default texture compression format for the target platform
// Make sure the target platform supports the selected texture compression format
// Does it require POT textures?
// Does it require square textures?
// Make sure we're in a floating point format
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\DualTextureMaterialContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Dxt1BitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
/// <summary>
/// Returns a string description of the bitmap.
/// </summary>
/// <returns>Description of the bitmap.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Dxt3BitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
/// <summary>
/// Returns a string description of the bitmap.
/// </summary>
/// <returns>Description of the bitmap.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Dxt5BitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
/// <summary>
/// Returns a string description of the bitmap.
/// </summary>
/// <returns>Description of the bitmap.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\DxtBitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// NVTT wants BGRA where our source is RGBA so
// we swap the red and blue channels.
// NVTT wants BGRA where our source is RGBA so
// we swap the red and blue channels.
// Look for non-opaque pixels.
// A shortcut for copying the entire bitmap to another bitmap of the same type and format
// TODO: Add a XNA unit test to see what it does
// my guess is that this is invalid for DXT.
//
// Destination region copy is not yet supported
// If the source is not Vector4 or requires resizing, send it through BitmapContent.Copy
// NVTT wants 8bit data in BGRA format.
// Do all the calls to the NVTT wrapper within this handler
// so we properly clean up if things blow up.
// TODO: This isn't working which keeps us from getting the
// same alpha dither behavior on DXT1 as XNA.
//
// See https://github.com/MonoGame/MonoGame/issues/6259
//
//if (alphaDither)
//compressionOptions.SetQuantization(false, false, true);
// A shortcut for copying the entire bitmap to another bitmap of the same type and format
// No other support for copying from a DXT texture yet
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\EffectContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Contains the source code for a DirectX Effect, loaded from a .fx file.
/// </summary>
/// <summary>
/// Initializes a new instance of EffectContent.
/// </summary>
/// <summary>
/// Gets or sets the effect program source code.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\EffectMaterialContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\EnvironmentMapMaterialContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Etc1BitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Supports the processing of a texture compressed using ETC1.
/// </summary>
/// <summary>
/// Initializes a new instance of Etc1BitmapContent.
/// </summary>
/// <summary>
/// Initializes a new instance of Etc1BitmapContent with the specified width or height.
/// </summary>
/// <param name="width">Width in pixels of the bitmap resource.</param>
/// <param name="height">Height in pixels of the bitmap resource.</param>
// A shortcut for copying the entire bitmap to another bitmap of the same type and format
// Destination region copy is not yet supported
// If the source is not Vector4 or requires resizing, send it through BitmapContent.Copy
// Create the texture object in the PVR library
// static const PixelType PVRStandard32PixelType = PixelType('r', 'g', 'b', 'a', 32, 32, 32, 32);
// Resize the bitmap if needed
/*, CompressorQuality.ETCMediumPerceptual, true*/);
// A shortcut for copying the entire bitmap to another bitmap of the same type and format
// No other support for copying from a ETC1 texture yet
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
/// <summary>
/// Returns a string description of the bitmap.
/// </summary>
/// <returns>Description of the bitmap.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\FontDescription.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides information to the FontDescriptionProcessor describing which font to rasterize, which font size to utilize, and which Unicode characters to include in the processor output.
/// </summary>
/// <summary>
/// Gets or sets the name of the font, such as "Times New Roman" or "Arial". This value cannot be null or empty.
/// </summary>
/// <summary>
/// Gets or sets the size, in points, of the font.
/// </summary>
/// <summary>
/// Gets or sets the amount of space, in pixels, to insert between letters in a string.
/// </summary>
/// <summary>
/// Indicates if kerning information is used when drawing characters.
/// </summary>
/// <summary>
/// Gets or sets the style of the font, expressed as a combination of one or more FontDescriptionStyle flags.
/// </summary>
/// <summary>
/// Gets or sets the default character for the font.
/// </summary>
/// <summary>
/// Initializes a new instance of FontDescription and initializes its members to the specified font, size, and spacing, using FontDescriptionStyle.Regular as the default value for Style.
/// </summary>
/// <param name="fontName">The name of the font, such as Times New Roman.</param>
/// <param name="size">The size, in points, of the font.</param>
/// <param name="spacing">The amount of space, in pixels, to insert between letters in a string.</param>
/// <summary>
/// Initializes a new instance of FontDescription and initializes its members to the specified font, size, spacing, and style.
/// </summary>
/// <param name="fontName">The name of the font, such as Times New Roman.</param>
/// <param name="size">The size, in points, of the font.</param>
/// <param name="spacing">The amount of space, in pixels, to insert between letters in a string.</param>
/// <param name="fontStyle">The font style for the font.</param>
/// <summary>
/// Initializes a new instance of FontDescription using the specified values.
/// </summary>
/// <param name="fontName">The name of the font, such as Times New Roman.</param>
/// <param name="size">The size, in points, of the font.</param>
/// <param name="spacing">The amount of space, in pixels, to insert between letters in a string.</param>
/// <param name="fontStyle">The font style for the font.</param>
/// <param name="useKerning">true if kerning information is used when drawing characters; false otherwise.</param>
// Write to the properties so the validation is run
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\FontDescriptionStyle.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Flags that describe style information to be applied to text.
/// You can combine these flags by using a bitwise OR operator (|).
/// </summary>
/// <summary>
/// Bold text.
/// </summary>
/// <summary>
/// Italic text.
/// </summary>
/// <summary>
/// Normal text.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\GeometryContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides properties that define various aspects of a geometry batch.
/// </summary>
/// <summary>
/// Gets the list of triangle indices for this geometry batch. Geometry is stored as an indexed triangle list, where each group of three indices defines a single triangle.
/// </summary>
/// <summary>
/// Gets or sets the material of the parent mesh.
/// </summary>
/// <summary>
/// Gets or sets the parent MeshContent for this object.
/// </summary>
/// <summary>
/// Gets the set of vertex batches for the geometry batch.
/// </summary>
/// <summary>
/// Creates an instance of GeometryContent.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\GeometryContentCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for maintaining a collection of geometry batches that make up a mesh.
/// </summary>
/// <summary>
/// Gets the parent of a child object.
/// </summary>
/// <param name="child">The child of the parent being retrieved.</param>
/// <returns>The parent of the child object.</returns>
/// <summary>
/// Sets the parent of the specified child object.
/// </summary>
/// <param name="child">The child of the parent being set.</param>
/// <param name="parent">The parent of the child object.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\GraphicsUtil.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Convert to FreeImage bitmap
// Resize
// Convert back to PixelBitmapContent<Vector4>
// Convert back to source type if required
/// <summary>
/// Returns the next power of two. Returns same value if already is PoT.
/// </summary>
/// <summary>
/// Pixel data has no alpha values below 1.0.
/// </summary>
/// <summary>
/// Pixel data contains alpha values that are either 0.0 or 1.0.
/// </summary>
/// <summary>
/// Pixel data contains alpha values that cover the full range of 0.0 to 1.0.
/// </summary>
/// <summary>
/// Gets the alpha range in a set of pixels.
/// </summary>
/// <param name="bitmap">A bitmap of full-colour floating point pixel data in RGBA or BGRA order.</param>
/// <returns>A member of the AlphaRange enum to describe the range of alpha in the pixel data.</returns>
// If sharp alpha is required (for a font texture page), use 16-bit color instead of PVR
// Calculate number of mip levels
// Test the alpha channel to figure out if we have alpha.
// TODO: This isn't quite right.
//
// We should be generating DXT1 textures for cutout alpha
// as DXT1 supports 1bit alpha and it uses less memory.
//
// XNA never generated DXT3 for textures... it always picked
// between DXT1 for cutouts and DXT5 for fractional alpha.
//
// DXT3 however can produce better results for high frequency
// alpha like a chain link fence where is DXT5 is better for 
// low frequency alpha like clouds.  I don't know how we can 
// pick the right thing in this case without a hint.
//
// If sharp alpha is required (for a font texture page), use 16-bit color instead of PVR
// If sharp alpha is required (for a font texture page), use 16-bit color instead of PVR
// Use BGRA4444 for textures with non-opaque alpha values
// PVR SGX does not handle non-POT ETC1 textures.
// https://code.google.com/p/libgdx/issues/detail?id=1310
// Since we already enforce POT for PVR and DXT in Reach, we will also enforce POT for ETC1
// Compress the greyscale font texture page using a specially-formulated DXT3 mode
// Do partial block at end of row
// Do last partial row
// Do last partial block
// Maps a 2-bit greyscale to the index required for DXT3
// 00 = color0
// 01 = color1
// 10 = 2/3 * color0 + 1/3 * color1
// 11 = 1/3 * color0 + 2/3 * color1
// Compress a single 4x4 block from colors into buffer at the given offset
// Get the alpha into a 0-15 range
// Duplicate the top two bits into the bottom two bits so we get one of four values: b0000, b0101, b1010, b1111
// 4-bit alpha
// color0 (transparent)
// color1 (white)
// Get the red (to be used for green and blue channels as well) into a 0-15 range
// Duplicate the top two bits into the bottom two bits so we get one of four values: b0000, b0101, b1010, b1111
// Color indices (00 = color0, 01 = color1, 10 = 2/3 * color0 + 1/3 * color1, 11 = 1/3 * color0 + 2/3 * color1)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\IndexCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for maintaining a list of index values.
/// </summary>
/// <summary>
/// Initializes a new instance of IndexCollection.
/// </summary>
/// <summary>
/// Add a range of indices to the collection.
/// </summary>
/// <param name="indices">A collection of indices to add.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\IndirectPositionCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for maintaining a list of vertex positions.
/// </summary>
/// <remarks>
/// This class is designed to collect the vertex positions for a VertexContent object. Use the contents
/// of the PositionIndices property (of the contained VertexContent object) to index into the Positions 
/// property of the parent mesh.
/// </remarks>
/// <summary>
/// Number of positions in the collection.
/// </summary>
/// <value>Number of positions.</value>
/// <summary>
/// Gets or sets the position at the specified index.
/// </summary>
/// <value>Position located at index.</value>
/// <summary>
/// Gets a value indicating whether this object is read-only.
/// </summary>
/// <value>true if this object is read-only; false otherwise.</value>
/// <summary>
/// Initializes a new instance of IndirectPositionCollection.
/// </summary>
/// <summary>
/// Determines whether the specified position is in the collection.
/// </summary>
/// <param name="item">Position being searched for in the collection.</param>
/// <returns>true if the position was found; false otherwise.</returns>
/// <summary>
/// Copies the specified positions to an array, starting at the specified index.
/// </summary>
/// <param name="array">Array of positions to be copied.</param>
/// <param name="arrayIndex">Index of the first copied position.</param>
/// <summary>
/// Gets an enumerator interface for reading the position values.
/// </summary>
/// <returns>Interface for enumerating the collection of position values.</returns>
/// <summary>
/// Gets the index of the specified position in a collection.
/// </summary>
/// <param name="item">Position being searched for.</param>
/// <returns>Index of the specified position or -1 if not found.</returns>
/// <summary>
/// Returns an enumerator that can iterate through the collection.
/// </summary>
/// <returns>Enumerator that can iterate through the collection.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\LocalizedFontDescription.cs
//-----------------------------------------------------------------------------
// LocalizedFontDescription.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
/// <summary>
/// Normally, when you add a .spritefont file to your project, this data is
/// deserialized into a FontDescription object, which is then built into a
/// SpriteFontContent by the FontDescriptionProcessor. But to localize the
/// font, we want to add some additional data, so our custom processor can
/// know what .resx files it needs to scan. We do this by defining our own
/// custom font description class, deriving from the built in FontDescription
/// type, and adding a new property to store the resource filenames.
/// </summary>
/// <summary>
/// Constructor.
/// </summary>
/// <summary>
/// Add a new property to our font description, which will allow us to
/// include a ResourceFiles element in the .spritefont XML. We use the
/// ContentSerializer attribute to mark this as optional, so existing
/// .spritefont files that do not include this ResourceFiles element
/// can be imported as well.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\MaterialContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for maintaining a collection of named texture references.
/// </summary>
/// <remarks>In addition to texture references, opaque data values are stored in the OpaqueData property of the base class.</remarks>
/// <summary>
/// Gets the texture collection of the material.
/// </summary>
/// <value>Collection of textures used by the material.</value>
/// <summary>
/// Initializes a new instance of MaterialContent.
/// </summary>
/// <summary>
/// Gets a reference type from the OpaqueDataDictionary collection.
/// </summary>
/// <typeparam name="T">Type of the related opaque data.</typeparam>
/// <param name="key">Key of the property being retrieved.</param>
/// <returns>The related opaque data.</returns>
/// <summary>
/// Gets a value from the Textures collection.
/// </summary>
/// <param name="key">Key of the texture being retrieved.</param>
/// <returns>Reference to a texture from the collection.</returns>
/// <summary>
/// Gets a value type from the OpaqueDataDictionary collection.
/// </summary>
/// <typeparam name="T">Type of the value being retrieved.</typeparam>
/// <param name="key">Key of the value type being retrieved.</param>
/// <returns>Index of the value type beng retrieved.</returns>
/// <summary>
/// Sets a value in the contained OpaqueDataDictionary object.
/// If null is passed, the value is removed.
/// </summary>
/// <typeparam name="T">Type of the element being set.</typeparam>
/// <param name="key">Name of the key being modified.</param>
/// <param name="value">Value being set.</param>
/// <summary>
/// Sets a value in the contained TextureReferenceDictionary object.
/// If null is passed, the value is removed.
/// </summary>
/// <param name="key">Name of the key being modified.</param>
/// <param name="value">Value being set.</param>
/// <remarks>The key value differs depending on the type of attached dictionary.
/// If attached to a BasicMaterialContent dictionary (which becomes a BasicEffect object at run time), the value for the Texture key is used as the texture for the BasicEffect runtime object. Other keys are ignored.
/// If attached to a EffectMaterialContent dictionary, key names are the texture names used by the effect. These names are dependent upon the author of the effect object.</remarks>
/// <summary>
/// Helper method to make a copy of a material.
/// </summary>
/// <returns>A clone of the material.</returns>
// Construct it via reflection.
// Give it the same identity as the original material.
// Just copy the opaque data and textures which should
// result in the same properties being set if the material
// is implemented correctly.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\MeshBuilder.cs
/// <summary>
/// Gets or sets the current value for position merging of the mesh.
/// </summary>
/// <summary>
/// Gets or sets the tolerance for <see cref="MergeDuplicatePositions"/>.
/// </summary>
/// <summary>
/// Gets or sets the name of the current  <see cref="MeshContent"/> object being processed.
/// </summary>
/// <summary>
/// Reverses the triangle winding order of the specified mesh.
/// </summary>
/// <summary>
/// Adds a vertex into the index collection.
/// </summary>
/// <param name="indexIntoVertexCollection">Index of the inserted vertex, in the collection.
/// This corresponds to the value returned by <see cref="CreatePosition(float,float,float)"/>.</param>
// we have to copy our vertex channels to the new geometry
// Add the vertex to the mesh and then add the vertex position to the indices list
// Then add the data for the other channels
/// <summary>
/// Inserts the specified vertex position into the vertex channel.
/// </summary>
/// <param name="x">Value of the x component of the vector.</param>
/// <param name="y">Value of the y component of the vector.</param>
/// <param name="z">Value of the z component of the vector.</param>
/// <returns>Index of the inserted vertex.</returns>
/// <summary>
/// Inserts the specified vertex position into the vertex channel at the specified index.
/// </summary>
/// <param name="pos">Value of the vertex being inserted.</param>
/// <returns>Index of the vertex being inserted.</returns>
/// <summary>
/// Ends the creation of a mesh.
/// </summary>
/// <returns>Resultant mesh.</returns>
/// <summary>
/// Sets the material for the next triangles.
/// </summary>
/// <param name="material">Material for the next triangles.</param>
/// <remarks>
/// Sets the material for the triangles being defined next. This material
/// and the opaque data dictionary, set with <see cref="SetOpaqueData"/>
/// define the <see cref="GeometryContent"/>  object containing the next
/// triangles. When you set a new material or opaque data dictionary the
/// triangles you add afterwards will belong to a new
/// <see cref="GeometryContent"/> object.
/// </remarks>
/// <summary>
/// Sets the opaque data for the next triangles.
/// </summary>
/// <param name="opaqueData">Opaque data dictionary for the next triangles.</param>
/// <remarks>
/// Sets the opaque data dictionary for the triangles being defined next. This dictionary
/// and the material, set with <see cref="SetMaterial"/>, define the <see cref="GeometryContent"/>
/// object containing the next triangles. When you set a new material or opaque data dictionary
/// the triangles you add afterwards will belong to a new <see cref="GeometryContent"/> object.
/// </remarks>
/// <summary>
/// Sets the specified vertex data with new data.
/// </summary>
/// <param name="vertexDataIndex">Index of the vertex data channel being set. This should match the index returned by CreateVertexChannel.</param>
/// <param name="channelData">New data values for the vertex data. The data type being set must match the data type for the vertex channel specified by vertexDataIndex.</param>
/// <summary>
/// Initializes the creation of a mesh.
/// </summary>
/// <param name="name">Name of the mesh.</param>
/// <returns>Object used when building the mesh.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\MeshContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides properties and methods that define various aspects of a mesh.
/// </summary>
/// <summary>
/// Gets the list of geometry batches for the mesh.
/// </summary>
/// <summary>
/// Gets the list of vertex position values.
/// </summary>
/// <summary>
/// Initializes a new instance of MeshContent.
/// </summary>
/// <summary>
/// Applies a transform directly to position and normal channels. Node transforms are unaffected.
/// </summary>
// Transform positions
// Transform all vectors too:
// Normals are "tangent covectors", which need to be transformed using the
// transpose of the inverse matrix!
// Swap winding order when faces are mirrored.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\MeshHelper.cs
/// <summary>
/// Generates vertex normals by accumulation of triangle face normals.
/// </summary>
/// <param name="mesh">The mesh which will recieve the normals.</param>
/// <param name="overwriteExistingNormals">Overwrite or skip over geometry with existing normals.</param>
/// <remarks>
/// This calls <see cref="CalculateNormals(GeometryContent, bool)"/> to do the work.
/// </remarks>
/// <summary>
/// Generates vertex normals by accumulation of triangle face normals.
/// </summary>
/// <param name="geom">The geometry which will recieve the normals.</param>
/// <param name="overwriteExistingNormals">Overwrite or skip over geometry with existing normals.</param>
/// <remarks>
/// We use a "Mean Weighted Equally" method generate vertex normals from triangle 
/// face normals.  If normal cannot be calculated from the geometry we set it to zero.
/// </remarks>
// Look for an existing normals channel.
// We don't have existing normals, so add a new channel.
// If we're not supposed to overwrite the existing
// normals then we're done here.
// Accumulate all the triangle face normals for each vertex.
// We are using the "Mean Weighted Equally" method where each
// face has an equal weight in the final normal calculation.
//
// We could maybe switch to "Mean Weighted by Angle" which is said
// to look best in most cases, but is more expensive to calculate.
//
// There is also an idea of weighting by triangle area, but IMO the
// triangle area doesn't always have a direct relationship to the 
// shape of a mesh.
//
// For more ideas see:
//
// "A Comparison of Algorithms for Vertex Normal Computation"
// by Shuangshuang Jin, Robert R. Lewis, David West.
//
// Normalize the gathered vertex normals.
// TODO: It would be nice to be able to log this to
// the pipeline so that it can be fixed in the model.
// TODO: We could maybe void this by a better algorithm
// above for generating the normals.
// We have a zero length normal.  You can argue that putting
// anything here is better than nothing, but by leaving it to
// zero it allows the caller to detect this and react to it.
// Set the new normals on the vertex channel.
/// <summary>
/// Generate the tangents and binormals (tangent frames) for each vertex in the mesh.
/// </summary>
/// <param name="mesh">The mesh which will have add tangent and binormal channels added.</param>
/// <param name="textureCoordinateChannelName">The Vector2 texture coordinate channel used to generate tangent frames.</param>
/// <param name="tangentChannelName"></param>
/// <param name="binormalChannelName"></param>
// All the indices are 1:1 with the others, so we 
// can just add the new channels in place.
// Lengyel, Eric. “Computing Tangent Space Basis Vectors for an Arbitrary Mesh”. 
// Terathon Software 3D Graphics Library, 2001.
// http://www.terathon.com/code/tangent.html
// Hegde, Siddharth. "Messing with Tangent Space". Gamasutra, 2007. 
// http://www.gamasutra.com/view/feature/129939/messing_with_tangent_space.php
// The triangle UVs are zero sized one dimension.
//
// So we cannot calculate the vertex tangents for this
// one trangle, but maybe it can with other trangles.
// At this point we have all the vectors accumulated, but we need to average
// them all out. So we loop through all the final verts and do a Gram-Schmidt
// orthonormalize, then make sure they're all unit length.
// TODO: Ideally we could spit out a warning to the
// content logging here!
// We couldn't find a good tanget for this vertex.
//
// Rather than set them to zero which could produce
// errors in other parts of the pipeline, we just take        
// a guess at something that may look ok.
// Gram-Schmidt orthogonalize
// TODO: This can be zero can cause NaNs on 
// normalize... how do we fix this?
// Calculate handedness
// Calculate the bitangent
/// <summary>
/// Search for the root bone of the skeletion.
/// </summary>
/// <param name="node">The node from which to begin the search for the skeleton.</param>
/// <returns>The root bone of the skeletion or null if none is found.</returns>
// We should always get a node to search!
// Search up thru the hierarchy.
// First if this node is a bone then search up for the root.
// Next try searching the children for a root bone.
// If we found a bone
// This is our new root.
// If we found a root bone then return it, else
// we continue the search to the node parent.
// We didn't find any bones!
/// <summary>
/// Traverses a skeleton depth-first and builds a list of its bones.
/// </summary>
/// <summary>
/// Merge any positions in the <see cref="PositionCollection"/> of the
/// specified mesh that are at a distance less than the specified tolerance
/// from each other.
/// </summary>
/// <param name="mesh">Mesh to be processed.</param>
/// <param name="tolerance">Tolerance value that determines how close 
/// positions must be to each other to be merged.</param>
/// <remarks>
/// This method will also update the <see cref="VertexContent.PositionIndices"/>
/// in the <see cref="GeometryContent"/> of the specified mesh.
/// </remarks>
// TODO Improve performance with spatial partitioning scheme
/// <summary>
/// Merge vertices with the same <see cref="VertexContent.PositionIndices"/> and
/// <see cref="VertexChannel"/> data within the specified
/// <see cref="GeometryContent"/>.
/// </summary>
/// <param name="geometry">Geometry to be processed.</param>
// Match! Update the corresponding indices and remove the vertex
// no vertices with the same hash yet, create a new list for the data
// update the indices because of the vertices we removed
/// <summary>
/// Merge vertices with the same <see cref="VertexContent.PositionIndices"/> and
/// <see cref="VertexChannel"/> data within the <see cref="MeshContent.Geometry"/>
/// of this mesh. If you want to merge positions too, call 
/// <see cref="MergeDuplicatePositions"/> on your mesh before this function.
/// </summary>
/// <param name="mesh">Mesh to be processed</param>
// We don't throw here as non-optimized still works.
/// <summary>
/// Reverses the triangle winding order of the mesh.
/// </summary>
/// <param name="mesh">The mesh which will be modified.</param>
/// <remarks>
/// This method is useful when changing the direction of backface culling
/// like when switching between left/right handed coordinate systems.
/// </remarks>
// Gotta have a mesh to run!
/// <summary>
/// Transforms the contents of a node and its descendants.
/// </summary>
/// <remarks>The node transforms themselves are unaffected.</remarks>
/// <param name="scene">The root node of the scene to transform.</param>
/// <param name="transform">The transform matrix to apply to the scene.</param>
// If the transformation is an identity matrix, this is a no-op and
// we can save ourselves a bunch of work in the first place.
// Transform the mesh content.
// Transform local coordinate system using "similarity transform".
// Transform animations.
/// <summary>
/// Determines whether the specified transform is left-handed.
/// </summary>
/// <param name="xform">The transform.</param>
/// <returns>
/// <see langword="true"/> if <paramref name="xform"/> is left-handed; otherwise,
/// <see langword="false"/> if <paramref name="xform"/> is right-handed.
/// </returns>
// Check sign of determinant of upper-left 3x3 matrix:
//   positive determinant ... right-handed
//   negative determinant ... left-handed
// Since XNA does not have a 3x3 matrix, use the "scalar triple product"
// (see http://en.wikipedia.org/wiki/Triple_product) to calculate the
// determinant.
// Compute a hash based on PositionIndex and ChannelData
// Check equality on PositionIndex and ChannelData
// takes an IndexCollection and can efficiently update index values
// create the list, presort the values and compute the start positions of each value
// Pack all indices together starting from zero
// E.g. [5, 5, 3, 5, 21, 3] -> [1, 1, 0, 1, 2, 0]
// note that the order must be kept
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\MipmapChain.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for accessing a mipmap chain.
/// </summary>
/// <summary>
/// Initializes a new instance of MipmapChain.
/// </summary>
/// <summary>
/// Initializes a new instance of MipmapChain with the specified mipmap.
/// </summary>
/// <param name="bitmap"></param>
/// <summary>
/// Constructs a new mipmap chain containing the specified bitmap.
/// </summary>
/// <param name="bitmap">Bitmap used for the mipmap chain.</param>
/// <returns>Resultant mipmap chain.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\MipmapChainCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for maintaining a mipmap chain.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\NodeContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides a base class for graphics types that define local coordinate systems.
/// </summary>
/// <summary>
/// Gets the value of the local Transform property, multiplied by the AbsoluteTransform of the parent.
/// </summary>
/// <summary>
/// Gets the set of animations belonging to this node.
/// </summary>
/// <summary>
/// Gets the children of the NodeContent object.
/// </summary>
/// <summary>
/// Gets the parent of this NodeContent object.
/// </summary>
/// <summary>
/// Gets the transform matrix of the scene.
/// The transform matrix defines a local coordinate system for the content in addition to any children of this object.
/// </summary>
/// <summary>
/// Creates an instance of NodeContent.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\NodeContentCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Creates an instance of NodeContentCollection.
/// </summary>
/// <param name="parent">Parent object of the child objects returned in the collection.</param>
/// <summary>
/// Gets the parent of a child object.
/// </summary>
/// <param name="child">The child of the parent being retrieved.</param>
/// <returns>The parent of the child object.</returns>
/// <summary>
/// Modifies the value of the parent object of the specified child object.
/// </summary>
/// <param name="child">The child of the parent being modified.</param>
/// <param name="parent">The new value for the parent object.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\PixelBitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
// A shortcut for copying the entire bitmap to another bitmap of the same type and format
// If the source is not Vector4 or requires resizing, send it through BitmapContent.Copy
// Convert from a Vector4 format
// If no converter could be created, converting from this format is not supported
// A shortcut for copying the entire bitmap to another bitmap of the same type and format
// If the destination is not Vector4 or requires resizing, send it through BitmapContent.Copy
// Convert to a Vector4 format
// If no converter could be created, converting from this format is not supported
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\PositionCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides a collection of vertex position values.
/// </summary>
/// <summary>
/// Initializes a new instance of PositionCollection.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\PvrtcBitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// A shortcut for copying the entire bitmap to another bitmap of the same type and format
// Destination region copy is not yet supported
// If the source is not Vector4 or requires resizing, send it through BitmapContent.Copy
// Create the texture object in the PVR library
// static const PixelType PVRStandard32PixelType = PixelType('r', 'g', 'b', 'a', 32, 32, 32, 32);
// Resize the bitmap if needed
// On Linux, anything less than CompressorQuality.PVRTCHigh crashes in libpthread.so at the end of compression
// A shortcut for copying the entire bitmap to another bitmap of the same type and format
// No other support for copying from a PVR texture yet
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\PvrtcRgb2BitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Creates an instance of PvrtcRgb2BitmapContent with the specified width and height.
/// </summary>
/// <param name="width">The width in pixels of the bitmap.</param>
/// <param name="height">The height in pixels of the bitmap.</param>
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
/// <summary>
/// Returns a string description of the bitmap.
/// </summary>
/// <returns>Description of the bitmap.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\PvrtcRgb4BitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Creates an instance of PvrtcRgb4BitmapContent with the specified width and height.
/// </summary>
/// <param name="width">The width in pixels of the bitmap.</param>
/// <param name="height">The height in pixels of the bitmap.</param>
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
/// <summary>
/// Returns a string description of the bitmap.
/// </summary>
/// <returns>Description of the bitmap.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\PvrtcRgba2BitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Creates an instance of PvrtcRgba2BitBitmapContent with the specified width and height.
/// </summary>
/// <param name="width">The width in pixels of the bitmap.</param>
/// <param name="height">The height in pixels of the bitmap.</param>
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
/// <summary>
/// Returns a string description of the bitmap.
/// </summary>
/// <returns>Description of the bitmap.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\PvrtcRgba4BitmapContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Creates an instance of PvrtcRgba4BitBitmapContent with the specified width and height.
/// </summary>
/// <param name="width">The width in pixels of the bitmap.</param>
/// <param name="height">The height in pixels of the bitmap.</param>
/// <summary>
/// Gets the corresponding GPU texture format for the specified bitmap type.
/// </summary>
/// <param name="format">Format being retrieved.</param>
/// <returns>The GPU texture format of the bitmap type.</returns>
/// <summary>
/// Returns a string description of the bitmap.
/// </summary>
/// <returns>Description of the bitmap.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\SkinnedMaterialContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Texture2DContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Texture3DContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\TextureContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides a base class for all texture objects.
/// </summary>
/// <summary>
/// Collection of image faces that hold a single mipmap chain for a regular 2D texture, six chains for a cube map, or an arbitrary number for volume and array textures.
/// </summary>
/// <summary>
/// Initializes a new instance of TextureContent with the specified face collection.
/// </summary>
/// <param name="faces">Mipmap chain containing the face collection.</param>
/// <summary>
/// Converts all bitmaps for this texture to a different format.
/// </summary>
/// <param name="newBitmapType">Type being converted to. The new type must be a subclass of BitmapContent, such as PixelBitmapContent or DxtBitmapContent.</param>
/// <summary>
/// Generates a full set of mipmaps for the texture.
/// </summary>
/// <param name="overwriteExistingMipmaps">true if the existing mipmap set is replaced with the new set; false otherwise.</param>
// If we already have mipmaps and we're not supposed to overwrite
// them then return without any generation.
// Generate the mips for each face.
// Remove any existing mipmaps.
/// <summary>
/// Verifies that all contents of this texture are present, correct and match the capabilities of the device.
/// </summary>
/// <param name="targetProfile">The profile identifier that defines the capabilities of the device.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\TextureCubeContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\TextureProfile.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Find the profile for this target platform.
/// </summary>
/// <param name="platform">The platform target for textures.</param>
/// <returns></returns>
/// <summary>
/// Returns true if this profile supports texture processing for this platform.
/// </summary>
/// <summary>
/// Determines if the texture format will require power-of-two dimensions and/or equal width and height.
/// </summary>
/// <param name="context">The processor context.</param>
/// <param name="format">The desired texture format.</param>
/// <param name="requiresPowerOfTwo">True if the texture format requires power-of-two dimensions.</param>
/// <param name="requiresSquare">True if the texture format requires equal width and height.</param>
/// <returns>True if the texture format requires power-of-two dimensions.</returns>
/// <summary>
/// Performs conversion of the texture content to the correct format.
/// </summary>
/// <param name="context">The processor context.</param>
/// <param name="content">The content to be compressed.</param>
/// <param name="format">The user requested format for compression.</param>
/// <param name="isSpriteFont">If the texture has represents a sprite font, i.e. is greyscale and has sharp black/white contrast.</param>
// We do nothing in this case.
// If this is color just make sure the format is right and return it.
// Handle this common compression format.
// All other formats require platform specific choices.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\TextureReferenceDictionary.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides a collection of named references to texture files.
/// </summary>
/// <summary>
/// Initializes a new instance of TextureReferenceDictionary.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\VertexChannel.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for maintaining a vertex channel.
/// A vertex channel is a list of arbitrary data with one value for each vertex. Channels are stored inside a GeometryContent and identified by name.
/// </summary>
/// <summary>
/// Allows overriding classes to implement the list, and for properties/methods in this class to access it.
/// </summary>
/// <summary>
/// Gets the number of elements in the vertex channel
/// </summary>
/// <summary>
/// Gets the type of data contained in this channel.
/// </summary>
/// <summary>
/// Gets or sets the element at the specified index.
/// </summary>
/// <summary>
/// Gets the name of the vertex channel.
/// </summary>
/// <summary>
/// Gets a value indicating whether access to the collection is synchronized (thread safe).
/// </summary>
/// <summary>
/// Gets an object that can be used to synchronize access to the collection.
/// </summary>
/// <summary>
/// Gets a value indicating whether this list has a fixed size.
/// </summary>
/// <summary>
/// Gets a value indicating whether this object is read-only.
/// </summary>
/// <summary>
/// Creates an instance of VertexChannel.
/// </summary>
/// <param name="name">Name of the channel.</param>
/// <summary>
/// Determines whether the specified element is in the channel.
/// </summary>
/// <param name="value">Element being searched for.</param>
/// <returns>true if the element is present; false otherwise.</returns>
/// <summary>
/// Copies the elements of the channel to an array, starting at the specified index.
/// </summary>
/// <param name="array">Array that will receive the copied channel elements.</param>
/// <param name="index">Starting index for copy operation.</param>
/// <summary>
/// Gets an enumerator interface for reading channel content.
/// </summary>
/// <returns>Enumeration of the channel content.</returns>
/// <summary>
/// Gets the index of the specified item.
/// </summary>
/// <param name="value">Item whose index is to be retrieved.</param>
/// <returns>Index of specified item.</returns>
/// <summary>
/// Reads channel content and automatically converts it to the specified vector format.
/// </summary>
/// <typeparam name="TargetType">Target vector format of the converted data.</typeparam>
/// <returns>The converted data.</returns>
/// <summary>
/// Adds a new element to the end of the collection.
/// </summary>
/// <param name="value">The element to add.</param>
/// <returns>Index of the element.</returns>
/// <summary>
/// Removes all elements from the collection.
/// </summary>
/// <summary>
/// Inserts an element into the collection at the specified position.
/// </summary>
/// <param name="index">Index at which to insert the element.</param>
/// <param name="value">The element to insert.</param>
/// <summary>
/// Inserts the range of values from the enumerable into the channel.
/// </summary>
/// <param name="index">The zero-based index at which the new elements should be inserted.</param>
/// <param name="data">The data to insert into the channel.</param>
/// <summary>
/// Removes a specified element from the collection.
/// </summary>
/// <param name="value">The element to remove.</param>
/// <summary>
/// Removes the element at the specified index position.
/// </summary>
/// <param name="index">Index of the element to remove.</param>
/// <summary>
/// Removes a range of values from the channel.
/// </summary>
/// <param name="index">The zero-based starting index of the range of elements to remove.</param>
/// <param name="count"> The number of elements to remove.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\VertexChannelCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for managing a list of vertex data channels.
/// </summary>
/// <summary>
/// Gets the number of vertex channels in the collection.
/// </summary>
/// <summary>
/// Gets or sets the vertex channel at the specified index position.
/// </summary>
/// <summary>
/// Gets or sets the vertex channel with the specified name.
/// </summary>
/// <summary>
/// Determines whether the collection is read-only.
/// </summary>
/// <summary>
/// Creates an instance of VertexChannelCollection.
/// </summary>
/// <param name="vertexContent">The VertexContent object that owns this collection.</param>
/// <summary>
/// Adds a new vertex channel to the end of the collection.
/// </summary>
/// <typeparam name="ElementType">Type of the channel.</typeparam>
/// <param name="name">Name of the new channel.</param>
/// <param name="channelData">Initial data for the new channel. If null, the channel is filled with the default value for that type.</param>
/// <returns>The newly added vertex channel.</returns>
/// <summary>
/// Adds a new vertex channel to the end of the collection.
/// </summary>
/// <param name="name">Name of the new channel.</param>
/// <param name="elementType">Type of data to be contained in the new channel.</param>
/// <param name="channelData">Initial data for the new channel. If null, the channel is filled with the default value for that type.</param>
/// <returns>The newly added vertex channel.</returns>
/// <summary>
/// Removes all vertex channels from the collection.
/// </summary>
/// <summary>
/// Determines whether the collection contains the specified vertex channel.
/// </summary>
/// <param name="name">Name of the channel being searched for.</param>
/// <returns>true if the channel was found; false otherwise.</returns>
/// <summary>
/// Determines whether the collection contains the specified vertex channel.
/// </summary>
/// <param name="item">The channel being searched for.</param>
/// <returns>true if the channel was found; false otherwise.</returns>
/// <summary>
/// Converts the channel, at the specified index, to another vector format.
/// </summary>
/// <typeparam name="TargetType">Type of the target format. Can be one of the following: Single, Vector2, Vector3, Vector4, IPackedVector</typeparam>
/// <param name="index">Index of the channel to be converted.</param>
/// <returns>New channel in the specified format.</returns>
// Get the channel at that index
// Remove it because we cannot add a new channel with the same name
// Insert a new converted channel at the same index
// If anything went wrong, put the old channel back...
// ...before throwing the exception again
// Return the new converted channel
/// <summary>
/// Converts the channel, specified by name to another vector format.
/// </summary>
/// <typeparam name="TargetType">Type of the target format. Can be one of the following: Single, Vector2, Vector3, Vector4, IPackedVector</typeparam>
/// <param name="name">Name of the channel to be converted.</param>
/// <returns>New channel in the specified format.</returns>
/// <summary>
/// Gets the vertex channel with the specified index and content type.
/// </summary>
/// <typeparam name="T">Type of a vertex channel.</typeparam>
/// <param name="index">Index of a vertex channel.</param>
/// <returns>The vertex channel.</returns>
// Make sure the channel type is as expected
/// <summary>
/// Gets the vertex channel with the specified name and content type.
/// </summary>
/// <typeparam name="T">Type of the vertex channel.</typeparam>
/// <param name="name">Name of a vertex channel.</param>
/// <returns>The vertex channel.</returns>
/// <summary>
/// Gets an enumerator that iterates through the vertex channels of a collection.
/// </summary>
/// <returns>Enumerator for the collection.</returns>
/// <summary>
/// Determines the index of a vertex channel with the specified name.
/// </summary>
/// <param name="name">Name of the vertex channel being searched for.</param>
/// <returns>Index of the vertex channel.</returns>
/// <summary>
/// Determines the index of the specified vertex channel.
/// </summary>
/// <param name="item">Vertex channel being searched for.</param>
/// <returns>Index of the vertex channel.</returns>
/// <summary>
/// Inserts a new vertex channel at the specified position.
/// </summary>
/// <typeparam name="ElementType">Type of the new channel.</typeparam>
/// <param name="index">Index for channel insertion.</param>
/// <param name="name">Name of the new channel.</param>
/// <param name="channelData">The new channel.</param>
/// <returns>The inserted vertex channel.</returns>
// Don't insert a channel with the same name
// Insert the values from the enumerable into the channel
// Make sure we have the right number of vertices
// Insert enough default values to fill the channel
// this reference the above Insert method and is initialized in the constructor
/// <summary>
/// Inserts a new vertex channel at the specified position.
/// </summary>
/// <param name="index">Index for channel insertion.</param>
/// <param name="name">Name of the new channel.</param>
/// <param name="elementType">Type of the new channel.</param>
/// <param name="channelData">Initial data for the new channel. If null, it is filled with the default value.</param>
/// <returns>The inserted vertex channel.</returns>
// Call the generic version of this method
/// <summary>
/// Removes the specified vertex channel from the collection.
/// </summary>
/// <param name="name">Name of the vertex channel being removed.</param>
/// <returns>true if the channel was removed; false otherwise.</returns>
/// <summary>
/// Removes the specified vertex channel from the collection.
/// </summary>
/// <param name="item">The vertex channel being removed.</param>
/// <returns>true if the channel was removed; false otherwise.</returns>
/// <summary>
/// Removes the vertex channel at the specified index position.
/// </summary>
/// <param name="index">Index of the vertex channel being removed.</param>
/// <summary>
/// Adds a new vertex channel to the collection.
/// </summary>
/// <param name="item">Vertex channel to be added.</param>
/// <summary>
/// Copies the elements of the collection to an array, starting at the specified index.
/// </summary>
/// <param name="array">The destination array.</param>
/// <param name="arrayIndex">The index at which to begin copying elements.</param>
/// <summary>
/// Inserts an item at the specified index.
/// </summary>
/// <param name="index">The zero-based index at which item should be inserted.</param>
/// <param name="item">The item to insert.</param>
/// <summary>
/// Returns an enumerator that iterates through a collection.
/// </summary>
/// <returns>An object that can be used to iterate through the collection.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\VertexChannelGeneric.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for maintaining a vertex channel.
/// This is a generic implementation of VertexChannel and, therefore, can handle strongly typed content data.
/// </summary>
/// <summary>
/// Gets the strongly-typed list for the base class to access.
/// </summary>
/// <summary>
/// Gets the type of data contained in this channel.
/// </summary>
/// <summary>
/// Gets or sets the element at the specified index.
/// </summary>
/// <summary>
/// true if this object is read-only; false otherwise.
/// </summary>
/// <summary>
/// Creates an instance of VertexChannel.
/// </summary>
/// <param name="name">Name of the channel.</param>
// Some platforms (such as Windows Store) don't support TypeConverter, which
// is normally referenced with an attribute on the target type. To keep them
// out of the main assembly, they are registered here before their use.
//TypeDescriptor.AddAttributes(typeof(Single), new TypeConverterAttribute(typeof(SingleTypeConverter)));
//TypeDescriptor.AddAttributes(typeof(IPackedVector), new TypeConverterAttribute(typeof(PackedVectorTypeConverter)));
/// <summary>
/// Determines whether the specified element is in the channel.
/// </summary>
/// <param name="item">Element being searched for.</param>
/// <returns>true if the element is present; false otherwise.</returns>
/// <summary>
/// Copies the elements of the channel to an array, starting at the specified index.
/// </summary>
/// <param name="array">Array that will receive the copied channel elements.</param>
/// <param name="arrayIndex">Starting index for copy operation.</param>
/// <summary>
/// Gets an enumerator interface for reading channel content.
/// </summary>
/// <returns>Enumeration of the channel content.</returns>
/// <summary>
/// Gets the index of the specified item.
/// </summary>
/// <param name="item">Item whose index is to be retrieved.</param>
/// <returns>Index of specified item.</returns>
/// <summary>
/// Inserts the range of values from the enumerable into the channel.
/// </summary>
/// <param name="index">The zero-based index at which the new elements should be inserted.</param>
/// <param name="data">The data to insert into the channel.</param>
/// <summary>
/// Reads channel content and automatically converts it to the specified vector format.
/// </summary>
/// <typeparam name="TargetType">Target vector format for the converted channel data.</typeparam>
/// <returns>The converted channel data.</returns>
// The following formats are supported:
// - Single
// - Vector2 Structure
// - Vector3 Structure
// - Vector4 Structure
// - Any implementation of IPackedVector Interface.
// If you got this exception, check out the static constructor above
// to make sure your type is registered.
/// <summary>
/// Adds a new element to the end of the collection.
/// </summary>
/// <param name="value">The element to add.</param>
/// <summary>
/// Removes all elements from the collection.
/// </summary>
/// <summary>
/// Removes a specified element from the collection.
/// </summary>
/// <param name="value">The element to remove.</param>
/// <returns>true if the channel was removed; false otherwise.</returns>
/// <summary>
/// Inserts an element into the collection at the specified position.
/// </summary>
/// <param name="index">Index at which to insert the element.</param>
/// <param name="value">The element to insert.</param>
/// <summary>
/// Removes the element at the specified index position.
/// </summary>
/// <param name="index">Index of the element to remove.</param>
/// <summary>
/// Removes a range of values from the channel.
/// </summary>
/// <param name="index">The zero-based starting index of the range of elements to remove.</param>
/// <param name="count"> The number of elements to remove.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\VertexChannelNames.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides properties for managing a collection of vertex channel names.
/// </summary>
/// <summary>
/// A lookup for the TryDecodeUsage method.
/// </summary>
// Populate the lookup for TryDecodeUsage
/// <summary>
/// Gets the name of a binormal vector channel with the specified index.
/// This will typically contain Vector3 data.
/// </summary>
/// <param name="usageIndex">Zero-based index of the vector channel being retrieved.</param>
/// <returns>Name of the retrieved vector channel.</returns>
/// <summary>
/// Gets the name of a color channel with the specified index.
/// This will typically contain Vector3 data.
/// </summary>
/// <param name="usageIndex">Zero-based index of the color channel being retrieved.</param>
/// <returns>Name of the retrieved color channel.</returns>
/// <summary>
/// Gets a channel base name stub from the encoded string format.
/// </summary>
/// <param name="encodedName">Encoded string to be decoded.</param>
/// <returns>Extracted base name.</returns>
/// <summary>
/// Gets a channel usage index from the encoded format.
/// </summary>
/// <param name="encodedName">Encoded name to be decoded.</param>
/// <returns>Resulting channel usage index.</returns>
// Extract the base name
// Subtract the base name from the string and convert the remainder to an integer.
// TryParse solves the problem when name is just 'BlendIndicies' for example, in 
// which case we default to index 0, assuming only 1 index.
/// <summary>
/// Combines a channel name stub and usage index into a string name.
/// </summary>
/// <param name="baseName">A channel base name stub.</param>
/// <param name="usageIndex">A channel usage index.</param>
/// <returns>Resulting encoded name.</returns>
/// <summary>
/// Combines a vertex declaration usage and usage index into a string name.
/// </summary>
/// <param name="vertexElementUsage">A vertex declaration.</param>
/// <param name="usageIndex">An index for the vertex declaration.</param>
/// <returns>Resulting encoded name.</returns>
/// <summary>
/// Gets the name of the primary normal channel.
/// This will typically contain Vector3 data.
/// </summary>
/// <returns>Primary normal channel name.</returns>
/// <summary>
/// Gets the name of a normal channel with the specified index.
/// This will typically contain Vector3 data.
/// </summary>
/// <param name="usageIndex">Zero-based index of the normal channel being retrieved.</param>
/// <returns>Normal channel at the specified index.</returns>
/// <summary>
/// Gets the name of a tangent vector channel with the specified index.
/// This will typically contain Vector3 data.
/// </summary>
/// <param name="usageIndex">Zero-based index of the tangent vector channel being retrieved.</param>
/// <returns>Name of the retrieved tangent vector channel.</returns>
/// <summary>
/// Gets the name of a texture coordinate channel with the specified index.
/// This will typically contain Vector3 data.
/// </summary>
/// <param name="usageIndex">Zero-based index of the texture coordinate channel being retrieved.</param>
/// <returns>Name of the retrieved texture coordinate channel.</returns>
/// <summary>
/// Gets a vertex declaration usage enumeration from the encoded string format.
/// </summary>
/// <param name="encodedName">Encoded name of a vertex declaration.</param>
/// <param name="usage">Value of the declaration usage for the vertex declaration.</param>
/// <returns>true if the encoded name maps to a VertexElementUsage enumeration value; false otherwise.</returns>
// Extract the base name
/// <summary>
/// Gets the name of the primary animation weights channel.
/// This will typically contain data on the bone weights for a vertex channel. For more information, see BoneWeightCollection.
/// </summary>
/// <returns>Name of the primary animation weights channel.</returns>
/// <summary>
/// Gets the name of an animation weights channel at the specified index.
/// This will typically contain data on the bone weights for a vertex channel. For more information, see BoneWeightCollection.
/// </summary>
/// <param name="usageIndex">Index of the animation weight channel to be retrieved.</param>
/// <returns>Name of the retrieved animation weights channel.</returns>
// This appears to be the odd one out that doesn't use the VertexElementUsage enum.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\VertexContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for maintaining the vertex data of a GeometryContent.
/// </summary>
/// <remarks>This class combines a collection of arbitrarily named data channels with a list of position indices that reference the Positions collection of the parent MeshContent.</remarks>
/// <summary>
/// Gets the list of named vertex data channels in the VertexContent.
/// </summary>
/// <value>Collection of vertex data channels.</value>
/// <summary>
/// Gets the list of position indices.
/// </summary>
/// <value>Position of the position index being retrieved.</value>
/// <remarks>This list adds a level of indirection between the actual triangle indices and the Positions member of the parent. This indirection preserves the topological vertex identity in cases where a single vertex position is used by triangles that straddle a discontinuity in some other data channel.
/// For example, the following code gets the position of the first vertex of the first triangle in a GeometryContent object:
/// parent.Positions[Vertices.PositionIndices[Indices[0]]]</remarks>
/// <summary>
/// Gets position data from the parent mesh object.
/// </summary>
/// <value>Collection of vertex positions for the mesh.</value>
/// <remarks>The collection returned from this call provides a virtualized view of the vertex positions for this batch. The collection uses the contents of the PositionIndices property to index into the parent Positions. This collection is read-only. If you need to modify any contained values, edit the PositionIndices or Positions members directly.</remarks>
/// <summary>
/// Number of vertices for the content.
/// </summary>
/// <value>Number of vertices.</value>
/// <summary>
/// Constructs a VertexContent instance.
/// </summary>
/// <summary>
/// Appends a new vertex index to the end of the PositionIndices collection.
/// Other vertex channels will automatically be extended and the new indices populated with default values.
/// </summary>
/// <param name="positionIndex">Index into the MeshContent.Positions member of the parent.</param>
/// <returns>Index of the new entry. This can be added to the Indices member of the parent.</returns>
/// <summary>
/// Appends multiple vertex indices to the end of the PositionIndices collection.
/// Other vertex channels will automatically be extended and the new indices populated with default values.
/// </summary>
/// <param name="positionIndexCollection">Index into the Positions member of the parent.</param>
/// <summary>
/// Converts design-time vertex position and channel data into a vertex buffer format that a graphics device can recognize.
/// </summary>
/// <returns>A packed vertex buffer.</returns>
/// <exception cref="InvalidContentException">One or more of the vertex channel types are invalid or an unrecognized name was passed to VertexElementUsage.</exception>
// TODO: Verify enough elements in channels to match positions?
// Write out data in an interleaved fashion each channel at a time, for example:
//    |------------------------------------------------------------|
//    |POSITION[0] | NORMAL[0]  |TEX0[0] | POSITION[1]| NORMAL[1]  |
//    |-----------------------------------------------|------------|
// #0 |111111111111|____________|________|111111111111|____________|
// #1 |111111111111|111111111111|________|111111111111|111111111111|
// #2 |111111111111|111111111111|11111111|111111111111|111111111111|
// #0: Write position vertices using stride to skip over the other channels:
// #N: Fill in the channel within each vertex
// We always have a position channel
// Optional channels
// Try to determine the vertex format
// Try to determine the vertex usage
// Try getting the usage index
/// <summary>
/// Inserts a new vertex index to the PositionIndices collection.
/// Other vertex channels will automatically be extended and the new indices populated with default values.
/// </summary>
/// <param name="index">Vertex index to be inserted.</param>
/// <param name="positionIndex">Position of new vertex index in the collection.</param>
/// <summary>
/// Inserts multiple vertex indices to the PositionIndices collection.
/// Other vertex channels will automatically be extended and the new indices populated with default values.
/// </summary>
/// <param name="index">Vertex index to be inserted.</param>
/// <param name="positionIndexCollection">Position of the first element of the inserted range in the collection.</param>
/// <summary>
/// Removes a vertex index from the specified location in both PositionIndices and VertexChannel&lt;T&gt;.
/// </summary>
/// <param name="index">Index of the vertex to be removed.</param>
/// <summary>
/// Removes a range of vertex indices from the specified location in both PositionIndices and VertexChannel&lt;T&gt;.
/// </summary>
/// <param name="index">Index of the first vertex index to be removed.</param>
/// <param name="count">Number of indices to remove.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Font\BitmapUtils.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Assorted helpers for doing useful things with bitmaps.
// Checks whether an area of a bitmap contains entirely the specified alpha value.
// Works with PixelBitmapContent<byte> at this stage
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Font\CharacterRegion.cs
// Describes a range of consecutive characters that should be included in the font.
// Enumerates all characters within the region.        
// Constructor.
// Default to just the base ASCII character set.
/// <summary>
/// Test if there is an element in this enumeration.
/// </summary>
/// <typeparam name="T">Type of the element</typeparam>
/// <param name="source">The enumerable source.</param>
/// <returns><c>true</c> if there is an element in this enumeration, <c>false</c> otherwise</returns>
/// <summary>
/// Select elements from an enumeration.
/// </summary>
/// <typeparam name="TSource">The type of the T source.</typeparam>
/// <typeparam name="TResult">The type of the T result.</typeparam>
/// <param name="source">The source.</param>
/// <param name="selector">The selector.</param>
/// <returns>A enumeration of selected values</returns>
/// <summary>
/// Selects distinct elements from an enumeration.
/// </summary>
/// <typeparam name="TSource">The type of the T source.</typeparam>
/// <param name="source">The source.</param>
/// <param name="comparer">The comparer.</param>
/// <returns>A enumeration of selected values</returns>
// using Dictionary is not really efficient but easy to implement
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Font\CharacterRegionTypeConverter.cs
// Input must be a string.
// Supported input formats:
//  A
//  A-Z
//  32-127
//  0x20-0x7F
// Only a single character (eg. "a").
// Range of characters (eg. "a-z").
// Single character directly specifies a codepoint.
// Otherwise it must be an integer (eg. "32" or "0x20").
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Font\Glyph.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Represents a single character within a font.
// Constructor.
// Unicode codepoint.
// Glyph image data (may only use a portion of a larger bitmap).
// Layout information.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Font\GlyphCropper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Crops unused space from around the edge of a glyph bitmap.
// Crop the top.
// Crop the bottom.
// Crop the left.
// Crop the right.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Font\GlyphPacker.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Helper for arranging many small bitmaps onto a single larger surface.
// Build up a list of all the glyphs needing to be arranged.
// Leave a one pixel border around every glyph in the output bitmap.
// Sort so the largest glyphs get arranged first.
// Work out how big the output bitmap should be.
// Choose positions for each glyph, one at a time.
// Create the merged output bitmap.
// Once arranging is complete, copies each glyph to its chosen position in the single larger output bitmap.
// Internal helper class keeps track of a glyph while it is being arranged.
// Works out where to position a single glyph.
// Is this position free for us to use?
// Skip past the existing glyph that we collided with.
// If we ran out of room to move to the right, try the next line down instead.
// Checks if a proposed glyph position collides with anything that we already arranged.
// Comparison function for sorting glyphs by size.
// Heuristic guesses what might be a good output width for a list of glyphs.
// Rounds a value up to the next larger valid texture size.
// In case we want to compress the texture, make sure the size is a multiple of 4.
// Round up to a power of two.
// Round up to the specified block size.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Font\IFontImporter.cs
// Importer interface allows the conversion tool to support multiple source font formats.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Graphics\Font\SharpFontImporter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Uses FreeType to rasterize TrueType fonts into a series of glyph bitmaps.
// Properties hold the imported font data.
// Size of the temp surface used for GDI+ rasterization.
// Create a bunch of GDI+ objects.
// Which characters do we want to include?
// Rasterize each character in turn.
// Store the font height.
// The height used to calculate the Y offset for each character.
// Attempts to instantiate the requested GDI+ font object.
// A font substitution must have occurred.
//throw new Exception(string.Format("Can't find font '{0}'.", options.FontName));
// Rasterizes a single character glyph.
// Render the character.
//if the character bitmap has 1bpp we have to expand the buffer data to get the 8bpp pixel data
//each byte in bitmap.bufferdata contains the value of to 8 pixels in the row
//if bitmap is of width 10, each row has 2 bytes with 10 valid bits, and the last 6 bits of 2nd byte must be discarded
//variables needed for the expansion, amount of written data, length of the data to write
//width in pixels of each row
//valid data in the current byte
//copy the valid bytes to pixeldata
//System.Array.Copy(ExpandByte(face.Glyph.Bitmap.BufferData[i]), 0, gpixelAlphas, written, stride);
// not sure about this at all
// Construct the output Glyph object.
/// <summary>
/// Reads each individual bit of a byte from left to right and expands it to a full byte, 
/// ones get byte.maxvalue, and zeros get byte.minvalue.
/// </summary>
/// <param name="origin">Byte to expand and copy</param>
/// <param name="length">Number of Bits of the Byte to copy, from 1 to 8</param>
/// <param name="destination">Byte array where to copy the results</param>
/// <param name="startIndex">Position where to begin copying the results in destination</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\CompiledEffectContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a compiled Effect.
/// </summary>
/// <summary>
/// Creates a new instance of the CompiledEffectContent class
/// </summary>
/// <param name="effectCode">The compiled effect code.</param>
/// <summary>
/// Retrieves the compiled byte code for this shader.
/// </summary>
/// <returns>The compiled bytecode.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\EffectProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Processes a string representation to a platform-specific compiled effect.
/// </summary>
/// <summary>
/// The debug mode for compiling effects.
/// </summary>
/// <value>The debug mode to use when compiling effects.</value>
/// <summary>
/// Define assignments for the effect.
/// </summary>
/// <value>A list of define assignments delimited by semicolons.</value>
/// <summary>
/// Initializes a new instance of EffectProcessor.
/// </summary>
/// <summary>
/// Processes the string representation of the specified effect into a platform-specific binary format using the specified context.
/// </summary>
/// <param name="input">The effect string to be processed.</param>
/// <param name="context">Context for the specified processor.</param>
/// <returns>A platform-specific compiled binary effect.</returns>
/// <remarks>If you get an error during processing, compilation stops immediately. The effect processor displays an error message. Once you fix the current error, it is possible you may get more errors on subsequent compilation attempts.</remarks>
// Split the errors and warnings into individual lines.
// Process all the lines.
// Just log anything we don't recognize as a warning.
// Try to ensure a good file name for the error message.
// If we got an exception then we'll be throwing an exception 
// below, so just gather the lines to throw later.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\EffectProcessorDebugMode.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Specifies how debugging of effects is to be supported in PIX.
/// </summary>
/// <summary>
/// Enables effect debugging when built with Debug profile.
/// </summary>
/// <summary>
/// Enables effect debugging for all profiles. Will produce unoptimized shaders.
/// </summary>
/// <summary>
/// Disables debugging for all profiles, produce optimized shaders.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\FontDescriptionProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Add special per platform directories
// Get the platform specific texture profile.
// Optimize.
// We need to know how to pack the glyphs.
// Adjust line and character spacing.
// Set the optional character kerning.
// Special case of simply copying the R component into the A, since R is the value of white alpha we want
// Special case of simply moving the R component into the A and setting RGB to solid white, since R is the value of white alpha we want
// Perform the final texture conversion.
// Which importer knows how to read this source font?
//var BitmapFileExtensions = new List<string> { ".bmp", ".png", ".gif" };
//			if (BitmapFileExtensions.Contains(fileExtension))
//			{
//				importer = new BitmapImporter();
//			}
//			else
//			{
// Import the source font data.
// Get all glyphs
// Validate.
// Sort the glyphs
// Check that the default character is part of the glyphs
// The registry value might have trailing NUL characters
// See https://github.com/MonoGame/MonoGame/issues/4061
// check font family, fontconfig might return a fallback
// this file defines multiple family names
// didn't find it
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\FontTextureProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// if we don't have a region that has this pixel already
// we have found the top, left of a image. 
// we now need to scan for the 'bounds'
// we got a glyph :)
//newbitmap.Save (GetCharacterForIndex(i)+".png", System.Drawing.Imaging.ImageFormat.Png);
// extract the glyphs from the texture and map them to a list of characters.
// we need to call GtCharacterForIndex for each glyph in the Texture to 
// get the char for that glyph, by default we start at ' ' then '!' and then ASCII
// after that.
// Optimize.
// Get the platform specific texture profile.
// We need to know how to pack the glyphs.
// Perform the final texture conversion.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\LocalizedFontProcessor.cs
//-----------------------------------------------------------------------------
// LocalizedFontProcessor.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
/// <summary>
/// Custom processor extends the SpriteFont build process to scan over the resource
/// strings used by the game, automatically adding whatever characters it finds in
/// them to the font. This makes sure the game will always have all the characters
/// it needs, no matter what languages it is localized into, while still producing
/// an efficient font that does not waste space on unnecessary characters. This is
/// especially useful for languages such as Japanese and Korean, which have
/// potentially thousands of different characters, although games typically only
/// use a small fraction of these. Building only the characters we need is far more
/// efficient than if we tried to include the entire CJK character region.
/// </summary>
/// <summary>
/// Converts a font description into SpriteFont format.
/// </summary>
// Scan each .resx file in turn.
// Make sure the .resx file really does exist.
// Load the .resx data.
// Scan each string from the .resx file.
// Scan each character of the string.
// Mark that this font should be rebuilt if the resource file changes.
// After adding the necessary characters, we can use the built in
// FontDescriptionProcessor to do the hard work of building the font for us.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\MaterialProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for maintaining a collection of named texture references.
/// </summary>
/// <remarks>In addition to texture references, opaque data values are stored in the OpaqueData property of the base class.</remarks>
/// <summary>
/// Gets or sets the color value to replace with transparent black.
/// </summary>
/// <value>Color value of the material to replace with transparent black.</value>
/// <summary>
/// Specifies whether color keying of a texture is enabled.
/// </summary>
/// <value>true if color keying is enabled; false otherwise.</value>
/// <summary>
/// The default effect type for this instance of MaterialProcessor.
/// </summary>
/// <value>The default effect type.</value>
/// <remarks>When MaterialProcessor is instantiated, DefaultEffect is set to default to BasicEffect Class.</remarks>
/// <summary>
/// Specifies if a full chain of mipmaps are generated from the source material. Existing mipmaps of the material are not replaced.
/// </summary>
/// <value>true if mipmap generation is enabled; false otherwise.</value>
/// <summary>
/// Specifies whether alpha premultiply of textures is enabled.
/// </summary>
/// <value>true if alpha premultiply is enabled; false otherwise.</value>
/// <summary>
/// Specifies whether resizing of a material is enabled. Typically used to maximize compatability with a graphics card because many graphics cards do not support a material size that is not a power of two. If ResizeTexturesToPowerOfTwo is enabled, the material is resized to the next largest power of two.
/// </summary>
/// <value>true if resizing is enabled; false otherwise.</value>
/// <summary>
/// Specifies the texture format of output materials. Materials can either be left unchanged from the source asset, converted to a corresponding Color, or compressed using the appropriate DxtCompressed format.
/// </summary>
/// <value>The texture format of the output.</value>
/// <summary>
/// Initializes a new instance of the MaterialProcessor class.
/// </summary>
/// <summary>
/// Builds effect content.
/// </summary>
/// <param name="effect">An external reference to the effect content.</param>
/// <param name="context">Context for the specified processor.</param>
/// <returns>A platform-specific compiled binary effect.</returns>
/// <remarks>If the input to process is of type EffectMaterialContent, this function will be called to request that the EffectContent be built. The EffectProcessor is used to process the EffectContent. Subclasses of MaterialProcessor can override this function to modify the parameters used to build EffectContent. For example, a different version of this function could request a different processor for the EffectContent.</remarks>
/// <summary>
/// Builds texture content.
/// </summary>
/// <param name="textureName">The name of the texture. This should correspond to the key used to store the texture in Textures.</param>
/// <param name="texture">The asset to build. This should be a member of Textures.</param>
/// <param name="context">Context for the specified processor.</param>
/// <returns>The built texture content.</returns>
/// <remarks>textureName can be used to determine which processor to use. For example, if a texture is being used as a normal map, the user may not want to use the ModelTextureProcessor on it, which compresses textures.</remarks>
/// <summary>
/// Builds the texture and effect content for the material.
/// </summary>
/// <param name="input">The material content to build.</param>
/// <param name="context">Context for the specified processor.</param>
/// <returns>The built material.</returns>
/// <remarks>If the MaterialContent is of type EffectMaterialContent, a build is requested for Effect, and validation will be performed on the OpaqueData to ensure that all parameters are valid input to SetValue or SetValueTranspose. If the MaterialContent is a BasicMaterialContent, no validation will be performed on OpaqueData. Process requests builds for all textures in Textures, unless the MaterialContent is of type BasicMaterialContent, in which case a build will only be requested for DiffuseColor. The textures in Textures will be ignored.</remarks>
// Apply specified default effect.
// Preserve material properties.
// Docs say that if it's a basic effect, only build the diffuse texture.
// Build custom effects
// TODO: Docs say to validate OpaqueData for SetValue/SetValueTranspose
// Does that mean to match up with effect param names??
// Build all textures
/// <summary>
/// Helper method which returns the material for a default effect.
/// </summary>
/// <returns>A material.</returns>
/// <summary>
/// Helper method which returns the default effect for a material.
/// </summary>
/// <returns>The default effect.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\MaterialProcessorDefaultEffect.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Specifies the default effect type.
/// </summary>
/// <summary>
/// A BasicEffect Class effect.
/// </summary>
/// <summary>
/// A SkinnedEffect Class effect.
/// </summary>
/// <summary>
/// An EnvironmentMapEffect Class effect.
/// </summary>
/// <summary>
/// A DualTextureEffect Class effect.
/// </summary>
/// <summary>
/// An AlphaTestEffect Class effect.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\ModelBoneContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\ModelBoneContentCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\ModelContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\ModelMeshContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\ModelMeshContentCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\ModelMeshPartContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\ModelMeshPartContentCollection.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\ModelProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Perform the processor transforms.
// Gather all the nodes in tree traversal order.
// Loop through all distinct materials, passing them through the conversion method
// only once, and then processing all geometries using that material.
// Geoms are supposed to all have the same decl, so just steal one of these
// If we don't get a material then assign a default one.
// Test requirements from the assigned material.
// Just check for a "Texture" which should cover custom Effects
// and BasicEffect which can have an optional texture.
// By default we must set the vertex color property
// to match XNA behavior.
// If we run into a geometry that requires vertex
// color we need a seperate material for it.
// Process the geometry.
// Verify we have the right number of texture coords.
// Do we need to enable vertex color?
// Do we need vertex weights?
// TODO: According to docs, channels with VertexElementUsage.Color -> Color
// Channels[VertexChannelNames.Weights] -> { Byte4 boneIndices, Color boneWeights }
// NOTE: Portions of this code is from the XNA CPU Skinning 
// sample under Ms-PL, (c) Microsoft Corporation.
// create a map of Name->Index of the bones
// create our new channel names
// add in the index and weight channels
// remove the original weights channel
// From the XNA CPU Skinning Sample under Ms-PL, (c) Microsoft Corporation
// we only handle 4 weights per bone
// create some temp arrays to hold our values
// cull out any extra bones
// get our indices and weights
// zero out any remaining spaces
// output the values
/// <summary>
/// Returns each element of a tree structure in hierarchical order.
/// </summary>
/// <typeparam name="T">The enumerated type.</typeparam>
/// <param name="source">The enumeration to traverse.</param>
/// <param name="selector">A function which returns the children of the element.</param>
/// <returns>An IEnumerable whose elements are in tree structure heriarchical order.</returns>
// Return the next item on the stack.
// Get the children from this item.
// If we have no children then skip it.
// We're using a stack, so we need to push the
// children on in reverse to get the correct order.
/// <summary>
/// Returns an enumerable from a single element.
/// </summary>
/// <typeparam name="T"></typeparam>
/// <param name="item"></param>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\PassThroughProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// As the name implies, this processor simply passes data through as-is.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\SongContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a processed Song object.
/// </summary>
/// <summary>
/// Creates a new instance of the SongContent class
/// </summary>
/// <param name="fileName">Filename of the song</param>
/// <param name="duration">Duration of the song</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\SongProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A custom song processor that processes an intermediate AudioContent type. This type encapsulates the source audio content, producing a Song type that can be used in the game.
/// </summary>
/// <summary>
/// Gets or sets the target format quality of the audio content.
/// </summary>
/// <value>The ConversionQuality of this audio data.</value>
/// <summary>
/// Initializes a new instance of SongProcessor.
/// </summary>
/// <summary>
/// Builds the content for the source audio.
/// </summary>
/// <param name="input">The audio content to build.</param>
/// <param name="context">Context for the specified processor.</param>
/// <returns>The built audio.</returns>
// The xnb name is the basis for the final song filename.
// Convert and write out the song media file.
// Let the pipeline know about the song file so it can clean things up.
// Return the XNB song content.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\SoundEffectContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a processed sound effect.
/// </summary>
/// <summary>
/// Initializes a new instance of the SoundEffectContent class.
/// </summary>
/// <param name="format">The WAV header.</param>
/// <param name="data">The audio waveform data.</param>
/// <param name="loopStart">The start of the loop segment (must be block aligned).</param>
/// <param name="loopLength">The length of the loop segment (must be block aligned).</param>
/// <param name="duration">The duration of the wave file in milliseconds.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\SoundEffectProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// A sound effect processor that processes an intermediate AudioContent type. This type encapsulates the source audio content, producing a SoundEffect type that can be used in the game.
/// </summary>
/// <summary>
/// Gets or sets the target format quality of the audio content.
/// </summary>
/// <value>The ConversionQuality of this audio data.</value>
/// <summary>
/// Initializes a new instance of SoundEffectProcessor.
/// </summary>
/// <summary>
/// Builds the content for the source audio.
/// </summary>
/// <param name="input">The audio content to build.</param>
/// <param name="context">Context for the specified processor.</param>
/// <returns>The built audio.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\SpriteFontContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Will be replaced in the pipeline.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\TextureProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// If it is already a compressed format, we cannot do anything else so just return it
// Convert to floating point format for modifications. Keep the original format for conversion back later on if required.
// If no change to the surface format was desired, change it back now before it early outs
// Get the texture profile for the platform and let it convert the texture.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\TextureProcessorOutputFormat.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Specifies the target output (of type SurfaceFormat) of the texture processor. Used by TextureProcessor.TextureFormat.
/// </summary>
/// <summary>
/// The SurfaceFormat value, of the input TextureContent object, is converted to Color by the processor. Typically used for 2D graphics and overlays.
/// </summary>
/// <summary>
/// The SurfaceFormat value, of the input TextureContent object, is converted to an appropriate DXT compression by the processor. If the input texture
/// contains fractional alpha values, it is converted to DXT5 format (8 bits per texel); otherwise it is converted to DXT1 (4 bits per texel). This
/// conversion reduces the resource's size on the graphics card. Typically used for 3D textures such as 3D model textures.
/// </summary>
/// <summary>
/// The SurfaceFormat value, of the input TextureContent object, is not changed by the processor. Typically used for textures processed by an external tool.
/// </summary>
/// <summary>
/// The SurfaceFormat value, of the input TextureContent object, is converted to an appropriate compressed format for the target platform.
/// This can include PVRTC for iOS, DXT for desktop, Windows 8 and Windows Phone 8, and ETC1 or BGRA4444 for Android.
/// </summary>
/// <summary>
/// The pixel depth of the input texture is reduced to BGR565 for opaque textures, otherwise it uses BGRA4444.
/// </summary>
/// <summary>
/// The input texture is compressed using ETC1 texture compression.  Used on Android platforms.
/// </summary>
/// <summary>
/// The input texture is compressed using PVR texture compression. Used on iOS and some Android platforms.
/// </summary>
/// <summary>
/// The input texture is compressed using ATI texture compression.  Used on some Android platforms.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\VertexBufferContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for managing a design-time vertex buffer that holds packed vertex data.
/// </summary>
/// <remarks>This type directly corresponds to the runtime VertexBuffer class, and when a VertexBufferContent object is passed to the content compiler, the vertex data deserializes directly into a VertexBuffer at runtime. VertexBufferContent objects are not directly created by importers. The preferred method is to store vertex data in the more flexible VertexContent class.</remarks>
/// <summary>
/// Gets the array containing the raw bytes of the packed vertex data. Use this method to get and set the contents of the vertex buffer.
/// </summary>
/// <value>Raw data of the packed vertex data.</value>
/// <summary>
/// Gets and sets the associated VertexDeclarationContent object.
/// </summary>
/// <value>The associated VertexDeclarationContent object.</value>
/// <summary>
/// Initializes a new instance of VertexBufferContent.
/// </summary>
/// <summary>
/// Initializes a new instance of VertexBufferContent of the specified size.
/// </summary>
/// <param name="size">The size of the vertex buffer content, in bytes.</param>
/// <summary>
/// Gets the size of the specified type, in bytes.
/// </summary>
/// <param name="type">The type.</param>
/// <returns>The size of the specified type, in bytes.</returns>
/// <remarks>Call this method to compute offset parameters for the Write method. If the specified 
/// data type cannot be packed into a vertex buffer—for example, if type is not a valid value type—a 
/// NotSupportedException is thrown.</remarks>
/// <exception cref="NotSupportedException">type is not a valid value type</exception>
/// <summary>
/// Writes additional data into the vertex buffer. Writing begins at the specified byte offset, and each value is spaced according to the specified stride value (in bytes).
/// </summary>
/// <typeparam name="T">Type being written.</typeparam>
/// <param name="offset">Offset to begin writing at.</param>
/// <param name="stride">Stride of the data being written, in bytes.</param>
/// <param name="data">Enumerated collection of data.</param>
/// <exception cref="NotSupportedException">The specified data type cannot be packed into a vertex buffer.</exception>
/// <summary>
/// Writes additional data into the vertex buffer. Writing begins at the specified byte offset, and each value is spaced according to the specified stride value (in bytes).
/// </summary>
/// <param name="offset">Offset at which to begin writing.</param>
/// <param name="stride">Stride of the data being written, in bytes.</param>
/// <param name="dataType">The type of data to be written.</param>
/// <param name="data">The data to write.</param>
/// <exception cref="NotSupportedException">The specified data type cannot be packed into a vertex buffer.</exception>
// NOTE: This is not a very fast way to serialize 
// an unknown struct type, but it is reliable.
//
// Still the chances vertex buffer serialization
// being the bottleneck of the content pipeline
// are almost non-existent.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\VertexDeclarationContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for maintaining the vertex declaration data of a VertexContent.
/// </summary>
/// <summary>
/// Gets the VertexElement object of the vertex declaration.
/// </summary>
/// <value>The VertexElement object of the vertex declaration.</value>
/// <summary>
/// The number of bytes from one vertex to the next.
/// </summary>
/// <value>The stride (in bytes).</value>
/// <summary>
/// Initializes a new instance of VertexDeclarationContent.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Processors\VideoProcessor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Make sure the output folder for the video exists.
// Copy the already encoded video file over
// Fixup relative path
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\AlphaTestEffectWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ArrayWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the array value to the output.
/// </summary>
/// <inheritdoc/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\BasicEffectWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\BooleanWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the boolean value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\BoundingBoxWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the BoundingBox value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\BoundingFrustumWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the BoundingFrustum value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\BoundingSphereWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the BoundingSphere value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\BuiltInContentWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Base class for the built-in content type writers where the content type is the same as the runtime type.
/// </summary>
/// <typeparam name="T">The content type being written.</typeparam>
/// <inheritdoc/>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
/// <summary>
/// Gets the assembly qualified name of the runtime loader for this type.
/// </summary>
/// <param name="targetPlatform">Name of the platform.</param>
/// <returns>Name of the runtime loader.</returns>
// Change "Writer" in this class name to "Reader" and use the runtime type namespace and assembly
// Add generic arguments if they exist.
// Important: Do not add a space char after the comma because 
// this will not work with Type.GetType in Xamarin.Android!
// From looking at XNA-produced XNBs, it appears built-in
// type readers don't need assembly qualification.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ByteWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the unsigned byte value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\CharWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the character value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ColorWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the Color value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\CompiledEffectContentWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ContentCompiler.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods for writing compiled binary format.
/// </summary>
/// <summary>
/// Initializes a new instance of ContentCompiler.
/// </summary>
/// <summary>
/// Iterates through all loaded assemblies and finds the content type writers.
/// </summary>
// Find the content type this writer implements
/// <summary>
/// Retrieves the worker writer for the specified type.
/// </summary>
/// <param name="type">The type.</param>
/// <returns>The worker writer.</returns>
/// <remarks>This should be called from the ContentTypeWriter.Initialize method.</remarks>
// Compare generic type definition
// save it for next time.
/// <summary>
/// Write the content to a XNB file.
/// </summary>
/// <param name="stream">The stream to write the XNB file to.</param>
/// <param name="content">The content to write to the XNB file.</param>
/// <param name="targetPlatform">The platform the XNB is intended for.</param>
/// <param name="targetProfile">The graphics profile of the target.</param>
/// <param name="compressContent">True if the content should be compressed.</param>
/// <param name="rootDirectory">The root directory of the content.</param>
/// <param name="referenceRelocationPath">The path of the XNB file, used to calculate relative paths for external references.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ContentTypeWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides methods and properties for compiling a specific managed type into a binary format.
/// </summary>
/// <summary>
/// Determines if deserialization into an existing object is possible.
/// </summary>
/// <value>true if the object can be deserialized into; false otherwise.</value>
/// <summary>
/// Gets the type handled by this compiler component.
/// </summary>
/// <value>The type handled by this compiler component.</value>
/// <summary>
/// Gets a format version number for this type.
/// </summary>
/// <value>A format version number for this type.</value>
/// <summary>
/// Initializes a new instance of the ContentTypeWriter class.
/// </summary>
/// <param name="targetType"></param>
/// <summary>
/// Gets the assembly qualified name of the runtime loader for this type.
/// </summary>
/// <param name="targetPlatform">Name of the platform.</param>
/// <returns>Name of the runtime loader.</returns>
/// <summary>
/// Gets the assembly qualified name of the runtime target type. The runtime target type often matches the design time type, but may differ.
/// </summary>
/// <param name="targetPlatform">The target platform.</param>
/// <returns>The qualified name.</returns>
/// <summary>
/// Retrieves and caches nested type writers and allows for reflection over the target data type. Called by the framework at creation time.
/// </summary>
/// <param name="compiler">The content compiler.</param>
/// <summary>
/// Allows type writers to add their element type writers to the content writer.
/// </summary>
/// <param name="writer">The content writer.</param>
/// <summary>
/// Indicates whether a given type of content should be compressed.
/// </summary>
/// <param name="targetPlatform">The target platform of the content build.</param>
/// <param name="value">The object about to be serialized, or null if a collection of objects is to be serialized.</param>
/// <returns>true if the content of the requested type should be compressed; false otherwise.</returns>
/// <remarks>This base class implementation of this method always returns true. It should be overridden
/// to return false if there would be little or no useful reduction in size of the content type's data
/// from a general-purpose lossless compression algorithm.
/// The implementations for Song Class and SoundEffect Class data return false because data for these
/// content types is already in compressed form.</remarks>
// For now, only support uncompressed
//switch (targetPlatform)
//{
//    case TargetPlatform.Windows:
//    case TargetPlatform.Linux:
//    case TargetPlatform.MacOSX:
//    case TargetPlatform.WindowsStoreApp:
//        return true;
//    default:
//        return false;
//}
/// <summary>
/// Compiles an object into binary format.
/// </summary>
/// <param name="output">The content writer serializing the value.</param>
/// <param name="value">The resultant object.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ContentTypeWriterAttribute.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Identifies the components of a type writer. Custom content writers must apply this attribute to their class as well as extend the ContentTypeWriter class.
/// </summary>
/// <summary>
/// Initializes a new instance of the ContentTypeWriterAttribute class.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ContentTypeWriterGeneric.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides a generic implementation of ContentTypeWriter methods and properties for compiling a specific managed type into a binary format.
/// </summary>
/// <typeparam name="T">The type to write</typeparam>
/// <remarks>This is a generic implementation of ContentTypeWriter and, therefore, can handle strongly typed content data.</remarks>
/// <summary>
/// Initializes a new instance of the ContentTypeWriter class.
/// </summary>
/// <summary>
/// Compiles a strongly typed object into binary format.
/// </summary>
/// <param name="output">The content writer serializing the value.</param>
/// <param name="value">The value to write.</param>
/// <summary>
/// Compiles a strongly typed object into binary format.
/// </summary>
/// <param name="output">The content writer serializing the value.</param>
/// <param name="value">The value to write.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ContentWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides an implementation for many of the ContentCompiler methods including compilation, state tracking for shared resources and creation of the header type manifest.
/// </summary>
/// <remarks>A new ContentWriter is constructed for each compilation operation.</remarks>
// This array must remain in sync with TargetPlatform
// Windows (DirectX)
// Xbox360
// iOS
// Android
// DesktopGL
// MacOSX
// WindowsStoreApp
// NativeClient
// PlayStationMobile
// WindowsPhone8
// RaspberryPi
// PlayStation4
// PSVita
// XboxOne
// Nintendo Switch
// Google Stadia
// WebAssembly and Bridge.NET
/// <summary>
/// Gets the content build target platform.
/// </summary>
/// <summary>
/// Gets or sets the target graphics profile.
/// </summary>
/// <summary>
/// Creates a new instance of ContentWriter.
/// </summary>
/// <param name="compiler">The compiler object that created this writer.</param>
/// <param name="output">The stream to write the XNB file to.</param>
/// <param name="targetPlatform">The platform the XNB is intended for.</param>
/// <param name="targetProfile">The graphics profile of the target.</param>
/// <param name="compressContent">True if the content should be compressed.</param>
/// <param name="rootDirectory">The root directory of the content.</param>
/// <param name="referenceRelocationPath">The path of the XNB file, used to calculate relative paths for external references.</param>
// Normalize the directory format so PathHelper.GetRelativePath will compute external references correctly.
/// <summary>
/// Releases the resources used by the IDisposable class.
/// </summary>
/// <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
// Make sure the binary writer has the original stream back
// Dispose managed resources we allocated
/// <summary>
/// All content has been written, so now finalize the header, footer and anything else that needs finalizing.
/// </summary>
// Write shared resources to the end of body stream
// Before we write the header, try to compress the body stream. If compression fails, we want to
// turn off the compressContent flag so the correct flags are written in the header
// The compression failed (sometimes LZ4 does fail, for various reasons), so just write
// it out uncompressed.
/// <summary>
/// Write the table of content type writers.
/// </summary>
/// <summary>
/// Write the header to the output stream.
/// </summary>
// We cannot use LZX compression, so we use the public domain LZ4 compression. Use one of the spare bits in the flags byte to specify LZ4.
/// <summary>
/// Write all shared resources at the end of the file.
/// </summary>
/// <summary>
/// Compress the stream and write it to the output.
/// </summary>
/// <param name="stream">The stream to compress and write to the output.</param>
/// <returns>true if the write succeeds</returns>
// Compress stream
/// <summary>
/// Write the uncompressed stream to the output.
/// </summary>
/// <param name="stream">The stream to write to the output.</param>
/// <returns>true if the write succeeds</returns>
/// <summary>
/// Gets a ContentTypeWriter for the given type.
/// </summary>
/// <param name="type">The type of the object to write.</param>
/// <returns>The ContentTypeWriter for the type.</returns>
/// <summary>
/// Writes the name of an external file to the output binary.
/// </summary>
/// <typeparam name="T">The type of reference.</typeparam>
/// <param name="reference">External reference to a data file for the content item.</param>
// Make sure the filename ends with .xnb
// Make sure it is in the same root directory
// Strip the .xnb extension
// Get the relative directory
/// <summary>
/// Writes a single object preceded by a type identifier to the output binary.
/// </summary>
/// <typeparam name="T">The type of value.</typeparam>
/// <param name="value">The value to write.</param>
/// <remarks>This method can be called recursively with a null value.</remarks>
// Because zero means null object, we add one to 
// the index before writing it to the file.
/// <summary>
/// Writes a single object to the output binary, using the specified type hint and writer worker.
/// </summary>
/// <typeparam name="T">The type of value.</typeparam>
/// <param name="value">The value to write.</param>
/// <param name="typeWriter">The content type writer.</param>
/// <remarks>The type hint should be retrieved from the Initialize method of the ContentTypeWriter
/// that is calling WriteObject, by calling GetTypeWriter and passing it the type of the field used
/// to hold the value being serialized.
/// </remarks>
/// <summary>
/// Writes a single object to the output binary as an instance of the specified type.
/// </summary>
/// <typeparam name="T">The type of value.</typeparam>
/// <param name="value">The value to write.</param>
/// <remarks>If you specify a base class of the actual object value only data from this base type
/// will be written. This method does not write any type identifier so it cannot support null or
/// polymorphic values, and the reader must specify an identical type while loading the compiled data.</remarks>
/// <summary>
/// Writes a single object to the output binary using the specified writer worker.
/// </summary>
/// <typeparam name="T">The type of value.</typeparam>
/// <param name="value">The value to write.</param>
/// <param name="typeWriter">The writer worker. This should be looked up from the Initialize method
/// of the ContentTypeWriter that is calling WriteRawObject, by calling GetTypeWriter.</param>
/// <remarks>WriteRawObject does not write any type identifier, so it cannot support null or polymorphic
/// values, and the reader must specify an identical type while loading the compiled data.</remarks>
/// <summary>
/// Adds a shared reference to the output binary and records the object to be serialized later.
/// </summary>
/// <typeparam name="T">The type of value.</typeparam>
/// <param name="value">The object to record.</param>
// Zero means a null value
// Add it to the list of shared resources
// Because zero means null value, we add one before writing the index to the file
/// <summary>
/// Writes a Color value.
/// </summary>
/// <param name="value">Value of a color using Red, Green, Blue, and Alpha values to write.</param>
/// <summary>
/// Writes a Matrix value.
/// </summary>
/// <param name="value">Value to write.</param>
/// <summary>
/// Writes a Matrix value.
/// </summary>
/// <param name="value">Value to write.</param>
/// <summary>
/// Writes a Vector2 value.
/// </summary>
/// <param name="value">Value to write.</param>
/// <summary>
/// Writes a Vector3 value.
/// </summary>
/// <param name="value">Value to write.</param>
/// <summary>
/// Writes a Vector4 value.
/// </summary>
/// <param name="value">Value to write.</param>
/// <summary>
/// Writes a BoundingSphere value.
/// </summary>
/// <param name="value">Value to write.</param>
/// <summary>
/// Writes a Rectangle value.
/// </summary>
/// <param name="value">Value to write.</param>
/// <summary>
/// Helper for checking if a type can be deserialized into an existing object.
/// </summary>
/// <param name="type">The type to check.</param>
/// <returns>True if the type can be deserialized into an existing object.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\CurveWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the Curve value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\DateTimeWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the DateTime value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\DecimalWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the decimal value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\DictionaryWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the dictionary to the output.
/// </summary>
/// <inheritdoc/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\DoubleWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the double precision floating point value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\DualTextureEffectWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\EffectMaterialWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\EnumWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the enum value to the output. Usually 32 bit, but can be other sizes if T is not integer.
/// </summary>
/// <typeparam name="T">The enum type to write.</typeparam>
/// <inheritdoc/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\EnvironmentMapEffectWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ExternalReferenceWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the external reference to the output.
/// </summary>
/// <inheritdoc/>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
/// <inheritdoc/>
/// <inheritdoc/>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\IndexBufferWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Check if the buffer and can be saved as Int16.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\Int16Writer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the signed short value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\Int32Writer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the signed integer value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\Int64Writer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the signed long value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ListWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the list to the output.
/// </summary>
/// <inheritdoc/>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\MatrixWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the Matrix value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ModelWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Bone properties
// Hierarchy
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\MultiArrayWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the array value to the output.
/// </summary>
/// <inheritdoc/>
// Dimension sizes
// Values
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\NullableWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the nullable value to the output.
/// </summary>
/// <inheritdoc/>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\PlaneWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the Plane value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\PointWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the Point value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\QuaternionWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the Quaternion value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\RayWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the Ray value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\RectangleWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the Rectangle value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\ReflectiveWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <inheritdoc/>
// Properties must have at least a getter.
// Skip over indexer properties.
// Are we explicitly asked to ignore this item?
// There is no ContentSerializerAttribute, so non-public
// properties cannot be serialized.
// Check the type reader to see if it is safe to
// deserialize into the existing type.
// Are we explicitly asked to ignore this item?
// There is no ContentSerializerAttribute, so non-public
// fields cannot be deserialized.
// evolutional: Added check to skip initialise only fields
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\SByteWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the signed byte value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\SingleWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the single precision floating point value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\SkinnedEffectWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\SongContentWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\SoundEffectContentWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\SpriteFontContentWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Gets the assembly qualified name of the runtime loader for this type.
/// </summary>
/// <param name="targetPlatform">Name of the platform.</param>
/// <returns>Name of the runtime loader.</returns>
// Base the reader type string from a known public class in the same namespace in the same assembly
/// <summary>
/// Gets the assembly qualified name of the runtime target type. The runtime target type often matches the design time type, but may differ.
/// </summary>
/// <param name="targetPlatform">The target platform.</param>
/// <returns>The qualified name.</returns>
// Base the reader type string from a known public class in the same namespace in the same assembly
/// <summary>
/// Indicates whether a given type of content should be compressed.
/// </summary>
/// <param name="targetPlatform">The target platform of the content build.</param>
/// <param name="value">The object about to be serialized, or null if a collection of objects is to be serialized.</param>
/// <returns>true if the content of the requested type should be compressed; false otherwise.</returns>
/// <remarks>This base class implementation of this method always returns true. It should be overridden
/// to return false if there would be little or no useful reduction in size of the content type's data
/// from a general-purpose lossless compression algorithm.
/// The implementations for Song Class and SoundEffect Class data return false because data for these
/// content types is already in compressed form.</remarks>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\StringWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the string value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\Texture2DContentWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Mipmap chain.
// Most detailed mipmap level.
// Number of mipmap levels.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\TextureCubeWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Mipmap chain of face 0 (+X).
// Most detailed mipmap level of face 0.
// Surface format
// Cube map size
// Number of mipmap levels
// The number of faces in TextureCubeContent is guaranteed to be 6.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\TextureWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Do nothing.
// The TextureWriter is not used to write anything, but it is used by
// the ExternalReferenceWriter when an ExternalReference<TextureContent>
// is written! (See ExternalReferenceWriter implementation.)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\TimeSpanWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the TimeSpan value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\UInt16Writer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the unsigned short value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\UInt32Writer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the unsigned integer value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\UInt64Writer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the unsigned long value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\Vector2Writer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the Vector2 value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\Vector3Writer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the Vector3 value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\Vector4Writer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the Vector4 value to the output.
/// </summary>
/// <summary>
/// Writes the value to the output.
/// </summary>
/// <param name="output">The output writer object.</param>
/// <param name="value">The value to write to the output.</param>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\VertexBufferWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\VertexDeclarationWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// If fpr whatever reason there isn't a vertex stride defined, it's going to
// cause problems after reading it in, so better to fail early here.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Compiler\VideoWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ArraySerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\BoolSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ByteSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\CharSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Try parsing it as a UTF code.
// Last ditch effort to decode it as XML escape value.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ColorSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// NOTE: The value is serialized in ARGB format.
// NOTE: The value is serialized in ARGB format.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ContentTypeSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ContentTypeSerializerAttribute.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Used to identify custom ContentTypeSerializer classes. 
/// </summary>
/// <summary>
/// Initializes an instance of the ContentTypeSerializerAttribute.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ContentTypeSerializerT.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\CurveKeyCollectionSerializer.cs
// Each CurveKey consists of 5 elements
// Parse all CurveKeys
// Order: Position, Value, TangentIn, TangentOut and Continuity
// Order: Position, Value, TangentIn, TangentOut and Continuity
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\DictionarySerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\DoubleSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ElementSerializerT.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\EnumSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ExternalReferenceSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\FloatSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\GenericCollectionHelper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\IntermediateReader.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Is the object null?
// Is the object overloading the serialized type?
// Do we already have one for this?
// Read all the resources.
// Execute the fixups.
// Read all the external references.
// Apply the fixups.
/// <summary>
/// Reads the next type in the 
/// </summary>
/// <returns></returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\IntermediateSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// The intermediate serializer implementation is based on testing XNA behavior and the following sources:
//
// http://msdn.microsoft.com/en-us/library/Microsoft.Xna.Framework.Content.Pipeline.Serialization.Intermediate.aspx
// http://blogs.msdn.com/b/shawnhar/archive/2008/08/12/everything-you-ever-wanted-to-know-about-intermediateserializer.aspx
// http://blogs.msdn.com/b/shawnhar/archive/2008/08/26/customizing-intermediateserializer-part-1.aspx
// http://blogs.msdn.com/b/shawnhar/archive/2008/08/26/customizing-intermediateserializer-part-2.aspx
// http://blogs.msdn.com/b/shawnhar/archive/2008/08/27/why-intermediateserializer-control-attributes-are-not-part-of-the-content-pipeline.aspx
//
/// <summary>
/// According to the examples on Sean Hargreaves' blog, explicit types
/// can also specify the type aliases from C#. This maps those names
/// to the actual .NET framework types for parsing.
/// </summary>
/// <summary>
/// Maps "ShortName:" -> "My.Namespace.LongName." for type lookups.
/// </summary>
// Initialize the namespace lookups from
// the attributes on the XnaContent element.
// Move past the XnaContent.
// Read the asset.
// Process the shared resources and external references.
// Move past the closing XnaContent element.
// Create the known serializers if we haven't already.
// Look it up.
// Special handling for non-generic IList types. By the time we get here,
// generic collection types will already have been handled by one of the known serializers.
// The reflective serializer is not for primitive types!
// We still don't have a serializer then we 
// fallback to the reflection based serializer.
// We cache the serializer before we initialize it to 
// avoid a stack overflow on recursive types.
// Write the asset.
// Process the shared resources and external references.
// Close the XnaContent element.
/// <summary>
/// Builds a lookup table from a short name to the full namespace.
/// </summary>
/// <summary>
/// Finds the type in any assembly loaded into the AppDomain.
/// </summary>
// Shortcut for friendly C# names
// If this is an array then handle it separately.
// Expand any namespaces in the asset type
// If this a generic type, handle it separately.
/// <summary>
/// Gets the (potentially) aliased name for any type.
/// </summary>
// Shortcut for friendly C# names
// Look for aliased namespace.
// Fallback to full type name.
/// <summary>
/// Returns the name of the type, without the namespace.
/// For generic types, we add the type parameters in square brackets.
/// i.e. List&lt;int&gt; becomes List[int]
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\IntermediateWriter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Loop like this because we might create more shared resources while we're serializing.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\IntSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ListSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Create the item serializer attribute.
// Read all the items.
// Create the item serializer attribute.
// Read all the items.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\LongSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\MatrixSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\NamedValueDictionarySerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\NamespaceAliasHelper.cs
/// <summary>
/// Maps "My.Namespace.LongName" -> "ShortName" for type lookups.
/// </summary>
// Maps "My.Namespace.LongName" -> "ShortName" for type lookups.
// Get all namespaces of types used by "value" or its children.
// Do first pass to determine what our aliases are. We do this on a sorted
// list of namespaces so that more-nested namespaces will be processed last,
// by which time we will have already created the aliases for parent namespaces.
// Do second pass on the namespaces as they were originally ordered, to match XNA.
// Force top-level object type to be included.
// Scan child objects.
// If there isn't yet an alias for the last part of the namespace, use that.
// Otherwise, find the longest parent namespace, and use that, with a TypePrefix to make
// this namespace relative to that one.
/// <summary>
/// Returns just the portion <paramref name="namespace"/> relative to <paramref name="namespaceParent"/>.
/// For example, given namespaceParent=Foo.Bar and @namespace=Foo.Bar.Baz, will return Baz.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\NonGenericIListSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Create the item serializer attribute.
// Read all the items.
// Create the item serializer attribute.
// Read all the items.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\NullableSerializer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\PackedElementsHelper.cs
// Special case for char ' '
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\PlaneSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\PointSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\QuaternionSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\RectangleSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ReflectiveSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Are we ignoring this property?
// Store the attribute for later use.
// Default the to member name as the element name.
// We don't have a serializer attribute, so we can
// only access this member thru a public field/property.
// If we don't have at least a public getter then this 
// property can't be serialized or deserialized in any way.
// If there is a setter, but it's private, then don't include this element
// (although technically we could, as long as we have a serializer with
// CanDeserializeIntoExistingObject=true for this property type)
// If there is no setter, and we don't have a type serializer 
// that can deserialize into an existing object, then we have no way 
// for it to be deserialized.
// Don't serialize or deserialize indexers.
// If we have a base type then we need to deserialize it first.
// Cache all our serializable properties.
// Cache all our serializable fields.
// First deserialize the base type.
// Now deserialize our own elements.
// If the the element was optional then we can
// safely skip it and continue.
// We failed to find a required element.
// First scan the base type.
// Now scan our own elements.
// First serialize the base type.
// Now serialize our own elements.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\SByteSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ShortSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\StringSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\TimeSpanSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\UIntSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\ULongSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\UShortSerializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\Vector2Serializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\Vector3Serializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Serialization\Intermediate\Vector4Serializer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Utilities\BinaryWriterEx.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Utilities\FreeImageAPI.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Utilities\FreeImageAPIC.cs
// The following code is part of FreeImage.NET
// https://freeimagenet.codeplex.com/SourceControl/latest#FreeImage.NET/FreeImage.NET/3.17.0.4/FreeImageWrapper.cs
//
// COVERED CODE IS PROVIDED UNDER THIS LICENSE ON AN "AS IS" BASIS, WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, WARRANTIES
// THAT THE COVERED CODE IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE
// OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE COVERED
// CODE IS WITH YOU. SHOULD ANY COVERED CODE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT
// THE INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY
// SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL
// PART OF THIS LICENSE. NO USE OF ANY COVERED CODE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Utilities\Vector4Converter.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Helper class used by PixelBitmapContent.TryCopyFrom and TryCopyTo to convert between non-PackedValue types and Vector4.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Utilities\LZ4\LZ4Codec.cs
/*
/*
/// <summary>
/// Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.)
/// Increasing memory usage improves compression ratio
/// Reduced memory usage can improve speed, due to cache effect
/// Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache
/// </summary>
/// <summary>
/// Decreasing this value will make the algorithm skip faster data segments considered "incompressible"
/// This may decrease compression ratio dramatically, but will be faster on incompressible data
/// Increasing this value will make the algorithm search more before declaring a segment "incompressible"
/// This could improve compression a bit, but will be slower on incompressible data
/// The default value (6) is recommended
/// </summary>
/// <summary>Buffer length when Buffer.BlockCopy becomes faster than straight loop.
/// Please note that safe implementation REQUIRES it to be greater (not even equal) than 8.</summary>
//private const int HASHHC_MASK = HASHHC_TABLESIZE - 1;
/// <summary>Gets maximum the length of the output.</summary>
/// <param name="inputLength">Length of the input.</param>
/// <returns>Maximum number of bytes needed for compressed buffer.</returns>
// ReSharper restore InconsistentNaming________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Utilities\LZ4\LZ4Codec.Unsafe.cs
/*
/// <summary>Unsafe LZ4 codec.</summary>
/// <summary>Copies block of memory.</summary>
/// <param name="src">The source.</param>
/// <param name="dst">The destination.</param>
/// <param name="len">The length (in bytes).</param>
/* d++; s++; l--; */
/// <summary>Copies block of memory.</summary>
/// <param name="dst">The destination.</param>
/// <param name="len">The length (in bytes).</param>
/// <param name="val">The value.</param>
/// <summary>Encodes the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="output">The output.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="outputLength">Length of the output.</param>
/// <returns>Number of bytes written.</returns>
/// <summary>Encodes the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="output">The output.</param>
/// <param name="outputOffset">The output offset.</param>
/// <param name="outputLength">Length of the output.</param>
/// <returns>Number of bytes written.</returns>
/// <summary>Encodes the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <returns>Compressed buffer.</returns>
/// <summary>Decodes the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="output">The output.</param>
/// <param name="outputLength">Length of the output.</param>
/// <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
/// <returns>Number of bytes written.</returns>
/// <summary>Decodes the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="output">The output.</param>
/// <param name="outputOffset">The output offset.</param>
/// <param name="outputLength">Length of the output.</param>
/// <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
/// <returns>Number of bytes written.</returns>
/// <summary>Decodes the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="outputLength">Length of the output.</param>
/// <returns>Decompressed buffer.</returns>
/// <summary>Encodes the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="output">The output.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="outputLength">Length of the output.</param>
/// <returns>Number of bytes written.</returns>
/// <summary>Encodes the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="output">The output.</param>
/// <param name="outputOffset">The output offset.</param>
/// <param name="outputLength">Length of the output.</param>
/// <returns>Number of bytes written.</returns>
/// <summary>Encodes the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <returns>Compressed buffer.</returns>
/// <summary>Decodes the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="output">The output.</param>
/// <param name="outputLength">Length of the output.</param>
/// <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
/// <returns>Number of bytes written.</returns>
/// <summary>Decode64s the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="output">The output.</param>
/// <param name="outputOffset">The output offset.</param>
/// <param name="outputLength">Length of the output.</param>
/// <param name="knownOutputLength">Set it to <c>true</c> if output length is known.</param>
/// <returns>Number of bytes written.</returns>
/// <summary>Decode64s the specified input.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="outputLength">Length of the output.</param>
/// <returns>Decompressed buffer.</returns>
// ReSharper disable InconsistentNaming
// ReSharper restore InconsistentNaming
/// <summary>Encodes the specified input using HC codec.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="output">The output.</param>
/// <param name="outputOffset">The output offset.</param>
/// <param name="outputLength">Length of the output.</param>
/// <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
/// <summary>Encodes the specified input using HC codec.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
/// <summary>Encodes the specified input using HC codec.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <param name="output">The output.</param>
/// <param name="outputOffset">The output offset.</param>
/// <param name="outputLength">Length of the output.</param>
/// <returns>Number of bytes written. NOTE: when output buffer is too small it returns negative value.</returns>
/// <summary>Encodes the specified input using HC codec.</summary>
/// <param name="input">The input.</param>
/// <param name="inputOffset">The input offset.</param>
/// <param name="inputLength">Length of the input.</param>
/// <returns>Buffer with compressed data (NOTE: it can be bigger than input).</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Utilities\LZ4\LZ4Codec.Unsafe32.Dirty.cs
/*
//www.opensource.org/licenses/bsd-license.php)
//fastcompression.blogspot.com/p/lz4.html
//code.google.com/p/lz4/
/*
// ReSharper disable InconsistentNaming
// ReSharper disable TooWideLocalVariableScope
// ReSharper disable JoinDeclarationAndInitializer
// r93
// Init
// First Byte
// Main Loop
// Find a match
// Catch up
// Encode Literal length
// Check output limit
// Copy Literals
// Encode Offset
// Start Counting
// MinMatch already verified
// Encode MatchLength
// Check output limit
// Test end of chunk
// Fill table
// Test next position
// Prepare next loop
// Encode Last Literals
// End
// r93
// Init
// First Byte
// Main Loop
// Find a match
// Catch up
// Encode Literal length
// Check output limit
// Copy Literals
// Encode Offset
// Start Counting
// MinMatch verified
// Encode MatchLength
// Check output limit
// Test end of chunk
// Fill table
// Test next position
// Prepare next loop
// Encode Last Literals
// End
// r93
// Main Loop
// get runlength
/* do nothing */
// copy literals
// Error : not enough place for another match (min 4) + 5 literals
// EOF
// get offset
// Error : offset outside destination buffer
// get matchlength
// copy repeated sequence
// Error : last 5 bytes must be literals
// correction
// end of decoding
// write overflow error detected
// r93
// Special case
// A correctly formed null-compressed LZ4 must have at least one byte (token=0)
// Main Loop
// get runlength
// copy literals
// Error : writes beyond output buffer
// Error : LZ4 format requires to consume all input at this stage (no match within the last 11 bytes, and at least 8 remaining input bytes for another match+literals)
// Necessarily EOF, due to parsing restrictions
// get offset
// Error : offset outside of destination buffer
// get matchlength
// Error : a minimum input bytes must remain for LASTLITERALS + token
// copy repeated sequence
// Error : last 5 bytes must be literals
// correction
// end of decoding
// write overflow error detected
// ReSharper restore JoinDeclarationAndInitializer
// ReSharper restore TooWideLocalVariableScope
// ReSharper restore InconsistentNaming________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Utilities\LZ4\LZ4Codec.Unsafe32HC.Dirty.cs
/*
//www.opensource.org/licenses/bsd-license.php)
//fastcompression.blogspot.com/p/lz4.html
//code.google.com/p/lz4/
/*
// ReSharper disable InconsistentNaming
// Update chains up to ip (excluded)
// HC4 match finder
// Detect repetitive sequences of length <= 4
// potential repetition
// confirmed
// Complete table
// Pre-Load
// Head of chain
// First Match
// Encode Literal length
// Check output limit
// Copy Literals
// Encode Offset
// Encode MatchLength
// Check output limit
// Prepare next loop
// Main Loop
// saved, in case we would skip too much
// No better match
// empirical
// Here, start0==ip
// First Match too small : removed
// Currently we have :
// ml2 > ml1, and
// ip1+3 <= ip2 (usually < ip1+ml1)
// Now, we have start2 = ip+new_ml, with new_ml=min(ml, OPTIMAL_ML=18)
// No better match : 2 sequences to encode
// ip & ref are known; Now for ml
// Now, encode 2 sequences
// Not enough space for match 2 : remove it
// can write Seq1 immediately ==> Seq2 is removed, so Seq3 becomes Seq1
// OK, now we have 3 ascending matches; let's write at least the first one
// ip & ref are known; Now for ml
// Encode Last Literals
// Check output limit
// End
// ReSharper restore InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Utilities\LZ4\LZ4Codec.Unsafe64.Dirty.cs
/*
//www.opensource.org/licenses/bsd-license.php)
//fastcompression.blogspot.com/p/lz4.html
//code.google.com/p/lz4/
/*
// ReSharper disable InconsistentNaming
// ReSharper disable TooWideLocalVariableScope
// ReSharper disable JoinDeclarationAndInitializer
// r93
// Init
// First Byte
// Main Loop
// Find a match
// Catch up
// Encode Literal length
// Check output limit
// Copy Literals
// Encode Offset
// Start Counting
// MinMatch already verified
// Encode MatchLength
// Check output limit
// Test end of chunk
// Fill table
// Test next position
// Prepare next loop
// Encode Last Literals
// End
// r93
// Init
// First Byte
// Main Loop
// Find a match
// Catch up
// Encode Literal length
// Check output limit
// Copy Literals
// Encode Offset
// Start Counting
// MinMatch verified
// Encode MatchLength
// Check output limit
// Test end of chunk
// Fill table
// Test next position
// Prepare next loop
// Encode Last Literals
// End
// r93
// Main Loop
// get runlength
/* do nothing */
// copy literals
// Error : not enough place for another match (min 4) + 5 literals
// EOF
// get offset
// Error : offset outside destination buffer
// get matchlength
// copy repeated sequence
// Error : last 5 bytes must be literals
// correction
// end of decoding
// write overflow error detected
// r93
// Special case
// A correctly formed null-compressed LZ4 must have at least one byte (token=0)
// Main Loop
// get runlength
// copy literals
// Error : writes beyond output buffer
// Error : LZ4 format requires to consume all input at this stage (no match within the last 11 bytes, and at least 8 remaining input bytes for another match+literals)
// Necessarily EOF, due to parsing restrictions
// get offset
// Error : offset outside of destination buffer
// get matchlength
// Error : a minimum input bytes must remain for LASTLITERALS + token
// copy repeated sequence
// Error : last 5 bytes must be literals
// correction
// end of decoding
// write overflow error detected
// ReSharper restore JoinDeclarationAndInitializer
// ReSharper restore TooWideLocalVariableScope
// ReSharper restore InconsistentNaming________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\MonoGame.Framework.Content.Pipeline\Utilities\LZ4\LZ4Codec.Unsafe64HC.Dirty.cs
/*
//www.opensource.org/licenses/bsd-license.php)
//fastcompression.blogspot.com/p/lz4.html
//code.google.com/p/lz4/
/*
// ReSharper disable InconsistentNaming
// Update chains up to ip (excluded)
// HC4 match finder
// Detect repetitive sequences of length <= 4
// potential repetition
// confirmed
// Complete table
// Pre-Load
// Head of chain
// First Match
// Encode Literal length
// Check output limit
// Copy Literals
// Encode Offset
// Encode MatchLength
// Check output limit
// Prepare next loop
// Main Loop
// saved, in case we would skip too much
// No better match
// Here, start0==ip
// First Match too small : removed
// Currently we have :
// ml2 > ml1, and
// ip1+3 <= ip2 (usually < ip1+ml1)
// Now, we have start2 = ip+new_ml, with new_ml=min(ml, OPTIMAL_ML=18)
// No better match : 2 sequences to encode
// ip & ref are known; Now for ml
// Now, encode 2 sequences
// Not enough space for match 2 : remove it
// can write Seq1 immediately ==> Seq2 is removed, so Seq3 becomes Seq1
// OK, now we have 3 ascending matches; let's write at least the first one
// ip & ref are known; Now for ml
// Encode Last Literals
// Check output limit
// End
// ReSharper restore InconsistentNaming
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.Android.CSharp\Activity1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.Android.CSharp\Game1.cs
// TODO: Add your initialization logic here
// TODO: use this.Content to load your game content here
// TODO: Add your update logic here
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.Android.CSharp\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.Android.CSharp\Resources\Resource.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// aapt resource value: 0x7f040000
// aapt resource value: 0x7f040001
// aapt resource value: 0x7f040002
// aapt resource value: 0x7f040003
// aapt resource value: 0x7f040004
// aapt resource value: 0x7f040005
// aapt resource value: 0x7f040006
// aapt resource value: 0x7f040007
// aapt resource value: 0x7f040008
// aapt resource value: 0x7f040009
// aapt resource value: 0x7f04000a
// aapt resource value: 0x7f04000b
// aapt resource value: 0x7f04000c
// aapt resource value: 0x7f04000d
// aapt resource value: 0x7f04000e
// aapt resource value: 0x7f04000f
// aapt resource value: 0x7f050000
// aapt resource value: 0x7f010052
// aapt resource value: 0x7f010053
// aapt resource value: 0x7f01004c
// aapt resource value: 0x7f010051
// aapt resource value: 0x7f01004e
// aapt resource value: 0x7f01004d
// aapt resource value: 0x7f010048
// aapt resource value: 0x7f010047
// aapt resource value: 0x7f010049
// aapt resource value: 0x7f01004f
// aapt resource value: 0x7f010050
// aapt resource value: 0x7f01006d
// aapt resource value: 0x7f010069
// aapt resource value: 0x7f0100c4
// aapt resource value: 0x7f010054
// aapt resource value: 0x7f010055
// aapt resource value: 0x7f010058
// aapt resource value: 0x7f010057
// aapt resource value: 0x7f01005a
// aapt resource value: 0x7f01005c
// aapt resource value: 0x7f01005b
// aapt resource value: 0x7f010060
// aapt resource value: 0x7f01005d
// aapt resource value: 0x7f010062
// aapt resource value: 0x7f01005e
// aapt resource value: 0x7f01005f
// aapt resource value: 0x7f010059
// aapt resource value: 0x7f010056
// aapt resource value: 0x7f010061
// aapt resource value: 0x7f01004a
// aapt resource value: 0x7f01004b
// aapt resource value: 0x7f0100c6
// aapt resource value: 0x7f0100c5
// aapt resource value: 0x7f010075
// aapt resource value: 0x7f01009a
// aapt resource value: 0x7f01009b
// aapt resource value: 0x7f010099
// aapt resource value: 0x7f01009c
// aapt resource value: 0x7f0100b2
// aapt resource value: 0x7f0100b3
// aapt resource value: 0x7f0100c1
// aapt resource value: 0x7f0100ba
// aapt resource value: 0x7f0100bb
// aapt resource value: 0x7f0100a1
// aapt resource value: 0x7f01003b
// aapt resource value: 0x7f01003a
// aapt resource value: 0x7f010039
// aapt resource value: 0x7f010038
// aapt resource value: 0x7f010037
// aapt resource value: 0x7f010015
// aapt resource value: 0x7f010017
// aapt resource value: 0x7f010016
// aapt resource value: 0x7f0100fd
// aapt resource value: 0x7f0100fe
// aapt resource value: 0x7f0100bc
// aapt resource value: 0x7f010128
// aapt resource value: 0x7f010105
// aapt resource value: 0x7f010131
// aapt resource value: 0x7f010104
// aapt resource value: 0x7f010106
// aapt resource value: 0x7f010126
// aapt resource value: 0x7f010072
// aapt resource value: 0x7f010120
// aapt resource value: 0x7f010121
// aapt resource value: 0x7f01006f
// aapt resource value: 0x7f01009f
// aapt resource value: 0x7f0100a0
// aapt resource value: 0x7f01009e
// aapt resource value: 0x7f01006e
// aapt resource value: 0x7f0100f2
// aapt resource value: 0x7f01002a
// aapt resource value: 0x7f0100a2
// aapt resource value: 0x7f0100a3
// aapt resource value: 0x7f0100b4
// aapt resource value: 0x7f0100b5
// aapt resource value: 0x7f0100a4
// aapt resource value: 0x7f0100a5
// aapt resource value: 0x7f0100d5
// aapt resource value: 0x7f010027
// aapt resource value: 0x7f0100f4
// aapt resource value: 0x7f0100f3
// aapt resource value: 0x7f010113
// aapt resource value: 0x7f01010d
// aapt resource value: 0x7f0100b6
// aapt resource value: 0x7f010091
// aapt resource value: 0x7f010098
// aapt resource value: 0x7f010095
// aapt resource value: 0x7f010093
// aapt resource value: 0x7f010094
// aapt resource value: 0x7f010092
// aapt resource value: 0x7f0100b1
// aapt resource value: 0x7f01008f
// aapt resource value: 0x7f010090
// aapt resource value: 0x7f010096
// aapt resource value: 0x7f0100da
// aapt resource value: 0x7f0100c7
// aapt resource value: 0x7f010020
// aapt resource value: 0x7f010024
// aapt resource value: 0x7f010021
// aapt resource value: 0x7f010022
// aapt resource value: 0x7f01001f
// aapt resource value: 0x7f010023
// aapt resource value: 0x7f01010e
// aapt resource value: 0x7f010097
// aapt resource value: 0x7f010147
// aapt resource value: 0x7f010148
// aapt resource value: 0x7f01014a
// aapt resource value: 0x7f010149
// aapt resource value: 0x7f010018
// aapt resource value: 0x7f0100d4
// aapt resource value: 0x7f010067
// aapt resource value: 0x7f010066
// aapt resource value: 0x7f01000e
// aapt resource value: 0x7f010014
// aapt resource value: 0x7f010074
// aapt resource value: 0x7f0100c0
// aapt resource value: 0x7f010073
// aapt resource value: 0x7f0100b8
// aapt resource value: 0x7f010009
// aapt resource value: 0x7f010086
// aapt resource value: 0x7f01006a
// aapt resource value: 0x7f01007b
// aapt resource value: 0x7f01007a
// aapt resource value: 0x7f0100a6
// aapt resource value: 0x7f010025
// aapt resource value: 0x7f010145
// aapt resource value: 0x7f010146
// aapt resource value: 0x7f010029
// aapt resource value: 0x7f0100ff
// aapt resource value: 0x7f010114
// aapt resource value: 0x7f010107
// aapt resource value: 0x7f01010b
// aapt resource value: 0x7f01010a
// aapt resource value: 0x7f010108
// aapt resource value: 0x7f010109
// aapt resource value: 0x7f01010c
// aapt resource value: 0x7f010124
// aapt resource value: 0x7f010004
// aapt resource value: 0x7f010007
// aapt resource value: 0x7f010008
// aapt resource value: 0x7f010005
// aapt resource value: 0x7f010006
// aapt resource value: 0x7f010158
// aapt resource value: 0x7f01003c
// aapt resource value: 0x7f010151
// aapt resource value: 0x7f010154
// aapt resource value: 0x7f010155
// aapt resource value: 0x7f010156
// aapt resource value: 0x7f010152
// aapt resource value: 0x7f010153
// aapt resource value: 0x7f010157
// aapt resource value: 0x7f010159
// aapt resource value: 0x7f010129
// aapt resource value: 0x7f0100b9
// aapt resource value: 0x7f0100d6
// aapt resource value: 0x7f01012f
// aapt resource value: 0x7f01000a
// aapt resource value: 0x7f01001e
// aapt resource value: 0x7f01014b
// aapt resource value: 0x7f010144
// aapt resource value: 0x7f010143
// aapt resource value: 0x7f01006c
// aapt resource value: 0x7f010019
// aapt resource value: 0x7f010012
// aapt resource value: 0x7f0100c9
// aapt resource value: 0x7f0100ca
// aapt resource value: 0x7f0100d2
// aapt resource value: 0x7f01007c
// aapt resource value: 0x7f01001b
// aapt resource value: 0x7f010028
// aapt resource value: 0x7f010130
// aapt resource value: 0x7f01000b
// aapt resource value: 0x7f01012d
// aapt resource value: 0x7f01012b
// aapt resource value: 0x7f01001d
// aapt resource value: 0x7f01012e
// aapt resource value: 0x7f01012c
// aapt resource value: 0x7f010118
// aapt resource value: 0x7f0100d1
// aapt resource value: 0x7f010000
// aapt resource value: 0x7f01011b
// aapt resource value: 0x7f01011d
// aapt resource value: 0x7f01011a
// aapt resource value: 0x7f010116
// aapt resource value: 0x7f010117
// aapt resource value: 0x7f01011f
// aapt resource value: 0x7f01011e
// aapt resource value: 0x7f01011c
// aapt resource value: 0x7f010102
// aapt resource value: 0x7f010103
// aapt resource value: 0x7f01008e
// aapt resource value: 0x7f010068
// aapt resource value: 0x7f01002e
// aapt resource value: 0x7f01002b
// aapt resource value: 0x7f0100ae
// aapt resource value: 0x7f010087
// aapt resource value: 0x7f010081
// aapt resource value: 0x7f010083
// aapt resource value: 0x7f010082
// aapt resource value: 0x7f010084
// aapt resource value: 0x7f010085
// aapt resource value: 0x7f010013
// aapt resource value: 0x7f0100f7
// aapt resource value: 0x7f010132
// aapt resource value: 0x7f0100f1
// aapt resource value: 0x7f0100be
// aapt resource value: 0x7f01012a
// aapt resource value: 0x7f01002c
// aapt resource value: 0x7f0100f6
// aapt resource value: 0x7f0100f5
// aapt resource value: 0x7f01000d
// aapt resource value: 0x7f0100c2
// aapt resource value: 0x7f0100cd
// aapt resource value: 0x7f0100cf
// aapt resource value: 0x7f0100fb
// aapt resource value: 0x7f0100fa
// aapt resource value: 0x7f0100d0
// aapt resource value: 0x7f01008b
// aapt resource value: 0x7f01008d
// aapt resource value: 0x7f01008c
// aapt resource value: 0x7f01014e
// aapt resource value: 0x7f01014d
// aapt resource value: 0x7f01014c
// aapt resource value: 0x7f01014f
// aapt resource value: 0x7f010150
// aapt resource value: 0x7f010078
// aapt resource value: 0x7f010026
// aapt resource value: 0x7f010079
// aapt resource value: 0x7f0100cb
// aapt resource value: 0x7f010125
// aapt resource value: 0x7f01001c
// aapt resource value: 0x7f01001a
// aapt resource value: 0x7f0100dc
// aapt resource value: 0x7f0100d3
// aapt resource value: 0x7f0100a7
// aapt resource value: 0x7f0100a8
// aapt resource value: 0x7f0100a9
// aapt resource value: 0x7f0100aa
// aapt resource value: 0x7f010002
// aapt resource value: 0x7f010123
// aapt resource value: 0x7f010112
// aapt resource value: 0x7f010111
// aapt resource value: 0x7f0100d8
// aapt resource value: 0x7f0100d7
// aapt resource value: 0x7f010080
// aapt resource value: 0x7f0100ab
// aapt resource value: 0x7f010070
// aapt resource value: 0x7f010071
// aapt resource value: 0x7f0100c3
// aapt resource value: 0x7f0100bf
// aapt resource value: 0x7f0100e8
// aapt resource value: 0x7f01002f
// aapt resource value: 0x7f01002d
// aapt resource value: 0x7f010001
// aapt resource value: 0x7f0100b7
// aapt resource value: 0x7f01006b
// aapt resource value: 0x7f0100ac
// aapt resource value: 0x7f0100e7
// aapt resource value: 0x7f010030
// aapt resource value: 0x7f010003
// aapt resource value: 0x7f0100ce
// aapt resource value: 0x7f010100
// aapt resource value: 0x7f010101
// aapt resource value: 0x7f010119
// aapt resource value: 0x7f01010f
// aapt resource value: 0x7f0100cc
// aapt resource value: 0x7f0100dd
// aapt resource value: 0x7f01000f
// aapt resource value: 0x7f0100ea
// aapt resource value: 0x7f0100f9
// aapt resource value: 0x7f010011
// aapt resource value: 0x7f0100db
// aapt resource value: 0x7f0100e5
// aapt resource value: 0x7f0100e6
// aapt resource value: 0x7f0100ad
// aapt resource value: 0x7f0100e4
// aapt resource value: 0x7f010136
// aapt resource value: 0x7f010135
// aapt resource value: 0x7f010138
// aapt resource value: 0x7f010133
// aapt resource value: 0x7f010134
// aapt resource value: 0x7f01013a
// aapt resource value: 0x7f010139
// aapt resource value: 0x7f010137
// aapt resource value: 0x7f010142
// aapt resource value: 0x7f010141
// aapt resource value: 0x7f010140
// aapt resource value: 0x7f01013e
// aapt resource value: 0x7f01013f
// aapt resource value: 0x7f01013d
// aapt resource value: 0x7f01013b
// aapt resource value: 0x7f01013c
// aapt resource value: 0x7f010036
// aapt resource value: 0x7f010063
// aapt resource value: 0x7f010088
// aapt resource value: 0x7f010089
// aapt resource value: 0x7f01008a
// aapt resource value: 0x7f010065
// aapt resource value: 0x7f01007e
// aapt resource value: 0x7f01007d
// aapt resource value: 0x7f010064
// aapt resource value: 0x7f01009d
// aapt resource value: 0x7f010122
// aapt resource value: 0x7f01007f
// aapt resource value: 0x7f0100fc
// aapt resource value: 0x7f0100bd
// aapt resource value: 0x7f0100e3
// aapt resource value: 0x7f0100de
// aapt resource value: 0x7f0100df
// aapt resource value: 0x7f010033
// aapt resource value: 0x7f010034
// aapt resource value: 0x7f010035
// aapt resource value: 0x7f010031
// aapt resource value: 0x7f010032
// aapt resource value: 0x7f01000c
// aapt resource value: 0x7f010115
// aapt resource value: 0x7f0100eb
// aapt resource value: 0x7f0100ef
// aapt resource value: 0x7f0100ed
// aapt resource value: 0x7f0100ec
// aapt resource value: 0x7f0100ee
// aapt resource value: 0x7f0100f0
// aapt resource value: 0x7f0100e9
// aapt resource value: 0x7f0100f8
// aapt resource value: 0x7f010010
// aapt resource value: 0x7f010110
// aapt resource value: 0x7f010077
// aapt resource value: 0x7f010076
// aapt resource value: 0x7f0100b0
// aapt resource value: 0x7f0100af
// aapt resource value: 0x7f0100c8
// aapt resource value: 0x7f0100e0
// aapt resource value: 0x7f0100e1
// aapt resource value: 0x7f0100e2
// aapt resource value: 0x7f010127
// aapt resource value: 0x7f0100d9
// aapt resource value: 0x7f01003d
// aapt resource value: 0x7f01003f
// aapt resource value: 0x7f010040
// aapt resource value: 0x7f010044
// aapt resource value: 0x7f010042
// aapt resource value: 0x7f010041
// aapt resource value: 0x7f010043
// aapt resource value: 0x7f010045
// aapt resource value: 0x7f010046
// aapt resource value: 0x7f01003e
// aapt resource value: 0x7f0a0000
// aapt resource value: 0x7f0a0001
// aapt resource value: 0x7f0a0002
// aapt resource value: 0x7f0a0003
// aapt resource value: 0x7f0a0004
// aapt resource value: 0x7f0b0047
// aapt resource value: 0x7f0b0048
// aapt resource value: 0x7f0b0049
// aapt resource value: 0x7f0b004a
// aapt resource value: 0x7f0b004b
// aapt resource value: 0x7f0b004c
// aapt resource value: 0x7f0b004d
// aapt resource value: 0x7f0b0000
// aapt resource value: 0x7f0b004e
// aapt resource value: 0x7f0b004f
// aapt resource value: 0x7f0b0050
// aapt resource value: 0x7f0b0051
// aapt resource value: 0x7f0b0052
// aapt resource value: 0x7f0b0001
// aapt resource value: 0x7f0b0002
// aapt resource value: 0x7f0b0003
// aapt resource value: 0x7f0b0053
// aapt resource value: 0x7f0b0054
// aapt resource value: 0x7f0b0055
// aapt resource value: 0x7f0b0056
// aapt resource value: 0x7f0b0057
// aapt resource value: 0x7f0b0058
// aapt resource value: 0x7f0b0059
// aapt resource value: 0x7f0b005a
// aapt resource value: 0x7f0b0004
// aapt resource value: 0x7f0b0005
// aapt resource value: 0x7f0b0006
// aapt resource value: 0x7f0b0007
// aapt resource value: 0x7f0b0008
// aapt resource value: 0x7f0b0009
// aapt resource value: 0x7f0b000a
// aapt resource value: 0x7f0b000b
// aapt resource value: 0x7f0b000c
// aapt resource value: 0x7f0b000d
// aapt resource value: 0x7f0b000e
// aapt resource value: 0x7f0b000f
// aapt resource value: 0x7f0b0010
// aapt resource value: 0x7f0b0011
// aapt resource value: 0x7f0b003c
// aapt resource value: 0x7f0b005b
// aapt resource value: 0x7f0b003d
// aapt resource value: 0x7f0b003e
// aapt resource value: 0x7f0b003f
// aapt resource value: 0x7f0b0040
// aapt resource value: 0x7f0b0041
// aapt resource value: 0x7f0b0042
// aapt resource value: 0x7f0b0043
// aapt resource value: 0x7f0b0044
// aapt resource value: 0x7f0b005c
// aapt resource value: 0x7f0b0012
// aapt resource value: 0x7f0b0013
// aapt resource value: 0x7f0b0014
// aapt resource value: 0x7f0b0015
// aapt resource value: 0x7f0b0016
// aapt resource value: 0x7f0b0017
// aapt resource value: 0x7f0b0018
// aapt resource value: 0x7f0b0019
// aapt resource value: 0x7f0b001a
// aapt resource value: 0x7f0b001b
// aapt resource value: 0x7f0b001c
// aapt resource value: 0x7f0b001d
// aapt resource value: 0x7f0b001e
// aapt resource value: 0x7f0b001f
// aapt resource value: 0x7f0b0020
// aapt resource value: 0x7f0b0021
// aapt resource value: 0x7f0b0022
// aapt resource value: 0x7f0b0023
// aapt resource value: 0x7f0b0024
// aapt resource value: 0x7f0b0025
// aapt resource value: 0x7f0b0026
// aapt resource value: 0x7f0b0045
// aapt resource value: 0x7f0b0046
// aapt resource value: 0x7f0b003b
// aapt resource value: 0x7f0b0027
// aapt resource value: 0x7f0b0028
// aapt resource value: 0x7f0b0029
// aapt resource value: 0x7f0b002a
// aapt resource value: 0x7f0b002b
// aapt resource value: 0x7f0b002c
// aapt resource value: 0x7f0b002d
// aapt resource value: 0x7f0b002e
// aapt resource value: 0x7f0b002f
// aapt resource value: 0x7f0b0030
// aapt resource value: 0x7f0b0031
// aapt resource value: 0x7f0b0032
// aapt resource value: 0x7f0b0033
// aapt resource value: 0x7f0b0034
// aapt resource value: 0x7f0b0035
// aapt resource value: 0x7f0b0036
// aapt resource value: 0x7f0b005d
// aapt resource value: 0x7f0b005e
// aapt resource value: 0x7f0b0037
// aapt resource value: 0x7f0b0038
// aapt resource value: 0x7f0b0039
// aapt resource value: 0x7f0b003a
// aapt resource value: 0x7f060012
// aapt resource value: 0x7f060013
// aapt resource value: 0x7f060007
// aapt resource value: 0x7f060014
// aapt resource value: 0x7f060015
// aapt resource value: 0x7f060017
// aapt resource value: 0x7f060018
// aapt resource value: 0x7f060019
// aapt resource value: 0x7f06001a
// aapt resource value: 0x7f060008
// aapt resource value: 0x7f06001b
// aapt resource value: 0x7f06001c
// aapt resource value: 0x7f06001d
// aapt resource value: 0x7f06001e
// aapt resource value: 0x7f06001f
// aapt resource value: 0x7f060020
// aapt resource value: 0x7f060021
// aapt resource value: 0x7f060006
// aapt resource value: 0x7f060022
// aapt resource value: 0x7f060023
// aapt resource value: 0x7f060024
// aapt resource value: 0x7f060025
// aapt resource value: 0x7f060026
// aapt resource value: 0x7f06000b
// aapt resource value: 0x7f060027
// aapt resource value: 0x7f060028
// aapt resource value: 0x7f060029
// aapt resource value: 0x7f06000c
// aapt resource value: 0x7f06000d
// aapt resource value: 0x7f06000e
// aapt resource value: 0x7f06000f
// aapt resource value: 0x7f06002a
// aapt resource value: 0x7f06002b
// aapt resource value: 0x7f060010
// aapt resource value: 0x7f060011
// aapt resource value: 0x7f06002c
// aapt resource value: 0x7f06002d
// aapt resource value: 0x7f06002e
// aapt resource value: 0x7f06002f
// aapt resource value: 0x7f060030
// aapt resource value: 0x7f060031
// aapt resource value: 0x7f060032
// aapt resource value: 0x7f060033
// aapt resource value: 0x7f060034
// aapt resource value: 0x7f060035
// aapt resource value: 0x7f060036
// aapt resource value: 0x7f060037
// aapt resource value: 0x7f060038
// aapt resource value: 0x7f060039
// aapt resource value: 0x7f06003a
// aapt resource value: 0x7f06003b
// aapt resource value: 0x7f06003c
// aapt resource value: 0x7f06003d
// aapt resource value: 0x7f06003e
// aapt resource value: 0x7f06003f
// aapt resource value: 0x7f060016
// aapt resource value: 0x7f060040
// aapt resource value: 0x7f060041
// aapt resource value: 0x7f060042
// aapt resource value: 0x7f060043
// aapt resource value: 0x7f060044
// aapt resource value: 0x7f060045
// aapt resource value: 0x7f060046
// aapt resource value: 0x7f060047
// aapt resource value: 0x7f060048
// aapt resource value: 0x7f060049
// aapt resource value: 0x7f06004a
// aapt resource value: 0x7f06004b
// aapt resource value: 0x7f06004c
// aapt resource value: 0x7f06004d
// aapt resource value: 0x7f06004e
// aapt resource value: 0x7f060009
// aapt resource value: 0x7f06004f
// aapt resource value: 0x7f06000a
// aapt resource value: 0x7f06008b
// aapt resource value: 0x7f06008c
// aapt resource value: 0x7f06008d
// aapt resource value: 0x7f06008e
// aapt resource value: 0x7f06008f
// aapt resource value: 0x7f060069
// aapt resource value: 0x7f06006a
// aapt resource value: 0x7f06006b
// aapt resource value: 0x7f06006c
// aapt resource value: 0x7f06006d
// aapt resource value: 0x7f06006e
// aapt resource value: 0x7f06006f
// aapt resource value: 0x7f060070
// aapt resource value: 0x7f060071
// aapt resource value: 0x7f060072
// aapt resource value: 0x7f060073
// aapt resource value: 0x7f060074
// aapt resource value: 0x7f060075
// aapt resource value: 0x7f060076
// aapt resource value: 0x7f060077
// aapt resource value: 0x7f060078
// aapt resource value: 0x7f060079
// aapt resource value: 0x7f06007a
// aapt resource value: 0x7f06007b
// aapt resource value: 0x7f06007c
// aapt resource value: 0x7f06007d
// aapt resource value: 0x7f060061
// aapt resource value: 0x7f06007e
// aapt resource value: 0x7f06007f
// aapt resource value: 0x7f060062
// aapt resource value: 0x7f060063
// aapt resource value: 0x7f060080
// aapt resource value: 0x7f060064
// aapt resource value: 0x7f060065
// aapt resource value: 0x7f060066
// aapt resource value: 0x7f060081
// aapt resource value: 0x7f060082
// aapt resource value: 0x7f060067
// aapt resource value: 0x7f060083
// aapt resource value: 0x7f060084
// aapt resource value: 0x7f060068
// aapt resource value: 0x7f060085
// aapt resource value: 0x7f060086
// aapt resource value: 0x7f060050
// aapt resource value: 0x7f060051
// aapt resource value: 0x7f060000
// aapt resource value: 0x7f060001
// aapt resource value: 0x7f060002
// aapt resource value: 0x7f060052
// aapt resource value: 0x7f060053
// aapt resource value: 0x7f060054
// aapt resource value: 0x7f060055
// aapt resource value: 0x7f060056
// aapt resource value: 0x7f060057
// aapt resource value: 0x7f060058
// aapt resource value: 0x7f060003
// aapt resource value: 0x7f060004
// aapt resource value: 0x7f060005
// aapt resource value: 0x7f060090
// aapt resource value: 0x7f060091
// aapt resource value: 0x7f060092
// aapt resource value: 0x7f060088
// aapt resource value: 0x7f060093
// aapt resource value: 0x7f060094
// aapt resource value: 0x7f060089
// aapt resource value: 0x7f06008a
// aapt resource value: 0x7f060095
// aapt resource value: 0x7f060087
// aapt resource value: 0x7f060096
// aapt resource value: 0x7f060097
// aapt resource value: 0x7f060098
// aapt resource value: 0x7f060099
// aapt resource value: 0x7f06009a
// aapt resource value: 0x7f060059
// aapt resource value: 0x7f06005a
// aapt resource value: 0x7f06005b
// aapt resource value: 0x7f06005c
// aapt resource value: 0x7f06005d
// aapt resource value: 0x7f06005e
// aapt resource value: 0x7f06005f
// aapt resource value: 0x7f060060
// aapt resource value: 0x7f020000
// aapt resource value: 0x7f020001
// aapt resource value: 0x7f020002
// aapt resource value: 0x7f020003
// aapt resource value: 0x7f020004
// aapt resource value: 0x7f020005
// aapt resource value: 0x7f020006
// aapt resource value: 0x7f020007
// aapt resource value: 0x7f020008
// aapt resource value: 0x7f020009
// aapt resource value: 0x7f02000a
// aapt resource value: 0x7f02000b
// aapt resource value: 0x7f02000c
// aapt resource value: 0x7f02000d
// aapt resource value: 0x7f02000e
// aapt resource value: 0x7f02000f
// aapt resource value: 0x7f020010
// aapt resource value: 0x7f020011
// aapt resource value: 0x7f020012
// aapt resource value: 0x7f020013
// aapt resource value: 0x7f020014
// aapt resource value: 0x7f020015
// aapt resource value: 0x7f020016
// aapt resource value: 0x7f020017
// aapt resource value: 0x7f020018
// aapt resource value: 0x7f020019
// aapt resource value: 0x7f02001a
// aapt resource value: 0x7f02001b
// aapt resource value: 0x7f02001c
// aapt resource value: 0x7f02001d
// aapt resource value: 0x7f02001e
// aapt resource value: 0x7f02001f
// aapt resource value: 0x7f020020
// aapt resource value: 0x7f020021
// aapt resource value: 0x7f020022
// aapt resource value: 0x7f020023
// aapt resource value: 0x7f020024
// aapt resource value: 0x7f020025
// aapt resource value: 0x7f020026
// aapt resource value: 0x7f020027
// aapt resource value: 0x7f020028
// aapt resource value: 0x7f020029
// aapt resource value: 0x7f02002a
// aapt resource value: 0x7f02002b
// aapt resource value: 0x7f02002c
// aapt resource value: 0x7f02002d
// aapt resource value: 0x7f02002e
// aapt resource value: 0x7f02002f
// aapt resource value: 0x7f020030
// aapt resource value: 0x7f020031
// aapt resource value: 0x7f020032
// aapt resource value: 0x7f020033
// aapt resource value: 0x7f020034
// aapt resource value: 0x7f020035
// aapt resource value: 0x7f020036
// aapt resource value: 0x7f020037
// aapt resource value: 0x7f020038
// aapt resource value: 0x7f020039
// aapt resource value: 0x7f02003a
// aapt resource value: 0x7f02003b
// aapt resource value: 0x7f02003c
// aapt resource value: 0x7f02003d
// aapt resource value: 0x7f02003e
// aapt resource value: 0x7f02003f
// aapt resource value: 0x7f020040
// aapt resource value: 0x7f020041
// aapt resource value: 0x7f020042
// aapt resource value: 0x7f020043
// aapt resource value: 0x7f020044
// aapt resource value: 0x7f020045
// aapt resource value: 0x7f020046
// aapt resource value: 0x7f020047
// aapt resource value: 0x7f020048
// aapt resource value: 0x7f020049
// aapt resource value: 0x7f02004a
// aapt resource value: 0x7f02004b
// aapt resource value: 0x7f02004c
// aapt resource value: 0x7f02004d
// aapt resource value: 0x7f02004e
// aapt resource value: 0x7f02004f
// aapt resource value: 0x7f020050
// aapt resource value: 0x7f020051
// aapt resource value: 0x7f020052
// aapt resource value: 0x7f020053
// aapt resource value: 0x7f02006b
// aapt resource value: 0x7f02006c
// aapt resource value: 0x7f02006d
// aapt resource value: 0x7f020054
// aapt resource value: 0x7f02006e
// aapt resource value: 0x7f02006f
// aapt resource value: 0x7f020070
// aapt resource value: 0x7f020055
// aapt resource value: 0x7f020056
// aapt resource value: 0x7f020057
// aapt resource value: 0x7f020058
// aapt resource value: 0x7f020059
// aapt resource value: 0x7f02005a
// aapt resource value: 0x7f02005b
// aapt resource value: 0x7f02005c
// aapt resource value: 0x7f02005d
// aapt resource value: 0x7f02005e
// aapt resource value: 0x7f02005f
// aapt resource value: 0x7f020060
// aapt resource value: 0x7f020061
// aapt resource value: 0x7f020062
// aapt resource value: 0x7f020063
// aapt resource value: 0x7f020064
// aapt resource value: 0x7f020069
// aapt resource value: 0x7f02006a
// aapt resource value: 0x7f020065
// aapt resource value: 0x7f020066
// aapt resource value: 0x7f020067
// aapt resource value: 0x7f020068
// aapt resource value: 0x7f070032
// aapt resource value: 0x7f070033
// aapt resource value: 0x7f070034
// aapt resource value: 0x7f070035
// aapt resource value: 0x7f070036
// aapt resource value: 0x7f070037
// aapt resource value: 0x7f07009c
// aapt resource value: 0x7f07007c
// aapt resource value: 0x7f070001
// aapt resource value: 0x7f07007b
// aapt resource value: 0x7f070077
// aapt resource value: 0x7f070002
// aapt resource value: 0x7f07005b
// aapt resource value: 0x7f07005a
// aapt resource value: 0x7f070099
// aapt resource value: 0x7f07007d
// aapt resource value: 0x7f0700a0
// aapt resource value: 0x7f07009a
// aapt resource value: 0x7f070003
// aapt resource value: 0x7f070004
// aapt resource value: 0x7f070079
// aapt resource value: 0x7f070078
// aapt resource value: 0x7f07005c
// aapt resource value: 0x7f07009b
// aapt resource value: 0x7f0700a9
// aapt resource value: 0x7f07005d
// aapt resource value: 0x7f070027
// aapt resource value: 0x7f070070
// aapt resource value: 0x7f070052
// aapt resource value: 0x7f070038
// aapt resource value: 0x7f070056
// aapt resource value: 0x7f070044
// aapt resource value: 0x7f07002f
// aapt resource value: 0x7f070057
// aapt resource value: 0x7f07003d
// aapt resource value: 0x7f070063
// aapt resource value: 0x7f07009d
// aapt resource value: 0x7f070045
// aapt resource value: 0x7f070046
// aapt resource value: 0x7f070047
// aapt resource value: 0x7f070073
// aapt resource value: 0x7f0700a5
// aapt resource value: 0x7f07004e
// aapt resource value: 0x7f07004f
// aapt resource value: 0x7f070039
// aapt resource value: 0x7f07008d
// aapt resource value: 0x7f070066
// aapt resource value: 0x7f07008e
// aapt resource value: 0x7f07006d
// aapt resource value: 0x7f07006c
// aapt resource value: 0x7f07007a
// aapt resource value: 0x7f070060
// aapt resource value: 0x7f070090
// aapt resource value: 0x7f070097
// aapt resource value: 0x7f070096
// aapt resource value: 0x7f070095
// aapt resource value: 0x7f070094
// aapt resource value: 0x7f070020
// aapt resource value: 0x7f07007e
// aapt resource value: 0x7f070030
// aapt resource value: 0x7f0700ab
// aapt resource value: 0x7f07003f
// aapt resource value: 0x7f070040
// aapt resource value: 0x7f070041
// aapt resource value: 0x7f07005e
// aapt resource value: 0x7f070072
// aapt resource value: 0x7f070050
// aapt resource value: 0x7f070051
// aapt resource value: 0x7f070048
// aapt resource value: 0x7f070054
// aapt resource value: 0x7f070058
// aapt resource value: 0x7f07000a
// aapt resource value: 0x7f070005
// aapt resource value: 0x7f070021
// aapt resource value: 0x7f070062
// aapt resource value: 0x7f0700aa
// aapt resource value: 0x7f07003a
// aapt resource value: 0x7f07005f
// aapt resource value: 0x7f0700a6
// aapt resource value: 0x7f070059
// aapt resource value: 0x7f070000
// aapt resource value: 0x7f07008c
// aapt resource value: 0x7f070049
// aapt resource value: 0x7f070017
// aapt resource value: 0x7f070018
// aapt resource value: 0x7f07001d
// aapt resource value: 0x7f070061
// aapt resource value: 0x7f0700ae
// aapt resource value: 0x7f07009f
// aapt resource value: 0x7f0700ac
// aapt resource value: 0x7f070031
// aapt resource value: 0x7f070053
// aapt resource value: 0x7f070028
// aapt resource value: 0x7f070093
// aapt resource value: 0x7f07003b
// aapt resource value: 0x7f070022
// aapt resource value: 0x7f07001e
// aapt resource value: 0x7f0700a8
// aapt resource value: 0x7f0700a2
// aapt resource value: 0x7f0700a1
// aapt resource value: 0x7f07004c
// aapt resource value: 0x7f070065
// aapt resource value: 0x7f07000b
// aapt resource value: 0x7f07004d
// aapt resource value: 0x7f070006
// aapt resource value: 0x7f070007
// aapt resource value: 0x7f070075
// aapt resource value: 0x7f07004a
// aapt resource value: 0x7f0700a7
// aapt resource value: 0x7f0700a3
// aapt resource value: 0x7f07000c
// aapt resource value: 0x7f07000d
// aapt resource value: 0x7f07000e
// aapt resource value: 0x7f070029
// aapt resource value: 0x7f070042
// aapt resource value: 0x7f07006b
// aapt resource value: 0x7f070067
// aapt resource value: 0x7f070068
// aapt resource value: 0x7f070055
// aapt resource value: 0x7f070080
// aapt resource value: 0x7f07007f
// aapt resource value: 0x7f070081
// aapt resource value: 0x7f070086
// aapt resource value: 0x7f070082
// aapt resource value: 0x7f070088
// aapt resource value: 0x7f070083
// aapt resource value: 0x7f070084
// aapt resource value: 0x7f070085
// aapt resource value: 0x7f070089
// aapt resource value: 0x7f07008a
// aapt resource value: 0x7f070074
// aapt resource value: 0x7f070023
// aapt resource value: 0x7f070024
// aapt resource value: 0x7f070025
// aapt resource value: 0x7f07008b
// aapt resource value: 0x7f070092
// aapt resource value: 0x7f070091
// aapt resource value: 0x7f070043
// aapt resource value: 0x7f070064
// aapt resource value: 0x7f070008
// aapt resource value: 0x7f07002a
// aapt resource value: 0x7f07002b
// aapt resource value: 0x7f07002c
// aapt resource value: 0x7f07004b
// aapt resource value: 0x7f07009e
// aapt resource value: 0x7f070076
// aapt resource value: 0x7f070087
// aapt resource value: 0x7f07001f
// aapt resource value: 0x7f070019
// aapt resource value: 0x7f07001a
// aapt resource value: 0x7f07001b
// aapt resource value: 0x7f07006a
// aapt resource value: 0x7f070069
// aapt resource value: 0x7f070098
// aapt resource value: 0x7f070014
// aapt resource value: 0x7f070015
// aapt resource value: 0x7f0700a4
// aapt resource value: 0x7f07001c
// aapt resource value: 0x7f070071
// aapt resource value: 0x7f07006f
// aapt resource value: 0x7f07003e
// aapt resource value: 0x7f07006e
// aapt resource value: 0x7f07008f
// aapt resource value: 0x7f07000f
// aapt resource value: 0x7f070010
// aapt resource value: 0x7f070011
// aapt resource value: 0x7f070012
// aapt resource value: 0x7f070013
// aapt resource value: 0x7f07002d
// aapt resource value: 0x7f070009
// aapt resource value: 0x7f070026
// aapt resource value: 0x7f070016
// aapt resource value: 0x7f0700ad
// aapt resource value: 0x7f07003c
// aapt resource value: 0x7f07002e
// aapt resource value: 0x7f0c0000
// aapt resource value: 0x7f0c0001
// aapt resource value: 0x7f0c0005
// aapt resource value: 0x7f0c0006
// aapt resource value: 0x7f0c0002
// aapt resource value: 0x7f0c0003
// aapt resource value: 0x7f0c0004
// aapt resource value: 0x7f0c0007
// aapt resource value: 0x7f0c0008
// aapt resource value: 0x7f0c0009
// aapt resource value: 0x7f030000
// aapt resource value: 0x7f030001
// aapt resource value: 0x7f030002
// aapt resource value: 0x7f030003
// aapt resource value: 0x7f030004
// aapt resource value: 0x7f030005
// aapt resource value: 0x7f030006
// aapt resource value: 0x7f030007
// aapt resource value: 0x7f030008
// aapt resource value: 0x7f030009
// aapt resource value: 0x7f03000a
// aapt resource value: 0x7f03000b
// aapt resource value: 0x7f03000c
// aapt resource value: 0x7f03000d
// aapt resource value: 0x7f03000e
// aapt resource value: 0x7f03000f
// aapt resource value: 0x7f030010
// aapt resource value: 0x7f030011
// aapt resource value: 0x7f030012
// aapt resource value: 0x7f030013
// aapt resource value: 0x7f030014
// aapt resource value: 0x7f030015
// aapt resource value: 0x7f030016
// aapt resource value: 0x7f030017
// aapt resource value: 0x7f030018
// aapt resource value: 0x7f030019
// aapt resource value: 0x7f03001a
// aapt resource value: 0x7f03001b
// aapt resource value: 0x7f03001c
// aapt resource value: 0x7f03001d
// aapt resource value: 0x7f03001e
// aapt resource value: 0x7f03001f
// aapt resource value: 0x7f030020
// aapt resource value: 0x7f030021
// aapt resource value: 0x7f030022
// aapt resource value: 0x7f030023
// aapt resource value: 0x7f030024
// aapt resource value: 0x7f030025
// aapt resource value: 0x7f030026
// aapt resource value: 0x7f030027
// aapt resource value: 0x7f030028
// aapt resource value: 0x7f030029
// aapt resource value: 0x7f03002a
// aapt resource value: 0x7f03002b
// aapt resource value: 0x7f03002c
// aapt resource value: 0x7f03002d
// aapt resource value: 0x7f03002e
// aapt resource value: 0x7f03002f
// aapt resource value: 0x7f030030
// aapt resource value: 0x7f030031
// aapt resource value: 0x7f030032
// aapt resource value: 0x7f030033
// aapt resource value: 0x7f030034
// aapt resource value: 0x7f030035
// aapt resource value: 0x7f030036
// aapt resource value: 0x7f030037
// aapt resource value: 0x7f030038
// aapt resource value: 0x7f030039
// aapt resource value: 0x7f03003a
// aapt resource value: 0x7f03003b
// aapt resource value: 0x7f080000
// aapt resource value: 0x7f080001
// aapt resource value: 0x7f080002
// aapt resource value: 0x7f080003
// aapt resource value: 0x7f080004
// aapt resource value: 0x7f080005
// aapt resource value: 0x7f080006
// aapt resource value: 0x7f080007
// aapt resource value: 0x7f080012
// aapt resource value: 0x7f080013
// aapt resource value: 0x7f080014
// aapt resource value: 0x7f080015
// aapt resource value: 0x7f080016
// aapt resource value: 0x7f080017
// aapt resource value: 0x7f080018
// aapt resource value: 0x7f080019
// aapt resource value: 0x7f08001a
// aapt resource value: 0x7f08001b
// aapt resource value: 0x7f08001c
// aapt resource value: 0x7f08001d
// aapt resource value: 0x7f080008
// aapt resource value: 0x7f080009
// aapt resource value: 0x7f08000a
// aapt resource value: 0x7f08000b
// aapt resource value: 0x7f08000c
// aapt resource value: 0x7f08000d
// aapt resource value: 0x7f08000e
// aapt resource value: 0x7f08000f
// aapt resource value: 0x7f080010
// aapt resource value: 0x7f080027
// aapt resource value: 0x7f08001e
// aapt resource value: 0x7f08001f
// aapt resource value: 0x7f080020
// aapt resource value: 0x7f080021
// aapt resource value: 0x7f080022
// aapt resource value: 0x7f080023
// aapt resource value: 0x7f080024
// aapt resource value: 0x7f080025
// aapt resource value: 0x7f080011
// aapt resource value: 0x7f080026
// aapt resource value: 0x7f090095
// aapt resource value: 0x7f090096
// aapt resource value: 0x7f090097
// aapt resource value: 0x7f090098
// aapt resource value: 0x7f090099
// aapt resource value: 0x7f09015f
// aapt resource value: 0x7f090180
// aapt resource value: 0x7f09009a
// aapt resource value: 0x7f09009b
// aapt resource value: 0x7f09009c
// aapt resource value: 0x7f09009d
// aapt resource value: 0x7f09009e
// aapt resource value: 0x7f09009f
// aapt resource value: 0x7f0900a0
// aapt resource value: 0x7f090039
// aapt resource value: 0x7f09003a
// aapt resource value: 0x7f09003b
// aapt resource value: 0x7f090027
// aapt resource value: 0x7f09003c
// aapt resource value: 0x7f09003d
// aapt resource value: 0x7f09003e
// aapt resource value: 0x7f09003f
// aapt resource value: 0x7f090040
// aapt resource value: 0x7f090041
// aapt resource value: 0x7f09000b
// aapt resource value: 0x7f090042
// aapt resource value: 0x7f09000c
// aapt resource value: 0x7f090043
// aapt resource value: 0x7f090044
// aapt resource value: 0x7f090045
// aapt resource value: 0x7f09000d
// aapt resource value: 0x7f090046
// aapt resource value: 0x7f0900a1
// aapt resource value: 0x7f090047
// aapt resource value: 0x7f090048
// aapt resource value: 0x7f090049
// aapt resource value: 0x7f09000e
// aapt resource value: 0x7f09004a
// aapt resource value: 0x7f09000f
// aapt resource value: 0x7f09004b
// aapt resource value: 0x7f090010
// aapt resource value: 0x7f0900a2
// aapt resource value: 0x7f090086
// aapt resource value: 0x7f09004c
// aapt resource value: 0x7f09004d
// aapt resource value: 0x7f09004e
// aapt resource value: 0x7f09004f
// aapt resource value: 0x7f090050
// aapt resource value: 0x7f090051
// aapt resource value: 0x7f090052
// aapt resource value: 0x7f09008d
// aapt resource value: 0x7f09008e
// aapt resource value: 0x7f090087
// aapt resource value: 0x7f0900a3
// aapt resource value: 0x7f090053
// aapt resource value: 0x7f090054
// aapt resource value: 0x7f090055
// aapt resource value: 0x7f090056
// aapt resource value: 0x7f090057
// aapt resource value: 0x7f0900a4
// aapt resource value: 0x7f090058
// aapt resource value: 0x7f090059
// aapt resource value: 0x7f09005a
// aapt resource value: 0x7f0900a5
// aapt resource value: 0x7f090011
// aapt resource value: 0x7f090012
// aapt resource value: 0x7f0900a6
// aapt resource value: 0x7f090013
// aapt resource value: 0x7f090001
// aapt resource value: 0x7f09005b
// aapt resource value: 0x7f0900a7
// aapt resource value: 0x7f090014
// aapt resource value: 0x7f090015
// aapt resource value: 0x7f0900a8
// aapt resource value: 0x7f090016
// aapt resource value: 0x7f090002
// aapt resource value: 0x7f0900a9
// aapt resource value: 0x7f0900aa
// aapt resource value: 0x7f0900ab
// aapt resource value: 0x7f0900ac
// aapt resource value: 0x7f090017
// aapt resource value: 0x7f090018
// aapt resource value: 0x7f0900ad
// aapt resource value: 0x7f090019
// aapt resource value: 0x7f09001a
// aapt resource value: 0x7f09001b
// aapt resource value: 0x7f090023
// aapt resource value: 0x7f090024
// aapt resource value: 0x7f090160
// aapt resource value: 0x7f09005c
// aapt resource value: 0x7f09005d
// aapt resource value: 0x7f09005e
// aapt resource value: 0x7f09005f
// aapt resource value: 0x7f090060
// aapt resource value: 0x7f09015c
// aapt resource value: 0x7f090084
// aapt resource value: 0x7f090085
// aapt resource value: 0x7f090088
// aapt resource value: 0x7f090089
// aapt resource value: 0x7f090091
// aapt resource value: 0x7f090092
// aapt resource value: 0x7f090093
// aapt resource value: 0x7f09015e
// aapt resource value: 0x7f0900ae
// aapt resource value: 0x7f0900af
// aapt resource value: 0x7f0900b0
// aapt resource value: 0x7f0900b1
// aapt resource value: 0x7f0900b2
// aapt resource value: 0x7f0900b3
// aapt resource value: 0x7f0900b4
// aapt resource value: 0x7f0900b5
// aapt resource value: 0x7f0900b6
// aapt resource value: 0x7f0900b7
// aapt resource value: 0x7f0900b8
// aapt resource value: 0x7f090061
// aapt resource value: 0x7f090062
// aapt resource value: 0x7f090063
// aapt resource value: 0x7f090064
// aapt resource value: 0x7f090065
// aapt resource value: 0x7f0900b9
// aapt resource value: 0x7f0900ba
// aapt resource value: 0x7f090025
// aapt resource value: 0x7f090066
// aapt resource value: 0x7f090067
// aapt resource value: 0x7f090068
// aapt resource value: 0x7f0900bb
// aapt resource value: 0x7f09008a
// aapt resource value: 0x7f090069
// aapt resource value: 0x7f09006a
// aapt resource value: 0x7f0900bc
// aapt resource value: 0x7f09006b
// aapt resource value: 0x7f09006c
// aapt resource value: 0x7f0900bd
// aapt resource value: 0x7f090000
// aapt resource value: 0x7f0900be
// aapt resource value: 0x7f09006d
// aapt resource value: 0x7f090026
// aapt resource value: 0x7f09006e
// aapt resource value: 0x7f0900bf
// aapt resource value: 0x7f0900c0
// aapt resource value: 0x7f0900c1
// aapt resource value: 0x7f09006f
// aapt resource value: 0x7f090070
// aapt resource value: 0x7f090071
// aapt resource value: 0x7f090072
// aapt resource value: 0x7f090073
// aapt resource value: 0x7f0900c2
// aapt resource value: 0x7f090074
// aapt resource value: 0x7f090075
// aapt resource value: 0x7f090076
// aapt resource value: 0x7f090077
// aapt resource value: 0x7f090078
// aapt resource value: 0x7f090079
// aapt resource value: 0x7f0900c3
// aapt resource value: 0x7f09001c
// aapt resource value: 0x7f09001d
// aapt resource value: 0x7f09007a
// aapt resource value: 0x7f09008b
// aapt resource value: 0x7f09008c
// aapt resource value: 0x7f0900c4
// aapt resource value: 0x7f0900c5
// aapt resource value: 0x7f09007b
// aapt resource value: 0x7f0900c6
// aapt resource value: 0x7f09007c
// aapt resource value: 0x7f090003
// aapt resource value: 0x7f09007d
// aapt resource value: 0x7f090094
// aapt resource value: 0x7f09007e
// aapt resource value: 0x7f09015d
// aapt resource value: 0x7f090161
// aapt resource value: 0x7f09001e
// aapt resource value: 0x7f09001f
// aapt resource value: 0x7f09007f
// aapt resource value: 0x7f090080
// aapt resource value: 0x7f090081
// aapt resource value: 0x7f090020
// aapt resource value: 0x7f090021
// aapt resource value: 0x7f090028
// aapt resource value: 0x7f090029
// aapt resource value: 0x7f090082
// aapt resource value: 0x7f090083
// aapt resource value: 0x7f09008f
// aapt resource value: 0x7f090090
// aapt resource value: 0x7f090022
// aapt resource value: 0x7f09002b
// aapt resource value: 0x7f09002c
// aapt resource value: 0x7f09002d
// aapt resource value: 0x7f09002e
// aapt resource value: 0x7f09002f
// aapt resource value: 0x7f090030
// aapt resource value: 0x7f090031
// aapt resource value: 0x7f090032
// aapt resource value: 0x7f090033
// aapt resource value: 0x7f090034
// aapt resource value: 0x7f090035
// aapt resource value: 0x7f090036
// aapt resource value: 0x7f090037
// aapt resource value: 0x7f090038
// aapt resource value: 0x7f0900c7
// aapt resource value: 0x7f0900c8
// aapt resource value: 0x7f0900c9
// aapt resource value: 0x7f0900ca
// aapt resource value: 0x7f0900cb
// aapt resource value: 0x7f0900cc
// aapt resource value: 0x7f0900cd
// aapt resource value: 0x7f0900ce
// aapt resource value: 0x7f0900cf
// aapt resource value: 0x7f0900d0
// aapt resource value: 0x7f0900d1
// aapt resource value: 0x7f0900d2
// aapt resource value: 0x7f0900d3
// aapt resource value: 0x7f0900d4
// aapt resource value: 0x7f0900d5
// aapt resource value: 0x7f0900d6
// aapt resource value: 0x7f0900d7
// aapt resource value: 0x7f0900d8
// aapt resource value: 0x7f0900d9
// aapt resource value: 0x7f0900da
// aapt resource value: 0x7f0900db
// aapt resource value: 0x7f0900dc
// aapt resource value: 0x7f0900dd
// aapt resource value: 0x7f0900de
// aapt resource value: 0x7f0900df
// aapt resource value: 0x7f0900e0
// aapt resource value: 0x7f0900e1
// aapt resource value: 0x7f0900e2
// aapt resource value: 0x7f09002a
// aapt resource value: 0x7f0900e3
// aapt resource value: 0x7f0900e4
// aapt resource value: 0x7f0900e5
// aapt resource value: 0x7f0900e6
// aapt resource value: 0x7f0900e7
// aapt resource value: 0x7f0900e8
// aapt resource value: 0x7f0900e9
// aapt resource value: 0x7f0900ea
// aapt resource value: 0x7f0900eb
// aapt resource value: 0x7f0900ec
// aapt resource value: 0x7f0900ed
// aapt resource value: 0x7f0900ee
// aapt resource value: 0x7f0900ef
// aapt resource value: 0x7f0900f0
// aapt resource value: 0x7f0900f1
// aapt resource value: 0x7f0900f2
// aapt resource value: 0x7f0900f3
// aapt resource value: 0x7f0900f4
// aapt resource value: 0x7f0900f5
// aapt resource value: 0x7f090179
// aapt resource value: 0x7f09017a
// aapt resource value: 0x7f090156
// aapt resource value: 0x7f09017f
// aapt resource value: 0x7f09015a
// aapt resource value: 0x7f090157
// aapt resource value: 0x7f09017b
// aapt resource value: 0x7f090158
// aapt resource value: 0x7f09017c
// aapt resource value: 0x7f090159
// aapt resource value: 0x7f090162
// aapt resource value: 0x7f090163
// aapt resource value: 0x7f090164
// aapt resource value: 0x7f090165
// aapt resource value: 0x7f090166
// aapt resource value: 0x7f090167
// aapt resource value: 0x7f090168
// aapt resource value: 0x7f0900f6
// aapt resource value: 0x7f0900f7
// aapt resource value: 0x7f0900f8
// aapt resource value: 0x7f0900f9
// aapt resource value: 0x7f0900fa
// aapt resource value: 0x7f090004
// aapt resource value: 0x7f090005
// aapt resource value: 0x7f090006
// aapt resource value: 0x7f090007
// aapt resource value: 0x7f090008
// aapt resource value: 0x7f090009
// aapt resource value: 0x7f09000a
// aapt resource value: 0x7f0900fb
// aapt resource value: 0x7f0900fc
// aapt resource value: 0x7f0900fd
// aapt resource value: 0x7f0900fe
// aapt resource value: 0x7f0900ff
// aapt resource value: 0x7f090100
// aapt resource value: 0x7f090101
// aapt resource value: 0x7f090102
// aapt resource value: 0x7f090103
// aapt resource value: 0x7f090104
// aapt resource value: 0x7f090105
// aapt resource value: 0x7f090106
// aapt resource value: 0x7f090169
// aapt resource value: 0x7f09016a
// aapt resource value: 0x7f09016b
// aapt resource value: 0x7f09016c
// aapt resource value: 0x7f09016d
// aapt resource value: 0x7f09016e
// aapt resource value: 0x7f090107
// aapt resource value: 0x7f090108
// aapt resource value: 0x7f090109
// aapt resource value: 0x7f09010a
// aapt resource value: 0x7f09010b
// aapt resource value: 0x7f09010c
// aapt resource value: 0x7f09010d
// aapt resource value: 0x7f09010e
// aapt resource value: 0x7f09010f
// aapt resource value: 0x7f090110
// aapt resource value: 0x7f090111
// aapt resource value: 0x7f090112
// aapt resource value: 0x7f090113
// aapt resource value: 0x7f090114
// aapt resource value: 0x7f090115
// aapt resource value: 0x7f090116
// aapt resource value: 0x7f090117
// aapt resource value: 0x7f090118
// aapt resource value: 0x7f090119
// aapt resource value: 0x7f09011a
// aapt resource value: 0x7f09011b
// aapt resource value: 0x7f09011c
// aapt resource value: 0x7f09011d
// aapt resource value: 0x7f09011e
// aapt resource value: 0x7f09011f
// aapt resource value: 0x7f090120
// aapt resource value: 0x7f090121
// aapt resource value: 0x7f090122
// aapt resource value: 0x7f090123
// aapt resource value: 0x7f090124
// aapt resource value: 0x7f090125
// aapt resource value: 0x7f090126
// aapt resource value: 0x7f090127
// aapt resource value: 0x7f090128
// aapt resource value: 0x7f090129
// aapt resource value: 0x7f09012a
// aapt resource value: 0x7f09012b
// aapt resource value: 0x7f09012c
// aapt resource value: 0x7f09012d
// aapt resource value: 0x7f09012e
// aapt resource value: 0x7f09012f
// aapt resource value: 0x7f090130
// aapt resource value: 0x7f090131
// aapt resource value: 0x7f090132
// aapt resource value: 0x7f090133
// aapt resource value: 0x7f090134
// aapt resource value: 0x7f090135
// aapt resource value: 0x7f090136
// aapt resource value: 0x7f090137
// aapt resource value: 0x7f090138
// aapt resource value: 0x7f090139
// aapt resource value: 0x7f09013a
// aapt resource value: 0x7f09013b
// aapt resource value: 0x7f09013c
// aapt resource value: 0x7f09013d
// aapt resource value: 0x7f09013e
// aapt resource value: 0x7f09013f
// aapt resource value: 0x7f090140
// aapt resource value: 0x7f090141
// aapt resource value: 0x7f090142
// aapt resource value: 0x7f090143
// aapt resource value: 0x7f090144
// aapt resource value: 0x7f090145
// aapt resource value: 0x7f090146
// aapt resource value: 0x7f090147
// aapt resource value: 0x7f090148
// aapt resource value: 0x7f090149
// aapt resource value: 0x7f09014a
// aapt resource value: 0x7f09014b
// aapt resource value: 0x7f09014c
// aapt resource value: 0x7f09014d
// aapt resource value: 0x7f09014e
// aapt resource value: 0x7f09014f
// aapt resource value: 0x7f090150
// aapt resource value: 0x7f090151
// aapt resource value: 0x7f090152
// aapt resource value: 0x7f090153
// aapt resource value: 0x7f090154
// aapt resource value: 0x7f090155
// aapt resource value: 0x7f09017d
// aapt resource value: 0x7f09017e
// aapt resource value: 0x7f09016f
// aapt resource value: 0x7f090170
// aapt resource value: 0x7f090171
// aapt resource value: 0x7f090172
// aapt resource value: 0x7f090173
// aapt resource value: 0x7f090174
// aapt resource value: 0x7f090175
// aapt resource value: 0x7f090176
// aapt resource value: 0x7f090177
// aapt resource value: 0x7f09015b
// aapt resource value: 0x7f090178
// aapt resource value: 10
// aapt resource value: 12
// aapt resource value: 11
// aapt resource value: 21
// aapt resource value: 25
// aapt resource value: 22
// aapt resource value: 23
// aapt resource value: 20
// aapt resource value: 24
// aapt resource value: 13
// aapt resource value: 3
// aapt resource value: 9
// aapt resource value: 26
// aapt resource value: 0
// aapt resource value: 19
// aapt resource value: 28
// aapt resource value: 14
// aapt resource value: 7
// aapt resource value: 16
// aapt resource value: 18
// aapt resource value: 8
// aapt resource value: 2
// aapt resource value: 27
// aapt resource value: 17
// aapt resource value: 15
// aapt resource value: 4
// aapt resource value: 6
// aapt resource value: 1
// aapt resource value: 5
// aapt resource value: 0
// aapt resource value: 0
// aapt resource value: 3
// aapt resource value: 4
// aapt resource value: 5
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 1
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 5
// aapt resource value: 2
// aapt resource value: 3
// aapt resource value: 6
// aapt resource value: 4
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 1
// aapt resource value: 3
// aapt resource value: 4
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 3
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 3
// aapt resource value: 2
// aapt resource value: 6
// aapt resource value: 3
// aapt resource value: 4
// aapt resource value: 5
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 0
// aapt resource value: 6
// aapt resource value: 5
// aapt resource value: 4
// aapt resource value: 3
// aapt resource value: 2
// aapt resource value: 7
// aapt resource value: 1
// aapt resource value: 23
// aapt resource value: 24
// aapt resource value: 17
// aapt resource value: 22
// aapt resource value: 19
// aapt resource value: 18
// aapt resource value: 13
// aapt resource value: 12
// aapt resource value: 14
// aapt resource value: 20
// aapt resource value: 21
// aapt resource value: 50
// aapt resource value: 46
// aapt resource value: 25
// aapt resource value: 26
// aapt resource value: 29
// aapt resource value: 28
// aapt resource value: 31
// aapt resource value: 33
// aapt resource value: 32
// aapt resource value: 37
// aapt resource value: 34
// aapt resource value: 39
// aapt resource value: 35
// aapt resource value: 36
// aapt resource value: 30
// aapt resource value: 27
// aapt resource value: 38
// aapt resource value: 15
// aapt resource value: 16
// aapt resource value: 58
// aapt resource value: 95
// aapt resource value: 96
// aapt resource value: 94
// aapt resource value: 97
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 102
// aapt resource value: 55
// aapt resource value: 52
// aapt resource value: 100
// aapt resource value: 101
// aapt resource value: 99
// aapt resource value: 51
// aapt resource value: 103
// aapt resource value: 104
// aapt resource value: 105
// aapt resource value: 106
// aapt resource value: 86
// aapt resource value: 93
// aapt resource value: 90
// aapt resource value: 88
// aapt resource value: 89
// aapt resource value: 87
// aapt resource value: 118
// aapt resource value: 84
// aapt resource value: 85
// aapt resource value: 91
// aapt resource value: 92
// aapt resource value: 44
// aapt resource value: 43
// aapt resource value: 57
// aapt resource value: 56
// aapt resource value: 75
// aapt resource value: 47
// aapt resource value: 64
// aapt resource value: 63
// aapt resource value: 107
// aapt resource value: 49
// aapt resource value: 65
// aapt resource value: 83
// aapt resource value: 45
// aapt resource value: 115
// aapt resource value: 76
// aapt resource value: 70
// aapt resource value: 72
// aapt resource value: 71
// aapt resource value: 73
// aapt resource value: 74
// aapt resource value: 80
// aapt resource value: 82
// aapt resource value: 81
// aapt resource value: 61
// aapt resource value: 62
// aapt resource value: 108
// aapt resource value: 109
// aapt resource value: 110
// aapt resource value: 111
// aapt resource value: 69
// aapt resource value: 112
// aapt resource value: 53
// aapt resource value: 54
// aapt resource value: 48
// aapt resource value: 113
// aapt resource value: 114
// aapt resource value: 40
// aapt resource value: 77
// aapt resource value: 78
// aapt resource value: 79
// aapt resource value: 42
// aapt resource value: 67
// aapt resource value: 66
// aapt resource value: 41
// aapt resource value: 98
// aapt resource value: 68
// aapt resource value: 60
// aapt resource value: 59
// aapt resource value: 117
// aapt resource value: 116
// aapt resource value: 2
// aapt resource value: 4
// aapt resource value: 5
// aapt resource value: 9
// aapt resource value: 7
// aapt resource value: 6
// aapt resource value: 8
// aapt resource value: 10
// aapt resource value: 11
// aapt resource value: 3
// aapt resource value: 0
// aapt resource value: 4
// aapt resource value: 2
// aapt resource value: 3
// aapt resource value: 1
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 0
// aapt resource value: 13
// aapt resource value: 7
// aapt resource value: 8
// aapt resource value: 14
// aapt resource value: 1
// aapt resource value: 5
// aapt resource value: 4
// aapt resource value: 2
// aapt resource value: 3
// aapt resource value: 6
// aapt resource value: 12
// aapt resource value: 11
// aapt resource value: 9
// aapt resource value: 0
// aapt resource value: 15
// aapt resource value: 10
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 4
// aapt resource value: 1
// aapt resource value: 6
// aapt resource value: 5
// aapt resource value: 3
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 4
// aapt resource value: 5
// aapt resource value: 6
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 3
// aapt resource value: 1
// aapt resource value: 7
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 6
// aapt resource value: 0
// aapt resource value: 4
// aapt resource value: 5
// aapt resource value: 3
// aapt resource value: 7
// aapt resource value: 0
// aapt resource value: 0
// aapt resource value: 3
// aapt resource value: 4
// aapt resource value: 5
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 1
// aapt resource value: 4
// aapt resource value: 3
// aapt resource value: 5
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 2
// aapt resource value: 3
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 4
// aapt resource value: 5
// aapt resource value: 8
// aapt resource value: 6
// aapt resource value: 7
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 3
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 5
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 3
// aapt resource value: 4
// aapt resource value: 2
// aapt resource value: 16
// aapt resource value: 18
// aapt resource value: 17
// aapt resource value: 13
// aapt resource value: 9
// aapt resource value: 11
// aapt resource value: 3
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 5
// aapt resource value: 10
// aapt resource value: 12
// aapt resource value: 6
// aapt resource value: 7
// aapt resource value: 8
// aapt resource value: 4
// aapt resource value: 19
// aapt resource value: 21
// aapt resource value: 22
// aapt resource value: 14
// aapt resource value: 15
// aapt resource value: 20
// aapt resource value: 4
// aapt resource value: 2
// aapt resource value: 5
// aapt resource value: 6
// aapt resource value: 1
// aapt resource value: 3
// aapt resource value: 0
// aapt resource value: 7
// aapt resource value: 8
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 3
// aapt resource value: 9
// aapt resource value: 7
// aapt resource value: 5
// aapt resource value: 8
// aapt resource value: 6
// aapt resource value: 4
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 0
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 6
// aapt resource value: 9
// aapt resource value: 10
// aapt resource value: 7
// aapt resource value: 8
// aapt resource value: 2
// aapt resource value: 4
// aapt resource value: 3
// aapt resource value: 5
// aapt resource value: 0
// aapt resource value: 0
// aapt resource value: 0
// aapt resource value: 3
// aapt resource value: 2
// aapt resource value: 1
// aapt resource value: 8
// aapt resource value: 13
// aapt resource value: 7
// aapt resource value: 9
// aapt resource value: 5
// aapt resource value: 4
// aapt resource value: 15
// aapt resource value: 6
// aapt resource value: 11
// aapt resource value: 10
// aapt resource value: 16
// aapt resource value: 14
// aapt resource value: 12
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 3
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 4
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 13
// aapt resource value: 12
// aapt resource value: 10
// aapt resource value: 11
// aapt resource value: 9
// aapt resource value: 8
// aapt resource value: 3
// aapt resource value: 4
// aapt resource value: 5
// aapt resource value: 6
// aapt resource value: 7
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 3
// aapt resource value: 2
// aapt resource value: 5
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 7
// aapt resource value: 6
// aapt resource value: 4
// aapt resource value: 15
// aapt resource value: 14
// aapt resource value: 13
// aapt resource value: 11
// aapt resource value: 12
// aapt resource value: 10
// aapt resource value: 8
// aapt resource value: 9
// aapt resource value: 10
// aapt resource value: 6
// aapt resource value: 7
// aapt resource value: 8
// aapt resource value: 9
// aapt resource value: 3
// aapt resource value: 4
// aapt resource value: 5
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 1
// aapt resource value: 12
// aapt resource value: 11
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 6
// aapt resource value: 7
// aapt resource value: 9
// aapt resource value: 8
// aapt resource value: 4
// aapt resource value: 5
// aapt resource value: 10
// aapt resource value: 3
// aapt resource value: 2
// aapt resource value: 13
// aapt resource value: 12
// aapt resource value: 11
// aapt resource value: 14
// aapt resource value: 15
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 21
// aapt resource value: 23
// aapt resource value: 22
// aapt resource value: 6
// aapt resource value: 10
// aapt resource value: 7
// aapt resource value: 8
// aapt resource value: 5
// aapt resource value: 9
// aapt resource value: 4
// aapt resource value: 26
// aapt resource value: 20
// aapt resource value: 25
// aapt resource value: 24
// aapt resource value: 11
// aapt resource value: 3
// aapt resource value: 13
// aapt resource value: 28
// aapt resource value: 2
// aapt resource value: 14
// aapt resource value: 18
// aapt resource value: 16
// aapt resource value: 15
// aapt resource value: 17
// aapt resource value: 19
// aapt resource value: 12
// aapt resource value: 27
// aapt resource value: 1
// aapt resource value: 0
// aapt resource value: 3
// aapt resource value: 2
// aapt resource value: 4
// aapt resource value: 0
// aapt resource value: 1
// aapt resource value: 2
// aapt resource value: 0
// aapt resource value: 2
// aapt resource value: 1
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.DesktopGL.CSharp\Game1.cs
// TODO: Add your initialization logic here
// TODO: use this.Content to load your game content here
// TODO: Add your update logic here
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.DesktopGL.CSharp\Program.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.iOS.CSharp\Game1.cs
// TODO: Add your initialization logic here
// TODO: use this.Content to load your game content here
// TODO: Add your update logic here
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.iOS.CSharp\Program.cs
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.iOS.CSharp\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
// The following attributes are used to specify the signing key for the assembly,
// if desired. See the Mono documentation for more information about signing.
//[assembly: AssemblyDelaySign(false)]
//[assembly: AssemblyKeyFile("")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.UWP.CoreApp.CSharp\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: use this.Content to load your game content here
/// <summary>
/// UnloadContent will be called once per game and is the place to unload
/// game-specific content.
/// </summary>
// TODO: Unload any non ContentManager content here
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your update logic here
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.UWP.CoreApp.CSharp\Program.cs
/// <summary>
/// The main class.
/// </summary>
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.UWP.CoreApp.CSharp\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.UWP.XAML.CSharp\App.xaml.cs
/// <summary>
/// Provides application-specific behavior to supplement the default Application class.
/// </summary>
/// <summary>
/// Initializes the singleton application object.  This is the first line of authored code
/// executed, and as such is the logical equivalent of main() or WinMain().
/// </summary>
/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used such as when the application is launched to open a specific file.
/// </summary>
/// <param name="e">Details about the launch request and process.</param>
// Do not repeat app initialization when the Window already has content,
// just ensure that the window is active
// Create a Frame to act as the navigation context and navigate to the first page
//TODO: Load state from previously suspended application
// Place the frame in the current Window
// When the navigation stack isn't restored navigate to the first page,
// configuring the new page by passing required information as a navigation
// parameter
// Ensure the current window is active
/// <summary>
/// Invoked when Navigation to a certain page fails
/// </summary>
/// <param name="sender">The Frame which failed navigation</param>
/// <param name="e">Details about the navigation failure</param>
/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name="sender">The source of the suspend request.</param>
/// <param name="e">Details about the suspend request.</param>
//TODO: Save application state and stop any background activity
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.UWP.XAML.CSharp\Game1.cs
// TODO: Add your initialization logic here
// TODO: use this.Content to load your game content here
// TODO: Add your update logic here
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.UWP.XAML.CSharp\GamePage.xaml.cs
// Create the game.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.UWP.XAML.CSharp\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.WindowsDX.CSharp\Game1.cs
// TODO: Add your initialization logic here
// TODO: use this.Content to load your game content here
// TODO: Add your update logic here
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Application.WindowsDX.CSharp\Program.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Library.NetStandard.CSharp\Game1.cs
// TODO: Add your initialization logic here
// TODO: use this.Content to load your game content here
// TODO: Add your update logic here
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Library.Pipeline.Extension.CSharp\Importer1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Library.Pipeline.Extension.CSharp\Processor1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\MonoGame.Templates.CSharp\content\MonoGame.Library.Shared.CSharp\Game1.cs
// TODO: Add your initialization logic here
// TODO: use this.Content to load your game content here
// TODO: Add your update logic here
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\Android\Activity1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\Android\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: use this.Content to load your game content here
/// <summary>
/// UnloadContent will be called once per game and is the place to unload
/// game-specific content.
/// </summary>
// TODO: Unload any non ContentManager content here
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your update logic here
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\Android\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
// Add some common permissions, these can be removed if not needed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\Android\Resources\Resource.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// aapt resource value: 0x7f020000
// aapt resource value: 0x7f020001
// aapt resource value: 0x7f030001
// aapt resource value: 0x7f030000
// aapt resource value: 0x7f040000
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\ContentPipelineExtension\ContentImporter1.cs
/// <summary>
/// This class will be instantiated by the XNA Framework Content Pipeline
/// to import a file from disk into the specified type, TImport.
///
/// This should be part of a Content Pipeline Extension Library project.
///
/// TODO: change the ContentImporter attribute to specify the correct file
/// extension, display name, and default processor for this importer.
/// </summary>
// TODO: process the input object, and return the modified data.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\ContentPipelineExtension\ContentProcessor1.cs
// TODO: replace these with the processor input and output types.
/// <summary>
/// This class will be instantiated by the XNA Framework Content Pipeline
/// to apply custom processing to content data, converting an object of
/// type TInput to TOutput. The input and output types may be the same if
/// the processor wishes to alter data without changing its type.
///
/// This should be part of a Content Pipeline Extension Library project.
///
/// TODO: change the ContentProcessor attribute to specify the correct
/// display name for this processor.
/// </summary>
// TODO: process the input object, and return the modified data.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\ContentPipelineExtension\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\DesktopGL\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: use this.Content to load your game content here
/// <summary>
/// UnloadContent will be called once per game and is the place to unload
/// game-specific content.
/// </summary>
// TODO: Unload any non ContentManager content here
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your update logic here
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\DesktopGL\Program.cs
/// <summary>
/// The main class.
/// </summary>
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\DesktopGL\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\iOS\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
//TODO: Use Content to load your game content here 
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// For Mobile devices, this logic will close the Game when the Back button is pressed.
// Exit() is obsolete on iOS
// TODO: Add your update logic here            
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
//TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\iOS\Program.cs
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\iOS\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
// The following attributes are used to specify the signing key for the assembly,
// if desired. See the Mono documentation for more information about signing.
//[assembly: AssemblyDelaySign(false)]
//[assembly: AssemblyKeyFile("")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\Windows\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: use this.Content to load your game content here
/// <summary>
/// UnloadContent will be called once per game and is the place to unload
/// game-specific content.
/// </summary>
// TODO: Unload any non ContentManager content here
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your update logic here
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\Windows\Program.cs
/// <summary>
/// The main class.
/// </summary>
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2010\Windows\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2013\MonoGameShared\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
//TODO: use this.Content to load your game content here 
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// For Mobile devices, this logic will close the Game when the Back button is pressed
// Exit() is obsolete on iOS
// TODO: Add your update logic here			
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
//TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2013\WindowsUniversal\Shared\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: use this.Content to load your game content here
/// <summary>
/// UnloadContent will be called once per game and is the place to unload
/// game-specific content.
/// </summary>
// TODO: Unload any non ContentManager content here
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your update logic here
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2013\WindowsUniversal\Shared\GamePage.xaml.cs
// The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=234238
/// <summary>
/// An empty page that can be used on its own or navigated to within a Frame.
/// </summary>
// Create the game.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2013\WindowsUniversal\Shared\Shared.App.xaml.cs
// The Blank Application template is documented at http://go.microsoft.com/fwlink/?LinkId=234227
/// <summary>
/// Provides application-specific behavior to supplement the default Application class.
/// </summary>
/// <summary>
/// Initializes the singleton application object.  This is the first line of authored code
/// executed, and as such is the logical equivalent of main() or WinMain().
/// </summary>
/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used when the application is launched to open a specific file, to display
/// search results, and so forth.
/// </summary>
/// <param name="args">Details about the launch request and process.</param>
// Do not repeat app initialization when the Window already has content,
// just ensure that the window is active
// Create a main GamePage
// TODO: Load state from previously suspended application
// Place the GamePage in the current Window
// Ensure the current window is active
/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name="sender">The source of the suspend request.</param>
/// <param name="e">Details about the suspend request.</param>
// TODO: Save application state and stop any background activity
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2013\WindowsUniversal\Windows\Windows.AssemblyInfo.cs
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2013\WindowsUniversal\WindowsPhone\WindowsPhone.AssemblyInfo.cs
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal\Shared\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: use this.Content to load your game content here
/// <summary>
/// UnloadContent will be called once per game and is the place to unload
/// game-specific content.
/// </summary>
// TODO: Unload any non ContentManager content here
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your update logic here
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal\Shared\GamePage.xaml.cs
// The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=234238
/// <summary>
/// An empty page that can be used on its own or navigated to within a Frame.
/// </summary>
// Create the game.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal\Shared\Shared.App.xaml.cs
// The Blank Application template is documented at http://go.microsoft.com/fwlink/?LinkId=234227
/// <summary>
/// Provides application-specific behavior to supplement the default Application class.
/// </summary>
/// <summary>
/// Initializes the singleton application object.  This is the first line of authored code
/// executed, and as such is the logical equivalent of main() or WinMain().
/// </summary>
/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used when the application is launched to open a specific file, to display
/// search results, and so forth.
/// </summary>
/// <param name="args">Details about the launch request and process.</param>
// Do not repeat app initialization when the Window already has content,
// just ensure that the window is active
// Create a main GamePage
// TODO: Load state from previously suspended application
// Place the GamePage in the current Window
// Ensure the current window is active
/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name="sender">The source of the suspend request.</param>
/// <param name="e">Details about the suspend request.</param>
// TODO: Save application state and stop any background activity
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal\Windows\Windows.AssemblyInfo.cs
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal\WindowsPhone\WindowsPhone.AssemblyInfo.cs
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal10\App.xaml.cs
// The Blank Application template is documented at http://go.microsoft.com/fwlink/?LinkId=402347&clcid=0x409
/// <summary>
/// Provides application-specific behavior to supplement the default Application class.
/// </summary>
/// <summary>
/// Initializes the singleton application object.  This is the first line of authored code
/// executed, and as such is the logical equivalent of main() or WinMain().
/// </summary>
//API check to ensure the "RequiresPointerMode" property exists, ensuring project is running on build 14393 or later
//If running on the Xbox, disable the default on screen pointer
/// <summary>
/// Detection code in Windows 10 to identify the platform it is being run on
/// This function returns true if the project is running on an XboxOne
/// </summary>
/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used such as when the application is launched to open a specific file.
/// </summary>
/// <param name="e">Details about the launch request and process.</param>
// By default we want to fill the entire core window.
// Do not repeat app initialization when the Window already has content,
// just ensure that the window is active
// Create a Frame to act as the navigation context and navigate to the first page
//TODO: Load state from previously suspended application
// Place the frame in the current Window
// When the navigation stack isn't restored navigate to the first page,
// configuring the new page by passing required information as a navigation
// parameter
// Ensure the current window is active
/// <summary>
/// Invoked when Navigation to a certain page fails
/// </summary>
/// <param name="sender">The Frame which failed navigation</param>
/// <param name="e">Details about the navigation failure</param>
/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name="sender">The source of the suspend request.</param>
/// <param name="e">Details about the suspend request.</param>
//TODO: Save application state and stop any background activity
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal10\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal10\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: use this.Content to load your game content here
/// <summary>
/// UnloadContent will be called once per game and is the place to unload
/// game-specific content.
/// </summary>
// TODO: Unload any non ContentManager content here
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your update logic here
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal10\GamePage.xaml.cs
// The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409
/// <summary>
/// An empty page that can be used on its own or navigated to within a Frame.
/// </summary>
// Create the game.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal10Core\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal10Core\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: use this.Content to load your game content here
/// <summary>
/// UnloadContent will be called once per game and is the place to unload
/// game-specific content.
/// </summary>
// TODO: Unload any non ContentManager content here
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your update logic here
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2015\WindowsUniversal10Core\Program.cs
/// <summary>
/// The main class.
/// </summary>
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2017\WindowsUniversal10\App.xaml.cs
// The Blank Application template is documented at http://go.microsoft.com/fwlink/?LinkId=402347&clcid=0x409
/// <summary>
/// Provides application-specific behavior to supplement the default Application class.
/// </summary>
/// <summary>
/// Initializes the singleton application object.  This is the first line of authored code
/// executed, and as such is the logical equivalent of main() or WinMain().
/// </summary>
//API check to ensure the "RequiresPointerMode" property exists, ensuring project is running on build 14393 or later
//If running on the Xbox, disable the default on screen pointer
/// <summary>
/// Detection code in Windows 10 to identify the platform it is being run on
/// This function returns true if the project is running on an XboxOne
/// </summary>
/// <summary>
/// Invoked when the application is launched normally by the end user.  Other entry points
/// will be used such as when the application is launched to open a specific file.
/// </summary>
/// <param name="e">Details about the launch request and process.</param>
// By default we want to fill the entire core window.
// Do not repeat app initialization when the Window already has content,
// just ensure that the window is active
// Create a Frame to act as the navigation context and navigate to the first page
//TODO: Load state from previously suspended application
// Place the frame in the current Window
// When the navigation stack isn't restored navigate to the first page,
// configuring the new page by passing required information as a navigation
// parameter
// Ensure the current window is active
/// <summary>
/// Invoked when Navigation to a certain page fails
/// </summary>
/// <param name="sender">The Frame which failed navigation</param>
/// <param name="e">Details about the navigation failure</param>
/// <summary>
/// Invoked when application execution is being suspended.  Application state is saved
/// without knowing whether the application will be terminated or resumed with the contents
/// of memory still intact.
/// </summary>
/// <param name="sender">The source of the suspend request.</param>
/// <param name="e">Details about the suspend request.</param>
//TODO: Save application state and stop any background activity
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2017\WindowsUniversal10\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2017\WindowsUniversal10\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: use this.Content to load your game content here
/// <summary>
/// UnloadContent will be called once per game and is the place to unload
/// game-specific content.
/// </summary>
// TODO: Unload any non ContentManager content here
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your update logic here
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2017\WindowsUniversal10\GamePage.xaml.cs
// The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409
/// <summary>
/// An empty page that can be used on its own or navigated to within a Frame.
/// </summary>
// Create the game.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2017\WindowsUniversal10Core\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2017\WindowsUniversal10Core\Game1.cs
/// <summary>
/// This is the main type for your game.
/// </summary>
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to run.
/// This is where it can query for any required services and load any non-graphic
/// related content.  Calling base.Initialize will enumerate through any components
/// and initialize them as well.
/// </summary>
// TODO: Add your initialization logic here
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: use this.Content to load your game content here
/// <summary>
/// UnloadContent will be called once per game and is the place to unload
/// game-specific content.
/// </summary>
// TODO: Unload any non ContentManager content here
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input, and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your update logic here
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// TODO: Add your drawing code here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudio2017\WindowsUniversal10Core\Program.cs
/// <summary>
/// The main class.
/// </summary>
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudioForMac\PipelineDisplayBinding.cs
// figure out linix 
// Fire off the process.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Templates\VisualStudioForMac\Properties\AddinInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\AssetTestUtility.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Bounding.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Same frustum.
// Smaller frustum contained entirely inside.
// Same size frustum, pointing in the same direction and offset by a small amount.
// Same size frustum, pointing in the opposite direction and not overlapping.
// Larger frustum, entirely containing test frustum.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\ByteBufferPoolTest.cs
// ByteBufferPool removes a buffer when none of the buffers in the pool
// is large enough to satisfy a Get, and it has at least 1 buffer in the pool.
// This way the number of items in the pool does not grow beyond the number
// of buffers that are in use simultaneously, lowering overall memory usage.
// the following Get should remove the size 5 buffer from the pool because it is not in use
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\ColorTest.cs
// Contains a test case for each constructor type
// Account for rounding differences with float constructors
// Operator comparison
// Test 1.0 scale.
// Test 0.999 scale.
// Test 1.001 scale.
// Test 0.0 scale.
// Test 0.001 scale.
// Test -0.001 scale.
// Test for overflow.
// Test for underflow.
// Test zero and underflow.
// Test one scale and overflows.
// Test half scale.
// Test backwards lerp.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\CurveKeyCollectionTest.cs
//[Test]
//public void TypeConverter()
//{
//    var curveKeyCollection = new CurveKeyCollection
//    {
//        new CurveKey(0, 1),
//        new CurveKey(1, 2),
//        new CurveKey(3, 4)
//    };
//    // Gets the attributes for the instance.
//    var attributes = TypeDescriptor.GetAttributes(curveKeyCollection);
//    // Assert.AreEqual(5, attributes.Count);
//    for (var i = 0; i < attributes.Count; ++i)
//    {
//        Debug.WriteLine("attribute #" + i + " = " + attributes[i]);
//        Assert.AreEqual(false, attributes[i].IsDefaultAttribute());
//    }
//}
// Count property
// IsReadOnly property
// Item indexer
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\CurveKeyTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\CurveTest.cs
//[Test]
//public void TypeConverter()
//{
//    var curve = new Curve();
//    curve.Keys.Add(new CurveKey(0, 1));
//    curve.Keys.Add(new CurveKey(1, 2));
//    curve.Keys.Add(new CurveKey(3, 4));
//    // Gets the attributes for the instance.
//    var attributes = TypeDescriptor.GetAttributes(curve);
//    // Assert.AreEqual(2,attributes.Count);
//    for (var i = 0; i < attributes.Count; ++i)
//    {
//        Console.WriteLine("attribute #" + i + " = " + attributes[i]);
//        Assert.AreEqual(false,attributes[i].IsDefaultAttribute());
//    }
//}
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\EnumConformingTest.cs
/// <summary>
/// Tests for enum compatibility with XNA(here is only XNA enum members, extensions are not included).
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\FrameworkDispatcherTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Ensure that FrameworkDispatcher is initialized on the main thread.
// If executing this line, no exception was thrown.
// Give the sound effect time to play
// SoundEffectInstancePool._playingInstances is private
// and not worth making internal only for this test.
// Use reflection to get it.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\GameComponentTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\GameTest+Methods.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\GameTest+Properties.cs
/*
// TODO: It might be nice to try to use a real, live
//       GraphicsDevice here rather than null.
// Unpack the real exception
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\GameTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//Assert.That(_game, Has.Property("UpdateCount").GreaterThan(11));
//Assert.That(_game, Has.Property("DrawCount").EqualTo(10));
// Exit called in Run
// TODO this is not necessary for XNA, but MG crashes when no GDM is set and Run is called
// Draw should be suppressed
//if (!gameTime.IsRunningSlowly)
//long endTick = (long)(_updateTime.TotalMilliseconds * 10) + DateTime.Now.Ticks;
// Be busy!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\GestureRecognizerTest.cs
// TODO: Mac implements its own GameWindow class that cannot 
// be overloaded in MockWindow...  if you hate this hack, go fix it.
/// <summary>
/// Tests the gesture recognition of the TouchPanelState class. (This will be split out in to another class in the future)
/// </summary>
//Do a first tap
//Will make a tap event if tap is enabled
//Now do the second tap in the same location, this will make a double tap on press (but no tap)
//This release should make no gestures
//Do a first tap
//Now do the second tap in a different location
//Shouldn't make a double tap
//TODO: This test is based on current behavior. We need to verify that XNA behaves the same
//TODO: Need a test for how pinch and tap interact
//Place a finger down, this finger will never be released
//Place a new finger down for a tap
//Release it, should not make a tap
//Press the finger down again, should not make a double tap
//Do a first tap
//Now wait 500ms (we require it within 300ms)
//Shouldn't make a double tap
//Place the finger down
//We shouldn't generate the hold until the required time has passed
//The last Update should have generated a hold
//Place the finger down
//Release it, should make a tap
//Place finger again, should make a double tap
//Now hold it for a while to make a hold gesture
//The last Update should have generated a hold
//Vertical
//Place the finger down
//Move it until it should have made a drag
//We should have a gesture now
//Should get the correct type at the new touch location, with the given delta
//Delta has only movement in the direction of the drag
//Vertical
//If all gestures are enabled (DragComplete is enabled), releasing our touch will generate a DragComplete gesture
//This is (0,0) in XNA too. It's weird though!
//Place the finger down
//Move it until it should have made a drag
//We should have a gesture now
//Should get the correct type at the new touch location, with the given delta
//If DragComplete is enabled, releasing our touch will generate a DragComplete gesture
//This is (0,0) in XNA too. It's weird though!
//Place the finger down
//Move it until it should have made a drag
//We should have a gesture now
//Should get the correct type at the new touch location, with the given delta
//Place the finger down
//Drag it, should get a drag
//Disable gestures
//Release that touch, should make no gesture
//Enable both gestures again, just place the finger down and release it
//Should make no gesture
//Place the finger down
//Drag it, should get a drag
//Disable gestures
//Enable both gestures again, release the finger
//Release that touch, should make no gesture
//Place the finger down
//Drag it, should get a drag
//Disable gestures
//Release the finger, should make no gesture (gestures are disabled)
//Press it down again
//Enable both gestures again
//Release the second touch, should make no gesture
//Based on https://github.com/mono/MonoGame/pull/1543#issuecomment-15004057
//Drag it a bit
//Place the finger down
//Move it until it should have made a flick
//Now release
//Now we should have the flick
//Could check Delta here, it contains the flick velocity
//Place the finger down
//Then release it at the edge of the detection size
//This should not make a flick. If the distance is 1 greater it will.
//Place the finger down
//Move it until it should have made a flick
//Each drag should make a FreeDrag
//Now release
//Now we should have the flick
//And then the DragComplete
//And that should be it
//TODO: This test is based on current behavior. We need to verify that XNA behaves the same
//Place a finger down
//Place the other finger down
//Now we should have a pinch
//If we do nothing, we shouldn't get more pinch events
//But if we move a finger, we should get an updated pinch
//Now releasing one of the fingers should make a pinch complete event
//We should have no more events
// !MONOMAC
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\MathHelperTest.cs
// The following test checks for XNA compatibility. 
// Even though the calculation itself should return "1", the XNA implementaion returns 0 (presumably due to a efficiency/precision tradeoff).
// Pi boundaries
// 2 * Pi boundaries
// 3 * Pi boundaries
// 4 * Pi boundaries
// 5 * Pi boundaries
// 10 * Pi boundaries
// 20 * Pi boundaries
// 20000000 * Pi boundaries
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\MatrixTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\MockWindow.cs
// TODO: Mac implements its own GameWindow class that cannot 
// be overloaded...  if you hate this hack, go fix it.
// TODO: Make this common so that all platforms have it!
// !MONOMAC
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\PackedVectorTest.cs
// Test the limits.
// Test clamping.
//Test ordering
// Test the limits.
// Test ToVector4
// Test clamping.
//Test Ordering
// Test the limits.
// Test ToVector2
// Test clamping.
//Test Ordering
// Test the limits.
// Test ToVector4
// Test clamping.
//Test Ordering
// Test the limits.
// Test ToVector4
// Test clamping.
//Test data ordering
//Test Ordering
//Test Ordering
//Test Ordering
//Test Ordering
// Test the limits.
// Test ToVector2.
// Test clamping.
// Test ToVector4.
//Test ordering
// Test the limits.
// Test ToVector4.
// Test clamping.
//Test Ordering
// Test the limits.
// Test ToVector4.
// Test clamping.
// Make sure the swizzle is correct.
// Test the limits.
// Test ToVector3.
// Test clamping.
// Make sure the swizzle is correct.
// Test the limits.
// Test ToVector4.
// Test clamping.
//Test ordering
//Test limits
//Test values
//Test PackedValue
//Test ToVector2
//Test PackedValue
//Test ToVector4
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\PlaneTest.cs
// Our test plane.
// Our matrix.
// Test transform.
// Our test plane.
// Our matrix.
// Test transform.
// Our test plane.
// Our quaternion.
// Test transform.
// Our test plane.
// Our quaternion.
// Test transform.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\PointTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\QuaternionTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\RayTest.cs
// Our test box.
// Test misses.
// Test middle of each face.
// Test the corners along each axis.
// Test inside out.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\RectangleTest.cs
// Constructor
// Constructor 2
// Left property
// Right property
// Top property
// Bottom property
// Location property
// Center property
// Size property
// IsEmpty property
// Empty - static property
// First overload testing(forward and backward)
// Second overload testing(forward and backward)
// First overload testing(forward and backward)
// Second overload testing(forward and backward)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\TestGameBase.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// We do all the tests using the reference device to
// avoid driver glitches and get consistant rendering.
// XNA (WinForms) leaves WM_QUIT hanging around
// in the message queue sometimes, and when it
// does, all future windows that are created are
// instantly killed.  So, we manually absorb any
// WM_QUIT that exists.
// NOTE: We avoid Game.Exit() here as we marked it
// obsolute on platforms that disallow exit in 
// shipping games.
//
// We however need it here to halt the app after we
// complete running all the unit tests.  So we do the
// next best thing can call the interal platform code
// directly which produces the same result.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\TitleContainerTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// under mono we get a FileNotFoundException for this path.
// TODO: This always fails on XNA... even though it shouldn't.  I suspect 
// this is because internally XNA uses the entry/active assembly as the
// root of the path.  Since we are launched from some Nunit runner things
// end up not working as we expect.
//
// We need to figure out the trick to hack around this to validate 
// non-failure tests against XNA.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\TouchCollectionTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\TouchLocationTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\TouchPanelTest.cs
// TODO: Mac implements its own GameWindow class that cannot 
// be overloaded in MockWindow...  if you hate this hack, go fix it.
//Location should be updated
//Touch the screen, we should get one touch with the given location in the pressed state
//Now optionally move the touch, should give the same touch in the new location in the moved state
//Release the touch, it should then show up as released touch
//Finally get the TouchState again, we should now have no touches
//Moving shouldn't change the behavior
//Should miss the touch that happened between
//Moving shouldn't change the behavior
//Should get the touch that happened between
//Touch should still be there, but as released
//Touch should be gone now
//Moving shouldn't change the behavior
//Shouldn't get the touch that happened last frame
//Start with one touch
//Start a second touch
//First touch should now be moved, same location
//Second touch should be pressed in its position
//Move the second touch
//touch1 should be the same
//touch2 should be moved in its new location
//Release the second touch
//touch1 should be the same
//touch2 should be released in its new location
//Move the first touch, second touch shouldn't be there any more
//touch1 should be moved to the new position
//No more touch2
//Release the first touch
//touch1 should be released at the new position
//Now we should have no touches
//To test this, we will start a touch, read the state.
//Then release the touch, start a new touch and move it around lots
//Then read the state, the first touch should be released
//Start a touch
//Release the touch, make a new one and move it around lots
//We should now have the first touch in the release state and the second touch in the pressed state at 199,199
//Create multiple touches in different states
//Start a touch
//Call ReleaseAllTouches
//If we saw the second touch happen then we should see it be released, otherwise it will be in pressed, then in released next time
//Then it should be empty
// !MONOMAC
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\UtilitiesTest.cs
//file",                   @"../file.extension",       @"file.extension")]
// Make sure the matching path has the right seperators as well.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Vector2Test.cs
// Test 0.0 scale.
// Test 1.0 scale.
// Test 2.0 scale.
// Test 0.999 scale.
// Test two vectors multiplication.
// Overloads comparsion
// STANDART OVERLOADS TEST
// OUTPUT OVERLOADS TEST
// TRANSFORM ON LIST (MATRIX)
// TRANSFORM ON LIST (MATRIX)(DESTINATION & SOURCE)
// TRANSFORM ON LIST (MATRIX)(SIMPLE)
// TRANSFORM ON LIST (QUATERNION)
// TRANSFORM ON LIST (QUATERNION)(DESTINATION & SOURCE)
// TRANSFORM ON LIST (QUATERNION)(SIMPLE)
// TRANSFORM ON LIST
// TRANSFORM ON LIST(SOURCE OFFSET)
// TRANSFORM ON LIST(DESTINATION OFFSET)
// TRANSFORM ON LIST(DESTINATION & SOURCE)
// TRANSFORM ON LIST(SIMPLE)
// Checking for overflows in hash calculation.
// Common values
// Individual properties alter hash
// CEILING
// FLOOR
// ROUND
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Vector3Test.cs
// STANDART OVERLOADS TEST
// OUTPUT OVERLOADS TEST
// Checking for overflows in hash calculation.
// Common values
// Individual properties alter hash
// CEILING
// FLOOR
// ROUND
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Vector4Test.cs
// same as result1 ? - it must be same
// Checking for overflows in hash calculation.
// Common values
// Individual properties alter hash
// CEILING
// FLOOR
// ROUND
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\VertexTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Audio\DynamicSoundEffectInstanceTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Necessary to get audio initialised
// XNA raises the event every time a buffer is consumed and there are less than two left.
// The event is raised on the same thread as FrameworkDispatcher.Update() is called.
// Both buffers should be consumed by the time the event routine is called by XNA.
// This test verifies that each consumed buffer raises its own event.
// No events are raised when a buffer is consumed and there are more than 3 buffers submitted.
// The event is raised on the same thread as FrameworkDispatcher.Update() is called.
// No event is raised if FrameworkDispatcher.Update() is not called.
// Valid sample rates
// Invalid sample rates
// Valid channel counts
// Invalid channel count
// Zero length
// Nonzero length
// Length not aligned with format
// Negative length
// Disposed
// Zero length
// Nonzero length
// Negative length
// Disposed
// Always returns false and cannot be set true
// Setting it to false does not throw, however
// Give it time to finish
// Throws ObjectDisposedException
// Initially, the playback is stopped
// Submitting a buffer will not change the state
// Start playing
// While still playing, pause the playback
// Let it continue and run out of buffers
// Submit a buffer and the playback should continue
// Stop immediately
// XNA does not stop it until FrameworkDispatcher.Update is called
// And then resume
// Calling Stop(false) has no effect
// Null or empty buffer - with different null behavior to the other overload
// Invalid alignment
// Correct alignment and size
// Null or empty buffer - with different null behavior to the other overload
// Correct alignment
// One sample per channel
// 250 samples
// Invalid alignment
// Unaligned start position also throws
// Invalid size
/// <summary>
/// Sleeps for the specified amount of time while calling FrameworkDispatcher.Update() every 10 ms.
/// </summary>
/// <summary>
/// Generates a audio buffer filled with a single frequency sine wave.
/// </summary>
/// <param name="frequency">Frequency in Hz.</param>
/// <param name="sampleRate">Samples per second.</param>
/// <param name="channelCount">Number of channels.</param>
/// <param name="length">Length in seconds.</param>
/// <returns>An audio buffer of sufficient size, filled with sine wave.</returns>
// Fill each channel
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Audio\SoundEffectTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Necessary to get audio initialised
// NOTE: These can break if someone has changed them in
// a prior test.  We just hope no one else messes with these.
// TODO: Add some range tests.
// Test sizeInBytes range.
// Test sampleRate range.
// Test channel range.
// Test for zero duration.
// Test for one second.
// Test duration range.
// Test sampleRate range.
// Test channel range.
// Test for zero duration.
// Test for one second.
// Test buffer mono.
// Test buffer sterio.
// Test sampleRate range.
// Test channel range.
// Test the duration mono.
// Test the duration stereo.
// Test misc state.
// Test buffer mono.
// Test buffer stereo.
// Test offset.
// Test count.
// XNA seems to not allow misaligned offsets even when
// the data is within range of the buffer.  We go ahead
// and allow this in MonoGame.
// Test sampleRate range.
// Test channel range.
// Test loop start.
// Test loop end.
// riff_chunck_size
// Look for the format chunk.
// Read the format header.
// Look for the data chunk.
// These 8bit PCMs pass although the SoundEffect constructors although
// they don't support 8bit PCM.  This is because it is interpreting it
// as 16bit and generating a bad sound... hence half the duration.
// MSADPCM data can be passed into the constructors, but
// it calculates and incorrect duration and plays static.
// XNA does not support 24-bit, 32-bit float, MS-ADPCM or IMA/ADPCM in SoundEffect.FromStream, but MonoGame does
// MonoGame now supports loading ADPCM through SoundEffect.FromStream()
// Proxy for the content manager used in SoundEffectFromContent
// XNA does not support 32-bit float, MS-ADPCM or IMA/ADPCM in SoundEffect.FromStream, but MonoGame does
// XNA cannot seem to load our MS-ADPCM XNBs.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Audio\XactTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Necessary to get audio initialised
//Assert.Throws<DirectoryNotFoundException>(() => new AudioEngine(@"This\Does\Not\Exist.xgs"));
//Assert.Throws<DirectoryNotFoundException>(() => new WaveBank(_audioEngine, @"This\Does\Not\Exist.xwb"));
//Assert.Throws<DirectoryNotFoundException>(() => new SoundBank(_audioEngine, @"This\Does\Not\Exist.xsb"));
//Assert.False(soundBank.IsInUse); // MonoGame Fail
// Make sure case matters.
// Make sure we can get the different categories.
// Make sure case matters.
// Make sure instance variables can't be accessed.
// Make sure private variables can't be accessed.
// Make sure case matters.
// Make sure a reserved variable can be set.
// Make sure a user variable can be set.
// Make sure variable limits are working.
// Make sure instance variables can't be accessed.
// Make sure private variables can't be accessed.
// Make sure the initial state is correct.
// Make sure the initial state is reset
// Make sure the disposed state is correct.
// TODO: Add actual playback tests!
//_soundBank.PlayCue("blast_mono");
// Make sure case matters.
// Make sure globbal variables can't be accessed.
// Make sure private variables can't be accessed.
// Make sure case matters.
// Make sure a reserved variable can be set.
// Make sure a user variable can be set.
// Make sure variable limits are working.
// Make sure global variables can't be accessed.
// Make sure private variables can't be accessed.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\Colored3DCubeComponent.cs
/*
// setup our graphics scene matrices
// Setup our basic effect
//RasterizerState rasterizerState1 = new RasterizerState ();
//rasterizerState1.CullMode = CullMode.None;
//graphics.GraphicsDevice.RasterizerState = rasterizerState1;
//bottom face
//top face
//front face
//back face
//left face
//right face
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\DrawFrameNumberComponent.cs
/*
// TODO: Add support for different placements and colors.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\FlexibleGameComponent.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\FrameCompareComponent.cs
/*
// TODO: It's likely that a more sophisticated approach will be required for
//       comparing images.  In particular, comparing pixel deltas would give
//       quite a high score to some images that humans would rate as extremely
//       different to each other.  For example, with PixelDeltaComparer, a
//       totally white background vs a totally white background with a one-pixel
//       diagonal line from top-left to bottom-right would be scored in the
//       (very) high 90s for percent similarity, while no human would rate it
//       so.  Several passes may be desirable, in fact, to test for color
//       differences, contrast differences, color-contrast differences, edge
//       differences, etc.
/// <summary>
/// Defines behavior needed for frames to be scheduled for capture and
/// then manipulated and released.
/// </summary>
/// <summary>
/// Schedules a frame capture for the next available Draw cycle.
/// </summary>
/// <summary>
/// Gets the captured frame from the last scheduled capture.
/// </summary>
/// <returns></returns>
/// <summary>
/// Notifies the <see cref="IFrameCaptureSource"/> implementation that
/// a called has finished using the texture returned by
/// <see cref="GetCapturedFrame"/>.
/// </summary>
/// <param name="frame"></param>
/// <summary>
/// Defines methods for comparing two visual frames.
/// </summary>
/// <summary>
/// Compares two frames and returns a similarity value from 0.0f
/// to 1.0f.
/// </summary>
/// <param name="image">The image to compare.</param>
/// <param name="referenceImage">A ground truth image to compare against.</param>
/// <returns>A floating point value from 0.0f to 1.0f that
/// represents the similarity of the two frames, according to
/// this IFrameComparer implementation.</returns>
// Debugging only
//Console.WriteLine ("State: {0}->{1}", _state, value);
// Signal the end of the work items, then wait
// for processing to complete.
// By this point, IFrameSource is processing the
// capture request, and will have finished by
// the next call to Update.
// HACK: This should not be needed!
// FIXME: Report this error somehow.
// TODO: It would be nice to communicate
//       information about what went wrong, when
//       things go wrong.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\ImplicitDrawOrderComponent.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\InitializeOrderComponent.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\PixelDeltaFrameComparer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// We use a simple nearest neighbor sample as any blending
// would only serve to increase the differences between the images.
// Convert to a greyscale value which removes small
// color differences that the eye cannot spot.
// Conver the images down to a common sized greyscale image.
// Find the differences between the greyscale images.
// Find all the differences over the threshold.
// Calculate the difference percentage.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\Simple3DCubeComponent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// setup our graphics scene matrices
// Setup our basic effect
//bottom face
//top face
//front face
//back face
//left face
//right face
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\SpaceshipModelDrawComponent.cs
/*
// The XNA framework Model object that we are going to display.
// Array holding all the bone transform matrices for the entire model.
// We could just allocate this locally inside the Draw method, but it
// is more efficient to reuse a single array, as this avoids creating
// unnecessary garbage.
// Spaceship drawing parameters
/// <summary>
/// Loads the spaceship model.
/// </summary>
// Load the spaceship model from the ContentManager.
// Allocate the transform matrix array.
/// <summary>
/// Gets or sets the projection matrix value.
/// </summary>
/// <summary>
/// Gets or sets the rotation matrix value.
/// </summary>
/// <summary>
/// Gets or sets the rotation matrix value.
/// </summary>
/// <summary>
/// Gets or sets the view matrix value.
/// </summary>
/// <summary>
/// Gets or sets the lights states.
/// </summary>
/// <summary>
/// Gets or sets the per pixel lighting preferences
/// </summary>
/// <summary>
/// Draws the spaceship model, using the current drawing parameters.
/// </summary>
// Set the world matrix as the root transform of the model.
// Look up combined bone matrices for the entire model.
// Draw the model.
/// <summary>
/// Sets effect's per pixel lighting preference
/// </summary>
/// <param name="effect"></param>
/// <summary>
/// Sets effects lighting properties
/// </summary>
/// <param name="effect"></param>
/// <param name="lights"></param>
// Initial camera FOV (serves as a zoom level)
// Set render states.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\TexturedQuadComponent.cs
/*
// Calculate the quad corners
// Fill in texture coordinates to display full texture
// on quad
// Provide a normal for each vertex
// Set the position and texture coordinate for each
// vertex
// Set the index buffer for each vertex, using
// clockwise winding
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\UpdateGuard.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\VisualTestDrawableGameComponent.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Components\VisualTestGameComponent.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\BlendStateTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Can mutate before binding.
// Can't mutate after binding.
// Even after changing to different BlendState, you still can't mutate a previously-bound object.
// The Mac build bot GL driver does not support independent blend states
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\DepthStencilStateTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Can mutate before binding.
// Can't mutate after binding.
// Even after changing to different RasterizerState, you still can't mutate a previously-bound object.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\EffectTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// This relies on the parameters permanently being on the same index.
// Should be no problem except when adding parameters.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\GraphicsAdapterTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// HACK: Only enable for XNA and DirectX which are the 
// only platforms which currently correctly implement 
// the GraphicsAdapter API.
// Seems like XNA treats aspect ratios above 16:10 as wide screen. A 1680x1050 display (exactly 16:10) was considered not to be wide screen.
// MonoGame considers ratios equal or greater than 16:10 to be wide screen.
// unsupported renderTarget formats
// XNA || DIRECTX________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\GraphicsDeviceManagerTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: Some of these defaults will be different
// per-platform... we will #if those cases in here
// as we encounter them in the future.
// TODO remove MonoMac
// make sure that changing the graphics profile creates a new device and does not reset
// make a change so ApplyChanges actually does something
// assert that PreparingDeviceSettings is invoked, but the GraphicsProfile of the gdm did not change
// make a change so ApplyChanges actually does something
// this proves that XNA does not check for equality, but just registers that setters are used
// change the graphics profile so the current device needs to be disposed
// changing the profile requires creating a new device
// changing the profile will trigger a device reset
// not even that will trigger the event
// first hook an event to do some checks
// then create a GraphicsDevice
// General percentage of black and white pixels we should be getting.
// If enabled we should have at least a few grey pixels
// else we should have zero grey pixels.
// Set too high. In DX11 is max 32.
// Set too high. In DX11 is max 32.
// Test again for GraphicsDevice.Reset(PresentationParameters)
// Set too high. max is maxMultiSampleCount
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\GraphicsDeviceTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Disposing should not be invoked more than once
// TODO figure out exactly when a device is lost
// TODO GetVertexBuffers is not implemented in MG
// https://blogs.msdn.microsoft.com/shawnhar/2007/12/12/virtualizing-the-graphicsdevice-in-xna-game-studio-2-0/
// No vertex shader or pixel shader.
// No vertexBuffer.
// Success - "normal" usage.
// vertexStart too small / large.
// primitiveCount too small / large.
// vertexStart + primitiveCount too large.
// No vertex shader or pixel shader.
// No vertexBuffer.
// No indexBuffer.
// Success - "normal" usage.
// XNA doesn't do upfront parameter validation on the Assert.DoesNotThrow tests,
// but it *sometimes* fails later with an AccessViolationException, so we can't actually
// run these tests as part of the XNA test suite.
// baseVertex too small / large.
// startIndex too small / large.
// primitiveCount too small / large.
// startIndex + primitiveCount too large.
// This overload of DrawIndexedPrimitives is not supported on XNA.
// No vertex shader or pixel shader.
// No vertexBuffer.
// No indexBuffer.
// Success - "normal" usage.
// baseVertex too small / large.
// startIndex too small / large.
// primitiveCount too small / large.
// startIndex + primitiveCount too large.
// No vertex shader or pixel shader.
// No vertexBuffers.
// No indexBuffer.
// Success - "normal" usage.
// primitiveCount too small / large.
// Create vertex and index buffer for a quad.
// Create vertex buffer with instance data.
// There is a minor difference in the rasterization between XNA and DirectX. 
// No vertex shader or pixel shader.
// Success - "normal" usage.
// Null vertexData.
// Empty vertexData.
// vertexOffset too small / large.
// primitiveCount too small / large.
// vertexOffset + primitiveCount too large.
// Null vertexDeclaration.
// No vertex shader or pixel shader.
// Success - "normal" usage.
// Failure cases.
// Null vertexData.
// Empty vertexData.
// vertexOffset too small / large.
// numVertices too small / large.
// vertexOffset + numVertices too large.
// Null indexData.
// Empty indexData.
// indexOffset too small / large.
// primitiveCount too small / large.
// indexOffset + primitiveCount too large.
// Null vertexDeclaration.
// Smaller vertex stride in VertexDeclaration than in actual vertices.
// XNA is inconsistent; in DrawUserIndexedPrimitives, it allows vertexStride to be less than the actual size of the data,
// but in VertexBuffer.SetData, XNA requires vertexStride to greater than or equal to the actual size of the data.
// Since we use a DynamicVertexBuffer to implement DrawUserIndexedPrimitives, we use the same validation in both places.
// The same applies to DrawUserPrimitives.
// TODO: The availability of vertex textures should depend on GraphicsProfile.
// Implements an extremely simple terrain that reads from a heightmap in the vertex shader.
// This should work else it means we had
// some bad state to start this test!
// You can't call present with a RT set.
// Set the default RT and present works again.
// Cleanup.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\GraphicsDeviceTestFixtureBase.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// We enable the half-pixel offset for XNA compatibility
// some visual tests require a HiDef profile
/// <summary>
/// Simulate a game loop.
/// </summary>
/// <param name="action">The method to execute in the loop, gets the frame number passed to it.</param>
/// <param name="stopCondition">If this is true the loop will end, gets the frame number passed to it.</param>
/// <param name="frameTime">Time in ms to sleep after a frame.</param>
// release the rendertarget so GetData does not fail
// submit the current frame if one is prepared, but none are submitted yet
// no reference frame is available, so just write the image and track the failure
// write results to console
// wait for the writing thread so it doesn't get terminated early
// now do the actual assertions
// Ignore alpha.  If alpha diffs are
// needed, a special strategy will have
// to be devised, since XOR'ing two
// opaque pixels will cause a totally
// transparent pixel and hide any other
// difference.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\IndexBufferTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// collect uninitialized IndexBuffer
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\MiscellaneousTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\ModelTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// model exported from default blender project.
// cube embedded in default blender project.
// model is generated by Blender so by default inside is already named cube.
// let's extract them by name to incrise code coverage in ModelMeshCollection.
// model contains a bit more that only the cube, so let extract the cube
// to set transformation matrix. It is necessary to make the cube visible.
// let's make the model colored in red and lighted
// simple model used in test
// Tests below are valid for Monogame only because of manual model creation.
// simple empty collections to make code more readable.
// testing constructor's defined exceptions.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\OcclusionQueryTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// White rectangle at depth 0.
// Make query with red rectangle, 50% occluded.
// Same results as last frame.
// Reuse query a second time, 10% occlusion.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\RasterizerStateTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Can mutate before binding.
// Can't mutate after binding.
// Even after changing to different RasterizerState, you still can't mutate a previously-bound object.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\RenderTarget2DTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// collect uninitialized renderTarget
// Please note:
// The reference image was created with the MonoGame/Windows test.
// Mipmaps created by XNA and MonoGame are different.
// Mipmaps created by DirectX 11 and OpenGL can also be different - at least for 
// NPOT textures.
// Remember original (frame capture) render target.
// Enable mipmaps.
// Render sprites with random positions into the offscreen render target.
// Display all mip levels.
// unsupported renderTarget formats
// create some arbitrary data here
// verify that the gotten data is the same as the data we attempt to set
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\RenderTargetCubeTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// collect uninitialized renderTarget
// unsupported renderTarget formats
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\SamplerStateTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Can mutate before binding.
// Can't mutate after binding.
// Even after changing to different SamplerState, you still can't mutate a previously-bound object.
// Texture contains a horizontal gradient [0..1].
// In the shader, we compare samples from this texture to a hardcoded "0.5" value, 
// and run the test once for each comparison function.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\ScissorRectangleTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\ShaderTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO this does not render for some reason, we need to fix this
// A background texture to test that the effect doesn't
// mess up other textures
// The texture to apply the effect to
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\SpriteBatchTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// collect uninitialized spriteBatch
// Note that [Range(0, Matrices.Length -1)] is in use here,
// rather then [TestCaseSource("Matrices")].  Passing the matrix
// in directly results in an enormous test name (and captured
// image filename).
// Disabled on XNA because the sorting algorithm is probably different
// FIXME: This scissoring code is not valid in XNA. It
//        complains about RasterizerState being
//        immutable after it's bound to a
//        GraphicsDevice.  MonoGame probably should to,
//        rather than allowing mutation.
// Now let's try some scissoring
//_spriteBatch.Begin ();
//_spriteBatch.GraphicsDevice.ScissorRectangle = new Rectangle (50, 40, (int) _clippingSize, (int) _clippingSize);
//_spriteBatch.GraphicsDevice.RasterizerState.ScissorTestEnable = true;
//_spriteBatch.Draw (_texture, new Rectangle (50, 40, 320, 40), Color.White);
//_spriteBatch.DrawString (_font, "Scissor Clipping Test", new Vector2 (50, 40), Color.Red);
//_spriteBatch.End ();
//_spriteBatch.GraphicsDevice.RasterizerState.ScissorTestEnable = false;
// Row 0, column 0: Deferred, no depth test.
// Row 0, column 1: Deferred, with depth test.
// Row 1, column 0: BackToFront, no depth test.
// Row 1, column 1: BackToFront, with depth test.
// OpenGL produces a slightly different result.
// I think this is due to differences in how downsampling is done by default
// (it makes a big difference here because the textures are so small).
// There are possibly also some differences because of how rasterization is handled.
// Test SpriteEffect
//Left
//middle
//Right
// Test viewport change
// Test viewport/effect BasicEffect (Vertex & Pixel shader)
// MG
// Test BasicEffect (Vertex & Pixel shader)
// re-apply projection when viewport dimensions change
// TODO: test custom Effect with no Vertex shader
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\SpriteFontTest.cs
/*
// LSB=2, W=17, RSB=2
// LSB=0, W=10, RSB=-1
// LSB=-3, W=24, RSB=1
// LSB=0, W=1, RSB=11
// LSB=3, W=15, RSB=-6
// LSB=-1, W=14, RSB=-1
// LSB=-2, W=15, RSB=0
// LSB=0, W=20, RSB=0
// LSB=1, W=15, RSB=0
// Row 0: String test.
// Row 1: StringBuilder test.
// Row 0: String test.
// Row 1: StringBuilder test.
// Row 0: String test.
// Row 1: StringBuilder test.
// Row 0: String test.
// Row 1: StringBuilder test.
// Row 0, column 0: Deferred, no depth test.
// Row 0, column 1: Deferred, with depth test.
// Row 1, column 0: BackToFront, no depth test.
// Row 1, column 1: BackToFront, with depth test.
// Row 2, column 0: Deferred, no depth test, StringBuilder.
// Row 2, column 1: Deferred, with depth test, StringBuilder.
// Row 3, column 0: BackToFront, no depth test, StringBuilder.
// Row 3, column 1: BackToFront, with depth test, StringBuilder.
// Row 0: String test.
// Row 1: StringBuilder test.
// DataFont has a non-zero Spacing property.
// Row 0: String test.
// Row 1: StringBuilder test.            
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\Texture2DNonVisualTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//The dds file test case can't be checked with System.Drawing because it does not understand this format
// not supported
// XNA misses this check and throws a NullReferenceException
// XNA will not try to premultiply your image on
// load... this test verifies that this doesn't occur.
// Check whether texture can be loaded if a stream being at its end
// XNA will make any pixel with an alpha value
// of 0 into black throwing out any color data.
// format not supported
// MonoGame allows any kind of type that is not larger than one element while XNA only allows byte
// this is too large, DXT1 blocks are 64 bits while Vector4 is 128 bits
// This is testing that DXT compressed mip levels that 
// are not a multiple of 4 are properly loaded.
// Get the full mip level.
// Decompress it to validate it.
// Should be a red opaque texture.
// DXT1
// DXT5
// don't round if the unrounded rectangle would be outside the texture area
// this does work
// would be rounded, but the rectangle is outside the texture area so it wil throw before rounding
// collect uninitialized Texture
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\Texture2DTest.cs
/*
// Create gradient texture. This will highlight the difference
// between sRGB and non-sRGB textures.
// Approximation of sRGB - it's not actually as simple as this,
// but it will suffice for these tests.
// Create texture array.
// Bind each slice of texture array as render target, and render (different) solid color to each slice.
// Unbind texture array.
// Now render into backbuffer, using texture array as a shader resource.
// Vertex buffer is not actually used, but currently we need to set a
// vertex buffer before calling DrawPrimitives.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\Texture3DNonVisualTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// collect uninitialized Texture
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\Texture3DTest.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\TextureCubeTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// MonoGame allows any kind of type that is not larger than one element while XNA only allows byte
// this is too large, DXT1 blocks are 64 bits while Vector4 is 128 bits
// DXT1
// TODO DXT5
//[TestCase(16, "SampleCube64DXT5Mips", 0)]
//[TestCase(16, "SampleCube64DXT5Mips", 1)]
//[TestCase("SampleCube64DXT5Mips", 16)]
// don't round if the unrounded rectangle would be outside the texture area
// this does work
//[TestCase("SampleCube64DXT5Mips", 16)]
// would be rounded, but the rectangle is outside the texture area so it wil throw before rounding
// collect uninitialized Texture
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\VertexBufferTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//[TestCase(true)]
//[TestCase(true)]
//[TestCase(true)]
//[TestCase(true)]
//[TestCase(true)]
//[TestCase(true)]
// We throw when the vertex stride is too large
// first one should not be overwritten
// first one should not be overwritten
//[TestCase(true)]
//[TestCase(true)]
//[TestCase(true)]
//[TestCase(true)]
//[TestCase(true)]
// collect uninitialized vertexBuffer
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Graphics\ViewportTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Input\GamePadTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// All
// None
// Random
// all buttons except for thumbstick position buttons and triggers (they're not controlled via buttons here)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Input\JoystickTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Input\KeyboardTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Input\MouseTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Visual\MiscellaneousTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: this sometimes crashes when trying to clean up a shader.
// it's notable that the cleanup is called from another thread and
// run in Threading.Run at the start of a run loop when the crash happens.
// I can consistently reproduce this by running the ShaderTests and this in
// succession using ReSharpers test runner
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Visual\VisualTestFixtureBase.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Provides a quick and easy way to run a single frame visual
/// test with the default comparison and diff-writing options.
/// Tests that need more control over the run-diff-assert
/// process should manually call:
/// 
/// <code>
/// Game.Components.Add ($FrameCompareComponent$);
/// Game.Run ();
/// WriteFrameDiffs ();
/// AssertFrameComparisonPassed ();
/// </code>
/// </summary>
/// <param name="similarity">The similarity to the reference
/// image required for a frame to be considered passing.</param>
/// <param name="writeDiffs">A value indicating whether visual
/// diffs should be written for this test.</param>
/// <summary>
/// Provides a quick and easy way to run a multi-frame visual
/// test using the default comparison and diff-writing options.
/// Tests that need more control over the run-diff-assert
/// process should manually call:
/// 
/// <code>
/// Game.Components.Add ($FrameCompareComponent$);
/// Game.Run ();
/// WriteFrameDiffs ();
/// AssertFrameComparisonPassed ();
/// </code>
/// </summary>
/// <param name="captureCount">The total number of frames to
/// capture.</param>
/// <param name="captureStride">How often to capture.  A value
/// of 1 captures every frame, 2 captures every other, etc.
/// </param>
/// <param name="similarity">The similarity to the reference
/// image required for a frame to be considered passing.</param>
/// <param name="writeDiffs">A value indicating whether visual
/// diffs should be written for this test.</param>
// Ignore alpha.  If alpha diffs are
// needed, a special strategy will have
// to be devised, since XOR'ing two
// opaque pixels will cause a totally
// transparent pixel and hide any other
// difference.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\Visual\VisualTestGame.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Framework\WindowsDX\Audio\SoundEffectInstanceXAudioTest.cs
// Tests specific to SoundEffectInstance.XAudio (Windows DirectX)
// Mono source
// Mono source, scaled
// Stereo source
// Stereo source, scaled
// the remaining values should be 0
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\AppDelegate.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\Categories.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\InteractiveTestAttribute.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\Main.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\RootViewController.cs
/*
// HACK: TouchPanel should probably clear itself at the
//       end of a Game run.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\Guide\GuideTestGame.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\TestUI\Button.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\TestUI\DrawContext.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\TestUI\Label.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\TestUI\PaddingF.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\TestUI\TestUITestGame.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\TestUI\Universe.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\TestUI\UniverseComponent.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\TestUI\View.cs
/*
// TODO: Distribute the new size according to this
//       View's Origin (which doesn't exist yet).
// TODO: Calculate the available size based on
//       this View's location and Origin and
//       the Superview Frame.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\TestUI\ViewCollection.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\iOS\TextureScaleTest\Program.cs
//-----------------------------------------------------------------------------
// Program.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
// Fun begins..
//MediaLibrary lib = new MediaLibrary();
//object result = lib.Playlists;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\BlockingRun\BlockingRunGame.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\BlockingRun\Main.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\GamePadTest\Game1.cs
// TODO: Add your initialization logic here
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: Unload any non ContentManager content here
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\GamePadTest\Program.cs
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\MouseGetStateAndIsMouseVisibleTester\MouseGetStateAndIsMouseVisibleTester\Enums.cs
//MsState
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\MouseGetStateAndIsMouseVisibleTester\MouseGetStateAndIsMouseVisibleTester\Game1.cs
// Uncomment the line below to test full screen on startup.
//graphics.IsFullScreen = false;
//bFullScreen = true;
// Subscribe to the game window's ClientSizeChanged event.
// Make changes to handle the new window size.
//Console.WriteLine("Window size changed " + Window.ClientBounds);
// TODO: Add your initialization logic here
// Create a new SpriteBatch, which can be used to draw textures.
// TODO: Unload any non ContentManager content here
//if
//else
//Toggle
//GetBackBufferWidth
//GetBackBufferWidth
//if
//for
//CenterWindow
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\MouseGetStateAndIsMouseVisibleTester\MouseGetStateAndIsMouseVisibleTester\InputManager.cs
//InputManger
//if
//if
//if
//if
//if
//if
//InputHandler
//if
//if
//if
//if
//if
//if
//if
//if
//else
//if
//if
//HandleMouseLeftButton
//GetMouseX
//GetMouseY
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\MouseGetStateAndIsMouseVisibleTester\MouseGetStateAndIsMouseVisibleTester\Object.cs
//Extract the frames from the texture
// Get the current spritebatch
//Frames
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\MouseGetStateAndIsMouseVisibleTester\MouseGetStateAndIsMouseVisibleTester\Program.cs
/// <summary>
/// The main entry point for the application.
/// </summary>
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\MouseGetStateAndIsMouseVisibleTester\MouseGetStateAndIsMouseVisibleTester\TextManager.cs
//TextManager
//try
//Draw
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\MouseGetStateAndIsMouseVisibleTester\MouseGetStateAndIsMouseVisibleTester\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type. Only Windows
// assemblies support COM.
// On Windows, the following GUID is for the ID of the typelib if this
// project is exposed to COM. On other platforms, it unique identifies the
// title storage container when deploying this assembly to the device.
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\PrimitivesTest\Game1.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\PrimitivesTest\Program.cs
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\SoundTest\Game1.cs
//Milliseconds. The duration of the sound is about 1.5 sec.
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
//sExplosion = Content.Load<SoundEffect>("laser1");
//sExplosion = Content.Load<SoundEffect>("FillingHoneyPot_Loop");
//update explosions
//Check for next explosion
//Check for exit
//Draw explosions
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\SoundTest\Program.cs
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\SoundTest2\SoundTest2_MacOs\Game1.cs
//Milliseconds. The duration of the sound is about 1.5 sec.
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
/*
//Check for next explosion
//Console.WriteLine (pan);
//Check for exit
//Draw explosions
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\SoundTest2\SoundTest2_MacOs\Program.cs
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\TestDataSetAndGet\Game1.cs
//-----------------------------------------------------------------------------
// Game.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
/// <summary>
/// This is the main type for your game
/// </summary>
// The images we will draw
// The color data for the images; used for per pixel collision
// The images will be drawn with this SpriteBatch
// Person 
// Blocks
// For when a collision is detected
// The sub-rectangle of the drawable area which should be visible on all TVs
// Percentage of the screen on every side is the safe area
/// <summary>
/// Allows the game to perform any initialization it needs to before starting to
/// run. This is where it can query for any required services and load any
/// non-graphic related content.  Calling base.Initialize will enumerate through
/// any components and initialize them as well.
/// </summary>
// Calculate safe bounds based on current resolution
// Start the player in the center along the bottom of the screen
/// <summary>
/// Load your graphics content.
/// </summary>
// Load textures
//personTexture = Content.Load<Texture2D>("Warrior3Active");
// Extract collision data
//personTexture.SetData(characterTextureData);
// Create a sprite batch to draw those textures
/// <summary>
/// Allows the game to run logic such as updating the world,
/// checking for collisions, gathering input and playing audio.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// Get input
// Allows the game to exit
// Move the player left and right with arrow keys or d-pad
// Prevent the person from moving off of the screen
// Spawn new falling blocks
// Get the bounding rectangle of the person
// Update each block
// Animate this block falling
// Get the bounding rectangle of this block
// Check collision with person
// Remove this block if it have fallen off the screen
// When removing a block, the next block will have the same index
// as the current block. Decrement i to prevent skipping a block.
/// <summary>
/// This is called when the game should draw itself.
/// </summary>
/// <param name="gameTime">Provides a snapshot of timing values.</param>
// Change the background to red when the person was hit by a block
// Draw person
// Draw blocks
/// <summary>
/// Determines if there is overlap of the non-transparent pixels
/// between two sprites.
/// </summary>
/// <param name="rectangleA">Bounding rectangle of the first sprite</param>
/// <param name="dataA">Pixel data of the first sprite</param>
/// <param name="rectangleB">Bouding rectangle of the second sprite</param>
/// <param name="dataB">Pixel data of the second sprite</param>
/// <returns>True if non-transparent pixels overlap; false otherwise</returns>
// Find the bounds of the rectangle intersection
// Check every point within the intersection bounds
// Get the color of both pixels at this point
// If both pixels are not completely transparent,
// then an intersection has been found
// No intersection found
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\TestDataSetAndGet\Program.cs
//-----------------------------------------------------------------------------
// Program.cs
//
// Microsoft XNA Community Game Platform
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\TextureScaleColorTest\Game1.cs
/// <summary>
/// LoadContent will be called once per game and is the place to load
/// all of your content.
/// </summary>
//			BlankTexture = new Texture2D(GraphicsDevice,1,1);
//			BlankTexture.SetData(new Color[] {Color.White});
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\MacOS\TextureScaleColorTest\Program.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Interactive\Windows\Issue1355\Issue1355\Game.cs
/// <summary>
/// This is the main type for your game
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Runner\Constants.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Runner\Extensions.cs
// TODO: Add support for a custom attribute to override
//       the calculated name.
//var method = self.GetMethod ();
// TODO: Add support for a custom attribute to override
//       the calculated name.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Runner\FrameInfo.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Runner\FramePixelData.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Runner\PixelArgb.cs
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Runner\Program.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Runner\Utility.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Runner\Desktop\FramePixelData.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Runner\iOS\AppDelegate.cs
// FIXME: Figure out how to pass and receive arguments
//        in MonoTouch applications.  The Main method
//        has an empty array and NSProcessInfo has
//        values specific to Mono launching/debugging.
//+:6599/");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Runner\iOS\FramePixelData.cs
// HACK: The path should have been resolved correctly
//       before now!
//var documentsDir = Environment.GetFolderPath (Environment.SpecialFolder.Personal);
//path = Path.Combine(documentsDir, path);
//var documentsDir = Environment.GetFolderPath (Environment.SpecialFolder.Personal);
//var fullPath = Path.Combine (documentsDir, path);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Runner\iOS\Main.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tests\Utilities\ActionDaemon.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NamespaceDoc.cs
/// <summary>
/// Lidgren Network Library
/// </summary>
// <include file='_Namespace.xml' path='Documentation/*' />
/*' />
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetBigInteger.cs
/// <summary>
/// Big integer class based on BouncyCastle (http://www.bouncycastle.org) big integer code
/// </summary>
// -1 means -ve; +1 means +ve; 0 means 0;
// array of ints with [0] being the most significant
// cache BitCount() value
// cache calcBitLength() value
// -m^(-1) mod b, b = 2^32 (see Montgomery mult.)
//					sign = 0;
// strip leading 0 words
// Is there anyway to restrict to binary digits?
// This style seems to handle spaces and minus sign already (our processing redundant?)
// TODO Should this be HexNumber?
// strip leading zeros from the string str
// zero value - we're done
//////
// could we work out the max number of ints required to store
// str.Length digits in the given base, then allocate that
// storage in one hit?, then Generate the magnitude in one hit too?
//////
// NB: Can't reach here since we are parsing one char at a time
// Note: This is the previous (slower) algorithm
//			while (index < value.Length)
//            {
//				char c = value[index];
//				string s = c.ToString();
//				int i = Int32.Parse(s, style);
//
//                b = b.Multiply(r).Add(ValueOf(i));
//                index++;
//            }
// strip leading sign bytes
// strip leading zero bytes and return magnitude bytes
// strip leading zeros
//sign = 0;
// copy bytes
// return a = a + b - b preserved.
// Conservatively avoid over-allocation when no overflow possible
// bit length for everything after the first int
// and determine bitlength of first int
// Check for negative powers of two
//
// BitLen(value) is the number of bits in value.
//
// Binary search - decision tree (5 tests, rarely 6)
// unsigned comparison on two arrays - note the arrays may
// start with leading zeros.
// lengths of magnitudes the same, test the magnitude values
// return z = x / y - done in place (z value preserved, x contains the remainder)
//					iCount = ShiftLeft(One.magnitude, shift);
//xBitLength = calcBitLength(xStart, x);
// NB: The case where c[cStart] is 1-bit is harmless
//cStart = c.Length - ((cBitLength + 31) / 32);
// val is power of two
// val is power of two
//x = m.Subtract(x);
// Montgomery exponentiation is only possible if the modulus is odd,
// but AFAIK, this is always the case for crypto algo's
// tmp = this * R mod m
//zAccum = new int[m.magnitude.Length * 2];
//
// in normal practice we'll never see ..
//
//zAccum = new int[m.magnitude.Length * 2];
//
// from LSW to MSW
//
//
// first time in initialise y
//
// Montgomery square algo doesn't exist, and a normal
// square followed by a Montgomery reduction proved to
// be almost as heavy as a Montgomery mulitply.
// Return y * R^(-1) mod m by doing y * 1 * R^(-1) mod m
// return w with w = x * x - w is assumed to have enough space.
// Note: this method allows w to be only (2 * x.Length - 1) words if result will fit
//			if (w.Length != 2 * x.Length)
//				throw new ArgumentException("no I don't think so...");
// multiply by 2!
// multiply by 2!
// return x with x = y * z - x is assumed to have enough space.
// already calculated
// not for even numbers
// mQuote = -m^(-1) mod b
// 1. a = 0 (Notation: a = (a_{n} a_{n-1} ... a_{0})_{b} )
// 2. for i from 0 to (n - 1) do the following:
// 2.1 u = ((a[0] + (x[i] * y[0]) * mQuote) mod b
// 2.2 a = (a + x_i * y + u * m) / b
// division by b
// OJO!!!!!
// 3. if x >= m the x = x - m
// put the result in x
// val is power of two
// this is power of two
// return x = x % y - done in place (y value preserved)
//xBitLength = calcBitLength(xStart, x);
// NB: The case where c[cStart] is 1-bit is harmless
//cStart = c.Length - ((cBitLength + 31) / 32);
// For small values, use fast remainder method
// n is power of two
// do a left shift - this returns a new array.
// do a right shift - this does it in place.
// do a right shift by one - this does it in place.
//			int[] res = (int[]) magnitude.Clone();
//
//			res = ShiftRightInPlace(0, res, n);
//
//			return new BigInteger(sign, res, true);
// returns x = x - y - we assume x is >= y
//				borrow = (m < 0) ? -1 : 0;
// sign < 0
// Never wraps because magnitude[0] != 0
// NB: Can only happen to internally managed instances
// This is algorithm 1a from chapter 4.4 in Seminumerical Algorithms, slow but it works
// see how to interact with different bases
// Then pop the stack
// Strip leading zeros. (We know this number is not all zeroes though)
// Check for a power of two
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetBitVector.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Fixed size vector of booleans
/// </summary>
/// <summary>
/// Gets the number of bits/booleans stored in this vector
/// </summary>
/// <summary>
/// NetBitVector constructor
/// </summary>
/// <summary>
/// Returns true if all bits/booleans are set to zero/false
/// </summary>
/// <summary>
/// Returns the number of bits/booleans set to one/true
/// </summary>
/// <returns></returns>
/// <summary>
/// Shift all bits one step down, cycling the first bit to the top
/// </summary>
// special handling of last int
/// <summary>
/// Gets the first (lowest) index set to true
/// </summary>
/// <summary>
/// Gets the bit/bool at the specified index
/// </summary>
/// <summary>
/// Sets or clears the bit/bool at the specified index
/// </summary>
/// <summary>
/// Gets the bit/bool at the specified index
/// </summary>
/// <summary>
/// Sets all bits/booleans to zero/false
/// </summary>
/// <summary>
/// Returns a string that represents this object
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetBitWriter.cs
//#define UNSAFE
//#define BIGENDIAN
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Helper class for NetBuffer to write/read bits
/// </summary>
/// <summary>
/// Read 1-8 bits from a buffer into a byte
/// </summary>
// (readBitOffset % 8);
// mask away unused bits lower than (right of) relevant bits in first byte
// we don't need to read from the second byte, but we DO need
// to mask away unused bits higher than (left of) relevant bits
// mask away unused bits higher than (left of) relevant bits in second byte
/// <summary>
/// Read several bytes from a buffer
/// </summary>
// (readBitOffset % 8);
// mask away unused bits lower than (right of) relevant bits in byte
// mask away unused bits higher than (left of) relevant bits in second byte
/// <summary>
/// Write 0-8 bits of data to buffer
/// </summary>
// Mask out all the bits we dont want
// mod 8
// Fast path, everything fits in the first byte
// Mask out lower and upper bits
// Insert new bits
// Mask out upper bits
// Write the lower bits to the upper bits in the first byte
// Mask out lower bits
// Write the upper bits to the lower bits of the second byte
/// <summary>
/// Write several whole bytes
/// </summary>
// write last part of this byte
// clear before writing
// write first half
// write first part of next byte
// clear before writing
// write second half
/// <summary>
/// Reads an unsigned 16 bit integer
/// </summary>
// reorder bytes
/// <summary>
/// Reads the specified number of bits into an UInt32
/// </summary>
// reorder bytes
//[CLSCompliant(false)]
//public static ulong ReadUInt64(byte[] fromBuffer, int numberOfBits, int readBitOffset)
/// <summary>
/// Writes an unsigned 16 bit integer
/// </summary>
// reorder bytes
/// <summary>
/// Writes the specified number of bits into a byte array
/// </summary>
// reorder bytes
/// <summary>
/// Writes the specified number of bits into a byte array
/// </summary>
//
// Variable size
//
/// <summary>
/// Write Base128 encoded variable sized unsigned integer
/// </summary>
/// <returns>number of bytes written</returns>
/// <summary>
/// Reads a UInt32 written using WriteUnsignedVarInt(); will increment offset!
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetBuffer.cs
/// <summary>
/// Number of bytes to overallocate for each message to avoid resizing
/// </summary>
/// <summary>
/// Gets or sets the internal data buffer
/// </summary>
/// <summary>
/// Gets or sets the length of the used portion of the buffer in bytes
/// </summary>
/// <summary>
/// Gets or sets the length of the used portion of the buffer in bits
/// </summary>
/// <summary>
/// Gets or sets the read position in the buffer, in bits (not bytes)
/// </summary>
/// <summary>
/// Gets the position in the buffer in bytes; note that the bits of the first returned byte may already have been read - check the Position property to make sure.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetBuffer.Peek.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Gets the internal data buffer
/// </summary>
//
// 1 bit
//
/// <summary>
/// Reads a 1-bit Boolean without advancing the read pointer
/// </summary>
//
// 8 bit 
//
/// <summary>
/// Reads a Byte without advancing the read pointer
/// </summary>
/// <summary>
/// Reads an SByte without advancing the read pointer
/// </summary>
/// <summary>
/// Reads the specified number of bits into a Byte without advancing the read pointer
/// </summary>
/// <summary>
/// Reads the specified number of bytes without advancing the read pointer
/// </summary>
/// <summary>
/// Reads the specified number of bytes without advancing the read pointer
/// </summary>
//
// 16 bit
//
/// <summary>
/// Reads an Int16 without advancing the read pointer
/// </summary>
/// <summary>
/// Reads a UInt16 without advancing the read pointer
/// </summary>
//
// 32 bit
//
/// <summary>
/// Reads an Int32 without advancing the read pointer
/// </summary>
/// <summary>
/// Reads the specified number of bits into an Int32 without advancing the read pointer
/// </summary>
// positive
// negative
/// <summary>
/// Reads a UInt32 without advancing the read pointer
/// </summary>
/// <summary>
/// Reads the specified number of bits into a UInt32 without advancing the read pointer
/// </summary>
//NetException.Assert(m_bitLength - m_readBitPtr >= numberOfBits, "tried to read past buffer size");
//
// 64 bit
//
/// <summary>
/// Reads a UInt64 without advancing the read pointer
/// </summary>
/// <summary>
/// Reads an Int64 without advancing the read pointer
/// </summary>
/// <summary>
/// Reads the specified number of bits into an UInt64 without advancing the read pointer
/// </summary>
/// <summary>
/// Reads the specified number of bits into an Int64 without advancing the read pointer
/// </summary>
//
// Floating point
//
/// <summary>
/// Reads a 32-bit Single without advancing the read pointer
/// </summary>
/// <summary>
/// Reads a 32-bit Single without advancing the read pointer
/// </summary>
// read directly
/// <summary>
/// Reads a 64-bit Double without advancing the read pointer
/// </summary>
// read directly
// read directly
/// <summary>
/// Reads a string without advancing the read pointer
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetBuffer.Read.cs
/// <summary>
/// Base class for NetIncomingMessage and NetOutgoingMessage
/// </summary>
/// <summary>
/// Reads a boolean value (stored as a single bit) written using Write(bool)
/// </summary>
/// <summary>
/// Reads a byte
/// </summary>
/// <summary>
/// Reads a byte and returns true or false for success
/// </summary>
/// <summary>
/// Reads a signed byte
/// </summary>
/// <summary>
/// Reads 1 to 8 bits into a byte
/// </summary>
/// <summary>
/// Reads the specified number of bytes
/// </summary>
/// <summary>
/// Reads the specified number of bytes and returns true for success
/// </summary>
/// <summary>
/// Reads the specified number of bytes into a preallocated array
/// </summary>
/// <param name="into">The destination array</param>
/// <param name="offset">The offset where to start writing in the destination array</param>
/// <param name="numberOfBytes">The number of bytes to read</param>
/// <summary>
/// Reads the specified number of bits into a preallocated array
/// </summary>
/// <param name="into">The destination array</param>
/// <param name="offset">The offset where to start writing in the destination array</param>
/// <param name="numberOfBits">The number of bits to read</param>
/// <summary>
/// Reads a 16 bit signed integer written using Write(Int16)
/// </summary>
/// <summary>
/// Reads a 16 bit unsigned integer written using Write(UInt16)
/// </summary>
/// <summary>
/// Reads a 32 bit signed integer written using Write(Int32)
/// </summary>
/// <summary>
/// Reads a 32 bit signed integer written using Write(Int32)
/// </summary>
/// <summary>
/// Reads a signed integer stored in 1 to 32 bits, written using Write(Int32, Int32)
/// </summary>
// positive
// negative
/// <summary>
/// Reads an 32 bit unsigned integer written using Write(UInt32)
/// </summary>
/// <summary>
/// Reads an 32 bit unsigned integer written using Write(UInt32) and returns true for success
/// </summary>
/// <summary>
/// Reads an unsigned integer stored in 1 to 32 bits, written using Write(UInt32, Int32)
/// </summary>
//NetException.Assert(m_bitLength - m_readBitPtr >= numberOfBits, "tried to read past buffer size");
/// <summary>
/// Reads a 64 bit unsigned integer written using Write(UInt64)
/// </summary>
/// <summary>
/// Reads a 64 bit signed integer written using Write(Int64)
/// </summary>
/// <summary>
/// Reads an unsigned integer stored in 1 to 64 bits, written using Write(UInt64, Int32)
/// </summary>
/// <summary>
/// Reads a signed integer stored in 1 to 64 bits, written using Write(Int64, Int32)
/// </summary>
/// <summary>
/// Reads a 32 bit floating point value written using Write(Single)
/// </summary>
/// <summary>
/// Reads a 32 bit floating point value written using Write(Single)
/// </summary>
// read directly
/// <summary>
/// Reads a 32 bit floating point value written using Write(Single)
/// </summary>
// read directly
/// <summary>
/// Reads a 64 bit floating point value written using Write(Double)
/// </summary>
// read directly
// read directly
//
// Variable bit count
//
/// <summary>
/// Reads a variable sized UInt32 written using WriteVariableUInt32()
/// </summary>
// ouch; failed to find enough bytes; malformed variable length number?
/// <summary>
/// Reads a variable sized UInt32 written using WriteVariableUInt32() and returns true for success
/// </summary>
/// <summary>
/// Reads a variable sized Int32 written using WriteVariableInt32()
/// </summary>
// decode zigzag
/// <summary>
/// Reads a variable sized Int64 written using WriteVariableInt64()
/// </summary>
// decode zigzag
/// <summary>
/// Reads a variable sized UInt32 written using WriteVariableInt64()
/// </summary>
//if (num2 == 0x23)
//	throw new FormatException("Bad 7-bit encoded integer");
// ouch; failed to find enough bytes; malformed variable length number?
/// <summary>
/// Reads a 32 bit floating point value written using WriteSignedSingle()
/// </summary>
/// <param name="numberOfBits">The number of bits used when writing the value</param>
/// <returns>A floating point value larger or equal to -1 and smaller or equal to 1</returns>
/// <summary>
/// Reads a 32 bit floating point value written using WriteUnitSingle()
/// </summary>
/// <param name="numberOfBits">The number of bits used when writing the value</param>
/// <returns>A floating point value larger or equal to 0 and smaller or equal to 1</returns>
/// <summary>
/// Reads a 32 bit floating point value written using WriteRangedSingle()
/// </summary>
/// <param name="min">The minimum value used when writing the value</param>
/// <param name="max">The maximum value used when writing the value</param>
/// <param name="numberOfBits">The number of bits used when writing the value</param>
/// <returns>A floating point value larger or equal to MIN and smaller or equal to MAX</returns>
/// <summary>
/// Reads a 32 bit integer value written using WriteRangedInteger()
/// </summary>
/// <param name="min">The minimum value used when writing the value</param>
/// <param name="max">The maximum value used when writing the value</param>
/// <returns>A signed integer value larger or equal to MIN and smaller or equal to MAX</returns>
/// <summary>
/// Reads a string written using Write(string)
/// </summary>
// not enough data
// unfortunate; but we need to protect against DDOS
// read directly
/// <summary>
/// Reads a string written using Write(string) and returns true for success
/// </summary>
// read directly
/// <summary>
/// Reads a value, in local time comparable to NetTime.Now, written using WriteTime() for the connection supplied
/// </summary>
// lets bypass NetConnection.GetLocalTime for speed
/// <summary>
/// Reads a stored IPv4 endpoint description
/// </summary>
/// <summary>
/// Pads data with enough bits to reach a full byte. Decreases cpu usage for subsequent byte writes.
/// </summary>
/// <summary>
/// Pads data with enough bits to reach a full byte. Decreases cpu usage for subsequent byte writes.
/// </summary>
/// <summary>
/// Pads data with the specified number of bits.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetBuffer.Read.Reflection.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Reads all public and private declared instance fields of the object in alphabetical order using reflection
/// </summary>
/// <summary>
/// Reads all fields with the specified binding of the object in alphabetical order using reflection
/// </summary>
// find read method
// read value
// set the value
/// <summary>
/// Reads all public and private declared instance fields of the object in alphabetical order using reflection
/// </summary>
/// <summary>
/// Reads all fields with the specified binding of the object in alphabetical order using reflection
/// </summary>
// find read method
// read value
// set the value
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetBuffer.Write.cs
//#define UNSAFE
//#define BIGENDIAN
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Utility struct for writing Singles
/// </summary>
/// <summary>
/// Value as a 32 bit float
/// </summary>
/// <summary>
/// Value as an unsigned 32 bit integer
/// </summary>
/// <summary>
/// Ensures the buffer can hold this number of bits
/// </summary>
/// <summary>
/// Ensures the buffer can hold this number of bits
/// </summary>
/// <summary>
/// Writes a boolean value using 1 bit
/// </summary>
/// <summary>
/// Write a byte
/// </summary>
/// <summary>
/// Writes a signed byte
/// </summary>
/// <summary>
/// Writes 1 to 8 bits of a byte
/// </summary>
/// <summary>
/// Writes all bytes in an array
/// </summary>
/// <summary>
/// Writes the specified number of bytes from an array
/// </summary>
/// <summary>
/// Writes an unsigned 16 bit integer
/// </summary>
/// <param name="source"></param>
/// <summary>
/// Writes a 16 bit unsigned integer at a given offset in the buffer
/// </summary>
/// <summary>
/// Writes an unsigned integer using 1 to 16 bits
/// </summary>
/// <summary>
/// Writes a signed 16 bit integer
/// </summary>
/// <summary>
/// Writes a 16 bit signed integer at a given offset in the buffer
/// </summary>
/// <summary>
/// Writes a 32 bit signed integer
/// </summary>
// can write fast?
/// <summary>
/// Writes a 32 bit signed integer
/// </summary>
/// <summary>
/// Writes a 32 bit signed integer at a given offset in the buffer
/// </summary>
/// <summary>
/// Writes a 32 bit unsigned integer
/// </summary>
// can write fast?
/// <summary>
/// Writes a 32 bit unsigned integer
/// </summary>
/// <summary>
/// Writes a 32 bit unsigned integer at a given offset in the buffer
/// </summary>
/// <summary>
/// Writes a 32 bit signed integer
/// </summary>
/// <summary>
/// Writes a signed integer using 1 to 32 bits
/// </summary>
// make first bit sign
/// <summary>
/// Writes a 64 bit unsigned integer
/// </summary>
/// <summary>
/// Writes a 64 bit unsigned integer at a given offset in the buffer
/// </summary>
/// <summary>
/// Writes an unsigned integer using 1 to 64 bits
/// </summary>
/// <summary>
/// Writes a 64 bit signed integer
/// </summary>
/// <summary>
/// Writes a signed integer using 1 to 64 bits
/// </summary>
//
// Floating point
//
/// <summary>
/// Writes a 32 bit floating point value
/// </summary>
/// <summary>
/// Writes a 32 bit floating point value
/// </summary>
// Use union to avoid BitConverter.GetBytes() which allocates memory on the heap
// must initialize every member of the union to avoid warning
// swap byte order
/// <summary>
/// Writes a 64 bit floating point value
/// </summary>
/// <summary>
/// Writes a 64 bit floating point value
/// </summary>
// 0 1 2 3   4 5 6 7
// swap byte order
//
// Variable bits
//
/// <summary>
/// Write Base128 encoded variable sized unsigned integer of up to 32 bits
/// </summary>
/// <returns>number of bytes written</returns>
/// <summary>
/// Write Base128 encoded variable sized signed integer of up to 32 bits
/// </summary>
/// <returns>number of bytes written</returns>
/// <summary>
/// Write Base128 encoded variable sized signed integer of up to 64 bits
/// </summary>
/// <returns>number of bytes written</returns>
/// <summary>
/// Write Base128 encoded variable sized unsigned integer of up to 64 bits
/// </summary>
/// <returns>number of bytes written</returns>
/// <summary>
/// Compress (lossy) a float in the range -1..1 using numberOfBits bits
/// </summary>
/// <summary>
/// Compress (lossy) a float in the range 0..1 using numberOfBits bits
/// </summary>
/// <summary>
/// Compress a float within a specified range using a certain number of bits
/// </summary>
/// <summary>
/// Writes an integer with the least amount of bits need for the specified range
/// Returns number of bits written
/// </summary>
/// <summary>
/// Write a string
/// </summary>
/// <summary>
/// Writes an endpoint description
/// </summary>
/// <summary>
/// Writes the current local time to a message; readable (and convertable to local time) by the remote host using ReadTime()
/// </summary>
/// <summary>
/// Writes a local timestamp to a message; readable (and convertable to local time) by the remote host using ReadTime()
/// </summary>
/// <summary>
/// Pads data with enough bits to reach a full byte. Decreases cpu usage for subsequent byte writes.
/// </summary>
/// <summary>
/// Pads data with the specified number of bits.
/// </summary>
/// <summary>
/// Append all the bits of message to this message
/// </summary>
// did we write excessive bits?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetBuffer.Write.Reflection.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Writes all public and private declared instance fields of the object in alphabetical order using reflection
/// </summary>
/// <summary>
/// Writes all fields with specified binding in alphabetical order using reflection
/// </summary>
// find the appropriate Write method
/// <summary>
/// Writes all public and private declared instance properties of the object in alphabetical order using reflection
/// </summary>
/// <summary>
/// Writes all properties with specified binding in alphabetical order using reflection
/// </summary>
// find the appropriate Write method
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetClient.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Specialized version of NetPeer used for a "client" connection. It does not accept any incoming connections and maintains a ServerConnection property
/// </summary>
/// <summary>
/// Gets the connection to the server, if any
/// </summary>
// preempted!
/// <summary>
/// Gets the connection status of the server connection (or NetConnectionStatus.Disconnected if no connection)
/// </summary>
/// <summary>
/// NetClient constructor
/// </summary>
/// <param name="config"></param>
/// <summary>
/// Connect to a remote server
/// </summary>
/// <param name="remoteEndPoint">The remote endpoint to connect to</param>
/// <param name="hailMessage">The hail message to pass</param>
/// <returns>server connection, or null if already connected</returns>
/// <summary>
/// Disconnect from server
/// </summary>
/// <param name="byeMessage">reason for disconnect</param>
/// <summary>
/// Sends message to server
/// </summary>
/// <summary>
/// Sends message to server
/// </summary>
/// <summary>
/// Returns a string that represents this object
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetConnection.cs
/// <summary>
/// Represents a connection to a remote peer
/// </summary>
// number of heartbeats to skip checking for infrequent events (ping, timeout etc)
// number of heartbeats to wait for more incoming messages before sending packet
/// <summary>
/// Gets or sets the application defined object containing data about the connection
/// </summary>
/// <summary>
/// Gets the peer which holds this connection
/// </summary>
/// <summary>
/// Gets the current status of the connection (synced to the last status message read)
/// </summary>
/// <summary>
/// Gets various statistics for this connection
/// </summary>
/// <summary>
/// Gets the remote endpoint for the connection
/// </summary>
/// <summary>
/// Gets the unique identifier of the remote NetPeer for this connection
/// </summary>
/// <summary>
/// Gets the local hail message that was sent as part of the handshake
/// </summary>
// gets the time before automatically resending an unacked message
// "default" resend is based on 100 ms roundtrip time
// 25 ms + double rtt
/// <summary>
/// Change the internal endpoint to this new one. Used when, during handshake, a switch in port is detected (due to NAT)
/// </summary>
// user or library thread
// app dont want those messages, update visible status immediately
//
// connection timed out
//
// send ping?
// handle expand mtu
// TODO: handle connection reset
//
// Note: at this point m_sendBufferWritePtr and m_sendBufferNumMessages may be non-null; resends may already be queued up
//
// coalesce a few frames
//
// send ack messages
//
// 3 bytes per actual ack
// write acks header
// no sequence number
// no sequence number
// bits
// write acks
//m_peer.LogVerbose("Sending ack for " + tuple.Item1 + "#" + tuple.Item2);
// send packet and go for another round of acks
//
// Parse incoming acks (may trigger resends)
//
//m_peer.LogVerbose("Received ack for " + acktp + "#" + seqNr);
// If we haven't sent a message on this channel there is no reason to ack it
//
// send queued messages
//
// Reverse order so reliable messages are sent first
//
// Put on wire data has been written to send buffer but not yet sent
//
// Queue an item for immediate sending on the wire
// This method is called from the ISenderChannels
//if (sz > m_currentMTU)
//	m_peer.LogWarning("Message larger than MTU! Fragmentation must have failed!");
// TODO: handle connection reset
// can fit this message together with previously written to buffer?
// previous message in buffer; send these first
// encode it into buffer regardless if it (now) fits within MTU or not
// send immediately; we're already over MTU
/// <summary>
/// Send a message to this remote connection
/// </summary>
/// <param name="msg">The message to send</param>
/// <param name="method">How to deliver the message</param>
/// <param name="sequenceChannel">Sequence channel within the delivery method</param>
// called by SendMessage() and NetPeer.SendMessage; ie. may be user thread
// TODO: do we need to make this more thread safe?
//if (retval == NetSendResult.Sent && m_peerConfiguration.m_autoFlushSendQueue == false)
//	retval = NetSendResult.Queued; // queued since we're not autoflushing
// may be on user thread
// we were pre-empted by another call to this method
// received a library message while Connected
// handshake message must have been lost
// do nothing, all's well
//ExecuteDisconnect(msg.ReadString(), false);
// netmessagetype
// need to enqueue this and handle it in the netconnection heartbeat; so be able to send resends together with normal sends
// Unusual situation where server is actually already known, but got a nat introduction - oh well, lets handle it as usual
// create receiver channel
/// <summary>
/// Zero windowSize indicates that the channel is not yet instantiated (used)
/// Negative freeWindowSlots means this amount of messages are currently queued but delayed due to closed window
/// </summary>
/// <summary>
/// Returns a string that represents this object
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetConnection.Handshake.cs
/// <summary>
/// The message that the remote part specified via Connect() or Approve() - can be null.
/// </summary>
// heartbeat called when connection still is in m_handshakes of NetPeer
// reconnect
// send another connect attempt
// let disconnect finish first
// failed to connect
// resend handshake
// awaiting approval
// postpone handshake resend
// clear send queues
// nothing much has happened yet; no need to send disconnected status message
// in case we're still in handshake
/// <summary>
/// Approves this connection; sending a connection response to the remote host
/// </summary>
/// <summary>
/// Approves this connection; sending a connection response to the remote host
/// </summary>
/// <param name="localHail">The local hail message that will be set as RemoteHailMessage on the remote host</param>
/// <summary>
/// Denies this connection; disconnecting it
/// </summary>
/// <summary>
/// Denies this connection; disconnecting it
/// </summary>
/// <param name="reason">The stated reason for the disconnect, readable as a string in the StatusChanged message on the remote host</param>
// send disconnect; remove from handshakes
// remove from handshakes
// Whee! Server full has already been checked
// ok, let's not add connection just yet
// our ConnectResponse must have been lost
// ok...
// too bad, almost made it
// uh, a little premature... ignore
// weird, should have been RespondedConnect...
// awesome
// ouch
// silently ignore
// awesome
// hello, wtf?
// wtf? anyway, bye!
// my ConnectionEstablished must have been lost, send another one
// create temporary incoming message
// whatever; we failed
/// <summary>
/// Disconnect from the remote peer
/// </summary>
/// <param name="byeMessage">the message to send with the disconnect message</param>
// user or library thread
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetConnection.Latency.cs
// local time value + m_remoteTimeOffset = remote time value
/// <summary>
/// Gets the current average roundtrip time in seconds
/// </summary>
/// <summary>
/// Time offset between this peer and the remote peer
/// </summary>
// this might happen more than once
/// <summary>
/// Gets local time value comparable to NetTime.Now from a remote value
/// </summary>
/// <summary>
/// Gets the remote time value for a local time value produced by NetTime.Now
/// </summary>
// randomize ping sent time (0.25 - 1.0 x ping interval)
// delay ping for a little while
// initially allow a little more time
// make it better, quick :-)
// truncating to 0-255
// we should update this value to reflect the exact point in time the packet is SENT
// update resend delay for all channels
// m_peer.LogVerbose("Timeout deadline pushed to  " + m_timeoutDeadline);
// notify the application that average rtt changed
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetConnection.MTU.cs
/// <summary>
/// Gets the current MTU in bytes. If PeerConfiguration.AutoExpandMTU is false, this will be PeerConfiguration.MaximumTransmissionUnit.
/// </summary>
// wait a tiny bit before starting to expand mtu
// begin expansion
// timed out; ie. failed
// we've nevered encountered failure
// we've never encountered failure; expand by 25% each time
//m_peer.LogDebug("Trying MTU " + tryMTU);
// we HAVE encountered failure; so try in between
//m_peer.LogDebug("Trying MTU " + m_smallestFailedMTU + " <-> " + m_largestSuccessfulMTU + " = " + tryMTU);
//m_peer.LogDebug("Found optimal MTU - exiting");
//m_peer.LogDebug("Send MTU failed for size " + size);
// failure
//m_peer.LogDebug("Received MTU expand request for " + size + " bytes");
//m_peer.LogDebug("Received low MTU expand success (size " + size + "); current mtu is " + m_currentMTU);
//m_peer.LogDebug("Expanding MTU to " + size);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetConnectionStatistics.cs
/* Copyright (c) 2010 Michael Lidgren
// Uncomment the line below to get statistics in RELEASE builds
//#define USE_RELEASE_STATISTICS
/// <summary>
/// Statistics for a NetConnection instance
/// </summary>
/// <summary>
/// Gets the number of sent packets for this connection
/// </summary>
/// <summary>
/// Gets the number of received packets for this connection
/// </summary>
/// <summary>
/// Gets the number of sent bytes for this connection
/// </summary>
/// <summary>
/// Gets the number of received bytes for this connection
/// </summary>
/// <summary>
/// Gets the number of resent reliable messages for this connection
/// </summary>
// public double LastSendRespondedTo { get { return m_connection.m_lastSendRespondedTo; } }
/// <summary>
/// Returns a string that represents this object
/// </summary>
//bdr.AppendLine("Average roundtrip time: " + NetTime.ToReadable(m_connection.m_averageRoundtripTime));
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetConnectionStatus.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Status for a NetConnection instance
/// </summary>
/// <summary>
/// No connection, or attempt, in place
/// </summary>
/// <summary>
/// Connect has been sent; waiting for ConnectResponse
/// </summary>
/// <summary>
/// Connect was received, but ConnectResponse hasn't been sent yet
/// </summary>
/// <summary>
/// Connect was received and ApprovalMessage released to the application; awaiting Approve() or Deny()
/// </summary>
// We got Connect, released ApprovalMessage
/// <summary>
/// Connect was received and ConnectResponse has been sent; waiting for ConnectionEstablished
/// </summary>
// we got Connect, sent ConnectResponse
/// <summary>
/// Connected
/// </summary>
// we received ConnectResponse (if initiator) or ConnectionEstablished (if passive)
/// <summary>
/// In the process of disconnecting
/// </summary>
/// <summary>
/// Disconnected
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetConstants.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// All the constants used when compiling the library
/// </summary>
/// <summary>
/// Number of channels which needs a sequence number to work
/// </summary>
/// <summary>
/// Number of reliable channels
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetDeliveryMethod.cs
/// <summary>
/// How the library deals with resends and handling of late messages
/// </summary>
//
// Actually a publicly visible subset of NetMessageType
//
/// <summary>
/// Indicates an error
/// </summary>
/// <summary>
/// Unreliable, unordered delivery
/// </summary>
/// <summary>
/// Unreliable delivery, but automatically dropping late messages
/// </summary>
/// <summary>
/// Reliable delivery, but unordered
/// </summary>
/// <summary>
/// Reliable delivery, except for late messages which are dropped
/// </summary>
/// <summary>
/// Reliable, ordered delivery
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetException.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Exception thrown in the Lidgren Network Library
/// </summary>
/// <summary>
/// NetException constructor
/// </summary>
/// <summary>
/// NetException constructor
/// </summary>
/// <summary>
/// NetException constructor
/// </summary>
/// <summary>
/// Throws an exception, in DEBUG only, if first parameter is false
/// </summary>
/// <summary>
/// Throws an exception, in DEBUG only, if first parameter is false
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetFragmentationHelper.cs
// write variable length fragment total bits
// write variable length fragment chunk size
// write variable length fragment chunk number
// write variable length fragment group id
// write variable length fragment total bits
// write variable length fragment chunk byte size
// write variable length fragment chunk number
// naive approximation
// slightly less naive approximation
// keep reducing chunk size until it fits within MTU including header
// 4+ bytes
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetFragmentationInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetIncomingMessage.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Incoming message either sent from a remote peer or generated within the library
/// </summary>
/// <summary>
/// Gets the type of this incoming message
/// </summary>
/// <summary>
/// Gets the delivery method this message was sent with (if user data)
/// </summary>
/// <summary>
/// Gets the sequence channel this message was sent with (if user data)
/// </summary>
/// <summary>
/// IPEndPoint of sender, if any
/// </summary>
/// <summary>
/// NetConnection of sender, if any
/// </summary>
/// <summary>
/// What local time the message was received from the network
/// </summary>
/// <summary>
/// Decrypt a message
/// </summary>
/// <param name="encryption">The encryption algorithm used to encrypt the message</param>
/// <returns>true on success</returns>
/// <summary>
/// Reads a value, in local time comparable to NetTime.Now, written using WriteTime()
/// Must have a connected sender
/// </summary>
/// <summary>
/// Returns a string that represents this object
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetIncomingMessageType.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// The type of a NetIncomingMessage
/// </summary>
//
// library note: values are power-of-two, but they are not flags - it's a convenience for NetPeerConfiguration.DisabledMessageTypes
//
/// <summary>
/// Error; this value should never appear
/// </summary>
/// <summary>
/// Status for a connection changed
/// </summary>
// Data (string)
/// <summary>
/// Data sent using SendUnconnectedMessage
/// </summary>
// Data					Based on data received
/// <summary>
/// Connection approval is needed
/// </summary>
// Data
/// <summary>
/// Application data
/// </summary>
// Data					Based on data received
/// <summary>
/// Receipt of delivery
/// </summary>
// Data
/// <summary>
/// Discovery request for a response
/// </summary>
// (no data)
/// <summary>
/// Discovery response to a request
/// </summary>
// Data
/// <summary>
/// Verbose debug message
/// </summary>
// Data (string)
/// <summary>
/// Debug message
/// </summary>
// Data (string)
/// <summary>
/// Warning message
/// </summary>
// Data (string)
/// <summary>
/// Error message
/// </summary>
// Data (string)
/// <summary>
/// NAT introduction was successful
/// </summary>
// Data (as passed to master server)
/// <summary>
/// A roundtrip was measured and NetConnection.AverageRoundtripTime was updated
/// </summary>
// Seconds as a Single
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetMessageType.cs
/* Copyright (c) 2010 Michael Lidgren
// used for RTT calculation
// used for RTT calculation
// send between peers
// send to master server
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetNatIntroduction.cs
/// <summary>
/// Send NetIntroduction to hostExternal and clientExternal; introducing client to host
/// </summary>
// send message to client
// send message to host
/// <summary>
/// Called when host/client receives a NatIntroduction message from a master server
/// </summary>
// read intro
// never mind length
// no need to punch - we're not listening for nat intros!
// send internal punch
// send external punch
/// <summary>
/// Called when receiving a NatPunchMessage from a remote endpoint
/// </summary>
// never mind length
// it's from client
// don't alert hosts about nat punch successes; only clients
//
// Release punch success to client; enabling him to Connect() to msg.SenderIPEndPoint if token is ok
//
// send a return punch just for good measure
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetOutgoingMessage.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Outgoing message used to send data to remote peer(s)
/// </summary>
// which group of fragments ths belongs to
// total number of bits in this group
// size, in bytes, of every chunk but the last one
// which number chunk this is, starting with 0
//  8 bits - NetMessageType
//  1 bit  - Fragment?
// 15 bits - Sequence number
// 16 bits - Payload length in bits
//
// write fragmentation header
//
// update length
// regular headers
/// <summary>
/// Encrypt this message using the provided algorithm; no more writing can be done before sending it or the message will be corrupt!
/// </summary>
/// <summary>
/// Returns a string that represents this object
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetPeer.cs
/// <summary>
/// Represents a local peer capable of holding zero, one or more connections to remote peers
/// </summary>
/// <summary>
/// Gets the NetPeerStatus of the NetPeer
/// </summary>
/// <summary>
/// Signalling event which can be waited on to determine when a message is queued for reading.
/// Note that there is no guarantee that after the event is signaled the blocked thread will 
/// find the message in the queue. Other user created threads could be preempted and dequeue 
/// the message before the waiting thread wakes up.
/// </summary>
// make sure we don't create more than one event object
/// <summary>
/// Gets a unique identifier for this NetPeer based on Mac address and ip/port. Note! Not available until Start() has been called!
/// </summary>
/// <summary>
/// Gets the port number this NetPeer is listening and sending on, if Start() has been called
/// </summary>
/// <summary>
/// Returns an UPnP object if enabled in the NetPeerConfiguration
/// </summary>
/// <summary>
/// Gets or sets the application defined object containing data about the peer
/// </summary>
/// <summary>
/// Gets a copy of the list of connections
/// </summary>
/// <summary>
/// Gets the number of active connections
/// </summary>
/// <summary>
/// Statistics on this NetPeer since it was initialized
/// </summary>
/// <summary>
/// Gets the configuration used to instanciate this NetPeer
/// </summary>
/// <summary>
/// NetPeer constructor
/// </summary>
/// <summary>
/// Binds to socket and spawns the networking thread
/// </summary>
// already running! Just ignore...
// fix network thread name
// start network thread
// send upnp discovery
// allow some time for network thread to start up in case they call Connect() or UPnP calls immediately
/// <summary>
/// Get the connection, if any, for a certain remote endpoint
/// </summary>
// this should not pose a threading problem, m_connectionLookup is never added to concurrently
// and TryGetValue will not throw an exception on fail, only yield null, which is acceptable
/// <summary>
/// Read a pending message from any connection, blocking up to maxMillis if needed
/// </summary>
// no need to wait; we already have a message to deliver
/// <summary>
/// Read a pending message from any connection, if any
/// </summary>
/// <summary>
/// Read a pending message from any connection, if any
/// </summary>
// send message immediately
/// <summary>
/// Create a connection to a remote endpoint
/// </summary>
/// <summary>
/// Create a connection to a remote endpoint
/// </summary>
/// <summary>
/// Create a connection to a remote endpoint
/// </summary>
/// <summary>
/// Create a connection to a remote endpoint
/// </summary>
// already trying to connect to that endpoint; make another try
// send another connect
// send another response
// weird
// handle on network thread
/// <summary>
/// Send raw bytes; only used for debugging
/// </summary>
// wrong thread - this miiiight crash with network thread... but what's a boy to do.
/// <summary>
/// In DEBUG, throws an exception, in RELEASE logs an error message
/// </summary>
/// <param name="message"></param>
/// <summary>
/// Disconnects all active connections and closes the socket
/// </summary>
// called on user thread
// already shut down
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetPeer.Discovery.cs
/// <summary>
/// Emit a discovery signal to all hosts on your subnet
/// </summary>
/// <summary>
/// Emit a discovery signal to a single known host
/// </summary>
/// <summary>
/// Emit a discovery signal to a single known host
/// </summary>
/// <summary>
/// Send a discovery response message
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetPeer.Fragmentation.cs
//public float LastReceived;
// on user thread
// Note: this group id is PER SENDING/NetPeer; ie. same id is sent to all recipients;
// this should be ok however; as long as recipients differentiate between same id but different sender
// @TODO: not thread safe; but in practice probably not an issue
// do not send msg; but set fragmentgroup in case user tries to recycle it immediately
// create fragmentation specifics
// determine minimum mtu for all recipients
// return "worst" result
//
// read fragmentation header and combine fragments
//
//info.LastReceived = (float)NetTime.Now;
// copy to data
//LogVerbose("Found fragment #" + chunkNumber + " in group " + group + " offset " + offset + " of total bits " + totalBits + " (total chunks done " + cnt + ")");
// Done! Transform this incoming message
// data has been copied; recycle this incoming message
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetPeer.Internal.cs
/// <summary>
/// Gets the socket, if Start() has been called
/// </summary>
/// <summary>
/// Call this to register a callback for when a new message arrives
/// </summary>
/// <summary>
/// Call this to unregister a callback, but remember to do it in the same synchronization context!
/// </summary>
// remove all callbacks regardless of sync context
// only allow rebind once every second
// ignore; SIO_UDP_CONNRESET not supported on this platform
// bind to socket
// not supported; lets just keep the random bytes set above
//
// Network loop
//
//
// perform shutdown
//
// disconnect and make one final heartbeat
// shut down connections
// one final heartbeat, will send stuff and do disconnect
// 2 seconds timeout
// wake up any threads waiting for server shutdown
// max connection heartbeats/second max
// do handshake heartbeats
// sanity check
// sanity check
// collection has been modified
// update m_executeFlushSendQueue
// do connection heartbeats
//
// remove connection
//
// can't continue iteration here
// send unsent unconnected messages
//
// read from socket
//
// wait up to 1 ms for data to arrive
//if (m_socket == null || m_socket.Available < 1)
//	return;
// update now
// connection reset by peer, aka connection forcibly closed aka "ICMP port unreachable" 
// we should shut down the connection; but m_senderRemote seemingly cannot be trusted, so which connection should we shut down?!
// So, what to do?
// socket is unbound; try to rebind it (happens on mobile when process goes to sleep)
//LogVerbose("Received " + bytesReceived + " bytes");
// is this an UPnP response?
// don't try to parse this packet further
//
// parse packet into messages
//
// decode header
//  8 bits - NetMessageType
//  1 bit  - Fragment?
// 15 bits - Sequence number
// 16 bits - Payload length in bits
// dropping unconnected message since it's not enabled
// We're connected; but we can still send unconnected messages to this peer
// connected application (non-library) message
// at this point we know the message type is enabled
// unconnected application (non-library) message
/// <summary>
/// If NetPeerConfiguration.AutoFlushSendQueue() is false; you need to call this to send all messages queued using SendMessage()
/// </summary>
//
// Library message from a completely unknown sender; lets just accept Connect
//
//
// We are currently trying to connection to XX.XX.XX.XX:Y
// ... but we just received a ConnectResponse from XX.XX.XX.XX:Z
// Lets just assume the router decided to use this port instead
//
// handle connect
// It's someone wanting to shake hands with us!
// server full
// Ok, start handshake!
// this is probably ok
// LogDebug("Accepted connection " + conn);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetPeer.LatencySimulation.cs
/* Copyright (c) 2010 Michael Lidgren
//#define USE_RELEASE_STATISTICS
// simulate loss
// packet "lost"
// simulate latency
// no latency simulation
// LogVerbose("Sending packet " + numBytes + " bytes");
// TODO: handle wasSent == false?
// send it again!
// Enqueue delayed packet
// LogVerbose("Sending packet " + numBytes + " bytes - delayed " + NetTime.ToReadable(delay));
// TODO: refactor this check outta here
// Some networks do not allow 
// a global broadcast so we use the BroadcastAddress from the configuration
// this can be resolved to a local broadcast addresss e.g 192.168.x.255                    
// LogDebug("Sent " + numBytes + " bytes");
// send buffer full?
// connection reset by peer, aka connection forcibly closed aka "ICMP port unreachable" 
// send buffer full?
// send buffer full?
//
// Release - just send the packet straight away
//
// TODO: refactor this check outta here
// send buffer full?
// connection reset by peer, aka connection forcibly closed aka "ICMP port unreachable" 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetPeer.Logging.cs
/* Copyright (c) 2010 Michael Lidgren
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetPeer.MessagePools.cs
// sorted smallest to largest
/// <summary>
/// Creates a new message for sending
/// </summary>
/// <summary>
/// Creates a new message for sending and writes the provided string to it
/// </summary>
// fair guess
/// <summary>
/// Creates a new message for sending
/// </summary>
/// <param name="initialCapacity">initial capacity in bytes</param>
/// <summary>
/// Recycles a NetIncomingMessage instance for reuse; taking pressure off the garbage collector
/// </summary>
/// <summary>
/// Recycles a list of NetIncomingMessage instances for reuse; taking pressure off the garbage collector
/// </summary>
// first recycle the storage of each message
// then recycle the message objects
// message fragments cannot be recycled
// TODO: find a way to recycle large message after all fragments has been acknowledged; or? possibly better just to garbage collect them
/// <summary>
/// Creates an incoming message with the required capacity for releasing to the application
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetPeer.Send.cs
/// <summary>
/// Send a message to a specific connection
/// </summary>
/// <param name="msg">The message to send</param>
/// <param name="recipient">The recipient connection</param>
/// <param name="method">How to deliver the message</param>
/// <summary>
/// Send a message to a specific connection
/// </summary>
/// <param name="msg">The message to send</param>
/// <param name="recipient">The recipient connection</param>
/// <param name="method">How to deliver the message</param>
/// <param name="sequenceChannel">Sequence channel within the delivery method</param>
// headers + length, faster than calling msg.GetEncodedSize
// message must be fragmented!
// we don't have access to the particular peer, so just use default MTU
/// <summary>
/// Send a message to a list of connections
/// </summary>
/// <param name="msg">The message to send</param>
/// <param name="recipients">The list of recipients to send to</param>
/// <param name="method">How to deliver the message</param>
/// <param name="sequenceChannel">Sequence channel within the delivery method</param>
// message must be fragmented!
/// <summary>
/// Send a message to an unconnected host
/// </summary>
/// <summary>
/// Send a message to an unconnected host
/// </summary>
/// <summary>
/// Send a message to an unconnected host
/// </summary>
/// <summary>
/// Send a message to this exact same netpeer (loopback)
/// </summary>
// dropping unconnected message since it's not enabled for receiving
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetPeerConfiguration.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Partly immutable after NetPeer has been initialized
/// </summary>
// Maximum transmission unit
// Ethernet can take 1500 bytes of payload, so lets stay below that.
// The aim is for a max full packet to be 1440 bytes (30 x 48 bytes, lower than 1468)
// -20 bytes IP header
//  -8 bytes UDP header
//  -4 bytes to be on the safe side and align to 8-byte boundary
// Total 1408 bytes
// Note that lidgren headers (5 bytes) are not included here; since it's part of the "mtu payload"
/// <summary>
/// Default MTU value in bytes
/// </summary>
// bad network simulation
// MTU
/// <summary>
/// NetPeerConfiguration constructor
/// </summary>
//
// default values
//
/// <summary>
/// Gets the identifier of this application; the library can only connect to matching app identifier peers
/// </summary>
/// <summary>
/// Enables receiving of the specified type of message
/// </summary>
/// <summary>
/// Disables receiving of the specified type of message
/// </summary>
/// <summary>
/// Enables or disables receiving of the specified type of message
/// </summary>
/// <summary>
/// Gets if receiving of the specified type of message is enabled
/// </summary>
/// <summary>
/// Gets or sets the behaviour of unreliable sends above MTU
/// </summary>
/// <summary>
/// Gets or sets the name of the library network thread. Cannot be changed once NetPeer is initialized.
/// </summary>
/// <summary>
/// Gets or sets the maximum amount of connections this peer can hold. Cannot be changed once NetPeer is initialized.
/// </summary>
/// <summary>
/// Gets or sets the maximum amount of bytes to send in a single packet, excluding ip, udp and lidgren headers. Cannot be changed once NetPeer is initialized.
/// </summary>
/// <summary>
/// Gets or sets the default capacity in bytes when NetPeer.CreateMessage() is called without argument
/// </summary>
/// <summary>
/// Gets or sets the time between latency calculating pings
/// </summary>
/// <summary>
/// Gets or sets if the library should recycling messages to avoid excessive garbage collection. Cannot be changed once NetPeer is initialized.
/// </summary>
/// <summary>
/// Gets or sets the number of seconds timeout will be postponed on a successful ping/pong
/// </summary>
/// <summary>
/// Enables UPnP support; enabling port forwarding and getting external ip
/// </summary>
/// <summary>
/// Enables or disables automatic flushing of the send queue. If disabled, you must manully call NetPeer.FlushSendQueue() to flush sent messages to network.
/// </summary>
/// <summary>
/// Gets or sets the local ip address to bind to. Defaults to IPAddress.Any. Cannot be changed once NetPeer is initialized.
/// </summary>
/// <summary>
/// Gets or sets the local broadcast address to use when broadcasting
/// </summary>
/// <summary>
/// Gets or sets the local port to bind to. Defaults to 0. Cannot be changed once NetPeer is initialized.
/// </summary>
/// <summary>
/// Gets or sets the size in bytes of the receiving buffer. Defaults to 131071 bytes. Cannot be changed once NetPeer is initialized.
/// </summary>
/// <summary>
/// Gets or sets the size in bytes of the sending buffer. Defaults to 131071 bytes. Cannot be changed once NetPeer is initialized.
/// </summary>
/// <summary>
/// Gets or sets if the NetPeer should accept incoming connections. This is automatically set to true in NetServer and false in NetClient.
/// </summary>
/// <summary>
/// Gets or sets the number of seconds between handshake attempts
/// </summary>
/// <summary>
/// Gets or sets the maximum number of handshake attempts before failing to connect
/// </summary>
/// <summary>
/// Gets or sets if the NetPeer should send large messages to try to expand the maximum transmission unit size
/// </summary>
/// <summary>
/// Gets or sets how often to send large messages to expand MTU if AutoExpandMTU is enabled
/// </summary>
/// <summary>
/// Gets or sets the number of failed expand mtu attempts to perform before setting final MTU
/// </summary>
/// <summary>
/// Gets or sets the simulated amount of sent packets lost from 0.0f to 1.0f
/// </summary>
/// <summary>
/// Gets or sets the minimum simulated amount of one way latency for sent packets in seconds
/// </summary>
/// <summary>
/// Gets or sets the simulated added random amount of one way latency for sent packets in seconds
/// </summary>
/// <summary>
/// Gets the average simulated one way latency in seconds
/// </summary>
/// <summary>
/// Gets or sets the simulated amount of duplicated packets from 0.0f to 1.0f
/// </summary>
/// <summary>
/// Creates a memberwise shallow clone of this configuration
/// </summary>
/// <summary>
/// Behaviour of unreliable sends above MTU
/// </summary>
/// <summary>
/// Sending an unreliable message will ignore MTU and send everything in a single packet; this is the new default
/// </summary>
/// <summary>
/// Old behaviour; use normal fragmentation for unreliable messages - if a fragment is dropped, memory for received fragments are never reclaimed!
/// </summary>
/// <summary>
/// Alternate behaviour; just drops unreliable messages above MTU
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetPeerStatistics.cs
/* Copyright (c) 2010 Michael Lidgren
// Uncomment the line below to get statistics in RELEASE builds
//#define USE_RELEASE_STATISTICS
/// <summary>
/// Statistics for a NetPeer instance
/// </summary>
/// <summary>
/// Gets the number of sent packets since the NetPeer was initialized
/// </summary>
/// <summary>
/// Gets the number of received packets since the NetPeer was initialized
/// </summary>
/// <summary>
/// Gets the number of sent messages since the NetPeer was initialized
/// </summary>
/// <summary>
/// Gets the number of received messages since the NetPeer was initialized
/// </summary>
/// <summary>
/// Gets the number of sent bytes since the NetPeer was initialized
/// </summary>
/// <summary>
/// Gets the number of received bytes since the NetPeer was initialized
/// </summary>
/// <summary>
/// Gets the number of bytes allocated (and possibly garbage collected) for message storage
/// </summary>
/// <summary>
/// Gets the number of bytes in the recycled pool
/// </summary>
/// <summary>
/// Returns a string that represents this object
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetPeerStatus.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Status for a NetPeer instance
/// </summary>
/// <summary>
/// NetPeer is not running; socket is not bound
/// </summary>
/// <summary>
/// NetPeer is in the process of starting up
/// </summary>
/// <summary>
/// NetPeer is bound to socket and listening for packets
/// </summary>
/// <summary>
/// Shutdown has been requested and will be executed shortly
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetQueue.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Thread safe (blocking) expanding queue with TryDequeue() and EnqueueFirst()
/// </summary>
// Example:
// m_capacity = 8
// m_size = 6
// m_head = 4
//
// [0] item
// [1] item (tail = ((head + size - 1) % capacity)
// [2] 
// [3] 
// [4] item (head)
// [5] item
// [6] item 
// [7] item
//
/// <summary>
/// Gets the number of items in the queue
/// </summary>
/// <summary>
/// Gets the current capacity for the queue
/// </summary>
/// <summary>
/// NetQueue constructor
/// </summary>
/// <summary>
/// Adds an item last/tail of the queue
/// </summary>
/// <summary>
/// Adds an item last/tail of the queue
/// </summary>
// @TODO move this out of loop
/// <summary>
/// Places an item first, at the head of the queue
/// </summary>
// must be called from within a write locked m_lock!
/// <summary>
/// Gets an item from the head of the queue, or returns default(T) if empty
/// </summary>
/// <summary>
/// Gets all items from the head of the queue, or returns number of items popped
/// </summary>
/// <summary>
/// Returns default(T) if queue is empty
/// </summary>
/// <summary>
/// Determines whether an item is in the queue
/// </summary>
/// <summary>
/// Copies the queue items to a new array
/// </summary>
/// <summary>
/// Removes all objects from the queue
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetRandom.cs
/// <summary>
/// NetRandom base class
/// </summary>
/// <summary>
/// Get global instance of NetRandom (uses MWCRandom)
/// </summary>
/// <summary>
/// Constructor with randomized seed
/// </summary>
/// <summary>
/// Constructor with provided 32 bit seed
/// </summary>
/// <summary>
/// (Re)initialize this instance with provided 32 bit seed
/// </summary>
// should be abstract, but non-CLS compliant methods can't be abstract!
/// <summary>
/// Generates a random value from UInt32.MinValue to UInt32.MaxValue, inclusively
/// </summary>
// should be abstract, but non-CLS compliant methods can't be abstract!
/// <summary>
/// Generates a random value that is greater or equal than 0 and less than Int32.MaxValue
/// </summary>
/// <summary>
/// Generates a random value greater or equal than 0 and less or equal than Int32.MaxValue (inclusively)
/// </summary>
/// <summary>
/// Returns random value larger or equal to 0.0 and less than 1.0
/// </summary>
/// <summary>
/// Returns random value is greater or equal than 0.0 and less than 1.0
/// </summary>
/// <summary>
/// Returns random value is greater or equal than 0.0f and less than 1.0f
/// </summary>
/// <summary>
/// Returns a random value is greater or equal than 0 and less than maxValue
/// </summary>
/// <summary>
/// Returns a random value is greater or equal than minValue and less than maxValue
/// </summary>
/// <summary>
/// Generates a random value between UInt64.MinValue to UInt64.MaxValue
/// </summary>
/// <summary>
/// Returns true or false, randomly
/// </summary>
/// <summary>
/// Fills all bytes from offset to offset + length in buffer with random values
/// </summary>
/// <summary>
/// Fill the specified buffer with random values
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetRandom.Implementations.cs
/// <summary>
/// Multiply With Carry random
/// </summary>
/// <summary>
/// Get global instance of MWCRandom
/// </summary>
/// <summary>
/// Constructor with randomized seed
/// </summary>
/// <summary>
/// (Re)initialize this instance with provided 32 bit seed
/// </summary>
/// <summary>
/// (Re)initialize this instance with provided 64 bit seed
/// </summary>
/// <summary>
/// Generates a random value from UInt32.MinValue to UInt32.MaxValue, inclusively
/// </summary>
/// <summary>
/// Xor Shift based random
/// </summary>
/// <summary>
/// Get global instance of XorShiftRandom
/// </summary>
/// <summary>
/// Constructor with randomized seed
/// </summary>
/// <summary>
/// Constructor with provided 64 bit seed
/// </summary>
/// <summary>
/// (Re)initialize this instance with provided 32 bit seed
/// </summary>
/// <summary>
/// (Re)initialize this instance with provided 64 bit seed
/// </summary>
/// <summary>
/// Generates a random value from UInt32.MinValue to UInt32.MaxValue, inclusively
/// </summary>
/// <summary>
/// Mersenne Twister based random
/// </summary>
/// <summary>
/// Get global instance of MersenneTwisterRandom
/// </summary>
/// <summary>
/// Constructor with randomized seed
/// </summary>
/// <summary>
/// Constructor with provided 32 bit seed
/// </summary>
/// <summary>
/// (Re)initialize this instance with provided 32 bit seed
/// </summary>
/// <summary>
/// Generates a random value from UInt32.MinValue to UInt32.MaxValue, inclusively
/// </summary>
/// <summary>
/// RNGCryptoServiceProvider based random; very slow but cryptographically safe
/// </summary>
/// <summary>
/// Global instance of CryptoRandom
/// </summary>
/// <summary>
/// Seed in CryptoRandom does not create deterministic sequences
/// </summary>
// just prime it
/// <summary>
/// Generates a random value from UInt32.MinValue to UInt32.MaxValue, inclusively
/// </summary>
/// <summary>
/// Fill the specified buffer with random values
/// </summary>
/// <summary>
/// Fills all bytes from offset to offset + length in buffer with random values
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetRandomSeed.cs
/// <summary>
/// Class for generating random seeds
/// </summary>
/// <summary>
/// Generates a 32 bit random seed
/// </summary>
/// <summary>
/// Generates a 64 bit random seed
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetReceiverChannelBase.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetReliableOrderedReceiver.cs
// ack no matter what
// Log("Received message #" + message.SequenceNumber + " right on time");
//
// excellent, right on time
//
//m_peer.LogVerbose("Received RIGHT-ON-TIME " + message);
// release withheld messages
// remove it from withheld messages
// duplicate
// relate > 0 = early message
// too early message!
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetReliableSenderChannel.cs
/// <summary>
/// Sender part of Selective repeat ARQ for a particular NetChannel
/// </summary>
// call this regularely
//
// resends
//
// deduce sequence number
/*
//m_connection.m_peer.LogVerbose("Resending due to delay #" + m_storedMessages[i].SequenceNumber + " " + om.ToString());
// queued sends
// remoteWindowStart is remote expected sequence number; everything below this has arrived properly
// seqNr is the actual nr received
// late (dupe), on time or early ack?
//m_connection.m_peer.LogDebug("Received late/dupe ack for #" + seqNr);
// late/duplicate ack
//m_connection.m_peer.LogDebug("Received right-on-time ack for #" + seqNr);
// ack arrived right on time
// advance window if we already have early acks
//m_connection.m_peer.LogDebug("Using early ack for #" + m_windowStart + "...");
// should already be destored
//m_connection.m_peer.LogDebug("Advancing window to #" + m_windowStart);
//
// early ack... (if it has been sent!)
//
// If it has been sent either the m_windowStart message was lost
// ... or the ack for that message was lost
//
//m_connection.m_peer.LogDebug("Received early ack for #" + seqNr);
// yes, we've sent this message - it's an early (but valid) ack
// we've already destored/been acked for this message
// uh... we haven't sent this message yet? Weird, dupe or error...
// Ok, lets resend all missing acks
// m_connection.m_peer.LogDebug("Not resending #" + rnr + " (since we got ack)");
// just sent once; resend immediately since we found gap in ack sequence
//m_connection.m_peer.LogVerbose("Resending #" + rnr + " (" + rmsg + ")");
// already resent recently
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetReliableSequencedReceiver.cs
// ack no matter what
// Log("Received message #" + message.SequenceNumber + " right on time");
//
// excellent, right on time
//
// relate > 0 = early message
// too early message!
// ok
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetReliableUnorderedReceiver.cs
// ack no matter what
// Log("Received message #" + message.SequenceNumber + " right on time");
//
// excellent, right on time
//
//m_peer.LogVerbose("Received RIGHT-ON-TIME " + message);
// release withheld messages
//message = m_withheldMessages[nextSeqNr % m_windowSize];
//NetException.Assert(message != null);
// remove it from withheld messages
//m_withheldMessages[nextSeqNr % m_windowSize] = null;
//m_peer.LogVerbose("Releasing withheld message #" + message);
//m_peer.ReleaseMessage(message);
// duplicate
// relate > 0 = early message
// too early message!
//m_peer.LogVerbose("Received " + message + " WITHHOLDING, waiting for " + m_windowStart);
//m_withheldMessages[message.m_sequenceNumber % m_windowSize] = message;
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetSenderChannelBase.cs
// access this directly to queue things in this channel
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetSendResult.cs
/// <summary>
/// Result of a SendMessage call
/// </summary>
/// <summary>
/// Message failed to enqueue because there is no connection
/// </summary>
/// <summary>
/// Message was immediately sent
/// </summary>
/// <summary>
/// Message was queued for delivery
/// </summary>
/// <summary>
/// Message was dropped immediately since too many message were queued
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetServer.cs
/// <summary>
/// Specialized version of NetPeer used for "server" peers
/// </summary>
/// <summary>
/// NetServer constructor
/// </summary>
/// <summary>
/// Send a message to all connections
/// </summary>
/// <param name="msg">The message to send</param>
/// <param name="method">How to deliver the message</param>
/// <summary>
/// Send a message to all connections except one
/// </summary>
/// <param name="msg">The message to send</param>
/// <param name="method">How to deliver the message</param>
/// <param name="except">Don't send to this particular connection</param>
/// <param name="sequenceChannel">Which sequence channel to use for the message</param>
/// <summary>
/// Returns a string that represents this object
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetSRP.cs
/// <summary>
/// Helper methods for implementing SRP authentication
/// </summary>
// this does not seem to work as of yet
/// <summary>
/// Compute multiplier (k)
/// </summary>
/// <summary>
/// Create 16 bytes of random salt
/// </summary>
/// <summary>
/// Create 32 bytes of random ephemeral value
/// </summary>
/// <summary>
/// Computer private key (x)
/// </summary>
// x   ie. H(salt || H(username || ":" || password))
/// <summary>
/// Creates a verifier that the server can later use to authenticate users later on (v)
/// </summary>
// Verifier (v) = g^x (mod N)
/// <summary>
/// SHA hash data
/// </summary>
/// <summary>
/// Compute client public ephemeral value (A)
/// </summary>
// a
// A= g^a (mod N) 
/// <summary>
/// Compute server ephemeral value (B)
/// </summary>
// b
// B = kv + g^b (mod N) 
/// <summary>
/// Compute intermediate value (u)
/// </summary>
// u = SHA-1(A || B)
//  Math.Max(one.Length, two.Length);
/// <summary>
/// Computes the server session value
/// </summary>
// S = (Av^u) ^ b (mod N)
/// <summary>
/// Computes the client session value
/// </summary>
// (B - kg^x) ^ (a + ux)   (mod N)
/// <summary>
/// Create XTEA symmetrical encryption object from sessionValue
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetStoredReliableMessage.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetTime.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Time service
/// </summary>
/// <summary>
/// Get number of seconds since the application started
/// </summary>
/// <summary>
/// Get number of seconds since the application started
/// </summary>
/// <summary>
/// Given seconds it will output a human friendly readable string (milliseconds if less than 60 seconds)
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetTuple.cs
// replace with BCL 4.0 Tuple<> when appropriate
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetUnreliableSenderChannel.cs
/// <summary>
/// Sender part of Selective repeat ARQ for a particular NetChannel
/// </summary>
// call this regularely
// queued sends
// remoteWindowStart is remote expected sequence number; everything below this has arrived properly
// seqNr is the actual nr received
// late (dupe), on time or early ack?
//m_connection.m_peer.LogDebug("Received late/dupe ack for #" + seqNr);
// late/duplicate ack
//m_connection.m_peer.LogDebug("Received right-on-time ack for #" + seqNr);
// ack arrived right on time
// Advance window to this position
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetUnreliableSequencedReceiver.cs
// ack no matter what
// drop if late
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetUnreliableUnorderedReceiver.cs
// ack no matter what
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetUPnP.cs
/// <summary>
/// Status of the UPnP capabilities
/// </summary>
/// <summary>
/// Still discovering UPnP capabilities
/// </summary>
/// <summary>
/// UPnP is not available
/// </summary>
/// <summary>
/// UPnP is available and ready to use
/// </summary>
/// <summary>
/// UPnP support class
/// </summary>
/// <summary>
/// Status of the UPnP capabilities of this NetPeer
/// </summary>
/// <summary>
/// NetUPnP constructor
/// </summary>
// allow some extra time for router to respond
// System.Threading.Thread.Sleep(50);
// arbitrarily chosen number, router gets 6 seconds to respond
//tns:device/tns:deviceType/text()", nsMgr);
//tns:service[tns:serviceType=\"urn:schemas-upnp-org:service:" + m_serviceName + ":1\"]/tns:controlURL/text()", nsMgr);
//try another service name
//tns:service[tns:serviceType=\"urn:schemas-upnp-org:service:" + m_serviceName + ":1\"]/tns:controlURL/text()", nsMgr);
// Is Control URL an absolute URL?
//", "");  // strip any protocol
// Use first portion of URL
//" + gatewayURL + subURL;
/// <summary>
/// Add a forwarding rule to the router using UPnP
/// </summary>
/// <summary>
/// Delete a forwarding rule from the router using UPnP
/// </summary>
/// <summary>
/// Retrieve the extern ip using UPnP
/// </summary>
//NewExternalIPAddress/text()", nsMgr).Value;
//schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" +
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\NetUtility.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Utility methods
/// </summary>
/// <summary>
/// Resolve endpoint callback
/// </summary>
/// <summary>
/// Resolve address callback
/// </summary>
/// <summary>
/// Get IPv4 endpoint from notation (xxx.xxx.xxx.xxx) or hostname and port number (asynchronous version)
/// </summary>
/// <summary>
/// Get IPv4 endpoint from notation (xxx.xxx.xxx.xxx) or hostname and port number
/// </summary>
/// <summary>
/// Get IPv4 address from notation (xxx.xxx.xxx.xxx) or hostname (asynchronous version)
/// </summary>
// ok must be a host name
//LogWrite(string.Format(CultureInfo.InvariantCulture, "Failed to resolve host '{0}'.", ipOrHost));
// check each entry for a valid IP address
//LogWrite(string.Format(CultureInfo.InvariantCulture, "Failed to resolve host '{0}'.", ipOrHost));
/// <summary>
/// Get IPv4 address from notation (xxx.xxx.xxx.xxx) or hostname
/// </summary>
// ok must be a host name
//LogWrite(string.Format(CultureInfo.InvariantCulture, "Failed to resolve host '{0}'.", ipOrHost));
// make sure this adapter has any ipv4 addresses
// Yes it does, return this network interface.
/// <summary>
/// Returns the physical (MAC) address for the first usable network interface
/// </summary>
/// <summary>
/// Create a hex string from an Int64 value
/// </summary>
/// <summary>
/// Create a hex string from an array of bytes
/// </summary>
/// <summary>
/// Create a hex string from an array of bytes
/// </summary>
/// <summary>
/// Gets the local broadcast address
/// </summary>
// Catch Access Denied Errors
// Catch any errors 
/// <summary>
/// Gets my local IPv4 address (not necessarily external) and subnet mask
/// </summary>
// Catch Access Denied errors
/// <summary>
/// Returns true if the IPEndPoint supplied is on the same subnet as this host
/// </summary>
/// <summary>
/// Returns true if the IPAddress supplied is on the same subnet as this host
/// </summary>
// compare network portions
/// <summary>
/// Returns how many bits are necessary to hold a certain number
/// </summary>
/// <summary>
/// Returns how many bytes are required to hold a certain number of bits
/// </summary>
/// <summary>
/// Convert a hexadecimal string to a byte array
/// </summary>
/// <summary>
/// Converts a number of bytes to a shorter, more readable string representation
/// </summary>
// 1-4 kb is printed in bytes
// 4-999 kb is printed in kb
// else megabytes
// old impl:
//int retval = ((nr + NetConstants.NumSequenceNumbers) - expected) % NetConstants.NumSequenceNumbers;
//if (retval > (NetConstants.NumSequenceNumbers / 2))
//	retval -= NetConstants.NumSequenceNumbers;
//return retval;
/// <summary>
/// Gets the window size used internally in the library for a certain delivery method
/// </summary>
// shell sort
/// <summary>
/// Creates a comma delimited string from a lite of items
/// </summary>
// educated guess
/// <summary>
/// Create a SHA1 digest from a string
/// </summary>
/// <summary>
/// Create a SHA1 digest from a byte buffer
/// </summary>
/// <summary>
/// Create a SHA1 digest from a byte buffer
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\Encryption\NetAESEncryption.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\Encryption\NetBlockEncryptionBase.cs
/// <summary>
/// Base for a non-threadsafe encryption class
/// </summary>
// temporary space for one block to avoid reallocating every time
/// <summary>
/// Block size in bytes for this cipher
/// </summary>
/// <summary>
/// NetBlockEncryptionBase constructor
/// </summary>
/// <summary>
/// Encrypt am outgoing message with this algorithm; no writing can be done to the message after encryption, or message will be corrupted
/// </summary>
// add 4 bytes for payload length at end
// length will automatically adjust +4 bytes when payload length is written
// add true payload length last
/// <summary>
/// Decrypt an incoming message encrypted with corresponding Encrypt
/// </summary>
/// <param name="msg">message to decrypt</param>
/// <returns>true if successful; false if failed</returns>
// last 4 bytes is true bit length
// read 32 bits of true payload length
/// <summary>
/// Encrypt a block of bytes
/// </summary>
/// <summary>
/// Decrypt a block of bytes
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\Encryption\NetCryptoProviderBase.cs
// get results
// reset write pointer
// TODO: recycle existing msg
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\Encryption\NetDESEncryption.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\Encryption\NetEncryption.cs
/// <summary>
/// Interface for an encryption algorithm
/// </summary>
/// <summary>
/// NetPeer
/// </summary>
/// <summary>
/// Constructor
/// </summary>
/// <summary>
/// Encrypt an outgoing message in place
/// </summary>
/// <summary>
/// Decrypt an incoming message in place
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\Encryption\NetRC2Encryption.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\Encryption\NetTripleDESEncryption.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\Encryption\NetXorEncryption.cs
/// <summary>
/// Example class; not very good encryption
/// </summary>
/// <summary>
/// NetXorEncryption constructor
/// </summary>
/// <summary>
/// NetXorEncryption constructor
/// </summary>
/// <summary>
/// Encrypt an outgoing message
/// </summary>
/// <summary>
/// Decrypt an incoming message
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\Encryption\NetXteaEncryption.cs
/* Copyright (c) 2010 Michael Lidgren
/// <summary>
/// Methods to encrypt and decrypt data using the XTEA algorithm
/// </summary>
/// <summary>
/// Gets the block size for this cipher
/// </summary>
/// <summary>
/// 16 byte key
/// </summary>
/// <summary>
/// 16 byte key
/// </summary>
/// <summary>
/// String to hash for key
/// </summary>
/// <summary>
/// Encrypts a block of bytes
/// </summary>
/// <summary>
/// Decrypts a block of bytes
/// </summary>
// Pack bytes into integers
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\Properties\AssemblyInfo.cs
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
// The following GUID is for the ID of the typelib if this project is exposed to COM
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\ThirdParty\Lidgren.Network\Resources\Resource.Designer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder\BuildContent.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// This property only exists for documentation.
// The actual handling of '/@' is done in the preprocess step.
// If you are changing the processor then reset all 
// the processor parameters.
// Do we error out or something?
// Make sure the source file is absolute.
// link should remain relative, absolute path will get set later when the build occurs
// Remove duplicates... keep this new one.
// Create the item for processing later.
// Copy the current processor parameters blind as we
// will validate and remove invalid parameters during
// the build process later.
// Remove duplicates... keep this new one.
// This refers to the "Link" which can override the default output location
// If the intent is to debug build, break at the original location
// of any exception, eg, within the actual importer/processor.
// Feed all the assembly references to the pipeline manager
// so it can resolve importers, processors, writers, and types.
// Load the previously serialized list of built content.
// If the target changed in any way then we need to force
// a full rebuild even under incremental builds.
// First clean previously built content.
// This may be an old file (prior to MG 3.7) which doesn't have destination files:
// TODO: Should we be cleaning copy items?  I think maybe we should.
// Before building the content, register all files to be built. (Necessary to
// correctly resolve external references.)
// Ignore exception. Exception will be handled below.
// If this is an incremental build we merge the list
// of previous content with the new list.
// Delete the old file and write the new content 
// list if we have any to serialize.
// Process copy items (files that bypass the content pipeline)
// Figure out an asset name relative to the project directory,
// retaining the file extension.
// Note that replacing a sub-path like this requires consistent
// directory separator characters.
// Only copy if the source file is newer than the destination.
// We may want to provide an option for overriding this, but for
// nearly all cases this is the desired behavior.
// Copy the stats from the previous stats collection.
// Create the destination directory if it doesn't already exist.
// Destination file should not be read-only even if original was.
// Record content stats on the copy.
// Dump the content build stats.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder\CommandLineParser.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Adapted from this generic command line argument parser:
/// http://blogs.msdn.com/b/shawnhar/archive/2012/04/20/a-reusable-reflection-based-command-line-parser.aspx     
/// </summary>
// Reflect to find what commandline options are available...
// Fields
// Record a required option.
// Record an optional option.
// Properties
// Record a required option.
// Record an optional option.
// Methods
// Only accept methods that take less than 1 parameter.
// Record a required option.
// Record an optional option.
// make sure the working dir is changed both during preprocessing and during execution
// Filename detected, redo with a build command
// Only one flag
// Multiple flags
// Not a flag, parse argument
// After the first escaped argument we can no
// longer read non-escaped arguments.
// Parse an optional argument.
// Parse the next non escaped argument.
// Append this value to a list of options.
// Set the value of a single option.
// Wrap text description
// Used on an optionsObject field or method to rename the corresponding commandline option.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder\ConsoleLogger.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: How do i make it high importance?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder\Program.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// We force all stderr to redirect to stdout
// to avoid any out of order console output.
// Parse the command line.
// Launch debugger if requested.
// not implemented under Mono
// Print a startup message.            
// Let the content build.
// Print the finishing info.
// Return the error count.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder\SourceFileCollection.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Global.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Generate default link file image
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\LogWindow.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\LogWindow.eto.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\MainWindow.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Fill in Pad menu
// Title
// Menu
// Visibility of menu items can't be changed so 
// we need to recreate the context menu each time.
// Context Menu
//AddContextMenu(cmDelete, ref sep);
//www.monogame.net/documentation/?page=Pipeline");
//www.monogame.net/");
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\MainWindow.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Pipeline menu bar.
/// Required to Stop Eto Forms adding System Menu Items on MacOS
/// This is because `IncludeSystemItems` defaults to `All` 
/// and the menus are populated in the constructor.
/// </summary>
// File Commands
// Edit Commands
// Add Submenu
// Build Commands
// Help Commands
// Context Menu
//menuEdit.Items.Add(cmdDelete);
// View Commands
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Program.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The main entry point for the application.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\ActionStack.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Represents a stack of undo/redo-able actions.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\ContentItem.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Validate that our processor can accept input content of the type output by the new importer.
// If it cannot, set the default processor.
// When the processor changes reset our parameters
// to the default for the processor type.
// Note:
// There is no need to validate that the new processor can accept input
// of the type output by our importer, because that should be handled by
// only showing valid processors in the drop-down (eg, within ProcessConverter).
// Copy items do not have importers or processors.
// ProcessorParams get deserialized as strings
// this code converts them to object(s) of their actual type
// so that the correct editor appears within the property grid.
// Should we throw an exception here?
// This property will actually not be editable in the property grid
// since we do not have a type converter for it.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\ContentItem.Importer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Custom converter for the Processor property of a ContentItem.
/// </summary>
// contentItem.Importer;
//System.Diagnostics.Debug.Assert(importer == value);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\ContentItem.Processor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Custom converter for the Processor property of a ContentItem.
/// </summary>
// Emit regular properties.
// Emit processor parameters.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\ContentItemTemplate.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\CustomPropertyDescriptors.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// PropertyDescriptor for delegating get/set calls to more than one component (object).
/// </summary>
/// <summary>
/// PropertyDescriptor for a named item within an OpaqueDataDictionary.
/// </summary>
/// <summary>
/// PropertyDescriptor which has a fixed value.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\DirectoryItem.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\Extensions.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\FileType.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\IController.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Types of content which can be created and added to a project. 
/// </summary>
/// <summary>
/// True if there is a project.
/// </summary>
/// <summary>
/// True if the project has unsaved changes.
/// </summary>
/// <summary>
/// True if the project is actively building.
/// </summary>
/// <summary>
/// The view this controller is attached to.
/// </summary>
/// <summary>
/// Triggered when the project starts loading.
/// </summary>
/// <summary>
/// Triggered when the project finishes loading.
/// </summary>
/// <summary>
/// Notify controller that a property of Project or its contents has been modified.
/// </summary>
/// <summary>
/// Notify controller that Project.References has been modified.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\IncludeItem.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// This class is used for IncludeAction file handling.
/// </summary>
/// <summary>
/// Gets or sets the source path.
/// </summary>
/// <value>The source path, should be an absolute path.</value>
/// <summary>
/// Gets or sets the relative destination path.
/// </summary>
/// <value>The relative destination path.</value>
/// <summary>
/// Gets or sets the item template.
/// 
/// Only usefull if the action is create and the item is not a directory.
/// </summary>
/// <value>The item template.</value>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\IProjectAction.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\IProjectItem.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\IProjectObserver.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\IView.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\MenuInfo.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\OutputParser.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/* 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\PipelineController.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Make sure we give the user a chance to
// save the project if they need too.
// A project needs a root directory or it is impossible to resolve relative paths.
// So we need the user to choose that location even though the project has not
// yet actually been saved to disk.
// Clear existing project data, initialize to a new blank project.
// Save the new project.
// Make sure we give the user a chance to
// save the project if they need too.
// Make sure we give the user a chance to
// save the project if they need too.
// Make sure we give the user a chance to
// save the project if they need too.
// Do we need file name?
// Do the save.
// Note: This is where a project loaded via 'new project' or 'import project' 
//       get recorded into PipelineSettings because up until this point they did not
//       exist as files on disk.
// If the project itself was selected, just
// rebuild the entire project
// Convert selected DirectoryItems into ContentItems
// Create a unique file within the same folder as
// the normal project to store this incremental build.
// Write the incremental project file limiting the
// content to just the files we want to rebuild.
// Run the build the command.
// Cleanup the temp file once we're done.
// Make sure we save first!
// Prepare the process.
// Fire off the process.
// If we got a message assume it has everything the user needs to know.
// Else we need to get verbose.
// Clear the process pointer, so that cancel
// can run after we've already finished.
/// <summary>
/// Prompt the user if they wish to save the project.
/// Save it if yes is chosen.
/// Return true if yes or no is chosen.
/// Return false if cancel is chosen.
/// </summary>
// If the project is not dirty or open
// then we can simply skip it.
// Ask the user if they want to save or cancel.
// Did we cancel the exit?
// Did we want to skip saving?
// Can't exit if we're building!
// Make sure we give the user a chance to
// save the project if they need too.
//IncludeFolder(initialDirectory, folders);
//Include(initialDirectory, files);
// If the file is in the same directory as the .mgcb file, just add it and skip showing file dialogs
// We don't want to show a delete confirmation for any items outside the project folder
// Still need to pass all items to the Exclude action so it can remove them from the view.
// Filtering is done internally so it only deletes files in the project folder
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\PipelineController.ExcludeAction.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Only delete if the item is in the project folder, otherwise we may (and have done!) delete files/folders outside of the project
// No error needed in case file is not found
//Since these items are removed from the project, manually clear the selection
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\PipelineController.IncludeAction.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Prepares the item list and creates all the neccecary files.
/// </summary>
// This is only a valid action for files
// Always keep Unix slashes in the .mgcb files for cross platform compatibility
// Generate file list and populate item list
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\PipelineController.MoveAction.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\PipelineController.UpdateProcessorAction.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\PipelineController.UpdatePropertyAction.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\PipelineProject.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\PipelineProjectParser.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// make sure working dir is recognized
// Allow a MGCB file containing the /rebuild parameter to be imported without error
// Allow a MGCB file containing the /clean parameter to be imported without error
// Do we error out or something?
// Make sure the source file is relative to the project.
// Do we have a duplicate?
// Replace the duplicate.
// Create the item for processing later.
// Copy the current processor parameters blind as we
// will validate and remove invalid parameters during
// the build process later.
// Make sure the source file is relative to the project.
// Remove duplicates... keep this new one.
// Create the item for processing later.
// Copy the current processor parameters blind as we
// will validate and remove invalid parameters during
// the build process later.
// Store the file name for saving later.
// Sort the items alphabetically to ensure a consistent output
// and better mergability of the resulting MGCB file.
// Reject any items that don't pass the filter.              
// Wrap content item lines with a begin comment line
// to make them more cohesive (for version control).                  
// Write importer.
// Write processor.
// Write processor parameters.
// Could still be missing the real processor.
// If so, write the string parameters from import.
// Otherwise, write only values which are defined by the real processor.
// JCF: I 'think' writting an empty string for null would be appropriate but to be on the safe side
//      im just not writting the value at all.
// process sub nodes
// process sub nodes here.
// process sub nodes here.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\PipelineSettings.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// If the project already exists in history, it will be moved to the end.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\PipelineTypes.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Make sure we're not adding the same assembly twice.
// Find the abstract base class ContentImporter<T>.
//Debug.Fail(string.Format("Importer not found! name={0}, ext={1}", name, fileExtension));
//Debug.Fail(string.Format("Importer not found! name={0}, ext={1}", name, fileExtension));
//Debug.Fail(string.Format("Processor not found! name={0}, importer={1}", name, importer));
//Debug.Fail(string.Format("Processor not found! name={0}, importer={1}", name, importer));
// ??
//Logger.LogWarning(null, null, "Failed to load assembly '{0}': {1}", assemblyPath, e.Message);
// The assembly failed to load... nothing
// we can do but ignore it.
// If no attribute specify default one
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\ProjectState.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Snapshot of a PipelineProject's state, used for undo/redo.
/// </summary>
/// <summary>
/// Create a ProjectState storing member values of the passed PipelineProject.
/// </summary>        
/// <summary>
/// Set a PipelineProject's member values from this state object.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\StringExtensions.cs
// JCF: XmlReader already does this.
/*
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Common\Util.cs
// resolve symlinks on Unix systems
/// <summary>        
/// Returns the path 'filspec' made relative path 'folder'.
/// 
/// If 'folder' is not an absolute path, throws ArgumentException.
/// If 'filespec' is not an absolute path, returns 'filespec' unmodified.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\BuildItem.cs
// Draw Background
// Draw Icon
// Draw Text
// Draw Expander
//g.FillRectangle(_expandSelected ? DrawInfo.HoverBackColor : DrawInfo.BorderColor, rectangle);
// Draw Description
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\BuildOutput.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Skip Skipped items
// Skip Successful items
// Skip Cleaned items
// Check if the item is in the visible rectangle
// Check if the item is selected
// Draw item
// Add border
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\BuildOutput.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\DrawInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\Pad.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\Pad.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\ProjectControl.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Does nothing right now 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyGridControl.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyGridControl.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyGridTable.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Draw separator for not filled rows
// Draw group
// Draw cell
// Draw separator for the current row
// TODO: Group collapsing/expanding?
// force size reallocation
// TODO: Subtract sctollbar size
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyGridTable.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyCells\CellBase.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyCells\CellBool.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyCells\CellChar.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyCells\CellColor.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyCells\CellCombo.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyCells\CellNumber.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyCells\CellPath.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyCells\CellRefs.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Controls\PropertyCells\CellText.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\AddItemDialog.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\AddItemDialog.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\DeleteDialog.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\DeleteDialog.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\EditDialog.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\EditDialog.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\NewItemDialog.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// We need to delay setting of text color because
// GTK doesn't load text color during initialization
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\NewItemDialog.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\PathDialog.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\PathDialog.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\ReferenceDialog.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Dialogs\ReferenceDialog.eto.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Launcher\Program.Launcher.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// The main entry point for the application.
/// </summary>
/// <summary>
/// The launcher's CLI wraps the platform-specific app and operates depending on the inputs:
///   - If CLI options were used, the launcher waits for the child to exit and pipes output and errors back out.
///   - If no options were used or only the 'project' argument was used, the launcher starts and detaches the child.
/// </summary>
// Assemble the platform app process with the same arguments.
// If we're not detaching, pipe output back to the console.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Linux\FileAssociation.Linux.cs
// System directories.
// Content files.
// Copy the icon.
// Update the GTK icon cache.
// Resolve a dotnet ProcessStartInfo to get the commands and arguments to register.
// Read and update the .desktop file.
// Write and install the .desktop file.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Linux\Global.Linux.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Linux\Styles.Linux.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/*Connect(MainWindow.Instance.cmdNew, Gdk.Key.N, Gdk.ModifierType.ControlMask);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Mac\FileAssociation.Mac.cs
// Assuming we're running in .app/Contents/MacOS, go back up to the .app
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Mac\Global.Mac.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Mac\Styles.Mac.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Utilities\CommandLineParser.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Build the parser with a handler, arguments, options, and middleware.
// Parameters to the handler are matched by name to the arguments and options below.
// https://github.com/dotnet/command-line-api/wiki/How-To#Pass-parameters-to-a-method
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Utilities\ICommandLineInterface.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Utilities\ProcessStartInfoExtensions.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Modifies the <see cref="ProcessStartInfo"/> FileName and Arguments to call the .NET Core App in the best way for the platform.
/// A different method may be chosen if the caller intends to wait for the process to exit
/// (e.g. choosing a .app's inner executable on Mac).
/// </summary>
// Resolve the app.
// Set the command and arguments.
// In case we're running in the .app/Contents/MacOS folder, search back up in the root folder.
// Since the dotnet assemblies can be unpacked from the app in different locations, use the process file instead.
// If waitForExit, get the executable out of the app bundle.
// Otherwise use the .app itself.
/// <summary>
/// Utilities for finding the "dotnet.exe" file from the currently running .NET Core application
/// <see cref="https://github.com/dotnet/aspnetcore/blob/master/src/Shared/CommandLineUtils/Utilities/DotNetMuxer.cs"/>
/// </summary>
/// <summary>
/// The full filepath to the .NET Core muxer.
/// </summary>
/// <summary>
/// Finds the full filepath to the .NET Core muxer,
/// or returns a string containing the default name of the .NET Core muxer ('dotnet').
/// </summary>
/// <returns>The path or a string named 'dotnet'.</returns>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Windows\FileAssociation.Windows.cs
// Used to refresh Explorer windows after the registry is updated.
// Resolve a dotnet ProcessStartInfo to get the commands and arguments to register.
// Refresh Windows explorer.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Windows\Global.Windows.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Content.Builder.Editor\Platform\Windows\Styles.Windows.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\GraphicsDevice.cs
// Dummy class for mgfxc to compile.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Program.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// We don't support running MGFXC on Unix platforms
// however Wine can be used to make it work so lets try that.
// Validate the input file exits.
// TODO: This would be where we would decide the user
// is trying to convert an FX file to a MGFX glsl file.
//
// For now we assume we're going right to a compiled MGFXO file.
// Parse the MGFX file expanding includes, macros, and returning the techniques.
// Create the effect object.
// Write the compiler errors and warnings and let the user know what happened.
// First write all the compiler errors and warnings.
// If we have an exception message then write that.
// Let the user know what happened.
// Get the output file path.
// Write out the effect to a runtime format.
// We finished succesfully.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\WineHelper.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\CommandLineParser.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Reusable, reflection based helper for parsing commandline options.
//
// From Shawn Hargreaves Blog:
// http://blogs.msdn.com/b/shawnhar/archive/2012/04/20/a-reusable-reflection-based-command-line-parser.aspx
//
// Constructor.
// Reflect to find what commandline options are available.
// Record a required option.
// Record an optional option.
// Parse each argument in turn.
// Make sure we got all the required options.
// Parse the next non escaped argument.
// After the first escaped argument we can no
// longer read non-escaped arguments.
// Parse an optional argument.
// Append this value to a list of options.
// Set the value of a single option.
// Used on optionsObject fields to indicate which options are required.
// Used on an optionsObject field to rename the corresponding commandline option.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ConstantBufferData.cs
// If the names of the constant buffers don't
// match then consider them different right off 
// the bat... even if their parameters are the same.
// Do we have the same count of parameters and size?
// Compare the parameters themselves.
// Check the importaint bits.
// These are equal.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ConstantBufferData.mojo.cs
// Create the parameter.
// TODO: How do i do this with only MojoShader?
// HACK: We don't have real default parameters from mojoshader! 
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ConstantBufferData.sharpdx.cs
// Gather all the parameters.
// Sort them by the offset for some consistent results.
// Store the parameter offsets.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ConstantBufferData.writer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\EffectObject.cs
/// <summary>
/// The shared state definition table.
/// </summary>
/* 0x0 */
/* 0x10 */
/* 0x20 */
/* 0x30 */
/* 0x40 */
/* 0x50 */
/* 0x60 */
/* Texture stages */
/* 0x70 */
/* */
/* NPatchMode */
/* */
/* Transform */
/* Material */
/* 0x80 */
/* Light */
/* 0x90 */
/* Ligthenable */
/* Vertexshader */
/* Pixelshader */
/* Shader constants */
/* 0xa0 */
/* Texture */
/* Sampler states */
/* 0xb0 */
/* Set sampler */
// These are filled out as we process stuff.
// Go thru the techniques and that will find all the 
// shaders and constant buffers.
// Make the list of parameters by combining all the
// constant buffers ignoring the buffer offsets.
// TODO: Make sure the type and size of 
// the parameter match up!
// Add the texture parameters from the samplers.
// Store the index for runtime lookup.
// TODO: Make sure the type and size of 
// the parameter match up!
// TODO: Annotations are part of the .FX format and
// not a part of shaders... we need to implement them
// in our mgfx parser if we want them back.
// Compile and create the shader.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\EffectObject.hlsl.cs
// While we never allow preshaders, this flag is invalid for
// the DX11 shader compiler which doesn't allow preshaders
// in the first place.
//shaderFlags |= SharpDX.D3DCompiler.ShaderFlags.NoPreshader;
// Compile the shader into bytecode.                
// Store all the errors and warnings to log out later.
//var source = shaderByteCode.Disassemble();
// Return a copy of the shader bytecode.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\EffectObject.pssl.cs
// This is only part of the private PS4 repository.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\EffectObject.writer.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Writes the effect for loading later.
/// </summary>
// Write a very simple header for identification and versioning.
// Write an simple identifier for DX11 vs GLSL
// so we can easily detect the correct shader type.
// Write the rest to a memory stream.
// Write all the constant buffers.
// Write all the shaders.
// Write the parameters.
// Write the techniques.
// Write the passes.
// Write the index for the vertex and pixel shaders.
// Write the state objects too!
// Calculate a hash code from memory stream
// and write it to the header.
//write content from memory stream to final stream.
// Write the elements or struct members.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\IEffectCompilerOutput.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\MarshalHelper.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\MojoShader.cs
/// _INCL_MOJOSHADER_H_ -> 
/// Error generating expression: Value cannot be null.
///Parameter name: node
/// _INCL_MOJOSHADER_VERSION_H_ -> 
/// Error generating expression: Value cannot be null.
///Parameter name: node
/// MOJOSHADER_VERSION -> 1111
/// MOJOSHADER_CHANGESET -> "hg-1111:91a6af79b5e4"
/// MOJOSHADER_POSITION_NONE -> (-3)
/// MOJOSHADER_POSITION_BEFORE -> (-2)
/// MOJOSHADER_POSITION_AFTER -> (-1)
/// MOJOSHADER_PROFILE_D3D -> "d3d"
/// MOJOSHADER_PROFILE_BYTECODE -> "bytecode"
/// MOJOSHADER_PROFILE_GLSL -> "glsl"
/// MOJOSHADER_PROFILE_GLSL120 -> "glsl120"
/// MOJOSHADER_PROFILE_ARB1 -> "arb1"
/// MOJOSHADER_PROFILE_NV2 -> "nv2"
/// MOJOSHADER_PROFILE_NV3 -> "nv3"
/// MOJOSHADER_PROFILE_NV4 -> "nv4"
/// MOJOSHADER_SRC_PROFILE_HLSL_VS_1_1 -> "hlsl_vs_1_1"
/// MOJOSHADER_SRC_PROFILE_HLSL_VS_2_0 -> "hlsl_vs_2_0"
/// MOJOSHADER_SRC_PROFILE_HLSL_VS_3_0 -> "hlsl_vs_3_0"
/// MOJOSHADER_SRC_PROFILE_HLSL_PS_1_1 -> "hlsl_ps_1_1"
/// MOJOSHADER_SRC_PROFILE_HLSL_PS_1_2 -> "hlsl_ps_1_2"
/// MOJOSHADER_SRC_PROFILE_HLSL_PS_1_3 -> "hlsl_ps_1_3"
/// MOJOSHADER_SRC_PROFILE_HLSL_PS_1_4 -> "hlsl_ps_1_4"
/// MOJOSHADER_SRC_PROFILE_HLSL_PS_2_0 -> "hlsl_ps_2_0"
/// MOJOSHADER_SRC_PROFILE_HLSL_PS_3_0 -> "hlsl_ps_3_0"
// MOJOSHADER_AST_DATATYPE_CONST -> (1 << 31)
/// MOJOSHADER_uniformType->Anonymous_cf91fd71_65e4_4c31_a6d5_9488d7f3d32a
/// int
/// int
/// int
/// char*
/// MOJOSHADER_uniformType->Anonymous_cf91fd71_65e4_4c31_a6d5_9488d7f3d32a
/// int
/// Anonymous_5371dd6a_e42a_47c1_91d1_a2af9a8283be
/// MOJOSHADER_samplerType->Anonymous_a752a39b_b479_42b0_9502_e39ba7d86100
/// int
/// char*
/// int
/// int
/// MOJOSHADER_samplerType->Anonymous_a752a39b_b479_42b0_9502_e39ba7d86100
/// MOJOSHADER_usage->Anonymous_9c01433d_7bb5_4c50_bf77_e65cef0661b5
/// int
/// char*
/// MOJOSHADER_usage->Anonymous_9c01433d_7bb5_4c50_bf77_e65cef0661b5
/// unsigned int
/// unsigned char[4]
/// MOJOSHADER_symbolClass->Anonymous_681c4b26_94f7_4142_a8e9_b970fe0b60df
/// MOJOSHADER_symbolType->Anonymous_d8534f21_7f44_465d_8843_40a435dbb54a
/// unsigned int
/// unsigned int
/// unsigned int
/// unsigned int
/// MOJOSHADER_symbolStructMember*
/// char*
/// MOJOSHADER_symbolTypeInfo
/// char*
/// MOJOSHADER_symbolRegisterSet->Anonymous_9ff7ac54_131c_43b0_a295_9830d24ac76b
/// unsigned int
/// unsigned int
/// MOJOSHADER_symbolTypeInfo
/// char*
/// char*
/// int
/// MOJOSHADER_PRESHADEROP_MIN_SCALAR -> MOJOSHADER_PRESHADEROP_SCALAR_OPS
/// MOJOSHADER_PRESHADEROPERAND_LITERAL -> 1
/// MOJOSHADER_PRESHADEROPERAND_INPUT -> 2
/// MOJOSHADER_PRESHADEROPERAND_OUTPUT -> 4
/// MOJOSHADER_PRESHADEROPERAND_TEMP -> 7
/// MOJOSHADER_PRESHADEROPERAND_UNKN -> 0xff
/// MOJOSHADER_preshaderOperandType
/// unsigned int
/// int
/// unsigned int
/// MOJOSHADER_preshaderOpcode
/// unsigned int
/// unsigned int
/// MOJOSHADER_preshaderOperand[4]
/// unsigned int
/// double*
/// unsigned int
/// unsigned int
/// MOJOSHADER_symbol*
/// unsigned int
/// MOJOSHADER_preshaderInstruction*
/// int
/// MOJOSHADER_error*
/// char*
/// char*
/// int
/// int
/// MOJOSHADER_shaderType->Anonymous_96517ad6_cc69_4542_8537_054e63919d54
/// int
/// int
/// int
/// MOJOSHADER_uniform*
/// int
/// MOJOSHADER_constant*
/// int
/// MOJOSHADER_sampler*
/// int
/// MOJOSHADER_attribute*
/// int
/// MOJOSHADER_attribute*
/// int
/// MOJOSHADER_swizzle*
/// int
/// MOJOSHADER_symbol*
/// MOJOSHADER_preshader*
/// MOJOSHADER_malloc
/// MOJOSHADER_free
/// void*
/// char*
/// char*
/// unsigned int
/// char*
/// unsigned int
/// MOJOSHADER_effectState*
/// char*
/// unsigned int
/// MOJOSHADER_effectPass*
/// unsigned int
/// char*
/// unsigned int
/// unsigned int
/// MOJOSHADER_parseData*
/// int
/// MOJOSHADER_error*
/// char*
/// int
/// MOJOSHADER_effectParam*
/// int
/// MOJOSHADER_effectTechnique*
/// int
/// MOJOSHADER_effectTexture*
/// int
/// MOJOSHADER_effectShader*
/// MOJOSHADER_malloc
/// MOJOSHADER_free
/// void*
/// char*
/// char*
/// int
/// MOJOSHADER_error*
/// char*
/// int
/// MOJOSHADER_malloc
/// MOJOSHADER_free
/// void*
/// Return Type: int
///inctype: MOJOSHADER_includeType->Anonymous_f1eed39d_7d1b_46d4_972e_a3229d15c26e
///fname: char*
///parent: char*
///outdata: char**
///outbytes: unsigned int*
///m: MOJOSHADER_malloc
///f: MOJOSHADER_free
///d: void*
/// Return Type: void
///data: char*
///m: MOJOSHADER_malloc
///f: MOJOSHADER_free
///d: void*
/// MOJOSHADER_astDataType*
/// char*
/// MOJOSHADER_astDataTypeType
/// MOJOSHADER_astDataTypeStructMember*
/// int
/// MOJOSHADER_astDataTypeType
/// MOJOSHADER_astDataType*
/// int
/// MOJOSHADER_astDataTypeType
/// MOJOSHADER_astDataType*
/// int
/// int
/// MOJOSHADER_astDataTypeType
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astDataTypeType
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astDataType**
/// int
/// int
/// MOJOSHADER_astDataTypeType
/// MOJOSHADER_astDataType*
/// char*
/// MOJOSHADER_astDataTypeType
/// MOJOSHADER_astDataTypeArray
/// MOJOSHADER_astDataTypeStruct
/// MOJOSHADER_astDataTypeVector->MOJOSHADER_astDataTypeArray
/// MOJOSHADER_astDataTypeMatrix
/// MOJOSHADER_astDataTypeBuffer
/// MOJOSHADER_astDataTypeUser
/// MOJOSHADER_astDataTypeFunction
/// MOJOSHADER_astNodeType
/// char*
/// unsigned int
// MOJOSHADER_AST_VARATTR_EXTERN -> (1<<0)
// MOJOSHADER_AST_VARATTR_NOINTERPOLATION -> (1<<1)
// MOJOSHADER_AST_VARATTR_SHARED -> (1<<2)
// MOJOSHADER_AST_VARATTR_STATIC -> (1<<3)
// MOJOSHADER_AST_VARATTR_UNIFORM -> (1<<4)
// MOJOSHADER_AST_VARATTR_VOLATILE -> (1<<5)
// MOJOSHADER_AST_VARATTR_CONST -> (1<<6)
// MOJOSHADER_AST_VARATTR_ROWMAJOR -> (1<<7)
// MOJOSHADER_AST_VARATTR_COLUMNMAJOR -> (1<<8)
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astArguments*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// char*
/// int
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// int
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// double
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// char*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// int
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astArguments*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astExpression*
/// char*
/// int
/// int
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astExpressionIdentifier*
/// MOJOSHADER_astArguments*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astCompilationUnit*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astInputModifier
/// char*
/// char*
/// MOJOSHADER_astInterpolationModifier
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astFunctionParameters*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// char*
/// MOJOSHADER_astFunctionParameters*
/// MOJOSHADER_astFunctionStorageClass
/// char*
/// MOJOSHADER_astNodeInfo
/// char*
/// int
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astAnnotations*
/// MOJOSHADER_astNodeInfo
/// char*
/// char*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astPackOffset*
/// char*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// char*
/// MOJOSHADER_astScalarOrArray*
/// MOJOSHADER_astInterpolationModifier
/// MOJOSHADER_astStructMembers*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// char*
/// MOJOSHADER_astStructMembers*
/// MOJOSHADER_astNodeInfo
/// int
/// MOJOSHADER_astDataType*
/// MOJOSHADER_astStructDeclaration*
/// MOJOSHADER_astScalarOrArray*
/// char*
/// MOJOSHADER_astAnnotations*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astVariableLowLevel*
/// MOJOSHADER_astVariableDeclaration*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astStatement*
/// int
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astSwitchCases*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astStatement*
/// int
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astSwitchCases*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astStatement*
/// int
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astStatement*
/// int
/// MOJOSHADER_astVariableDeclaration*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astExpression*
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astDataType*
/// int
/// MOJOSHADER_astScalarOrArray*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astTypedef*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astVariableDeclaration*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astStatement*
/// MOJOSHADER_astStructDeclaration*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astCompilationUnit*
/// MOJOSHADER_astFunctionSignature*
/// MOJOSHADER_astStatement*
/// int
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astCompilationUnit*
/// MOJOSHADER_astTypedef*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astCompilationUnit*
/// MOJOSHADER_astStructDeclaration*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astCompilationUnit*
/// MOJOSHADER_astVariableDeclaration*
/// MOJOSHADER_astNodeInfo
/// MOJOSHADER_astGeneric
/// MOJOSHADER_astExpression
/// MOJOSHADER_astArguments
/// MOJOSHADER_astExpressionUnary
/// MOJOSHADER_astExpressionBinary
/// MOJOSHADER_astExpressionTernary
/// MOJOSHADER_astExpressionIdentifier
/// MOJOSHADER_astExpressionIntLiteral
/// MOJOSHADER_astExpressionFloatLiteral
/// MOJOSHADER_astExpressionStringLiteral
/// MOJOSHADER_astExpressionBooleanLiteral
/// MOJOSHADER_astExpressionConstructor
/// MOJOSHADER_astExpressionDerefStruct
/// MOJOSHADER_astExpressionCallFunction
/// MOJOSHADER_astExpressionCast
/// MOJOSHADER_astCompilationUnit
/// MOJOSHADER_astFunctionParameters
/// MOJOSHADER_astFunctionSignature
/// MOJOSHADER_astScalarOrArray
/// MOJOSHADER_astAnnotations
/// MOJOSHADER_astPackOffset
/// MOJOSHADER_astVariableLowLevel
/// MOJOSHADER_astStructMembers
/// MOJOSHADER_astStructDeclaration
/// MOJOSHADER_astVariableDeclaration
/// MOJOSHADER_astStatement
/// MOJOSHADER_astEmptyStatement->MOJOSHADER_astStatement
/// MOJOSHADER_astBreakStatement->MOJOSHADER_astStatement
/// MOJOSHADER_astContinueStatement->MOJOSHADER_astStatement
/// MOJOSHADER_astDiscardStatement->MOJOSHADER_astStatement
/// MOJOSHADER_astBlockStatement
/// MOJOSHADER_astReturnStatement
/// MOJOSHADER_astExpressionStatement
/// MOJOSHADER_astIfStatement
/// MOJOSHADER_astSwitchCases
/// MOJOSHADER_astSwitchStatement
/// MOJOSHADER_astWhileStatement
/// MOJOSHADER_astDoStatement->MOJOSHADER_astWhileStatement
/// MOJOSHADER_astForStatement
/// MOJOSHADER_astTypedef
/// MOJOSHADER_astTypedefStatement
/// MOJOSHADER_astVarDeclStatement
/// MOJOSHADER_astStructStatement
/// MOJOSHADER_astCompilationUnitFunction
/// MOJOSHADER_astCompilationUnitTypedef
/// MOJOSHADER_astCompilationUnitStruct
/// MOJOSHADER_astCompilationUnitVariable
/// int
/// MOJOSHADER_error*
/// char*
/// MOJOSHADER_astNode*
/// MOJOSHADER_malloc
/// MOJOSHADER_free
/// void*
/// void*
/// MOJOSHADER_irNodeType
/// char*
/// unsigned int
/// MOJOSHADER_irNodeInfo
/// MOJOSHADER_irNodeInfo
/// MOJOSHADER_astDataTypeType
/// int
/// MOJOSHADER_irExprInfo
/// Anonymous_3a13e6d2_72d8_4c86_b5bf_9aff36c73111
/// MOJOSHADER_irExprInfo
/// int
/// MOJOSHADER_irExprInfo
/// MOJOSHADER_irBinOpType
/// MOJOSHADER_irExpression*
/// MOJOSHADER_irExpression*
/// MOJOSHADER_irExprInfo
/// int
/// MOJOSHADER_irExprInfo
/// int
/// MOJOSHADER_irExprList*
/// MOJOSHADER_irExprInfo
/// MOJOSHADER_irStatement*
/// MOJOSHADER_irExpression*
/// MOJOSHADER_irExprInfo
/// MOJOSHADER_irExpression*
/// MOJOSHADER_irExpression*
/// MOJOSHADER_irExprInfo
/// MOJOSHADER_irExpression*
/// MOJOSHADER_irExprInfo
/// MOJOSHADER_irExpression*
/// char[4]
/// MOJOSHADER_irExprInfo
/// MOJOSHADER_irExprList*
/// MOJOSHADER_irNodeInfo
/// MOJOSHADER_irExprInfo
/// MOJOSHADER_irConstant
/// MOJOSHADER_irTemp
/// MOJOSHADER_irBinOp
/// MOJOSHADER_irMemory
/// MOJOSHADER_irCall
/// MOJOSHADER_irESeq
/// MOJOSHADER_irArray
/// MOJOSHADER_irConvert
/// MOJOSHADER_irSwizzle
/// MOJOSHADER_irConstruct
/// MOJOSHADER_irNodeInfo
/// MOJOSHADER_irExpression*
/// MOJOSHADER_irExpression*
/// int
/// MOJOSHADER_irNodeInfo
/// MOJOSHADER_irExpression*
/// MOJOSHADER_irNodeInfo
/// int
/// MOJOSHADER_irNodeInfo
/// MOJOSHADER_irConditionType
/// MOJOSHADER_irExpression*
/// MOJOSHADER_irExpression*
/// int
/// int
/// MOJOSHADER_irNodeInfo
/// MOJOSHADER_irStatement*
/// MOJOSHADER_irStatement*
/// MOJOSHADER_irNodeInfo
/// int
/// MOJOSHADER_irNodeInfo
/// MOJOSHADER_irGeneric
/// MOJOSHADER_irMove
/// MOJOSHADER_irExprStmt
/// MOJOSHADER_irJump
/// MOJOSHADER_irCJump
/// MOJOSHADER_irSeq
/// MOJOSHADER_irLabel
/// MOJOSHADER_irDiscard->MOJOSHADER_irGeneric
/// MOJOSHADER_irNodeInfo
/// MOJOSHADER_irExpression*
/// MOJOSHADER_irExprList*
/// MOJOSHADER_irNodeInfo
/// MOJOSHADER_irGeneric
/// MOJOSHADER_irExprList
/// MOJOSHADER_irNodeInfo
/// MOJOSHADER_irGeneric
/// MOJOSHADER_irExpression
/// MOJOSHADER_irStatement
/// MOJOSHADER_irMisc
/// int
/// MOJOSHADER_error*
/// int
/// MOJOSHADER_error*
/// char*
/// char*
/// int
/// int
/// MOJOSHADER_symbol*
/// MOJOSHADER_malloc
/// MOJOSHADER_free
/// void*
/// Return Type: void*
///fnname: char*
///data: void*
/// float[4]
/// int[4]
/// int
/// int[16]
/// float[16]
/// MOJOSHADER_UNIFORM_UNKNOWN -> -1
/// MOJOSHADER_SAMPLER_UNKNOWN -> -1
/// MOJOSHADER_USAGE_UNKNOWN -> -1
// MOJOSHADER_TYPE_UNKNOWN -> 0
// MOJOSHADER_TYPE_PIXEL -> (1<<0)
// MOJOSHADER_TYPE_VERTEX -> (1<<1)
// MOJOSHADER_TYPE_GEOMETRY -> (1<<2)
// MOJOSHADER_TYPE_ANY -> 0xFFFFFFFF
// MOJOSHADER_ATTRIBUTE_UNKNOWN -> -1
/// Return Type: int
/// Return Type: char*
/// Return Type: int
///profile: char*
/// Return Type: MOJOSHADER_parseData*
///tokenbuf: char*
///bufsize: int
///m: MOJOSHADER_malloc
///f: MOJOSHADER_free
///d: void*
/// Return Type: void
///param0: MOJOSHADER_preshader*
///param1: float*
///param2: float*
/// Return Type: MOJOSHADER_parseData*
///profile: char*
///tokenbuf: char*
///bufsize: int
///swiz: MOJOSHADER_swizzle*
///swizcount: int
///smap: MOJOSHADER_samplerMap*
///smapcount: int
///m: MOJOSHADER_malloc
///f: MOJOSHADER_free
///d: void*
/// Return Type: void
///data: MOJOSHADER_parseData*
/// Return Type: MOJOSHADER_effect*
///profile: char*
///buf: char*
///_len: int
///swiz: MOJOSHADER_swizzle*
///swizcount: int
///smap: MOJOSHADER_samplerMap*
///smapcount: int
///m: MOJOSHADER_malloc
///f: MOJOSHADER_free
///d: void*
/// Return Type: void
///effect: MOJOSHADER_effect*
/// Return Type: MOJOSHADER_preprocessData*
///filename: char*
///source: char*
///sourcelen: unsigned int
///defines: MOJOSHADER_preprocessorDefine*
///define_count: unsigned int
///include_open: MOJOSHADER_includeOpen
///include_close: MOJOSHADER_includeClose
///m: MOJOSHADER_malloc
///f: MOJOSHADER_free
///d: void*
/// Return Type: void
///data: MOJOSHADER_preprocessData*
/// Return Type: MOJOSHADER_parseData*
///filename: char*
///source: char*
///sourcelen: unsigned int
///comments: char**
///comment_count: unsigned int
///symbols: MOJOSHADER_symbol*
///symbol_count: unsigned int
///defines: MOJOSHADER_preprocessorDefine*
///define_count: unsigned int
///include_open: MOJOSHADER_includeOpen
///include_close: MOJOSHADER_includeClose
///m: MOJOSHADER_malloc
///f: MOJOSHADER_free
///d: void*
/// Return Type: MOJOSHADER_astData*
///srcprofile: char*
///filename: char*
///source: char*
///sourcelen: unsigned int
///defs: MOJOSHADER_preprocessorDefine*
///define_count: unsigned int
///include_open: MOJOSHADER_includeOpen
///include_close: MOJOSHADER_includeClose
///m: MOJOSHADER_malloc
///f: MOJOSHADER_free
///d: void*
/// Return Type: void
///data: MOJOSHADER_astData*
/// Return Type: MOJOSHADER_compileData*
///srcprofile: char*
///filename: char*
///source: char*
///sourcelen: unsigned int
///defs: MOJOSHADER_preprocessorDefine*
///define_count: unsigned int
///include_open: MOJOSHADER_includeOpen
///include_close: MOJOSHADER_includeClose
///m: MOJOSHADER_malloc
///f: MOJOSHADER_free
///d: void*
/// Return Type: void
///data: MOJOSHADER_compileData*
/// Return Type: int
///lookup: MOJOSHADER_glGetProcAddress
///d: void*
///profs: char**
///size: int
/// Return Type: char*
///lookup: MOJOSHADER_glGetProcAddress
///d: void*
/// Return Type: char*
/// Return Type: int
///shader_type: MOJOSHADER_shaderType->Anonymous_96517ad6_cc69_4542_8537_054e63919d54
/// Return Type: void
///idx: unsigned int
///data: float*
///vec4count: unsigned int
/// Return Type: void
///idx: unsigned int
///data: float*
///vec4count: unsigned int
/// Return Type: void
///idx: unsigned int
///data: int*
///ivec4count: unsigned int
/// Return Type: void
///idx: unsigned int
///data: int*
///ivec4count: unsigned int
/// Return Type: void
///idx: unsigned int
///data: int*
///bcount: unsigned int
/// Return Type: void
///idx: unsigned int
///data: int*
///bcount: unsigned int
/// Return Type: void
///idx: unsigned int
///data: float*
///vec4count: unsigned int
/// Return Type: void
///idx: unsigned int
///data: float*
///vec4count: unsigned int
/// Return Type: void
///idx: unsigned int
///data: int*
///ivec4count: unsigned int
/// Return Type: void
///idx: unsigned int
///data: int*
///ivec4count: unsigned int
/// Return Type: void
///idx: unsigned int
///data: int*
///bcount: unsigned int
/// Return Type: void
///idx: unsigned int
///data: int*
///bcount: unsigned int
/// Return Type: void
///sampler: unsigned int
///mat00: float
///mat01: float
///mat10: float
///mat11: float
///lscale: float
///loffset: float
/// Return Type: void
///usage: MOJOSHADER_usage->Anonymous_9c01433d_7bb5_4c50_bf77_e65cef0661b5
///index: int
///size: unsigned int
///type: MOJOSHADER_attributeType->Anonymous_2f2591e6_1657_418c_9f54_80f3acd43cbe
///normalized: int
///stride: unsigned int
///ptr: void*
/// Return Type: void
///idx: unsigned int
///data: float*
///vec4n: unsigned int
/// Return Type: void
///idx: unsigned int
///data: float*
///vec4n: unsigned int
/// Return Type: void
///idx: unsigned int
///data: float*
///vec4n: unsigned int
/// Return Type: void
///idx: unsigned int
///data: float*
///vec4n: unsigned int
/// Return Type: void
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\Options.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\Preprocessor.cs
//--WORKAROUND#line");
//--WORKAROUND#line"))
//--WORKAROUND#line", "#line"));
// Need to preserve line breaks so that line numbers are correct.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ShaderCompilerException.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ShaderData.cs
/// <summary>
/// The index to the constant buffers which are 
/// required by this shader at runtime.
/// </summary>
// The index of the shader in the shared list.
// Non-Serialized Stuff
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ShaderData.mojo.cs
// Use MojoShader to convert the HLSL bytecode to GLSL.
// Conver the attributes.
//
// TODO: Could this be done using DX shader reflection?
//
//try to put the symbols in the order they are eventually packed into the uniform arrays
//this /should/ be done by pulling the info from mojoshader
//hax. mojoshader puts array objects first
//(a, b) => ((int)(a.info.elements > 1))a.register_index.CompareTo(b.register_index));
// NOTE: It seems the latest versions of MojoShader only 
// output vec4 register sets.  We leave the code below, but
// the runtime has been optimized for this case.
// For whatever reason the register indexing is 
// incorrect from MojoShader.
// Get the samplers.
// We need the original sampler name... look for that in the symbols.
//sampler mapping to parameter is unknown atm
// GLSL needs the MojoShader mangled sampler name.
// By default use the original sampler name for the parameter name.
// Store the sampler.
// Gather all the parameters used by this shader.
// TODO: This sort of sucks... why does MojoShader not produce
// code valid for GLES out of the box?
// GLES platforms do not like this.
// Add the required precision specifiers for GLES.
// Enable standard derivatives extension as necessary
// Store the code for serialization.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ShaderData.pssl.cs
// This is only part of the private PS4 repository.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ShaderData.sharpdx.cs
// Strip the bytecode we're gonna save!
// Strip the bytecode for saving to disk.
// Only SM4 and above works with strip... so this can return null!
// TODO: There is a way to strip SM3 and below
// but we have to write the method ourselves.
// 
// If we need to support it then consider porting
// this code over...
//
// http://entland.homelinux.com/blog/2009/01/15/stripping-comments-from-shader-bytecodes/
//
// Use reflection to get details of the shader.
// Get the samplers.
// Find sampler slot, which can be different from the texture slot.
// Gather all the constant buffers used by this shader.
// Look for a duplicate cbuffer in the list.
// Add a new cbuffer.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ShaderData.writer.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ShaderProfile.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
/// <summary>
/// Returns all the loaded shader profiles.
/// </summary>
/// <summary>
/// Returns the name of the shader profile.
/// </summary>
/// <summary>
/// Returns the format identifier used in the MGFX file format.
/// </summary>
/// <summary>
/// Returns the profile by name or null if no match is found.
/// </summary>
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ShaderProfile.DirectX.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// First look to see if we already created this same shader.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ShaderProfile.OpenGL.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// For now GLSL is only supported via translation
// using MojoShader which works from HLSL bytecode.
// First look to see if we already created this same shader.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\ShaderResult.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// If we're building shaders for debug set that flag too.
// Use the D3DCompiler to pre-process the file resolving 
// all #includes and macros.... this even works for GLSL.
// Parse the resulting file for techniques and passes.
// Evaluate the results of the parse tree.
// Remove the samplers and techniques so that the shader compiler
// gets a clean file without any FX file syntax in it.
// Setup the rest of the shader info.
// Remove empty techniques.
// We must have at least one technique.
// Get the full content of this node.
// Replace the content of this node with whitespace.
// Add the whitespace back to the source file.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\TextureFilterType.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\TPGParser\Parser.cs
// Generated by TinyPG v1.3 available at www.codeproject.com
// Disable unused variable warnings which
// can happen during the parser generation.
// NonTerminalSymbol: Start
// Concat Rule
// ZeroOrMore Rule
// Choice Rule
// Choice Rule
// Terminal Rule: Code
// NonTerminal Rule: Technique_Declaration
// NonTerminal Rule: Sampler_Declaration
// Choice Rule
// ZeroOrMore Rule
// Concat Rule
// Terminal Rule: EndOfFile
// NonTerminalSymbol: Start
// NonTerminalSymbol: Technique_Declaration
// Concat Rule
// Terminal Rule: Technique
// Concat Rule
// Option Rule
// Terminal Rule: Identifier
// Concat Rule
// Terminal Rule: OpenBracket
// Concat Rule
// OneOrMore Rule
// NonTerminal Rule: Pass_Declaration
// OneOrMore Rule
// OneOrMore Rule
// Concat Rule
// Terminal Rule: CloseBracket
// NonTerminalSymbol: Technique_Declaration
// NonTerminalSymbol: FillMode_Solid
// Terminal Rule: Solid
// NonTerminalSymbol: FillMode_Solid
// NonTerminalSymbol: FillMode_WireFrame
// Terminal Rule: WireFrame
// NonTerminalSymbol: FillMode_WireFrame
// NonTerminalSymbol: FillModes
// Choice Rule
// Choice Rule
// NonTerminal Rule: FillMode_Solid
// NonTerminal Rule: FillMode_WireFrame
// Choice Rule
// NonTerminalSymbol: FillModes
// NonTerminalSymbol: CullMode_None
// Terminal Rule: None
// NonTerminalSymbol: CullMode_None
// NonTerminalSymbol: CullMode_Cw
// Terminal Rule: Cw
// NonTerminalSymbol: CullMode_Cw
// NonTerminalSymbol: CullMode_Ccw
// Terminal Rule: Ccw
// NonTerminalSymbol: CullMode_Ccw
// NonTerminalSymbol: CullModes
// Choice Rule
// Choice Rule
// NonTerminal Rule: CullMode_None
// NonTerminal Rule: CullMode_Cw
// NonTerminal Rule: CullMode_Ccw
// Choice Rule
// NonTerminalSymbol: CullModes
// NonTerminalSymbol: Colors_None
// Terminal Rule: None
// NonTerminalSymbol: Colors_None
// NonTerminalSymbol: Colors_Red
// Terminal Rule: Red
// NonTerminalSymbol: Colors_Red
// NonTerminalSymbol: Colors_Green
// Terminal Rule: Green
// NonTerminalSymbol: Colors_Green
// NonTerminalSymbol: Colors_Blue
// Terminal Rule: Blue
// NonTerminalSymbol: Colors_Blue
// NonTerminalSymbol: Colors_Alpha
// Terminal Rule: Alpha
// NonTerminalSymbol: Colors_Alpha
// NonTerminalSymbol: Colors_All
// Terminal Rule: All
// NonTerminalSymbol: Colors_All
// NonTerminalSymbol: Colors_Boolean
// Terminal Rule: Boolean
// NonTerminalSymbol: Colors_Boolean
// NonTerminalSymbol: Colors
// Choice Rule
// Choice Rule
// NonTerminal Rule: Colors_Red
// NonTerminal Rule: Colors_Green
// NonTerminal Rule: Colors_Blue
// NonTerminal Rule: Colors_Alpha
// NonTerminal Rule: Colors_None
// NonTerminal Rule: Colors_All
// NonTerminal Rule: Colors_Boolean
// Choice Rule
// NonTerminalSymbol: Colors
// NonTerminalSymbol: ColorsMasks
// Concat Rule
// NonTerminal Rule: Colors
// Concat Rule
// Option Rule
// Concat Rule
// Terminal Rule: Or
// Concat Rule
// NonTerminal Rule: Colors
// Concat Rule
// Option Rule
// Concat Rule
// Terminal Rule: Or
// Concat Rule
// NonTerminal Rule: Colors
// Concat Rule
// Option Rule
// Concat Rule
// Terminal Rule: Or
// Concat Rule
// NonTerminal Rule: Colors
// NonTerminalSymbol: ColorsMasks
// NonTerminalSymbol: Blend_Zero
// Terminal Rule: Zero
// NonTerminalSymbol: Blend_Zero
// NonTerminalSymbol: Blend_One
// Terminal Rule: One
// NonTerminalSymbol: Blend_One
// NonTerminalSymbol: Blend_SrcColor
// Terminal Rule: SrcColor
// NonTerminalSymbol: Blend_SrcColor
// NonTerminalSymbol: Blend_InvSrcColor
// Terminal Rule: InvSrcColor
// NonTerminalSymbol: Blend_InvSrcColor
// NonTerminalSymbol: Blend_SrcAlpha
// Terminal Rule: SrcAlpha
// NonTerminalSymbol: Blend_SrcAlpha
// NonTerminalSymbol: Blend_InvSrcAlpha
// Terminal Rule: InvSrcAlpha
// NonTerminalSymbol: Blend_InvSrcAlpha
// NonTerminalSymbol: Blend_DestAlpha
// Terminal Rule: DestAlpha
// NonTerminalSymbol: Blend_DestAlpha
// NonTerminalSymbol: Blend_InvDestAlpha
// Terminal Rule: InvDestAlpha
// NonTerminalSymbol: Blend_InvDestAlpha
// NonTerminalSymbol: Blend_DestColor
// Terminal Rule: DestColor
// NonTerminalSymbol: Blend_DestColor
// NonTerminalSymbol: Blend_InvDestColor
// Terminal Rule: InvDestColor
// NonTerminalSymbol: Blend_InvDestColor
// NonTerminalSymbol: Blend_SrcAlphaSat
// Terminal Rule: SrcAlphaSat
// NonTerminalSymbol: Blend_SrcAlphaSat
// NonTerminalSymbol: Blend_BlendFactor
// Terminal Rule: BlendFactor
// NonTerminalSymbol: Blend_BlendFactor
// NonTerminalSymbol: Blend_InvBlendFactor
// Terminal Rule: InvBlendFactor
// NonTerminalSymbol: Blend_InvBlendFactor
// NonTerminalSymbol: Blends
// Choice Rule
// Choice Rule
// NonTerminal Rule: Blend_Zero
// NonTerminal Rule: Blend_One
// NonTerminal Rule: Blend_SrcColor
// NonTerminal Rule: Blend_InvSrcColor
// NonTerminal Rule: Blend_SrcAlpha
// NonTerminal Rule: Blend_InvSrcAlpha
// NonTerminal Rule: Blend_DestAlpha
// NonTerminal Rule: Blend_InvDestAlpha
// NonTerminal Rule: Blend_DestColor
// NonTerminal Rule: Blend_InvDestColor
// NonTerminal Rule: Blend_SrcAlphaSat
// NonTerminal Rule: Blend_BlendFactor
// NonTerminal Rule: Blend_InvBlendFactor
// Choice Rule
// NonTerminalSymbol: Blends
// NonTerminalSymbol: BlendOp_Add
// Terminal Rule: Add
// NonTerminalSymbol: BlendOp_Add
// NonTerminalSymbol: BlendOp_Subtract
// Terminal Rule: Subtract
// NonTerminalSymbol: BlendOp_Subtract
// NonTerminalSymbol: BlendOp_RevSubtract
// Terminal Rule: RevSubtract
// NonTerminalSymbol: BlendOp_RevSubtract
// NonTerminalSymbol: BlendOp_Min
// Terminal Rule: Min
// NonTerminalSymbol: BlendOp_Min
// NonTerminalSymbol: BlendOp_Max
// Terminal Rule: Max
// NonTerminalSymbol: BlendOp_Max
// NonTerminalSymbol: BlendOps
// Choice Rule
// Choice Rule
// NonTerminal Rule: BlendOp_Add
// NonTerminal Rule: BlendOp_Subtract
// NonTerminal Rule: BlendOp_RevSubtract
// NonTerminal Rule: BlendOp_Min
// NonTerminal Rule: BlendOp_Max
// Choice Rule
// NonTerminalSymbol: BlendOps
// NonTerminalSymbol: CmpFunc_Never
// Terminal Rule: Never
// NonTerminalSymbol: CmpFunc_Never
// NonTerminalSymbol: CmpFunc_Less
// Terminal Rule: Less
// NonTerminalSymbol: CmpFunc_Less
// NonTerminalSymbol: CmpFunc_Equal
// Terminal Rule: Equal
// NonTerminalSymbol: CmpFunc_Equal
// NonTerminalSymbol: CmpFunc_LessEqual
// Terminal Rule: LessEqual
// NonTerminalSymbol: CmpFunc_LessEqual
// NonTerminalSymbol: CmpFunc_Greater
// Terminal Rule: Greater
// NonTerminalSymbol: CmpFunc_Greater
// NonTerminalSymbol: CmpFunc_NotEqual
// Terminal Rule: NotEqual
// NonTerminalSymbol: CmpFunc_NotEqual
// NonTerminalSymbol: CmpFunc_GreaterEqual
// Terminal Rule: GreaterEqual
// NonTerminalSymbol: CmpFunc_GreaterEqual
// NonTerminalSymbol: CmpFunc_Always
// Terminal Rule: Always
// NonTerminalSymbol: CmpFunc_Always
// NonTerminalSymbol: CmpFunc
// Choice Rule
// Choice Rule
// NonTerminal Rule: CmpFunc_Never
// NonTerminal Rule: CmpFunc_Less
// NonTerminal Rule: CmpFunc_Equal
// NonTerminal Rule: CmpFunc_LessEqual
// NonTerminal Rule: CmpFunc_Greater
// NonTerminal Rule: CmpFunc_NotEqual
// NonTerminal Rule: CmpFunc_GreaterEqual
// NonTerminal Rule: CmpFunc_Always
// Choice Rule
// NonTerminalSymbol: CmpFunc
// NonTerminalSymbol: StencilOp_Keep
// Terminal Rule: Keep
// NonTerminalSymbol: StencilOp_Keep
// NonTerminalSymbol: StencilOp_Zero
// Terminal Rule: Zero
// NonTerminalSymbol: StencilOp_Zero
// NonTerminalSymbol: StencilOp_Replace
// Terminal Rule: Replace
// NonTerminalSymbol: StencilOp_Replace
// NonTerminalSymbol: StencilOp_IncrSat
// Terminal Rule: IncrSat
// NonTerminalSymbol: StencilOp_IncrSat
// NonTerminalSymbol: StencilOp_DecrSat
// Terminal Rule: DecrSat
// NonTerminalSymbol: StencilOp_DecrSat
// NonTerminalSymbol: StencilOp_Invert
// Terminal Rule: Invert
// NonTerminalSymbol: StencilOp_Invert
// NonTerminalSymbol: StencilOp_Incr
// Terminal Rule: Incr
// NonTerminalSymbol: StencilOp_Incr
// NonTerminalSymbol: StencilOp_Decr
// Terminal Rule: Decr
// NonTerminalSymbol: StencilOp_Decr
// NonTerminalSymbol: StencilOp
// Choice Rule
// Choice Rule
// NonTerminal Rule: StencilOp_Keep
// NonTerminal Rule: StencilOp_Zero
// NonTerminal Rule: StencilOp_Replace
// NonTerminal Rule: StencilOp_IncrSat
// NonTerminal Rule: StencilOp_DecrSat
// NonTerminal Rule: StencilOp_Invert
// NonTerminal Rule: StencilOp_Incr
// NonTerminal Rule: StencilOp_Decr
// Choice Rule
// NonTerminalSymbol: StencilOp
// NonTerminalSymbol: Render_State_CullMode
// Concat Rule
// Terminal Rule: CullMode
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: CullModes
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_CullMode
// NonTerminalSymbol: Render_State_FillMode
// Concat Rule
// Terminal Rule: FillMode
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: FillModes
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_FillMode
// NonTerminalSymbol: Render_State_AlphaBlendEnable
// Concat Rule
// Terminal Rule: AlphaBlendEnable
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Boolean
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_AlphaBlendEnable
// NonTerminalSymbol: Render_State_SrcBlend
// Concat Rule
// Terminal Rule: SrcBlend
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: Blends
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_SrcBlend
// NonTerminalSymbol: Render_State_DestBlend
// Concat Rule
// Terminal Rule: DestBlend
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: Blends
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_DestBlend
// NonTerminalSymbol: Render_State_BlendOp
// Concat Rule
// Terminal Rule: BlendOp
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: BlendOps
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_BlendOp
// NonTerminalSymbol: Render_State_ColorWriteEnable
// Concat Rule
// Terminal Rule: ColorWriteEnable
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: ColorsMasks
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_ColorWriteEnable
// NonTerminalSymbol: Render_State_DepthBias
// Concat Rule
// Terminal Rule: DepthBias
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Number
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_DepthBias
// NonTerminalSymbol: Render_State_SlopeScaleDepthBias
// Concat Rule
// Terminal Rule: SlopeScaleDepthBias
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Number
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_SlopeScaleDepthBias
// NonTerminalSymbol: Render_State_ZEnable
// Concat Rule
// Terminal Rule: ZEnable
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Boolean
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_ZEnable
// NonTerminalSymbol: Render_State_ZWriteEnable
// Concat Rule
// Terminal Rule: ZWriteEnable
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Boolean
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_ZWriteEnable
// NonTerminalSymbol: Render_State_ZFunc
// Concat Rule
// Terminal Rule: ZFunc
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: CmpFunc
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_ZFunc
// NonTerminalSymbol: Render_State_MultiSampleAntiAlias
// Concat Rule
// Terminal Rule: MultiSampleAntiAlias
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Boolean
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_MultiSampleAntiAlias
// NonTerminalSymbol: Render_State_ScissorTestEnable
// Concat Rule
// Terminal Rule: ScissorTestEnable
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Boolean
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_ScissorTestEnable
// NonTerminalSymbol: Render_State_StencilEnable
// Concat Rule
// Terminal Rule: StencilEnable
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Boolean
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_StencilEnable
// NonTerminalSymbol: Render_State_StencilFail
// Concat Rule
// Terminal Rule: StencilFail
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: StencilOp
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_StencilFail
// NonTerminalSymbol: Render_State_StencilFunc
// Concat Rule
// Terminal Rule: StencilFunc
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: CmpFunc
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_StencilFunc
// NonTerminalSymbol: Render_State_StencilMask
// Concat Rule
// Terminal Rule: StencilMask
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Number
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_StencilMask
// NonTerminalSymbol: Render_State_StencilPass
// Concat Rule
// Terminal Rule: StencilPass
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: StencilOp
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_StencilPass
// NonTerminalSymbol: Render_State_StencilRef
// Concat Rule
// Terminal Rule: StencilRef
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Number
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_StencilRef
// NonTerminalSymbol: Render_State_StencilWriteMask
// Concat Rule
// Terminal Rule: StencilWriteMask
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Number
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_StencilWriteMask
// NonTerminalSymbol: Render_State_StencilZFail
// Concat Rule
// Terminal Rule: StencilZFail
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: StencilOp
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Render_State_StencilZFail
// NonTerminalSymbol: Render_State_Expression
// Choice Rule
// Choice Rule
// NonTerminal Rule: Render_State_CullMode
// NonTerminal Rule: Render_State_FillMode
// NonTerminal Rule: Render_State_AlphaBlendEnable
// NonTerminal Rule: Render_State_SrcBlend
// NonTerminal Rule: Render_State_DestBlend
// NonTerminal Rule: Render_State_BlendOp
// NonTerminal Rule: Render_State_ColorWriteEnable
// NonTerminal Rule: Render_State_DepthBias
// NonTerminal Rule: Render_State_SlopeScaleDepthBias
// NonTerminal Rule: Render_State_ZEnable
// NonTerminal Rule: Render_State_ZWriteEnable
// NonTerminal Rule: Render_State_ZFunc
// NonTerminal Rule: Render_State_MultiSampleAntiAlias
// NonTerminal Rule: Render_State_ScissorTestEnable
// NonTerminal Rule: Render_State_StencilEnable
// NonTerminal Rule: Render_State_StencilFail
// NonTerminal Rule: Render_State_StencilFunc
// NonTerminal Rule: Render_State_StencilMask
// NonTerminal Rule: Render_State_StencilPass
// NonTerminal Rule: Render_State_StencilRef
// NonTerminal Rule: Render_State_StencilWriteMask
// NonTerminal Rule: Render_State_StencilZFail
// Choice Rule
// NonTerminalSymbol: Render_State_Expression
// NonTerminalSymbol: Pass_Declaration
// Concat Rule
// Terminal Rule: Pass
// Concat Rule
// Option Rule
// Terminal Rule: Identifier
// Concat Rule
// Terminal Rule: OpenBracket
// Concat Rule
// ZeroOrMore Rule
// Choice Rule
// Choice Rule
// NonTerminal Rule: VertexShader_Pass_Expression
// NonTerminal Rule: PixelShader_Pass_Expression
// NonTerminal Rule: Render_State_Expression
// Choice Rule
// ZeroOrMore Rule
// Concat Rule
// Terminal Rule: CloseBracket
// NonTerminalSymbol: Pass_Declaration
// NonTerminalSymbol: VertexShader_Pass_Expression
// Concat Rule
// Terminal Rule: VertexShader
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Compile
// Concat Rule
// Terminal Rule: ShaderModel
// Concat Rule
// Terminal Rule: Identifier
// Concat Rule
// Terminal Rule: OpenParenthesis
// Concat Rule
// Terminal Rule: CloseParenthesis
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: VertexShader_Pass_Expression
// NonTerminalSymbol: PixelShader_Pass_Expression
// Concat Rule
// Terminal Rule: PixelShader
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Compile
// Concat Rule
// Terminal Rule: ShaderModel
// Concat Rule
// Terminal Rule: Identifier
// Concat Rule
// Terminal Rule: OpenParenthesis
// Concat Rule
// Terminal Rule: CloseParenthesis
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: PixelShader_Pass_Expression
// NonTerminalSymbol: AddressMode_Clamp
// Terminal Rule: Clamp
// NonTerminalSymbol: AddressMode_Clamp
// NonTerminalSymbol: AddressMode_Wrap
// Terminal Rule: Wrap
// NonTerminalSymbol: AddressMode_Wrap
// NonTerminalSymbol: AddressMode_Mirror
// Terminal Rule: Mirror
// NonTerminalSymbol: AddressMode_Mirror
// NonTerminalSymbol: AddressMode_Border
// Terminal Rule: Border
// NonTerminalSymbol: AddressMode_Border
// NonTerminalSymbol: AddressMode
// Choice Rule
// Choice Rule
// NonTerminal Rule: AddressMode_Clamp
// NonTerminal Rule: AddressMode_Wrap
// NonTerminal Rule: AddressMode_Mirror
// NonTerminal Rule: AddressMode_Border
// Choice Rule
// NonTerminalSymbol: AddressMode
// NonTerminalSymbol: TextureFilter_None
// Terminal Rule: None
// NonTerminalSymbol: TextureFilter_None
// NonTerminalSymbol: TextureFilter_Linear
// Terminal Rule: Linear
// NonTerminalSymbol: TextureFilter_Linear
// NonTerminalSymbol: TextureFilter_Point
// Terminal Rule: Point
// NonTerminalSymbol: TextureFilter_Point
// NonTerminalSymbol: TextureFilter_Anisotropic
// Terminal Rule: Anisotropic
// NonTerminalSymbol: TextureFilter_Anisotropic
// NonTerminalSymbol: TextureFilter
// Choice Rule
// Choice Rule
// NonTerminal Rule: TextureFilter_None
// NonTerminal Rule: TextureFilter_Linear
// NonTerminal Rule: TextureFilter_Point
// NonTerminal Rule: TextureFilter_Anisotropic
// Choice Rule
// NonTerminalSymbol: TextureFilter
// NonTerminalSymbol: Sampler_State_Texture
// Concat Rule
// Terminal Rule: Texture
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Choice Rule
// Choice Rule
// Terminal Rule: LessThan
// Terminal Rule: OpenParenthesis
// Choice Rule
// Concat Rule
// Terminal Rule: Identifier
// Concat Rule
// Choice Rule
// Choice Rule
// Terminal Rule: GreaterThan
// Terminal Rule: CloseParenthesis
// Choice Rule
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_Texture
// NonTerminalSymbol: Sampler_State_MinFilter
// Concat Rule
// Terminal Rule: MinFilter
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: TextureFilter
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_MinFilter
// NonTerminalSymbol: Sampler_State_MagFilter
// Concat Rule
// Terminal Rule: MagFilter
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: TextureFilter
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_MagFilter
// NonTerminalSymbol: Sampler_State_MipFilter
// Concat Rule
// Terminal Rule: MipFilter
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: TextureFilter
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_MipFilter
// NonTerminalSymbol: Sampler_State_Filter
// Concat Rule
// Terminal Rule: Filter
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: TextureFilter
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_Filter
// NonTerminalSymbol: Sampler_State_AddressU
// Concat Rule
// Terminal Rule: AddressU
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: AddressMode
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_AddressU
// NonTerminalSymbol: Sampler_State_AddressV
// Concat Rule
// Terminal Rule: AddressV
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: AddressMode
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_AddressV
// NonTerminalSymbol: Sampler_State_AddressW
// Concat Rule
// Terminal Rule: AddressW
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// NonTerminal Rule: AddressMode
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_AddressW
// NonTerminalSymbol: Sampler_State_BorderColor
// Concat Rule
// Terminal Rule: BorderColor
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: HexColor
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_BorderColor
// NonTerminalSymbol: Sampler_State_MaxMipLevel
// Concat Rule
// Terminal Rule: MaxMipLevel
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Number
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_MaxMipLevel
// NonTerminalSymbol: Sampler_State_MaxAnisotropy
// Concat Rule
// Terminal Rule: MaxAnisotropy
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Number
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_MaxAnisotropy
// NonTerminalSymbol: Sampler_State_MipLodBias
// Concat Rule
// Terminal Rule: MipLodBias
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: Number
// Concat Rule
// Terminal Rule: Semicolon
// NonTerminalSymbol: Sampler_State_MipLodBias
// NonTerminalSymbol: Sampler_State_Expression
// Choice Rule
// Choice Rule
// NonTerminal Rule: Sampler_State_Texture
// NonTerminal Rule: Sampler_State_MinFilter
// NonTerminal Rule: Sampler_State_MagFilter
// NonTerminal Rule: Sampler_State_MipFilter
// NonTerminal Rule: Sampler_State_Filter
// NonTerminal Rule: Sampler_State_AddressU
// NonTerminal Rule: Sampler_State_AddressV
// NonTerminal Rule: Sampler_State_AddressW
// NonTerminal Rule: Sampler_State_BorderColor
// NonTerminal Rule: Sampler_State_MaxMipLevel
// NonTerminal Rule: Sampler_State_MaxAnisotropy
// NonTerminal Rule: Sampler_State_MipLodBias
// Choice Rule
// NonTerminalSymbol: Sampler_State_Expression
// NonTerminalSymbol: Sampler_Register_Expression
// Concat Rule
// Terminal Rule: Colon
// Concat Rule
// Terminal Rule: Register
// Concat Rule
// Terminal Rule: OpenParenthesis
// Concat Rule
// Terminal Rule: Identifier
// Concat Rule
// Option Rule
// Concat Rule
// Terminal Rule: Comma
// Concat Rule
// Terminal Rule: Identifier
// Concat Rule
// Option Rule
// Concat Rule
// Terminal Rule: OpenSquareBracket
// Concat Rule
// Terminal Rule: Number
// Concat Rule
// Terminal Rule: CloseSquareBracket
// Concat Rule
// Terminal Rule: CloseParenthesis
// NonTerminalSymbol: Sampler_Register_Expression
// NonTerminalSymbol: Sampler_Declaration_States
// Concat Rule
// Option Rule
// Concat Rule
// Terminal Rule: Equals
// Concat Rule
// Terminal Rule: SamplerState
// Concat Rule
// Terminal Rule: OpenBracket
// Concat Rule
// ZeroOrMore Rule
// NonTerminal Rule: Sampler_State_Expression
// ZeroOrMore Rule
// Concat Rule
// Terminal Rule: CloseBracket
// NonTerminalSymbol: Sampler_Declaration_States
// NonTerminalSymbol: Sampler_Declaration
// Concat Rule
// Terminal Rule: Sampler
// Concat Rule
// Terminal Rule: Identifier
// Concat Rule
// ZeroOrMore Rule
// NonTerminal Rule: Sampler_Register_Expression
// ZeroOrMore Rule
// Concat Rule
// Option Rule
// NonTerminal Rule: Sampler_Declaration_States
// Concat Rule
// Choice Rule
// Choice Rule
// Terminal Rule: Semicolon
// Terminal Rule: Comma
// Terminal Rule: CloseParenthesis
// Choice Rule
// NonTerminalSymbol: Sampler_Declaration
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\TPGParser\ParseTree.cs
// Generated by TinyPG v1.3 available at www.codeproject.com
// just for the sake of serialization
// rootlevel of the node tree
/// <summary>
/// this is the entry point for executing and evaluating the parse tree.
/// </summary>
/// <param name="paramlist">additional optional input parameters</param>
/// <returns>the output of the evaluation function</returns>
// avoid circular references when serializing
// the token/rule
// skip redundant text (is part of Token)
// text to display in parse tree 
// left to right
/// <summary>
/// this implements the evaluation functionality, cannot be used directly
/// </summary>
/// <param name="tree">the parsetree itself</param>
/// <param name="paramlist">optional input parameters</param>
/// <returns>a partial result of the evaluation</returns>
// Make sure we have at least one pass.
// We need to have a pixel or vertex shader to keep this pass.
// if there is a comma or closing paren at the end this is a sampler as a parameter of a function
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\TPGParser\ParseTreeTools.cs
// Remove all whitespace and trailing F or f.
// We read it as a float and cast it down to
// an integer to match Microsoft FX behavior.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\TPGParser\PassInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\TPGParser\SamplerStateInfo.cs
// NOTE: These match the defaults of SamplerState.
// Get the existing state or create it.
// Figure out what kind of filter to set based on each
// individual min, mag, and mip filter settings.
//
// NOTE: We're treating "None" and "Point" the same here
// and disabling mipmapping further below.
//
// Do we need to disable mipmapping?
// TODO: This is the only option we have right now for 
// disabling mipmapping.  We should add support for MinLod
// and MaxLod which potentially does a better job at this.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\TPGParser\Scanner.cs
// Generated by TinyPG v1.3 available at www.codeproject.com
// tokens that were skipped
// tokens to be skipped
//[^\n\r]*", RegexOptions.Compiled);
/// <summary>
/// executes a lookahead of the next token
/// and will advance the scan on the input string
/// </summary>
/// <returns></returns>
// temporarely retrieve the lookahead
// reset lookahead token, so scanning will continue
// set the tokenizer to the new scan position
/// <summary>
/// returns token with longest best match
/// </summary>
/// <returns></returns>
// this prevents double scanning and matching
// increased performance
// if no scantokens specified, then scan for all of them (= backward compatible)
// Update the line and column count for error reporting.
// only assign to non-skipped tokens
// assign prior skips to this token
//reset skips
// Check to see if the parsed token wants to 
// alter the file and line number.
//Non terminal tokens:
//Non terminal tokens:
//Terminal tokens:
// contains all prior skipped symbols
// must initialize with empty string, may cause null reference exceptions otherwise
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\TPGParser\ShaderInfo.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Effect.Compiler\Effect\TPGParser\TechniqueInfo.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Packaging.Flatpak\BuildFlatpakTask.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Ensure that flatpak command is installed
// Ensure that flatpak runtimes are installed
// Setup intermediate directory
// Generate metadata
// Copy over icon
// Generate .desktop launcher file
// Copy over game
// Copy over suplementary libraries
// Generate flatpak
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\AssetTestClasses.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// will be serialized
// will not be serialized
// Indexer - should be ignored by intermediate serializer.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\AssetTestUtility.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// OpenGL
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\AudioContentTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Test bad file names.
// Test invalid file types.
// This for some reason does not throw!
// Seems like XNA just let the Data property throw
// an exception after it has been disposed.
// For MP3 it seems the data is never availble.
// Seems like XNA just let the Data property throw
// an exception after it has been disposed.
// For WMA it seems the data is never availble.
// Seems like XNA just let the Data property throw
// an exception after it has been disposed.
// 8bit PCM Mono -> PCM
// 8bit PCM Mono -> ADPCM
// 16bit PCM Mono -> PCM
// 16bit PCM Stereo -> PCM
// 16bit PCM Mono -> ADPCM
// 16bit PCM Stereo -> ADPCM 
// 32bit IEEE Float PCM Mono
// 32bit IEEE Float PCM Stereo
// XNA passes 24-bit through as 24-bit in high quality, but cannot convert 24-bit to ADPCM
// 24bit PCM Mono
// 24bit PCM Stereo
// MonoGame converts 24-bit sounds to 16-bit
// 24bit PCM Mono
// 24bit PCM Stereo
// XNA cannot convert 32-bit float to low quality ADPCM, so include these tests here
// 32bit IEEE Float PCM Mono
// 32bit IEEE Float PCM Stereo
// TODO: We don't quite match right with XNA on these.
// We should look to fix this for 100% compatibility.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\BitmapContentTests.cs
// Needed to copy from an array of struct to a byte array
//BitmapConvertAssert(typeof(Dxt1BitmapContent), Grey16Premult, 16, 16, Transparent, 0);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\BuilderTargetsTest.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\ContentCompilerTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\EffectProcessorTests.cs
// Preprocess.
// Check that we can actually compile this file.
// TODO: Should we test the writer?
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\FbxImporterTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// XNA only supported up to the FBX 6.1.0 format
// where as we only support FBX 7.1.0 and newer
// via the Open Asset Importer.
//
//  - This is annoying for users porting old samples.
//  - Conversion could loose data from the original FBX.
//  - Do we care to resolve this in the future?
//
// XNA bug/omission:  crashes with a NullReferenceException 
// where as we correctly throw a ArgumentNullException.
// MeshContent
// TODO: MG returns more positions than XNA.
//
//  - Is this a bug in our FbxImporer?
//  - A limitation of AssImp?
//  - Conversion bug from FBX 6.1.0 to FBX 7.1.0?
//  - Are we missing some welding of verts?
//
// MaterialContent
//Assert.IsNull(g.Identity);
// BoneContent
// TODO: MG doesn't return this.  
//
//  - Is this a bug in our FbxImporer?
//  - A limitation of AssImp?
//  - Conversion bug from FBX 6.1.0 to FBX 7.1.0?
//  - What is "liw" and why is it false?
//  - Do we care about this incompatibility?
//
// AnimationContent
// TODO: A few channels are missing from XNA:
//
//  - Is this a bug in our FbxImporer?
//  - A limitation of AssImp?
//  - Conversion bug from FBX 6.1.0 to FBX 7.1.0?
//  - Do these missing channels matter?
//
// TODO: These channels are missing in MG!
// I think in this case the old XNA FBX importer was bugged and
// returned a bigger animation duration that is correct.  Looking
// at the content of the FBX ascii i can see the math is:
// 
//  (57732697500 - 1924423250) / 46186158000 = 1.208 seconds
//
// Which is the correct result and what our FBX importer returns.
// I highly suspect that XNA was wrong.
//
// https://github.com/assimp/assimp/issues/1720
//
// TODO: XNA assigns the identity to null on all NodeContent
// other than the one returned from the importer.
//
//  - Is this something we should fix?
//
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\FontDescriptionProcessorTests.cs
// because the font is not power of 2 we should use Brga4444
// because the font has Alpha we should use Brga4444
// because the font is not power of 2 we should use Brga4444
// because the font has Alpha we should use Brga4444
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\FontDescriptionTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\FontTextureProcessorTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// (2, 2, 4, 5) is the top,left and width,height of the first glyph. All test glyphs are 4x5
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\IntermediateDeserializerTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// These tests are based on "Everything you ever wanted to know about IntermediateSerializer" by Shawn Hargreaves
// http://blogs.msdn.com/b/shawnhar/archive/2008/08/12/everything-you-ever-wanted-to-know-about-intermediateserializer.aspx
// In MS XNA the ContentCompiler is completely internal, so we need
// to use just a little reflection to get access to what we need.
// This should throw an InvalidContentException as the
// xml tries to set the <elf> element which has a 
// [ContentSerializerIgnore] attribute.
// This should throw an InvalidContentException as the
// xml tries to set the <elf> element which has a 
// [ContentSerializerIgnore] attribute.
// This should throw an InvalidContentException as the
// xml tries to deserialize into an IList property
// but the property value is actually an Array.
// Note that this does not contain a matching SerializeAndAssert test as Vector2ArrayNoElements
// will serialize to an empty Xml element which defeats the purpose of this test.
// ChildCollection is a ContentPipeline-only type, so we don't need to / shouldn't
// test running it through ContentCompiler.
// Curve in 28_XnaCurve.xml is formated the same way as by XNA's serializer
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\IntermediateSerializerTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// These tests are based on "Everything you ever wanted to know about IntermediateSerializer" by Shawn Hargreaves
// http://blogs.msdn.com/b/shawnhar/archive/2008/08/12/everything-you-ever-wanted-to-know-about-intermediateserializer.aspx
// Normalize line endings - git on build server seems to set
// core.autocrlf to false.
// Note: Can't use StringBuilder here because it is always UTF-16,
// while our test XML files use a UTF-8 encoding.
// [AllowNull] "has no effect when serializing to XML"
// (http://blogs.msdn.com/b/shawnhar/archive/2008/08/12/everything-you-ever-wanted-to-know-about-intermediateserializer.aspx)
// Except for... it does have an effect. XNA throws an exception when
// you try to serialize a null element which has [AllowNull] specified.
// Test 21 (CustomFormatting) specifically tests IntermediateDeserializer,
// and isn't relevant for IntermediateSerializer.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\MeshBuilderTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
//Check if normals are generated
// this one won't get added because we don't add any vertices anymore
// this should be overwritten by the next call
// setting the material here should not reset the channel data
// XNA sets the default value for the channel data for a value type channel
// and to null for a reference type. This will cause a NullReferenceException when you try 
// to finish the mesh. MonoGame only allows value types.
// this should be out of range.
// add positions twice, they should get merged too
// NOTE: XNA seems to have a bug where you can specifiy one pased
// the last index when removing a range of zero.  We fixed this in MG.
// RemoveAt(1)
// RemoveRange(0, 0)
// RemoveRange(0, 1)
// RemoveRange(1, 2)
// RemoveRange(0, 3)
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\MeshHelperTest.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\ModelProcessorTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// The transform the processor above is applying to the model.
// Test some basics.
// Stuff to make the tests below cleaner.
// Test the bones.
// Test the first mesh.
// Test the second mesh.
// TODO: Not sure why, but XNA always returns a BasicMaterialContent 
// even when we specify SkinnedEffect as the default.  We need to fix
// the test first before we can enable the assert here.
//Assert.IsInstanceOf(typeof(SkinnedMaterialContent), output.Meshes[0].MeshParts[0].Material);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\Mp3ImporterTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\OggImporterTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\OpenAssetImporterTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\Program.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\TestCompiler.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\TestContentBuildLogger.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\TestImporterContext.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\TestProcessorContext.cs
// MaterialProcessor essentially transforms its
// input and returns it... not a copy.  So this
// seems like a reasonable shortcut for testing.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\TextureContentTests.cs
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\TextureImporterTests.cs
// Clean-up the directories it may have produced, ignoring DirectoryNotFound exceptions
/// <summary>
/// This test tries to load a tiff file encoded in rgbf, but freeimage seems to be failing to read files with this encoding
/// Might be necessary to modify this test with future updates of freeimage.
///
/// Note that the image was created with Freeimage from a bitmap
/// </summary>
//ImportStandard("Assets/Textures/rgbf.tif", SurfaceFormat.Color);
// Clean-up the directories it may have produced, ignoring DirectoryNotFound exceptions
// Clean-up the directories it may have produced, ignoring DirectoryNotFound exceptions
// Ensure the red and blue bytes have been correctly swapped
// Clean-up the directories it may have produced, ignoring DirectoryNotFound exceptions
//ImportStandard("Assets/Textures/LogoOnly_64px-mipmaps.dds", SurfaceFormat.Color);
// Clean-up the directories it may have produced, ignoring DirectoryNotFound exceptions
// Assume floats are equal if they differ less than 1%
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\TextureProcessorTests.cs
//Assert.AreNotEqual(face, output.Faces[0][0]);
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\Utility.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\WavImporterTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// TODO: Need to add tests for channel counts and sample rate most likely!
// 8bit Mono
// 8bit Stereo
// 16bit Mono
// 16bit Stereo
________________________________________________________________________________________
E:/AllLangDS/ds/csharp/MonoGame-develop\MonoGame-develop\Tools\MonoGame.Tools.Tests\WmaImporterTests.cs
// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
