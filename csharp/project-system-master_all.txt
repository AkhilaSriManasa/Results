# Code of Conduct

This project has adopted the code of conduct defined by the Contributor Covenant
to clarify expected behavior in our community.
For more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).
# Contributing

We welcome contributions. Great ways to contribute include trying things out, filing bugs, joining in design conversations and fixing issues. If you're looking at places to contribute code, take a look at our [help wanted issues](https://github.com/dotnet/project-system/issues?q=is%3Aopen+is%3Aissue+label%3A%22Help+Wanted%22).

If you want to submit a feature or a substantial code contribution, please discuss it first with the the team by [filing an issue](https://github.com/dotnet/project-system/issues/new), making sure it follows our [Roadmap](docs/repo/roadmap.md).

For additional information, see the following:

- [Getting Started](docs/repo/getting-started.md)
- [Coding Conventions](docs/repo/coding-conventions.md)
- [Debugging Tips](docs/repo/debugging-tips.md)
- [Features](docs/repo/features.md)
- [Architecture](docs/repo/architecture.md)
- [Rules of the Project System](docs/repo/rules-of-the-project-system.md)
- [Visual Studio Threading Guidelines](https://github.com/Microsoft/vs-threading/blob/master/doc/index.md)
- [Common Project System (CPS) Documention](https://github.com/microsoft/vsprojectsystem)
- [Code of Conduct](https://github.com/dotnet/home/blob/master/guidance/be-nice.md)

# IntelliCode

To provide better IntelliSense results when working with this project in Visual Studio 2019 you can [add our IntelliCode model](https://docs.microsoft.com/en-us/visualstudio/intellicode/share-models#add-a-custom-model) to your installation.

https://prod.intellicode.vsengsaas.visualstudio.com/get?m=A17F43B28B8B4488B7A89D27F33E1BB6Copyright (c) .NET Foundation and Contributors

All rights reserved.

Licensed under the Apache License, Version 2.0 (the “License”); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License.
# C#, F# and Visual Basic project system

|Release|Unit Tests (Debug)|Unit Tests (Release)| Localization | Coverage (Debug)
|---|:--:|:--:|:--:|:--:|
|[16.0](https://github.com/dotnet/project-system/tree/dev16.0.x)|[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev16.0.x&jobName=Windows&configuration=Windows%20debug&label=dev16.0.x)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&branchName=dev16.0.x)|[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev16.0.x&jobName=Windows&configuration=Windows%20Release&label=dev16.0.x)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&branchName=dev16.0.x)|[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev16.0.x&jobName=Spanish&label=dev16.0.x)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&branchName=dev16.0.x)|[![codecov](https://codecov.io/gh/dotnet/project-system/branch/dev16.0.x/graph/badge.svg)](https://codecov.io/gh/dotnet/project-system)
|[16.4](https://github.com/dotnet/project-system/tree/dev16.4.x)|[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev16.4.x&jobName=Windows_Debug&%20debug&label=dev16.4.x)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&branchName=dev16.4.x)|[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev16.4.x&jobName=Windows_Release&%20Release&label=dev16.4.x)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&branchName=dev16.4.x)|[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev16.4.x&jobName=Spanish&label=dev16.4.x)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&branchName=dev16.4.x)|[![codecov](https://codecov.io/gh/dotnet/project-system/branch/dev16.4.x/graph/badge.svg)](https://codecov.io/gh/dotnet/project-system)
|[master](https://github.com/dotnet/project-system/tree/master)|[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=master&jobName=Windows_Debug&%20debug&label=master)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&branchName=master)|[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=master&jobName=Windows_Release&%20Release&label=master)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&branchName=master)|[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=master&jobName=Spanish&label=master)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&branchName=master)|[![codecov](https://codecov.io/gh/dotnet/project-system/branch/master/graph/badge.svg)](https://codecov.io/gh/dotnet/project-system)

[![Join the chat at https://gitter.im/dotnet/project-system](https://badges.gitter.im/dotnet/project-system.svg)](https://gitter.im/dotnet/project-system?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

This repository contains the new C#, F# and Visual Basic project system that has been rewritten on top of the [Common Project System (CPS)](https://github.com/microsoft/vsprojectsystem). In [Visual Studio 2017](https://www.visualstudio.com/vs/), this project system is used by default for Shared Projects (C# and Visual Basic), and .NET Core (C#, F# and Visual Basic) project types, however, [long term](docs/repo/roadmap.md) it will be the basis of all C#, F# and Visual Basic project types. For a list of feature differences between the project systems, see [Feature Comparison](https://github.com/dotnet/project-system/blob/master/docs/feature-comparison.md).

The existing C# and Visual Basic project systems (csproj.dll and msvbprj.dll), which first shipped back in Visual Studio.net nearly 15 years ago, have served us well but are:

- Native and COM-based
- Single threaded and bound to the UI thread
- Hard to extend outside of aggregation via the use of `<ProjectTypeGuids>` and [sub types (flavors)](https://docs.microsoft.com/en-us/visualstudio/extensibility/internals/project-types)
- Tied to Visual Studio

The new C#, F# and Visual Basic project system is:

- Managed and managed-interface based
- Multi-threaded, scalable, and responsive
- Easy to extend via the use of the  Managed Extensibility Framework (MEF) and composable. Many parties, including 3rd parties, can contribute to a single project system
- Hostable outside of Visual Studio

## What is a project system?
A project system sits between a project file on disk (for example, .csproj and .vbproj) and various Visual Studio features including, but not limited to, Solution Explorer, designers, the debugger, language services, build and deployment. Almost all interaction that occurs with files contained in a project file, happens through the project system.

There are many technologies that come together to make up the .NET project system:

- [MSBuild](https://github.com/microsoft/msbuild) provides the build engine and file format.
- [SDK](https://github.com/dotnet/sdk) provides the MSBuild tasks and targets needed to build .NET projects.
- [Common Project System](https://github.com/microsoft/vsprojectsystem) provides the base building blocks for the project system including (but not limited to) project tree, build and debugger coordination and Visual Studio integration.
- [Roslyn](https://github.com/dotnet/roslyn) provides C# and Visual Basic language support including compilers, IntelliSense, refactorings, analyzers and code fixes.
- [Visual F# tools](https://github.com/Microsoft/visualfsharp) provides F# language support.
- [CLI](https://github.com/dotnet/cli) is the .NET command-line interface for building, running and interacting with .NET projects.

![image](https://cloud.githubusercontent.com/assets/1103906/24277819/d1e48eba-1093-11e7-811f-ae5debcc1e6c.png)

## How do I engage and contribute?
We welcome you to try things out, [file issues](https://github.com/dotnet/project-system/issues), make feature requests and join us in design conversations. If you are looking for something to work on, take a look at our [help wanted issues](https://github.com/dotnet/project-system/issues?q=is%3Aopen+is%3Aissue+label%3A%22Help+Wanted%22) for a great place to start. Also be sure to check out our [contributing guide](CONTRIBUTING.md).

This project has adopted a code of conduct adapted from the [Contributor Covenant](http://contributor-covenant.org/) to clarify expected behavior in our community. This code of conduct has been [adopted by many other projects](http://contributor-covenant.org/adopters/). For more information see [Contributors Code of conduct](https://github.com/dotnet/home/blob/master/guidance/be-nice.md). 
**Visual Studio Version**:

**Summary**:


**Steps to Reproduce**:

1. 

2. 

3. 

**Expected Behavior**:

**Actual Behavior**:

**User Impact**:
# Compatibility

The following is a list of known compatibility issues and behavioral differences between the legacy project system and the new project system.

For a list of feature differences; see [Feature Comparison](feature-comparison.md).

## Builds

### Design-time builds are run out-of-process.
Similar to normal builds, the new project system runs [design-time builds](design-time-builds.md) in a separate process instead of within the Visual Studio process. This means that tasks and assemblies adhere to the binding policy of MSBuild.exe regardless of whether they loaded in a design-time build or a normal build. In the legacy project system, design-time builds use the binding policy of Visual Studio (devenv.exe), whereas normal builds use the binding policy of MSBuild.exe.

### Design-time builds are asynchronous.
The legacy project system used to guarantee that a design-time build had occurred by the time certain changes had been done to the project, such as adding or removing files or switching configurations. While easier for components to reason about, this was to the detriment of user experience because this would be done as a UI blocking call.

In the new project system design-time builds are asynchronous, and are not guaranteed to have completed by the time the above changes have been made to the project.

### Design-time build errors and warnings show in the Error List
Design-time build errors and warnings appear in the Error List alongside a normal build's errors and warnings. This might result in warnings and errors showing up that we're previously hidden by the legacy project system.

### Design-time builds might run targets in the same build
For performance reasons, the new project system will group and run multiple targets together in the same build which might result in different behavior for targets that have incomplete or inaccurate target dependencies.

## Configurations

### Configurations are inferred differently
To keep the project file simple, configurations are inferred differently. More details [here](configurations.md)
# Configurations

The way configurations are inferred for a given project is different between the legacy and new project systems. This is also a breaking change in 15.3 compared to 15.0 RTM

## Legacy project system behavior  
In legacy projects configurations of a project are inferred based on conditions in the project file. So if a project had this text,
```xml
<PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
…
<PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
…
<PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
```

the project system would have inferred that the project had two Configurations called Debug and Release and two Platforms called AnyCPU and x86. The old project system would look only in the project and not in any imported props\targets. 

## New project system behavior

### VS 2017 RTM
For the new project system, the old behavior got in the way of project simplification because we would have had to have these conditions in the project file. So for VS2017 RTM we hid these away in the imported targets files and CPS can infer these configurations from there. However, now if the user goes to the configuration manager in VS and deletes\modifies these configurations, we can’t do anything because we’d have to change the imported targets which may not be user files. This was broken in VS2017 RTM.

### VS 2017 "15.3" 
We’ve fixed the issues with deleting the configurations in 15.3 by not inferring these configurations anymore based on conditions but instead we just read two properties called ‘Configurations’ and ‘Platforms’ from the project which would be semi-colon separated list of configurations\platforms. So by default the SDK has these values:

```xml
  <Configurations>Debug;Release</Configurations>
  <Platforms>AnyCPU</Platforms>
```

And these are the same defaults that VS 2017 RTM had. If the user now renames the Debug configuration to MyDebug then we would simply write `<Configurations>MyDebug;Release</Configurations>` to the project file and we get to keep the clean project file.
 
## Breaking change

### TL;DR
If you had a project that had configurations like this:
```xml
<PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'MyDebug|AnyCPU' " />
<PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'MyDebug|x86' " />
```

change the project to have two properties like this:
```xml
<PropertyGroup>
   <Configurations>MyDebug;Debug;Release</Configurations>
   <Platforms>AnyCPU;x86</Platforms>
</PropertyGroup>
```

### Details

This is a breaking change because we *only* read configurations from these properties now and don't infer them anymore from conditions on propertygroups. If someone had created a new configuration with RTM tools like this
```xml
<PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'MyDebug|AnyCPU' ">
```
and that was set as the active configuration then the active configuration gets persisted into the sln file. The RTM product would have inferred the MyDebug config and loaded it whereas 15.3 looks at the Configurations property and will think it only has Debug. The sln file will however ask the project system to load the MyDebug configuration which will cause the project to fail to load with a configuration not found error.
 
### Rationale
We looked at the telemetry we have for how many .NET Core projects were created with non-standard configurations and it was about 1% of projects and very small absolute number as well. The effort to have a hybrid and support both styles of inferring configurations would be quite high and based on the data we don't think it's worth investing in given the fix for the affected projects is fairly straightforward. 
# Design-time builds

- [What is a design-time build?](#what-is-a-design-time-build)
- [Targets that run during design-time builds](#targets-that-run-during-design-time-builds)
- [Designing targets for use in design-time builds](#designing-targets-for-use-in-design-time-builds)
- [Diagnosing design-time builds](#diagnosing-design-time-builds)

## What is a design-time build?

Design-time builds are special builds that are launched by the project system to gather just enough information to populate the language service and other project services, such as the Dependencies node.  Design-time builds are not directly user-initiated, but may be indirectly launched in response to a user action such as changing the project file, build options, adding/removing source files and references, or switching configurations.

For performance reasons, and unlike normal builds which call the _Build_ target, design-time builds call a limited set of targets. This can lead to custom builds that succeed during a normal build, but end up failing during a design-time build, typically due to custom targets with under-specified dependencies.

## Targets that run during design-time builds

The following design-time targets are called, including any dependencies, during design-time builds in the C#/VB project systems. Other project systems, such as C++ or JavaScript will call different targets. 

Design-Time Target                            | Normal Target                      | Description
----------------------------------------------|------------------------------------|------------------
ResolveAssemblyReferencesDesignTime           | ResolveAssemblyReferences          | Resolves `<Reference>` items to their paths.
ResolveProjectReferencesDesignTime            | ResolveProjectReferences           | Resolves `<ProjectReference>` items to their output paths.
ResolveComReferencesDesignTime                | ResolveComReferences               | Resolves `<COMReference>` items to their primary interop assemblies (PIA) paths.
ResolveFrameworkReferencesDesignTime          | ResolveFrameworkReferences         | Resolves `<FrameworkReference>` items to their paths.
ResolvePackageDependenciesDesignTime          | ResolvePackageDependencies         | Resolves `<PackageReference>` items to their paths.
CompileDesignTime (new project system)/Compile| Compile                            | Passes command-line arguments, `<Compile>` items and `<Analyzer>` items to the compiler in normal builds, or to the language service in design-time builds.

The design-time targets are typically simple wrappers around their normal target equivalents, with customized behavior for design-time builds. 

## Designing targets for use in design-time builds

Targets that dynamically change references, source files or compilation options _must_ run during design-time builds to avoid unexpected behavior in Visual Studio. In contrast, if a target does not contribute these items, then it should actively avoid running in these builds to ensure design-time builds are as fast as possible. Whether a target is run in design-time builds is based on whether a target's `BeforeTargets` and `AfterTargets` attributes specifies a direct or indirect dependency of any of the above  targets. See [Diagnosing design-time builds](#diagnosing-design-time-builds) to see logs that help you figure out if your target is being run or not.

### Running in a design-time build

If you've determined that your target needs to run in a design-time build, using the above table set `BeforeTargets` to the normal target equivalent of what you are contributing to the build. For example, if a target changes `<Reference>` items, then it should indicate that it runs _before_ `ResolveAssemblyReferences` target:

``` XML
  <Target Name="AddAdditionalReferences" BeforeTargets="ResolveAssemblyReferences">
     ...
  </Target>
```
The `AddAdditionalReferences` target will run in both normal builds _and_ design-time builds, leading to consistent results between them.

### Determining whether a target is running in a design-time build

Use both the `DesignTimeBuild` (CPS-based projects) and `BuildingProject` (legacy project system) properties to determine whether a target is running in a design-time build or a normal build. This can be used to avoid expensive calculations or work that is only needed for a normal build, helping to keep the IDE responsive.

``` XML
  <Target Name="AddAdditionalReferences" BeforeTargets="ResolveAssemblyReferences">
     <PropertyGroup Condition="'$(DesignTimeBuild)' == 'true' OR '$(BuildingProject)' != 'true'">
         <_AvoidExpensiveCalculation>true</_AvoidExpensiveCalculation>
     </PropertyGroup>
     ...
  </Target>
```

__NOTE:__ The `DesignTimeBuild` property is typically empty (`''`) in normal builds, so avoid comparisons to `'false'`.
 
### Specifying explicit dependencies

If your target has dependencies on properties, items or files produced during the build, it must have a `DependsOnTargets` attribute that accurately indicates the set of targets that produce those assets. An under-specified `DependsOnTargets` will lead to unexpected behavior, such as targets that fail on the first design-time build or fail during every design-time build.

## Diagnosing design-time builds

### Signs that a design-time build is failing or taking too long

While the results of design-time builds are not directly visible by default, the following symptoms are good indicators that one is failing for a given project:

- Source files in a project are marked as coming from the `Miscellaneous Files` project when opened in the editor
- IntelliSense shows incomplete and/or incorrect results
- A normal build succeeds inside and outside of Visual Studio, yet the Error List continues to show build errors

The following are symptoms of a design-time build that is taking too long:

- Project modifications, such as renaming, adding or deleting files, take a long time
- Switching build configurations, for example from Debug to Release, takes a long time

### Getting Visual Studio to output the results of a design-time build

You can force Visual Studio to show the results of a design-time build using the following instructions:

#### Visual Studio 2015 or below

1. Delete the `.vs` directory that sits alongside the solution that is experiencing the problem
2. Start a _Developer Command Prompt for VS2015_
3. At the prompt, run `SET TRACEDESIGNTIME=true`
4. At the prompt, run `devenv`
5. Open the solution
6. Under `%TEMP%`, look for `[RANDOMGUID].designtime.log` files, these will contain the results of the design-time build. If running Visual Studio 2015 Update 2 or higher, the name of the project and design-time target that is being called will also be included in the file name.

#### Visual Studio 2017 or later

1. Install the [Project System Tools](https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools) extension
2. In Visual Studio, choose the `View > Other Windows > Build Logging` menu item.
3. Click on the "play" button.

This will cause design-time builds to show up in the build logging tool window. If you have the [MSBuild Binary and Structured Log Viewer](http://msbuildlog.com/) installed, you can double-click on a log to view it in the viewer, otherwise you can right-click and choose `Save As...` to save the log in the new [binary log format](https://github.com/Microsoft/msbuild/wiki/Binary-Log).

### Diagnosing failing or slow design-time builds

After following the above instructions, open the resulting build log file or Output window (for the new project system).

#### Failing design-time build
For a failing build, look for errors at the end of the log:

```
Build FAILED.

c:\Projects\MyProject\MyProject.csproj(17,5): error : An error occurred!
    0 Warning(s)
    1 Error(s)
```

These errors indicate that a target failed, typically this is due to targets that have not correctly specified their dependencies.


#### Slow design-time build
For a slow design-time, look for the target performance summary at end of the log which can indicate long running tasks and targets:

```
Target Performance Summary:
        0 ms  AfterClean                                 1 calls
        0 ms  Clean                                      1 calls
        0 ms  CleanReferencedProjects                    1 calls
        0 ms  CleanPublishFolder                         1 calls
        0 ms  BeforeRebuild                              1 calls
        0 ms  BeforeClean                                1 calls
        0 ms  BeforeBuild                                1 calls
        0 ms  _SplitProjectReferencesByFileExistence     1 calls
        1 ms  CleanXsdCodeGen                            1 calls
        2 ms  AssignProjectConfiguration                 1 calls
        7 ms  CoreClean                                  1 calls
       10 ms  _CheckForInvalidConfigurationAndPlatform   1 calls

Task Performance Summary:
        0 ms  RemoveDuplicates                           1 calls
        0 ms  Error                                      1 calls
        1 ms  MakeDir                                    1 calls
        1 ms  Message                                    2 calls
        1 ms  ReadLinesFromFile                          1 calls
        1 ms  WriteLinesToFile                           1 calls
        1 ms  FindUnderPath                              2 calls
        1 ms  AssignProjectConfiguration                 1 calls
        2 ms  Delete                                     3 calls
``` 
# Feature Comparison

The following is an incomplete list of features differences between the legacy project system and the new project system. 

For a list of behavior differences; see [Compatibility](compatibility.md).

**Feature**|**Legacy**|**New**|**Notes**
---|:---:|:---:|---
**Platforms**                                                               |
.NET Standard                                                               |          | ●
.NET Core                                                                   |          | ●
.NET Framework                                                              | ●        | ◖  | No ASP.NET AppModel support in new project system
**App Models**                                                              |
ASP.NET Core (.NET Framework & .NET Core)                                   |          | ●
ASP.NET                                                                     | ●        |   
Xamarin                                                                     | ●        |   
Universal Windows Platform (UWP)                                            | ●        |
Windows Presentation Framework (WPF)                                        | ●        | 16.3
Windows Forms                                                               | ●        | 16.3
Windows Workflow Foundation (WWF)                                           | ●        |
**Build**|
Target multiple frameworks (multi-target) from single project               |          | ●
Show build (design-time) errors & warnings in Error List as you make them   |          | ●
**Debug**|
Debug multiple frameworks from single project                               |          | ●
Debug with multiple environments from single project ("launch profiles")    |          | ●
Debug settings persistence                                                  |project.csproj.user|launchsettings.json
Modify environment variables on debug                                       |          | ● 
Launch with native debugging                                                | ●        | ●
Launch with SQL Server debugging                                            | ●        | 16.4
Launch with remote debugging                                                | ●        |   
Launch with Azure Snapshot Debugger                                         |          | ●
**Publish**                                                                 |
Publish to Azure                                                            |          | ●
ClickOnce Publish                                                           | ●        | 
**Project**                                                                 |
Globbing support                                                            |          | ●    | `<Compile Include="*.cs" />`
Simplified project format                                                   |          | ●    | `<Project Sdk="Microsoft.Net.Sdk">`
Simplified configuration syntax                                             |          | ●    | `<Configurations>Debug;Release<Configurations>;<Platforms>AnyCPU;x64</Platforms>`
Implicit configuration syntax                                               | ●        |      | `<PropertyGroup Condition="'$(Configuration)\|$(Platform)' == 'Debug\|AnyCPU'">`
Edit project XML while project is loaded                                    |          | ●
Find & Find in Files in project file                                        |          | ●
Automatically reload project file with no prompts                           |          | ●
Automatically reload targets files                                          |          | ●
Automatically refresh Solution Explorer to reflect file system              |          | ●
Show items included in imports (.targets/.props)                            |          | ●
**Dependencies**|
Auto-restore packages on load and external edit                             |          | ● 
PackageReference support                                                    | ●        | ●
Dependency node showing package/project graph                               |          | ● 
Transitive ProjectReference                                                 |          | ●
Generate NuGet package on build                                             |          | ● 
**Features**|
Add Service Reference                                                       | ●        | 
Add Web Reference                                                           | ●        | 
Add Data Source                                                             | ●        | 16.4
DataSet Designer                                                            | ●        |
"Initialize Interactive Window with Project"                                | ●        | ● | Only when targeting .NET Framework.
Class Diagrams                                                              | ●        | ●
Code Analysis                                                               | ●        | 
Code Metrics                                                                | ●        | ● 
Code Clones                                                                 | ●        | ●
Fakes                                                                       | ●        | 
T4 Templates                                                                | ●        | 
[Automation Extenders](https://msdn.microsoft.com/en-us/library/0y92k2w2.aspx)| ●      | ●
# Opening with the new project system

***NOTE:** The behaviors listed below are subject to change as we add support for more project types in the new project system.*

## When does a project open with the new project system versus the legacy project system?

Because both the new project system and legacy project systems use the same file extensions (csproj, vbproj and fsproj), two factors determine whether a project will open in one or the other.

### TargetFramework/TargetFrameworks properties

*Applies to C# and Visual Basic only*

If a csproj or vbproj project contains a `<TargetFramework>` or `<TargetFrameworks>` property in the body of the project file (not in any of its imports), then it will be automatically opened in the new project system. Specifically, **in version 16.3 and earlier** Visual Studio will scan the raw text of the project file for `</TargetFramework>` or `</TargetFrameworks>`. In **version 16.4 and later** Visual Studio will look for a `<TargetFramework>` or `<TargetFrameworks>` element parented by a `<PropertyGroup>` element.

For example, the following two csproj or vbproj projects will open in the new project system:

``` XML
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net45</TargetFramework>
  </PropertyGroup>
</Project>
```

``` XML
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net45;netstandard1.3</TargetFrameworks>
  </PropertyGroup>
</Project>
```

Whereas, the following csproj or vbproj will open in the legacy project system:

``` XML
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />

  <PropertyGroup>
      <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
  </PropertyGroup>

  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
</Project>
```

### SDKs

*Applies to F# in 16.3 and earlier, and to F#, C#, and Visual Basic in 16.4 and later*

If a project is marked as importing an SDK in the body of the project file (not in any of its imports), then the project is opened in the new project system.

Specifically, VS looks for an `Sdk` attribute within a `<Project>` or `<Import>` element. For example, the following two projects will open in the new project system:

``` XML
<Project Sdk="Microsoft.NET.Sdk">

</Project>
```

``` XML
<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
</Project>
```

In addition, for C# and Visual Basic projects only, VS will look for an `<Sdk>` element parented by a `<Project>` element. For example:

``` XML
<Project>
  <Sdk Name="Microsoft.NET.Sdk" Version="1.2.3" />

</Project>
```

Whereas the following will open in the legacy project system:

``` XML
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />

  <PropertyGroup>
      <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
  </PropertyGroup>

  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
</Project>
```

### Project Type GUIDs

Inside the solution, there are GUIDs associated with a project called a "project type". By default, all csproj, vbproj and fsproj point to the following three GUIDs (the first GUID in the line):

```
Project("{F2A71F9B-5D33-465A-A702-920D77279786}") = "Library1", "Library1.fsproj", "{9B232C4C-AE37-4BC6-A68A-52A275F253C2}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "Library2", "Library2.vbproj", "{629B0BD5-ADD4-46A9-85E2-0D75CA49DCCB}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Library3", "Library3.csproj", "{ADFEAAF5-225C-4E13-8B65-77057AAC44B8}"
EndProject
```

When these GUIDs are set, the behavior called out above of whether to open in the new project system or the old project system kicks in. However, it is possible to force projects to open in the new project system by changing these GUIDs to the following:

```
Project("{6EC3EE1D-3C4E-46DD-8F32-0CC8E7565705}") = "Library1", "Library1.fsproj", "{9B232C4C-AE37-4BC6-A68A-52A275F253C2}"
EndProject
Project("{778DAE3C-4631-46EA-AA77-85C1314464D9}") = "Library2", "Library2.vbproj", "{629B0BD5-ADD4-46A9-85E2-0D75CA49DCCB}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Library3", "Library3.csproj", "{ADFEAAF5-225C-4E13-8B65-77057AAC44B8}"
EndProject
```

All three of these projects will be force loaded into the new project system, regardless of the format of the project. This is helpful, for example, if you'd like to move `<TargetFramework>` property to an import.
# Up-to-date Check

The Project System's _Fast Up-to-date Check_ saves developers time by quickly assessing whether a project needs to be
built or not. If not, Visual Studio can avoid a comparatively expensive call to MSBuild.

At a superficial level, the check compares timestamps between the project's inputs and its outputs. For more
information on how it works in detail, see [this document](repo/up-to-date-check-implementation.md).

Note that the _fast_ up-to-date check is intended to speed up the majority of cases where a build is not required,
yet it cannot reliably cover all cases correctly. Where necessary, it errs on the side of caution as triggering a
redundant build is better than not triggering a required build. MSBuild performs its own checks, so even if the 
fast up-to-date check incorrectly determines the project is out-of-date, MSBuild may still not perform a full
build.

## Customization

For most projects the up-to-date check works automatically and you won't need to know or think about this feature.
However if your build is highly customized then you may need to provide some extra information to help the up-to-date
check work correctly.

For customized builds, you may add to the following item types:

- `UpToDateCheckInput` &mdash; Describes an input file that MSBuild would not otherwise know about
- `UpToDateCheckBuilt` &mdash; Describes an output file that MSBuild would not otherwise know about

Note that `UpToDateCheckOutput` exists but is deprecated and only maintained for backwards compatability.
Projects should use to `UpToDateCheckBuilt` instead.

You may add to these item types declaratively. For example:

```xml
<ItemGroup>
  <UpToDateCheckInput Include="MyCustomBuildInput.abc" />
</ItemGroup>
```

Alternatively, you may override the MSBuild targets that Visual Studio calls to collect these items. Overriding targets
allows custom logic to be executed when determining the set of items. The relevant targets are defined in
`Microsoft.Managed.DesignTime.targets` with names:

- `CollectUpToDateCheckInputDesignTime`
- `CollectUpToDateCheckBuiltDesignTime`

Note that changes to inputs **must** result in changes to outputs. If this rule is not observed, then an input may
have a timestamp after all outputs, which leads the up-to-date check to consider the project out-of-date after building
indefinitely. This can lead to longer build times.

### Grouping inputs and outputs into sets

For some advanced scenarios, it's necessary to partition inputs and outputs into groups and consider each separately.
This can be achieved by adding `Set` metadata to the relevant items.

For example, an ASP.NET project may use sets to group Razor `.cshtml` files with their output assembly `MyProject.Views.dll`,
which is distinct from the other compilation target `MyProject.dll`. This could be achieved with something like:

```xml
<ItemGroup>
  <UpToDateCheckInput Include="Home.cshtml" Set="Views" />
  <UpToDateCheckOutput Include="MyProject.Views.dll" Set="Views" />
</ItemGroup>
```

Items that do not specify a `Set` are included in the default set. Items may be added to multiple sets by separating
their names with a semicolon (e.g. `Set="Set1;Set2"`).

### Copied files

Builds may copy files from a source location to a destination location. Information about these locations should be
captured in the project so that the up-to-date check can determine if the source file is newer than the destination,
in which case the project is out-of-date and a build will be allowed.

To model this, use:

```xml
<UpToDateCheckBuilt Include="Source\File.txt" Original="Destination\File.txt" />
```

When specifying `Original` metadata, the `Set` property has no effect. Each copied file is considered in isolation,
looking only at the timestamps of the source and destination. Sets are used to compare groups of items, so these
features do not compose. If both properties are present, `Original` will take effect and `Set` is ignored.

## Debugging

By default the up-to-date check does not log anything, though you can infer its decision from your build output summary:

```text
========== Build: 0 succeeded, 0 failed, 1 up-to-date, 0 skipped ==========
```

In this example the up-to-date check determined the project was up-to-date. If `succeeded` or `failed` was instead
non-zero, then the check would have determined the project was not up-to-date, resulting in a call to MSBuild.

To debug issues with the up-to-date check, enable its logging.

> Tools | Options | Projects and Solutions | .NET Core

![Projects and Solutions, .NET Core options](repo/images/options.png)

Setting this level to a value other than `None` results in messages prefixed with `FastUpToDate:` in Visual Studio's
build output.

- `None` disables log output.
- `Minimal` produces a single message per out-of-date project.
- `Info` and `Verbose` provide increasingly detailed information about the inner workings of the check, which are useful for debugging.

## Disabling the Up-to-date Check

If you do not wish to use the fast up-to-date check, preferring to always call MSBuild, you can disable it by either:

- Unchecking "Don't call MSBuild if a project appears to be up to date" (shown above), or
- Adding property `<DisableFastUpToDateCheck>True</DisableFastUpToDateCheck>` to your project

Note that in both cases this only disables Visual Studio's up-to-date check. MSBuild will still perform its own
determination as to whether the project should be rebuilt.

If you are disabling the check because you feel it is not behaving correctly, please file an issue in this repo and
include details from the verbose log so that we can improve the feature.
# __Well Known Project Properties, Items and Item Metadata__

There are two types of properties, items and item metadata that are stored in MSBuild project, targets and props files. 

- [Build  Properties, Items and Item  Metadata](#build-properties-items-and-item-metadata)

- [Design-Time Properties, Items and Item Metadata](#design-time-properties-items-and-item-metadata)

## __Build Properties, Items and Item Metadata__
These properties, items and item metadata can be used to influence builds.

#### __DesignTimeBuild (bool)__

Specifies whether the current build is a [design-time build](design-time-builds.md).

| Value                 | Description    |
|-----------------------| ---------------|
| _true_                | The current build is a design-time build.|
| _false_ or empty ('') | The current build is a normal build.|

##### __Example__
``` XML
  <Target Name="AddAdditionalReferences" BeforeTargets="ResolveAssemblyReference">
     <PropertyGroup Condition="'$(DesignTimeBuild)' == 'true'">
         <_AvoidExpensiveCalculation>true</_AvoidExpensiveCalculation>
     </PropertyGroup>

     ...
  </Target>
```

### __Build Properties__

#### __PreBuildEvent (string)__
| Language      | Default            |
|---------------| -------------------|
| C#            | empty ('')         |
| Visual Basic  | empty ('')         |

Specifies commands to execute before the build starts.

##### __Example__
``` XML
  <PropertyGroup>
    <PreBuildEvent>call CopyBuildDependencies.cmd</PreBuildEvent>
  </PropertyGroup>
```

#### __PostBuildEvent (string)__
| Language      | Default            |
|---------------| -------------------|
| C#            | empty ('')         |
| Visual Basic  | empty ('')         |

Specifies commands to execute after the build ends. To control whether these commands are run on failed or update-to-date builds, set the _RunPostBuildEvent_ property.

##### __Example__
``` XML
  <PropertyGroup>
    <PostBuildEvent>call DeployTestEnvironment.cmd</PostBuildEvent>
  </PropertyGroup>
```

#### __ProvideCommandLineArgs (bool)__

| Language      | Default            |
|---------------| -------------------|
| C#            | empty ('')         |
| Visual Basic  | empty ('')         |

Specifies whether `CoreCompile` should output the command-line arguments that were passed (or would have been passed if `SkipCompilerExecution` is `true`) to the Csc.exe and Vbc.exe executables.

| Value                 | Description    |
|-----------------------| ---------------|
| _true_                | CoreCompile will return the command-line arguments passed to Csc.exe or Vbc.exe.|
| _false_ or empty ('') | CoreCompile will not return the command-line arguments passed to Csc.exe or Vbc.exe.|

##### __Example__
``` XML
  <PropertyGroup>
    <ProvideCommandLineArgs>true</ProvideCommandLineArgs>
    <SkipCompilerExecution>true</SkipCompilerExecution>
  </PropertyGroup>

  <Target Name="PrintCommandLineArguments" AfterTargets="CoreCompile">
    
    <Message Text="Csc: @(CscCommandLineArguments)" />
    <Message Text="Vbc: @(VbcCommandLineArguments)" />

  </Target>
```

#### __RunPostBuildEvent (enum)__

| Language      | Default            |
|---------------| -------------------|
| C#            | OnBuildSuccess     |
| Visual Basic  | OnBuildSuccess     |

Specifies the conditions for the command in _PostBuildEvent_ to run.

| Value           | Description    |
|-----------------| ---------------|
| Always          | Post-build event will run regardless of whether the build succeeds.     |
| OnOutputUpdated | Post-build event will run only when the project output is different than the previous output.|
| OnBuildSuccess  | Post-build event will run if the build succeeds, regardless of whether the project output is up-to-date.|


#### __SkipCompilerExecution (bool)__

| Language      | Default            |
|---------------| -------------------|
| C#            | empty ('')         |
| Visual Basic  | empty ('')         |

Specifies whether `CoreCompile` should skip compiler execution.

| Value                 | Description    |
|-----------------------| ---------------|
| _true_                | CoreCompile will not call the Csc.exe or Vbc.exe executables.|
| _false_ or empty ('') | CoreCompile will call the Csc.exe or Vbc.exe executables.|

This property is helpful when used with the [ProvideCommandLineArgs](#providecommandlineargs_(bool)) property.

##### __Example__
``` XML
  <PropertyGroup>
    <RunPostBuildEvent>Always</RunPostBuildEvent>
  </PropertyGroup>
```

---

## __Design-Time Properties, Items and Item Metadata__
These properties, items and item metadata are used for solely for Visual Studio and design-time purposes, and have no influence on the resulting build.

### __Design-Time Properties__

#### __AppDesignerFolder (string)__

| Language      | Default            |
|---------------| -------------------|
| C#            | Properties         |
| Visual Basic  | My Project         |

Specifies the name of the _Application Designer_ folder, which by default contains source and other files pertinent to the project as a whole, including AssemblyInfo.cs/AssemblyInfo.vb.

##### __Example__
``` XML
<PropertyGroup>
    <AppDesignerFolder>Dave's Properties</AppDesignerFolder>
<PropertyGroup>
```

#### __AppDesignerFolderContentsVisibleOnlyInShowAllFiles (bool)__

| Language      | Default            |
|---------------| -------------------|
| C#            | false              |
| Visual Basic  | true               |

Specifies whether the contents of the _Application Designer_ folder are only visible when Solution Explorer's _Show All Files_ mode is turned on.

| Value                 | Description    |
|-----------------------| ---------------|
| _true_                | The __Application Designer__ folder's contents are only visible when Solution Explorer's _Show All Files__ mode is turned on.|
| _false_ or empty ('') | The __Application Designer__ folder's contents are always visible.|

##### __Example__
``` XML
<PropertyGroup>
    <AppDesignerFolderContentsVisibleOnlyInShowAllFiles>true</AppDesignerFolderContentsVisibleOnlyInShowAllFiles>
<PropertyGroup>
```

#### __DesignerFunctionVisibility (enum)__

| Language      | Default            |
|---------------| -------------------|
| C#            | Private            |
| Visual Basic  | Friend             |

Specifies the designer function access level (for example, `InitializeComponent()`).

| Value     | Description    |
|-----------| ---------------|
| _Friend_  | The designer function has friend (internal) visibility.       |
| _Private_ | The designer function has private visibility.                 |
| _Public_  | The designer has public visibility (currently not supported). |

These values map to members of the [`VSDESIGNER_FUNCTIONVISIBILITY`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.interop.vsdesigner_functionvisibility) enum in the VS SDK.

##### __Example__
``` XML
<PropertyGroup>
    <DesignerFunctionVisibility>Private</DesignerFunctionVisibility>
<PropertyGroup>
```

#### __DesignerVariableNaming (enum)__

| Language      | Default |
|---------------| --------|
| C#            | Camel   |
| Visual Basic  | VB      |

Specifies the naming convention used by the designer.

| Value   | Description    |
|---------| ---------------|
| _Camel_ | Names use camel case (e.g. `checkBox1`).       |
| _VB_    | Names use VB / Pascal case (e.g. `CheckBox1`). |

These values map to members of the [`VSDESIGNER_VARIABLENAMING`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.interop.vsdesigner_variablenaming) enum in the VS SDK.

##### __Example__
``` XML
<PropertyGroup>
    <DesignerVariableNaming>Camel</DesignerVariableNaming>
<PropertyGroup>
```

#### __DesignerHiddenCodeGeneration (enum list)__

| Language      | Default                         |
|---------------| --------------------------------|
| C#            | Declarations                    |
| Visual Basic  | Declarations | InitMethods      |

Specifies which code the designer should put in the hidden designer file.

| Value            | Description                            |
|------------------| ---------------------------------------|
| _Declarations_   | Include declarations.                  |
| _InitMethods_    | Include member initialization members. |
| _EventMethods_   | Include event methods.                 |

These values map to members of the [`__VSDESIGNER_HIDDENCODEGENERATION`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.interop.__vsdesigner_hiddencodegeneration) enum in the VS SDK.

##### __Example__
``` XML
<PropertyGroup>
    <DesignerHiddenCodeGeneration>Declarations;InitMethods</DesignerHiddenCodeGeneration>
<PropertyGroup>
```

#### __ProjectGuid (GUID) [deprecated]__

| Language      | Default            |
|---------------| -------------------|
| C#            | empty ('')         |
| Visual Basic  | empty ('')         |

Specifies a unique key of a project within a Visual Studio solution. In the new [C#, F# and Visual Basic project system](http://github.com/dotnet/project-system), this is now optional.

##### __Example__
``` XML
<PropertyGroup>
    <ProjectGuid>{3B812812-7B6F-4327-948D-DF7CD21EFE4C}</ProjectGuid>
<PropertyGroup>
```
# Architecture

|||
|-------:|:----------|
| ![layers01](https://user-images.githubusercontent.com/1103906/61422795-9b549400-a950-11e9-8164-c8fa67aa5ae3.png) | ![layers02](https://user-images.githubusercontent.com/9797472/27418842-8564a266-56d2-11e7-92c6-456116ee0c65.png)|

## Layering Rules:

1. Assemblies cannot depend on the layer above it
2. Assemblies below the Visual Studio layer cannot depend on the Visual Studio SDK (no dependency on IVsXXX) nor any CPS-VS assembly. This layer and below should be hostable and usable outside of Visual Studio.

### Host-Agnostic Layer

|Assembly|Description|
|:-------|:----------|
|__Microsoft.VisualStudio.ProjectSystem.Managed__| Contains components that are shared between C#, F# and Visual Basic projects agnostic of host.|

### Visual Studio Layer

|Assembly|Description|
|:-------|:----------|
|__Microsoft.VisualStudio.ProjectSystem.Managed.VS__| Contains components that are shared between C#, F# and Visual Basic projects. |

### Visual Studio Designer Layer

|Assembly|Description|
|:-------|:----------|
|__Microsoft.VisualStudio.AppDesigner__| Contains the "Application Designer", which hosts property pages in a document window.|
|__Microsoft.VisualStudio.Editors__| Contains resources and settings editors, and C#, F# and Visual Basic property pages.|
# Coding Conventions

## Code

We use the same coding style conventions as outlined in [.NET Framework Coding Styles](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md), with the following additions:

- **DO** put one type per file, including nested types. Files containing a nested type, should follow the `Parent.NestedType.cs` convention. Generic types should follow the ``GenericWithOneTypeParameter`1.cs``, ``GenericWithTwoTypeParameters`2.cs`` convention. If you have a single generic type,`GeneraticWithOneTypeParameter.cs` is acceptable.
- **DO NOT** use regions.
- **DO** sort members in classes in the following order; fields, constructors, events, properties and then methods.
- **DO** flavor private fields over private properties.
- **DO** case internal fields as `PascalCased` not `_camelCased`.

The majority of the guidelines, where possible, are enforced via the [.editorconfig](https://github.com/dotnet/project-system/blob/master/.editorconfig) in the root the repository.

## MEF

- **DO** use constructor injection over property/field injection.
  
- **DO** use MEF imports over direct usage of `IComponentModel`.

## VS APIs

- **DO** flavor `IVsUIService<T>` and `IVsUIService<TService, TInterface>` over usage of `IServiceProvider`.
  
`IVsUIService` enforces UI thread access which prevents accidental RPC calls from a background thread.
  
- **DO** flavor `IVsService<T>` and `IVsService<TService, TInterface>` over usage of `IAsyncServiceProvider`.
  
`IVsService` ensures casts are performed on the UI thread which prevents accidental RPC calls from a background thread.

- **DO** flavor `HResult` over `VSConstants` and raw constants.

- **DO** flavor `HierarchyId` over `VSConstants.VSITEMID` and raw constants.

## Tests

- **DO** flavor a single Assert per unit test.

- **DO** use the `Method_Setup_Behavior` naming style for unit tests, for example, `GetProperty_NullAsName_ThrowsArgument` or `CalculateValues_WhenDisposed_ReturnsNull`.

- **DO** flavor static `CreateInstance` for creating the object under test versus directly calling the constructor

This reduces the amount of refactoring/fixup needed when adding a new import to a service.

# Guidelines

## Data

- **DO NOT** mix snapshot and "live" project data in the same component. 

For example, listening to data flow blocks from `IProjectSubscriptionService` and then reading properties from `ProjectProperties` within the callback will lead to inconsistent results. The dataflow represents a "snapshot" of the project from changes in the past, whereas ProjectProperties represents the actual live project. These will not always agree. The same applies to consuming other CPS APIs from within a dataflow block, the majority of them use live data to provide results and hence will return results inconsistent with the snapshot that you are reading in the dataflow.

- **DO NOT** parse or attempt to reason about the values of properties that make up the dimensions for a project configuration; `$(Configuration)`, `$(Platform)` and `$(TargetFramework)`, and their plural counterparts; `$(Configurations)`, `$(Platforms)` and `$(TargetFrameworks)`.

These properties are user "aliases" and should only be used for conditions, display and grouping purposes. Instead, the project system should be using their canonical equivalents; `$(PlatformTarget)` instead of `$(Platform)`, and `$(TargetFrameworkMoniker)` instead of `$(TargetFramework)`.

## Threading

- **DO** follow the [3 threading rules](https://github.com/Microsoft/vs-threading/blob/master/doc/threading_rules.md#3-threading-rules) inside Visual Studio.

- **DO NOT** call `IProjectThreadingService.ExecuteSynchronously` or `JoinableTaskFactory.Run` from a ThreadPool thread that marshals to another thread (such as via `JoinableTaskFactory.SwitchToMainThreadAsync` or calling an STA-based `IVsXXX` object).
If you synchronously block on other async code, often that code needs to run or finish on a ThreadPool thread. When the number of threads in the ThreadPool reaches a certain threshold, the ThreadPool manager slows down thread creation and only adds a new thread to the pool every 250 - 500ms. This can result in random UI deadlocks for short periods of time while the code on the UI thread waits for a new thread to be spun up. See [ThreadPool Starvation](https://github.com/Microsoft/vs-threading/blob/master/doc/threadpool_starvation.md) for more information.

- **AVOID** marking `await` calls with `ConfigureAwait(true)` or `ConfigureAwait(false)`.

We follow the [Visual Studio guidelines](https://github.com/Microsoft/vs-threading/blob/master/doc/cookbook_vs.md#should-i-await-a-task-with-configureawaitfalse) around `ConfigureAwait` usage.
# Debugging Tips

- [Setting up your Debugging Environment](/docs/repo/debugging/setting-up-environment.md)
- [Design-Time Builds](/docs/repo/debugging/design-time-builds.md)
- [Debugging Async Test Hangs](/docs/repo/debugging/async-test-hangs.md)
- [CPS Tracing](/docs/repo/debugging/tracing.md)
- [Project System Logging](/docs/repo/debugging/logging.md)
- [Capabilities](/docs/repo/debugging/capabilities.md)
- [Crash Dumps, UI Delays and Hang Data](/docs/repo/debugging/watson.md)
- [.NET SDK](/docs/repo/debugging/sdk.md)
- [Visual Studio](/docs/repo/debugging/visualstudio.md)
# Dependencies Node Roadmap

This document describes, at a high level, the design and implementation of the Dependencies node with pointers to the important types.

Let's start at the top and work our way down. There are two fundamentally different paths that dependency information takes from the Project System to Solution Explorer. Direct dependencies go through CPS, whereas transitive dependencies generally go through graph node providers.

## Overview

### The CPS View of Dependencies

On the CPS side the project tree is composed of instances of the `IProjectTree` and `IProjectItemTree` interfaces. `IProjectTree` captures the structure of the tree (e.g. it has properties to access the parent and child nodes) and the "UI" aspects of the node&mdash;name, icons, visibility, etc. An `IProjectItemTree` captures all of that but also represents a concrete item within the project like a file, assembly reference, or NuGet package.

An `IProjectTree` is immutable. When a part of the tree needs to be updated, we need to replace it and form a new tree.

Components wishing to add items to the project tree must implement and export the `IProjectTreeProvider` interface. In practice we implement the interface by deriving from the abstract `ProjectTreeProviderBase` class provided by CPS. In general, we receive events/messages from CPS detailing changes to the project, generate an updated `IProjectTree`, and then pass it back to CPS via `ProjectTreeProviderBase.SubmitTreeUpdateAsync`.

### The Graph Node Provider View of Dependencies

On the Graph Node side, transitive dependencies are represented as `GraphNode` instances and are frequently associated with `IGraphContexts`. In contrast to `IProjectTree`s, graphs are not realized in their entirety "up front" nor are they immutable. Instead, a graph starts with a small set of initial nodes. As the user expands nodes or searches within the graph an `IGraphProvider` implementation is asked to mutate the graph via an `IGraphContext`. The `IGraphContext` contains the current graph, a description of the operation at hand (checking if a node has children, getting the set of children, search for nodes matching certain text, etc.) and a set of "input" nodes marking the starting point for the operation. The `IGraphProvider` then adds `GraphNodes` to the graph as appropriate.

### The Project System View of Dependencies

Internally every individual dependency (both direct and transitive) is represented as an [`IDependency`][IDependency].

All the [`IDependency`][IDependency]s for a given target framework in a given project are collected together into a [`TargetedDependenciesSnapshot`][TargetedDependenciesSnapshot]. All of those for a given project are, in turn, collected into a [`DependenciesSnapshot`][DependenciesSnapshot].

The [`DependenciesSnapshotProvider`][DependenciesSnapshotProvider] is responsible for providing access to the current [`DependenciesSnapshot`][DependenciesSnapshot] and firing events when the snapshot has changed.

Much of the code for the Dependencies node is concerned with creating [`IDependency`][IDependency]s and translating them into new `IProjectTree`s when they change.

## CPS/Project System Interaction

In general, items _directly_ referenced by the project file (e.g., through `Reference`, `ProjectReference`, and `Analyzer` items in the project file) are represented with `IProjectTree` nodes as opposed to `GraphNodes`. This makes it possible for them to be represented in the project's `IVsHierarchy` and, crucially, makes it easier to code the sorts of interactions users expect for these items. For example, a user should be able to right-click on an assembly reference and remove it, or modify the properties of an assembly reference.

> Aside: There are exceptions to this. In practice analyzers are not directly referenced but rather brought in as part of a NuGet package. We still represent all analyzers as `IProjectTree` items directly under the "Analyzers" node. This makes it much easier for the C#/VB language service to add nodes for each diagnostic underneath the analyzer's node, and it makes it easy for the user to find so they can check the severity of the diagnostic and potentially change it using the context menu.

### DependenciesProjectTreeProvider

The primary connection point between CPS and the Dependencies node is the [`DependenciesProjectTreeProvider`][DependenciesProjectTreeProvider], implementing the `IProjectTreeProvider` interface. It is directly responsible for the following:

1. Creating the `IProjectTree` for the "Dependencies" node itself (children are handled elsewhere).
2. Handling explicit commands to copy or remove a node underneath the "Dependencies" node.
3. Mapping back and forth between `IProjectTree` instances and paths.
4. Listening for changes to the set of dependencies via the [`DependenciesSnapshotProvider`][DependenciesSnapshotProvider], delegating to the [`IDependenciesTreeViewProvider`][IDependenciesTreeViewProvider] to rebuild the tree underneath the Dependencies node, and submitting the updated tree back to CPS.

### Generating Dependencies

As evaluations and design-time builds occur, CPS pushes project changes through TPL Dataflow blocks (available via `IProjectSubscriptionService`, where `ProjectRuleSource` provides evaluation data, and `JointRuleSource` provides design-time build data).

Various implementations of [`IDependenciesRuleHandler`][IDependenciesRuleHandler] exist, and each specifies the set of rules they wish to handle (e.g. `PackageReference`, `ResolvedProjectReference`, etc.). The abstract class [`DependenciesRuleHandlerBase`][DependenciesRuleHandlerBase] exists to make implementing [`IDependenciesRuleHandler`][IDependenciesRuleHandler] easier.

The [`DependencyRulesSubscriber`][DependencyRulesSubscriber] (implementing [`IDependencyCrossTargetSubscriber`][IDependencyCrossTargetSubscriber]) subscribes via Dataflow to the union of rules specified by the handlers. When updates are received, a [`CrossTargetDependenciesChangesBuilder`][CrossTargetDependenciesChangesBuilder] is instantiated and each handler is given a chance to add/update/remove [`IDependencyModel`][IDependencyModel] instances through the builder. Once complete, the `IDependencyCrossTargetSubscriber.DependenciesChanged` event is fired, carrying dependency model changes.

Each project has an instance of [`DependenciesSnapshotProvider`][DependenciesSnapshotProvider] that holds the latest `DependenciesSnapshot` object. It imports `IDependencyCrossTargetSubscriber` implementations (such as `DependencyRulesSubscriber`) and subscribes to their `DependenciesChanged` events. When these events fire, the current snapshot is combined with changes to produce a new snapshot. That snapshot is then propagated via the `DependenciesSnapshotProvider.SnapshotChanged` event.

This `SnapshotChanged` event is then handled by:

- [`DependenciesProjectTreeProvider`][DependenciesProjectTreeProvider] to update the tree, and
- [`AggregateDependenciesSnapshotProvider`][AggregateDependenciesSnapshotProvider] which fires a solution-level `SnapshotChanged` event (useful for P2P references and graph updates, for example.)

### Translating snapshots to trees

Most of the work of translating [`IDependency`][IDependency]s to `IProjectTree`s is done by [`DependenciesTreeViewProvider`][DependenciesTreeViewProvider] (implementing [`IDependenciesTreeViewProvider`][IDependenciesTreeViewProvider]). It takes a [`DependenciesSnapshot`][DependenciesSnapshot] and generates the nodes for the target frameworks, the groupings under each framework, (Assemblies, Analyzers, Packages, Projects, etc.), and the top-level nodes under each of those groupings. In the common case that a project has a single target framework it leaves out the framework node entirely and simply hangs the different groupings directly off the `IProjectTree` for the Dependencies node.

The [`DependenciesTreeViewProvider`][DependenciesTreeViewProvider] traverses down the existing `IProjectTree` and the new [`DependenciesSnapshot`][DependenciesSnapshot] in parallel, starting from the Dependencies node itself and proceeding on to target framework, groupings, and then the individual top-level dependencies. Along the way it incrementally generates new `IProjectTree`s as it finds dependencies that have been updated, added, or removed.

> Aside: The `IProjectTree` nodes are intentionally updated from top to bottom as it prevents the Solution Explorer from collapsing expanded nodes during the update. At the very least this would be visually distracting to the user.

[`IDependency`][IDependency]s are not translated directly into `IProjectTree`s. They are first converted to [`IDependencyViewModel`][IDependencyViewModel]s and those in turn become the `IProjectTree`s. This makes it a little easier to create the `IProjectTree`s for targets and groups (e.g. the Assemblies, NuGet, Projects, etc. nodes) which are not themselves [`IDependency`][IDependency]s. In some cases a [`IDependencyModel`][IDependencyModel] may be converted directly to a [`IDependencyViewModel`][IDependencyViewModel].

### Identifiers

#### `IDependencyModel` Identifiers

Instances of [`IDependencyModel`][IDependencyModel]'s produced by an [`IProjectDependenciesSubTreeProvider`][IProjectDependenciesSubTreeProvider] must have an `Id` propety that's unique to that provider and that project.

For dependencies obtained via MSBuild evaluations (Packages, Assemblies, etc...) the `Id` is just the `OriginalItemSpec`.

#### `IDependency` Identifiers

Once a dependency model is integrated into a dependencies snapshot as an [`IDependency`][IDependency], its `Id` will be constructed from the target framework, provider type and model ID. For example: `netstandard2.0/nugetdependency/newtonsoft.json`

This allows the ID to be unique within both the provider and the target framework.

## Graph/Project System Interaction

The direct dependencies of a project will often bring in a number of transitive dependencies. For example, you may have a direct dependency on a NuGet package via a `PackageReference` element in the project file. That package causes transitive dependencies on the assemblies and analyzers within it as well as other packages it depends on. A `ProjectReference` may add transitive dependencies on other projects and packages. These dependencies form a directed graph and as such we can't properly represent them via `IProjectTree`s.

Also, the set of transitive dependencies may be very large, potentially much larger than the set of direct dependencies. For memory reasons we don't want to realize the full graph "up front". 

At the same time the user can only interact with these items in a very limited way&mdash;there's no way for them to delete an individual assembly brought in by a NuGet package for example.

These requirements lead us to represent transitive dependencies as `Microsoft.VisualStudio.GraphModel.GraphNode`s.

### DependenciesGraphProvider

The primary connection point between the Graph Nodes and the Project System is the [`DependenciesGraphProvider`][DependenciesGraphProvider] class, via the `IGraphProvider` interface. It is directly responsible for the following:

1. Specifying which graph operations it supports, via the `GetCommands` property. The only supported standard command is `GraphCommandDefinition.Contains` which is used to find the children of a given graph node.
2. Delegate the actual implementation of graph operations to various [`IDependenciesGraphActionHandler`][IDependenciesGraphActionHandler]s via the `BeginGetGraphData` method.
3. Handle the low-level mechanics of adding and removing nodes from the graph via its [`IDependenciesGraphBuilder`][IDependenciesGraphBuilder] implementation.

### Generating new `GraphNode`s

New `GraphNode`s are added to the graph as a result of operations initiated by the user.

For example, when the user expands a NuGet package node:

1. The `IGraphProvider.BeginGetGraphData` implementation in [`DependenciesGraphProvider`][DependenciesGraphProvider] is called with an `IGraphContext` describing the current graph, the input node (e.g. the node for the NuGet Package) and the operation (e.g. "get the children of the input node").
2. Each implementation of [`IDependenciesGraphActionHandler`][IDependenciesGraphActionHandler] that can handle the request is asked to do so.
3. We retrieve the current [`DependenciesSnapshot`][DependenciesSnapshot] for the project as well as the [`IDependency`][IDependency] for the input node (via [`IAggregateDependenciesSnapshotProvider`][IAggregateDependenciesSnapshotProvider]/[`DependenciesSnapshotProvider`][DependenciesSnapshotProvider]).
4. We find the first [`IDependenciesGraphViewProvider`][IDependenciesGraphViewProvider] that supports the given [`IDependency`][IDependency] and ask it to build up the corresponding parts of the graph.
5. The [`IDependenciesGraphViewProvider`][IDependenciesGraphViewProvider] decides what nodes to add to the graph, and calls [`IDependenciesGraphBuilder`][IDependenciesGraphBuilder]`.AddGraphNode` (implemented by [`DependenciesGraphProvider`][DependenciesGraphProvider]) to handle the actual mechanics.

### Connecting `GraphNode`s to `IProjectTree` nodes

CPS and the core graph logic automatically create `GraphNode`s for `IProjectTree` nodes marked with the `ProjectTreeFlags.Common.ResolvedReference` flag. For example, we will create an `IProjectTree` for a top-level NuGet package and an associated `GraphNode` will be generated automatically. We will later see this `GraphNode` as an input node in an `IGraphContext` and create and link new `GraphNode`s for its transitive dependencies.

While we don't need to create these top-level `GraphNode`s we do sometimes need to adjust their properties.

### Tracking changes to the graph

Changes to the dependencies may require that we update the graph nodes already produced. The [`DependenciesGraphChangeTracker`][DependenciesGraphChangeTracker] holds weak references to all the graphs that may need to be updated due to dependency changes, and subscribes to the [`IAggregateDependenciesSnapshotProvider`][IAggregateDependenciesSnapshotProvider]`.SnapshotChanged` event.

Whenever this event fires we find the corresponding [`IDependency`][IDependency], find the [`IDependenciesGraphViewProvider`][IDependenciesGraphViewProvider] that supports it, and delegate to the provider's `ApplyChanges` method. This generates lists of graph nodes to add and remove based on the current graph contents and the current project snapshot contents. The [`IDependenciesGraphBuilder`][IDependenciesGraphBuilder] is then called to handle the actual additions and removals.

### Identifiers

Each `GraphNode` must have a unique ID of type `Microsoft.VisualStudio.GraphModel.GraphNodeId`.

`GraphNodeId` is a recursive type, meaning an instance may be comprised of several partial `GraphNodeId` objects. This composition is performed by `GraphNodeId.GetNested`.

As mentioned earlier, `GraphNode`s are automatically created for `IProjectTree` nodes marked with the `ProjectTreeFlags.Common.ResolvedReference` flag. These graph nodes are created with IDs comprising two sub-IDs:

1. `Assembly` which identifies the project (a `Uri` of full path to the containing project file)
2. `File` which identifies the graph node within that project (a `Uri` modelling something unique about that node)
   - For top level dependency nodes, this is the numeric ID assigned to the node as a string prefixed with `>` (e.g. `>56`)
   - For child nodes (created lazily when the user expands top level nodes), this is the composite [`IDependency.Id`][IDependency] discussed above (e.g. `netstandard2.0/nugetdependency/newtonsoft.json`)

If a project is renamed, the `Assembly` URI of graph nodes within that project are automatically updated to reflect the new project path.

## Extensibility Model

Project flavors can extend the Dependencies node with additional sub-trees. To do so:

- Implement and export an [`IProjectDependenciesSubTreeProvider`][IProjectDependenciesSubTreeProvider] implementation per sub-tree
- Provide a custom implementation of [`IDependencyModel`][IDependencyModel]
- Potentially implement `IProjectTreeProvider` (usually by deriving from `ProjectTreeProviderBase`)

The _Web Tools Extensions_ project is a good example of a project flavor that does this.


[AggregateCrossTargetProjectContext]:     /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/CrossTarget/AggregateCrossTargetProjectContext.cs "AggregateCrossTargetProjectContext.cs"
[IDependenciesRuleHandler]:               /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/CrossTarget/IDependenciesRuleHandler.cs "IDependenciesRuleHandler.cs"
[DependenciesProjectTreeProvider]:        /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/DependenciesProjectTreeProvider.cs "DependenciesProjectTreeProvider.cs"
[DependenciesTreeViewProvider]:           /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/DependenciesTreeViewProvider.cs "DependenciesTreeViewProvider.cs"
[IDependenciesGraphActionHandler]:        /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/GraphNodes/Actions/IDependenciesGraphActionHandler.cs "IDependenciesGraphActionHandler.cs"
[TrackChangesGraphActionHandler]:         /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/GraphNodes/Actions/TrackChangesGraphActionHandler.cs "TrackChangesGraphActionHandler.cs"
[DependenciesGraphChangeTracker]:         /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/GraphNodes/DependenciesGraphChangeTracker.cs "DependenciesGraphChangeTracker.cs"
[DependenciesGraphProvider]:              /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/GraphNodes/DependenciesGraphProvider.cs "DependenciesGraphProvider.cs"
[IDependenciesGraphBuilder]:              /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/GraphNodes/IDependenciesGraphBuilder.cs "IDependenciesGraphBuilder.cs"
[IDependenciesGraphViewProvider]:         /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/GraphNodes/ViewProviders/IDependenciesGraphViewProvider.cs "IDependenciesGraphViewProvider.cs"
[ProjectGraphViewProvider]:               /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/GraphNodes/ViewProviders/ProjectGraphViewProvider.cs "ProjectGraphViewProvider.cs"
[IDependencyModel]:                       /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/IDependencyModel.cs "IDependencyModel.cs"
[IDependenciesTreeViewProvider]:          /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/IDependenciesTreeViewProvider.cs "IDependenciesTreeViewProvider.cs"
[IProjectDependenciesSubTreeProvider]:    /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/IProjectDependenciesSubTreeProvider.cs "IProjectDependenciesSubTreeProvider.cs"
[IDependencyViewModel]:                   /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Models/IDependencyViewModel.cs "IDependencyViewModel.cs"
[AggregateDependenciesSnapshotProvider]:  /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Snapshot/AggregateDependenciesSnapshotProvider.cs "AggregateDependenciesSnapshotProvider.cs"
[DependenciesSnapshot]:                   /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Snapshot/DependenciesSnapshot.cs "DependenciesSnapshot.cs"
[IDependenciesSnapshotFilter]:            /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Snapshot/Filters/IDependenciesSnapshotFilter.cs "IDependenciesSnapshotFilter.cs"
[IAggregateDependenciesSnapshotProvider]: /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Snapshot/IAggregateDependenciesSnapshotProvider.cs "IAggregateDependenciesSnapshotProvider.cs"
[DependenciesSnapshot]:                   /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Snapshot/DependenciesSnapshot.cs "DependenciesSnapshot.cs"
[IDependency]:                            /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Snapshot/IDependency.cs "IDependency.cs"
[TargetedDependenciesSnapshot]:           /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Snapshot/TargetedDependenciesSnapshot.cs "TargetedDependenciesSnapshot.cs"
[CrossTargetDependenciesChangesBuilder]:  /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Subscriptions/CrossTargetDependenciesChangesBuilder.cs "CrossTargetDependenciesChangesBuilder.cs"
[DependenciesRuleHandlerBase]:            /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Subscriptions/RuleHandlers/DependenciesRuleHandlerBase.cs "DependenciesRuleHandlerBase.cs"
[DependencyRulesSubscriber]:              /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Subscriptions/DependencyRulesSubscriber.cs "DependencyRulesSubscriber.cs"
[DependenciesSnapshotProvider]:           /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Subscriptions/DependenciesSnapshotProvider.cs "DependenciesSnapshotProvider.cs"
[IDependencyCrossTargetSubscriber]:       /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Subscriptions/IDependencyCrossTargetSubscriber.cs "IDependencyCrossTargetSubscriber.cs"
[ProjectRuleHandler]:                     /src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Tree/Dependencies/Subscriptions/ProjectRuleHandler.cs "ProjectRuleHandler.cs"
# Features

This repository contains the following broad features:

## C# and Visual Basic project system for .NET Core/.NET Standard/Shared Projects
[Host Agnostic Source](/src/Microsoft.VisualStudio.ProjectSystem) | [Visual Studio Source](/src/Microsoft.VisualStudio.ProjectSystem.VS)

## Application Designer ("AppDesigner")
[Source](/src/Microsoft.VisualStudio.AppDesigner)

![Visual Basic project system](/docs/repo/images/appdesigner.png?raw=true)

## Property Pages
[Source](/src/Microsoft.VisualStudio.Editors/PropPages)

## Resources Editor
[Source](/src/Microsoft.VisualStudio.Editors/ResourceEditor)

![Resources Editor](/docs/repo/images/resourceseditor.png?raw=true)

## Settings Designer
[Source](/src/Microsoft.VisualStudio.Editors/SettingsDesigner)

![Settings Designer](/docs/repo/images/settingsdesigner.png?raw=true)
# Getting Started

#### Prerequisites
- [Visual Studio 16.3 Preview 2 or higher](https://visualstudio.microsoft.com/vs/preview/)
- GitHub account
- Basic Git experience: https://try.github.io/

All commands below are run under a [Visual Studio Developer Prompt](https://msdn.microsoft.com/en-us/library/ms229859(v=vs.150).aspx).

## Code

Contribution to this repository is via the [fork model](https://help.github.com/articles/fork-a-repo/). Contributors push changes to their own "forked" version of project-system, and then submit a pull request into it requesting those changes be merged.

To get started:

1. Fork the repo by clicking Fork in the top right corner:

![image](https://user-images.githubusercontent.com/1103906/44329309-7ab55d00-a4a7-11e8-9d1f-74a91f5229f5.png)

2. From a Visual Studio Developer Prompt, run (replacing _[user-name]_ with your GitHub user name):

```
\> git clone https://github.com/[user-name]/project-system
\> cd project-system
\project-system> git remote add upstream https://github.com/dotnet/project-system
\project-system> git remote set-url --push upstream no_push
```

The last command prevents an accidental push to this repository without going through a pull request.

After running above, `git remote -v` should show something similar to the following:
```
\project-system> git remote -v 

origin  https://github.com/davkean/project-system (fetch)
origin  https://github.com/davkean/project-system (push)
upstream        https://github.com/dotnet/project-system (fetch)
upstream        no_push (push)
```

## Build

### Command-line

From within a [Visual Studio Developer Prompt](https://docs.microsoft.com/en-us/dotnet/framework/tools/developer-command-prompt-for-vs), from the repo root, run:

```
project-system> build.cmd
```

This builds, runs tests and deploys to an experimental instance of Visual Studio.

### Visual Studio
From within [Visual Studio 2019](https://visualstudio.microsoft.com/downloads/), open _ProjectSystem.sln_.

Inside Visual Studio, you can build, run tests and deploy.

## Debugging/Deploying

By default when you build inside Visual Studio or the command-line, the project system and other binaries gets deployed to the _Exp_ experimental instance of Visual Studio. They will automatically _override_ any binaries that come with Visual Studio when you launch that instance.

First of all, [setup your debugging environment](https://github.com/dotnet/project-system/blob/master/docs/repo/debugging/setting-up-environment.md).

### Command-line

From the command-line, after you've run `build.cmd` you can launch a Visual Studio instance with your recently built bits with:

```
project-system> launch.cmd
```

### Visual Studio

To start debugging:

1. Open __ProjectSystem.sln__
2. Press _F5_

If this is your first launch of the project system, or _ProjectSystem_ experimental instance, press _CTRL+F5_ to pre-prime and avoid a _long_ start up time.

For tips, see [Debugging Tips](debugging-tips.md)

### Deploying to a different hive

When testing inconjunction with other repositories, it's handy to be able to deploy to the same hive so that you can test them together.

Both Visual Studio and command-line respect the `ROOTSUFFIX` environment variable:

```
project-system> set ROOTSUFFIX=RoslynDev

project-system> build.cmd
project-system> launch.cmd
```

```
project-system> set ROOTSUFFIX=RoslynDev

project-system> devenv ProjectSystem.sln
```

Alternatively, both `build.cmd` and `launch.cmd` provide a `/rootsuffix` switch:

``` 
project-system> build.cmd /rootsuffix RoslynDev
project-system> launch.cmd /rootsuffix RoslynDev
```

## Testing 

### Project System
While the long term goal is to have all C#, F# and Visual Basic projects use this project system, currently only .NET Core, .NET Standard and Shared Projects do. If you want to test other project types, you can manually create a project to test this:

1. __File__ -> __New__ -> __Project__ -> __C#__ -> __Templates__ -> __Visual C#__ -> __Windows__ -> __Console App (.NET Framework)__
2. Right-click on the project and choose __Open in File Explorer__
3. __File__ -> __Close Solution__
4. In __File Explorer__, rename project from _[project].csproj_ -> _[project].msbuildproj_
5. __File__ -> __Open__ -> __Project/Solution__ and browse to the project you just renamed and choose __Open__

### AppDesigner, Settings, Resource Editors and Property Pages
Both the new project system and the existing project system use the features built from this repository.

## Code Coverage

### Visual Studio

You can collect code coverage within Visual Studio, to do so, do the following:

1. __Test__ -> __Test Settings__ -> __Select Test Settings File__
2. In __Open Settings Files__, browse to and select _src\CodeCoverage.runsettings_. This will exclude files from the coverage run that are not part of the product.
3. Choose __Test__ -> __Analyze Code Coverage__ -> __All Tests__
# Basic
1. Open
   a. Language service is hooked up correctly
2. Build
3. Debug
4. Close
5. Switch configuration
6. Add sln configuration
7. Add project configuration
8. Open with sln config not matching project configs
9. Open with upgrade
10. Open with projects missing on disk
11. Add/Remove Reference
12. Add/Remove NuGet Package
13. Add/Remove ComReference
14. Add/Remove ProjectReference
15. Add/Rename/Remove file
16. Add/Rename/Remove folder
17. DTE Properties/Properties Grid for Projects, folders, files (Expected names and values, editable)
18. CodeModel and other DTE APIs
19. Project Properties pages
20. Shared Projects
21. Cross language P2P refs (C# <--> VB)
22. Cross language P2P refs (C#/VB <--> C++)
23. Single file generators
24. Class designer support
	
# CPS Only
1. Edit project file
2. Dependencies node
3. Globs work as expected (file not munged with other edits/when adding/removing files)
4. Multi-targeting
5. Launch profiles
6. Publish to Azure
7. Auto-restore on open
	
# CSProj only
1. Winforms designer
2. Xaml designer
3. Publish to ClickOnce
4. Sql debugging
5. Remote debugging
6. Add Service reference
7. Add Web reference
8. Add Data Source
9. Code Analysis
10. Code metrics
11. Fakes
12. T4 templates
13. Zero impact projects ("Save new projects when created")
14. Simplified configurations ("Show advanced build configurations")
## Loading components

Components that are exported through MEF will be automatically discovered as necessary by any imports that exist, but loading and initializing is still a manual process. Additionally, components are typically applied to specific capabilities which can be dynamic, meaning they can be applied or unapplied throughout the lifetime of a project, when:

* A targets file is present, which carries the capability via `<ProjectCapability Include="Foo"/>`
* A package is installed with the capability
* It comes and goes dynamically from other sources

A capability can also be fixed for the lifetime of a project, in which case it cannot be changed without reloading the project. Fixed capabilities tend to come from `[assembly: ProjectTypeRegsitration(Capabilities = "A;B;C")]`.

Why is a "targets file" considered dynamic? Because the outer UnconfiguredProject "inherits" capabilities from any active configuration, targets are only ever evaluated inside a configuration. There is a time early in a project's lifetime before `ProjectLoadCheckpoint.ProjectInitialCapabilitiesEstablished` where there is no active configuration, or the active configuration's capabilities haven't been applied to the UnconfiguredProject. Also, the active configuration can change causing a new set of capabilities to be applied to the UnconfiguredProject.

### The old way

The old way to get your component loaded is to use either the `[ProjectAutoLoad]` or `[ConfiguredProjectAutoLoad]` attributes on a method within your component.

The dynamic nature of capabilities presents a problem however; `[ProjectAutoLoad]` says "load me automatically at the stage I've indicated" but that can be before the set of capabilities you are "applied to" have even been determined. You've said "I need to be loaded before we've determined the active configuration", but your capability doesn't appear until after that.

Another problem is that there's no mechanism to unload the component if the capability disappeared when someone changed the active configuration.

### The new way

To handle these situations, we've decided that changes to capabilities that are applied to `[ProjectAutoLoad]` components, if we've already loaded them or the stage has passed where we should have loaded them, will cause us to automatically [reload the project](https://github.com/Microsoft/VSProjectSystem/blob/master/doc/overview/dynamicCapabilities.md#critical-capabilities-changes-error). We did this for compatibility mostly. We did also consider disposing autoload components if their capability disappeared, but it was very likely that their dependencies probably weren't prepared for that.

To handle these dynamic capabilities that come and go without requiring us to reload the project, we introduced a new concept `IProjectDynamicLoadComponent`; LoadAsync gets called when the capability first appears, UnloadAsync gets called when the capability disappears. Most of our newish components opt into this. This isn't a direct replacement for [ProjectAutoLoad] or [ConfiguredProjectAutoLoad] because components will get loaded later (typically around `ProjectInitialCapabilitiesEstablished`), but is a requirement if you are a dynamic capability.

To help with implementing these dynamic components we also have `AbstractMultiLifetimeComponent` which serves to simplify the lifetime of a component that is loaded and unloaded multiple times.
### Roadmap

The first release of the project system ("15.0") was heavily focused on supporting .NET Core scenarios and parity with [VS 2015 project.json tooling](https://github.com/dotnet/project-system/issues?utf8=%E2%9C%93&q=label%3AParity-XProj%20). This will continue through the Visual Studio 15.x.x updates and releases. In 16.0, we'll start focusing on [feature parity](https://github.com/dotnet/project-system/labels/Parity-Legacy) with the legacy project system and support for .NET Core 3.0.

|Release|Branches|Version|Description|
|-------|--------|--------|--------|
|[15.0.x](https://github.com/dotnet/project-system/milestone/4)|[15.0.x](https://github.com/dotnet/project-system/tree/dev15.0.x)|Visual Studio 2017|This release is considered done and will only be patched for security-related issues.
|[15.9](https://github.com/dotnet/project-system/milestone/21)|[15.9.x](https://github.com/dotnet/project-system/tree/dev15.9.x)|Visual Studio 2017|This release is considered done, and only impactful bugs, crashes and hangs that block _major_ scenarios will be taken.
|[16.x](https://github.com/dotnet/project-system/milestone/25)|N/A|Visual Studio 2019| This release will be focused on [feature parity](https://github.com/dotnet/project-system/labels/Parity-Legacy) with the legacy project system, support for [.NET Core 3.0](https://github.com/dotnet/project-system/labels/Feature-.NET-Core), [WinForms](https://github.com/dotnet/project-system/labels/Feature-WinForms) and [WPF](https://github.com/dotnet/project-system/labels/Feature-XAML).
|[Backlog](https://github.com/dotnet/project-system/milestone/5)|none| |Uncommitted features/bugs.
# Rules of the Project System

The following are a set of rules and guidelines that we should follow as we write the new project system.

## Upgrade
- Developers will not be prompted to upgrade, convert or otherwise change their existing projects when opened in Visual Studio 2017. 
    
- Existing projects once opened in Visual Studio 2017 and saved, can be reopened in previous versions of Visual Studio right back to Visual Studio 2010

The exception the above rules are XProj-based projects which will be converted to csproj-based projects in Visual Studio 2017.

## Project Files
- New properties and items that are used only for Visual Studio or designer purposes should not be persisted in the project file. This file should be treated as a "user" file and as such, should be readable, easily editable and understandable by the user.

## Visual Studio
- Project System behavioral differences between languages (C#, Visual Basic or F#) or project types (WinForms, Web, etc), such as which files to nest or hide by default, should be configurable and persisted in the associated Microsoft.[Language].Designer.targets file.

# Up-to-date Check Implementation

See [this documenent](../up-to-date-check.md) for more general information about the up-to-date check.

The `IBuildUpToDateCheckProvider` interface (from CPS) has two members:

- `IsUpToDateCheckEnabledAsync`, which is serviced by `IProjectSystemOptions.GetFastUpToDateLoggingLevelAsync`
- `IsUpToDateAsync` which performs the checks described below

## What is checked

There are several checks which must all pass. 

All :heavy_check_mark: statements must be true for everything to be up to date.

Checks occur in the order listed.

As soon as one returns `false`, we are _not_ up to date and return immediately without performing further checks.

### Environment

- :heavy_check_mark: The query `BuildAction` is `Build`
- :heavy_check_mark: `IProjectAsynchronousTasksService.IsTaskQueueEmpty(ProjectCriticalOperation.Build)` is `true`
- :heavy_check_mark: We have received project and item data via Dataflow
- :heavy_check_mark: The current project's version is up to date with data received via Dataflow
- :heavy_check_mark: The list of items received via Dataflow has _not_ changed since the last check
- :heavy_check_mark: `DisableFastUpToDateCheck` is `false` or not specified
- :heavy_check_mark: No project items have `CopyToOutputDirectory` as `Always`

### Outputs

Output files break down as follows:

`_customOutputs` are `UpToDateCheckOutput` items published via `ProjectSubscription.JointRuleSource`
`_builtOutputs` are `UpToDateCheckBuilt` items published via `ProjectSubscription.JointRuleSource` (having no or empty `Original` property)

- :heavy_check_mark: All `_customOutputs` and `_builtOutputs` files exist

### Inputs

- :heavy_check_mark: All input files exist
- :heavy_check_mark: All input files are older than the earliest output (`_customOutputs` and `_builtOutputs`)
- :heavy_check_mark: All input files were modified before the last up-to-date check was performed

### `CopyUpToDateMarker` and `ResolvedCompilationReference`

If `ProjectSubscription.JointRuleSource` published a `CopyUpToDateMarker`...

- :heavy_check_mark: ...at least one `ResolvedCompilationReference` was also published
- :heavy_check_mark: ...at least one `ResolvedCompilationReference` file exists
- :heavy_check_mark: ...the `CopyUpToDateMarker` file exists
- :heavy_check_mark: ...the `CopyUpToDateMarker` file is newer than all existing `ResolvedCompilationReference` files

### Project items with `CopyToOutputDirectory` as `PreserveNewest`

All project items having `CopyToOutputDirectory` as `PreserveNewest`...

- :heavy_check_mark: ...exist
- :heavy_check_mark: ...have existing output files
- :heavy_check_mark: ...are older or equal to their output files

### Copied output files

`_copiedOutputFiles` is a map from destination to source paths (relative). It is populated with `UpToDateCheckBuilt` items published via `ProjectSubscription.JointRuleSource` having non-empty `Original` property.

For each `_copiedOutputFiles` source/destination

- :heavy_check_mark: ...the source must exist
- :heavy_check_mark: ...the destination must exist
- :heavy_check_mark: ...the destination must be older or the same age as the source

## Implementation

- [`BuildUpToDateCheck.cs`](https://github.com/dotnet/project-system/blob/master/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/UpToDate/BuildUpToDateCheck.cs)
- [`BuildUpToDateCheckTests.cs`](https://github.com/dotnet/project-system/blob/master/tests/Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests/ProjectSystem/UpToDate/BuildUpToDateCheckTests.cs)
# Project Configuration Properties & Project Properties

In the following discussion, C# is used as a reference but this discussion holds true for VB as well.

In general, we have two ways to get _Project Configuration Properties_. One is through the project's `IVSHierarchy.GetProperty` method using `IVsCfgBrowseObject`. The other is through Automation via DTE.


## Legacy project system

![native](https://cloud.githubusercontent.com/assets/10550513/26130958/0df90f52-3a4c-11e7-8fd9-a3c50198148f.png)

In the legacy project system, both of these mechanisms end up returning the same object, `CCSharpProjectConfigProperties`, which implements `IVsCfgBrowseObject` and a bunch of public interfaces like `CSharpProjectConfigurationProperties3`, `CSharpProjectConfigurationProperties4`, `CSharpProjectConfigurationProperties5`, `CSharpProjectConfigurationProperties6` and few more.

## CPS-based project system

![current](https://cloud.githubusercontent.com/assets/10550513/26237643/dfc6113a-3c2a-11e7-87cc-c45acb42a6ff.png)

In the CPS world, the object returned through `IVsCfgBrowseObject` implementation (`ProjectConfig` object) and the object returned via Automation are different. This automation object, `CSharpProjectConfigurationProperties`, exported by Managed Project System, overrides the default implementation.

## Future design for the new CPS based project system

![future](https://cloud.githubusercontent.com/assets/10550513/26237655/ed3cb60c-3c2a-11e7-923f-9908ddc641a4.png)

In the future, we would like to get to a design similar to the legacy project system, where the browse object and the automation object are both the same.

To achieve this,

1. Managed project system will export an implementation of the public VS interfaces, which gets ComAggregated over ProjectConfig.
2. This `ProjectConfig` will then be imported by Some_Wrapper, which then exports the `ProjectConfig` instance as the Automation Object.

## Project Properties

Project properties are not configuration based. In the legacy project system, `CCSharpProjectProperties` object is returned through `IVsHierarchy.GetProperty` and through Automation (`ENVDTE.Project.Properties`). In the new project system, we return `DynamicTypeBrowseObject`, backed by the browse object rule when `IVsHierarchy.GetProperty` or Automation is called. `CCSharpProjectProperties`, similar to `CCSharpProjectConfigProperties`, implements a bunch of public VS interfaces (`CSharpProjectProperties3`, `CSharpProjectProperties4`, `CSharpProjectProperties5`...), which are not implemented by the `DynamicTypeBrowseObject` object. This is not a problem as long as the browse object contains the properties that the interfaces defined because `EnvDte.Project.Properties` does not return `CCSharpProjectProperties`, which implements the VS interface, but instead returns a wrapper around the implementation, although the interfaces were public.
# Debugging Async Test Hangs

(Adapted from an internal document originally written by @jaredpar)

Tests hanging on CI machines are often caused by async tests that are blocked waiting for results that will never complete. Unlike traditional synchronous hangs, attaching to an async hang and looking at executing threads typically will not provide anything useful as there won't be any threads actually executing the "awaiting"  methods.

This document walks through debugging a test hang using WinDBG and SOS.

## Prerequisites 

- [WinDBG](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools)
- Basic understanding of async machinery  
- WinDBG attached to the hanging process, or opened with a dump from the hanging process

## Loading SOS

32-bit dump/process:

```
> .load C:\Windows\Microsoft.NET\Framework\v4.0.30319\sos.dll
```

64-bit dump/process:

```
> .load C:\Windows\Microsoft.NET\Framework64\v4.0.30319\sos.dll
```

## Determining the executing test

We need to find the xUnit types in memory that track test exception, in this case; [InvokeTestAsync](https://github.com/xunit/xunit/blob/9d10262a3694bb099ddd783d735aba2a7aac759d/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestRunner.cs#L67). It is an async method, so we're going to find the blocked tests by looking through instances of its async state machine.

```
> !dumpheap -type InvokeTestAsync
```

```
 Address       MT     Size
036c8cb0 08389c3c       44     
037a1828 08389c3c       44     
039d9c40 08389c3c       44     
03adb7c4 08389c3c       44     
03b9cf68 08389c3c       44     
03bd7638 08389c3c       44     
03bf5748 08389c3c       44     
03d75740 08389c3c       44     
03d7fee0 08389c3c       44     
03dc019c 08389c3c       44     
03dc2e9c 08389c3c       44     
03dd51a4 08389c3c       44     
03ee8c00 08389c3c       44     
03f98a38 08389c3c       44     
03ff07e4 08389c3c       44     
0bff4e9c 08389c3c       44     
0c037b98 08389c3c       44     
0c05c2b0 08389c3c       44     

Statistics:
      MT    Count    TotalSize Class Name
08389c3c       18          792 Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4
Total 18 objects
```

The output tells me there's 18 instances of the async state machine in memory. What we are looking for are state machines that have not completed.

**Note:** *If you have Prefer DML (Command -> Prefer DML) turned on, the Address and MT (method table) column should be hyperlinked - you can just click the links instead of manually typing the commands.*

Let's dump the first one:

```
> !DumpObj /d 036c8cb0
```
```
Name:        Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4
MethodTable: 08389c3c
EEClass:     083b7c8c
Size:        44(0x2c) bytes
File:        E:\project-system2\artifacts\Debug\bin\UnitTests\xunit.execution.desktop.dll
Fields:
      MT    Field   Offset                 Type VT     Attr    Value Name
7243f2dc  4000237       14         System.Int32  1 instance       -2 <>1__state
015c84d8  4000238       18 ...lib]], mscorlib]]  1 instance 037a1840 <>t__builder
08383de4  4000239        4 ...k.XunitTestRunner  0 instance 036b0ca0 <>4__this
07869498  400023a        8 ...ceptionAggregator  0 instance 036b2d3c aggregator
7243d488  400023b        c        System.String  0 instance 03501228 <output>5__2
08389e5c  400023c       10 ....TestOutputHelper  0 instance 00000000 <testOutputHelper>5__3
015c8dc4  400023d       24 ...cimal, mscorlib]]  1 instance 037a184c <>u__1

```

The value of the `<>1__state` field is what we're interested in, this represents the "current state" of the state machine:

Value|Meaning
---:|---
-2|Finished executing
-1|Not started or currently executing (should be active call stack)
&gt;=0| Blocked in an await. The number indicates the zero-based ordinal of which await in the method is currently waiting. 

Above, the value in the statement is `-2` indicating that it has finished executing, and hence not the test we are looking for.

Let's dump the second one:

```
> !DumpObj /d 037a1828
```
```
Name:        Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4
MethodTable: 08389c3c
EEClass:     083b7c8c
Size:        44(0x2c) bytes
File:        E:\project-system2\artifacts\Debug\bin\UnitTests\xunit.execution.desktop.dll
Fields:
      MT    Field   Offset                 Type VT     Attr    Value Name
7243f2dc  4000237       14         System.Int32  1 instance        0 <>1__state
015c84d8  4000238       18 ...lib]], mscorlib]]  1 instance 036c8cc8 <>t__builder
08383de4  4000239        4 ...k.XunitTestRunner  0 instance 036b843c <>4__this
07869498  400023a        8 ...ceptionAggregator  0 instance 036b84e8 aggregator
7243d488  400023b        c        System.String  0 instance 03501228 <output>5__2
08389e5c  400023c       10 ....TestOutputHelper  0 instance 00000000 <testOutputHelper>5__3
015c8dc4  400023d       24 ...cimal, mscorlib]]  1 instance 036c8cd4 <>u__1
```

In the above state machine instance, the value of `<>1__state` is `0` indicating this currently blocked on the first await in [InvokeTestAsync](https://github.com/xunit/xunit/blob/9d10262a3694bb099ddd783d735aba2a7aac759d/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestRunner.cs#L67) which executes the test. 

This indicates that we're interested in diving into this instance to find the hanging test.

To find the test class and test name, we need to dump the `<>4__this` field:

```
> !DumpObj /d 036b843c
```

```
Name:        Xunit.Sdk.XunitTestRunner
MethodTable: 08383de4
EEClass:     083b2410
Size:        48(0x30) bytes
File:        E:\project-system2\artifacts\Debug\bin\UnitTests\xunit.execution.desktop.dll
Fields:
      MT    Field   Offset                 Type VT     Attr    Value Name
07869498  400004e        4 ...ceptionAggregator  0 instance 036b8418 <Aggregator>k__BackingField
724834a4  400004f        8 ...lationTokenSource  0 instance 0367cb24 <CancellationTokenSource>k__BackingField
7243d87c  4000050        c      System.Object[]  0 instance 036a0148 <ConstructorArguments>k__BackingField
0707d53c  4000051       10 ...t.Sdk.IMessageBus  0 instance 0367d4e0 <MessageBus>k__BackingField
7243d488  4000052       14        System.String  0 instance 00000000 <SkipReason>k__BackingField
083850a4  4000053       18 ...bstractions.ITest  0 instance 036b83d8 <Test>k__BackingField
7243e688  4000054       1c          System.Type  0 instance 03554c1c <TestClass>k__BackingField
72442a84  4000055       20 ...ection.MethodInfo  0 instance 03585798 <TestMethod>k__BackingField
7243d87c  4000056       24      System.Object[]  0 instance 03569578 <TestMethodArguments>k__BackingField
08385180  400006d       28 ...ute, xunit.core]]  0 instance 036b8400 beforeAfterAttributes
```

To find the class, dump the ` <TestClass>k__BackingField` field:

```
> !DumpObj /d 03554c1c
```
```
Name:        System.RuntimeType
MethodTable: 7243e89c
EEClass:     72014fd0
Size:        28(0x1c) bytes
Type Name:   Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedUnderLockAsyncTests
Type MT:     07071d04
[...]
```

To find the method, dump the `<TestMethod>k__BackingField` field, followed by the `m_name` field:

```
> !DumpObj /d 03585798
```
```
Name:        System.Reflection.RuntimeMethodInfo
MethodTable: 7248e500
EEClass:     7202b1dc
Size:        60(0x3c) bytes
File:        C:\WINDOWS\Microsoft.Net\assembly\GAC_32\mscorlib\v4.0_4.0.0.0__b77a5c561934e089\mscorlib.dll
Fields:
      MT    Field   Offset                 Type VT     Attr    Value Name
72443db8  4001cb3       28        System.IntPtr  1 instance  7071cc0 m_handle
72443e20  4001cb4        4 ...+RuntimeTypeCache  0 instance 035853d4 m_reflectedTypeCache
7243d488  4001cb5        8        System.String  0 instance 03691920 m_name
[...]

```

```
> !DumpObj /d 03691920
```

```

Name:        System.String
MethodTable: 7243d488
EEClass:     72014a50
Size:        114(0x72) bytes
File:        C:\WINDOWS\Microsoft.Net\assembly\GAC_32\mscorlib\v4.0_4.0.0.0__b77a5c561934e089\mscorlib.dll
String:      ExecuteUnderLockAsync_AvoidsOverlappingWithDispose
[...]
```

Combining those, points us to the `OnceInitializedOnceDisposedUnderLockAsyncTests.ExecuteUnderLockAsync_AvoidsOverlappingWithDispose` method as the hanging test.

Based on what we learned above, we can dig further to figure out where it's hanging:

```
> !dumpheap -type ExecuteUnderLockAsync_AvoidsOverlappingWithDispose
```

```
 Address       MT     Size
036c8440 088fdfb4       60     

Statistics:
      MT    Count    TotalSize Class Name
088fdfb4        1           60 Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedUnderLockAsyncTests+<ExecuteUnderLockAsync_AvoidsOverlappingWithDispose>d__9
Total 1 objects

```

Dump that first address:

```
> !DumpObj /d 036c8440
```
```
Name:        Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedUnderLockAsyncTests+<ExecuteUnderLockAsync_AvoidsOverlappingWithDispose>d__9
MethodTable: 088fdfb4
EEClass:     083e5d80
Size:        60(0x3c) bytes
File:        E:\project-system2\artifacts\Debug\bin\UnitTests\Microsoft.VisualStudio.ProjectSystem.Managed.UnitTests.dll
Fields:
      MT    Field   Offset                 Type VT     Attr    Value Name
7243f2dc  4000266       20         System.Int32  1 instance        2 <>1__state
72489528  4000267       24 ...TaskMethodBuilder  1 instance 036c8464 <>t__builder
72485c7c  4000268        4 ...eading.Tasks.Task  0 instance 036c7788 firstAction
72485c7c  4000269        8 ...eading.Tasks.Task  0 instance 036c791c secondAction
083ce314  400026a        c ...cManualResetEvent  0 instance 036b8740 firstEntered
083ce314  400026b       10 ...cManualResetEvent  0 instance 036b879c firstRelease
083ce314  400026c       14 ...cManualResetEvent  0 instance 036b87f8 secondEntered
07071d04  400026d       18 ...derLockAsyncTests  0 instance 036b8600 <>4__this
088fe084  400026e       1c ...__DisplayClass9_0  0 instance 036c847c <>8__1
7247ddf4  400026f       30 ...vices.TaskAwaiter  1 instance 036c8470 <>u__1
015c5230  4000270       34 ...ption, mscorlib]]  1 instance 036c8474 <>u__2
```
`<>1__state` has a value of `2`, which as per above table indicates that 3rd await within the method currently blocked:

``` C#
[Fact]
public void ExecuteUnderLockAsync_AvoidsOverlappingWithDispose()
{

    [...]

    await firstEntered.WaitAsync();
    await Assert.ThrowsAsync<TimeoutException>(() => secondEntered.WaitAsync().WithTimeout(TimeSpan.FromMilliseconds(50)));

    firstRelease.Set();
    await secondEntered.WaitAsync(); // <!-- blocked here
    await Task.WhenAll(firstAction, secondAction);

    [...]
}
```

That's the line that you should start investigating.

## Further information

You can see more information, including a WinDBG extension that dumps async callstacks, over on [Async Hang Investigations](https://github.com/Microsoft/vs-threading/blob/master/doc/async_hang.md).# Capabilities

You can see the active capabilities for a given project, by turning on the `DiagnoseCapabilities` capability:

``` XML
  <ItemGroup>
    <ProjectCapability Include="DiagnoseCapabilities"/>
  </ItemGroup>
```

This will add a node in Solution Explorer that will list the current 'active' capabilities:

![image](https://cloud.githubusercontent.com/assets/1103906/22411354/16dccb2a-e6f7-11e6-91dc-91c451cc6371.png)
# Debugging Design-Time Builds

## Diagnosing Design-Time Builds

See [Diagnosing Design-Time Builds](/docs/design-time-builds.md#diagnosing-design-time-builds).

## Failing Design-Time Builds

You can artificially fail a design-time build with the following:

``` XML
  <Target Name="FailDesignTimeBuild" AfterTargets="ResolveAssemblyReferences">
      <Error Text="Failed design-time build" />
  </Target>
```
## Delaying Design-Time Builds

You can artificially delay a design-time build with the following:

``` XML
<UsingTask TaskName="Sleep" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
  <ParameterGroup>
    <!-- Delay in milliseconds -->
    <Delay ParameterType="System.Int32" Required="true" />
  </ParameterGroup>
  <Task>
    <Code Type="Fragment" Language="cs">
      <![CDATA[
      System.Threading.Thread.Sleep(this.Delay);
      ]]>
    </Code>
  </Task>
</UsingTask>

<Target Name="DelayDesignTimeBuild" AfterTargets="ResolveAssemblyReferences">
  <Sleep Delay="10000" />
</Target>
```

## Measuring Design-Time Builds

An easy way of measuring performance of a design-time build outside of VS is to run something like (replacing solution paths with appropriate solution):

> msbuild /nologo /m:1 /v:m /clp:Summary;PerformanceSummary /t:CollectResolvedSDKReferencesDesignTime;DebugSymbolsProjectOutputGroup;ResolveComReferencesDesignTime;ContentFilesProjectOutputGroup;DocumentationProjectOutputGroupDependencies;SGenFilesOutputGroup;ResolveProjectReferencesDesignTime;SourceFilesProjectOutputGroup;DebugSymbolsProjectOutputGroupDependencies;SatelliteDllsProjectOutputGroup;BuiltProjectOutputGroup;SGenFilesOutputGroupDependencies;ResolveAssemblyReferencesDesignTime;CollectSDKReferencesDesignTime;DocumentationProjectOutputGroup;PriFilesOutputGroup;BuiltProjectOutputGroupDependencies;SatelliteDllsProjectOutputGroupDependencies /p:"SolutionFileName=**Roslyn.sln**;LangName=en-US;Configuration=Debug;LangID=1033;DesignTimeBuild=true;SolutionDir=**E:\\roslyn\\**;SolutionExt=.sln;BuildingInsideVisualStudio=true;DefineExplicitDefaults=true;Platform=AnyCPU;SolutionPath=**E:\\roslyn\\Roslyn.sln**;SolutionName=**Roslyn**;DevEnvDir=C:\Program Files (x86)\Microsoft Visual Studio\Enterprise\Common7\IDE;BuildingProject=false" **E:\roslyn\src\Workspaces\CSharp\Portable\CSharpWorkspace.csproj**
# Logging

The project system code logs information to a custom Output Window pane either
while debugging or when a certain environment variable is set.

## Enabling project system logs

Setting the `PROJECTSYSTEM_PROJECTOUTPUTPANEENABLED` environment variable to
`1` enables project system logging.

This environment variable is set automatically when launching the
`ProjectSystemSetup` project within Visual Studio, via its
`launchSettings.json` file.

To enable this logging in other situations you may, for example:

1. Start a Developer Command Prompt
2. Run: `set PROJECTSYSTEM_PROJECTOUTPUTPANEENABLED=1`
3. Run: `devenv`
4. Open a solution
5. Use "View.Output Window"
6. Select the pane titled "Project" from the dropdown

## Up to date logs

The up-to-date check uses a separate CPS mechanism for logging (disabled by
default) that logs to the "Build" section of the "Output" pane. It is
controlled via Visual Studio's "Options" dialog:

![Projects and Solutions, .NET Core options](../images/options.png)# Debugging .NET SDK

## Testing SDK Changes

If you're making changes to the SDK (that is, the [dotnet/sdk](https://github.com/dotnet/sdk) repo) you can easily test VS or msbuild.exe with those changes by setting the `DOTNET_MSBUILD_SDK_RESOLVER_SDKS_DIR` environment variable.

After you build, find the generated Sdks directory. For example, if your repo is at D:\Projects\sdk, you'll find it at D:\Projects\sdk\bin\Debug\Sdks. Set the environment variable to point to this location:

`set DOTNET_MSBUILD_SDK_RESOLVER_SDKS_DIR=D:\Projects\sdk\bin\Debug\Sdks`

Now any instances of msbuild.exe or VS that inherit that setting will use your locally-produced SDK.# Setting up your Debugging Environment

## Debugger Settings

The day-to-day job of a developer that works on Visual Studio involves debugging and inspecting code outside of this repository. For best results, you'll want to flip some of the defaults so that you can can step into (Microsoft-employees only) other Visual Studio, framework and Windows code and inspect locals, fields, etc.

![image](https://user-images.githubusercontent.com/1103906/44320403-3fa23200-a485-11e8-9baa-b743cb96948d.png)

![image](https://user-images.githubusercontent.com/1103906/44320478-8a23ae80-a485-11e8-9426-0b7906093e9a.png)

![image](https://user-images.githubusercontent.com/1103906/44320534-e25ab080-a485-11e8-885b-811800d20684.png)

## Launch Settings

If you need to debug into native code (for example, msenv.dll, where the solution code lives), you can change your launch settings from ProjectSystem.sln to launch with the native debugger engine:

![image](https://user-images.githubusercontent.com/1103906/44320680-e2a77b80-a486-11e8-9887-8e5a44a4a26c.png)

If you are having troubling inspecting variables due to optimizations (assuming __Suppress JIT optimization on module load__ above is checked), you can also try bypassing NGEN images which should improve your debugging experience.
# Tracing

Common Project System (CPS) writes traces messages to both a TraceSource and a circular buffer.

## Inspecting Trace While Debugging

When you build this repository under debug either within Visual Studio or via the command-line, a trace listener is hooked up to output CPS tracing to the Debug category of the Output Window. You can use this to diagnose lots of issues, such as failing rules or missing snapshots.

You can increase the verbosity of what is output to the window by changing the verbosity level in [ManagedProjectSystemPackage.DebuggingTraceListener](https://github.com/dotnet/project-system/blob/master/src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/Packaging/ManagedProjectSystemPackage.DebuggerTraceListener.cs#L44).

## Inspecting Trace Within a Memory Dump

You can inspect the circular buffer within WinDbg with the following:

```
> !name2ee Microsoft.VisualStudio.ProjectSystem.dll Microsoft.VisualStudio.ProjectSystem.TraceUtilities
```
```
Module:      10c841c0
Assembly:    Microsoft.VisualStudio.ProjectSystem.dll
Token:       02000180
MethodTable: 16f88e70
EEClass:     07f85f14
Name:        Microsoft.VisualStudio.ProjectSystem.TraceUtilities
```
```
> !DumpClass /d 07f85f14
```

```
Class Name:      Microsoft.VisualStudio.ProjectSystem.TraceUtilities
mdToken:         02000180
File:            c:\program files (x86)\microsoft visual studio\preview\enterprise\common7\ide\commonextensions\microsoft\project\Microsoft.VisualStudio.ProjectSystem.dll
Parent Class:    6ded15b0
Module:          10c841c0
Method Table:    16f88e70
Vtable Slots:    4
Total Method Slots:  5
Class Attributes:    100180  Abstract, 
Transparency:        Critical
NumInstanceFields:   0
NumStaticFields:     3
      MT    Field   Offset                 Type VT     Attr    Value Name
6d69ee10  4000326      1f4 ...stics.TraceSource  0   shared   static Source
    >> Domain:Value  00b88180:0c559288 <<
6e37dfdc  4000327      1f8      System.String[]  0   shared   static CriticalTraceRotatingBuffer
    >> Domain:Value  00b88180:0c559360 <<
6e37f2d8  4000328      434         System.Int32  1   shared   static currentTraceIndex
    >> Domain:Value  00b88180:0 <<
```

```
> !DumpObj /d 0c559360; * Dump CriticalTraceRotatingBuffer
```
```
Name:        System.String[]
MethodTable: 6e37dfdc
EEClass:     6df54b80
Size:        140(0x8c) bytes
Array:       Rank 1, Number of elements 32, Type CLASS (Print Array)
Fields:
None
```
```
> !DumpArray /d 0c559360; * Print Array
```
This will output the values in the array if it can
```
Name:        System.String[]
MethodTable: 6e37dfdc
EEClass:     6df54b80
Size:        140(0x8c) bytes
Array:       Rank 1, Number of elements 32, Type CLASS
Element Methodtable: 6e37d484
[0] 11c4be4c
[1] 11c4be4c
[2] 11c4be4c
[3] null
[4] null
[5] null
[6] null
[7] null
[8] null
[9] null
[10] null
[11] null
[12] null
[13] null
[14] null
[15] null
[16] null
[17] null
[18] null
[19] null
[20] null
[21] null
[22] null
[23] null
[24] null
[25] null
[26] null
[27] null
[28] null
[29] null
[30] null
[31] null
```
> !DumpObj /d 11c4be4c
```
Name:        System.String
MethodTable: 7286eb40
EEClass:     72444a50
Size:        190(0xbe) bytes
File:        C:\WINDOWS\Microsoft.Net\assembly\GAC_32\mscorlib\v4.0_4.0.0.0__b77a5c561934e089\mscorlib.dll
String:      Generating snapshot for rule "{0}" failed because the rule was missing from the project.
Fields:
      MT    Field   Offset                 Type VT     Attr    Value Name
72870994  4000279        4         System.Int32  1 instance       88 m_stringLength
7286f588  400027a        8          System.Char  1 instance       47 m_firstChar
7286eb40  400027e       5c        System.String  0   shared   static Empty
    >> Domain:Value  01187c20:NotInit  <<
```
💡 Maybe there is a problem with a rule?
# Visual Studio

## Figuring out the Git SHA for your current build

1. In Explorer, look at the properties of %VSINSTALLDIR%\Common7\IDE\Extensions\Microsoft\ManagedProjectSystem\Microsoft\Microsoft.VisualStudio.ProjectSystem.Managed.dll

![image](https://user-images.githubusercontent.com/1103906/48829215-dbfe0c80-edc5-11e8-8618-b4c9844359c7.png)

The Product Version field contains the Git SHA from which that branch was built.
# Crash Dumps, UI Delays and Hang Data

## Crash Dumps

To get Windows to automatically save a memory dump every time Visual Studio crashes, merge the following registry settings:

[AlwaysSaveDevEnvCrashDumps.reg](/docs/repo/content/AlwaysSaveDevEnvCrashDumps.reg?raw=true)

Dumps will be saved to C:\Crashdumps.

## Non-Fatal Watsons

To view Visual Studio's non-fatal watson reports on a machine:

1. Open up Event Viewer
2. Right-click on Custom Views and choose Import Custom View
3. In file name, point to [NonFatalWatsons.xml](/docs/repo/content/NonFatalWatsons.xml?raw=true) and click OK

## UI Delays

To get Windows to automatically send on data about UI delays in Visual Studio, merge the following registry settings:

[AlwaysSendPerfWatsonData.reg](/docs/repo/content/AlwaysSendPerfWatsonData.reg?raw=true)

For more information on these settings, see [Configure Windows telemetry in your organization](https://docs.microsoft.com/en-us/windows/configuration/configure-windows-telemetry-in-your-organization).
# Resources

Files in this directory are used to generate images contained within the project. These files are not included in assemblies directly.# Banned APIs across the project.

# Syntax:
#
#       E:Event
#       M:Method
#       F:Field
#       P:Property
#       T:Type

T:Microsoft.VisualStudio.ProjectSystem.IProjectLockService; Using IProjectAccessor enables checkout from source control on write, and allows async release

T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectGuidService; Using ISafeProjectGuidService avoids reading the GUID before it is safe to do so during initialisation
T:Microsoft.VisualStudio.ProjectSystem.VS.IProjectGuidService2; Using ISafeProjectGuidService avoids reading the GUID before it is safe to do so during initialisation

P:Microsoft.VisualStudio.ProjectSystem.VS.IProjectAsyncLoadDashboard.ProjectLoadedInHost; Using IUnconfiguredProjectTasksService.ProjectLoadedInHost prevents waiting indefinitely when the project is closed before it has finished loading

M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.LoadedProject(Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService); Using IUnconfiguredProjectTasksService.LoadedProjectAsync is unit testable
M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.LoadedProjectAsync(Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService,System.Func{System.Threading.Tasks.Task},System.Boolean); Using IUnconfiguredProjectTasksService.LoadedProjectAsync is unit testable
M:Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.LoadedProjectAsync`1(Microsoft.VisualStudio.ProjectSystem.IProjectAsynchronousTasksService,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean); Using IUnconfiguredProjectTasksService.LoadedProjectAsync is unit testable

M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean); "ConfigureAwait(true)" should be removed, and "ConfigureAwait(false)" should be replaced with "await TaskScheduler.Default"
M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean); "ConfigureAwait(true)" should be removed, and "ConfigureAwait(false)" should be replaced with "await TaskScheduler.Default"
M:System.Threading.Tasks.ValueTask.ConfigureAwait(System.Boolean); "ConfigureAwait(true)" should be removed, and "ConfigureAwait(false)" should be replaced with "await TaskScheduler.Default"
M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean); "ConfigureAwait(true)" should be removed, and "ConfigureAwait(false)" should be replaced with "await TaskScheduler.Default"

M:System.Threading.Tasks.Task.Run(System.Action); Task.Run should be replaced with IProjectThreadingService.RunAndForget, which prevents the project being unloaded while the Task is running and ensures that failed tasks are reported as non-fatal watsons
M:System.Threading.Tasks.Task.Run`1(System.Func{``0}); Task.Run should be replaced with IProjectThreadingService.RunAndForget, which prevents the project being unloaded while the Task is running and ensures that failed tasks are reported as non-fatal watsons
M:System.Threading.Tasks.Task.Run`1(System.Func{System.Threading.Tasks.Task{``0}}); Task.Run should be replaced with IProjectThreadingService.RunAndForget, which prevents the project being unloaded while the Task is running and ensures that failed tasks are reported as non-fatal watsons
M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task}); Task.Run should be replaced with IProjectThreadingService.RunAndForget, which prevents the project being unloaded while the Task is running and ensures that failed tasks are reported as non-fatal watsons
M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken); Task.Run should be replaced with IProjectThreadingService.RunAndForget, which prevents the project being unloaded while the Task is running and ensures that failed tasks are reported as non-fatal watsons
M:System.Threading.Tasks.Task.Run`1(System.Func`1{``0},System.Threading.CancellationToken); Task.Run should be replaced with IProjectThreadingService.RunAndForget, which prevents the project being unloaded while the Task is running and ensures that failed tasks are reported as non-fatal watsons
M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken); Task.Run should be replaced with IProjectThreadingService.RunAndForget, which prevents the project being unloaded while the Task is running and ensures that failed tasks are reported as non-fatal watsons
M:System.Threading.Tasks.Task.Run`1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken); Task.Run should be replaced with IProjectThreadingService.RunAndForget, which prevents the project being unloaded while the Task is running and ensures that failed tasks are reported as non-fatal watsons

T:System.IServiceProvider; Import and use IVsUIService<T> and IVsUIService<TService, TInterface> which enforce usage on the UI thread and prevent blocking RPC calls from background threads
T:Microsoft.VisualStudio.Shell.SVsServiceProvider; Import and use IVsUIService<T> and IVsUIService<TService, TInterface> which enforce usage on the UI thread and prevent blocking RPC calls from background threads

T:Microsoft.VisualStudio.Shell.IAsyncServiceProvider; Import and use IVsService<T> and IVsService<TService, TInterface> which prevent blocking RPC calls from background threads
T:Microsoft.VisualStudio.Shell.Interop.SAsyncServiceProvider; Import and use IVsService<T> and IVsService<TService, TInterface> which prevent blocking RPC calls from background threads

T:Microsoft.VisualStudio.ProjectSystem.VS.IServiceProviderExtensions; Import and use IVsUIService<T> and IVsUIService<TService, TInterface> which enforce usage on the UI thread and prevent blocking RPC calls from background threads

M:Microsoft.VisualStudio.Threading.TplExtensions.Forget(System.Threading.Tasks.Task); Use IProjectFaultHandlerService.Forget to ensure that failed tasks are reported as non-fatal watsons and assigned to the correct component
M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.FileAndForget(System.Threading.Tasks.Task,System.String,System.String,System.Func{System.Exception,System.Boolean}); Use IProjectFaultHandlerService.Forget to ensure that failed tasks are reported as non-fatal watsons and assigned to the correct component
M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.FileAndForget(Microsoft.VisualStudio.Threading.JoinableTask,System.String,System.String,System.Func{System.Exception,System.Boolean}); Use IProjectFaultHandlerService.Forget to ensure that failed tasks are reported as non-fatal watsons and assigned to the correct component

M:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService.HandleFaultAsync(System.Exception,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject); Use IProjectFaultHandlerService.ReportFaultAsync to ensure that failed tasks are reported as non-fatal watsons and assigned to the correct component
M:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService.RegisterFaultHandler(System.Threading.Tasks.Task,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject); Use IProjectFaultHandlerService.Forget to ensure that failed tasks are reported as non-fatal watsons and assigned to the correct component
M:Microsoft.VisualStudio.ProjectSystem.IProjectFaultHandlerService.RegisterFaultHandler`1(System.Threading.Tasks.Task{``0},Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject); Use IProjectFaultHandlerService.Forget to ensure that failed tasks are reported as non-fatal watsons and assigned to the correct component

M:Microsoft.VisualStudio.Telemetry.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.String);Use IProjectFaultHandlerService.Forget to ensure that failed tasks are reported as non-fatal watsons and assigned to the correct component
M:Microsoft.VisualStudio.Telemetry.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.String,System.Exception);Use IProjectFaultHandlerService.Forget to ensure that failed tasks are reported as non-fatal watsons and assigned to the correct component
M:Microsoft.VisualStudio.Telemetry.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.String,System.Exception,System.Func{Microsoft.VisualStudio.Telemetry.IFaultUtility,System.Int32});Use IProjectFaultHandlerService.Forget to ensure that failed tasks are reported as non-fatal watsons and assigned to the correct component
M:Microsoft.VisualStudio.Telemetry.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.String,System.Exception,System.Func{Microsoft.VisualStudio.Telemetry.IFaultUtility,System.Int32},Microsoft.VisualStudio.Telemetry.TelemetryEventCorrelation[]);Use IProjectFaultHandlerService.Forget to ensure that failed tasks are reported as non-fatal watsons and assigned to the correct component

M:Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService.Fork(System.Func{System.Threading.Tasks.Task},Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.ProjectSystem.UnconfiguredProject,Microsoft.VisualStudio.ProjectSystem.ConfiguredProject,Microsoft.VisualStudio.ProjectSystem.ErrorReportSettings,Microsoft.VisualStudio.ProjectSystem.ProjectFaultSeverity,Microsoft.VisualStudio.ProjectSystem.ForkOptions); Use IProjectThreadingService.RunAndForget to ensure non-fatal watsons are assigned to the correct component

T:System.Threading.Tasks.Dataflow.ActionBlock`1;Use DataflowUtilities.LinkToAction/LinkToAsyncAction or DataflowBlockSlim.CreateActionBlock to reduce memory and avoid the overhead of the built-in blocks
T:System.Threading.Tasks.Dataflow.BroadcastBlock`1;Use DataflowBlockSlim.CreateBroadcastBlock to reduce memory and avoid the overhead of the built-in blocks
T:System.Threading.Tasks.Dataflow.TransformManyBlock`2;Use DataflowBlockSlim.CreateTransformManyBlock to reduce memory and avoid the overhead of the built-in blocks

F:Microsoft.VisualStudio.VSConstants.S_OK;Use HResult.OK or HResult.IsOK
F:Microsoft.VisualStudio.VSConstants.E_FAIL;Use HResult.Fail or HResult.Failed
F:Microsoft.VisualStudio.VSConstants.S_FALSE;Use HResult.False or HResult.IsFalse
F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL;Use HResult.NotImplemented or HResult.IsNotImplemented
F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG;Use HResult.InvalidArg
F:Microsoft.VisualStudio.VSConstants.RPC_E_WRONG_THREAD;Use HResult.WrongThread
F:Microsoft.VisualStudio.VSConstants.E_ABORT;Use HResult.Abort
F:Microsoft.VisualStudio.VSConstants.E_PENDING;Use HResult.Pending
F:Microsoft.VisualStudio.VSConstants.DISP_E_MEMBERNOTFOUND;Use HResult.MemberNotFound
F:Microsoft.VisualStudio.VSConstants.E_NOINTERFACE;Use HResult.NoInterface
F:Microsoft.VisualStudio.VSConstants.E_UNEXPECTED;Use HResult.Unexpected
F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED;Use HResult.Ole.Cmd.NotSupported
F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP;Use HResult.Ole.Cmd.UnknownGroup

T:Microsoft.VisualStudio.Shell.ThreadHelper;Import JoinableTaskContext if inside a MEF component for unit testing purposes

T:Microsoft.VisualStudio.ProjectSystem.Properties.StandardRuleDataflowLinkOptions;Use DataflowOption.WithRuleNames to avoid boilerplate initialization
T:System.Threading.Tasks.Dataflow.DataflowLinkOptions;Use DataflowOption.PropagateCompletion to avoid boilerplate initialization
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.CLSCTX_ESERVER_HANDLER = 256 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.CLSCTX_INPROC_HANDLER = 2 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.CLSCTX_INPROC_HANDLER16 = 32 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.CLSCTX_INPROC_HANDLERX86 = 128 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.CLSCTX_INPROC_SERVER = 1 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.CLSCTX_INPROC_SERVER16 = 8 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.CLSCTX_INPROC_SERVERX86 = 64 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.CLSCTX_LOCAL_SERVER = 4 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.CLSCTX_NO_CODE_DOWNLOAD = 1024 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.CLSCTX_REMOTE_SERVER = 16 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.CLSCTX_RESERVED = 512 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.DISP_E_MEMBERNOTFOUND = -2147352573 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.DISPID_UNKNOWN = -1 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.DLGC_WANTTAB = 2 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.EM_UNDO = 199 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.FACILITY_WIN32 = 7 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.FALSE = 0 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.FNERR_BUFFERTOOSMALL = 12291 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.GW_CHILD = 5 -> UInteger
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.HDF_BITMAP_ON_RIGHT = 4096 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.HDF_IMAGE = 2048 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.HDF_STRING = 16384 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.HDI_FORMAT = 4 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.HDI_IMAGE = 32 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.HDI_TEXT = 2 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.HDM_SETIMAGELIST = 4616 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.HDM_SETITEMW = 4620 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.LVM_EDITLABELA = 4119 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.LVM_EDITLABELW = 4214 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.LVM_GETHEADER = 4127 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.MAX_PATH = 260 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.OLE_E_PROMPTSAVECANCELLED = -2147221492 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.OLECMDERR_E_NOTSUPPORTED = -2147221248 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_ALLEVENTS = 191 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_ALLINPUT = 255 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_ALLPOSTMESSAGE = 256 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_HOTKEY = 128 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_INPUT = 7 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_KEY = 1 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_MOUSE = 6 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_MOUSEBUTTON = 4 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_MOUSEMOVE = 2 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_PAINT = 32 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_POSTMESSAGE = 8 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_SENDMESSAGE = 64 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.QS_TIMER = 16 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.SC_CONTEXTHELP = 61824 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.SPI_GETSCREENREADER = 70 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.TRUE = 1 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.TVIF_STATE = 8 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.TVIS_STATEIMAGEMASK = 61440 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.TVM_SETITEMA = 4365 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WAVE_FORMAT_ADPCM = 2 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WAVE_FORMAT_IEEE_FLOAT = 3 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WAVE_FORMAT_PCM = 1 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_CHAR = 258 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_CONTEXTMENU = 123 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_GETDLGCODE = 135 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_HELP = 83 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_KEYDOWN = 256 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_KEYUP = 257 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_PALETTECHANGED = 785 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_PASTE = 770 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_RBUTTONDOWN = 516 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_RBUTTONUP = 517 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_SETFOCUS = 7 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_SETTINGCHANGE = 26 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_SYSCHAR = 262 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_SYSCOLORCHANGE = 21 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_SYSCOMMAND = 274 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_SYSKEYDOWN = 260 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_SYSKEYUP = 261 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_THEMECHANGED = 794 -> Integer
Const Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.WM_USER = 1024 -> Integer
Const Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.PROPPAGESTATUS_CLEAN = 4 -> Integer
Const Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.PROPPAGESTATUS_DIRTY = 1 -> Integer
Const Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.PROPPAGESTATUS_VALIDATE = 2 -> Integer
Const Microsoft.VisualStudio.Editors.Constants.WS_CHILD = 1073741824 -> Integer
Const Microsoft.VisualStudio.Editors.Constants.WS_CLIPSIBLINGS = 67108864 -> Integer
Const Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.NestingCharacter = ":" -> String
Const Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.SW_HIDE = 0 -> Integer
Const Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.SW_SHOW = 5 -> Integer
Const Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.SW_SHOWNORMAL = 1 -> Integer
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.CurrentDesignerHost() -> System.ComponentModel.Design.IDesignerHost
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.New() -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.New(ServiceProvider As System.IServiceProvider) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.ServiceProvider() -> System.IServiceProvider
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.ServiceProvider(Value As System.IServiceProvider) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.SetFontStyles() -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.ShowDialog() -> System.Windows.Forms.DialogResult
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.ShowHelp() -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseRootDesigner
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseRootDesigner.GetService(ServiceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseRootDesigner.New() -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseRootDesigner.RefreshMenuStatus() -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseRootDesigner.RegisterMenuCommands(MenuCommands As System.Collections.ArrayList, KeepRegisteredMenuCommands As Boolean = True) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseRootDesigner.RemoveMenuCommands() -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseRootDesigner.SelectionService() -> System.ComponentModel.Design.ISelectionService
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseRootDesigner.ShowContextMenu(ContextMenuID As System.ComponentModel.Design.CommandID, X As Integer, Y As Integer) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.CheckCommandStatusHandler
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase.DesignerWindowPaneBase
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase.DesignerWindowPaneBase.IVsWindowPaneCommit_CommitPendingEdit(ByRef pfCommitFailed As Integer) -> Integer
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase.DesignerWindowPaneBase.New(surface As System.ComponentModel.Design.DesignSurface, SupportToolbox As Boolean) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase.DesignerWindowPaneBase.View() -> System.Windows.Forms.Control
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase.New(provider As System.IServiceProvider, SupportToolbox As Boolean) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMenuCommand
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMenuCommand.New(RootDesigner As Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseRootDesigner, CommandID As System.ComponentModel.Design.CommandID, CommandHandler As System.EventHandler, CommandEnabledHandler As Microsoft.VisualStudio.Editors.AppDesDesignerFramework.CheckCommandStatusHandler = Nothing, CommandCheckedHandler As Microsoft.VisualStudio.Editors.AppDesDesignerFramework.CheckCommandStatusHandler = Nothing, CommandVisibleHandler As Microsoft.VisualStudio.Editors.AppDesDesignerFramework.CheckCommandStatusHandler = Nothing, AlwaysCheckStatus As Boolean = False, CommandText As String = Nothing) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMenuCommand.RefreshStatus() -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMessageBox
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMessageBox.New() -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl.New() -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl.New(errors As System.Collections.ICollection) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl.New(ex As System.Exception) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl.New(Text As String) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.SourceCodeControlManager
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.SourceCodeControlManager.AreFilesEditable() -> Boolean
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.SourceCodeControlManager.EnsureFilesEditable() -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.SourceCodeControlManager.ManagedFiles() -> System.Collections.Generic.List(Of String)
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.SourceCodeControlManager.ManagedFiles(Value As System.Collections.Generic.List(Of String)) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.SourceCodeControlManager.ManageFile(mkDocument As String) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.SourceCodeControlManager.New(sp As System.IServiceProvider, Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy) -> Void
Microsoft.VisualStudio.Editors.AppDesDesignerFramework.SourceCodeControlManager.StopManagingFile(mkDocument As String) -> Void
Microsoft.VisualStudio.Editors.AppDesInterop.CAUUIDMarshaler
Microsoft.VisualStudio.Editors.AppDesInterop.CAUUIDMarshaler.New() -> Void
Microsoft.VisualStudio.Editors.AppDesInterop.CorMetaDataDispenser
Microsoft.VisualStudio.Editors.AppDesInterop.CorMetaDataDispenser.New() -> Void
Microsoft.VisualStudio.Editors.AppDesInterop.ILangInactiveCfgPropertyNotifySink
Microsoft.VisualStudio.Editors.AppDesInterop.ILangInactiveCfgPropertyNotifySink.OnChanged(dispid As Integer, wszConfigName As String) -> Integer
Microsoft.VisualStudio.Editors.AppDesInterop.ILangPropertyProvideBatchUpdate
Microsoft.VisualStudio.Editors.AppDesInterop.ILangPropertyProvideBatchUpdate.BeginBatch() -> Void
Microsoft.VisualStudio.Editors.AppDesInterop.ILangPropertyProvideBatchUpdate.EndBatch() -> Void
Microsoft.VisualStudio.Editors.AppDesInterop.ILangPropertyProvideBatchUpdate.IsBatchModeEnabled(ByRef BatchModeEnabled As Boolean) -> Void
Microsoft.VisualStudio.Editors.AppDesInterop.ILangPropertyProvideBatchUpdate.PushOptionsToCompiler(dispid As UInteger) -> Void
Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant
Microsoft.VisualStudio.Editors.AppDesInterop.Win32Constant.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.Close() -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.MapLogicalView(ByRef rguidLogicalView As System.Guid, ByRef pbstrPhysicalView As String) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.SetSite(Site As Microsoft.VisualStudio.OLE.Interop.IServiceProvider) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerLoader
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerLoader.InitializeEx(ServiceProvider As Microsoft.VisualStudio.Shell.ServiceProvider, Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ItemId As UInteger, punkDocData As Object) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerLoader.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.ActualGuid() -> System.Guid
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CloseFrame() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CommitPendingEdit() -> Boolean
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CreateDesigner() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CustomMkDocumentProvider() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomDocumentMonikerProvider
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CustomMkDocumentProvider(Value As Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomDocumentMonikerProvider) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CustomViewProvider() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CustomViewProvider(Value As Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.DocCookie() -> UInteger
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.DocData() -> Object
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.DocData(Value As Object) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.DocView() -> System.Windows.Forms.Control
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.DocView(Value As System.Windows.Forms.Control) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditFlags() -> UInteger
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditFlags(Value As UInteger) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditorCaption() -> String
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditorCaption(Value As String) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditorGuid() -> System.Guid
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditorGuid(Value As System.Guid) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.Hierarchy() -> Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.IsDirty() -> Boolean
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.IsPropertyPage() -> Boolean
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.ItemId() -> UInteger
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.m_Debug_cWindowFrameBoundsUpdated -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.m_Debug_cWindowFrameShow -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.MkDocument() -> String
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.MkDocument(Value As String) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.New(View As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView, Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ItemId As UInteger, PropertyPageInfo As Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.New(View As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView, Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ItemId As UInteger) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.OnWindowActivated(activated As Boolean) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.PhysicalView() -> String
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.PhysicalView(Value As String) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.PropertyPageInfo() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.ShowDesigner(Show As Boolean = True) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.TabAutomationName() -> String
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.TabAutomationName(Value As String) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.TabTitle() -> String
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.TabTitle(Value As String) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.UpdateWindowFrameBounds() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.VsUIShell5() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell5
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.VsWindowFrame() -> Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.VsWindowFrame(Value As Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.Hierarchy() -> Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.Hierarchy(Value As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.ItemId() -> UInteger
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.ItemId(Value As UInteger) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.RootDesigner() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.CommitAnyPendingChanges() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.Component() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.GetService(ServiceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.GetView() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.ActiveView() -> System.Guid
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.ActiveView(Value As System.Guid) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.CommitAnyPendingChanges() -> Boolean
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.DelayRefreshDirtyIndicators() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.DsMsgBox(ex As System.Exception, HelpLink As String = Nothing) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.DsMsgBox(Message As String, Buttons As System.Windows.Forms.MessageBoxButtons, Icon As System.Windows.Forms.MessageBoxIcon, DefaultButton As System.Windows.Forms.MessageBoxDefaultButton = System.Windows.Forms.MessageBoxDefaultButton.Button1, HelpLink As String = Nothing) -> System.Windows.Forms.DialogResult
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.DTEProject() -> EnvDTE.Project
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.GetPropertyPages() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo()
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.GetSaveTreeItems(flags As Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS) -> Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM()
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.GetService(ServiceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.InitializationComplete() -> Boolean
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.InitView() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.New(serviceProvider As System.IServiceProvider) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.NotifyShuttingDown() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterAttributeChange(docCookie As UInteger, grfAttribs As UInteger) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterDocumentWindowHide(docCookie As UInteger, pFrame As Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterFirstDocumentLock(docCookie As UInteger, dwRDTLockType As UInteger, dwReadLocksRemaining As UInteger, dwEditLocksRemaining As UInteger) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterLastDocumentUnlock(Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ItemId As UInteger, MkDocument As String, ClosedWithoutSaving As Integer) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterSave(docCookie As UInteger) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterSaveAll() -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnBeforeDocumentWindowShow(docCookie As UInteger, fFirstShow As Integer, pFrame As Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnBeforeFirstDocumentLock(Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ItemId As UInteger, MkDocument As String) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnBeforeLastDocumentUnlock(docCookie As UInteger, dwRDTLockType As UInteger, dwReadLocksRemaining As UInteger, dwEditLocksRemaining As UInteger) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnCmdUIContextChanged(dwCmdUICookie As UInteger, fActive As Integer) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnElementValueChanged(elementid As UInteger, varValueOld As Object, varValueNew As Object) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnInitializationComplete() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnSelectionChanged(pHierOld As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidOld As UInteger, pMISOld As Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect, pSCOld As Microsoft.VisualStudio.Shell.Interop.ISelectionContainer, pHierNew As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidNew As UInteger, pMISNew As Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect, pSCNew As Microsoft.VisualStudio.Shell.Interop.ISelectionContainer) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.SetUndoRedoCleanStateOnAllPropertyPages() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.SpecialFiles() -> Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecialFiles
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.SwitchTab(forward As Boolean) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.WindowFrame() -> Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.ActivateLogicalView(ByRef rguidLogicalView As System.Guid) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.AppDesignerView() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.CloseFrameNoSave() -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.ClosePromptSave() -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.GetActiveLogicalView(ByRef pguidLogicalView As System.Guid) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.IsLogicalViewActive(ByRef rguidLogicalView As System.Guid, ByRef pIsActive As Integer) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.IVsWindowPaneCommit_CommitPendingEdit(ByRef pfCommitFailed As Integer) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.New(surface As System.ComponentModel.Design.DesignSurface) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.NextTab() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.PrevTab() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.SaveChildren(flags As Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.SaveProjectFile() -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.VsUIShell2Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell2
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.VsUIShell5Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell5
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.VsUIShellService() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPaneControl
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPaneControl.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.CmdTargetHelper
Microsoft.VisualStudio.Editors.ApplicationDesigner.CmdTargetHelper.New(WindowPane As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomDocumentMonikerProvider
Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomDocumentMonikerProvider.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider
Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.Dispose() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.DeferrableWindowPaneProviderService
Microsoft.VisualStudio.Editors.ApplicationDesigner.DeferrableWindowPaneProviderService.New(provider As System.IServiceProvider, docData As Microsoft.VisualStudio.Shell.Design.Serialization.DocData) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider
Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.New(ErrorText As String) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.New(Exception As System.Exception) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner
Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner.DelayRefreshDirtyIndicators() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner.DsMsgBox(ex As System.Exception, HelpLink As String = Nothing) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner.GetLocaleID() -> UInteger
Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner.GetService(ServiceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.ApplicationDesigner.IVsEditWindowNotify
Microsoft.VisualStudio.Editors.ApplicationDesigner.IVsEditWindowNotify.OnActivated(activated As Boolean) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.AccessibleState() -> System.Windows.Forms.AccessibleStates
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.ButtonIndex() -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.DirtyIndicator() -> Boolean
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.DirtyIndicator(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.Location() -> System.Drawing.Point
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.Location(Value As System.Drawing.Point) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.SetIndex(index As Integer) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.TextWithDirtyIndicator() -> String
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.AddTab(Title As String, AutomationName As String) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ClearTabs() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.GetTabButton(index As Integer) -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.HostingPanel() -> System.Windows.Forms.Panel
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.HoverItem() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.InvalidateLayout() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnItemEnter(e As System.EventArgs, item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnItemLeave(e As System.EventArgs, item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.Renderer() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.SelectedIndex() -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.SelectedIndex(Value As Integer) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.SelectedItem() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.SelectedItem(Value As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ServiceProvider() -> System.IServiceProvider
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ServiceProvider(Value As System.IServiceProvider) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.TabButtonCount() -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.TabButtons() -> System.Collections.Generic.IEnumerable(Of Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ThemeChanged(sender As Object, args As System.EventArgs) -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ThemeChangedEventHandler
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.VsUIShell2Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell2
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.VsUIShell5Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell5
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.VsUIShellService() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.CreateGDIObjects(ForceUpdate As Boolean = False) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.New(owner As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.PerformLayout() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.PreferredButtonForSwitchableSlot() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.PreferredButtonForSwitchableSlot(Value As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.RenderBackground(g As System.Drawing.Graphics) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.RenderButton(g As System.Drawing.Graphics, button As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton, IsSelected As Boolean, IsHovered As Boolean) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.ServiceProvider() -> System.IServiceProvider
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.ServiceProvider(Value As System.IServiceProvider) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.UpdateCacheState() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.ComPropPageInstance() -> Microsoft.VisualStudio.OLE.Interop.IPropertyPage
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.Guid() -> System.Guid
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.IsConfigPage() -> Boolean
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.LoadException() -> System.Exception
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.New(ParentView As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView, Guid As System.Guid, IsConfigurationDependentPage As Boolean) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.Site() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.Title() -> String
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.BackingServiceProvider() -> System.IServiceProvider
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.BackingServiceProvider(Value As System.IServiceProvider) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.CommitPendingChanges() -> Boolean
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.GetLocaleID(ByRef pLocaleID As UInteger) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.GetPageContainer(ByRef ppunk As Object) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.GetService(serviceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.HasBeenSetDirty() -> Boolean
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.HasBeenSetDirty(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.New(View As Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner, PropPage As Microsoft.VisualStudio.OLE.Interop.IPropertyPage) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.OnStatusChange(dwFlags As UInteger) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.QueryService(ByRef guidService As System.Guid, ByRef riid As System.Guid, ByRef ppvObject As System.IntPtr) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.TranslateAccelerator(pMsg As Microsoft.VisualStudio.OLE.Interop.MSG()) -> Integer
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomDocumentMonikerProvider
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomDocumentMonikerProvider.New(DesignerView As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView, SpecialFileId As Integer) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView.New() -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView.SetSite(ViewProvider As Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.DesignerPanel() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.DesignerView() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.LinkText() -> String
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.New(DesignerView As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView, DesignerPanel As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel, SpecialFileId As Integer, LinkText As String) -> Void
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.SpecialFileId() -> Integer
Microsoft.VisualStudio.Editors.Constants
Microsoft.VisualStudio.Editors.Constants.New() -> Void
Microsoft.VisualStudio.Editors.IVBPackage
Microsoft.VisualStudio.Editors.IVBPackage.GetLastShownApplicationDesignerTab(projectHierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy) -> Integer
Microsoft.VisualStudio.Editors.IVBPackage.SetLastShownApplicationDesignerTab(projectHierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, tab As Integer) -> Void
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationPropertiesBase
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationPropertiesBase.New() -> Void
Microsoft.VisualStudio.Editors.Package.InternalException
Microsoft.VisualStudio.Editors.Package.InternalException.New() -> Void
Microsoft.VisualStudio.Editors.Package.InternalException.New(info As System.Runtime.Serialization.SerializationInfo, context As System.Runtime.Serialization.StreamingContext) -> Void
Microsoft.VisualStudio.Editors.Package.InternalException.New(InnerException As System.Exception) -> Void
Microsoft.VisualStudio.Editors.Package.InternalException.New(Message As String, InnerException As System.Exception) -> Void
Microsoft.VisualStudio.Editors.Package.InternalException.New(Message As String) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.GetLocaleID() -> Integer
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.GetService(ServiceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.GetTransaction(description As String) -> System.ComponentModel.Design.DesignerTransaction
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.New(childPage As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase, wrappedInternalSite As Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal, wrappedUndoSite As Microsoft.VisualStudio.ManagedInterfaces.ProjectDesigner.IVsProjectDesignerPageSite) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.OnPropertyChanged(propertyName As String, propertyDescriptor As System.ComponentModel.PropertyDescriptor, oldValue As Object, newValue As Object) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.OnPropertyChanging(propertyName As String, propertyDescriptor As System.ComponentModel.PropertyDescriptor) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.OnStatusChange(flags As Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.TranslateAccelerator(msg As System.Windows.Forms.Message) -> Integer
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.CommonProperty = 2 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.Dirty = 1 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.Hidden = 64 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.None = 0 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.NoOptimisticFileCheckout = 32768 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.PersistedInApplicationDefinitionFile = 16384 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.PersistedInAppManifestFile = 1024 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.PersistedInAssemblyInfoFile = 2048 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.PersistedInProjectUserFile = 256 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.PersistedInVBMyAppFile = 512 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.ProjectMayBeReloadedDuringPropertySet = 4096 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.RefreshAllPropertiesWhenChanged = 8192 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.UserHandledEvents = 32 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.UserPersisted = 16 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper
Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.New(defaultDescriptor As System.ComponentModel.PropertyDescriptor) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.HiddenIfMissingPropertyControlData
Microsoft.VisualStudio.Editors.PropertyPages.HiddenIfMissingPropertyControlData.New(id As Integer, name As String, formControl As System.Windows.Forms.Control) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.Apply() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.EditProperty(dispid As Integer) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.GetHelpContextF1Keyword() -> String
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.Help(HelpDir As String) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.IsPageDirty() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.SetObjects(objects As Object()) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.SetPageSite(base As Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal.GetLocaleID() -> Integer
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal.GetService(ServiceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal.OnStatusChange(flags As Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal.TranslateAccelerator(msg As System.Windows.Forms.Message) -> Integer
Microsoft.VisualStudio.Editors.PropertyPages.ProjectReloadedException
Microsoft.VisualStudio.Editors.PropertyPages.ProjectReloadedException.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ProjectReloadedException.New(Info As System.Runtime.Serialization.SerializationInfo, Context As System.Runtime.Serialization.StreamingContext) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.AllInitialValues() -> Object()
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.AllInitialValuesExpanded() -> Object()
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.AssociatedControls -> System.Windows.Forms.Control()
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.CommonPropertiesObject() -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.DispId() -> Integer
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.DisplayPropertyName -> String
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.EnableAssociatedControl(control As System.Windows.Forms.Control, Enabled As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.EnableControls(Enabled As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.Flags -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.FormControl() -> System.Windows.Forms.Control
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetCallback -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetControlValueMultipleValues() -> Object()
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetControlValueNative() -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetFlags() -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.InitialValue() -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsCommonProperty() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsCommonProperty(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsConfigurationSpecificProperty() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsDirty() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsDirty(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsHidden() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsHidden(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsIndeterminate() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsMissing() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsReadOnly() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsSpecialValue() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsUserHandledEvents() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsUserHandledEvents(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsUserPersisted() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsUserPersisted(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.m_FormControl -> System.Windows.Forms.Control
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.m_Initializing -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.m_isCommitingChange -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.m_PropPage -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetCallback -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetCallback -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, AssocControls As System.Windows.Forms.Control()) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags, AssocControls As System.Windows.Forms.Control()) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, setter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate, getter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags, AssocControls As System.Windows.Forms.Control()) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, setter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate, getter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags, AssocControls As System.Windows.Forms.Control()) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, setter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate, getter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, setter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate, getter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate, multiValueSetter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate, multiValueGetter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags, AssociatedControls As System.Windows.Forms.Control()) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, setter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate, getter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ObjectsPropertyDescriptorsArray() -> System.ComponentModel.PropertyDescriptorCollection()
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.PropDesc -> System.ComponentModel.PropertyDescriptor
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.PropertyName() -> String
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.PropPage() -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetCallback -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetControlValue(value As Object) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDirty(ReadyToApply As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetInitialValues(AllInitialValues As Object()) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetInitialValues(InitialValue As Object, AllInitialValues As Object()) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetInitialValues(InitialValue As Object) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyListener
Microsoft.VisualStudio.Editors.PropertyPages.PropertyListener.OnChanged(dispid As Integer, wszConfigName As String) -> Integer
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(Info As System.Runtime.Serialization.SerializationInfo, Context As System.Runtime.Serialization.StreamingContext) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(message As String, helpLink As String, innerException As System.Exception) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(message As String, helpLink As String) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(message As String, innerException As System.Exception, ShowHeaderAndFooterInErrorControl As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(message As String, innerException As System.Exception) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(message As String) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.ShowHeaderAndFooterInErrorControl() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.ShowHeaderAndFooterInErrorControl(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.FinishPendingValidations() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.GetLocaleID() -> Integer
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.GetService(ServiceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.OnStatusChange(flags As Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.OnWindowActivated(activated As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.TranslateAccelerator(msg As System.Windows.Forms.Message) -> Integer
Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog
Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.New(ServiceProvider As System.IServiceProvider, F1Keyword As String) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.PropPage() -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase
Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.PropPage(Value As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.SetFocusToPage() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS
Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS.Clean = 4 -> Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS
Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS.Dirty = 1 -> Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS
Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS.Validate = 2 -> Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.AddChangeHandlers() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ApplyChanges(sender As Object) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CanApplyNow() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CanApplyNow(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CheckoutProjectFile(ByRef ProjectReloaded As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ClearIsDirty() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CommonPropertiesObject() -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DelayValidate(dataControl As System.Windows.Forms.Control) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DISPID_UNKNOWN -> Integer
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DTE() -> EnvDTE.DTE
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DTEProject() -> EnvDTE.Project
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.EnableControl(control As System.Windows.Forms.Control, enabled As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.Enabled() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.Enabled(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.EnterProjectCheckoutSection() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ExtendedPropertiesObjects(Data As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData) -> Object()
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCommonPropertyDescriptor(PropertyName As String) -> System.ComponentModel.PropertyDescriptor
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCommonPropertyValue(prop As System.ComponentModel.PropertyDescriptor) -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCommonPropertyValue(PropertyName As String) -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCommonPropertyValueNative(prop As System.ComponentModel.PropertyDescriptor) -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCommonPropertyValueNative(PropertyName As String) -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetControlValue(name As String) -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetControlValueNative(name As String) -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCurrentProperty(dispid As Integer, PropertyName As String, ByRef obj As Object) -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetDialogFont() -> System.Drawing.Font
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetDirectoryViaBrowse(InitialDirectory As String, DialogTitle As String, ByRef NewValue As String) -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetDirectoryViaBrowseRelative(RelativeInitialDirectory As String, BasePath As String, DialogTitle As String, ByRef NewRelativePath As String) -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetDirectoryViaBrowseRelativeToProject(InitialDirectory As String, DialogTitle As String, ByRef NewValue As String) -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetDirty(sender As Object) -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetFileViaBrowse(InitialDirectory As String, ByRef NewValue As String, Filter As String) -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetProjectPath() -> String
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetProjectRelativeDirectoryPath(DirectoryPath As String) -> String
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetProjectRelativeFilePath(FilePath As String) -> String
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPropertyDescriptor(PropertyName As String) -> System.ComponentModel.PropertyDescriptor
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetRelativeDirectoryPath(BasePath As String, DirectoryPath As String) -> String
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetRelativeFilePath(BasePath As String, FilePath As String) -> String
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetServiceFromPropertyPageSite(ServiceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.InitializeAllProperties() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsActivated() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsAnyPropertyDirty() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsConfigurationSpecificPage() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsCSProject() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsDirty() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsDirty(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsInProjectCheckoutSection() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsUndoEnabled() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsVBProject() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.LeaveProjectCheckoutSection() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_CommonPropertyDescriptors -> System.ComponentModel.PropertyDescriptorCollection
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_ControlData -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData()
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_ExtendedObjects -> Object()
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_fInsideInit -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_IsDirty -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_Objects -> Object()
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_ObjectsPropertyDescriptorsArray -> System.ComponentModel.PropertyDescriptorCollection()
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_ScalingCompleted -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ManualPageScaling() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ManualPageScaling(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.MultiProjectSelect() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.New(serviceProvider As Microsoft.VisualStudio.Shell.ServiceProvider) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnExternalPropertyChanged(DISPID As Integer, DebugSourceName As String) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnExternalPropertyRequestEdit(DISPID As Integer, DebugSourceName As String) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PageRequiresScaling() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PageRequiresScaling(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProcessDelayValidationQueue(canThrow As Boolean) -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProjectHierarchy() -> Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProjectKind() -> String
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProjectLanguage() -> String
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProjectProperties() -> VSLangProj.ProjectProperties
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProjectReloadedDuringCheckout() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource.Direct = 0 -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource.External = 2 -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource.Indirect = 1 -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyPageSite() -> Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.RawPropertiesObjects(Data As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData) -> Object()
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ResumePropertyChangeListening(DispId As Integer) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ServiceProvider() -> Microsoft.VisualStudio.Shell.ServiceProvider
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetCommonPropertyValue(prop As System.ComponentModel.PropertyDescriptor, Value As Object) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetCommonPropertyValue(PropertyName As String, value As Object) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetCommonPropertyValueNative(prop As System.ComponentModel.PropertyDescriptor, Value As Object) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetCommonPropertyValueNative(PropertyName As String, Value As Object) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDirty(dispid As Integer, ReadyToApply As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDirty(dispid As Integer) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDirty(ReadyToApply As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDirty(sender As Object, ReadyToApply As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDirty(sender As Object) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowChildPage(Title As String, PageType As System.Type, F1Keyword As String) -> System.Windows.Forms.DialogResult
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowChildPage(Title As String, PageType As System.Type) -> System.Windows.Forms.DialogResult
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowErrorMessage(errorMessage As String, ex As System.Exception) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowErrorMessage(errorMessage As String, HelpLink As String) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowErrorMessage(errorMessage As String) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowErrorMessage(ex As System.Exception, HelpLink As String) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowErrorMessage(ex As System.Exception) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SkipValidating(dataControl As System.Windows.Forms.Control) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SuspendPropertyChangeListening(DispId As Integer) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.TryGetNonCommonPropertyValue(Descriptor As System.ComponentModel.PropertyDescriptor) -> Object
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ValidatePageChanges(allowDelayValidation As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.VsUIShell2Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell2
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.VsUIShell5Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell5
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.VsUIShellService() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell
Microsoft.VisualStudio.Editors.PropertyPages.SKUMatrix
Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult
Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult.Failed = 2 -> Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult
Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult.Succeeded = 0 -> Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult
Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult.Warning = 1 -> Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult
Microsoft.VisualStudio.Editors.PropertyPages.VBPropPageBase
Microsoft.VisualStudio.Editors.PropertyPages.VBPropPageBase.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.AcademicProfessional = 2100 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.AcademicStudent = 2100 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.DownloadTrial = 2500 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.Enterprise = 3000 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.Express = 500 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.None = 0 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.Professional = 2000 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.Standard = 1000 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.VSTO = 1500 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.Architect = 8 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.CSharp = 4 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.IDE = 16 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.None = 0 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.VB = 2 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.VC = 1 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.Web = 64 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ChangeSelection(ConfigIndex As Integer, PlatformIndex As Integer, FireNotifications As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ChangeSelection(ConfigName As String, ConfigSelectionType As Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes, PlatformName As String, PlatformSelectionType As Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes, PreferExactMatch As Boolean, FireNotifications As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.CheckForModeChanges() -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ClearConfigPageUndoRedoStacks() -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ClearConfigPageUndoRedoStacksEventHandler
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ConfigurationDropdownEntries() -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem()
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ConfigurationListAndSelectionChanged() -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ConfigurationListAndSelectionChangedEventHandler
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.Dispose() -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem.DisplayName() -> String
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem.Name -> String
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem.New(Name As String, SelectionType As Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem.SelectionType -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.GetAllConfigs() -> Microsoft.VisualStudio.Shell.Interop.IVsCfg()
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.IsSimplifiedConfigMode() -> Boolean
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.New(Project As EnvDTE.Project, ProjectHierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, View As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnActiveProjectCfgChange(pIVsHierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnCfgNameAdded(pszCfgName As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnCfgNameDeleted(CfgName As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnCfgNameRenamed(OldName As String, NewName As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnPlatformNameAdded(pszPlatformName As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnPlatformNameDeleted(pszPlatformName As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.PlatformDropdownEntries() -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem()
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.Project() -> EnvDTE.Project
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedConfigIndex() -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedConfigurationChanged() -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedConfigurationChangedEventHandler
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedPlatformIndex() -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes.Active = 1 -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes.All = 2 -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes.Normal = 0 -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SimplifiedConfigModeChanged() -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SimplifiedConfigModeChangedEventHandler
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.UpdateSolution_Begin(ByRef pfCancelUpdate As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.UpdateSolution_Cancel() -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.UpdateSolution_Done(fSucceeded As Integer, fModified As Integer, fCancelCommand As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.UpdateSolution_StartUpdate(ByRef pfCancelUpdate As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.VsCfgProvider() -> Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2
Microsoft.VisualStudio.Editors.PropPageDesigner.DeferrableWindowPaneProviderService
Microsoft.VisualStudio.Editors.PropPageDesigner.DeferrableWindowPaneProviderService.New(provider As System.IServiceProvider) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.ConfigNames -> String()
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.DebugTrace(Message As String) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.GetObjects(VsCfgProvider As Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2) -> Object()
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.New(VsCfgProvider As Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2, Objects As Object(), Values As Object(), SelectedConfigName As String, SelectedPlatformName As String) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.PlatformNames -> String()
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.SelectedConfigName -> String
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.SelectedPlatformName -> String
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.Values -> Object()
Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor
Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.New(PropDesc As System.ComponentModel.PropertyDescriptor, PropertyName As String) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService
Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.New(Provider As System.IServiceProvider) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.Close() -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.Close2() -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.FileChangedDelegate
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.GetData(ByRef riidKey As System.Guid, ByRef pvtData As Object) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.GetGuidEditorType(ByRef pClassID As System.Guid) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.GetGuidEditorType2(ByRef pClassID As System.Guid) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.GetSite(ByRef riid As System.Guid, ByRef ppvSite As System.IntPtr) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.GetTextBuffer(ByRef ppTextBuffer As Microsoft.VisualStudio.TextManager.Interop.IVsTextLines) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.IsDocDataDirty(ByRef pfDirty As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.IsDocDataDirty2(ByRef pfDirty As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.IsDocDataReadOnly(ByRef pfReadOnly As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.IsDocDataReloadable(ByRef pfReloadable As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.IsDocDataReloadable2(ByRef pfReloadable As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadCompletedDelegate
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadDocData(pszMkDocument As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadDocData2(pszMkDocument As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LockTextBuffer(fLock As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.New(BaseProvider As System.IServiceProvider) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.OnFileChanged -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.FileChangedDelegate
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.OnLoadCompleted -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadCompletedDelegate
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.OnRegisterDocData(docCookie As UInteger, pHierNew As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidNew As UInteger) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.OnRegisterDocData2(docCookie As UInteger, pHierNew As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidNew As UInteger) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.ReloadDocData(grfFlags As UInteger) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.ReloadDocData2(grfFlags As UInteger) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.RenameDocData(grfAttribs As UInteger, pHierNew As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidNew As UInteger, pszMkDocumentNew As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.RenameDocData2(grfAttribs As UInteger, pHierNew As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidNew As UInteger, pszMkDocumentNew As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SaveDocData(dwSave As Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS, ByRef pbstrMkDocumentNew As String, ByRef pfSaveCanceled As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SaveDocData2(dwSave As Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS, ByRef pbstrMkDocumentNew As String, ByRef pfSaveCanceled As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetData(ByRef riidKey As System.Guid, vtData As Object) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetDocDataDirty(fDirty As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetDocDataReadOnly(fReadOnly As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetSite(pUnkSite As Object) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetTextBuffer(pTextBuffer As Microsoft.VisualStudio.TextManager.Interop.IVsTextLines) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetUntitledDocPath(pszDocDataPath As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetUntitledDocPath2(pszDocDataPath As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.Close() -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.MapLogicalView(ByRef rguidLogicalView As System.Guid, ByRef pbstrPhysicalView As String) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.New() -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.SetSite(Site As Microsoft.VisualStudio.OLE.Interop.IServiceProvider) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerLoader
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerLoader.New() -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.Hierarchy() -> Microsoft.VisualStudio.Shell.Interop.IVsHierarchy
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.Hierarchy(Value As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.ItemId() -> UInteger
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.ItemId(Value As UInteger) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.Name() -> String
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.New() -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.RootDesigner() -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner.Component() -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner.GetService(ServiceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner.GetView() -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner.New() -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ActivatePage(PropPage As Microsoft.VisualStudio.OLE.Interop.IPropertyPage) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.DesignerHost() -> System.ComponentModel.Design.IDesignerHost
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.DsMsgBox(Message As String, Buttons As System.Windows.Forms.MessageBoxButtons, Icon As System.Windows.Forms.MessageBoxIcon, DefaultButton As System.Windows.Forms.MessageBoxDefaultButton = System.Windows.Forms.MessageBoxDefaultButton.Button1, HelpLink As String = Nothing) -> System.Windows.Forms.DialogResult
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.DTEProject() -> EnvDTE.Project
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.FocusFirstOrLastPropertyPageControl(First As Boolean) -> Boolean
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.GetProperty(PropertyName As String) -> Object
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.GetPropertyPageTopHwnd() -> System.IntPtr
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.GetService(ServiceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.GetTransaction(Description As String) -> System.ComponentModel.Design.DesignerTransaction
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.Init(DTEProject As EnvDTE.Project, PropPage As Microsoft.VisualStudio.OLE.Interop.IPropertyPage, PropPageSite As Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite, Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, IsConfigPage As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IsConfigPage() -> Boolean
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IsConfigPage(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IsNativeHostedPropertyPageActivated() -> Boolean
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IVsProjectDesignerPageSite_OnPropertyChanged(PropertyName As String, PropertyDescriptor As System.ComponentModel.PropertyDescriptor, OldValue As Object, NewValue As Object) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IVsProjectDesignerPageSite_OnPropertyChanging(PropertyName As String, PropertyDescriptor As System.ComponentModel.PropertyDescriptor) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IVsWindowPaneCommit_CommitPendingEdit(ByRef pfCommitFailed As Integer) -> Integer
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.New() -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.New(RootDesigner As Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.OnActivated(activated As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PropPage() -> Microsoft.VisualStudio.OLE.Interop.IPropertyPage
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel.New() -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel.StopAutoScrollToControl(needStop As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.SetProperty(PropertyName As String, Value As Object) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.SetUndoRedoCleanState() -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ShouldShowDirtyIndicator() -> Boolean
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ShowErrorMessage(Message As String, HelpLink As String = Nothing) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.UnLoadPage() -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerWindowPane
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerWindowPane.New(surface As System.ComponentModel.Design.DesignSurface) -> Void
Microsoft.VisualStudio.Editors.VBPackageUtils
Microsoft.VisualStudio.Editors.VBPackageUtils.getServiceDelegate
Microsoft.VisualStudio.Editors.VBPackageUtils.New() -> Void
MustOverride Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomDocumentMonikerProvider.GetDocumentMoniker() -> String
MustOverride Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.CloseView() -> Void
MustOverride Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.CreateView() -> Void
MustOverride Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.CreateControl() -> System.Windows.Forms.Control
Overloads Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.ReportError(errorMessage As String, helpLink As String) -> Void
Overloads Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.ReportError(ErrorMessage As String) -> Void
Overloads Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.ShowMessage(Message As String, Caption As String, Buttons As System.Windows.Forms.MessageBoxButtons, Icon As System.Windows.Forms.MessageBoxIcon, DefaultButton As System.Windows.Forms.MessageBoxDefaultButton) -> System.Windows.Forms.DialogResult
Overloads Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.ShowMessage(Message As String, Caption As String, Buttons As System.Windows.Forms.MessageBoxButtons, Icon As System.Windows.Forms.MessageBoxIcon) -> System.Windows.Forms.DialogResult
Overloads Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.Dispose() -> Void
Overloads Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.Dispose(disposing As Boolean) -> Void
Overloads Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.Dispose() -> Void
Overloads Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.Dispose(disposing As Boolean) -> Void
Overloads Microsoft.VisualStudio.Editors.PropertyPages.PropertyListener.Dispose() -> Void
Overloads Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.AddFileToProject(FileName As String, CopyFile As Boolean) -> EnvDTE.ProjectItem
Overloads Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.AddFileToProject(FileName As String) -> EnvDTE.ProjectItem
Overloads Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.AddFileToProject(ProjectItems As EnvDTE.ProjectItems, FileName As String, CopyFile As Boolean, BuildAction As VSLangProj.prjBuildAction) -> EnvDTE.ProjectItem
Overloads Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.AddFileToProject(ProjectItems As EnvDTE.ProjectItems, FileName As String, CopyFile As Boolean) -> EnvDTE.ProjectItem
Overloads Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.Dispose() -> Void
Overridable Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.F1Keyword() -> String
Overridable Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.F1Keyword(Value As String) -> Void
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CloseFrameInternal(WindowFrame As Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame, flags As Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE) -> Void
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.ShowWindowFrame() -> Void
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.Dispose(Disposing As Boolean) -> Void
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnItemClick(item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton, reactivatePage As Boolean) -> Void
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnItemClick(item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnItemGotFocus(e As System.EventArgs, item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnThemeChanged() -> Void
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.TryLoadPropertyPage() -> Void
Overridable Microsoft.VisualStudio.Editors.MyApplication.MyApplicationPropertiesBase.FilesToCheckOut(CreateIfNotExist As Boolean) -> String()
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.AddChangeHandlers() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ApplyChanges() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ComboBox_SelectionChangeCommitted(sender As Object, e As System.EventArgs) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ExtendedPropertiesObjects() -> Object()
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.FilesToCheckOut() -> String()
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetAllPropertyValuesNative(Extenders As Object(), ByRef Values As Object(), ByRef ValueOrIndeterminate As Object) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetControlValue() -> Object
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetPropertyValueNative(Extender As Object) -> Object
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetUserDefinedPropertyDescriptor() -> System.ComponentModel.PropertyDescriptor
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.Initialize(PropertyPage As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.InitPropertyUI() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.InitPropertyValue() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.OnPropertyChanged(OldValue As Object, NewValue As Object) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.OnPropertyChanging() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.RawPropertiesObjects() -> Object()
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ReadUserDefinedProperty(PropertyName As String, ByRef Value As Object) -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.RefreshValue() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.RestoreInitialValue() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetNonCommonPropertyValueCore(Value As Object) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetNonCommonPropertyValueMultipleValuesCore(Objects As Object(), Values As Object()) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetPropertyValue(Value As Object) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetPropertyValueNative(Value As Object) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetPropertyValueNativeMultipleValues(Objects As Object(), Values As Object()) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SupportsMultipleValueUndo() -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.TryGetPropertyValueNative(Extenders As Object()) -> Object
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.WriteUserDefinedProperty(PropertyName As String, Value As Object) -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.Apply() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.ControlTypeForResources() -> System.Type
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.Deactivate() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.DefaultSize() -> System.Drawing.Size
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.DefaultSize(Value As System.Drawing.Size) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.DocString() -> String
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.DocString(Value As String) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.GetProperty(PropertyName As String) -> Object
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.GetPropertyMultipleValues(PropertyName As String, ByRef Objects As Object(), ByRef Values As Object()) -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.Help(strHelpDir As String) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.HelpContext() -> UInteger
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.HelpContext(Value As UInteger) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.HelpFile() -> String
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.HelpFile(Value As String) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.IsPageDirty() -> Integer
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.Objects() -> Object()
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SetObjects(cObjects As UInteger, objects As Object()) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SetProperty(PropertyName As String, Value As Object) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SetPropertyMultipleValues(PropertyName As String, Objects As Object(), Values As Object()) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SetSite(site As Microsoft.VisualStudio.ManagedInterfaces.ProjectDesigner.IVsProjectDesignerPageSite) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SupportsMultipleValueUndo(PropertyName As String) -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SupportsTheming() -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.TranslateAccelerator(pMsg As Microsoft.VisualStudio.OLE.Interop.MSG()) -> Integer
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.Apply() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ApplyPageChanges() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CleanupCOMReferences() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CommitTransaction(Transaction As System.ComponentModel.Design.DesignerTransaction) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ControlData() -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData()
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DisableOnBuild() -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DisableOnDebug() -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DisableWhenDebugMode(mode As Microsoft.VisualStudio.Shell.Interop.DBGMODE) -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.EditProperty(dispid As Integer) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.EnableAllControls(enabled As Boolean) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetF1HelpKeyword() -> String
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetProperty(dispid As Integer, ByRef obj As Object) -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPropertyControl(PropertyId As Integer) -> System.Windows.Forms.Control
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPropertyControlData(PropertyId As Integer) -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPropertyControlData(PropertyName As String) -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetTransaction() -> System.ComponentModel.Design.DesignerTransaction
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetTransactionDescription() -> String
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetUserDefinedPropertyDescriptor(PropertyName As String) -> System.ComponentModel.PropertyDescriptor
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.Help(HelpTopic As String) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.InitPage() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsPageDirty() -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IVsProjectDesignerPage_GetPropertyMultipleValues(PropertyName As String, ByRef Objects As Object(), ByRef Values As Object()) -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IVsProjectDesignerPage_GetPropertyValue(PropertyName As String) -> Object
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IVsProjectDesignerPage_SetPropertyValue(PropertyName As String, Value As Object) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IVsProjectDesignerPage_SetPropertyValueMultipleValues(PropertyName As String, Objects As Object(), Values As Object()) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IVsProjectDesignerPage_SupportsMultipleValueUndo(PropertyName As String) -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnApplyComplete(ApplySuccessful As Boolean) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnExternalPropertyChanged(Data As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData, Source As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnExternalPropertyChanged(DISPID As Integer, Source As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnPageActivated(activated As Boolean) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnPropertyChanged(PropertyName As String, PropDesc As System.ComponentModel.PropertyDescriptor, OldValue As Object, NewValue As Object) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnPropertyChanging(PropertyName As String, PropDesc As System.ComponentModel.PropertyDescriptor) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnSetSite(site As Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnThemeChanged() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PageResizable() -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PostApplyPageChanges() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PostInitPage() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PreApplyPageChanges() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PreInitPage() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ReadUserDefinedProperty(PropertyName As String, ByRef Value As Object) -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.RefreshPropertyStandardValues() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.RefreshPropertyValues() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.RestoreInitialValues() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ScaleWindowToCurrentFont() -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDialogFont(ScaleDialog As Boolean) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetObjects(objects As Object()) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SupportsTheming() -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ValidateProperty(controlData As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData, ByRef message As String, ByRef returnControl As System.Windows.Forms.Control) -> Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ValidationControlGroups() -> System.Windows.Forms.Control()()
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.WriteUserDefinedProperty(PropertyName As String, Value As Object) -> Boolean
Microsoft.VisualStudio.Editors.IVBPackage.GetService(serviceType As System.Type) -> Object
Microsoft.VisualStudio.Editors.IVBPackage.MenuCommandService() -> System.ComponentModel.Design.IMenuCommandService
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal.IsImmediateApply() -> Boolean
MustOverride Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.View() -> System.Windows.Forms.Control
MustOverride Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.ControlType() -> System.Type
MustOverride Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.Title() -> String
Overridable Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl.ErrorText() -> System.Windows.Forms.TextBox
Overridable Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl.ErrorText(WithEventsValue As System.Windows.Forms.TextBox) -> Void
Overridable Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl.IconGlyph() -> System.Windows.Forms.PictureBox
Overridable Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl.IconGlyph(WithEventsValue As System.Windows.Forms.PictureBox) -> Void
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OverflowButton() -> System.Windows.Forms.Button
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OverflowButton(WithEventsValue As System.Windows.Forms.Button) -> Void
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView.LinkLabel() -> VSThemedLinkLabel
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView.LinkLabel(WithEventsValue As VSThemedLinkLabel) -> Void
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigDividerLine() -> System.Windows.Forms.Label
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigDividerLine(WithEventsValue As System.Windows.Forms.Label) -> Void
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationComboBox() -> System.Windows.Forms.ComboBox
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationComboBox(WithEventsValue As System.Windows.Forms.ComboBox) -> Void
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationFlowLayoutPanel() -> System.Windows.Forms.FlowLayoutPanel
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationFlowLayoutPanel(WithEventsValue As System.Windows.Forms.FlowLayoutPanel) -> Void
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationLabel() -> System.Windows.Forms.Label
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationLabel(WithEventsValue As System.Windows.Forms.Label) -> Void
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationPanel() -> System.Windows.Forms.TableLayoutPanel
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationTableLayoutPanel() -> System.Windows.Forms.TableLayoutPanel
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationTableLayoutPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PLatformTableLayoutPanel() -> System.Windows.Forms.TableLayoutPanel
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PLatformTableLayoutPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PlatformComboBox() -> System.Windows.Forms.ComboBox
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PlatformComboBox(WithEventsValue As System.Windows.Forms.ComboBox) -> Void
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PlatformLabel() -> System.Windows.Forms.Label
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PlatformLabel(WithEventsValue As System.Windows.Forms.Label) -> Void
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PropPageDesignerViewLayoutPanel() -> System.Windows.Forms.TableLayoutPanel
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PropPageDesignerViewLayoutPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PropertyPagePanel() -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PropertyPagePanel(WithEventsValue As Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.Cancel() -> System.Windows.Forms.Button
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.Cancel(WithEventsValue As System.Windows.Forms.Button) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.OK() -> System.Windows.Forms.Button
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.OK(WithEventsValue As System.Windows.Forms.Button) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.okCancelTableLayoutPanel() -> System.Windows.Forms.TableLayoutPanel
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.okCancelTableLayoutPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.overArchingTableLayoutPanel() -> System.Windows.Forms.TableLayoutPanel
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.overArchingTableLayoutPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseDialog.GetService(ServiceType As System.Type) -> Object
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseRootDesigner.Dispose(Disposing As Boolean) -> Void
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase.CreateWindowPane(surface As System.ComponentModel.Design.DesignSurface) -> Microsoft.VisualStudio.Shell.Design.DesignerWindowPane
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase.DesignerWindowPaneBase.Dispose(disposing As Boolean) -> Void
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase.DesignerWindowPaneBase.GetToolboxItemSupported(toolboxItem As Microsoft.VisualStudio.OLE.Interop.IDataObject) -> Boolean
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase.DesignerWindowPaneBase.OnClose() -> Void
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase.DesignerWindowPaneBase.OnCreate() -> Void
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DeferrableWindowPaneProviderServiceBase.DesignerWindowPaneBase.Window() -> System.Windows.Forms.IWin32Window
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMenuCommand.Invoke() -> Void
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMenuCommand.Invoke(inArg As Object, outArg As System.IntPtr) -> Void
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMenuCommand.Invoke(inArg As Object) -> Void
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMenuCommand.OleStatus() -> Integer
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl.GetPreferredSize(proposedSize As System.Drawing.Size) -> System.Drawing.Size
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl.Text() -> String
Overrides Microsoft.VisualStudio.Editors.AppDesDesignerFramework.ErrorControl.Text(Value As String) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerLoader.Dispose() -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.Dispose(disposing As Boolean) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.OnLayout(levent As System.Windows.Forms.LayoutEventArgs) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.Initialize(component As System.ComponentModel.IComponent) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnItemClick(item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton, reactivatePage As Boolean) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnItemClick(item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.EditorView() -> Object
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.Window() -> System.Windows.Forms.IWin32Window
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.DeferrableWindowPaneProviderService.CreateWindowPane(surface As System.ComponentModel.Design.DesignSurface) -> Microsoft.VisualStudio.Shell.Design.DesignerWindowPane
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.CloseView() -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.CreateView() -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.Dispose(Disposing As Boolean) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.View() -> System.Windows.Forms.Control
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.CreateAccessibilityInstance() -> System.Windows.Forms.AccessibleObject
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnClick(e As System.EventArgs) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnGotFocus(e As System.EventArgs) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnLostFocus(e As System.EventArgs) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnMouseEnter(e As System.EventArgs) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnMouseLeave(e As System.EventArgs) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnPaint(e As System.Windows.Forms.PaintEventArgs) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.ProcessDialogKey(keyData As System.Windows.Forms.Keys) -> Boolean
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.CreateAccessibilityInstance() -> System.Windows.Forms.AccessibleObject
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.Dispose(disposing As Boolean) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnLayout(levent As System.Windows.Forms.LayoutEventArgs) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnPaint(e As System.Windows.Forms.PaintEventArgs) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnPaintBackground(e As System.Windows.Forms.PaintEventArgs) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomDocumentMonikerProvider.GetDocumentMoniker() -> String
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView.Dispose(disposing As Boolean) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.CloseView() -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.CreateView() -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.Dispose(Disposing As Boolean) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.View() -> System.Windows.Forms.Control
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.Attributes() -> System.ComponentModel.AttributeCollection
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.CanResetValue(component As Object) -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.Category() -> String
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.ComponentType() -> System.Type
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.Converter() -> System.ComponentModel.TypeConverter
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.Description() -> String
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.DesignTimeOnly() -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.DisplayName() -> String
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.GetChildProperties(instance As Object, filter As System.Attribute()) -> System.ComponentModel.PropertyDescriptorCollection
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.GetEditor(editorBaseType As System.Type) -> Object
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.GetValue(component As Object) -> Object
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.IsBrowsable() -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.IsLocalizable() -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.IsReadOnly() -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.PropertyType() -> System.Type
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.ResetValue(component As Object) -> Void
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.SetValue(component As Object, value As Object) -> Void
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.ShouldSerializeValue(component As Object) -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.SupportsChangeEvents() -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropertyPages.HiddenIfMissingPropertyControlData.InitPropertyValue() -> Void
Overrides Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.Dispose(disposing As Boolean) -> Void
Overrides Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPreferredSize(startSize As System.Drawing.Size) -> System.Drawing.Size
Overrides Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnLayout(levent As System.Windows.Forms.LayoutEventArgs) -> Void
Overrides Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProcessDialogKey(keyData As System.Windows.Forms.Keys) -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.WndProc(ByRef m As System.Windows.Forms.Message) -> Void
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.DeferrableWindowPaneProviderService.CreateWindowPane(surface As System.ComponentModel.Design.DesignSurface) -> Microsoft.VisualStudio.Shell.Design.DesignerWindowPane
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.CanResetValue(Component As Object) -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.ComponentType() -> System.Type
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.Converter() -> System.ComponentModel.TypeConverter
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.DisplayName() -> String
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.GetChildProperties(instance As Object, filter As System.Attribute()) -> System.ComponentModel.PropertyDescriptorCollection
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.GetEditor(editorBaseType As System.Type) -> Object
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.GetValue(Component As Object) -> Object
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.IsReadOnly() -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.Name() -> String
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.PropertyType() -> System.Type
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.ResetValue(Component As Object) -> Void
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.SetValue(Component As Object, Value As Object) -> Void
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.ShouldSerializeValue(Component As Object) -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.CreateStore() -> System.ComponentModel.Design.Serialization.SerializationStore
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.Deserialize(Store As System.ComponentModel.Design.Serialization.SerializationStore, Container As System.ComponentModel.IContainer) -> System.Collections.ICollection
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.Deserialize(Store As System.ComponentModel.Design.Serialization.SerializationStore) -> System.Collections.ICollection
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.DeserializeTo(Store As System.ComponentModel.Design.Serialization.SerializationStore, Container As System.ComponentModel.IContainer, ValidateRecycledTypes As Boolean, applyDefaults As Boolean) -> Void
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.LoadStore(Stream As System.IO.Stream) -> System.ComponentModel.Design.Serialization.SerializationStore
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.Serialize(Store As System.ComponentModel.Design.Serialization.SerializationStore, Value As Object) -> Void
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.SerializeAbsolute(store As System.ComponentModel.Design.Serialization.SerializationStore, value As Object) -> Void
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.SerializeMember(Store As System.ComponentModel.Design.Serialization.SerializationStore, OwningObject As Object, Member As System.ComponentModel.MemberDescriptor) -> Void
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.SerializeMemberAbsolute(Store As System.ComponentModel.Design.Serialization.SerializationStore, OwningObject As Object, Member As System.ComponentModel.MemberDescriptor) -> Void
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerLoader.Dispose() -> Void
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PreProcessMessage(ByRef msg As System.Windows.Forms.Message) -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel.ScrollToControl(activeControl As System.Windows.Forms.Control) -> System.Drawing.Point
Shared Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMessageBox.Show(RootDesigner As Microsoft.VisualStudio.Editors.AppDesDesignerFramework.BaseRootDesigner, Message As String, Caption As String, Buttons As System.Windows.Forms.MessageBoxButtons, Icon As System.Windows.Forms.MessageBoxIcon, DefaultButton As System.Windows.Forms.MessageBoxDefaultButton = System.Windows.Forms.MessageBoxDefaultButton.Button1, HelpLink As String = Nothing) -> System.Windows.Forms.DialogResult
Shared Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMessageBox.Show(ServiceProvider As System.IServiceProvider, ex As System.Exception, Caption As String, HelpLink As String = Nothing) -> Void
Shared Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMessageBox.Show(ServiceProvider As System.IServiceProvider, Message As String, Caption As String, Buttons As System.Windows.Forms.MessageBoxButtons, Icon As System.Windows.Forms.MessageBoxIcon, DefaultButton As System.Windows.Forms.MessageBoxDefaultButton = System.Windows.Forms.MessageBoxDefaultButton.Button1, HelpLink As String = Nothing) -> System.Windows.Forms.DialogResult
Shared Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMessageBox.Show(ServiceProvider As System.IServiceProvider, Message As String, ex As System.Exception, Caption As String, HelpLink As String = Nothing) -> Void
Shared Microsoft.VisualStudio.Editors.AppDesDesignerFramework.DesignerMessageBox.ShowInternal(UIService As System.Windows.Forms.Design.IUIService, VsUIShell As Microsoft.VisualStudio.Shell.Interop.IVsUIShell, Message As String, Caption As String, Buttons As System.Windows.Forms.MessageBoxButtons, Icon As System.Windows.Forms.MessageBoxIcon, DefaultButton As System.Windows.Forms.MessageBoxDefaultButton, HelpLink As String) -> System.Windows.Forms.DialogResult
Shared Microsoft.VisualStudio.Editors.AppDesDesignerFramework.SourceCodeControlManager.QueryEditableFiles(sp As System.IServiceProvider, files As System.Collections.Generic.List(Of String), throwOnFailure As Boolean, checkOnly As Boolean, ByRef fileReloaded As Boolean, allowInMemoryEdits As Boolean = True, allowFileReload As Boolean = True) -> Boolean
Shared Microsoft.VisualStudio.Editors.AppDesDesignerFramework.SourceCodeControlManager.QueryEditableFiles(sp As System.IServiceProvider, files As System.Collections.Generic.List(Of String), throwOnFailure As Boolean, checkOnly As Boolean) -> Boolean
Shared Microsoft.VisualStudio.Editors.AppDesDesignerFramework.SourceCodeControlManager.QuerySave(sp As System.IServiceProvider, files As System.Collections.Generic.List(Of String), throwOnFailure As Boolean) -> Boolean
Shared Microsoft.VisualStudio.Editors.AppDesInterop.CAUUIDMarshaler.GetData(cauuid As Microsoft.VisualStudio.OLE.Interop.CAUUID) -> System.Guid()
Shared Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.CommandUIGuid() -> System.Guid
Shared Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.EditorGuid() -> System.Guid
Shared Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.IsAnyCpsComponent(components As Object()) -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.CpsPropertyDescriptorWrapper.IsCpsComponent(component As Object) -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetAllPropertyValuesNative(Descriptor As System.ComponentModel.PropertyDescriptor, Extenders As Object(), ByRef Values As Object(), ByRef ValueOrIndeterminate As Object) -> Void
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetCommonPropertyValue(Descriptor As System.ComponentModel.PropertyDescriptor, ProjectCommonPropertiesObject As Object) -> Object
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetCommonPropertyValueNative(Descriptor As System.ComponentModel.PropertyDescriptor, ProjectCommonPropertiesObject As Object) -> Object
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetNonCommonPropertyValueNative(Descriptor As System.ComponentModel.PropertyDescriptor, Extender As Object) -> Object
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetValueOrIndeterminateFromArray(Values As Object()) -> Object
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.HideOrDisableControls(Controls As System.Windows.Forms.Control(), Hide As Boolean) -> Void
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.Indeterminate() -> Object
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsSpecialValue(Value As Object) -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MissingProperty() -> Object
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ObjectsAreEqual(Object1 As Object, Object2 As Object) -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.PropertyDescriptorSetValue(Descriptor As System.ComponentModel.PropertyDescriptor, Component As Object, Value As Object) -> Void
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetCommonPropertyValueNative(Descriptor As System.ComponentModel.PropertyDescriptor, Value As Object, ProjectCommonPropertiesObject As Object) -> Void
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.TryGetNonCommonPropertyValueNative(Descriptor As System.ComponentModel.PropertyDescriptor, Extenders As Object()) -> Object
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyListener.TryCreate(PropPage As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase, EventSource As Object, DebugSourceName As String, ProjectHierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ListenToInactiveConfigs As Boolean) -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyListener
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPropertyFromRunningPages(SourcePage As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase, dispid As Integer, ByRef obj As Object) -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.SKUMatrix.IsHidden(PropertyId As Integer) -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsAcademic() -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsEnterprise() -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsExpress() -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsProfessional() -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsStandard() -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsVB() -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsVC() -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsVSTO() -> Boolean
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.ProductSKU() -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.ProductSubSKU() -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition
Shared Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.CommandUIGuid() -> System.Guid
Shared Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.EditorGuid() -> System.Guid
Shared Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner.CommitAnyPendingChanges() -> Void
Shared Microsoft.VisualStudio.Editors.VBPackageUtils.PackageInstance(GetService As Microsoft.VisualStudio.Editors.VBPackageUtils.getServiceDelegate) -> Microsoft.VisualStudio.Editors.IVBPackage
Shared ReadOnly Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropPageBackColor -> System.Drawing.Color
VSThemedLinkLabel
VSThemedLinkLabel.New() -> Void
VSThemedLinkLabel.SetThemedColor(vsUIShell5 As Microsoft.VisualStudio.Shell.Interop.IVsUIShell5, supportsTheming As Boolean) -> Void
VSThemedLinkLabel.SetThemedColor(vsUIShell5 As Microsoft.VisualStudio.Shell.Interop.IVsUIShell5) -> VoidConst Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.PROPPAGESTATUS_CLEAN = 4 -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Const Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.PROPPAGESTATUS_DIRTY = 1 -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Const Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.PROPPAGESTATUS_VALIDATE = 2 -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Const Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.SW_HIDE = 0 -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Const Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.SW_SHOW = 5 -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Const Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.SW_SHOWNORMAL = 1 -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Const Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.NestingCharacter = ":" -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Const Microsoft.VisualStudio.Editors.SettingsDesigner.PublicSettingsSingleFileGenerator.SingleFileGeneratorName = "PublicSettingsSingleFileGenerator" -> String
Const Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator.SingleFileGeneratorName = "SettingsSingleFileGenerator" -> String
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.Close() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.MapLogicalView(ByRef rguidLogicalView As System.Guid, ByRef pbstrPhysicalView As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.SetSite(Site As Microsoft.VisualStudio.OLE.Interop.IServiceProvider) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerLoader (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerLoader.InitializeEx(ServiceProvider As Microsoft.VisualStudio.Shell.ServiceProvider, Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ItemId As UInteger, punkDocData As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerLoader.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.ActualGuid() -> System.Guid (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CloseFrame() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CommitPendingEdit() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CreateDesigner() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CustomMkDocumentProvider() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomDocumentMonikerProvider (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CustomMkDocumentProvider(Value As Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomDocumentMonikerProvider) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CustomViewProvider() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CustomViewProvider(Value As Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.DocCookie() -> UInteger (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.DocData() -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.DocData(Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.DocView() -> System.Windows.Forms.Control (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.DocView(Value As System.Windows.Forms.Control) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditFlags() -> UInteger (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditFlags(Value As UInteger) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditorCaption() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditorCaption(Value As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditorGuid() -> System.Guid (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.EditorGuid(Value As System.Guid) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.Hierarchy() -> Microsoft.VisualStudio.Shell.Interop.IVsHierarchy (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.IsDirty() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.IsPropertyPage() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.ItemId() -> UInteger (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.MkDocument() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.MkDocument(Value As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.New(View As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView, Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ItemId As UInteger) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.New(View As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView, Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ItemId As UInteger, PropertyPageInfo As Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.OnWindowActivated(activated As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.PhysicalView() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.PhysicalView(Value As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.PropertyPageInfo() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.ShowDesigner(Show As Boolean = True) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.TabAutomationName() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.TabAutomationName(Value As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.TabTitle() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.TabTitle(Value As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.UpdateWindowFrameBounds() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.VsUIShell5() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell5 (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.VsWindowFrame() -> Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.VsWindowFrame(Value As Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.m_Debug_cWindowFrameBoundsUpdated -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.m_Debug_cWindowFrameShow -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.Hierarchy() -> Microsoft.VisualStudio.Shell.Interop.IVsHierarchy (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.Hierarchy(Value As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.ItemId() -> UInteger (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.ItemId(Value As UInteger) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent.RootDesigner() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.CommitAnyPendingChanges() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.Component() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootComponent (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.GetService(ServiceType As System.Type) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.GetView() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.ActiveView() -> System.Guid (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.ActiveView(Value As System.Guid) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.CommitAnyPendingChanges() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.DTEProject() -> EnvDTE.Project (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.DelayRefreshDirtyIndicators() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.DsMsgBox(Message As String, Buttons As System.Windows.Forms.MessageBoxButtons, Icon As System.Windows.Forms.MessageBoxIcon, DefaultButton As System.Windows.Forms.MessageBoxDefaultButton = System.Windows.Forms.MessageBoxDefaultButton.Button1, HelpLink As String = Nothing) -> System.Windows.Forms.DialogResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.DsMsgBox(ex As System.Exception, HelpLink As String = Nothing) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.GetPropertyPages() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.GetSaveTreeItems(flags As Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS) -> Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.GetService(ServiceType As System.Type) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.InitView() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.InitializationComplete() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.New(serviceProvider As System.IServiceProvider) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.NotifyShuttingDown() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterAttributeChange(docCookie As UInteger, grfAttribs As UInteger) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterDocumentWindowHide(docCookie As UInteger, pFrame As Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterFirstDocumentLock(docCookie As UInteger, dwRDTLockType As UInteger, dwReadLocksRemaining As UInteger, dwEditLocksRemaining As UInteger) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterLastDocumentUnlock(Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ItemId As UInteger, MkDocument As String, ClosedWithoutSaving As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterSave(docCookie As UInteger) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnAfterSaveAll() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnBeforeDocumentWindowShow(docCookie As UInteger, fFirstShow As Integer, pFrame As Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnBeforeFirstDocumentLock(Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ItemId As UInteger, MkDocument As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnBeforeLastDocumentUnlock(docCookie As UInteger, dwRDTLockType As UInteger, dwReadLocksRemaining As UInteger, dwEditLocksRemaining As UInteger) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnCmdUIContextChanged(dwCmdUICookie As UInteger, fActive As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnElementValueChanged(elementid As UInteger, varValueOld As Object, varValueNew As Object) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnInitializationComplete() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnSelectionChanged(pHierOld As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidOld As UInteger, pMISOld As Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect, pSCOld As Microsoft.VisualStudio.Shell.Interop.ISelectionContainer, pHierNew As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidNew As UInteger, pMISNew As Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect, pSCNew As Microsoft.VisualStudio.Shell.Interop.ISelectionContainer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.SetUndoRedoCleanStateOnAllPropertyPages() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.SpecialFiles() -> Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecialFiles (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.SwitchTab(forward As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.WindowFrame() -> Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.ActivateLogicalView(ByRef rguidLogicalView As System.Guid) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.AppDesignerView() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.CloseFrameNoSave() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.ClosePromptSave() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.GetActiveLogicalView(ByRef pguidLogicalView As System.Guid) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.IVsWindowPaneCommit_CommitPendingEdit(ByRef pfCommitFailed As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.IsLogicalViewActive(ByRef rguidLogicalView As System.Guid, ByRef pIsActive As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.New(surface As System.ComponentModel.Design.DesignSurface) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.NextTab() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.PrevTab() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.SaveChildren(flags As Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.SaveProjectFile() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.VsUIShell2Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell2 (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.VsUIShell5Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell5 (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.VsUIShellService() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPaneControl (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPaneControl.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.CmdTargetHelper (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.CmdTargetHelper.New(WindowPane As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomDocumentMonikerProvider (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomDocumentMonikerProvider.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.Dispose() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.DeferrableWindowPaneProviderService (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.DeferrableWindowPaneProviderService.New(provider As System.IServiceProvider, docData As Microsoft.VisualStudio.Shell.Design.Serialization.DocData) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.New(ErrorText As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.New(Exception As System.Exception) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner.DelayRefreshDirtyIndicators() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner.DsMsgBox(ex As System.Exception, HelpLink As String = Nothing) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner.GetLocaleID() -> UInteger (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner.GetService(ServiceType As System.Type) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.IVsEditWindowNotify (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.IVsEditWindowNotify.OnActivated(activated As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.AccessibleState() -> System.Windows.Forms.AccessibleStates (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.ButtonIndex() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.DirtyIndicator() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.DirtyIndicator(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.Location() -> System.Drawing.Point (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.Location(Value As System.Drawing.Point) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.SetIndex(index As Integer) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.TextWithDirtyIndicator() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.AddTab(Title As String, AutomationName As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ClearTabs() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.GetTabButton(index As Integer) -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.HostingPanel() -> System.Windows.Forms.Panel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.HoverItem() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.InvalidateLayout() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnItemEnter(e As System.EventArgs, item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnItemLeave(e As System.EventArgs, item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.Renderer() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.SelectedIndex() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.SelectedIndex(Value As Integer) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.SelectedItem() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.SelectedItem(Value As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ServiceProvider() -> System.IServiceProvider (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ServiceProvider(Value As System.IServiceProvider) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.TabButtonCount() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.TabButtons() -> System.Collections.Generic.IEnumerable(Of Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ThemeChanged -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ThemeChangedEventHandler (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ThemeChangedEventHandler (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ThemeChangedEventHandler.New(TargetObject As Object, TargetMethod As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.VsUIShell2Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell2 (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.VsUIShell5Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell5 (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.VsUIShellService() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.CreateGDIObjects(ForceUpdate As Boolean = False) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.New(owner As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.PerformLayout() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.PreferredButtonForSwitchableSlot() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.PreferredButtonForSwitchableSlot(Value As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.RenderBackground(g As System.Drawing.Graphics) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.RenderButton(g As System.Drawing.Graphics, button As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton, IsSelected As Boolean, IsHovered As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.ServiceProvider() -> System.IServiceProvider (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.ServiceProvider(Value As System.IServiceProvider) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabRenderer.UpdateCacheState() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.ComPropPageInstance() -> Microsoft.VisualStudio.OLE.Interop.IPropertyPage (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.Guid() -> System.Guid (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.IsConfigPage() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.LoadException() -> System.Exception (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.New(ParentView As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView, Guid As System.Guid, IsConfigurationDependentPage As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.Site() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.Title() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.BackingServiceProvider() -> System.IServiceProvider (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.BackingServiceProvider(Value As System.IServiceProvider) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.CommitPendingChanges() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.GetLocaleID(ByRef pLocaleID As UInteger) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.GetPageContainer(ByRef ppunk As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.GetService(serviceType As System.Type) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.HasBeenSetDirty() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.HasBeenSetDirty(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.New(View As Microsoft.VisualStudio.Editors.ApplicationDesigner.IPropertyPageSiteOwner, PropPage As Microsoft.VisualStudio.OLE.Interop.IPropertyPage) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.OnStatusChange(dwFlags As UInteger) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.QueryService(ByRef guidService As System.Guid, ByRef riid As System.Guid, ByRef ppvObject As System.IntPtr) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.TranslateAccelerator(pMsg As Microsoft.VisualStudio.OLE.Interop.MSG()) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomDocumentMonikerProvider (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomDocumentMonikerProvider.New(DesignerView As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView, SpecialFileId As Integer) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView.SetSite(ViewProvider As Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.DesignerPanel() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.DesignerView() -> Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.LinkText() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.New(DesignerView As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView, DesignerPanel As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel, SpecialFileId As Integer, LinkText As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.SpecialFileId() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.DesignerFramework.SourceCodeControlManager
Microsoft.VisualStudio.Editors.DesignerFramework.SourceCodeControlManager.AreFilesEditable() -> Boolean
Microsoft.VisualStudio.Editors.DesignerFramework.SourceCodeControlManager.EnsureFilesEditable() -> Void
Microsoft.VisualStudio.Editors.DesignerFramework.SourceCodeControlManager.ManageFile(mkDocument As String) -> Void
Microsoft.VisualStudio.Editors.DesignerFramework.SourceCodeControlManager.ManagedFiles() -> System.Collections.Generic.List(Of String)
Microsoft.VisualStudio.Editors.DesignerFramework.SourceCodeControlManager.ManagedFiles(Value As System.Collections.Generic.List(Of String)) -> Void
Microsoft.VisualStudio.Editors.DesignerFramework.SourceCodeControlManager.New(sp As System.IServiceProvider, Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy) -> Void
Microsoft.VisualStudio.Editors.DesignerFramework.SourceCodeControlManager.StopManagingFile(mkDocument As String) -> Void
Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes
Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes.CommandLineApp = 2 -> Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes
Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes.WebControl = 4 -> Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes
Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes.WindowsApp = 0 -> Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes
Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes.WindowsClassLib = 1 -> Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes
Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes.WindowsService = 3 -> Microsoft.VisualStudio.Editors.MyApplication.ApplicationTypes
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.AuthenticationMode() -> Integer
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.AuthenticationMode(Value As Integer) -> Void
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.CustomSubMain() -> Boolean
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.CustomSubMain(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.EnableVisualStyles() -> Boolean
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.EnableVisualStyles(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.MainForm() -> String
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.MainForm(Value As String) -> Void
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.SaveMySettingsOnExit() -> Boolean
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.SaveMySettingsOnExit(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.ShutdownMode() -> Integer
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.ShutdownMode(Value As Integer) -> Void
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.SingleInstance() -> Boolean
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.SingleInstance(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.SplashScreen() -> String
Microsoft.VisualStudio.Editors.MyApplication.IVsMyApplicationProperties.SplashScreen(Value As String) -> Void
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationCodeGenerator
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationCodeGenerator.New() -> Void
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationManager
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationManager.New() -> Void
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.AuthenticationMode() -> Integer
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.AuthenticationMode(Value As Integer) -> Void
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.CustomSubMain() -> Boolean
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.CustomSubMain(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.EnableVisualStyles() -> Boolean
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.EnableVisualStyles(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.MainForm() -> String
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.MainForm(Value As String) -> Void
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.SaveMySettingsOnExit() -> Boolean
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.SaveMySettingsOnExit(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.ShutdownMode() -> Integer
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.ShutdownMode(Value As Integer) -> Void
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.SingleInstance() -> Boolean
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.SingleInstance(Value As Boolean) -> Void
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.SplashScreen() -> String
Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.SplashScreen(Value As String) -> Void
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ChangeSelection(ConfigIndex As Integer, PlatformIndex As Integer, FireNotifications As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ChangeSelection(ConfigName As String, ConfigSelectionType As Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes, PlatformName As String, PlatformSelectionType As Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes, PreferExactMatch As Boolean, FireNotifications As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.CheckForModeChanges() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ClearConfigPageUndoRedoStacks -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ClearConfigPageUndoRedoStacksEventHandler (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ClearConfigPageUndoRedoStacksEventHandler (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ClearConfigPageUndoRedoStacksEventHandler.New(TargetObject As Object, TargetMethod As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ConfigurationDropdownEntries() -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ConfigurationListAndSelectionChanged -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ConfigurationListAndSelectionChangedEventHandler (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ConfigurationListAndSelectionChangedEventHandler (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ConfigurationListAndSelectionChangedEventHandler.New(TargetObject As Object, TargetMethod As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.Dispose() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem.DisplayName() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem.Name -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem.New(Name As String, SelectionType As Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem.SelectionType -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.GetAllConfigs() -> Microsoft.VisualStudio.Shell.Interop.IVsCfg() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.IsSimplifiedConfigMode() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.New(Project As EnvDTE.Project, ProjectHierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, View As Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnActiveProjectCfgChange(pIVsHierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnCfgNameAdded(pszCfgName As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnCfgNameDeleted(CfgName As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnCfgNameRenamed(OldName As String, NewName As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnPlatformNameAdded(pszPlatformName As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.OnPlatformNameDeleted(pszPlatformName As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.PlatformDropdownEntries() -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.DropdownItem() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.Project() -> EnvDTE.Project (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedConfigIndex() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedConfigurationChanged -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedConfigurationChangedEventHandler (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedConfigurationChangedEventHandler (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedConfigurationChangedEventHandler.New(TargetObject As Object, TargetMethod As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedPlatformIndex() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes.Active = 1 -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes.All = 2 -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes.Normal = 0 -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectionTypes.value__ -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SimplifiedConfigModeChanged -> Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SimplifiedConfigModeChangedEventHandler (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SimplifiedConfigModeChangedEventHandler (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SimplifiedConfigModeChangedEventHandler.New(TargetObject As Object, TargetMethod As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.UpdateSolution_Begin(ByRef pfCancelUpdate As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.UpdateSolution_Cancel() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.UpdateSolution_Done(fSucceeded As Integer, fModified As Integer, fCancelCommand As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.UpdateSolution_StartUpdate(ByRef pfCancelUpdate As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.VsCfgProvider() -> Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2 (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.DeferrableWindowPaneProviderService (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.DeferrableWindowPaneProviderService.New(provider As System.IServiceProvider) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.ConfigNames -> String() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.DebugTrace(Message As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.GetObjects(VsCfgProvider As Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2) -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.New(VsCfgProvider As Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2, Objects As Object(), Values As Object(), SelectedConfigName As String, SelectedPlatformName As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.PlatformNames -> String() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.SelectedConfigName -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.SelectedPlatformName -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.MultipleValuesStore.Values -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.Close() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.Close2() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.FileChangedDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.FileChangedDelegate.New(TargetObject As Object, TargetMethod As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.GetData(ByRef riidKey As System.Guid, ByRef pvtData As Object) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.GetGuidEditorType(ByRef pClassID As System.Guid) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.GetGuidEditorType2(ByRef pClassID As System.Guid) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.GetSite(ByRef riid As System.Guid, ByRef ppvSite As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.GetTextBuffer(ByRef ppTextBuffer As Microsoft.VisualStudio.TextManager.Interop.IVsTextLines) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.IsDocDataDirty(ByRef pfDirty As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.IsDocDataDirty2(ByRef pfDirty As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.IsDocDataReadOnly(ByRef pfReadOnly As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.IsDocDataReloadable(ByRef pfReloadable As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.IsDocDataReloadable2(ByRef pfReloadable As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadCompletedDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadCompletedDelegate.New(TargetObject As Object, TargetMethod As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadDocData(pszMkDocument As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadDocData2(pszMkDocument As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LockTextBuffer(fLock As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.New(BaseProvider As System.IServiceProvider) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.OnFileChanged -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.FileChangedDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.OnLoadCompleted -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadCompletedDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.OnRegisterDocData(docCookie As UInteger, pHierNew As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidNew As UInteger) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.OnRegisterDocData2(docCookie As UInteger, pHierNew As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidNew As UInteger) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.ReloadDocData(grfFlags As UInteger) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.ReloadDocData2(grfFlags As UInteger) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.RenameDocData(grfAttribs As UInteger, pHierNew As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidNew As UInteger, pszMkDocumentNew As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.RenameDocData2(grfAttribs As UInteger, pHierNew As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, itemidNew As UInteger, pszMkDocumentNew As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SaveDocData(dwSave As Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS, ByRef pbstrMkDocumentNew As String, ByRef pfSaveCanceled As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SaveDocData2(dwSave As Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS, ByRef pbstrMkDocumentNew As String, ByRef pfSaveCanceled As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetData(ByRef riidKey As System.Guid, vtData As Object) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetDocDataDirty(fDirty As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetDocDataReadOnly(fReadOnly As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetSite(pUnkSite As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetTextBuffer(pTextBuffer As Microsoft.VisualStudio.TextManager.Interop.IVsTextLines) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetUntitledDocPath(pszDocDataPath As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.SetUntitledDocPath2(pszDocDataPath As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.Close() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.MapLogicalView(ByRef rguidLogicalView As System.Guid, ByRef pbstrPhysicalView As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.SetSite(Site As Microsoft.VisualStudio.OLE.Interop.IServiceProvider) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerLoader (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerLoader.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.Hierarchy() -> Microsoft.VisualStudio.Shell.Interop.IVsHierarchy (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.Hierarchy(Value As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.ItemId() -> UInteger (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.ItemId(Value As UInteger) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.Name() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent.RootDesigner() -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner.Component() -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootComponent (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner.GetService(ServiceType As System.Type) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner.GetView() -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ActivatePage(PropPage As Microsoft.VisualStudio.OLE.Interop.IPropertyPage) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.DTEProject() -> EnvDTE.Project (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.DesignerHost() -> System.ComponentModel.Design.IDesignerHost (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.DsMsgBox(Message As String, Buttons As System.Windows.Forms.MessageBoxButtons, Icon As System.Windows.Forms.MessageBoxIcon, DefaultButton As System.Windows.Forms.MessageBoxDefaultButton = System.Windows.Forms.MessageBoxDefaultButton.Button1, HelpLink As String = Nothing) -> System.Windows.Forms.DialogResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.FocusFirstOrLastPropertyPageControl(First As Boolean) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.GetProperty(PropertyName As String) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.GetPropertyPageTopHwnd() -> System.IntPtr (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.GetService(ServiceType As System.Type) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.GetTransaction(Description As String) -> System.ComponentModel.Design.DesignerTransaction (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IVsProjectDesignerPageSite_OnPropertyChanged(PropertyName As String, PropertyDescriptor As System.ComponentModel.PropertyDescriptor, OldValue As Object, NewValue As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IVsProjectDesignerPageSite_OnPropertyChanging(PropertyName As String, PropertyDescriptor As System.ComponentModel.PropertyDescriptor) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IVsWindowPaneCommit_CommitPendingEdit(ByRef pfCommitFailed As Integer) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.Init(DTEProject As EnvDTE.Project, PropPage As Microsoft.VisualStudio.OLE.Interop.IPropertyPage, PropPageSite As Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite, Hierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, IsConfigPage As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IsConfigPage() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IsConfigPage(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.IsNativeHostedPropertyPageActivated() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.New(RootDesigner As Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.OnActivated(activated As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PropPage() -> Microsoft.VisualStudio.OLE.Interop.IPropertyPage (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel.StopAutoScrollToControl(needStop As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.SetProperty(PropertyName As String, Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.SetUndoRedoCleanState() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ShouldShowDirtyIndicator() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ShowErrorMessage(Message As String, HelpLink As String = Nothing) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.UnLoadPage() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerWindowPane (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerWindowPane.New(surface As System.ComponentModel.Design.DesignSurface) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.New(PropDesc As System.ComponentModel.PropertyDescriptor, PropertyName As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.New(Provider As System.IServiceProvider) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.AddIconsFromProjectItem(ProjectItem As EnvDTE.ProjectItem, ApplicationIconCombobox As System.Windows.Forms.ComboBox) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.AddManifestsFromProjectItem(ProjectItem As EnvDTE.ProjectItem, ApplicationManifestCombobox As System.Windows.Forms.ComboBox) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.ApplicationIconGet(control As System.Windows.Forms.Control, prop As System.ComponentModel.PropertyDescriptor, ByRef value As Object) -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.ApplicationManifestEntryIsDefault(text As String) -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.ApplicationManifestSupported() -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.BrowseForAppIcon(ApplicationIconCombobox As System.Windows.Forms.ComboBox, ApplicationIconPictureBox As System.Windows.Forms.PictureBox) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.IconEntryIsSpecial(EntryText As String) -> Boolean
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.LastIconImage() -> String
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.UpdateIconImage(ApplicationIconCombobox As System.Windows.Forms.ComboBox, ApplicationIconPictureBox As System.Windows.Forms.PictureBox, AddToProject As Boolean) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.m_DefaultIcon -> System.Drawing.Icon
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.m_DefaultIconText -> String
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.m_DefaultManifestText -> String
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.m_NoManifestText -> String
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationWithMyPropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.ApplicationWithMyPropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.BuildEventsPropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.BuildEventsPropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.BuildPropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.BuildPropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.CSharpApplicationPropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.CSharpApplicationPropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.GetLocaleID() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.GetService(ServiceType As System.Type) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.GetTransaction(description As String) -> System.ComponentModel.Design.DesignerTransaction (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.New(childPage As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase, wrappedInternalSite As Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal, wrappedUndoSite As Microsoft.VisualStudio.ManagedInterfaces.ProjectDesigner.IVsProjectDesignerPageSite) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.OnPropertyChanged(propertyName As String, propertyDescriptor As System.ComponentModel.PropertyDescriptor, oldValue As Object, newValue As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.OnPropertyChanging(propertyName As String, propertyDescriptor As System.ComponentModel.PropertyDescriptor) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.OnStatusChange(flags As Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ChildPageSite.TranslateAccelerator(msg As System.Windows.Forms.Message) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.CompilePropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.CompilePropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.CommonProperty = 2 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.Dirty = 1 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.Hidden = 64 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.NoOptimisticFileCheckout = 32768 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.None = 0 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.PersistedInAppManifestFile = 1024 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.PersistedInApplicationDefinitionFile = 16384 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.PersistedInAssemblyInfoFile = 2048 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.PersistedInProjectUserFile = 256 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.PersistedInVBMyAppFile = 512 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.ProjectMayBeReloadedDuringPropertySet = 4096 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.RefreshAllPropertiesWhenChanged = 8192 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.UserHandledEvents = 32 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.UserPersisted = 16 -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags.value__ -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.DebugPropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.DebugPropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.Apply() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.EditProperty(dispid As Integer) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.GetHelpContextF1Keyword() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.Help(HelpDir As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.IsPageDirty() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.SetObjects(objects As Object()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageInternal.SetPageSite(base As Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal.GetLocaleID() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal.GetService(ServiceType As System.Type) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal.IsImmediateApply() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal.OnStatusChange(flags As Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.IPropertyPageSiteInternal.TranslateAccelerator(msg As System.Windows.Forms.Message) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.MyExtensibilityPropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.MyExtensibilityPropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS.Clean = 4 -> Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS.Dirty = 1 -> Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS.Validate = 2 -> Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS.value__ -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PackagePropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.PackagePropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ProjectReloadedException (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ProjectReloadedException.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ProjectReloadedException.New(Info As System.Runtime.Serialization.SerializationInfo, Context As System.Runtime.Serialization.StreamingContext) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.FinishPendingValidations() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.GetLocaleID() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.GetService(ServiceType As System.Type) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.OnStatusChange(flags As Microsoft.VisualStudio.Editors.PropertyPages.PROPPAGESTATUS) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.OnWindowActivated(activated As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.TranslateAccelerator(msg As System.Windows.Forms.Message) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.New(ServiceProvider As System.IServiceProvider, F1Keyword As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.PropPage() -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.PropPage(Value As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.SetFocusToPage() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.AddChangeHandlers() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ApplyChanges(sender As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CanApplyNow() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CanApplyNow(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CheckoutProjectFile(ByRef ProjectReloaded As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ClearIsDirty() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CommonPropertiesObject() -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DISPID_UNKNOWN -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DTE() -> EnvDTE.DTE (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DTEProject() -> EnvDTE.Project (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DelayValidate(dataControl As System.Windows.Forms.Control) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.EnableControl(control As System.Windows.Forms.Control, enabled As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.Enabled() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.Enabled(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.EnterProjectCheckoutSection() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ExtendedPropertiesObjects(Data As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData) -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCommonPropertyDescriptor(PropertyName As String) -> System.ComponentModel.PropertyDescriptor (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCommonPropertyValue(PropertyName As String) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCommonPropertyValue(prop As System.ComponentModel.PropertyDescriptor) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCommonPropertyValueNative(PropertyName As String) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCommonPropertyValueNative(prop As System.ComponentModel.PropertyDescriptor) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetControlValue(name As String) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetControlValueNative(name As String) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetCurrentProperty(dispid As Integer, PropertyName As String, ByRef obj As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetDialogFont() -> System.Drawing.Font (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetDirectoryViaBrowse(InitialDirectory As String, DialogTitle As String, ByRef NewValue As String) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetDirectoryViaBrowseRelative(RelativeInitialDirectory As String, BasePath As String, DialogTitle As String, ByRef NewRelativePath As String) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetDirectoryViaBrowseRelativeToProject(InitialDirectory As String, DialogTitle As String, ByRef NewValue As String) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetDirty(sender As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetFileViaBrowse(InitialDirectory As String, ByRef NewValue As String, Filter As String) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetProjectPath() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetProjectRelativeDirectoryPath(DirectoryPath As String) -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetProjectRelativeFilePath(FilePath As String) -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPropertyDescriptor(PropertyName As String) -> System.ComponentModel.PropertyDescriptor (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetRelativeDirectoryPath(BasePath As String, DirectoryPath As String) -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetRelativeFilePath(BasePath As String, FilePath As String) -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetServiceFromPropertyPageSite(ServiceType As System.Type) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.InitializeAllProperties() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsActivated() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsAnyPropertyDirty() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsCSProject() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsConfigurationSpecificPage() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsDirty() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsDirty(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsInProjectCheckoutSection() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsUndoEnabled() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsVBProject() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.LeaveProjectCheckoutSection() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ManualPageScaling() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ManualPageScaling(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.MultiProjectSelect() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.New(serviceProvider As Microsoft.VisualStudio.Shell.ServiceProvider) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnExternalPropertyChanged(DISPID As Integer, DebugSourceName As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnExternalPropertyRequestEdit(DISPID As Integer, DebugSourceName As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PageRequiresScaling() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PageRequiresScaling(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProcessDelayValidationQueue(canThrow As Boolean) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProjectHierarchy() -> Microsoft.VisualStudio.Shell.Interop.IVsHierarchy (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProjectKind() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProjectLanguage() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProjectProperties() -> VSLangProj.ProjectProperties (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProjectReloadedDuringCheckout() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource.Direct = 0 -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource.External = 2 -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource.Indirect = 1 -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource.value__ -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyPageSite() -> Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.RawPropertiesObjects(Data As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData) -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ResumePropertyChangeListening(DispId As Integer) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ServiceProvider() -> Microsoft.VisualStudio.Shell.ServiceProvider (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetCommonPropertyValue(PropertyName As String, value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetCommonPropertyValue(prop As System.ComponentModel.PropertyDescriptor, Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetCommonPropertyValueNative(PropertyName As String, Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetCommonPropertyValueNative(prop As System.ComponentModel.PropertyDescriptor, Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDirty(ReadyToApply As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDirty(dispid As Integer) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDirty(dispid As Integer, ReadyToApply As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDirty(sender As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDirty(sender As Object, ReadyToApply As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowChildPage(Title As String, PageType As System.Type) -> System.Windows.Forms.DialogResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowChildPage(Title As String, PageType As System.Type, F1Keyword As String) -> System.Windows.Forms.DialogResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowErrorMessage(errorMessage As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowErrorMessage(errorMessage As String, HelpLink As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowErrorMessage(errorMessage As String, ex As System.Exception) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowErrorMessage(ex As System.Exception) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ShowErrorMessage(ex As System.Exception, HelpLink As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SkipValidating(dataControl As System.Windows.Forms.Control) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SuspendPropertyChangeListening(DispId As Integer) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.TryGetNonCommonPropertyValue(Descriptor As System.ComponentModel.PropertyDescriptor) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ValidatePageChanges(allowDelayValidation As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.VsUIShell2Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell2 (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.VsUIShell5Service() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell5 (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.VsUIShellService() -> Microsoft.VisualStudio.Shell.Interop.IVsUIShell (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_CommonPropertyDescriptors -> System.ComponentModel.PropertyDescriptorCollection (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_ControlData -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_ExtendedObjects -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_IsDirty -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_Objects -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_ObjectsPropertyDescriptorsArray -> System.ComponentModel.PropertyDescriptorCollection() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_ScalingCompleted -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.m_fInsideInit -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.AllInitialValues() -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.AllInitialValuesExpanded() -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.AssociatedControls -> System.Windows.Forms.Control() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.CommonPropertiesObject() -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.DispId() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.DisplayPropertyName -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.EnableAssociatedControl(control As System.Windows.Forms.Control, Enabled As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.EnableControls(Enabled As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.Flags -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.FormControl() -> System.Windows.Forms.Control (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetCallback -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetControlValueMultipleValues() -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetControlValueNative() -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate.New(TargetObject As Object, TargetMethod As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetFlags() -> Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.InitialValue() -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsCommonProperty() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsCommonProperty(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsConfigurationSpecificProperty() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsDirty() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsDirty(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsHidden() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsHidden(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsIndeterminate() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsMissing() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsReadOnly() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsSpecialValue() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsUserHandledEvents() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsUserHandledEvents(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsUserPersisted() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsUserPersisted(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetCallback -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate.New(TargetObject As Object, TargetMethod As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetCallback -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate.New(TargetObject As Object, TargetMethod As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, AssocControls As System.Windows.Forms.Control()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags, AssocControls As System.Windows.Forms.Control()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, setter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate, getter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags, AssocControls As System.Windows.Forms.Control()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, setter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate, getter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, setter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate, getter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, setter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate, getter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags, AssocControls As System.Windows.Forms.Control()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.New(id As Integer, name As String, FormControl As System.Windows.Forms.Control, setter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate, getter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate, multiValueSetter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate, multiValueGetter As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate, flags As Microsoft.VisualStudio.Editors.PropertyPages.ControlDataFlags, AssociatedControls As System.Windows.Forms.Control()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ObjectsPropertyDescriptorsArray() -> System.ComponentModel.PropertyDescriptorCollection() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.PropDesc -> System.ComponentModel.PropertyDescriptor (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.PropPage() -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.PropertyName() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetCallback -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetControlValue(value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate.New(TargetObject As Object, TargetMethod As System.IntPtr) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDirty(ReadyToApply As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetInitialValues(AllInitialValues As Object()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetInitialValues(InitialValue As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetInitialValues(InitialValue As Object, AllInitialValues As Object()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.m_FormControl -> System.Windows.Forms.Control (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.m_Initializing -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.m_PropPage -> Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.m_isCommitingChange -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyListener (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyListener.OnChanged(dispid As Integer, wszConfigName As String) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(Info As System.Runtime.Serialization.SerializationInfo, Context As System.Runtime.Serialization.StreamingContext) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(message As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(message As String, helpLink As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(message As String, helpLink As String, innerException As System.Exception) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(message As String, innerException As System.Exception) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.New(message As String, innerException As System.Exception, ShowHeaderAndFooterInErrorControl As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.ShowHeaderAndFooterInErrorControl() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.PropertyPageException.ShowHeaderAndFooterInErrorControl(Value As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ReferencePathsPropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.ReferencePathsPropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ReferencePropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.ReferencePropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.ServicesPropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.ServicesPropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.PropertyPages.UserPropertyDescriptor
Microsoft.VisualStudio.Editors.PropertyPages.UserPropertyDescriptor.New(Name As String, PropertyType As System.Type) -> Void
Microsoft.VisualStudio.Editors.PropertyPages.VBPropPageBase (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VBPropPageBase.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.New() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.AcademicProfessional = 2100 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.AcademicStudent = 2100 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.DownloadTrial = 2500 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.Enterprise = 3000 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.Express = 500 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.None = 0 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.Professional = 2000 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.Standard = 1000 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.VSTO = 1500 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition.value__ -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.Architect = 8 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.CSharp = 4 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.IDE = 16 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.None = 0 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.VB = 2 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.VC = 1 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.Web = 64 -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition.value__ -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult.Failed = 2 -> Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult.Succeeded = 0 -> Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult.Warning = 1 -> Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult.value__ -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Microsoft.VisualStudio.Editors.PropertyPages.WPFApplicationWithMyPropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.WPFApplicationWithMyPropPageComClass.New() -> Void
Microsoft.VisualStudio.Editors.ResourceEditor.ResxItemWizard
Microsoft.VisualStudio.Editors.ResourceEditor.ResxItemWizard.BeforeOpeningFile(projectItem As EnvDTE.ProjectItem) -> Void
Microsoft.VisualStudio.Editors.ResourceEditor.ResxItemWizard.New() -> Void
Microsoft.VisualStudio.Editors.ResourceEditor.ResxItemWizard.ProjectFinishedGenerating(project As EnvDTE.Project) -> Void
Microsoft.VisualStudio.Editors.ResourceEditor.ResxItemWizard.ProjectItemFinishedGenerating(projectItem As EnvDTE.ProjectItem) -> Void
Microsoft.VisualStudio.Editors.ResourceEditor.ResxItemWizard.RunFinished() -> Void
Microsoft.VisualStudio.Editors.ResourceEditor.ResxItemWizard.RunStarted(automationObject As Object, replacementsDictionary As System.Collections.Generic.Dictionary(Of String, String), runKind As Microsoft.VisualStudio.TemplateWizard.WizardRunKind, customParams As Object()) -> Void
Microsoft.VisualStudio.Editors.ResourceEditor.ResxItemWizard.ShouldAddProjectItem(filePath As String) -> Boolean
Microsoft.VisualStudio.Editors.SettingsDesigner.PublicSettingsSingleFileGenerator
Microsoft.VisualStudio.Editors.SettingsDesigner.PublicSettingsSingleFileGenerator.New() -> Void
Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator
Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator.New() -> Void
Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGeneratorBase
Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGeneratorBase.New() -> Void
Microsoft.VisualStudio.Editors.XmlToSchema.Wizard
Microsoft.VisualStudio.Editors.XmlToSchema.Wizard.BeforeOpeningFile(projectItem As EnvDTE.ProjectItem) -> Void
Microsoft.VisualStudio.Editors.XmlToSchema.Wizard.New() -> Void
Microsoft.VisualStudio.Editors.XmlToSchema.Wizard.ProjectFinishedGenerating(project As EnvDTE.Project) -> Void
Microsoft.VisualStudio.Editors.XmlToSchema.Wizard.ProjectItemFinishedGenerating(projectItem As EnvDTE.ProjectItem) -> Void
Microsoft.VisualStudio.Editors.XmlToSchema.Wizard.RunFinished() -> Void
Microsoft.VisualStudio.Editors.XmlToSchema.Wizard.RunStarted(automationObject As Object, replacementsDictionary As System.Collections.Generic.Dictionary(Of String, String), runKind As Microsoft.VisualStudio.TemplateWizard.WizardRunKind, customParams As Object()) -> Void
Microsoft.VisualStudio.Editors.XmlToSchema.Wizard.ShouldAddProjectItem(filePath As String) -> Boolean
MustOverride Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomDocumentMonikerProvider.GetDocumentMoniker() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
MustOverride Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.CloseView() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
MustOverride Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.CreateView() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
MustOverride Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.View() -> System.Windows.Forms.Control (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
MustOverride Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.ControlType() -> System.Type (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
MustOverride Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.CreateControl() -> System.Windows.Forms.Control (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
MustOverride Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.Title() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overloads Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.Dispose() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overloads Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.Dispose(disposing As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overloads Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.Dispose() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overloads Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageSite.Dispose(disposing As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overloads Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.Dispose() -> Void
Overloads Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.Dispose() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overloads Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.AddFileToProject(FileName As String) -> EnvDTE.ProjectItem (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overloads Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.AddFileToProject(FileName As String, CopyFile As Boolean) -> EnvDTE.ProjectItem (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overloads Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.AddFileToProject(ProjectItems As EnvDTE.ProjectItems, FileName As String, CopyFile As Boolean) -> EnvDTE.ProjectItem (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overloads Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.AddFileToProject(ProjectItems As EnvDTE.ProjectItems, FileName As String, CopyFile As Boolean, BuildAction As VSLangProj.prjBuildAction) -> EnvDTE.ProjectItem (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overloads Microsoft.VisualStudio.Editors.PropertyPages.PropertyListener.Dispose() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.CloseFrameInternal(WindowFrame As Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame, flags As Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.ShowWindowFrame() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.CustomViewProvider.Dispose(Disposing As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnItemClick(item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnItemClick(item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton, reactivatePage As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnItemGotFocus(e As System.EventArgs, item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnThemeChanged() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OverflowButton() -> System.Windows.Forms.Button (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OverflowButton(WithEventsValue As System.Windows.Forms.Button) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ThemeChangedEventHandler.BeginInvoke(sender As Object, args As System.EventArgs, DelegateCallback As System.AsyncCallback, DelegateAsyncState As Object) -> System.IAsyncResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ThemeChangedEventHandler.EndInvoke(DelegateAsyncResult As System.IAsyncResult) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.ThemeChangedEventHandler.Invoke(sender As Object, args As System.EventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.PropertyPageInfo.TryLoadPropertyPage() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView.LinkLabel() -> VSThemedLinkLabel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView.LinkLabel(WithEventsValue As VSThemedLinkLabel) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ClearConfigPageUndoRedoStacksEventHandler.BeginInvoke(DelegateCallback As System.AsyncCallback, DelegateAsyncState As Object) -> System.IAsyncResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ClearConfigPageUndoRedoStacksEventHandler.EndInvoke(DelegateAsyncResult As System.IAsyncResult) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ClearConfigPageUndoRedoStacksEventHandler.Invoke() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ConfigurationListAndSelectionChangedEventHandler.BeginInvoke(DelegateCallback As System.AsyncCallback, DelegateAsyncState As Object) -> System.IAsyncResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ConfigurationListAndSelectionChangedEventHandler.EndInvoke(DelegateAsyncResult As System.IAsyncResult) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.ConfigurationListAndSelectionChangedEventHandler.Invoke() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedConfigurationChangedEventHandler.BeginInvoke(DelegateCallback As System.AsyncCallback, DelegateAsyncState As Object) -> System.IAsyncResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedConfigurationChangedEventHandler.EndInvoke(DelegateAsyncResult As System.IAsyncResult) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SelectedConfigurationChangedEventHandler.Invoke() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SimplifiedConfigModeChangedEventHandler.BeginInvoke(DelegateCallback As System.AsyncCallback, DelegateAsyncState As Object) -> System.IAsyncResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SimplifiedConfigModeChangedEventHandler.EndInvoke(DelegateAsyncResult As System.IAsyncResult) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.ConfigurationState.SimplifiedConfigModeChangedEventHandler.Invoke() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.FileChangedDelegate.BeginInvoke(ChangeFlags As UInteger, FileAttrs As UInteger, DelegateCallback As System.AsyncCallback, DelegateAsyncState As Object) -> System.IAsyncResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.FileChangedDelegate.EndInvoke(DelegateAsyncResult As System.IAsyncResult) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.FileChangedDelegate.Invoke(ChangeFlags As UInteger, FileAttrs As UInteger) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadCompletedDelegate.BeginInvoke(Reload As Integer, DelegateCallback As System.AsyncCallback, DelegateAsyncState As Object) -> System.IAsyncResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadCompletedDelegate.EndInvoke(DelegateAsyncResult As System.IAsyncResult) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerDocData.LoadCompletedDelegate.Invoke(Reload As Integer) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigDividerLine() -> System.Windows.Forms.Label (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigDividerLine(WithEventsValue As System.Windows.Forms.Label) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationComboBox() -> System.Windows.Forms.ComboBox (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationComboBox(WithEventsValue As System.Windows.Forms.ComboBox) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationFlowLayoutPanel() -> System.Windows.Forms.FlowLayoutPanel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationFlowLayoutPanel(WithEventsValue As System.Windows.Forms.FlowLayoutPanel) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationLabel() -> System.Windows.Forms.Label (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationLabel(WithEventsValue As System.Windows.Forms.Label) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationPanel() -> System.Windows.Forms.TableLayoutPanel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationTableLayoutPanel() -> System.Windows.Forms.TableLayoutPanel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ConfigurationTableLayoutPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PLatformTableLayoutPanel() -> System.Windows.Forms.TableLayoutPanel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PLatformTableLayoutPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PlatformComboBox() -> System.Windows.Forms.ComboBox (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PlatformComboBox(WithEventsValue As System.Windows.Forms.ComboBox) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PlatformLabel() -> System.Windows.Forms.Label (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PlatformLabel(WithEventsValue As System.Windows.Forms.Label) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PropPageDesignerViewLayoutPanel() -> System.Windows.Forms.TableLayoutPanel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PropPageDesignerViewLayoutPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PropertyPagePanel() -> Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PropertyPagePanel(WithEventsValue As Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.AddIconEntryToCombobox(ApplicationIconCombobox As System.Windows.Forms.ComboBox, IconRelativePath As String) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.IconEntryIsBrowse(EntryText As String) -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.IconEntryIsDefault(EntryText As String) -> Boolean
Overridable Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.PopulateIconList(FindIconsInProject As Boolean, ApplicationIconCombobox As System.Windows.Forms.ComboBox, CurrentIconValue As String) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.ApplicationPropPageBase.PopulateManifestList(FindManifestInProject As Boolean, ApplicationManifestCombobox As System.Windows.Forms.ComboBox, CurrentManifestValue As String) -> Void
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.Apply() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.ControlTypeForResources() -> System.Type (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.Deactivate() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.DefaultSize() -> System.Drawing.Size (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.DefaultSize(Value As System.Drawing.Size) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.DocString() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.DocString(Value As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.GetProperty(PropertyName As String) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.GetPropertyMultipleValues(PropertyName As String, ByRef Objects As Object(), ByRef Values As Object()) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.Help(strHelpDir As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.HelpContext() -> UInteger (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.HelpContext(Value As UInteger) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.HelpFile() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.HelpFile(Value As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.IsPageDirty() -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.Objects() -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SetObjects(cObjects As UInteger, objects As Object()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SetProperty(PropertyName As String, Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SetPropertyMultipleValues(PropertyName As String, Objects As Object(), Values As Object()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SetSite(site As Microsoft.VisualStudio.ManagedInterfaces.ProjectDesigner.IVsProjectDesignerPageSite) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SupportsMultipleValueUndo(PropertyName As String) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.SupportsTheming() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageBase.TranslateAccelerator(pMsg As Microsoft.VisualStudio.OLE.Interop.MSG()) -> Integer (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.Cancel() -> System.Windows.Forms.Button (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.Cancel(WithEventsValue As System.Windows.Forms.Button) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.OK() -> System.Windows.Forms.Button (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.OK(WithEventsValue As System.Windows.Forms.Button) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.okCancelTableLayoutPanel() -> System.Windows.Forms.TableLayoutPanel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.okCancelTableLayoutPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.overArchingTableLayoutPanel() -> System.Windows.Forms.TableLayoutPanel (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageHostDialog.overArchingTableLayoutPanel(WithEventsValue As System.Windows.Forms.TableLayoutPanel) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.Apply() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ApplyPageChanges() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CleanupCOMReferences() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.CommitTransaction(Transaction As System.ComponentModel.Design.DesignerTransaction) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ControlData() -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DisableOnBuild() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DisableOnDebug() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.DisableWhenDebugMode(mode As Microsoft.VisualStudio.Shell.Interop.DBGMODE) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.EditProperty(dispid As Integer) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.EnableAllControls(enabled As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetF1HelpKeyword() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetProperty(dispid As Integer, ByRef obj As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPropertyControl(PropertyId As Integer) -> System.Windows.Forms.Control (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPropertyControlData(PropertyId As Integer) -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPropertyControlData(PropertyName As String) -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetTransaction() -> System.ComponentModel.Design.DesignerTransaction (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetTransactionDescription() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetUserDefinedPropertyDescriptor(PropertyName As String) -> System.ComponentModel.PropertyDescriptor (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.Help(HelpTopic As String) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IVsProjectDesignerPage_GetPropertyMultipleValues(PropertyName As String, ByRef Objects As Object(), ByRef Values As Object()) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IVsProjectDesignerPage_GetPropertyValue(PropertyName As String) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IVsProjectDesignerPage_SetPropertyValue(PropertyName As String, Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IVsProjectDesignerPage_SetPropertyValueMultipleValues(PropertyName As String, Objects As Object(), Values As Object()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IVsProjectDesignerPage_SupportsMultipleValueUndo(PropertyName As String) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.InitPage() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.IsPageDirty() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnApplyComplete(ApplySuccessful As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnExternalPropertyChanged(DISPID As Integer, Source As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnExternalPropertyChanged(Data As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData, Source As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropertyChangeSource) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnPageActivated(activated As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnPropertyChanged(PropertyName As String, PropDesc As System.ComponentModel.PropertyDescriptor, OldValue As Object, NewValue As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnPropertyChanging(PropertyName As String, PropDesc As System.ComponentModel.PropertyDescriptor) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnSetSite(site As Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnThemeChanged() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PageResizable() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PostApplyPageChanges() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PostInitPage() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PreApplyPageChanges() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PreInitPage() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ReadUserDefinedProperty(PropertyName As String, ByRef Value As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.RefreshPropertyStandardValues() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.RefreshPropertyValues() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.RestoreInitialValues() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ScaleWindowToCurrentFont() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetDialogFont(ScaleDialog As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SetObjects(objects As Object()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.SupportsTheming() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ValidateProperty(controlData As Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData, ByRef message As String, ByRef returnControl As System.Windows.Forms.Control) -> Microsoft.VisualStudio.Editors.PropertyPages.ValidationResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ValidationControlGroups() -> System.Windows.Forms.Control()() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.WriteUserDefinedProperty(PropertyName As String, Value As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.AddChangeHandlers() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ApplyChanges() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ComboBox_SelectionChangeCommitted(sender As Object, e As System.EventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ExtendedPropertiesObjects() -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.FilesToCheckOut() -> String() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetAllPropertyValuesNative(Extenders As Object(), ByRef Values As Object(), ByRef ValueOrIndeterminate As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetControlValue() -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate.BeginInvoke(control As System.Windows.Forms.Control, prop As System.ComponentModel.PropertyDescriptor, ByRef value As Object, DelegateCallback As System.AsyncCallback, DelegateAsyncState As Object) -> System.IAsyncResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate.EndInvoke(ByRef value As Object, DelegateAsyncResult As System.IAsyncResult) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetDelegate.Invoke(control As System.Windows.Forms.Control, prop As System.ComponentModel.PropertyDescriptor, ByRef value As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetPropertyValueNative(Extender As Object) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetUserDefinedPropertyDescriptor() -> System.ComponentModel.PropertyDescriptor (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.InitPropertyUI() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.InitPropertyValue() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.Initialize(PropertyPage As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate.BeginInvoke(control As System.Windows.Forms.Control, prop As System.ComponentModel.PropertyDescriptor, ByRef Values As Object(), DelegateCallback As System.AsyncCallback, DelegateAsyncState As Object) -> System.IAsyncResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate.EndInvoke(ByRef Values As Object(), DelegateAsyncResult As System.IAsyncResult) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueGetDelegate.Invoke(control As System.Windows.Forms.Control, prop As System.ComponentModel.PropertyDescriptor, ByRef Values As Object()) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate.BeginInvoke(control As System.Windows.Forms.Control, prop As System.ComponentModel.PropertyDescriptor, Values As Object(), DelegateCallback As System.AsyncCallback, DelegateAsyncState As Object) -> System.IAsyncResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate.EndInvoke(DelegateAsyncResult As System.IAsyncResult) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MultiValueSetDelegate.Invoke(control As System.Windows.Forms.Control, prop As System.ComponentModel.PropertyDescriptor, Values As Object()) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.OnPropertyChanged(OldValue As Object, NewValue As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.OnPropertyChanging() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.RawPropertiesObjects() -> Object() (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ReadUserDefinedProperty(PropertyName As String, ByRef Value As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.RefreshValue() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.RestoreInitialValue() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate.BeginInvoke(control As System.Windows.Forms.Control, prop As System.ComponentModel.PropertyDescriptor, value As Object, DelegateCallback As System.AsyncCallback, DelegateAsyncState As Object) -> System.IAsyncResult (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate.EndInvoke(DelegateAsyncResult As System.IAsyncResult) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetDelegate.Invoke(control As System.Windows.Forms.Control, prop As System.ComponentModel.PropertyDescriptor, value As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetNonCommonPropertyValueCore(Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetNonCommonPropertyValueMultipleValuesCore(Objects As Object(), Values As Object()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetPropertyValue(Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetPropertyValueNative(Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetPropertyValueNativeMultipleValues(Objects As Object(), Values As Object()) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SupportsMultipleValueUndo() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.TryGetPropertyValueNative(Extenders As Object()) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.WriteUserDefinedProperty(PropertyName As String, Value As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overridable Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGeneratorBase.AddRequiredReferences(GenerateProgress As Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress) -> Void
Overridable Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGeneratorBase.GetProjectRootNamespace() -> String
Overridable Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGeneratorBase.OnCompileUnitCreated(compileUnit As System.CodeDom.CodeCompileUnit, generatedClass As System.CodeDom.CodeTypeDeclaration) -> Void
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerLoader.Dispose() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.Dispose(disposing As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerPanel.OnLayout(levent As System.Windows.Forms.LayoutEventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerRootDesigner.Initialize(component As System.ComponentModel.IComponent) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnItemClick(item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerView.OnItemClick(item As Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton, reactivatePage As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.EditorView() -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerWindowPane.Window() -> System.Windows.Forms.IWin32Window (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.DeferrableWindowPaneProviderService.CreateWindowPane(surface As System.ComponentModel.Design.DesignSurface) -> Microsoft.VisualStudio.Shell.Design.DesignerWindowPane (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.CloseView() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.CreateView() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.Dispose(Disposing As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ErrorControlCustomViewProvider.View() -> System.Windows.Forms.Control (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.CreateAccessibilityInstance() -> System.Windows.Forms.AccessibleObject (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnClick(e As System.EventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnGotFocus(e As System.EventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnLostFocus(e As System.EventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnMouseEnter(e As System.EventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnMouseLeave(e As System.EventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.OnPaint(e As System.Windows.Forms.PaintEventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabButton.ProcessDialogKey(keyData As System.Windows.Forms.Keys) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.CreateAccessibilityInstance() -> System.Windows.Forms.AccessibleObject (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.Dispose(disposing As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnLayout(levent As System.Windows.Forms.LayoutEventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnPaint(e As System.Windows.Forms.PaintEventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.ProjectDesignerTabControl.OnPaintBackground(e As System.Windows.Forms.PaintEventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomDocumentMonikerProvider.GetDocumentMoniker() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomView.Dispose(disposing As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.CloseView() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.CreateView() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.Dispose(Disposing As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.ApplicationDesigner.SpecialFileCustomViewProvider.View() -> System.Windows.Forms.Control (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.MyApplication.MyApplicationProperties.FilesToCheckOut(CreateIfNotExist As Boolean) -> String()
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.DeferrableWindowPaneProviderService.CreateWindowPane(surface As System.ComponentModel.Design.DesignSurface) -> Microsoft.VisualStudio.Shell.Design.DesignerWindowPane (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerLoader.Dispose() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.PreProcessMessage(ByRef msg As System.Windows.Forms.Message) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerView.ScrollablePanel.ScrollToControl(activeControl As System.Windows.Forms.Control) -> System.Drawing.Point (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.CanResetValue(Component As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.ComponentType() -> System.Type (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.Converter() -> System.ComponentModel.TypeConverter (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.DisplayName() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.GetChildProperties(instance As Object, filter As System.Attribute()) -> System.ComponentModel.PropertyDescriptorCollection (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.GetEditor(editorBaseType As System.Type) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.GetValue(Component As Object) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.IsReadOnly() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.Name() -> String (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.PropertyType() -> System.Type (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.ResetValue(Component As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.SetValue(Component As Object, Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPagePropertyDescriptor.ShouldSerializeValue(Component As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.CreateStore() -> System.ComponentModel.Design.Serialization.SerializationStore (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.Deserialize(Store As System.ComponentModel.Design.Serialization.SerializationStore) -> System.Collections.ICollection (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.Deserialize(Store As System.ComponentModel.Design.Serialization.SerializationStore, Container As System.ComponentModel.IContainer) -> System.Collections.ICollection (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.DeserializeTo(Store As System.ComponentModel.Design.Serialization.SerializationStore, Container As System.ComponentModel.IContainer, ValidateRecycledTypes As Boolean, applyDefaults As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.LoadStore(Stream As System.IO.Stream) -> System.ComponentModel.Design.Serialization.SerializationStore (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.Serialize(Store As System.ComponentModel.Design.Serialization.SerializationStore, Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.SerializeAbsolute(store As System.ComponentModel.Design.Serialization.SerializationStore, value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.SerializeMember(Store As System.ComponentModel.Design.Serialization.SerializationStore, OwningObject As Object, Member As System.ComponentModel.MemberDescriptor) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService.SerializeMemberAbsolute(Store As System.ComponentModel.Design.Serialization.SerializationStore, OwningObject As Object, Member As System.ComponentModel.MemberDescriptor) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropertyPages.MyExtensibilityPropPageComClass.ControlType() -> System.Type
Overrides Microsoft.VisualStudio.Editors.PropertyPages.MyExtensibilityPropPageComClass.CreateControl() -> System.Windows.Forms.Control
Overrides Microsoft.VisualStudio.Editors.PropertyPages.MyExtensibilityPropPageComClass.Title() -> String
Overrides Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.Dispose(disposing As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPreferredSize(startSize As System.Drawing.Size) -> System.Drawing.Size (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.OnLayout(levent As System.Windows.Forms.LayoutEventArgs) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.ProcessDialogKey(keyData As System.Windows.Forms.Keys) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.WndProc(ByRef m As System.Windows.Forms.Message) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Overrides Microsoft.VisualStudio.Editors.PropertyPages.UserPropertyDescriptor.CanResetValue(component As Object) -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropertyPages.UserPropertyDescriptor.ComponentType() -> System.Type
Overrides Microsoft.VisualStudio.Editors.PropertyPages.UserPropertyDescriptor.GetValue(component As Object) -> Object
Overrides Microsoft.VisualStudio.Editors.PropertyPages.UserPropertyDescriptor.IsReadOnly() -> Boolean
Overrides Microsoft.VisualStudio.Editors.PropertyPages.UserPropertyDescriptor.PropertyType() -> System.Type
Overrides Microsoft.VisualStudio.Editors.PropertyPages.UserPropertyDescriptor.ResetValue(component As Object) -> Void
Overrides Microsoft.VisualStudio.Editors.PropertyPages.UserPropertyDescriptor.SetValue(component As Object, value As Object) -> Void
Overrides Microsoft.VisualStudio.Editors.PropertyPages.UserPropertyDescriptor.ShouldSerializeValue(component As Object) -> Boolean
Shared Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.CommandUIGuid() -> System.Guid (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.ApplicationDesigner.ApplicationDesignerEditorFactory.EditorGuid() -> System.Guid (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.DesignerFramework.SourceCodeControlManager.QueryEditableFiles(sp As System.IServiceProvider, files As System.Collections.Generic.List(Of String), throwOnFailure As Boolean, checkOnly As Boolean) -> Boolean
Shared Microsoft.VisualStudio.Editors.DesignerFramework.SourceCodeControlManager.QueryEditableFiles(sp As System.IServiceProvider, files As System.Collections.Generic.List(Of String), throwOnFailure As Boolean, checkOnly As Boolean, ByRef fileReloaded As Boolean, allowInMemoryEdits As Boolean = True, allowFileReload As Boolean = True) -> Boolean
Shared Microsoft.VisualStudio.Editors.DesignerFramework.SourceCodeControlManager.QuerySave(sp As System.IServiceProvider, files As System.Collections.Generic.List(Of String), throwOnFailure As Boolean) -> Boolean
Shared Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.CommandUIGuid() -> System.Guid (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerEditorFactory.EditorGuid() -> System.Guid (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropPageDesigner.PropPageDesignerRootDesigner.CommitAnyPendingChanges() -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.GetPropertyFromRunningPages(SourcePage As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase, dispid As Integer, ByRef obj As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetAllPropertyValuesNative(Descriptor As System.ComponentModel.PropertyDescriptor, Extenders As Object(), ByRef Values As Object(), ByRef ValueOrIndeterminate As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetCommonPropertyValue(Descriptor As System.ComponentModel.PropertyDescriptor, ProjectCommonPropertiesObject As Object) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetCommonPropertyValueNative(Descriptor As System.ComponentModel.PropertyDescriptor, ProjectCommonPropertiesObject As Object) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetNonCommonPropertyValueNative(Descriptor As System.ComponentModel.PropertyDescriptor, Extender As Object) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.GetValueOrIndeterminateFromArray(Values As Object()) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.HideOrDisableControls(Controls As System.Windows.Forms.Control(), Hide As Boolean) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.Indeterminate() -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.IsSpecialValue(Value As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.MissingProperty() -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.ObjectsAreEqual(Object1 As Object, Object2 As Object) -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.PropertyDescriptorSetValue(Descriptor As System.ComponentModel.PropertyDescriptor, Component As Object, Value As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.SetCommonPropertyValueNative(Descriptor As System.ComponentModel.PropertyDescriptor, Value As Object, ProjectCommonPropertiesObject As Object) -> Void (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyControlData.TryGetNonCommonPropertyValueNative(Descriptor As System.ComponentModel.PropertyDescriptor, Extenders As Object()) -> Object (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.PropertyListener.TryCreate(PropPage As Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase, EventSource As Object, DebugSourceName As String, ProjectHierarchy As Microsoft.VisualStudio.Shell.Interop.IVsHierarchy, ListenToInactiveConfigs As Boolean) -> Microsoft.VisualStudio.Editors.PropertyPages.PropertyListener (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsAcademic() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsEnterprise() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsExpress() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsProfessional() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsStandard() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsVB() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsVC() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.IsVSTO() -> Boolean (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.ProductSKU() -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.ProductSubSKU() -> Microsoft.VisualStudio.Editors.PropertyPages.VSProductSKU.VSASubSKUEdition (forwarded, contained in Microsoft.VisualStudio.AppDesigner)
Shared ReadOnly Microsoft.VisualStudio.Editors.PropertyPages.PropPageUserControlBase.PropPageBackColor -> System.Drawing.Color (forwarded, contained in Microsoft.VisualStudio.AppDesigner)Microsoft.VisualStudio.Editors.PropertyPages.CodeAnalysisPropPageComClass
Microsoft.VisualStudio.Editors.PropertyPages.CodeAnalysisPropPageComClass.New() -> Void
My.Resources.GeneralOptionPageResources
Shared My.Resources.GeneralOptionPageResources.Culture() -> System.Globalization.CultureInfo
Shared My.Resources.GeneralOptionPageResources.Culture(Value As System.Globalization.CultureInfo) -> Void
Shared My.Resources.GeneralOptionPageResources.General_FastUpToDateCheck() -> String
Shared My.Resources.GeneralOptionPageResources.General_FastUpToDateCheck_LogLevel() -> String
Shared My.Resources.GeneralOptionPageResources.General_FastUpToDateCheck_LogLevel_Info() -> String
Shared My.Resources.GeneralOptionPageResources.General_FastUpToDateCheck_LogLevel_Minimal() -> String
Shared My.Resources.GeneralOptionPageResources.General_FastUpToDateCheck_LogLevel_None() -> String
Shared My.Resources.GeneralOptionPageResources.General_FastUpToDateCheck_LogLevel_Verbose() -> String
Shared My.Resources.GeneralOptionPageResources.General_FastUpToDateCheck_Title() -> String
Shared My.Resources.GeneralOptionPageResources.ResourceManager() -> System.Resources.ResourceManagerThe colors from custom_vs_system3 were renamed as follows:


VSCOLOR_APPDESIGNER_BACKGROUND_LIGHT =  VSCOLOR_PROJECTDESIGNER_BACKGROUND_GRADIENTBEGIN
VSCOLOR_APPDESIGNER_BACKGROUND_DARK =  VSCOLOR_PROJECTDESIGNER_BACKGROUND_GRADIENTEND
VSCOLOR_APPDESIGNER_BORDER_OUTER = VSCOLOR_PROJECTDESIGNER_BORDER_OUTSIDE
VSCOLOR_APPDESIGNER_BORDER_INNER = VSCOLOR_PROJECTDESIGNER_BORDER_INSIDE
VSCOLOR_APPDESIGNER_TAB_BACKGROUND_START = VSCOLOR_PROJECTDESIGNER_TAB_BACKGROUND_GRADIENTBEGIN
VSCOLOR_APPDESIGNER_TAB_BACKGROUND_END = VSCOLOR_PROJECTDESIGNER_TAB_BACKGROUND_GRADIENTEND
VSCOLOR_APPDESIGNER_TAB_SEP_UPPER_START = VSCOLOR_PROJECTDESIGNER_TAB_SEP_TOP_GRADIENTBEGIN
VSCOLOR_APPDESIGNER_TAB_SEP_UPPER_END = VSCOLOR_PROJECTDESIGNER_TAB_SEP_TOP_GRADIENTEND
VSCOLOR_APPDESIGNER_TAB_SEP_LOWER_START = VSCOLOR_PROJECTDESIGNER_TAB_SEP_BOTTOM_GRADIENTBEGIN
VSCOLOR_APPDESIGNER_TAB_SEP_LOWER_END = VSCOLOR_PROJECTDESIGNER_TAB_SEP_BOTTOM_GRADIENTEND
VSCOLOR_APPDESIGNER_TAB_SELECTED_RIGHTBORDER = VSCOLOR_PROJECTDESIGNER_TAB_SELECTED_INSIDEBORDER
VSCOLOR_APPDESIGNER_TAB_SELECTED_OUTERBORDER = VSCOLOR_PROJECTDESIGNER_TAB_SELECTED_BORDER
VSCOLOR_APPDESIGNER_TAB_SELECTED_HIGHLIGHT1 = VSCOLOR_PROJECTDESIGNER_TAB_SELECTED_HIGHLIGHT1
VSCOLOR_APPDESIGNER_TAB_SELECTED_HIGHLIGHT2 = VSCOLOR_PROJECTDESIGNER_TAB_SELECTED_HIGHLIGHT2
VSCOLOR_APPDESIGNER_TAB_SELECTED_BACKGROUND = VSCOLOR_PROJECTDESIGNER_TAB_SELECTED_BACKGROUND
VSCOLOR_APPDESIGNER_INNERFRAME_BACKGROUND = VSCOLOR_PROJECTDESIGNER_CONTENTS_BACKGROUND

The original definitions of the custom colors relating to the project designer (see vswhidbey:312967):


VSCOLOR_APPDESIGNER_BACKGROUND_LIGHT
(all) System: Window

VSCOLOR_APPDESIGNER_BACKGROUND_DARK
(all) System: ControlLight

VSCOLOR_APPDESIGNER_BORDER_OUTER
Blue: 145,167,180
Olive: 166,161,166
Silver: 145,167,180
System: ControlDark

VSCOLOR_APPDESIGNER_BORDER_INNER
Blue: 131,151,162
Olive: 155,172,156
Silver: 131,151,162
System: ControlDark

VSCOLOR_APPDESIGNER_TAB_BACKGROUND_START
Blue: 255,255,255
Olive: 255,255,246
Silver: 255,255,255
System: Window

VSCOLOR_APPDESIGNER_TAB_BACKGROUND_END
Blue: 240,240,234
Olive: 242,236,219
Silver: 190,190,216
System: ControlLight

VSCOLOR_APPDESIGNER_TAB_SEP_UPPER_START
Blue: 255,255,255
Olive: 255,255,250
Silver: 255,255,255
System: Window

VSCOLOR_APPDESIGNER_TAB_SEP_UPPER_END
Blue: 248,248,245
Olive: 249,246,239
Silver: 230,230,237
System: Window

VSCOLOR_APPDESIGNER_TAB_SEP_LOWER_START
Blue: 239,238,232
Olive: 239,238,228
Silver: 217,217,225
System: InactiveBorder

VSCOLOR_APPDESIGNER_TAB_SEP_LOWER_END
Blue: 232,231,222
Olive: 233,229,216
Silver: 193,193,207
System: InactiveBorder

VSCOLOR_APPDESIGNER_TAB_SELECTED_RIGHTBORDER
Blue: 173,190,204
Olive: 207,211,194
Silver: 173,190,204
System: Control

VSCOLOR_APPDESIGNER_TAB_SELECTED_OUTERBORDER
Blue: 145,155,156
Olive: 145,155,156
Silver: 145,155,156
System: ControlDarkDark

VSCOLOR_APPDESIGNER_TAB_SELECTED_HIGHLIGHT1
Blue: 230,139,44
Olive: 207,114,37
Silver: 230,139,44
System: ControlDark

VSCOLOR_APPDESIGNER_TAB_SELECTED_HIGHLIGHT2
Blue: 255,199,60
Olive: 227,147,84
Silver: 255,199,60
System: Control

VSCOLOR_APPDESIGNER_TAB_SELECTED_BACKGROUND
(all) System: Window

VSCOLOR_APPDESIGNER_INNERFRAME_BACKGROUND
Blue: 248,246,240
Olive: 248,246,240
Silver: 243,243,244
System: ControlLight
const Microsoft.VisualStudio.ProjectSystem.Debug.UIProfilePropertyName.Arguments = "Arguments" -> string
const Microsoft.VisualStudio.ProjectSystem.Debug.UIProfilePropertyName.EnvironmentVariables = "EnvironmentVariables" -> string
const Microsoft.VisualStudio.ProjectSystem.Debug.UIProfilePropertyName.Executable = "Executable" -> string
const Microsoft.VisualStudio.ProjectSystem.Debug.UIProfilePropertyName.LaunchUrl = "LaunchUrl" -> string
const Microsoft.VisualStudio.ProjectSystem.Debug.UIProfilePropertyName.WorkingDirectory = "WorkingDirectory" -> string
Microsoft.VisualStudio.ProjectSystem.Configuration.IConfigurationDimensionDescriptionMetadataView
Microsoft.VisualStudio.ProjectSystem.Configuration.IConfigurationDimensionDescriptionMetadataView.DimensionName.get -> string[]
Microsoft.VisualStudio.ProjectSystem.Configuration.IConfigurationDimensionDescriptionMetadataView.IsVariantDimension.get -> bool[]
Microsoft.VisualStudio.ProjectSystem.Debug.IActiveDebugFrameworkServices
Microsoft.VisualStudio.ProjectSystem.Debug.IActiveDebugFrameworkServices.GetActiveDebuggingFrameworkPropertyAsync() -> System.Threading.Tasks.Task<string>
Microsoft.VisualStudio.ProjectSystem.Debug.IActiveDebugFrameworkServices.GetConfiguredProjectForActiveFrameworkAsync() -> System.Threading.Tasks.Task<Microsoft.VisualStudio.ProjectSystem.ConfiguredProject>
Microsoft.VisualStudio.ProjectSystem.Debug.IActiveDebugFrameworkServices.GetProjectFrameworksAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.List<string>>
Microsoft.VisualStudio.ProjectSystem.Debug.IActiveDebugFrameworkServices.SetActiveDebuggingFrameworkPropertyAsync(string activeFramework) -> System.Threading.Tasks.Task
Microsoft.VisualStudio.ProjectSystem.Debug.IDebugTokenReplacer
Microsoft.VisualStudio.ProjectSystem.Debug.IDebugTokenReplacer.ReplaceTokensInProfileAsync(Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile profile) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile>
Microsoft.VisualStudio.ProjectSystem.Debug.IDebugTokenReplacer.ReplaceTokensInStringAsync(string rawString, bool expandEnvironmentVars) -> System.Threading.Tasks.Task<string>
Microsoft.VisualStudio.ProjectSystem.Debug.IJsonSection
Microsoft.VisualStudio.ProjectSystem.Debug.IJsonSection.JsonSection.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.IJsonSection.SerializationType.get -> System.Type
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile.CommandLineArgs.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile.CommandName.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile.EnvironmentVariables.get -> System.Collections.Immutable.ImmutableDictionary<string, string>
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile.ExecutablePath.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile.LaunchBrowser.get -> bool
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile.LaunchUrl.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile.Name.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile.OtherSettings.get -> System.Collections.Immutable.ImmutableDictionary<string, object>
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile.WorkingDirectory.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettings
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettings.ActiveProfile.get -> Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettings.GetGlobalSetting(string settingsName) -> object
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettings.GlobalSettings.get -> System.Collections.Immutable.ImmutableDictionary<string, object>
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettings.Profiles.get -> System.Collections.Immutable.ImmutableList<Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile>
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider.ActiveProfile.get -> Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider.AddOrUpdateGlobalSettingAsync(string settingName, object settingContent) -> System.Threading.Tasks.Task
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider.AddOrUpdateProfileAsync(Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile profile, bool addToFront) -> System.Threading.Tasks.Task
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider.CurrentSnapshot.get -> Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettings
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider.LaunchSettingsFile.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider.RemoveGlobalSettingAsync(string settingName) -> System.Threading.Tasks.Task
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider.RemoveProfileAsync(string profileName) -> System.Threading.Tasks.Task
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider.SetActiveProfileAsync(string profileName) -> System.Threading.Tasks.Task
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider.SourceBlock.get -> System.Threading.Tasks.Dataflow.IReceivableSourceBlock<Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettings>
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider.UpdateAndSaveSettingsAsync(Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettings profiles) -> System.Threading.Tasks.Task
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider.WaitForFirstSnapshot(int timeout) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettings>
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider2
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsProvider2.GetLaunchSettingsFilePathAsync() -> System.Threading.Tasks.Task<string>
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsSerializationProvider
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsUIProvider
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsUIProvider.CommandName.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsUIProvider.CustomUI.get -> System.Windows.Controls.UserControl
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsUIProvider.FriendlyName.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsUIProvider.ProfileSelected(Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchSettings curSettings) -> void
Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettingsUIProvider.ShouldEnableProperty(string propertyName) -> bool
Microsoft.VisualStudio.ProjectSystem.Debug.IPersistOption
Microsoft.VisualStudio.ProjectSystem.Debug.IPersistOption.DoNotPersist.get -> bool
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.CommandLineArgs.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.CommandLineArgs.set -> void
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.CommandName.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.CommandName.set -> void
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.EnvironmentVariables.get -> System.Collections.Generic.Dictionary<string, string>
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.ExecutablePath.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.ExecutablePath.set -> void
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.LaunchBrowser.get -> bool
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.LaunchBrowser.set -> void
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.LaunchUrl.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.LaunchUrl.set -> void
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.Name.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.Name.set -> void
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.OtherSettings.get -> System.Collections.Generic.Dictionary<string, object>
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.ToLaunchProfile() -> Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.WorkingDirectory.get -> string
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile.WorkingDirectory.set -> void
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchSettings
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchSettings.ActiveProfile.get -> Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchSettings.ActiveProfile.set -> void
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchSettings.GlobalSettings.get -> System.Collections.Generic.Dictionary<string, object>
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchSettings.Profiles.get -> System.Collections.Generic.List<Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchProfile>
Microsoft.VisualStudio.ProjectSystem.Debug.IWritableLaunchSettings.ToLaunchSettings() -> Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchSettings
Microsoft.VisualStudio.ProjectSystem.Debug.IWritablePersistOption
Microsoft.VisualStudio.ProjectSystem.Debug.IWritablePersistOption.DoNotPersist.get -> bool
Microsoft.VisualStudio.ProjectSystem.Debug.IWritablePersistOption.DoNotPersist.set -> void
Microsoft.VisualStudio.ProjectSystem.Debug.UIProfilePropertyName
Microsoft.VisualStudio.ProjectSystem.Properties.IInterceptingPropertyValueProviderMetadata
Microsoft.VisualStudio.ProjectSystem.Properties.IInterceptingPropertyValueProviderMetadata.PropertyName.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Extensibility.IProjectExportProvider
Microsoft.VisualStudio.ProjectSystem.VS.Extensibility.IProjectExportProvider.GetExport<T>(string projectFilePath) -> T
Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependenciesChangedEventArgs
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependenciesChangedEventArgs.Changes.get -> Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependenciesChanges
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependenciesChangedEventArgs.DependenciesChangedEventArgs(Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IProjectDependenciesSubTreeProvider provider, string targetShortOrFullName, Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependenciesChanges changes, Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot catalogs, System.Collections.Immutable.IImmutableDictionary<Microsoft.VisualStudio.ProjectSystem.NamedIdentity, System.IComparable> dataSourceVersions) -> void
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependenciesChangedEventArgs.DependenciesChangedEventArgs(Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IProjectDependenciesSubTreeProvider provider, string targetShortOrFullName, Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependenciesChanges changes, System.Threading.CancellationToken token) -> void
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependenciesChangedEventArgs.Provider.get -> Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IProjectDependenciesSubTreeProvider
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependenciesChangedEventArgs.TargetShortOrFullName.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependenciesChangedEventArgs.Token.get -> System.Threading.CancellationToken
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependencyTreeFlags
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependenciesChanges
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependenciesChanges.AddedNodes.get -> System.Collections.Immutable.IImmutableList<Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel>
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependenciesChanges.RemovedNodes.get -> System.Collections.Immutable.IImmutableList<Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel>
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Caption.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.DependencyIDs.get -> System.Collections.Immutable.IImmutableList<string>
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.ExpandedIcon.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Flags.get -> Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Icon.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Id.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Implicit.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Name.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.OriginalItemSpec.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Path.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Priority.get -> int
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Properties.get -> System.Collections.Immutable.IImmutableDictionary<string, string>
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.ProviderType.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Resolved.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.SchemaItemType.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.SchemaName.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.TopLevel.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.UnresolvedExpandedIcon.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.UnresolvedIcon.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Version.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel.Visible.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IProjectDependenciesSubTreeProvider
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IProjectDependenciesSubTreeProvider.CreateRootDependencyNode() -> Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IDependencyModel
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IProjectDependenciesSubTreeProvider.DependenciesChanged -> System.EventHandler<Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependenciesChangedEventArgs>
Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.IProjectDependenciesSubTreeProvider.ProviderType.get -> string
const Microsoft.VisualStudio.ProjectSystem.Debug.UIProfilePropertyName.NativeDebugging = "NativeDebugging" -> string
const Microsoft.VisualStudio.ProjectSystem.Debug.UIProfilePropertyName.SqlDebugging = "SQLDebugging" -> string
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.ApplicationPrivate.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.ApplicationWarning.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.CodeInformationPrivate.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.CodeInformationWarning.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.Component.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.ComponentPrivate.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.ComponentWarning.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.ErrorSmall.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.Framework.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.FrameworkPrivate.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.FrameworkWarning.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.LibraryWarning.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.NuGetGrey.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.NuGetGreyPrivate.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.NuGetGreyWarning.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.ProjectImports.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.ReferenceGroup.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.ReferenceGroupWarning.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.ReferencePrivate.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.Sdk.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.SdkPrivate.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.SdkWarning.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.SharedProject.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.SharedProjectPrivate.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.SharedProjectWarning.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.TargetFile.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.TargetFilePrivate.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static Microsoft.VisualStudio.ProjectSystem.VS.ManagedImageMonikers.WarningSmall.get -> Microsoft.VisualStudio.Imaging.Interop.ImageMoniker
static readonly Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependencyTreeFlags.BaseReferenceFlags -> Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags
static readonly Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependencyTreeFlags.DependencyFlags -> Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags
static readonly Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependencyTreeFlags.ResolvedDependencyFlags -> Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags
static readonly Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependencyTreeFlags.ShowEmptyProviderRootNode -> Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags
static readonly Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependencyTreeFlags.SupportsHierarchy -> Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags
static readonly Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependencyTreeFlags.SupportsRemove -> Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags
static readonly Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.DependencyTreeFlags.UnresolvedDependencyFlags -> Microsoft.VisualStudio.ProjectSystem.ProjectTreeFlags// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

using System.ComponentModel.Composition;

namespace Microsoft.VisualStudio.ProjectSystem.SpecialFileProviders
{
    /// <summary>
    ///     Provides a <see cref="ISpecialFileProvider"/> that handles the 'licenses.licx' file; 
    ///     a file that contains a list of licensed (typically Windows Forms) components used by
    ///     a project and is typically found under the 'AppDesigner' folder.
    /// </summary>
    [ExportSpecialFileProvider(SpecialFiles.Licenses)]
    [AppliesTo(ProjectCapability.DotNet)]
    internal class LicensesSpecialFileProvider : AbstractFindByNameUnderAppDesignerSpecialFileProvider
    {
        [ImportingConstructor]
        public LicensesSpecialFileProvider(ISpecialFilesManager specialFilesManager, IPhysicalProjectTree projectTree)
            : base("licenses.licx", specialFilesManager, projectTree)
        {
        }
    }
}
const Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.ProfileCommandNames.Executable = "Executable" -> string
const Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.ProfileCommandNames.IISExpress = "IISExpress" -> string
const Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.ProfileCommandNames.NoAction = "NoAction" -> string
const Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.ProfileCommandNames.Project = "Project" -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.__id.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.__project.get -> object
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AbsoluteProjectDirectory.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.ActiveConfigurationSettings.get -> VSLangProj.ProjectConfigurationProperties
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.ActiveFileSharePath.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.ActiveWebAccessMethod.get -> VSLangProj.prjWebAccessMethod
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AddWebReference(string bstrUrl) -> EnvDTE.ProjectItem
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.ApplicationIcon.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.ApplicationIcon.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AssemblyKeyContainerName.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AssemblyKeyContainerName.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AssemblyName.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AssemblyName.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AssemblyOriginatorKeyFile.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AssemblyOriginatorKeyFile.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AssemblyOriginatorKeyMode.get -> VSLangProj.prjOriginatorKeyMode
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AssemblyOriginatorKeyMode.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AutoGenerateBindingRedirects.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.AutoGenerateBindingRedirects.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.BuildManager.get -> VSLangProj.BuildManager
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.CopyProject(string bstrDestFolder, string bstrDestUNCPath, VSLangProj.prjCopyProjectOption copyProjectOption, string bstrUsername, string bstrPassword) -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.CreateWebReferencesFolder() -> EnvDTE.ProjectItem
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.DefaultClientScript.get -> VSLangProj.prjScriptLanguage
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.DefaultClientScript.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.DefaultHTMLPageLayout.get -> VSLangProj.prjHTMLPageLayout
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.DefaultHTMLPageLayout.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.DefaultNamespace.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.DefaultNamespace.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.DefaultTargetSchema.get -> VSLangProj.prjTargetSchema
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.DefaultTargetSchema.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.DelaySign.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.DelaySign.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.DTE.get -> EnvDTE.DTE
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.EnumConnectionPoints(out Microsoft.VisualStudio.OLE.Interop.IEnumConnectionPoints ppEnum) -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.Events.get -> VSLangProj.VSProjectEvents
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.Exec(VSLangProj.prjExecCommand command, int bSuppressUI, object varIn, out object pVarOut) -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.ExtenderCATID.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.ExtenderNames.get -> object
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.FileName.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.FileName.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.FileSharePath.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.FileSharePath.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.FindConnectionPoint(ref System.Guid riid, out Microsoft.VisualStudio.OLE.Interop.IConnectionPoint ppCP) -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.FullPath.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.GenerateKeyPairFiles(string strPublicPrivateFile, string strPublicOnlyFile = "0") -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.get_Extender(string ExtenderName) -> object
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.GetUniqueFilename(object pDispatch, string bstrRoot, string bstrDesiredExt) -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.Imports.get -> VSLangProj.Imports
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.LinkRepair.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.LinkRepair.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.LocalPath.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OfflineURL.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OnSinkAdded(Microsoft.VisualStudio.OLE.Interop.IPropertyNotifySink sink) -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OnSinkRemoved(Microsoft.VisualStudio.OLE.Interop.IPropertyNotifySink sink) -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OptionCompare.get -> VSLangProj.prjCompare
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OptionCompare.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OptionExplicit.get -> VSLangProj.prjOptionExplicit
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OptionExplicit.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OptionStrict.get -> VSLangProj.prjOptionStrict
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OptionStrict.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OutputFileName.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OutputType.get -> VSLangProj.prjOutputType
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OutputType.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OutputTypeEx.get -> VSLangProj110.prjOutputTypeEx
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.OutputTypeEx.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.Project.get -> EnvDTE.Project
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.ProjectType.get -> VSLangProj.prjProjectType
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.ReferencePath.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.ReferencePath.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.References.get -> VSLangProj.References
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.Refresh() -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.RootNamespace.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.RootNamespace.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.ServerExtensionsVersion.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.StartupObject.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.StartupObject.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.TemplatePath.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.URL.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.WebAccessMethod.get -> VSLangProj.prjWebAccessMethod
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.WebAccessMethod.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.WebReferencesFolder.get -> EnvDTE.ProjectItem
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.WebServer.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.WebServerVersion.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.WorkOffline.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Automation.VSProject.WorkOffline.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.ConnectionPoint.ConnectionPointContainer
Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugProfileLaunchTargetsProvider
Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugProfileLaunchTargetsProvider.OnAfterLaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions launchOptions, Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile profile) -> System.Threading.Tasks.Task
Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugProfileLaunchTargetsProvider.OnBeforeLaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions launchOptions, Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile profile) -> System.Threading.Tasks.Task
Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugProfileLaunchTargetsProvider.QueryDebugTargetsAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions launchOptions, Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile profile) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings>>
Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugProfileLaunchTargetsProvider.SupportsProfile(Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile profile) -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugProfileLaunchTargetsProvider2
Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugProfileLaunchTargetsProvider2.QueryDebugTargetsForDebugLaunchAsync(Microsoft.VisualStudio.ProjectSystem.Debug.DebugLaunchOptions launchOptions, Microsoft.VisualStudio.ProjectSystem.Debug.ILaunchProfile profile) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.ProjectSystem.VS.Debug.IDebugLaunchSettings>>
Microsoft.VisualStudio.ProjectSystem.VS.LanguageServices.IVsContainedLanguageComponentsFactory
Microsoft.VisualStudio.ProjectSystem.VS.LanguageServices.IVsContainedLanguageComponentsFactory.GetContainedLanguageFactoryForFile(string filePath, out Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy, out uint itemid, out Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageFactory containedLanguageFactory) -> int
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.__id.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.AllowUnsafeBlocks.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.AllowUnsafeBlocks.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.BaseAddress.get -> uint
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.BaseAddress.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CheckForOverflowUnderflow.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CheckForOverflowUnderflow.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisCulture.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisCulture.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisDictionaries.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisDictionaries.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisFailOnMissingRules.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisFailOnMissingRules.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisIgnoreBuiltInRules.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisIgnoreBuiltInRules.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisIgnoreBuiltInRuleSets.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisIgnoreBuiltInRuleSets.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisIgnoreGeneratedCode.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisIgnoreGeneratedCode.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisInputAssembly.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisInputAssembly.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisLogFile.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisLogFile.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisModuleSuppressionsFile.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisModuleSuppressionsFile.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisOverrideRuleVisibilities.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisOverrideRuleVisibilities.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisRuleAssemblies.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisRuleAssemblies.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisRuleDirectories.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisRuleDirectories.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisRules.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisRules.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisRuleSet.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisRuleSet.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisRuleSetDirectories.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisRuleSetDirectories.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisSpellCheckLanguages.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisSpellCheckLanguages.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisUseTypeNameInSuppression.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.CodeAnalysisUseTypeNameInSuppression.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.ConfigurationOverrideFile.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.ConfigurationOverrideFile.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DebugInfo.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DebugInfo.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DebugSymbols.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DebugSymbols.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DefineConstants.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DefineConstants.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DefineDebug.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DefineDebug.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DefineTrace.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DefineTrace.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DocumentationFile.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.DocumentationFile.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.EnableASPDebugging.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.EnableASPDebugging.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.EnableASPXDebugging.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.EnableASPXDebugging.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.EnableSQLServerDebugging.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.EnableSQLServerDebugging.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.EnableUnmanagedDebugging.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.EnableUnmanagedDebugging.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.ExtenderCATID.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.ExtenderNames.get -> object
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.FileAlignment.get -> uint
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.FileAlignment.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.GenerateSerializationAssemblies.get -> VSLangProj80.sgenGenerationOption
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.GenerateSerializationAssemblies.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.get_Extender(string arg) -> object
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.IncrementalBuild.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.IncrementalBuild.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.IntermediatePath.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.IntermediatePath.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.LanguageVersion.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.LanguageVersion.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.NoStdLib.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.NoStdLib.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.NoWarn.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.NoWarn.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.Optimize.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.Optimize.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.OutputPath.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.OutputPath.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.PlatformTarget.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.PlatformTarget.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.Prefer32Bit.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.Prefer32Bit.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.RegisterForComInterop.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.RegisterForComInterop.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.RemoteDebugEnabled.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.RemoteDebugEnabled.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.RemoteDebugMachine.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.RemoteDebugMachine.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.RemoveIntegerChecks.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.RemoveIntegerChecks.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.RunCodeAnalysis.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.RunCodeAnalysis.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartAction.get -> VSLangProj.prjStartAction
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartAction.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartArguments.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartArguments.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartPage.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartPage.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartProgram.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartProgram.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartURL.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartURL.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartWithIE.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartWithIE.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartWorkingDirectory.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.StartWorkingDirectory.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.TreatSpecificWarningsAsErrors.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.TreatSpecificWarningsAsErrors.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.TreatWarningsAsErrors.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.TreatWarningsAsErrors.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.UseVSHostingProcess.get -> bool
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.UseVSHostingProcess.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.WarningLevel.get -> VSLangProj.prjWarningLevel
Microsoft.VisualStudio.ProjectSystem.VS.Properties.AbstractProjectConfigurationProperties.WarningLevel.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.GetProfileNameDialog
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.GetProfileNameDialog.GetProfileNameDialog(Microsoft.VisualStudio.Shell.SVsServiceProvider sp, Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService threadingService, string suggestedName, System.Predicate<string> validator) -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.GetProfileNameDialog.InitializeComponent() -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.GetProfileNameDialog.ProfileName.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.GetProfileNameDialog.ProfileName.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.ProfileCommandNames
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.Activate(System.IntPtr hWndParent, Microsoft.VisualStudio.OLE.Interop.RECT[] pRect, int bModal) -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.Apply() -> int
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.ContextObjects.get -> System.Collections.Generic.List<Microsoft.VisualStudio.ProjectSystem.Properties.IVsBrowseObjectContext>
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.Deactivate() -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.GetPageInfo(Microsoft.VisualStudio.OLE.Interop.PROPPAGEINFO[] pPageInfo) -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.Help(string pszHelpDir) -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.IsPageDirty() -> int
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.Move(Microsoft.VisualStudio.OLE.Interop.RECT[] pRect) -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.OnModeChange(Microsoft.VisualStudio.Shell.Interop.DBGMODE dbgmodeNew) -> int
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.SetObjects(uint cObjects, object[] ppunk) -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.SetPageSite(Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite pPageSite) -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.Show(uint nCmdShow) -> void
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[] pMsg) -> int
Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources
Microsoft.VisualStudio.ProjectSystem.VS.Utilities.FocusAttacher
Microsoft.VisualStudio.ProjectSystem.VS.Utilities.FocusAttacher.FocusAttacher() -> void
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.GetProfileNameDialog.DialogCaption.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.AddBtn.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.AllFiles.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ApplicationArguments.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ApplicationArgumentsWatermark.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.BrowseBtn.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.CancelBtn.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.Culture.get -> System.Globalization.CultureInfo
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.Culture.set -> void
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.DebugPropertyPageTitle.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.DeleteBtn.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.DuplicateKey.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.EnvironmentVariables.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.EnvVariableNameWatermark.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.EnvVariableValueWatermark.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ErrorsMustBeCorrectedPriorToSaving.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.Executable.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ExecutableFiles.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ExecutablePathWatermark.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.Launch.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.LaunchURL.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.LaunchUrlWatermark.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.NameCannotBeEmpty.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.NameHeader.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.NewBtn.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.NewProfileCaption.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.NewProfileSeedName.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.OKBtn.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.Profile.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ProfileKindExecutableName.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ProfileKindIISExpressName.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ProfileKindNoActionName.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ProfileKindProjectName.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ProfileName.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ProfileNameInvalid.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ProfileNameRequired.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.RemoveBtn.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ResourceManager.get -> System.Resources.ResourceManager
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ValueCannotBeEmpty.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.ValueHeader.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.WorkingDirectory.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.WorkingDirectoryWatermark.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.Utilities.FocusAttacher.GetFocus(System.Windows.DependencyObject d) -> bool
static Microsoft.VisualStudio.ProjectSystem.VS.Utilities.FocusAttacher.SetFocus(System.Windows.DependencyObject d, bool value) -> void
static readonly Microsoft.VisualStudio.ProjectSystem.VS.Utilities.FocusAttacher.FocusProperty -> System.Windows.DependencyProperty
XamlGeneratedNamespace.GeneratedInternalTypeHelper
XamlGeneratedNamespace.GeneratedInternalTypeHelper.GeneratedInternalTypeHelper() -> voidMicrosoft.VisualStudio.ProjectSystem.VS.Properties.CSharp.CSharpProjectConfigurationProperties
Microsoft.VisualStudio.ProjectSystem.VS.Properties.CSharp.CSharpProjectConfigurationProperties.ErrorReport.get -> string
Microsoft.VisualStudio.ProjectSystem.VS.Properties.CSharp.CSharpProjectConfigurationProperties.ErrorReport.set -> void
Microsoft.VisualStudio.ProjectSystem.VS.Properties.VisualBasic.VisualBasicProjectConfigurationProperties
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.CancelBtnHelpText.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.DeleteBtnHelpText.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.NewBtnHelpText.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.OKBtnHelpText.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.chkLaunchBrowserHelpText.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.chkNativeCodeDebuggingText.get -> string
static Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPageResources.chkSqlCodeDebuggingText.get -> stringTo avoid tests copying the same binaries to the common build directory and causing races, this
project is used to copy and deploy all the required product, xUnit and Moq binaries required
to run all the project system tests.

When adding new dependencies, reference them from this project.// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

namespace Microsoft.VisualStudio.ProjectSystem.SpecialFileProviders
{
    public class LicensesSpecialFileProviderTests : AbstractFindByNameUnderAppDesignerSpecialFileProviderTestBase
    {
        public LicensesSpecialFileProviderTests()
            : base("licenses.licx")
        {
        }

        internal override AbstractFindByNameUnderAppDesignerSpecialFileProvider CreateInstance(ISpecialFilesManager specialFilesManager, IPhysicalProjectTree projectTree)
        {
            return new LicensesSpecialFileProvider(specialFilesManager, projectTree);
        }
    }
}
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     A <see cref="RegistrationAttribute"/> that provides code-base binding redirects.
/// </summary>
// ProvideBindingRedirectionAttribute is sealed, so we can't inherit from it to provide defaults.
// Instead, we'll do more of an aggregation pattern here.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// These provide code-base binding redirects for the assemblies we provide in this VSIX. For NGEN purposes,
// we also need to update src/appid/devenv/stub/devenv.urt.config.tt inside VS repo, which is done automatically 
// via the Roslyn Insertion tool when it consumes artifacts\Debug\DevDivInsertionFiles\DependentAssemblyVersions.csv.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// These provide code-base binding redirects for the assemblies we provide in this VSIX. For NGEN purposes,
// we also need to update src/appid/devenv/stub/devenv.urt.config.tt inside VS repo, which is done automatically 
// via the Roslyn Insertion tool when it consumes artifacts\Debug\DevDivInsertionFiles\DependentAssemblyVersions.csv.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
/// <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
/// <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
/// <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
/// <summary>Specifies that when a method returns <see cref="ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
/// <summary>Initializes the attribute with the specified return value condition.</summary>
/// <param name="returnValue">
/// The return value condition. If the method returns this value, the associated parameter may be null.
/// </param>
/// <summary>Gets the return value condition.</summary>
/// <summary>Specifies that when a method returns <see cref="ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
/// <summary>Initializes the attribute with the specified return value condition.</summary>
/// <param name="returnValue">
/// The return value condition. If the method returns this value, the associated parameter will not be null.
/// </param>
/// <summary>Gets the return value condition.</summary>
/// <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
/// <summary>Initializes the attribute with the associated parameter name.</summary>
/// <param name="parameterName">
/// The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
/// </param>
/// <summary>Gets the associated parameter name.</summary>
/// <summary>Applied to a method that will never return under any circumstance.</summary>
/// <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
/// <summary>Initializes the attribute with the specified parameter value.</summary>
/// <param name="parameterValue">
/// The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
/// the associated parameter matches this value.
/// </param>
/// <summary>Gets the condition parameter value.</summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides <see langword="static"/> extensions for <see cref="IComparable"/> instances.
/// </summary>
/// <summary>
///     Returns a value indicating whether the current instance is later than the 
///     specified <see cref="IComparable"/> instance.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="comparable"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Returns a value indicating whether the current instance is later than or 
///     equal to the specified <see cref="IComparable"/> instance.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="comparable"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Returns a value indicating whether the current instance is earlier than the 
///     specified <see cref="IComparable"/> instance.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="comparable"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Returns a value indicating whether the current instance is earlier than or equal
///     to the specified <see cref="IComparable"/> instance.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="comparable"/> is <see langword="null"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Contains commonly-used delimiters used for splitting <see cref="string"/> instances.
/// </summary>
/// <summary>
/// Single, static instance of an array that contains a comma ',', which is used to split strings.
/// </summary>
/// <summary>
/// Single, static instance of an array that contains a period '.', which is used to split strings.
/// </summary>
/// <summary>
/// Single, static instance of an array that contains a semi-colon ';', which is used to split strings.
/// </summary>
/// <summary>
/// Single, static instance of an array that contains a forward slash '/', which is used to split strings.
/// </summary>
/// <summary>
/// Single, static instance of an array that contains a back slash '\', which is used to split strings.
/// </summary>
/// <summary>
/// Single, static instance of an array that contains '+' and '-' characters.
/// </summary>
/// <summary>
/// Single, static instance of an array that contains platform-specific path separators
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//github.com/Microsoft/vs-threading/issues/377", Scope = "member", Target = "~M:Microsoft.VisualStudio.ProjectSystem.ThreadingExtensions.SwitchToUIThread(Microsoft.VisualStudio.ProjectSystem.IProjectThreadingService,System.Threading.CancellationToken)~Microsoft.VisualStudio.Threading.JoinableTaskFactory.MainThreadAwaitable")]
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Most (all?) immutable collections provide non-allocating enumerators.
//
// This class provides replacements for common linq-like extension methods
// that don't box to IEnumerable<T> and can therefore avoid allocation.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Check all remaining items to ensure there is only a single match
/// <summary>
///     Returns distinct elements from a sequence by using a specified key selector and <see cref="IEqualityComparer{T}"/> to compare values.
/// </summary>
// Avoid allocating unless needed
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
/// <summary>
///   Overrides the current thread's CurrentUICulture property for all
///   resource lookups using this strongly typed resource class.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Analyzers.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Assemblies.
/// </summary>
/// <summary>
///   Looks up a localized string similar to COM.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Dependencies.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Framework Assemblies.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Frameworks.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Imports.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Errors in &apos;{0}&apos; need to be corrected before applying changes..
/// </summary>
/// <summary>
///   Looks up a localized string similar to The specified value to remove &apos;{0}&apos; was not present in the property &apos;{1}&apos;.
/// </summary>
/// <summary>
///   Looks up a localized string similar to The specified value to rename &apos;{0}&apos; was not present in the property &apos;{1}&apos;.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Start.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Contains all the assemblies needed when publishing a .NET Core project..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Publish Items.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Packages.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Projects.
/// </summary>
/// <summary>
///   Looks up a localized string similar to SDK.
/// </summary>
/// <summary>
///   Looks up a localized string similar to A file or folder with the name &apos;{0}&apos; already exists on disk at this location. Please choose another name.
///
///If this file or folder does not appear in Solution Explorer, then it is not currently part of your project. To view files which exist on disk, but are not in the project, select Show All Files from the Project menu..
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Do not used banned APIs (this is the replacement)
/// <summary>
///     Contains commonly used <see cref="IEqualityComparer{String}"/> instances.
/// </summary>
/// <remarks>
///     Mirrors values in <see cref="StringComparisons"/>.
/// </remarks>
/// <summary>
///     Contains commonly used <see cref="StringComparison"/> instances.
/// </summary>
/// <remarks>
///     Mirrors values in <see cref="StringComparers"/>.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an object that allows a common way to format a set of objects, only allocating if needed.
/// </summary>
// Sentinel fixed-length arrays eliminate the need for a "count" field keeping this
// struct down to just 4 fields. These are only used for their "Length" property,
// that is, their elements are never set or referenced.
// Making sure we call through the non-params array version of String.Format 
// where possible to avoid "params" array allocation.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Gets the unescaped, unevaluated value.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="element"/> is <see langword="null" />.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Utility class to manipulate MsBuild projects.
/// </summary>
/// <summary>
///     Returns a value indicating whether the specified property has a condition that 
///     always evaluates to <see langword="true"/>.
/// </summary>
// We look for known conditions that evaluate to true so that 
// projects can have patterns where they opt in/out of target 
// frameworks based on whether they are inside Visual Studio or not.
// For example:
// 
// <TargetFrameworks>net461;net452</TargetFrameworks>
// <TargetFrameworks Condition = "'$(BuildingInsideVisualStudio)' == 'true'">net461</TargetFrameworks>
/// <summary>
/// Gets a project property.
/// </summary>
/// <param name="project">Xml representation of the MsBuild project.</param>
/// <param name="propertyName">Name of the property.</param>
/// <returns>Requested project property. Null if the property is not present.</returns>
/// <summary>
/// Gets the individual values of a delimited property.
/// </summary>
/// <param name="propertyValue">Value of the property to evaluate.</param>
/// <param name="delimiter">Character used to delimit the property values.</param>
/// <returns>Collection of individual values in the property.</returns>
// We need to ensure that we return values in the specified order.
/// <summary>
/// Appends a value to a delimited property. If the property does not exist it will be added.
/// </summary>
/// <param name="project">Xml representation of the MsBuild project.</param>
/// <param name="evaluatedPropertyValue">Original evaluated value of the property.</param>
/// <param name="propertyName">Property name.</param>
/// <param name="valueToAppend">Value to add to the property.</param>
/// <param name="delimiter">Character used to delimit the property values.</param>
/// <summary>
/// Renames a value inside a delimited property.
/// </summary>
/// <param name="project">Xml representation of the MsBuild project.</param>
/// <param name="evaluatedPropertyValue">Original evaluated value of the property.</param>
/// <param name="propertyName">Property name.</param>
/// <param name="valueToRemove">Value to remove from the property.</param>
/// <param name="delimiter">Character used to delimit the property values.</param>
/// <remarks>
/// If the property is not present it will be added. This means that the evaluated property
/// value came from one of the project imports.
/// </remarks>
/// <summary>
/// Renames a value inside a delimited property.
/// </summary>
/// <param name="project">Xml representation of the MsBuild project.</param>
/// <param name="evaluatedPropertyValue">Original evaluated value of the property.</param>
/// <param name="propertyName">Property name.</param>
/// <param name="oldValue">Current property value.</param>
/// <param name="newValue">New property value.</param>
/// <param name="delimiter">Character used to delimit the property values.</param>
/// <remarks>
/// If the property is not present it will be added. This means that the evaluated property
/// value came from one of the project imports.
/// </remarks>
/// <summary>
/// Adds a property to the first property group. If there are no property groups it will create one.
/// </summary>
/// <param name="project">Xml representation of the MsBuild project.</param>
/// <param name="propertyName">Property name.</param>
/// <summary>
///     Returns a value indicating if the specified <see cref="ProjectItemInstance"/>
///     originated in an imported file.
/// </summary>
/// <returns>
///     <see langword="true"/> if <paramref name="item"/> originated in an imported file;
///     otherwise, <see langword="false"/> if it was defined in the project being built.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="item"/> is <see langword="null"/>.
/// </exception>
// NOTE: This returns project being built, not owning target
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides simple dictionary equality checks.
/// </summary>
/// <typeparam name="TKey">The type of key in the dictionaries to compare.</typeparam>
/// <typeparam name="TValue">The type of value in the dictionaries to compare.</typeparam>
/// <summary>
/// Backing field for the <see cref="Instance"/> static property.
/// </summary>
/// <summary>
/// Initializes a new instance of the DictionaryEqualityComparer class.
/// </summary>
/// <summary>
/// Gets a dictionary equality comparer instance appropriate for dictionaries that use the default key comparer for the <typeparamref name="TKey"/> type.
/// </summary>
/// <summary>
/// Checks two dictionaries for equality.
/// </summary>
/// <summary>
/// Calculates a hash code for a dictionary.
/// </summary>
/// <summary>
/// Tests two dictionaries to see if their contents are identical.
/// </summary>
/// <summary>
/// Tests two dictionaries to see if their contents are identical.
/// </summary>
// both dictionaries are empty, so bail out early to avoid
// allocating an IEnumerator.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Produces the sequence of imports within a <see cref="OrderPrecedenceImportCollection{T}"/>,
/// omitting any that throw MEF exceptions.
/// </summary>
/// <typeparam name="T">The type of import.</typeparam>
/// <param name="extensions">The collection of imports.</param>
/// <param name="onlyCreatedValues">
/// <c>true</c> to only enumerate imports whose values have previously been created.
/// This is useful in <see cref="IDisposable.Dispose"/> methods to avoid MEF
/// <see cref="ObjectDisposedException"/> from accidentally creating values during a container disposal.
/// </param>
/// <returns>The safely constructed sequence of extensions.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents the Win32 error code for ERROR_FILE_EXISTS.
/// </summary>
/// <summary>
///     Returns a HRESULT representing the specified Win32 error code.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides static methods for the creation, copying, deletion, moving of files and directories.
/// </summary>
/// <summary>
///     Returns a name suitable for usage as a file or directory name.
/// </summary>
/// <returns>
///     A <see cref="string"/> containing a name suitable for usage as a file or directory name.
/// </returns>
/// <remarks>
///     NOTE: Unlike <see cref="Path.GetTempFileName"/>, this method does not create a zero byte file on disk.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Helpful Path operations that are repeating in several places.
/// We need to ask to make these API public in CPS's PathHelper.
/// </summary>
/// <summary>
/// Tests a path to see if it is absolute or not. More reliable than <see cref="System.IO.Path.IsPathRooted"/>.
/// </summary>
/// <param name="path"></param>
// We don't use System.IO.Path.IsPathRooted because it doesn't support
// URIs, and because it returns true for paths like "\dir\file", which is
// relative to whatever drive we're talking about.
/// <summary>
/// Makes the specified path absolute if possible, otherwise return an empty string.
/// </summary>
/// <param name="basePath">The path used as the root if <paramref name="path"/> is relative.</param>
/// <param name="path">An absolute or relative path.</param>
/// <returns>An absolute path, or the empty string if <paramref name="path"/> invalid.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Simple wrapper around the FileSystemWatcher.
/// </summary>
// For unit tests
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IFileSystem"/> that calls through the <see cref="Directory"/>
///     and <see cref="File"/> classes, and ultimately through Win32 APIs.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Generic implementation of object pooling pattern with predefined pool size limit. The main
/// purpose is that limited number of frequently used objects can be kept in the pool for
/// further recycling.
/// 
/// Notes: 
/// 1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
///    is no space in the pool, extra returned objects will be dropped.
/// 
/// 2) it is implied that if object was obtained from a pool, the caller will return it back in
///    a relatively short time. Keeping checked out objects for long durations is ok, but 
///    reduces usefulness of pooling. Just new up your own.
/// 
/// Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice. 
/// Rationale: 
///    If there is no intent for reusing the object, do not use pool - just use "new". 
/// </summary>
// Storage for the pool objects. The first item is stored in a dedicated field because we
// expect to be able to satisfy most requests from it.
// factory is stored for the lifetime of the pool. We will call this only when pool needs to
// expand. compared to "new T()", Func gives more flexibility to implementers and faster
// than "new T()".
/// <summary>
/// Produces an instance.
/// </summary>
/// <remarks>
/// Search strategy is a simple linear probing which is chosen for it cache-friendliness.
/// Note that Free will try to store recycled objects close to the start thus statistically 
/// reducing how far we will typically search.
/// </remarks>
// PERF: Examine the first element. If that fails, AllocateSlow will look at the remaining elements.
// Note that the initial read is optimistically not synchronized. That is intentional. 
// We will interlock only when we have a candidate. in a worst case we may miss some
// recently returned objects. Not a big deal.
// Note that the initial read is optimistically not synchronized. That is intentional. 
// We will interlock only when we have a candidate. in a worst case we may miss some
// recently returned objects. Not a big deal.
/// <summary>
/// Returns objects to the pool.
/// </summary>
/// <remarks>
/// Search strategy is a simple linear probing which is chosen for it cache-friendliness.
/// Note that Free will try to store recycled objects close to the start thus statistically 
/// reducing how far we will typically search in Allocate.
/// </remarks>
// Intentionally not using interlocked here. 
// In a worst case scenario two objects may be stored into same slot.
// It is very unlikely to happen and will only mean that one of the objects will get collected.
// Intentionally not using interlocked here. 
// In a worst case scenario two objects may be stored into same slot.
// It is very unlikely to happen and will only mean that one of the objects will get collected.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Realizes the array.
/// </summary>
/// <summary>
/// Write <paramref name="value"/> to slot <paramref name="index"/>. 
/// Fills in unallocated slots preceding the <paramref name="index"/>, if any.
/// </summary>
/// <summary>
/// Realizes the array.
/// </summary>
/// <summary>
/// Realizes the array, downcasting each element to a derived type.
/// </summary>
/// <summary>
/// Realizes the array and disposes the builder in one operation.
/// </summary>
// To implement Poolable, you need two things:
// 1) Expose Freeing primitive. 
// We do not want to retain (potentially indefinitely) very large builders 
// while the chance that we will need their size is diminishingly small.
// It makes sense to constrain the size to some "not too small" number. 
// Overall perf does not seem to be very sensitive to this number, so I picked 128 as a limit.
// 2) Expose the pool or the way to create a pool or the way to get an instance.
//    for now we will expose both and figure which way works better
// We use a default size of 128 objects in the pool
// This makes it likely that we can handle all use cases
// even if many consumers require objects from the pool
// in practice we expect 128 allocated objects in the pool
// to be rare.  A normal operating set should be around 10.
// bucketize
// prevent reallocation. it may not have 'count' entries, but it won't have more. 
// freeze
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// struct enumerator used in foreach.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Dictionary that can be recycled via an object pool
// NOTE: these dictionaries always have the default comparer.
// global pool
// if someone needs to create a pool;
// Debug.Assert(instance.Count == 0);
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// HashSet that can be recycled via an object pool
// NOTE: these HashSets always have the default comparer.
// global pool
// if someone needs to create a pool;
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// The usage is:
///        var sb = PooledStringBuilder.GetInstance();
///        ... Do Stuff...
///        sb.ToStringAndFree()
/// </summary>
// do not store builders that are too large.
// global pool
/// <summary>
/// If someone need to create a private pool
/// </summary>
/// <param name="size">The size of the pool.</param>
//Debug.Assert(builder.Builder.Length == 0);
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Base class for producing items so that they can be watched, and when changed, trigger re-evaluation.
/// </summary>
// Transform the changes from evaluation -> FileWatchData
// Set the link up so that we publish changes to target block
// Join the source blocks, so if they need to switch to UI thread to complete 
// and someone is blocked on us on the same thread, the call proceeds
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     An <see langword="abstract"/> base class that simplifies the lifetime of 
///     a component that is loaded and unloaded multiple times.
/// </summary>
/// <summary>
///     Returns a task that will complete when current <see cref="AbstractMultiLifetimeComponent{T}"/> has completed
///     loading and has published its instance.
/// </summary>
/// <exception cref="OperationCanceledException">
///     The result is awaited and the <see cref="ConfiguredProject"/> is unloaded.
///     <para>
///         -or
///     </para>
///     The result is awaited and <paramref name="cancellationToken"/> is cancelled.
/// </exception>
/// <remarks>
///     This method does not initiate loading of the <see cref="AbstractMultiLifetimeComponent{T}"/>, however,
///     it will join the load when it starts.
/// </remarks>
// Wait until LoadAsync has been called, force switching to thread-pool in case
// there's already someone waiting for us on the UI thread.
// Do not used banned APIs
// Now join Instance.InitializeAsync so that if someone is waiting on the UI thread for us, 
// the instance is allowed to switch to that thread to complete if needed.
// Should throw TaskCanceledException if already cancelled in Dispose
// Should throw TaskCanceledException if already cancelled in Dispose
/// <summary>
///     Creates a new instance of the underlying <see cref="IMultiLifetimeInstance"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents a set of ordered active configured objects, such as <see cref="ConfiguredProject"/> objects or <see cref="ProjectConfiguration"/> 
///     objects, and the names of the configuration dimensions that participated in the calculation of the active configured objects.
/// </summary>
/// <typeparam name="T">
///     The type of the active configured objects, typically <see cref="ProjectConfiguration"/> or <see cref="ConfiguredProject"/>.
/// </typeparam>
/// <summary>
///     Initializes a new instance of <see cref="ActiveConfiguredObjects{T}"/> with the specified objects and configurations 
///     dimension names.
/// </summary>
/// <param name="objects">
///     An <see cref="IReadOnlyList{T}"/> of the active configured objects.
/// </param>
/// <param name="dimensionNames">
///     An <see cref="IImmutableSet{T}"/> containing the names of the configuration dimensions that participated in 
///     the calculation of the active configured objects, or empty if no dimensions participated in the calculation.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="objects"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="dimensionNames"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="objects"/> is empty.
/// </exception>
/// <summary>
///     Gets the active configured objects.
/// </summary>
/// <value>
///     An <see cref="IReadOnlyList{T}"/> of the active configured objects.
/// </value>
/// <remarks>
///     The order in the returned <see cref="IReadOnlyList{T}"/> matches the declared ordered within
///     the project file.
/// </remarks>
/// <summary>
///     Gets the names of the configuration dimensions that participated in the calculation of the active configured objects.
/// </summary>
/// <value>
///     An <see cref="IImmutableSet{T}"/> containing the names of the configuration dimensions that participated in the
///     calculation of the active configured objects, or empty if no dimensions participated in the calculation.
/// </value>
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Force loads the active <see cref="ConfiguredProject"/> objects so that any configured project-level 
///     services, such as evaluation and build services, are started.
/// </summary>
// Make sure we aren't currently unloading, or we don't unload while we load the configuration
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// A project configuration is considered active if its dimensions matches the active solution configuration skipping 
// any ignored dimensions names (provided by IActiveConfiguredProjectsDimensionProvider instances):
//
// For example, given the following cross-targeting project:
//
//      -> All known project configurations:
//
//          Configuration   Platform    TargetFramework
//          -------------------------------------------
//                  Debug |   AnyCPU  |           net45
//                  Debug |   AnyCPU  |           net46
//                Release |   AnyCPU  |           net45
//                Release |   AnyCPU  |           net46
//
//      -> Active solution configuration: 
//
//                  Debug |   AnyCPU  |           net45
//
//      -> Active configurations return by this class:
//
//                  Debug |   AnyCPU  |           net45
//                  Debug |   AnyCPU  |           net46
//
// Whereas, given the following non-cross-targeting project:
//
//      -> All known project configurations:
//
//          Configuration   Platform
//          ------------------------
//                  Debug |   AnyCPU
//                Release |   AnyCPU
//
//      -> Active solution configuration: 
//
//                  Debug |   AnyCPU
//
//      -> Active configurations return by this class:
//
//                  Debug |   AnyCPU
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IConfiguredProjectActivationTracking"/> that is based on the results of <see cref="IActiveConfigurationGroupService"/>.
/// </summary>
// Unloading, notify anyone listening that we're never going to be active
// Disposed, notify anyone listening that we're never going to be active
// Are there any changes for my configuration?
// Make sure the writes in constructor don't 
// move to after we publish the value
// Notify anyone listening that we're never going to be active
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Contract names to use for CPS exports/imports. (Ported over from 
/// Microsoft.VisualStudio.ProjectSystem.ExportContractNames)
/// </summary>
/// <summary>
/// The substring to prepend to all CPS-defined contract names.
/// </summary>
/// <summary>
/// Contract names for IProjectPropertiesProvider implementations.
/// </summary>
/// <summary>
/// Contract name for the property provider that reads MSBuild intrinsic properties.
/// </summary>
/// <summary>
/// Contract name for the property provider that reads/writes properties from the project file.
/// </summary>
/// <summary>
/// Contract name for the property provider that reads/writes properties from the user file.
/// </summary>
/// <summary>
/// Contract name for the property provider that reads/writes properties from the user file
/// and when properties are not defined in context falls back to defaults as specified
/// in the XAML file rather than from elsewhere in the project (e.g. such as .props files).
/// </summary>
/// <summary>
/// Contract name for the property provider that reads/writes special properties from the project file for assembly references.
/// </summary>
/// <summary>
/// Contracts used by tree providers.
/// </summary>
/// <summary>
/// The tree of the exact contents of the project directory.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Do not used banned APIs (we are wrapping them)
/// <summary>
///     Provides properties and methods containing common dataflow link and block options.
/// </summary>
/// <summary>
///     Returns a new instance of <see cref="DataflowLinkOptions"/> with 
///     <see cref="DataflowLinkOptions.PropagateCompletion"/> set to <see langword="true"/>.
/// </summary>
// Make sure source block completion and faults flow onto the target block to avoid hangs.
/// <summary>
///     Returns a new instance of <see cref="StandardRuleDataflowLinkOptions"/> with
///     <see cref="StandardRuleDataflowLinkOptions.RuleNames"/> set to <paramref name="ruleNames"/>
///     and <see cref="DataflowLinkOptions.PropagateCompletion"/> set to <see langword="true"/>.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="ruleNames"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Returns a new instance of <see cref="StandardRuleDataflowLinkOptions"/> with
///     <see cref="StandardRuleDataflowLinkOptions.RuleNames"/> set to <paramref name="ruleNames"/>
///     and <see cref="DataflowLinkOptions.PropagateCompletion"/> set to <see langword="true"/>.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="ruleNames"/> is <see langword="null"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known project flags.
/// </summary>
/// <summary>
///     Links to the specified <see cref="Action{T}" /> to receive a cross-sectional slice of project 
///     data,  including detailed descriptions of what changed between snapshots, as described by 
///     specified rules.
/// </summary>
/// <param name="source">
///     The broadcasting block that produces the messages.
/// </param>
/// <param name="target">
///     The <see cref="Action{T}"/> to receive the broadcasts.
/// </param>
/// <param name="suppressVersionOnlyUpdates">
///    A value indicating whether to prevent messages from propagating to the target
///     block if no project changes are include other than an incremented version number.
/// </param>
/// <param name="ruleNames">
///     The names of the rules that describe the project data the caller is interested in.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="target"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Links to the specified <see cref="Action{T}" /> to receive a cross-sectional slice of project 
///     data,  including detailed descriptions of what changed between snapshots, as described by 
///     specified rules.
/// </summary>
/// <param name="source">
///     The broadcasting block that produces the messages.
/// </param>
/// <param name="target">
///     The <see cref="Action{T}"/> to receive the broadcasts.
/// </param>
/// <param name="suppressVersionOnlyUpdates">
///    A value indicating whether to prevent messages from propagating to the target
///     block if no project changes are include other than an incremented version number.
/// </param>
/// <param name="ruleNames">
///     The names of the rules that describe the project data the caller is interested in.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="target"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Links to the specified <see cref="Func{T, TResult}" /> to receive a cross-sectional slice of project 
///     data,  including detailed descriptions of what changed between snapshots, as described by 
///     specified rules.
/// </summary>
/// <param name="source">
///     The broadcasting block that produces the messages.
/// </param>
/// <param name="target">
///     The <see cref="Action{T}"/> to receive the broadcasts.
/// </param>
/// <param name="suppressVersionOnlyUpdates">
///    A value indicating whether to prevent messages from propagating to the target
///     block if no project changes are include other than an incremented version number.
/// </param>
/// <param name="ruleNames">
///     The names of the rules that describe the project data the caller is interested in.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="target"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Links to the specified <see cref="Func{T, TResult}" /> to receive a cross-sectional slice of project 
///     data,  including detailed descriptions of what changed between snapshots, as described by 
///     specified rules.
/// </summary>
/// <param name="source">
///     The broadcasting block that produces the messages.
/// </param>
/// <param name="target">
///     The <see cref="Action{T}"/> to receive the broadcasts.
/// </param>
/// <param name="suppressVersionOnlyUpdates">
///    A value indicating whether to prevent messages from propagating to the target
///     block if no project changes are include other than an incremented version number.
/// </param>
/// <param name="ruleNames">
///     The names of the rules that describe the project data the caller is interested in.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="target"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Links the <see cref="ISourceBlock{TOutput}" /> to the specified <see cref="Action{T}" /> 
///     that can process messages, propagating completion and faults.
/// </summary>
/// <returns>
///     An <see cref="IDisposable"/> that, upon calling Dispose, will unlink the source from the target.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="target"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Links the <see cref="ISourceBlock{TOutput}" /> to the specified <see cref="Func{T, TResult}" /> 
///     that can process messages, propagating completion and faults.
/// </summary>
/// <returns>
///     An <see cref="IDisposable"/> that, upon calling Dispose, will unlink the source from the target.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="target"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Creates a source block that produces a transformed value for each value from original source block.
/// </summary>
/// <typeparam name="TInput">
///     The type of the input value produced by <paramref name="source"/>.
/// </typeparam>
/// <typeparam name="TOut">
///     The type of value produced by <paramref name="transform"/>.
///  </typeparam>
/// <param name="source">
///     The source block whose values are to be transformed.
/// </param>
/// <param name="transform">
///     The function to execute on each value from <paramref name="source"/>.
/// </param>
/// <returns>
///     The transformed source block and a disposable value that terminates the link.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="transform"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Creates a source block that produces a transformed value for each value from original source block, 
///     skipping intermediate input and output states, and hence is not suitable for producing or consuming 
///     deltas.
/// </summary>
/// <typeparam name="TInput">
///     The type of the input value produced by <paramref name="source"/>.
/// </typeparam>
/// <typeparam name="TOut">
///     The type of value produced by <paramref name="transform"/>.
///  </typeparam>
/// <param name="source">
///     The source block whose values are to be transformed.
/// </param>
/// <param name="transform">
///     The function to execute on each value from <paramref name="source"/>.
/// </param>
/// <returns>
///     The transformed source block and a disposable value that terminates the link.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="transform"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Creates a source block that produces a transformed value for each value from original source block, 
///     skipping intermediate input and output states, and hence is not suitable for producing or consuming 
///     deltas.
/// </summary>
/// <typeparam name="TOut">
///     The type of value produced by <paramref name="transform"/>.
///  </typeparam>
/// <param name="source">
///     The source block whose values are to be transformed.
/// </param>
/// <param name="transform">
///     The function to execute on each value from <paramref name="source"/>.
/// </param>
/// <param name="suppressVersionOnlyUpdates">
///     A value indicating whether to prevent messages from propagating to the target
///     block if no project changes are include other than an incremented version number.
/// </param>
/// <param name="ruleNames">
///     The names of the rules that describe the project data the caller is interested in.
/// </param>
/// <returns>
///     The transformed source block and a disposable value that terminates the link.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="source"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="transform"/> is <see langword="null"/>.
/// </exception>
/// <summary>
/// Wraps a delegate in a repeatably executable delegate that runs within an ExecutionContext captured at the time of *this* method call.
/// </summary>
/// <typeparam name="TInput">The type of input parameter that is taken by the delegate.</typeparam>
/// <param name="function">The delegate to invoke when the returned delegate is invoked.</param>
/// <returns>The wrapper delegate.</returns>
/// <remarks>
/// This is useful because Dataflow doesn't capture or apply ExecutionContext for its delegates,
/// so the delegate runs in whatever ExecutionContext happened to call ITargetBlock.Post, which is
/// never the behavior we actually want. We've been bitten several times by bugs due to this.
/// Ironically, in Dataflow's early days it *did* have the desired behavior but they removed it
/// when they pulled it out of the Framework so it could be 'security transparent'.
/// By passing block delegates through this wrapper, we can reattain the old behavior.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     A <see cref="IProjectValueDataSource{T}"/> that drops <see cref="ProjectDataSources.ConfiguredProjectIdentity"/> and 
///     <see cref="ProjectDataSources.ConfiguredProjectVersion"/> versions from each value of the original
///     <see cref="IProjectValueDataSource{T}"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Do not used banned APIs (we are wrapping them)
/// <summary>
///     Provides extensions methods for APIs in the project system that end up filing Watson reports.
/// </summary>
/// <summary>
///     Reports the specified fault.
/// </summary>
/// <param name="faultHandlerService">
///     The <see cref="IProjectFaultHostHandler"/> that should handle the fault.
/// </param>
/// <param name="ex">
///     Exception containing the fault information.
///  </param>
/// <param name="severity">
///     The severity of the failure.
/// </param>
/// <param name="project">
///     The project related to the failure, if applicable. Can be <see langword="null"/>.
/// </param>
/// <summary>
///     Attaches error handling to a task so that if it throws an unhandled exception,
///     the error will be reported to the user.
/// </summary>
/// <param name="faultHandlerService">
///     The <see cref="IProjectFaultHostHandler"/> that should handle the fault.
/// </param>
/// <param name="task">
///     The task to attach error handling to.
/// </param>
/// <param name="project">
///     The project related to the failure, if applicable. Can be <see langword="null"/>.
/// </param>
/// <param name="severity">
///     The severity of the failure.
/// </param>
/// <summary>
///     Attaches error handling to a task so that if it throws an unhandled exception,
///     the error will be reported to the user.
/// </summary>
/// <param name="faultHandlerService">
///     The <see cref="IProjectFaultHostHandler"/> that should handle the fault.
/// </param>
/// <param name="task">
///     The task to attach error handling to.
/// </param>
/// <param name="project">
///     The project related to the failure, if applicable. Can be <see langword="null"/>.
/// </param>
/// <param name="severity">
///     The severity of the failure.
/// </param>
/// <summary>
///      Executes the specified delegate in a safe fire-and-forget manner, prevent the project from 
///      closing until it has completed.
/// </summary>
/// <param name="threadingService">
///     The <see cref="IProjectThreadingService"/> that handles the fork.
/// </param>
/// <param name="asyncAction">
///      The async delegate to invoke. It is invoked asynchronously with respect to the caller.
/// </param>
/// <param name="unconfiguredProject">
///     The unconfigured project which the delegate operates on, if applicable. Can be <see langword="null"/>.
/// </param>
/// <param name="faultSeverity">
///     Suggests to the user how severe the fault is if the delegate throws.
/// </param>
/// <param name="options">
///     Influences the environment in which the delegate is executed.
/// </param>
// If you do not pass in a project it is not legal to ask the threading service to cancel this operation on project unloading
/// <summary>
///     Executes the specified delegate in a safe fire-and-forget manner, prevent the project from 
///     closing until it has completed.
/// </summary>
/// <param name="threadingService">
///     The <see cref="IProjectThreadingService"/> that handles the fork.
/// </param>
/// <param name="asyncAction">
///     The async delegate to invoke. It is invoked asynchronously with respect to the caller.
/// </param>
/// <param name="configuredProject">
///     The configured project which the delegate operates on, if applicable. Can be <see langword="null"/>.
/// </param>
/// <param name="faultSeverity">
///     Suggests to the user how severe the fault is if the delegate throws.
/// </param>
/// <param name="options">
///     Influences the environment in which the delegate is executed.
/// </param>
// If you do not pass in a project it is not legal to ask the threading service to cancel this operation on project unloading
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Returns the logical folder names of the specified <paramref name="fullPath"/>, starting
///     at <paramref name="basePath"/>, using 'Link' metadata if it represents a linked file.
/// </summary>
// Roslyn wants the effective set of folders from the source up to, but not including the project 
// root to handle the cases where linked files have a different path in the tree than what its path 
// on disk is. It uses these folders for code actions that create files alongside others, such as 
// extract interface.
// We try to make either the link path or full path relative to the project path
// Is this outside of base path?
// We now have a folder in the form of `Folder1\Folder2` relative to the
// project directory split it up into individual path components
// This mimic's CPS's handling of Link metadata
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     An UnconfiguredProject-level service that provides access to the <see cref="ProjectConfiguration"/> and
///     <see cref="ConfiguredProject"/> objects that the host considers to be active.
/// </summary>
/// <remarks>
///     This service replaces <see cref="IActiveConfiguredProjectProvider"/> to handle projects where more than
///     <see cref="ConfiguredProject"/> is considered active at the same time, such as projects that produce
///     multiple outputs. See <see cref="ActiveConfiguredProjectsProvider"/> for more information.
/// </remarks>
/// <summary>
///     Gets all the active configured projects by TargetFramework dimension for the current unconfigured project.
///     If the current project is not a cross-targeting project, then it returns a singleton key-value pair with an
///     ignorable key and single active configured project as value.
/// </summary>
/// <returns>
///     Map from TargetFramework dimension to active configured project, or <see langword="null" /> if there
///     are no active <see cref="ConfiguredProject"/> objects.
/// </returns>
/// <summary>
///     Returns the ordered list of configured projects that are active for the current project, loading them if needed.
/// </summary>
/// <returns>
///     An <see cref="ActiveConfiguredObjects{T}"/> containing the ordered set of <see cref="ConfiguredProject"/> objects 
///     with the names of the configuration dimensions that participated in the calculation of the active 
///     <see cref="ConfiguredProject"/> objects, or <see langword="null"/> if there are no active <see cref="ConfiguredProject"/>
///     objects.
/// </returns>
/// <remarks>
///     The order in the returned <see cref="ActiveConfiguredObjects{T}"/> matches the declared ordered within
///     the project file.
/// </remarks>
/// <summary>
///     Returns the ordered list of project configurations that are active for the current project.
/// </summary>
/// <returns>
///     An <see cref="ActiveConfiguredObjects{T}"/> containing the ordered set of <see cref="ProjectConfiguration"/> objects 
///     with the names of the configuration dimensions that participated in the calculation of the active 
///     <see cref="ProjectConfiguration"/> objects, or <see langword="null"/> if there are no active 
///     <see cref="ProjectConfiguration"/> objects.
/// </returns>
/// <remarks>
///     The order in the returned <see cref="ActiveConfiguredObjects{T}"/> matches the declared ordered within
///     the project file.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides properties and events to track the implicit activation of a <see cref="ConfiguredProject"/>.
/// </summary>
/// <summary>
///     Gets a value indicating whether the current <see cref="ConfiguredProject"/> 
///     is implicitly active.
/// </summary>
/// <exception cref="ObjectDisposedException">
///     The <see cref="IConfiguredProjectImplicitActivationTracking"/> has been disposed of.
/// </exception>
/// <summary>
///     Gets a task that is completed when current <see cref="ConfiguredProject"/> becomes 
///     implicitly active.
/// </summary>
/// <exception cref="ObjectDisposedException">
///     The <see cref="IConfiguredProjectImplicitActivationTracking"/> has been disposed of.
/// </exception>
/// <remarks>
///     The returned <see cref="Task"/> is canceled when the <see cref="ConfiguredProject"/> 
///     is unloaded.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This service creates a file from a given file template.
/// </summary>
/// <summary>
/// Create a file with the given template file and add it to the parent node.
/// </summary>
/// <param name="templateFile">The name of the template zip file.</param>
/// <param name="path">The path to the file to be created.</param>
/// <returns>true if file is added successfully.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     A configured-project service which will be activated when its configured project becomes implicitly active, or deactivated when it not.
/// </summary>
/// <summary>
///     Activates the service.
/// </summary>
/// <summary>
///     Deactivates the service.
/// </summary>
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents a service that listen for project loaded events in a host.
/// </summary>
/// <summary>
///     Starts listening for project events in a host.
/// </summary>
/// <returns>
///     Once this method has been called once, all future calls are no-ops.
/// </returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents an instance that is automatically initialized when its parent <see cref="AbstractMultiLifetimeComponent{T}"/>
///     is loaded, or disposed when it is unloaded.
/// </summary>
/// <summary>
///     Initializes the <see cref="IMultiLifetimeInstance"/>.
/// </summary>
/// <summary>
///     Disposes the <see cref="IMultiLifetimeInstance"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents the physical project tree in Solution Explorer.
/// </summary>
/// <summary>
///     Gets the service that provides file and folder operations that operate on the physical <see cref="IProjectTree"/>.
/// </summary>
/// <summary>
///     Gets the most recently published tree, or <see langword="null"/> if it has not yet be published.
/// </summary>
/// <summary>
///     Gets the service that manages the tree in Solution Explorer.
/// </summary>
/// <summary>
///     Gets the project tree provider that creates the Solution Explorer tree.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides file and folder operations that operate on the physical <see cref="IProjectTree"/>.
/// </summary>
/// <remarks>
///     This interface provides a simple facade over the <see cref="IFileSystem"/>, <see cref="IFolderManager"/>, 
///     <see cref="IProjectTreeService"/>, <see cref="IProjectItemProvider"/> and <see cref="IProjectItemProvider"/> interfaces.
/// </remarks>
/// <summary>
///     Adds an existing file to the physical project tree.
/// </summary>
/// <param name="path">
///     The path of the file to add, can be relative to the project directory.
/// </param>
/// <remarks>
///     This method will automatically publish the resulting tree to <see cref="IProjectTreeService.CurrentTree"/>.
/// </remarks>
/// <exception cref="ArgumentNullException">
///     <paramref name="path"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters.
///     <para>
///         -or-
///     </para>
///     <paramref name="path"/> is prefixed with, or contains, only a colon character (:).
/// </exception>
/// <exception cref="NotSupportedException">
///     <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").
/// </exception>
/// <summary>
///     Creates a zero-byte file on disk, adding it add to the physical project tree.
/// </summary>
/// <param name="path">
///     The path of the file to create, can be relative to the project directory.
/// </param>
/// <remarks>
///     This method will automatically publish the resulting tree to <see cref="IProjectTreeService.CurrentTree"/>.
/// </remarks>
/// <exception cref="ArgumentNullException">
///     <paramref name="path"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters.
///     <para>
///         -or-
///     </para>
///     <paramref name="path"/> is prefixed with, or contains, only a colon character (:).
/// </exception>
/// <exception cref="IOException">
///     The file specified by <paramref name="path"/> is a directory.
///     <para>
///         -or-
///     </para>
///     The network name is not known.
/// </exception>
/// <exception cref="UnauthorizedAccessException">
///     The caller does not have the required permission.
/// </exception>
/// <exception cref="PathTooLongException"> 
///     The specified path, file name, or both exceed the system-defined maximum length.
/// </exception>
/// <exception cref="DirectoryNotFoundException">
///     The specified path is invalid (for example, it is on an unmapped drive).
/// </exception>
/// <exception cref="NotSupportedException">
///     <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").
/// </exception>
/// <summary>
///     Creates a folder on disk, adding it add to the physical project tree.
/// </summary>
/// <param name="path">
///     The path of the folder to create, can be relative to the project directory.
/// </param>
/// <remarks>
///     This method will automatically publish the resulting tree to <see cref="IProjectTreeService.CurrentTree"/>.
/// </remarks>
/// <exception cref="ArgumentNullException">
///     <paramref name="path"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters.
///     <para>
///         -or-
///     </para>
///     <paramref name="path"/> is prefixed with, or contains, only a colon character (:).
/// </exception>
/// <exception cref="IOException">
///     The directory specified by <paramref name="path"/> is a file.
///     <para>
///         -or-
///     </para>
///     The network name is not known.
/// </exception>
/// <exception cref="UnauthorizedAccessException">
///     The caller does not have the required permission.
/// </exception>
/// <exception cref="PathTooLongException"> 
///     The specified path, file name, or both exceed the system-defined maximum length.
/// </exception>
/// <exception cref="DirectoryNotFoundException">
///     The specified path is invalid (for example, it is on an unmapped drive).
/// </exception>
/// <exception cref="NotSupportedException">
///     <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").
/// </exception>
/// <summary>
///     Adds an existing folder to the physical project tree.
/// </summary>
/// <param name="path">
///     The path of the folder to add, can be relative to the project directory.
/// </param>
/// <remarks>
///     This method will automatically publish the resulting tree to <see cref="IProjectTreeService.CurrentTree"/>.
/// </remarks>
/// <exception cref="ArgumentNullException">
///     <paramref name="path"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters.
///     <para>
///         -or-
///     </para>
///     <paramref name="path"/> is prefixed with, or contains, only a colon character (:).
/// </exception>
/// <exception cref="NotSupportedException">
///     <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\").
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     A project-service level component that provides methods for accessing the MSBuild evaluation and 
///     construction models for a <see cref="UnconfiguredProject"/> or <see cref="ConfiguredProject"/>.
/// </summary>
/// <summary>
///     Obtains a write lock, asynchronously awaiting for the lock if it is not immediately available.
/// </summary>
/// <param name="action">
///     The <see cref="Func{T1, T2, TResult}"/> to run while holding the lock.
/// </param>
/// <param name="cancellationToken">
///     A token whose cancellation signals lost interest in the result.
/// </param>
/// <returns>
///     The result of executing <paramref name="action"/> over the <see cref="ProjectCollection"/>.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="action"/> is <see langword="null"/>.
/// </exception>
/// <remarks>
///     NOTE: To avoid deadlocks, do not call arbitrary services or asynchronous code other than methods on <see cref="IProjectAccessor"/> within <paramref name="action"/>.
/// </remarks>
/// <summary>
///     Opens the MSBuild project construction model for the specified project, passing it to the specified action for reading.
/// </summary>
/// <param name="project">
///     The <see cref="UnconfiguredProject"/> whose underlying MSBuild object model is required.
/// </param>
/// <param name="action">
///     The <see cref="Func{T, TResult}"/> to run while holding the lock.
/// </param>
/// <param name="cancellationToken">
///     A token whose cancellation signals lost interest in the result.
/// </param>
/// <returns>
///     The result of executing <paramref name="action"/> over the <see cref="ProjectRootElement"/>.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="project"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="action"/> is <see langword="null"/>.
/// </exception>
/// <remarks>
///     NOTE: To avoid deadlocks, do not call arbitrary services or asynchronous code within <paramref name="action"/>.
/// </remarks>
/// <summary>
///     Opens the MSBuild project construction model for the specified project, passing it to the specified action for reading, with the option to upgrade for writing.
/// </summary>
/// <param name="project">
///     The <see cref="UnconfiguredProject"/> whose underlying MSBuild object model is required.
/// </param>
/// <param name="action">
///     The <see cref="Func{T1, T2, TResult}"/> to run while holding the lock.
/// </param>
/// <param name="cancellationToken">
///     A token whose cancellation signals lost interest in the result.
/// </param>
/// <returns>
///     The result of executing <paramref name="action"/> over the <see cref="ProjectRootElement"/>.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="project"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="action"/> is <see langword="null"/>.
/// </exception>
/// <remarks>
///     NOTE: To avoid deadlocks, do not call arbitrary services or asynchronous code other than <see cref="OpenProjectXmlForWriteAsync(UnconfiguredProject, Action{ProjectRootElement}, CancellationToken)"/> within <paramref name="action"/>.
/// </remarks>
/// <summary>
///     Opens the MSBuild project construction model for the specified project, passing it to the specified action for writing.
/// </summary>
/// <param name="project">
///     The <see cref="UnconfiguredProject"/> whose underlying MSBuild object model is required.
/// </param>
/// <param name="action">
///     The <see cref="Action{T}"/> to run while holding the lock.
/// </param>
/// <param name="cancellationToken">
///     A token whose cancellation signals lost interest in the result.
/// </param>
/// <returns>
///     The result of executing <paramref name="action"/> over the <see cref="ProjectRootElement"/>.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="project"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="action"/> is <see langword="null"/>.
/// </exception>
/// <remarks>
///     NOTE: To avoid deadlocks, do not call arbitrary services or asynchronous code within <paramref name="action"/>.
/// </remarks>
/// <summary>
///     Opens the MSBuild project evaluation model for the specified project, passing it to the specified action for reading.
/// </summary>
/// <param name="project">
///     The <see cref="ConfiguredProject"/> whose underlying MSBuild object model is required.
/// </param>
/// <param name="action">
///     The <see cref="Func{T, TResult}"/> to run while holding the lock.
/// </param>
/// <param name="cancellationToken">
///     A token whose cancellation signals lost interest in the result.
/// </param>
/// <returns>
///     The result of executing <paramref name="action"/> over the <see cref="Project"/>.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="project"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="action"/> is <see langword="null"/>.
/// </exception>
/// <remarks>
///     NOTE: To avoid deadlocks, do not call arbitrary services or asynchronous code within <paramref name="action"/>.
/// </remarks>
/// <summary>
///     Opens the MSBuild project evaluation model for the specified project, passing it to the specified action for reading, with the option to upgrade for writing.
/// </summary>
/// <param name="project">
///     The <see cref="ConfiguredProject"/> whose underlying MSBuild object model is required.
/// </param>
/// <param name="action">
///     The <see cref="Func{T, TResult}"/> to run while holding the lock.
/// </param>
/// <param name="cancellationToken">
///     A token whose cancellation signals lost interest in the result.
/// </param>
/// <returns>
///     The result of executing <paramref name="action"/> over the <see cref="Project"/>.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="project"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="action"/> is <see langword="null"/>.
/// </exception>
/// <remarks>
///     NOTE: To avoid deadlocks, do not call arbitrary services or asynchronous code within <paramref name="action"/>.
/// </remarks>
/// <summary>
///     Opens the MSBuild project evaluation model for the specified project, passing it to the specified action for writing.
/// </summary>
/// <param name="project">
///     The <see cref="ConfiguredProject"/> whose underlying MSBuild object model is required.
/// </param>
/// <param name="action">
///     The <see cref="Action{T}"/> to run while holding the lock.
/// </param>
/// <param name="option">
///     Indicates whether to checkout the project from source control. The default is <see cref="ProjectCheckoutOption.Checkout"/>.
/// </param>
/// <param name="cancellationToken">
///     A token whose cancellation signals lost interest in the result. The default is <see cref="CancellationToken.None"/>.
/// </param>
/// <returns>
///     The result of executing <paramref name="action"/> over the <see cref="Project"/>.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="project"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="action"/> is <see langword="null"/>.
/// </exception>
/// <remarks>
///     NOTE: To avoid deadlocks, do not call arbitrary services or asynchronous code within <paramref name="action"/>.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides methods for querying and testing the current project's capabilities.
/// </summary>
// This interface introduced just so that we can mock checks for capabilities, 
// to avoid static state and call context data that we cannot influence
/// <summary>
///     Returns a value indicating whether the current project has the specified capability
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="capability"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="capability"/> is an empty string ("").
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides properties for retrieving options for the project system.
/// </summary>
/// <summary>
///     Gets a value indicating if the project output pane is enabled.
/// </summary>
/// <value>
///     <see langword="true"/> if the project output pane is enabled; otherwise, <see langword="false"/>.
/// </value>
/// <summary>
///     Gets a value indicating if the project fast up to date check is enabled.
/// </summary>
/// <param name="cancellationToken">
///     A token whose cancellation signals lost interest in the result.
/// </param>
/// <value>
///     <see langword="true"/> if the project fast up to date check is enabled; otherwise, <see langword="false"/>
/// </value>
/// <summary>
///     Gets a value indicating the level of fast up to date check logging.
/// </summary>
/// <param name="cancellationToken">
///     A token whose cancellation signals lost interest in the result.
/// </param>
/// <value>
///     The level of fast up to date check logging.
/// </value>
/// <summary>
///     Gets a value indicating whether the designer view is the default editor for the specified designer category.
/// </summary>
/// <summary>
///     Sets a value indicating whether the designer view is the default editor for the specified designer category.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Gets the direct child of <paramref name="tree"/> with <paramref name="caption"/>
/// if found, otherwise <see langword="null"/>.
/// </summary>
/// <summary>
/// Finds a tree node by it's flags. If there many nodes that satisfy flags, returns first.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// This is the one place where IProjectGuidService is allowed to be referenced
/// <summary>
///     Provides a mechanism to safely access the project GUID. Replaces usage of <see cref="IProjectGuidService"/> 
///     and <see cref="IProjectGuidService2"/>.
/// </summary>
/// <remarks>
///     <see cref="IProjectGuidService"/> and <see cref="IProjectGuidService2"/> will retrieve the project GUID of 
///     the project *at the time* that it is called. During project initialization, the GUID may be changed by the 
///     solution in reaction to a clash with another project. <see cref="ISafeProjectGuidService"/> will wait until
///     it is safe to retrieve the project GUID before returning it.
/// </remarks>
/// <summary>
///     Returns the project GUID, waiting until project load has safely progressed 
///     to a point where the GUID is guaranteed not to change.
/// </summary>
/// <returns>
///     The GUID of the current project.
/// </returns>
/// <exception cref="OperationCanceledException">
///     The project was unloaded before project load had finished.
/// </exception>
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// A global service that tracks whether solution-level state.
/// </summary>
/// <summary>
/// Gets whether the solution is being closed, which can be useful to avoid doing
/// redundant work while tearing down the solution.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides access to common project services provided by the <see cref="UnconfiguredProject"/>.
/// </summary>
/// <summary>
///     Gets the <see cref="IProjectThreadingService"/> for the current <see cref="UnconfiguredProject"/>.
/// </summary>
/// <summary>
///     Gets the current <see cref="UnconfiguredProject"/>.
/// </summary>
/// <summary>
///     Gets the current active <see cref="ConfiguredProject"/>.
/// </summary>
/// <summary>
///     Gets the <see cref="ProjectProperties"/> of the currently active configured project.
/// </summary>
/// <summary>
///     Gets the <see cref="IProjectAccessor"/> which provides access to MSBuild evaluation and construction models for a project.
/// </summary>
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides methods for that assist in managing project-related background tasks. This interface replaces 
///     <see cref="IProjectAsyncLoadDashboard"/> usage.
/// </summary>
/// <summary>
///     Gets a token that is cancelled when the project has started to unload.
/// </summary>
/// <remarks>
///     NOTE: This token is cancelled before <see cref="LoadedProjectAsync"/> actions 
///     have been completed, so callers can bail early if needed.
/// </remarks>
/// <summary>
///     Gets a task that completes when the host recognizes that the project is loaded, 
///     or is cancelled if the project is unloaded before that occurs.
/// </summary>
/// <remarks>
///     This task completes after <see cref="PrioritizedProjectLoadedInHost"/> and is intended for
///     non-critical services that need to complete after the project has been loaded, but
///     after critical services.
/// </remarks>
/// <exception cref="OperationCanceledException">
///     Thrown if the project was unloaded.
/// </exception>
/// <summary>
///     Gets a task that completes when the host recognizes that the project is loaded,
///     or is cancelled if the project is unloaded before that occurs.
/// </summary>
/// <remarks>
///     This task completes before <see cref="ProjectLoadedInHost"/> and is intended for
///     critical services that need to do work before non-critical services.
/// </remarks>
/// <exception cref="OperationCanceledException">
///     Thrown if the project was unloaded.
/// </exception>
/// <summary>
///     Provides protection for an operation that the project will not close before the completion of some task.
/// </summary>
/// <param name="action">
///     The action to execute within the context of a loaded project.
/// </param>
/// <exception cref="OperationCanceledException">
///     Thrown if the project was already unloaded before this method was invoked.
/// </exception>
/// <summary>
///     Provides protection for an operation that the project will not close before the completion of some task.
/// </summary>
/// <typeparam name="T">
///     The type of value returned by the joinable.
/// </typeparam>
/// <param name="action">
///     The action to execute within the context of a loaded project.
/// </param>
/// <exception cref="OperationCanceledException">
///     Thrown if the project was already unloaded before this method was invoked.
/// </exception>
/// <summary>
///     Provides protection for an operation that the project will not be considered loaded in the host before 
///     the completion of some task.
/// </summary>
/// <typeparam name="T">
///     The type of value returned by the joinable.
/// </typeparam>
/// <param name="action">
///     The action to execute before the project is considered loaded in the host.
/// </param>
/// <exception cref="OperationCanceledException">
///     Thrown if the project was already unloaded before this method was invoked.
/// </exception>
/// <summary>
///     Provides protection for an operation that the project will not be considered loaded in the host before 
///     the completion of some task.
/// </summary>
/// <param name="action">
///     The action to execute before the project is considered loaded in the host.
/// </param>
/// <exception cref="OperationCanceledException">
///     Thrown if the project was already unloaded before this method was invoked.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="OnceInitializedOnceDisposedAsync"/> that lets 
///     implementers protect themselves from being disposed while doing work.
/// </summary>
/// <remarks>
///     <see cref="OnceInitializedOnceDisposed"/> lets implementors prevent themselves from being disposed
///     by locking <see cref="OnceInitializedOnceDisposed.SyncObject"/>. This class provides a similar 
///     mechanism by passing a delegate into <see cref="ExecuteUnderLockAsync"/>.
/// </remarks>
/// <summary>
///     Disposes of managed and unmanaged resources owned by this instance, under a lock
///     that prevents overlap with any currently executing actions passed to 
///     <see cref="ExecuteUnderLockAsync(Func{CancellationToken, Task}, CancellationToken)"/>.
/// </summary>
/// <param name="initialized">
///     A value indicating whether this instance had been previously initialized.
/// </param>
/// <summary>
///     Executes the specified action under a lock that prevents overlap with any currently executing actions passed to
///     <see cref="ExecuteUnderLockAsync(Func{CancellationToken, Task}, CancellationToken)"/> and 
///     <see cref="OnceInitializedOnceDisposedAsync.DisposeAsync"/>.
/// </summary>
/// <param name="action">
///     The action to execute under the lock. This action is passed a <see cref="CancellationToken"/> which is cancelled
///     when either this object is disposed, or <paramref name="cancellationToken"/> is cancelled.
/// </param>
/// <param name="cancellationToken">
///     The token to monitor for cancellation requests. The default value is <see cref="CancellationToken.None"/>.
/// </param>
/// <returns>
///     The result of <paramref name="action"/>.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="action"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="OperationCanceledException">
///     The result is awaited and <paramref name="cancellationToken"/> is cancelled.
///     <para>
///         -or-
///     </para>
///     The result is awaited and the <see cref="OnceInitializedOnceDisposedUnderLockAsync"/> 
///     has been disposed of.
/// </exception>
/// <summary>
///     Executes the specified action under a lock that prevents overlap with any currently executing actions passed to
///     <see cref="ExecuteUnderLockAsync(Func{CancellationToken, Task}, CancellationToken)"/> and 
///     <see cref="OnceInitializedOnceDisposedAsync.DisposeAsync"/>.
/// </summary>
/// <param name="action">
///     The action to execute under the lock. This action is passed a <see cref="CancellationToken"/> which is cancelled
///     when either this object is disposed, or <paramref name="cancellationToken"/> is cancelled.
/// </param>
/// <param name="cancellationToken">
///     The token to monitor for cancellation requests. The default value is <see cref="CancellationToken.None"/>.
/// </param>
/// <returns>
///     The result of <paramref name="action"/>.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="action"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="OperationCanceledException">
///     The result is awaited and <paramref name="cancellationToken"/> is cancelled.
///     <para>
///         -or-
///     </para>
///     The result is awaited and the <see cref="OnceInitializedOnceDisposedUnderLockAsync"/> 
///     has been disposed of.
/// </exception>
// Consumers treat cancellation due their specified token being cancelled differently from cancellation 
// due our instance being disposed. Because we wrap the two in a source, the resulting exception
// contains it instead of the one that was actually cancelled.
// There's a tiny chance that between checking the cancellation token (wrapping DisposalToken) 
// and checking if the underlying SemaphoreSlim has been disposed, that dispose for this instance 
// (and hence _semaphore) has been run. Handle that and just treat it as a cancellation.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Contains constants representing the order precedence for managed components that can be passed to <see cref="OrderAttribute"/>.
/// </summary>
// NOTE: For consistency, we use the priorities from 10 -> 30 for the managed project system.
// This lets us have a higher precedence than built-in CPS components (which default to 0), but at 
// the same time let other 1st and 3rd party components have a higher precedence than us.
// Because we might want to order components within the managed project system itself, we also 
// have a staggered set of priorities that also lets other components run between our individual 
// components.
/// <summary>
///     Represents the lowest order precedence for components.
/// </summary>
/// <summary>
///     Represents the default order precedence for managed components.
/// </summary>
/// <summary>
///     Represents the an order precedence for managed components that is ordered before <see cref="Default"/>.
/// </summary>
/// <summary>
///     Represents the an order precedence for managed components that is ordered before <see cref="BeforeDefault"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// symbol IProjectLockService is banned
/// <summary>
///     Provides an implementation of <see cref="IProjectAccessor"/> that delegates onto
///     the <see cref="IProjectLockService"/>.
/// </summary>
// Only async to let the caller call one of the other project accessor methods
// Avoid blocking thread on Dispose
// Deliberately not async to reduce the type of
// code you can run while holding the lock.
// Deliberately not async to reduce the type of
// code you can run while holding the lock.
// Deliberately not async to reduce the type of
// code you can run while holding the lock.
// Only async to let the caller upgrade to a 
// write lock via OpenProjectXmlForWriteAsync
// Deliberately not async to reduce the type of
// code you can run while holding the lock.
// Avoid blocking thread on Dispose
// Deliberately not async to reduce the type of
// code you can run while holding the lock.
// Avoid blocking thread on Dispose
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IProjectCapabilitiesService"/> that simply delegates 
///     onto the <see cref="CapabilitiesExtensions.Contains(IProjectCapabilitiesScope, string)"/> method.
/// </summary>
// Just to check capabilities, requires static state and call context that we cannot influence
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known project flags.
/// </summary>
// Keep this in sync with Microsoft.VisualStudio.Editors.ProjectCapability.Pack
/// <summary>
/// Instructs CPS to order tree items according to the <see cref="IProjectTree2.DisplayOrder"/> property first.
/// This is in addition to the default ordering by <see cref="ProjectTreeFlags.Common.BubbleUp"/>, then by
/// <see cref="ProjectTreeFlags.Common.Folder"/> or <see cref="ProjectTreeFlags.Common.VirtualFolder"/>, and finally
/// alphabetical.
/// </summary>
/// <summary>
/// Enables commands and behaviour that allows reordering items in the tree.
/// Used by F# projects, for which item order is significant to compilation.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a concrete implementation of <see cref="IProjectChangeDiff"/>
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Do not checkout the project from source control.
/// </summary>
/// <summary>
///     Checkout the project from source control.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Returns true if this is a cross-targeting project configuration with a "TargetFramework" dimension.
/// This is true for a project with an explicit "TargetFrameworks" property, but no "TargetFrameworkMoniker" or "TargetFramework" property.
/// </summary>
/// <param name="projectConfiguration"></param>
/// <summary>
/// Returns true if the given project configurations are equal ignoring the "TargetFramework" dimension.
/// </summary>
// Ignore the TargetFramework.
// Dimension values must be compared in a case-sensitive manner.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides extension methods for <see cref="ProjectTreeFlags"/>.
/// </summary>
/// <summary>
///     Returns a value indicating whether the specified flags has the flag <see cref="ProjectTreeFlags.Common.ProjectRoot"/>.
/// </summary>
/// <summary>
///     Returns a value indicating whether the specified flags has the specified flag.
/// </summary>
/// <summary>
///     Returns a value indicating whether the specified flags indicates that 
///     the node is included as part of the project.
/// </summary>
/// <summary>
///     Returns a value indicating whether the specified flags indicates that 
///     the file or folder is missing on disk.
/// </summary>
/// <summary>
///     Returns a value indicating whether the specified flags indicates that 
///     the node is a folder.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides <see langword="static"/> extensions for <see cref="IProjectTreeProvider"/> instances.
/// </summary>
/// <summary>
///     Returns a rooted directory that new files should added to the project under when the user 
///     initiates an Add New Item operation on a particular node in the tree.
/// </summary>
/// <param name="provider">
///     The <see cref="IProjectTreeProvider"/> that provides the directory.
/// </param>
/// <param name="target">
///     The <see cref="IProjectTree"/> in the tree that is the receiver of the Add New Item operation.
///  </param>
/// <returns>
///     A <see cref="string"/> containing the path path under which to save the new items, or <see langword="null"/>
///     if <paramref name="target"/> does not support adding new items.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="provider"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="target"/> is <see langword="null"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides extensions for <see cref="IProjectThreadingService"/>.
/// </summary>
/// <summary>
///     Gets an awaitable whose completion will execute on the UI thread, mitigating deadlocks and unwanted reentrancy.
/// </summary>
/// <param name="threading">
///     The <see cref="IProjectThreadingService"/> containing the <see cref="JoinableTaskFactory"/> to use.
/// </param>
/// <param name="cancellationToken">
///     A token whose cancellation signals lost interest in the result.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="threading"/> is <see langword="null"/>
/// </exception>
/// <exception cref="OperationCanceledException">
///     The result is awaited and <paramref name="cancellationToken"/> is cancelled.
/// </exception>
// NOTE this method does not have an "Async" suffix so that it matches overloads in CPS's ProjectThreadingServiceExtensions
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a default implementation of <see cref="IUnconfiguredProjectCommonServices"/>.
/// </summary>
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Do not use LoadedProjectAsync (this is the replacement)
// Do not use LoadedProjectAsync
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     An implementation of <see cref="ISafeProjectGuidService"/> that waits until the project
///     has been loaded into the host environment before returning the project GUID.
/// </summary>
// IProjectGuidService is banned
// IProjectGuidService is banned
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Contains common MSBuild build properties.
/// </summary>
/// <summary>
///     Indicates whether CoreCompile target should skip compiler execution completely.
/// </summary>
/// <summary>
///     Indicates whether CoreCompile target should output the command-line
///     that would have been passed to Csc.exe and Vbc.exe.
/// </summary>
/// <summary>
///     Indicates whether Csc/Vbc tasks should call into the in-proc host compiler.
/// </summary>
/// <summary>
///     Represents the GUID of the project used for uniqueness.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Influences design-time builds that causes CoreCompile to return the command-line 
///     arguments that it would have passed to the compiler, instead of calling it.
/// </summary>
// Don't run the compiler
// Get csc/vbc to output command-line args
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Design time build property provider for <see cref="ConfigurationGeneralBrowseObject.GeneratePackageOnBuildProperty"/>.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="TargetFrameworkGlobalBuildPropertyProvider"/> class.
/// </summary>
/// <summary>
/// Gets the set of global properties that should apply to the project(s) in this scope.
/// </summary>
/// <value>A map whose keys are case insensitive.  Never null, but may be empty.</value>
// Never generate nuget package during design time build.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Build property provider for <see cref="ConfigurationGeneralBrowseObject.GeneratePackageOnBuildProperty"/> for solution build.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="TargetFrameworkGlobalBuildPropertyProvider"/> class.
/// </summary>
/// <summary>
/// Overrides the value of GeneratePackageOnBuild to the value specified, or resets to the project property value if <c>null</c> is passed in.
/// </summary>
/// <summary>
/// Gets the set of global properties that should apply to the project(s) in this scope.
/// </summary>
/// <value>A map whose keys are case insensitive.  Never null, but may be empty.</value>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// A set of outputs generated by a project that fit under some common category.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="OutputGroup"/> class.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides publishable project config for projects that support click once publishing.
/// </summary>
// No support for ClickOnce publishing for now.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// List of well known output groups names and their associated target and description
/// </summary>
/// <summary>
/// Gets a collection of names of targets in this project.
/// </summary>
/// <returns>Collection of the names of targets in this project.</returns>
/// <summary>
/// Produces a set of output groups that is a subset of all well known output groups.
/// </summary>
/// <returns>Set of all known output groups.</returns>
// Start with the comment set of output groups.
// Remove any well known output group for which no target is defined.
/// <summary>
/// Creates a new output group with metadata only.
/// </summary>
/// <param name="name">Output group name.</param>
/// <param name="targetName">Output group target name.</param>
/// <param name="displayName">Output group display name.</param>
/// <param name="description">Optional output group description.</param>
/// <return>New <see cref="IOutputGroup"/>.</return>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Build properties provider for cross targeting projects to ensure that they are build for all target frameworks when doing an explicit build, not just the active target framework.
/// </summary>
/// <remarks>We specify attribute 'Order(Int32.MaxValue)` to ensure that this is the most preferred build properties provider, so it overrides target framework setting from prior providers.</remarks>
/// <summary>
/// Initializes a new instance of the <see cref="TargetFrameworkGlobalBuildPropertyProvider"/> class.
/// </summary>
/// <summary>
/// Gets the set of global properties that should apply to the project(s) in this scope.
/// </summary>
/// <value>A map whose keys are case insensitive.  Never null, but may be empty.</value>
// Check if this is a cross targeting project, i.e. project configuration has a "TargetFramework" dimension.
// For a cross targeting project, we want to build for all the targeted frameworks.
// Clear out the TargetFramework property from the configuration.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Turns off UseHostCompilerIfAvailable to prevent CoreCompile from always being called during builds, see: https://github.com/dotnet/sdk/issues/708.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Base project configuration dimension provider
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BaseProjectConfigurationDimensionProvider"/> class.
/// </summary>
/// <param name="projectAccessor">Lock service for the project file.</param>
/// <param name="dimensionName">Name of the dimension.</param>
/// <param name="propertyName">Name of the project property containing the dimension values.</param>
/// <param name="dimensionDefaultValue">The default value of the dimension, for example "AnyCPU".</param>
/// <summary>
/// Gets the property values for the dimension.
/// </summary>
/// <param name="project">Unconfigured project.</param>
/// <returns>Collection of values for the dimension.</returns>
/// <remarks>
/// From <see cref="IProjectConfigurationDimensionsProvider"/>.
/// </remarks>
// Need evaluated property to get inherited properties defines in props or targets.
/// <summary>
/// Gets the defaults values for project configuration dimensions for the given unconfigured project.
/// </summary>
/// <param name="project">Unconfigured project.</param>
/// <returns>Collection of key/value pairs for the defaults values for the configuration dimensions of this provider for given project.</returns>
/// <remarks>
/// From <see cref="IProjectConfigurationDimensionsProvider"/>.
/// The interface expects a collection of key/value pairs containing one or more dimensions along with a single values for each
/// dimension. In this implementation each provider is representing a single dimension.
/// </remarks>
// First value is the default one.
/// <summary>
/// Gets the project configuration dimension and values represented by this provider for the given unconfigured project.
/// </summary>
/// <param name="project">Unconfigured project.</param>
/// <returns>Collection of key/value pairs for the current values for the configuration dimensions of this provider for given project.</returns>
/// <remarks>
/// From <see cref="IProjectConfigurationDimensionsProvider"/>.
/// The interface expects a collection of key/value pairs containing one or more dimensions along with the values for each
/// dimension. In this implementation each provider is representing a single dimension with one or more values.
/// </remarks>
/// <summary>
/// Modifies the project when there's a configuration change.
/// </summary>
/// <param name="args">Information about the configuration dimension value change.</param>
/// <returns>A task for the async operation.</returns>
// Need to wait until the core rename changes happen before renaming the property.
// Only change that needs to be handled here is renaming configurations which needs to happen after all
// of the core changes to rename existing conditions have executed.
// If this property is derived from another property, skip it and just
// pull default from next known values. This is better than picking a 
// default that is not actually one of the known configs.
// NOTE: We try to somewhat mimic evaluation, but it doesn't have to be exact; its just a guess
// at what "might" be the default configuration, not what it actually is.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides 'Configuration' project configuration dimension and values.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Contains constants representing the order precedence for <see cref="IProjectConfigurationDimensionsProvider2"/> implementations.
/// </summary>
// These values determine the order of dimensions inside the configuration service.
// We want Configuration|Platform|TargetFramework.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Indicates that a dimension provided by a <see cref="IProjectConfigurationDimensionsProvider"/> instance 
///     should participate in calculating the active project configurations for <see cref="IActiveConfiguredProjectsProvider"/>.
/// </summary>
/// <summary>
///     Gets the name of the dimension that should participate in calculating the active project configurations.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides a customized view to extract configuration dimension description data from <see cref="ConfigurationDimensionDescriptionAttribute"/>.
/// </summary>
// Properties should not return arrays
/// <summary>
/// Dimension names.
/// This must match <see cref="ConfigurationDimensionDescriptionAttribute.DimensionName"/>.
/// </summary>
/// <summary>
/// Whether it is a dimension to calculate configuration groups.
/// This must match <see cref="ConfigurationDimensionDescriptionAttribute.IsVariantDimension"/>.
/// </summary>
// Properties should not return arrays
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the implicitly active dimensions from a list of dimension names. 
/// </summary>
/// <summary>
///     Returns the implicitly active dimension names from the specified dimension names.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="dimensionNames"/> is <see langword="null"/>.
/// </exception>
/// <remarks>
///     NOTE: The returned order matches the order in which the dimension names and values 
///     should be displayed to the user.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IImplicitlyActiveDimensionProvider"/> that bases
///     itself on <see cref="IProjectConfigurationDimensionsProvider"/> instances.
/// </summary>
// NOTE: Order matters; this must be in the order in which the providers are
// prioritized in 'builtInDimensions', of which Enumerable.Intersect guarantees.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides 'Platform' project configuration dimension and values.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides "TargetFramework" project configuration dimension and values.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Providers a wrapper around the what is considered the active debugging framework.
/// </summary>
/// <summary>
/// <see cref="IActiveDebugFrameworkServices.GetProjectFrameworksAsync"/>
/// </summary>
// It is important that we return the frameworks in the order they are specified in the project to ensure the default is set
// correctly. 
/// <summary>
/// <see cref="IActiveDebugFrameworkServices.SetActiveDebuggingFrameworkPropertyAsync"/>
/// </summary>
/// <summary>
/// <see cref="IActiveDebugFrameworkServices.GetActiveDebuggingFrameworkPropertyAsync"/>
/// </summary>
/// <summary>
/// <see cref="IActiveDebugFrameworkServices.GetConfiguredProjectForActiveFrameworkAsync"/>
/// </summary>
// Type or member is obsolete
// Type or member is obsolete
// If there is only one we are done
// We can't just select the first one. If activeFramework is not set we must pick the first one as defined by the 
// targetFrameworks property. So we need the order as returned by GetProjectFrameworks()
// All that is left is to return the first one.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Token replacer can be imported to replace all the msbuild property and environment variable tokens in an ILaunchProfile or
/// in an individual string
/// </summary>
// Regular expression string to extract $(sometoken) elements from a string
/// <summary>
/// Walks the profile and returns a new one where all the tokens have been replaced. Tokens can consist of
/// environment variables (%var%), or any msbuild property $(msbuildproperty). Environment variables are
/// replaced first, followed by msbuild properties.
/// </summary>
// Since Env variables are an immutable dictionary they are a little messy to update.
/// <summary>
/// Replaces the tokens and environment variables in a single string. If expandEnvironmentVars
/// is true, they are expanded first before replacement happens. If the rawString is null or empty
/// it is returned as is.
/// </summary>
// For each token we try to get a replacement value.
// Resolve with msbuild. It will return the empty string if not found
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Wrapper around the active debug framework to provide a single implementation of what is considered the active framework. If there is
/// only one framework.
/// </summary>
/// <summary>
/// Returns the set of frameworks in the order defined in msbuild. If not multi-targeting it returns null.
/// </summary>
/// <summary>
/// Sets the value of the active debugging target framework property.
/// </summary>
/// <summary>
/// Returns the value of the property, or empty string/null if the property has never been set.
/// </summary>
/// <summary>
/// Returns the configured project which represents the active framework. This is valid whether multi-targeting or not.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Given an ILaunchProfile, it will enumerate the items and do replacement on the each string
/// entry.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Used to get to the JsonString exported attribute by importers of ILaunchSettingsSerializationProvider
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Interface definition for a profile
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Interface definition for an immutable launch settings snapshot.
/// </summary>
/// <summary>
/// Access to the current set of launch profiles.
/// </summary>
/// <summary>
/// Provides access to custom global launch settings data. The returned value depends
/// on the section being retrieved. The settingsName matches the section in the
/// settings file.
/// </summary>
/// <summary>
/// Provides access to all the global settings.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Interface definition for the LaunchSettingsProvider.
/// </summary>
/// <summary>
/// Replaces the current set of profiles with the contents of profiles. If changes were
/// made, the file will be checked out and updated. If the active profile is different, the
/// active profile property is updated.
/// </summary>
/// <summary>
/// Blocks until at least one snapshot has been generated.
/// </summary>
/// <param name="timeout">The timeout in milliseconds.</param>
/// <summary>
/// Adds the given profile to the list and saves to disk. If a profile with the same 
/// name exists (case sensitive), it will be replaced with the new profile. If addToFront is
/// true the profile will be the first one in the list. This is useful since quite often callers want
/// their just added profile to be listed first in the start menu. 
/// </summary>
/// <summary>
/// Removes the specified profile from the list and saves to disk.
/// </summary>
/// <summary>
/// Adds or updates the global settings represented by settingName. Saves the 
/// updated settings to disk. Note that the settings object must be serializable.
/// </summary>
/// <summary>
/// Removes the specified global setting and saves the settings to disk
/// </summary>
/// <summary>
/// Sets the active profile. This just sets the property it does not validate that the setting matches an
/// existing profile
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="ILaunchSettingsProvider"/> with an
///     additional method <see cref="GetLaunchSettingsFilePathAsync"/> for retrieving
///     the launch settings file.
/// </summary>
/// <summary>
///     Gets the full path to the launch settings file, typically located under
///     "Properties\launchSettings.json" or "My Project\launchSettings.json" of
///     the project directory.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Interface implemented by providers of custom data. When the launch settings file is read the top level token matching the attribute
/// "JsonSection" is invoked to deserialize the json to an object. The export needs the attribute 
/// [ExportMetadata("JsonSection", "nameofjsonsection")]
/// [ExportMetadata("SerializationProvider", typeof(objectToSerialize))]
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Allows a launch settings provider to modify and extend the debug property page.
/// </summary>
/// <remarks>
/// Implementations of this interface each contribute an entry to the drop-down list of
/// launch profiles in the "Debug" project property page.
/// </remarks>
/// <summary>
/// The value of the <c>commandName</c> property written to the <c>launchSettings.json</c> file.
/// </summary>
/// <summary>
/// The user-friendly name of this this launch provider.
/// </summary>
/// <summary>
/// Allows a launch provider to suppress default properties from the UI.
/// </summary>
/// <remarks>
/// Currently supports the following default properties:
/// <list type="bullet">
///   <item><c>Executable</c></item>
///   <item><c>Arguments</c></item>
///   <item><c>LaunchUrl</c></item>
///   <item><c>EnvironmentVariables</c></item>
///   <item><c>WorkingDirectory</c></item>
/// </list>
/// Names should be treated case-insensitively. Constants for these names exist in <see cref="UIProfilePropertyName"/>.
/// </remarks>
/// <summary>
/// Provides an optional UI control for this launch provider to be displayed below other controls on the dialog.
/// May be <see langword="null"/> if the launch provider does not have any dedicated UI.
/// </summary>
/// <summary>
/// Called when the selected profile changes to a profile which matches this command.
/// </summary>
/// <param name="curSettings">The page's current values.</param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Extends <see cref="ILaunchProfile"/> to support in-memory (not persisted) profiles.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Interface definition for a writable launch profile
/// </summary>
// Convert back to the immutable form
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Interface definition for a modifiable launch settings
/// </summary>
// Convert back to the immutable form
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Extends IWritableLaunchProfile to handle in-memory only profiles
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Represents one launch profile read from the launchSettings file.
/// </summary>
/// <summary>
/// Useful to create a mutable version from an existing immutable profile
/// </summary>
// If there are no env variables or settings we want to set them to null
/// <summary>
/// Compares two profile names. Using this function ensures case comparison consistency
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Used to read in the profile data. Explicitly OptsIn for explicit json properties
/// </summary>
// Well known properties
// We don't serialize the name as it the dictionary index
// Or serialize the InMemoryProfile state
/// <summary>
/// To handle custom settings, we serialize using LaunchProfileData first and then walk the settings
/// to pick up other settings. Currently limited to boolean, integer, string and dictionary of string
/// </summary>
// We walk the profilesObject and serialize each subobject component as either a string, or a dictionary<string,string>
// Name of profile is the key, value is it's contents. We have specific serializing of the data based on the 
// JToken type
// Now pick up any custom properties. Handle string, int, boolean
// TODO: should have message indicating the setting is being ignored. Fix as part of issue
//       https://github.com/dotnet/project-system/issues/424
// Only add custom settings if we actually picked some up
/// <summary>
/// Helper to convert an ILaunchProfile back to its serializable form. Basically, it
/// converts it to a dictionary of settings. This preserves custom values
/// </summary>
// Don't write out empty elements
/// <summary>
/// Converts <paramref name="profile"/> to its serializable form.
/// It does some fix up, like setting empty values to <see langword="null"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Return a mutable instance
/// </summary>
/// <summary>
/// Returns true if nativeDebugging property is set to true
/// </summary>
/// <summary>
/// Returns true if sqlDebugging property is set to true
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Represents the current set of launch settings. Creation from an existing set of profiles. 
/// </summary>
// For global settings we want to make new copies of each entry so that the snapshot remains immutable. If the object implements 
// ICloneable that is used, otherwise, it is serialized back to json, and a new object rehydrated from that
// If no active profile specified, or the active one is no longer valid, assume the first one
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This class is used to hold the data serialized from the json file.  
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Manages the set of Debug profiles and web server settings and provides these as a dataflow source. Note
/// that many of the methods are protected so that unit tests can derive from this class and poke them as
/// needed w/o making them public
/// </summary>
// Command that means run this project
//  Command that means run an executable
// These are used internally to loop in debuggers to handle F5 when there are errors in
// the launch settings file or when there are no profiles specified (like class libraries)
// When we are saving the file we set this to minimize noise from the file change
// Tracks when we last read or wrote to the file. Prevents picking up needless changes
/// <summary>
/// Returns the active profile. Looks up the value of the ActiveProfile property. If the value doesn't match the
/// any of the profiles, the first one is returned
/// </summary>
/// <summary>
/// Link to this source block to be notified when the snapshot is changed.
/// </summary>
/// <summary>
/// IDebugProfileProvider
/// Access to the current set of profile information
/// </summary>        
// If this is the first snapshot, complete the taskCompletionSource
/// <summary>
/// The DebugProfileProvider sinks 2 sets of information
/// 1, Changes to the launchsettings.json file on disk
/// 2. Changes to the ActiveDebugProfile property in the .user file
/// </summary>
// Create our broadcast block for subscribers to get new ILaunchProfiles Information
// Subscribe to changes to the broadcast block using the idle scheduler. This should filter out a lot of the intermediate
// states that files can be in.
// The use of AsyncLazy with dataflow can allow state stored in the execution context to leak through. The downstream affect is
// calls to say, get properties, may fail. To avoid this, we capture the execution context here, and it will be reapplied when
// we get new subscription data from the dataflow.
// Make sure we are watching the file at this point
/// <summary>
/// Handles changes to the ProjectDebugger properties. Gets the active profile and generates a launch settings update if it
/// has changed. The first evaluation generally kicks off the first snapshot
/// </summary>
// Updates need to be sequenced
/// <summary>
/// Called when the active profile has changed. If there is a current snapshot it just updates that. Otherwise, it creates
/// a new snapshot
/// </summary>
/// <summary>
/// Does the processing to update the profiles when changes have been made to either the file or the active profile.
/// When merging with the disk, it needs to honor in-memory only profiles that may have been programmatically added. If
/// a profile on disk has the same name as an in-memory profile, the one on disk wins. It tries to add the in-memory profiles
/// in the same order they appeared prior to the disk change.
/// </summary>
// If no active profile specified, try to get one
// If there are no profiles, we will add a default profile to run the project. W/o it our debugger
// won't be called on F5 and the user will see a poor error message
// If we have a previous snapshot merge in in-memory profiles
// Errors are added as error list entries. We don't want to throw out of here
// However, if we have never created a snapshot it means there is some error in the file and we want
// to have the user see that, so we add a dummy profile which will bind to an existing debugger which will
// display the error when run
/// <summary>
/// Re-applies in-memory profiles to the newly created snapshot. Note that we don't want to merge in the error
/// profile
/// </summary>
// Does it already have one with this name?
// Create a new one from the existing in-memory profile and insert it in the same location, or the end if it
// is beyond the end of the list
/// <summary>
/// Re-applies in-memory global options to the newly created snapshot
/// </summary>
/// <summary>
/// Returns true of the file has changed since we last read it. Note that it returns true if the file
/// does not exist
/// </summary>
/// <summary>
/// Helper function to set the new snapshot, update the active profile property to match what is in the snapshot,  and post
/// the changes to consumers.
/// </summary>
/// <summary>
/// Gets the active profile based on the property changes
/// </summary>
/// <summary>
/// Creates the initial set of settings based on the file on disk
/// </summary>
// Make sure there is at least an empty profile list
/// <summary>
/// Reads the data from the launch settings file and returns it in a dictionary of settings section to object. Adds n error list entries
/// and throws if an exception occurs
/// </summary>
// Since the sections in the settings file are extensible we iterate through each one and have the appropriate provider
// serialize their section. Unfortunately, this means the data is string to object which is messy to deal with
// Find the matching json serialization handler for this section
// We still need to remember settings for which we don't have an extensibility component installed. For this we
// just keep the jObject which can be serialized back out when the file is written.
// Remember the time we are sync'd to
/// <summary>
/// Does a quick validation to make sure at least a name is present in each profile. Removes bad ones and
/// logs errors. Returns the resultant profiles as a list
/// </summary>
// The name is if the profile is set to the value key
/// <summary>
/// Saves the launch settings to the launch settings file. Adds an error string and throws if an exception. Note
/// that the caller is responsible for checking out the file
/// </summary>
// We don't want to write null values. We want to keep the file as small as possible
// Update the last write time
/// <summary>
/// Gets the serialization object for the set of profiles and custom settings. It filters out built in profiles that get added to
/// wire up the debugger infrastructure (NoAction profiles). Returns a dictionary of the elements to serialize.
/// Removes in-memory profiles and global objects
/// </summary>
/// <summary>
/// Helper returns true if this is a profile which should be persisted.
/// Filters out <see cref="IPersistOption.DoNotPersist"/> profiles.
/// </summary>
/// <summary>
/// Helper to check out the debugsettings.json file
/// </summary>
/// <summary>
/// Handler for when the Launch settings file changes. Actually, we watch the project root so any
/// file with the name LaunchSettings.json. We don't need to special case because, if a file with this name
/// changes we will only check if the one we cared about was modified.
/// </summary>
// We're in a synchronous callback
// Only do something if the file is truly different than what we synced. Here, we want to
// throttle.
// Updates need to be sequenced
/// <summary>
/// Makes sure the settings folder exists on disk. Doesn't add the folder to
/// the project.
/// </summary>
/// <summary>
/// Cleans up our watcher on the debugsettings.Json file
/// </summary>
/// <summary>
/// Sets up a file system watcher to look for changes to the launchsettings.json file. It watches at the root of the
/// project otherwise we force the project to have a properties folder.
/// </summary>
// Create our scheduler for processing file changes
// If the project folder is no longer available this will throw, which can happen during branch switching
/// <summary>
/// Need to make sure we cleanup the dataflow links and file watcher
/// </summary>
/// <param name="disposing"></param>
/// <summary>
/// Replaces the current set of profiles with the contents of profiles. If changes were
/// made, the file will be checked out and saved. Note it ignores the value of the active profile
/// as this setting is controlled by a user property.
/// </summary>
// Updates need to be sequenced. Do not call this version from within an ExecuteTask as it
// will deadlock
/// <summary>
/// Replaces the current set of profiles with the contents of profiles. If changes were
/// made, the file will be checked out and saved. Note it ignores the value of the active profile
/// as this setting is controlled by a user property.
/// </summary>
// Make sure the profiles are copied. We don't want them to mutate.
/// <summary>
/// This function blocks until a snapshot is available. It will return null if the timeout occurs
/// prior to the snapshot is available
/// </summary>
/// <summary>
/// Adds the given profile to the list and saves to disk. If a profile with the same
/// name exists (case sensitive), it will be replaced with the new profile. If addToFront is
/// true the profile will be the first one in the list. This is useful since quite often callers want
/// their just added profile to be listed first in the start menu. If addToFront is false but there is
/// an existing profile, the new one will be inserted at the same location rather than at the end.
/// </summary>
// Updates need to be sequenced
// Insertion index will be set to the current count (end of list) if an existing item was not found otherwise
// it will point to where the previous one was found
// If the new profile is in-memory only, we don't want to touch the disk unless it replaces an existing disk based
// profile
/// <summary>
/// Removes the specified profile from the list and saves to disk.
/// </summary>
// Updates need to be sequenced
// If the new profile is in-memory only, we don't want to touch the disk
/// <summary>
/// Adds or updates the global settings represented by settingName. Saves the
/// updated settings to disk. Note that the settings object must be serializable.
/// </summary>
// Updates need to be sequenced
/// <summary>
/// Removes the specified global setting and saves the settings to disk
/// </summary>
// Updates need to be sequenced
/// <summary>
/// Helper retrieves the current snapshot (waiting up to 5s) and if there were errors in the launchsettings.json file
/// or there isn't a snapshot, it throws an error. There should always be a snapshot of some kind returned
/// </summary>
/// <summary>
/// Sets the active profile. This just sets the property it does not validate that the setting matches an
/// existing profile
/// </summary>
// NOTE: To reduce behavior changes, we currently cache the folder that we get from the AppDesignerSpecialFileProvider,
// even though it can change over the lifetime of the project. We should fix this and convert to using dataflow
// see: https://github.com/dotnet/project-system/issues/2316.
// AppDesigner capability not present, or the project has set AppDesignerFolder to empty
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Represents one launch profile read from the launchSettings file.
/// </summary>
/// <summary>
/// Converts back to the immutable form
/// </summary>
/// <summary>
/// Compares two IWritableLaunchProfile to see if they contain the same values.
/// </summary>
// Same instance are equal
// Compare in-memory states
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// For global settings we want to make new copies of each entry so that the snapshot remains immutable. If the object implements 
// ICloneable that is used, otherwise, it is serialized back to json, and a new object rehydrated from that
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Now compare each item. We can compare in order. If the lists are different then the settings are different even
// if they contain the same items
// Check the global settings
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Interface definition for global scope VS MEF component, which helps to get MEF exports from a
/// project level scope given IVsHierarchy or project file path.
/// </summary>
/// <summary>
/// Returns the export for the given project without having to go to the 
/// UI thread. This is the preferred method for getting access to project specific
/// exports.
/// </summary>
/// <exception cref="System.ArgumentException"><paramref name="projectFilePath"/> is <see langword="null" /> or empty.</exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// MEF component which has methods for consumers to get to project specific MEF exports
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Basic target framework info. Can be <see langword="null" /> if the framework is unknown.
/// </summary>
/// <summary>
/// Gets the full moniker (TFM).
/// </summary>
/// <summary>
/// Gets the short name.
/// </summary>
/// <summary>
/// Gets the display name. Can be an empty string.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Parses full tfm or short framework name and returns a corresponding <see cref="ITargetFramework"/>
/// instance, or <see langword="null" /> if the framework name has an invalid format.
/// </summary>
/// <summary>
/// Returns the item in <paramref name="otherFrameworks"/> that is most compatible/closest to
/// <paramref name="targetFramework"/>, or <see langword="null" /> if none are compatible.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Any represents all TFMs, no need to be localized, used only in internal data.
/// </summary>
/// <summary>
/// Should be never used directly, this is for special cases or for some unknown framework,
/// that Nuget is not aware of - highly unlikely to happen.
/// </summary>
/// <param name="moniker"></param>
/// <summary>
/// Override Equals to handle equivalency correctly. They are equal if the 
/// monikers match
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the AppDesigner folder image.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides project images given a specific key.
/// </summary>
/// <summary>
///     Returns the <see cref="ProjectImageMoniker"/> for the specified key, returning <see langword="null"/>
///     if the provider does handle the specified key.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known <see cref="ProjectImageMoniker"/> keys.
/// </summary>
/// <summary>
///     Represents the image key for the root of a project hierarchy.
/// </summary>
/// <summary>
///     Represents the image key for the root of a shared project hierarchy.
/// </summary>
/// <summary>
///     Represents the image key for the Shared.items file that is imported into this project in order to add a shared folder.
/// </summary>
/// <summary>
///     Represents the image key for the AppDesigner folder (called "Properties" in C# and "My Project" in VB).
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Aggregates <see cref="IProjectImageProvider"/> instances into a single importable
///     <see cref="IProjectImageProvider"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides C# project images.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides F# project images.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Return null so VS can supply the default icons.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides Visual Basic project images.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the base <see langword="abstract"/> class for all commands that operate on <see cref="IProjectTree"/> nodes.
/// </summary>
// All ProjectCommand's should be marked with [ProjectCommandAttribute]
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the base <see langword="abstract"/> class for all commands that handle a single <see cref="IProjectTree"/> node.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Specifies the command group and ID of a given <see cref="AbstractProjectCommand"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IActiveWorkspaceProjectContextHost"/> that delegates 
///     onto the active configuration's <see cref="IWorkspaceProjectContextHost"/>.
/// </summary>
// The active configuration can change multiple times during initialization in cases where we've incorrectly
// guessed the configuration via our IProjectConfigurationDimensionsProvider3 implementation.
// Wait until that has been determined before we publish the wrong configuration.
// Host was unloaded because configuration changed, retry on new config
// Host was unloaded because configuration changed, retry on new config
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Applies <see cref="IProjectVersionedValue{T}"/> values to a <see cref="IWorkspaceProjectContext"/>.
/// </summary>
/// <remarks>
///     This class is not thread-safe and it is up to callers to prevent overlapping of calls to 
///     <see cref="ApplyProjectBuildAsync(IProjectVersionedValue{IProjectSubscriptionUpdate}, bool, CancellationToken)"/> and
///     <see cref="ApplyProjectEvaluationAsync(IProjectVersionedValue{IProjectSubscriptionUpdate}, bool, CancellationToken)"/>.
/// </remarks>
// If 'CompileDesignTime' didn't run due to a preceding failed target, or a failure in itself, IsEvaluationSucceeded returns false.
//
// We still forward those 'removes' of references, sources, etc onto Roslyn to avoid duplicate/incorrect results when the next
// successful build occurs, because it will be diff between it and this failed build.
// We just pass all options to Roslyn
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Tracks the "active" <see cref="IWorkspaceProjectContext"/> for the editor within an <see cref="UnconfiguredProject"/>.
/// </summary>
/// <remarks>
///     <para>
///         The "active" context for the editor is the one that Roslyn uses to drive IntelliSense, refactorings
///         and code fixes. This is typically controlled by the user via the project drop down in the top-left 
///         of the editor, but can be changed in reaction to other factors.
///     </para>
///     <para>
///         NOTE: This is distinct from the "active" context for an <see cref="UnconfiguredProject"/> which is 
///         tracked via <see cref="IActiveWorkspaceProjectContextHost"/>.
///     </para>
/// </remarks>
/// <summary>
///     Returns a value indicating whether the specified <see cref="IWorkspaceProjectContext"/> is the active one for the editor.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="contextId"/> is <see langword="null" />
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="contextId"/> is an empty string ("").
/// </exception>
/// <exception cref="InvalidOperationException">
///     <paramref name="contextId"/> has not been registered or has already been unregistered.
/// </exception>
/// <summary>
///     Registers the <see cref="IWorkspaceProjectContext"/> with the tracker.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="contextId"/> is <see langword="null" />.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="contextId"/> is an empty string ("").
/// </exception>
/// <exception cref="InvalidOperationException">
///     <paramref name="contextId"/> has already been been registered.
/// </exception>
/// <summary>
///     Unregisters the <see cref="IWorkspaceProjectContext"/> with the tracker.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="contextId"/> is <see langword="null" />
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="contextId"/> is an empty string ("").
/// </exception>
/// <exception cref="InvalidOperationException">
///     <paramref name="contextId"/> has not been registered or has already been unregistered.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Hosts the "active" <see cref="IWorkspaceProjectContext"/> for an <see cref="UnconfiguredProject"/> 
///     and provides consumers access to it.
/// </summary>
/// <remarks>
///     <para>
///         The "active" <see cref="IWorkspaceProjectContext"/> for an <see cref="UnconfiguredProject"/> is the one associated 
///         with the solution's active configuration and represents the context that is used for features that are not yet aware 
///         of multi-targeting projects, including Razor, compiler errors/warnings that come from build (#4034) and Edit-and-Continue. 
///         All other features should live in the <see cref="ConfiguredProject"/> scope and import the current 
///         <see cref="IWorkspaceProjectContextHost"/> .
///     </para>
///     <para>
///         NOTE: This is distinct from the "active" context for the editor which is tracked via <see cref="IActiveEditorContextTracker"/>.
///     </para>
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Applies <see cref="IProjectVersionedValue{T}"/> values to a <see cref="IWorkspaceProjectContext"/>.
/// </summary>
/// <summary>
///     Returns an enumerable of project evaluation rules that should passed to
///     <see cref="ApplyProjectEvaluationAsync(IProjectVersionedValue{IProjectSubscriptionUpdate}, bool, CancellationToken)"/>.
/// </summary>
/// <summary>
///     Returns an enumerable of project build rules that should passed to
///     <see cref="ApplyProjectBuildAsync(IProjectVersionedValue{IProjectSubscriptionUpdate}, bool, CancellationToken)"/>.
/// </summary>
/// <summary>
///     Initializes the service with the specified <see cref="IWorkspaceProjectContext"/>.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="context"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="InvalidOperationException">
///     <see cref="Initialize(IWorkspaceProjectContext)"/> has already been called.
/// </exception>
/// <summary>
///     Applies project evaluation changes to the underlying <see cref="IWorkspaceProjectContext"/>.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="update"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="InvalidOperationException">
///     <see cref="Initialize(IWorkspaceProjectContext)"/> has not been called.
/// </exception>
/// <exception cref="ObjectDisposedException">
///     The <see cref="IApplyChangesToWorkspaceContext"/> has been disposed of.
/// </exception>
/// <exception cref="OperationCanceledException">
///     The result is awaited and <paramref name="cancellationToken"/> is cancelled.
/// </exception>
/// <remarks>
///     Note: Cancelling the <paramref name="cancellationToken"/> may result in the underlying
///     <see cref="IWorkspaceProjectContext"/> to be left in an inconsistent state with respect
///     to the project snapshot state. The cancellation token should only be cancelled with the
///     intention that the <see cref="IWorkspaceProjectContext"/> will be immediately disposed.
/// </remarks>
/// <summary>
///     Applies project build changes to the underlying <see cref="IWorkspaceProjectContext"/>.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="update"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="InvalidOperationException">
///     <see cref="Initialize(IWorkspaceProjectContext)"/> has not been called.
/// </exception>
/// <exception cref="ObjectDisposedException">
///     The <see cref="IApplyChangesToWorkspaceContext"/> has been disposed of.
/// </exception>
/// <exception cref="OperationCanceledException">
///     The result is awaited and <paramref name="cancellationToken"/> is cancelled.
/// </exception>
/// <remarks>
///     Note: Cancelling the <paramref name="cancellationToken"/> may result in the underlying
///     <see cref="IWorkspaceProjectContext"/> to be left in an inconsistent state with respect
///     to the project snapshot state. The cancellation token should only be cancelled with the
///     intention that the <see cref="IWorkspaceProjectContext"/> will be immediately disposed.
/// </remarks>
/// <summary>
///     Applies project changes to the underlying <see cref="IWorkspaceProjectContext"/>.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="update"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="InvalidOperationException">
///     <see cref="Initialize(IWorkspaceProjectContext)"/> has not been called.
/// </exception>
/// <exception cref="ObjectDisposedException">
///     The <see cref="IApplyChangesToWorkspaceContext"/> has been disposed of.
/// </exception>
/// <exception cref="OperationCanceledException">
///     The result is awaited and <paramref name="cancellationToken"/> is cancelled.
/// </exception>
/// <remarks>
///     Note: Cancelling the <paramref name="cancellationToken"/> may result in the underlying
///     <see cref="IWorkspaceProjectContext"/> to be left in an inconsistent state with respect
///     to the project snapshot state. The cancellation token should only be cancelled with the
///     intention that the <see cref="IWorkspaceProjectContext"/> will be immediately disposed.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles changes within the command-line, and applies them to a 
///     <see cref="IWorkspaceProjectContext"/> instance.
/// </summary>
/// <summary>
///     Handles the specified added and removed command-line arguments, and applies 
///     them to the underlying <see cref="IWorkspaceProjectContext"/>.
/// </summary>
/// <param name="version">
///     An <see cref="IComparable"/> representing the <see cref="ConfiguredProject.ProjectVersion"/> at
///     the time the <see cref="BuildOptions"/> were produced.
/// </param>
/// <param name="added">
///     A <see cref="BuildOptions"/> representing the added arguments.
/// </param>
/// <param name="removed">
///     A <see cref="BuildOptions"/> representing the removed arguments.
/// </param>
/// <param name="isActiveContext">
///     <see langword="true"/> if the underlying <see cref="IWorkspaceProjectContext"/>
///     is the active context; otherwise, <see langword="false"/>.
/// </param>
/// <param name="logger">
///     The <see cref="IProjectLogger"/> for logging to the log.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="version"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="added"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="removed"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="logger"/> is <see langword="null"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Parses <see cref="BuildOptions"/> instances from string-based command-line arguments.
/// </summary>
/// <summary>
///     Parses the specified string-based command-line arguments.
/// </summary>
/// <param name="arguments">
///     A <see cref="IEnumerable{T}"/> of <see cref="string"/> representing the individual command-line
///     arguments.
/// </param>
/// <param name="baseDirectory">
///     A <see cref="string"/> containing the base directory used for qualifying file locations.
/// </param>
/// <returns>
///     An <see cref="BuildOptions"/> representing the result.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="arguments"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="baseDirectory"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="baseDirectory"/> is an empty string ("").
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// General abstraction of type that needs to be notified when a file rename occurs in the project system
/// </summary>
/// <summary>
/// Notifies the handler that the given file has been renamed from oldFilePath to newFilePath.
/// </summary>
/// <param name="oldFilePath">The original path and name of the file</param>
/// <param name="newFilePath">The new path and name of the file</param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles changes to project evaluation rule and applies them to a
///     <see cref="IWorkspaceProjectContext"/> instance.
/// </summary>
/// <summary>
///     Gets the project evaluation rule that the <see cref="IProjectEvaluationHandler"/> handles.
/// </summary>
/// <summary>
///     Handles the specified set of changes to the project evaluation rule, and applies them
///     to the underlying <see cref="IWorkspaceProjectContext"/>.
/// </summary>
/// <param name="version">
///     An <see cref="IComparable"/> representing the <see cref="ConfiguredProject.ProjectVersion"/> at
///     the time the <see cref="IProjectChangeDescription"/> was produced.
/// </param>
/// <param name="projectChange">
///     A <see cref="IProjectChangeDescription"/> representing the set of 
///     changes made to the project.
/// </param>
/// <param name="isActiveContext">
///     <see langword="true"/> if the underlying <see cref="IWorkspaceProjectContext"/>
///     is the active context; otherwise, <see langword="false"/>.
/// </param>
/// <param name="logger">
///     The <see cref="IProjectLogger"/> for logging to the log.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="version"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="projectChange"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="logger"/> is <see langword="null"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Gets the project evaluation rule that the <see cref="IProjectEvaluationHandler"/> handles.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// A Language service for Unconfigured Projects that can answer questions about language syntax
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents a marker interface for types that apply changes to <see cref="IWorkspaceProjectContext"/> instances.
/// </summary>
/// <summary>
///     Initializes the handler with the specified <see cref="IWorkspaceProjectContext"/>.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="context"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="InvalidOperationException">
///     <see cref="Initialize(IWorkspaceProjectContext)"/> has already been called.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides access to a <see cref="IWorkspaceProjectContext"/> and associated services.
/// </summary>
/// <summary>
///     Gets an identifier that uniquely identifies the <see cref="IWorkspaceProjectContext"/> across a solution.
/// </summary>
/// <summary>
///     Gets the <see cref="IWorkspaceProjectContext"/> that provides access to the language service.
/// </summary>
/// <summary>
///     Gets an object that represents a host-specific error reporter.
/// </summary>
/// <remarks>
///     Within a Visual Studio host, this is typically an object implementing IVsLanguageServiceBuildErrorReporter2.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Hosts an <see cref="IWorkspaceProjectContext"/> for a <see cref="ConfiguredProject"/> and provides consumers access to it.
/// </summary>
/// <summary>
///     Returns a task that will complete when current <see cref="IWorkspaceProjectContextHost"/> has completed
///     loading.
/// </summary>
/// <exception cref="OperationCanceledException">
///     The result is awaited and the <see cref="ConfiguredProject"/> is unloaded.
///     <para>
///         -or
///     </para>
///     The result is awaited and <paramref name="cancellationToken"/> is cancelled.
/// </exception>
/// <remarks>
///     This method does not initiate loading of the <see cref="IWorkspaceProjectContextHost"/>, however,
///     it will join the load when it starts.
/// </remarks>
/// <summary>
///     Opens the <see cref="IWorkspaceProjectContext"/>, passing it to the specified action for writing.
/// </summary>
/// <param name="action">
///     The <see cref="Func{T, TResult}"/> to run while holding the lock.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="action"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="OperationCanceledException">
///     The result is awaited and the <see cref="ConfiguredProject"/> is unloaded.
/// </exception>
/// <exception cref="ActiveProjectConfigurationChangedException">
///     The <see cref="IWorkspaceProjectContextHost"/> represents the active one, and 
///     the configuration changed.
/// </exception>
/// <summary>
///     Opens the <see cref="IWorkspaceProjectContext"/>, passing it to the specified action for writing.
/// </summary>
/// <param name="action">
///     The <see cref="Func{T, TResult}"/> to run while holding the lock.
/// </param>
/// <returns>
///     The result of <paramref name="action"/>.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="action"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="OperationCanceledException">
///     The result is awaited and the <see cref="ConfiguredProject"/> is unloaded.
/// </exception>
/// <exception cref="ActiveProjectConfigurationChangedException">
///     The <see cref="IWorkspaceProjectContextHost"/> represents the active one, and 
///     the configuration changed.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides methods for creating and releasing <see cref="IWorkspaceProjectContextAccessor"/> instances.
/// </summary>
/// <summary>
///     Creates a <see cref="IWorkspaceProjectContextAccessor"/> for the specified <see cref="ConfiguredProject"/>.
/// </summary>
/// <returns>
///     The created <see cref="IWorkspaceProjectContextAccessor"/>.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="project"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Release the <see cref="IWorkspaceProjectContextAccessor"/>.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="accessor"/> is <see langword="null"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Responsible for creating and initializing <see cref="IWorkspaceProjectContext"/> and sending 
///     on changes to the project to the <see cref="IApplyChangesToWorkspaceContext"/> service.
/// </summary>
// Does not own liftime
// Throws ActiveProjectConfigurationChangedException if 'instance' is Disposed
// Does not own liftime
// Throws ActiveProjectConfigurationChangedException if 'instance' is Disposed
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Responsible for lifetime of a <see cref="IWorkspaceProjectContext"/> and applying changes to a 
///     project to the context via the <see cref="IApplyChangesToWorkspaceContext"/> service.
/// </summary>
// We avoid suppressing version updates, so that progress tracker doesn't
// think we're still "in progress" in the case of an empty change
// We treat cancellation because our instance was disposed differently from when the project is unloading.
// 
// The former indicates that the active configuration changed, and our ConfiguredProject is no longer 
// considered implicitly "active", we throw a different exceptions to let callers handle that.
// Notify operation progress that we've now processed these versions of our input, if they are
// up-to-date with the latest version that produced, then we no longer considered "in progress".
// We should have been initialized by our 
// owner before they called into us
// If we failed to create a context, we treat it as a cancellation
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Ensures that the <see cref="IWorkspaceProjectContext"/> for the "active" configuration has 
///     been loaded by the time users and extensions can interact with the project.
/// </summary>
/// <remarks>
///     It is important to make sure Roslyn is aware of the project by the time the project can be 
///     interacted with so that restored documents and other features used quickly after solution 
///     load behave correctly and have "project context".
/// </remarks>
// While we want make sure it's loaded before PrioritizedProjectLoadedInHost, 
// we don't want to block project factory completion on its load, so fire and forget
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Creates <see cref="IWorkspaceProjectContext"/> instances using data 
///     from any specified <see cref="ConfiguredProject"/>.
/// </summary>
// From Roslyn, so lazy
// TODO: https://github.com/dotnet/project-system/issues/353.
// TODO: https://github.com/dotnet/project-system/issues/353.
// Call into Roslyn to init language service for this project
// By default, turn off diagnostics until the first design time build succeeds for this project.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Contains initialization data for creating a <see cref="IWorkspaceProjectContext"/>.
/// </summary>
// If we don't have these MSBuild values as a minimum, we cannot create a context.
// WorkspaceContextId must be unique across the entire solution for the life of the solution, therefore as we fire 
// up a workspace context per implicitly active config, we factor in both the full path of the project, the GUID of 
// project and the name of the config. This will be unique across regardless of whether projects are added or renamed 
// to match this project's original name. We include file path to make debugging easier on the Roslyn side.
//
// NOTE: Roslyn also uses this name as the default "AssemblyName" until we explicitly set it, so we need to make 
// sure it doesn't contain any invalid path characters.
//
// For example:
//      C:\Project\Project.csproj (Debug;AnyCPU {72B509BD-C502-4707-ADFD-E2D43867CF45})
//      C:\Project\MultiTarget.csproj (Debug;AnyCPU;net45 {72B509BD-C502-4707-ADFD-E2D43867CF45})
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// e.g., /r:C:\Path\To\FSharp.Core.dll
// e.g., -r:C:\Path\To\FSharp.Core.dll
// e.g., --reference:C:\Path\To\FSharp.Core.dll
// not an option, should be a regular file
// Neither a reference, nor a source file
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Responsible for coordinating changes and conflicts between evaluation and design-time builds, and pushing those changes
///     onto Roslyn via a <see cref="IWorkspaceProjectContext"/>.
/// </summary>
// This class is not thread-safe, and the assumption is that the caller will make sure that project evaluations and builds (design-time) 
// do not overlap inside the class at the same time.
//
// In the ideal world, we would simply wait for a design-time build to get the command-line arguments that would have been passed
// to Csc/Vbc and push these onto Roslyn. This is exactly what the legacy project system did; when a user added or removed a file
// or changed the project, it performed a blocking wait on the design-time build before returning control to the user. In CPS,
// however, design-time builds are not UI blocking, so control can be returned to the user before Roslyn has been told about the 
// file. This leads to the user observable behavior where the source file for a period of time lives in the "Misc" project and is 
// without "project" IntelliSense. To counteract that, we push changes both in design-time builds *and* during evaluations, which 
// gives the user results a lot faster than if we just pushed during design-time builds only. Evaluations are guaranteed to have 
// occurred before a file is seen by components outside of the project system.
//
// Typically, adds and removes of files found at evaluation time are also found during a design-time build, with the later also 
// including generated files. This forces us to remember what files we've already sent to Roslyn to avoid sending duplicate adds
// or removes of the same file. Due to design-time builds being significantly slower than evaluations, there are also times where 
// many evaluations have occured by the time a design-time build based on a past version of the ConfiguredProject has completed.
// This can lead to conflicts.
//
// A conflict occurs when evaluation or design-time build adds a item that the other removed, or vice versa. 
// 
//  Examples of conflicts include:
//
//   - A user removes a item before a design-time build that contains the addition of that item has finished
//   - A user adds a item before a design-time build that contains the removal of that item has finished
//   - A user adds a item that was previously generated by a target (but stopped generating it)
//   - A user removes a item and in the same version it starts getting generated via a target during design-time build
//
//  Examples of changes that are not conflicts include:
// 
//   - A user adds a item and it appears as an addition in both evaluation and design-time build (the item is always added)
//   - A user removes a item and it appears as a removal in both evaluation and design-time build  (the item is always removed)
//   - A target during design-time build generates an item that did not appear during evaluation (the item is always added)
//   - A target, new since the last design-time build, removes a item that appeared during evaluation (the item is always removed)
//
// TODO: These are also not conflicts, but we're currently handling differently to a normal build, which we should fix:
//
//    - A target from the very first design-time build, removed an item that appeared during evaluation. Currently, the item is "added"
//      but command-line builds do not see the source file. This is because a design-time build IProjectChangeDescription is only a 
//      diff between itself and the previous build, not between itself and evaluation, which means that design-time build diff never 
//      knows that the item was removed, it was just never present.
//
// Algorithm for resolving conflicts is as follows:
//
// 1. Walk every evaluation since the last design-time build, discarding those from conflict resolution that have a version less 
//    than or equal to the current design-time build. 
// 2. Walk every design-time build addition, if there's an associated removal in a later evaluation - we throw away the addition
// 3. Walk every design-time build removal, if there's an associated addition in a later evaluation - we throw away the removal
//
// We don't resolve conflicts between changes items, because the design-time build doesn't produce them due to the way we represent
// command-line arguments as individual item includes, such as <CscCommandLineArguments Include="/reference:Foo.dll"/>, without any 
// metadata.
//
/// <summary>
///     Initializes a new instance of the <see cref="AbstractEvaluationCommandLineHandler"/> class with the specified project.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="project"/> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Applies the specified version of the project evaluation <see cref="IProjectChangeDiff"/> and metadata to the underlying 
///     <see cref="IWorkspaceProjectContext"/>, indicating if the context is the currently active one.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="version"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="difference" /> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="metadata" /> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="logger" /> is <see langword="null"/>.
/// </exception>
/// <summary>
///     Applies the specified version of the project build <see cref="IProjectChangeDiff"/> to the underlying
///     <see cref="IWorkspaceProjectContext"/>, indicating if the context is the currently active one.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="version"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="difference" /> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="logger" /> is <see langword="null"/>.
/// </exception>
// We Remove then Add changed items to pick up the Linked metadata
// Wait for all context changed to be propagated first before handling rename
// Remove from the context first so if Roslyn throws due to a bug 
// or other reason, that our state of the world remains consistent
// Add to the context first so if Roslyn throws due to a bug or
// other reason, that our state of the world remains consistent
// Walk all evaluations (if any) that occurred since we launched and resolve the conflicts
// Remove added items that were removed by later evaluations, and vice versa
// Throw away evaluations that are the same version or earlier than the design-time build
// version as it has more up-to-date information on the the current state of the project
// Note, evaluations could be empty if previous evaluations resulted in no new changes
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents a set of differences made to a project along with a version.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles changes to the  &lt;AdditionalFiles/&gt; item during design-time builds.
/// </summary>
// WORKAROUND: To avoid Roslyn throwing when we add duplicate additional files, we remember what 
// sent to them and avoid sending on duplicates.
// See: https://github.com/dotnet/project-system/issues/2230
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles changes to the  &lt;EditorConfigFiles/&gt; items during design-time builds.
/// </summary>
// WORKAROUND: To avoid Roslyn throwing when we add duplicate additional files, we remember what 
// sent to them and avoid sending on duplicates.
// See: https://github.com/dotnet/project-system/issues/2230
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles changes to the  &lt;Analyzer/&gt; item during design-time builds.
/// </summary>
// WORKAROUND: To avoid Roslyn throwing when we add duplicate analyzers, we remember what 
// sent to them and avoid sending on duplicates.
// See: https://github.com/dotnet/project-system/issues/2230
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     An indirection that sends design-time build results in the form of command-line arguments to the F# language-service.
/// </summary>
/// <remarks>
///     This indirection is needed because Microsoft.VisualStudio.ProjectSystem.FSharp does not have InternalsVisibleTo access to Roslyn.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles changes to Compile items during project evaluations and items that are passed
///     to the compiler during design-time builds.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles changes to dynamic items, such as Razor CSHTML files.
/// </summary>
// We Remove then Add changed items to pick up the Linked metadata
// Note a file called just '.cshtml' is still considered a Razor file
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Normalizes <see cref="IProjectChangeDiff.RenamedItems"/> to <see cref="IProjectChangeDiff.AddedItems"/>
///     and <see cref="IProjectChangeDiff.RemovedItems"/>.
/// </summary>
// Optimize for common case
// Treat renamed items as just as an Add and Remove, makes finding conflicts easier
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles changes to references that are passed to the compiler during design-time builds.
/// </summary>
// WORKAROUND: The language services through IWorkspaceProjectContext doesn't expect to see AddMetadataReference called more than
// once with the same path and different properties. This dedupes the references to work around this limitation.
// See: https://github.com/dotnet/project-system/issues/2230
// The reference has already been added previously. The current implementation of IWorkspaceProjectContext
// presumes that we'll only called AddMetadataReference once for a given path. Thus we have to remove the
// existing one, compute merged properties, and add the new one.
// Subtract any existing aliases out. This will be an empty list if we should remove the reference entirely
// There's nothing left here, completely remove it
// resultantAliases might be the global alias. In that case, let's remove it again.
/// <summary>
/// Returns the list of aliases, replacing an empty list with "global".
/// </summary>
/// <summary>
/// Returns the list of aliases, replacing a list containing just "global" back to the empty list.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles changes to the project file, and updates <see cref="IWorkspaceProjectContext.ProjectFilePath"/> 
///     and <see cref="IWorkspaceProjectContext.DisplayName"/>.
/// </summary>
// Calculate the display name to use for the editor context switch and project column
// in the Error List.
//
// When multi-targeting, we want to include the implicit dimension values in 
// the name to disambiguate it from other contexts in the same project. For example:
//
// ClassLibrary (net45)
// ClassLibrary (net46)
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles changes to the project and makes sure the language service is aware of them.
/// </summary>
// Is it a property we're specifically aware of?
// Otherwise, just pass it through
// The language service wants both the intermediate (bin\obj) and output (bin\debug)) paths
// so that it can automatically hook up project-to-project references. It does this by matching the 
// bin output path with the another project's /reference argument, if they match, then it automatically 
// introduces a project reference between the two. We pass the intermediate path via the /out 
// command-line argument and set via one of the other handlers, where as the latter is calculated via 
// the TargetPath property and explicitly set on the context.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides methods for logging project messages.
/// </summary>
/// <summary>
///     Gets a value indicating if the logger is enabled.
/// </summary>
/// <value>
///     <see langword="true"/> if the <see cref="IProjectLogger"/> is 
///     enabled and logging to the log; otherwise, <see langword="false"/>.
/// </value>
/// <summary>
///     If <see cref="IsEnabled"/> is <see langword="true"/>, writes
///     the text representation of the format, followed by the current
///     line terminator
/// </summary>
/// <exception cref="FormatException">
///     <see cref="IsEnabled"/> is <see langword="true"/> and the format 
///     specification in <paramref name="format"/> is invalid.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     An <see cref="IProjectLogger"/> that batches up logging writes
///     and writes them all at once on <see cref="IDisposable.Dispose"/>.
/// </summary>
/// <summary>
///     Gets or sets the indent level.
/// </summary>
/// <value>
///     The indent level. The default is 0.
/// </value>
/// <exception cref="ArgumentOutOfRangeException">
///     <paramref name="value"/> is less than 0.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides extension methods for <see cref="IProjectLogger"/> instances.
/// </summary>
/// <summary>
///     Begins a logging batch that batches up logging writes
///     and writes them all at once on <see cref="IDisposable.Dispose"/>.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="logger"/> is <see langword="null"/>
/// </exception>
/// <summary>
///     If <see cref="IProjectLogger.IsEnabled"/> is <see langword="true"/>,
///     writes the current line terminator to the log.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="logger"/> is <see langword="null"/>
/// </exception>
/// <summary>
///     If <see cref="IProjectLogger.IsEnabled"/> is <see langword="true"/>,
///     writes the specified text, followed by the current line terminator,
///     to the log.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="logger"/> is <see langword="null"/>
/// </exception>
/// <summary>
///     If <see cref="IProjectLogger.IsEnabled"/> is <see langword="true"/>,
///     writes the text representation of the specified object, followed 
///     by the current line terminator, to the log using the specified 
///     format information.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="logger"/> is <see langword="null"/>
///     <para>
///         -or-
///     </para>
///     <paramref name="format"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="FormatException">
///     The format specification in <paramref name="format"/> is invalid.
/// </exception>
/// <summary>
///     If <see cref="IProjectLogger.IsEnabled"/> is <see langword="true"/>,
///     writes the text representation of the specified objects, followed 
///     by the current line terminator, to the log using the specified format
///     information.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="logger"/> is <see langword="null"/>
///     <para>
///         -or-
///     </para>
///     <paramref name="format"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="FormatException">
///     The format specification in <paramref name="format"/> is invalid.
/// </exception>
/// <summary>
///     If <see cref="IProjectLogger.IsEnabled"/> is <see langword="true"/>,
///     writes the text representation of the specified objects, followed 
///     by the current line terminator, to the log using the specified 
///     format information.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="logger"/> is <see langword="null"/>
///     <para>
///         -or-
///     </para>
///     <paramref name="format"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="FormatException">
///     The format specification in <paramref name="format"/> is invalid.
/// </exception>
/// <summary>
///     If <see cref="IProjectLogger.IsEnabled"/> is <see langword="true"/>,
///     writes the  text representation of the specified array of objects, 
///     followed  by the current line terminator, to the log using the 
///     specified format information.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="logger"/> is <see langword="null"/>
///     <para>
///         -or-
///     </para>
///     <paramref name="format"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="FormatException">
///     The format specification in <paramref name="format"/> is invalid.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Need to factor in that when we eventually write to the logger
// it's going to append a new line to the string we write, so we 
// only append the new line just before we write another string.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides extension methods for <see cref="IDataProgressTrackerService"/>.
/// </summary>
/// <summary>
///    Registers an output to be monitored for the "IntelliSense" stage. The returned registration needs to be notified when new data is calculated.
/// </summary>
// We deliberately do not want these individual operations in a stage (such as pushing evaluation
// results to Roslyn) to be visible to the user, so we avoiding specifying a display message.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents the stage that represents all the operations that contribute to IntelliSense results.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// An implementation of IProjectProperties that delegates its operations
/// to another IProjectProperties object
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Base class for Project Property Providers that delegate most of their
/// responsibilities to a different project property provider, only overriding
/// the things they want to change.
/// </summary>
/// <summary>
/// Gets the unconfigured project
/// </summary>
/// <summary>
/// The Project Properties Provider that is delegated to for most operations
/// </summary>
/// <summary>
/// The Project Instance Properties provider that is being delegated to for most operations
/// </summary>
/// <summary>
/// Construct using the provider that should be delegated to for most operations
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides members for for opening the Project Designer and querying whether it is supported.
/// </summary>
/// <summary>
///     Gets a value indicating whether the current project supports the Project Designer.
/// </summary>
/// <value>
///     <see langword="true"/> if the current project supports the Project Designer; otherwise, <see langword="false"/>.
/// </value>
/// <summary>
///     Shows the current project's Project Designer window.
/// </summary>
/// <exception cref="InvalidOperationException">
///     <see cref="SupportsProjectDesigner"/> is <see langword="false"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Finds the resolved reference item for a given unresolved reference.
/// </summary>
/// <param name="projectRuleSnapshot">Resolved reference project items snapshot to search.</param>
/// <param name="itemSpec">The unresolved reference item name.</param>
/// <returns>The key is item name and the value is the metadata dictionary.</returns>
/// <summary>
/// Attempts to get the string value corresponding to <paramref name="key"/>.
/// </summary>
/// <remarks>
/// Missing and empty string values are treated in the same fashion.
/// </remarks>
/// <param name="properties">The property dictionary to query.</param>
/// <param name="key">The key that identifies the property to look up.</param>
/// <param name="stringValue">The value of the string if found and non-empty, otherwise <see langword="null"/>.</param>
/// <returns><see langword="true"/> if the property was found with a non-empty value, otherwise <see langword="false"/>.</returns>
/// <summary>
/// Gets the string value corresponding to <paramref name="key"/>, or <see langword="null"/> if the property was not found or had an empty value.
/// </summary>
/// <param name="properties">The property dictionary to query.</param>
/// <param name="key">The key that identifies the property to look up.</param>
/// <returns>The string value if found and non-empty, otherwise <see langword="null"/>.</returns>
/// <summary>
/// Attempts to get the boolean interpretation of the value corresponding to <paramref name="key"/>.
/// </summary>
/// <param name="properties">The property dictionary to query.</param>
/// <param name="key">The key that identifies the property to look up.</param>
/// <param name="boolValue">The boolean value of the property if found and successfully parsed, otherwise <see langword="null"/>.</param>
/// <returns><see langword="true"/> if the property was found with successfully parsed as a boolean, otherwise <see langword="false"/>.</returns>
/// <summary>
/// Gets the boolean value corresponding to <paramref name="key"/>, or <see langword="null"/> if the property was missing or could not be parsed as a boolean.
/// </summary>
/// <param name="properties">The property dictionary to query.</param>
/// <param name="key">The key that identifies the property to look up.</param>
/// <returns>The boolean value if found and successfully parsed as a boolean, otherwise <see langword="null"/>.</returns>
/// <summary>
/// Attempts to get the enum type <typeparamref name="T"/> interpretation of the value corresponding to <paramref name="key"/>.
/// </summary>
/// <param name="properties">The property dictionary to query.</param>
/// <param name="key">The key that identifies the property to look up.</param>
/// <param name="enumValue">The enum value of the property if found and successfully parsed, otherwise <see langword="null"/>.</param>
/// <returns><see langword="true"/> if the property was found with successfully parsed as enum type <typeparamref name="T"/>, otherwise <see langword="false"/>.</returns>
/// <typeparam name="T">The enum type.</typeparam>
/// <summary>
/// Gets the enum value corresponding to <paramref name="key"/>, or <see langword="null"/> if the property was missing or could not be parsed as an enum.
/// </summary>
/// <param name="properties">The property dictionary to query.</param>
/// <param name="key">The key that identifies the property to look up.</param>
/// <returns>The enum value if found and successfully parsed as enum type <typeparamref name="T"/>, otherwise <see langword="null"/>.</returns>
/// <typeparam name="T">The enum type.</typeparam>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Contains common extensions for <see cref="IProjectRuleSnapshot"/> instances.
/// </summary>
/// <summary>
///     Gets the value that is associated with specified name, or an empty string ("") if it does not exist.
/// </summary>
/// <summary>
///     Gets the value that is associated with the specified rule and property.
/// </summary>
// Similar to MSBuild, we treat the absence of a property the same as an empty property
/// <summary>
///     Returns a value indicating if the value that is associated with the specified rule and property is <see langword="true"/>.
/// </summary>
/// <summary>
///     Gets the snapshot associated with the specified rule, or an empty snapshot if it does not exist.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides extension methods for <see cref="IProperty"/> instances.
/// </summary>
/// <summary>
///     Returns the value of the specific <see cref="IProperty"/> as <see cref="Guid"/>
///     or <see cref="Guid.Empty"/> if the value cannot be parsed.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="property"/> is <see langword="null"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Common strings found as values for the
/// <see cref="Microsoft.Build.Framework.XamlTypes.DataSource.SourceType"/>
/// property.
/// </summary>
/// <summary>
/// All resolved Dependency nodes must have persistence "ResolvedReference" to be able to 
/// differentiate between unresolved and resolved rule.
/// </summary>
/// <summary>
/// The data comes from items or item metadata in the project.
/// </summary>
/// <summary>
/// The data comes from item definition metadata in the project.
/// </summary>
/// <summary>
/// The data comes from project properties.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Common helpers for property rules
/// <see cref="DataSource.SourceType"/>
/// property.
/// </summary>
/// <summary>
/// Creates an empty Rule.
/// </summary>
/// <param name="itemType">The item type the rule represents.  May be null or empty to represent a project-level property rule.</param>
/// <returns>An empty rule.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Returns the support target frameworks for a particular project. The values are
/// read from the SDK's SupportTargetFramework items.
/// </summary>
/// <summary>
/// This property is only used to get the enum values, there is no actual
/// persisted value in the project. So this method should never be called.
/// </summary>
/// <param name="userSuppliedValue"></param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// A provider for assembly info properties that are stored either in the project file OR the source code of the project.
/// </summary>
/// <summary>
/// Gets the properties for a property or item.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This class represents assembly attribute properties that are stored in the project file OR the source code of the project.
/// </summary>
// See https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.GenerateAssemblyInfo.targets
/// <summary>
/// Get the unevaluated property value.
/// </summary>
/// <summary>
/// Get the value of a property.
/// </summary>
/// <summary>
/// Get the value of a property from source assembly attribute.
/// </summary>
/// <summary>
/// Set the value of a property.
/// </summary>
// Generate property in project file only if:
// 1. "GenerateAssemblyInfo" is true AND
// 2. "GenerateXXX" for this specific property is true.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This class represents properties corresponding to assembly attributes that are stored in the source code of the project.
/// </summary>
/// <summary>
/// Gets the value of the property from the source assembly attribute.
/// </summary>
/// <summary>
/// Sets the value of the property in the source assembly attribute.
/// </summary>
/// <param name="value"></param>
// The attributes of interest to us have one argument. If there are more then we have broken code - don't change that.
// Apply changes needs to happen on the UI Thread.
/// <summary>
/// Get the attribute corresponding to the given property from the given project.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Gets the application manifest property
/// </summary>
/// <remarks>
/// The Application Manifest's value is one of three possibilities:
///     - It's either a path to file that is the manifest
///     - It's the value "NoManifest" which means the application doesn't have a manifest.
///     - It's the value "DefaultManifest" which means that the application will have a default manifest.
///     
/// These three values map to two MSBuild properties - ApplicationManifest (specified if it's a path) or NoWin32Manifest 
/// which is true for the second case and false or non-existent for the third.
/// </remarks>
// It doesn't matter if it is set to false or the value is not present. We default to "DefaultManifest" scenario.
/// <summary>
/// Sets the application manifest property
/// </summary>
// We treat NULL/empty value as reset to default and remove the two properties from the project.
// If we can make the path relative to the project folder do so. Otherwise just use the given path.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Exports a <see cref="IInterceptingPropertyValueProvider"/> extension to CPS.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ExportInterceptingPropertyValueProviderAttribute"/> class.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// A project property provider that intercepts all the callbacks for a specific property name
/// on the default <see cref="IProjectPropertiesProvider"/> for validation and/or transformation of the property value.
/// </summary>
/// <summary>
/// Validate and/or transform the given evaluated property value.
/// </summary>
/// <summary>
/// Validate and/or transform the given unevaluated property value, i.e. "raw" value read from the project file.
/// </summary>
/// <summary>
/// Validate and/or transform the given unevaluated property value to be written back to the project file.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Metadata mapping interface for the <see cref="ExportInterceptingPropertyValueProviderAttribute"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// An implementation of IProjectProperties that intercepts all the get/set callbacks for each property on
/// the given default <see cref="IProjectProperties"/> and passes it to corresponding <see cref="IInterceptingPropertyValueProvider"/>
/// to validate and/or transform the property value to get/set.
/// </summary>
// CONSIDER: Allow duplicate intercepting property value providers for same property name.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// An intercepting project properties provider that validates and/or transforms the default <see cref="IProjectProperties"/>
/// using the exported <see cref="IInterceptingPropertyValueProvider"/>s.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Base intercepting project property provider that intercepts all the callbacks for a specific property name
/// on the default <see cref="IProjectPropertiesProvider"/> for validation and/or transformation of the property value.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// define MAKETARGETFRAMEWORKVERSION(maj, min, rev) (TARGETFRAMEWORKVERSION)((maj) << 16 | (rev) << 8 | (min))
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// We use project file here because in CPS, the UserFile instance provider is implemented by the same
// provider as the ProjectFile, and is exported as the ProjectFile provider.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// We use project file here because in CPS, the UserFileWithXamlDefaults instance provider is implemented by the same
// provider as the ProjectFile, and is exported as the ProjectFile provider.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Default semantic/package version just has 3 fields, we need to append an additional Revision field with value "0".
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Ignore the semantic version suffix (e.g. "1.0.0-beta1" => "1.0.0")
// Default value is Version (major.minor.build components only)
// Don't set the new value if both of the following is true:
//  1. There is no existing property entry AND
//  2. The new value is identical to the default value.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Default semantic/package version just has 3 fields, we need to append an additional Revision field with value "0".
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IValidProjectReferenceChecker"/> that always allows a reference.
/// </summary>
/// <remarks>
///     Unlike the old project system, we do zero validation when we get added as a project reference, or when 
///     we reference another project. Instead, we push off all validation to MSBuild targets that do the validation
///     during builds and design-time builds (ResolveProjectReferences). This gives a consistent behavior between 
///     adding the project reference via the UI and adding the project via the editor - in the end they result in the 
///     same behavior, inside and outside of Visual Studio.
/// </remarks>
// Before the default checker, which delegates onto normal P-2-P rules
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Reloads a project if its configuration dimensions change.
/// </summary>
// If we have same dimensions, no need to reload
// We no longer have same dimensions so we need to reload all configurations by reloading the project.
// This catches when we switch from [Configuration, Platform] ->  [Configuration, Platform, TargetFramework] or vice versa, 
// Look through the properties and find all declared dimensions (ie <Configurations>, <Platforms>, <TargetFrameworks>) 
// and return their dimension name equivalents (Configuration, Platform, TargetFramework)
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides rule-based property access.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ProjectProperties"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ProjectProperties"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ProjectProperties"/> class.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="ProjectProperties"/> class.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the <see langword="abstract"/> base class for <see cref="ISpecialFileProvider"/> instances 
///     that handle the WPF Application Definition file.
/// </summary>
// First look for the actual App.xaml first
// Otherwise, find a candidate that we might be able to add to the project
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides <see langword="abstract"/> base class for <see cref="ISpecialFileProvider"/> instances
///     that find their special file by file name in the root of the project.
/// </summary>
// Root has DisableAddItem
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides <see langword="abstract"/> base class for <see cref="ISpecialFileProvider"/> instances 
///     that find their special file by file name under the AppDesigner folder, falling back 
///     to the root folder if it doesn't exist.
/// </summary>
// Search AppDesigner folder first if it exists
// Then fallback to project root
// AppDesigner folder first if it exists
// Then fallback to project root
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the base class for all <see cref="ISpecialFileProvider"/> instances.
/// </summary>
// Make sure at least have a tree before we start searching it
// Attempt to find an existing file/folder first
// Otherwise, fall back and create it
// Similar to legacy, we only verify state if we've been asked to create it
// We always return the default path, regardless of whether we created it or it exists, as per contract
// Excluded from project
// Project includes it, but missing from disk
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a <see cref="ISpecialFileProvider"/> that handles the default 'App.config' file; 
///     which contains .NET Framework directives for assembly binding, compatibility and runtime
///     settings.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a <see cref="ISpecialFileProvider"/> that handles the AppDesigner folder;
///     called "Properties" in C# and "My Project" in Visual Basic.
/// </summary>
// First look for the actual AppDesigner folder
// Otherwise, find a location that is a candidate
// Root has DisableAddItem
// Developer has set the AppDesigner path to empty
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a <see cref="ISpecialFileProvider"/> that handles the default 'app.manifest' file; 
///     which contains Win32 directives for assembly binding, compatibility and elevation and is
///     typically found under the 'AppDesigner' folder.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a <see cref="ISpecialFileProvider"/> that handles the default 'Settings.settings' file; 
///     which contains applications settings for a project and is typically found under the 'AppDesigner' 
///     folder.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a <see cref="ISpecialFileProvider"/> that handles the default 'Resources.resx' file; 
///     which contains localized resources for a project and is typically found under the 'AppDesigner' 
///     folder.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Queries the project for special files, such as the application config file or application designer folder, and optionally creates them and checks them out from source control.
/// </summary>
/// <summary>
///     Returns the path to a special file, optionally creating it and 
///     checking it out from source control.
/// </summary>
/// <param name="fileId">
///     One of the <see cref="SpecialFiles"/> values indicating the special file to return.
/// </param>
/// <param name="flags">
///     One or more of the <see cref="SpecialFileFlags"/> 
/// </param>
/// <returns>
///     The file name of the special file, or <see langword="null"/> if special file is not 
///     handled by the project.
/// </returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a <see cref="ISpecialFileProvider"/> that handles the 'licenses.licx' file; 
///     a file that contains a list of licensed (typically Windows Forms) components used by
///     a project and is typically found under the 'AppDesigner' folder.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a <see cref="ISpecialFileProvider"/> that handles the WPF Application Definition file,
///     typically called "App.xaml" in C# projects.
/// </summary>
// We don't have a template for C# for App.xaml, deliberately 
// throw NotImplementedException (which gets mapped to E_NOTIMPL) to
// indicate we don't support this.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a <see cref="ISpecialFileProvider"/> that handles the default 'AssemblyInfo.cs' file; 
///     which contains attributes for assembly versioning, COM exposure, and other assembly-level 
///     directives and typically found under the 'AppDesigner' folder.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a <see cref="ISpecialFileProvider"/> that handles the WPF Application Definition,
///     typically called "Application.xaml" in Visual Basic projects.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a <see cref="ISpecialFileProvider"/> that handles the default 'AssemblyInfo.vb' file; 
///     which contains attributes for assembly versioning, COM exposure, and other assembly-level 
///     directives and is typically found under the 'AppDesigner' folder.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the base class for <see cref="IProjectTreePropertiesProvider"/> objects that handle special items, such as the AppDesigner folder.
/// </summary>
/// <summary>
///     Gets the image key that represents the image that will be applied to the special folder.
/// </summary>
/// <summary>
///     Gets the default flags that will be applied to the special folder.
/// </summary>
/// <summary>
///     Gets a value indicating whether the special folder is supported in this project.
/// </summary>
/// <summary>
///     Returns a value indicating whether the specified property context represents the candidate special folder.
/// </summary>
/// <summary>
///     Returns a value indicating whether the contents of the special folder are only visible in Show All Files.
/// </summary>
// We're a special folder item if our parent is the special folder. We rely on 
// the fact that "VisibleOnlyInShowAllFiles" is transitive; that is, if a parent
// is marked with it, its children are also implicitly marked with it.
// Avoid overwriting icon if the image provider didn't provide one
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a <see cref="IProjectTreePropertiesProvider"/> that handles the AppDesigner 
///     folder, called "Properties" in C# and "My Project" in Visual Basic.
/// </summary>
// Retrieves the <AppDesignerFolder> and <AppDesignerFolderContentsVisibleOnlyInShowAllFiles> properties from the project file
//
// TODO: Read these default values from the rules themselves
// See: https://github.com/dotnet/project-system/issues/209
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Modifies the Solution Explorer tree image for the project root.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides a top-level project sub-tree showing the tree of MSBuild project imports,
/// including props/targets from the SDK, targets, etc.
/// </summary>
/// <remarks>
/// <para>
/// To reduce clutter and memory usage, this tree is only visible (and populated) when
/// the "Show all Files" feature of Solution Explorer is enabled.
/// </para>
/// <para>
/// This feature can be enabled and disabled via the <c>ProjectImportsTree</c> project capability.
/// </para>
/// </remarks>
// sort to top of tree, not alphabetically
// Ensure we no-op if the value didn't change, avoiding race conditions
// Queue up an operation that will toggle the import tree
// Use the presence or absence of a subscription to indicate which operation we are performing here.
// This avoids a race condition between the (locked) changing of _showAllFiles and the (locked) changing
// of _subscriptions. Even if there is a race, the right number of toggles will occur and the end result
// will be correct.
// Set a visible root
// Update (make visible) or create a new tree if no prior one exists
// Subscribe to data to populate the tree and keep it updated with changes
// Remove child that's no longer present
// No child exists for this import, so add it
// Skip nodes with duplicate captions
// TODO remove this once we enable DisplayOrder for the subtree, as that supports duplicate captions
// Recur down the tree
// Child exists but with the wrong display order
// Child exists with correct display order, so continue walking tree
// Set invisible
// Remove all children
// CPS's physical tree provider currently only uses the IShowAllFilesProjectTreeProvider.ShowAllFiles property
// for graft root providers. These other interface methods have safe no-op implementations in case that changes
// one day.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Gets and sets the <c>MSBuildProjectExtensionsPath</c> property value for this project.
/// Project files under this folder are considered implicit.
/// </summary>
/// <remarks>
/// Example value: <c>"C:\repos\MySolution\MyProject\obj\"</c>
/// </remarks>
// In a 32-bit process, SpecialFolder.ProgramFiles returns the 32-bit path.
// The 64-bit path is available via an environment variable however.
// The path provided is not the installation root, but rather the location of devenv.exe.
// __VSSPROPID.VSSPROPID_InstallDirectory has the same value.
// Failing a better way to obtain the installation root, remove that suffix.
// Obviously this is brittle against changes to the relative path of devenv.exe, however that seems
// unlikely and should be easy to work around if ever needed.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// We've been unloaded, so don't update the state (which will be empty)
// UpToDateCheckInput/Output/Built items have optional 'Set' metadata that determine whether they
// are treated separately or not. If omitted, such inputs/outputs are included in the default set,
// which also includes other items such as project files, compilation items, analyzer references, etc.
// First, validate the relationship between inputs and outputs within the default set.
// Second, validate the relationships between inputs and outputs in specific sets, if any.
// Validation passed
// We assume there are fewer outputs than inputs, so perform a full scan of outputs to find the earliest.
// This increases the chance that we may return sooner in the case we are not up to date.
// Reference assembly copy markers are strange. The property is always going to be present on
// references to SDK-based projects, regardless of whether or not those referenced projects
// will actually produce a marker. And an item always will be present in an SDK-based project,
// regardless of whether or not the project produces a marker. So, basically, we only check
// here if the project actually produced a marker and we only check it against references that
// actually produced a marker.
// Short-lived cache of timestamp by path
/// <summary>For unit testing only.</summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// These are user visible, so we want them in local times so that 
// they correspond with dates/times that Explorer, etc shows
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Contains the first path from the <see cref="ConfigurationGeneral.MSBuildAllProjectsProperty"/>,
/// which MSBuild guarantees to be the newest import from all properties (since 16.0). As we
/// are only interested in the newest import, we need not retain the remaining paths.
/// </summary>
/// <summary>
/// Gets the time at which the set of items changed.
/// </summary>
/// <remarks>
/// <para>
/// This is not the last timestamp of the items themselves. It is time at which items were
/// last added or removed from the project.
/// </para>
/// <para>
/// This property is not updated until after the first query occurs. Until that time it will
/// equal <see cref="DateTime.MinValue"/> which represents the fact that we do not know when
/// the set of items was last changed, so we cannot base any decisions on this data property.
/// </para>
/// </remarks>
/// <summary>
/// Gets the time at which the last up-to-date check was made.
/// </summary>
/// <remarks>
/// This value is required in order to protect against a race condition described in
/// https://github.com/dotnet/project-system/issues/4014. Specifically, if source files are
/// modified during a compilation, but before that compilation's outputs are produced, then
/// the changed input file's timestamp will be earlier than the compilation output, making
/// it seem as though the compilation is up to date when in fact the input was not included
/// in that compilation. We use this property as a proxy for compilation start time, whereas
/// the outputs represent compilation end time.
/// </remarks>
/// <summary>
/// Holds <see cref="UpToDateCheckBuilt"/> items which are copied, not built.</summary>
/// <remarks>
/// <para>
/// Key is destination, value is source.
/// </para>
/// <para>
/// Projects add to this collection by specifying the <see cref="UpToDateCheckBuilt.OriginalProperty"/>
/// on <see cref="UpToDateCheckBuilt"/> items.
/// </para>
/// </remarks>
/// <summary>
/// Holds the set of observed <see cref="CopyUpToDateMarker"/> metadata values from all
/// <see cref="ResolvedCompilationReference"/> items in the project.
/// </summary>
// The first item in this semicolon-separated list of project files will always be the one
// with the newest timestamp. As we are only interested in timestamps on these files, we can
// save memory and time by only considering this first path (dotnet/project-system#4333).
// This file is copied, not built
// Remember the `Original` source for later
// This file is built, not copied
// TODO these are probably the same as the previous set, so merge them to avoid allocation
// NOTE when we previously had zero item types, we can surmise that the project has just been loaded. In such
// a case it is not correct to assume that the items changed, and so we do not update the timestamp.
// See https://github.com/dotnet/project-system/issues/5386
/// <summary>
/// For unit tests only.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. 
/// <summary>
/// Tracks a bag of distinct disposable objects which will be disposed when the bag itself is disposed.
/// </summary>
/// <summary>
/// The set of disposable blocks. If <see langword="null" />, then this disposable bag has been disposed.
/// </summary>
/// <summary>
/// Disposes of all contained disposable items.
/// </summary>
/// <summary>
/// Adds an object to this bag, to be disposed when the bag itself is disposed.
/// </summary>
/// <remarks>
/// If this disposable bag has already been disposed, <paramref name="disposable" /> will be disposed immediately.
/// </remarks>
/// <param name="disposable">The value to be included in this disposable bag.</param>
/// <summary>
/// Adds objects to this bag, to each be disposed when the bag itself is disposed.
/// </summary>
/// <summary>
/// Removes an object from the bag. If done before the bag is disposed, this will prevent
/// <paramref name="disposable"/> from being disposed along with the bag itself.
/// </summary>
/// <param name="disposable">The object to remove.</param>
/// <summary>
/// Implemented only to allow collection initialization of this type.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. 
/// <summary>
/// Wraps an <see cref="Action"/> delegate as an <see cref="IDisposable"/>, ensuring it is called
/// only once, the first time <see cref="Dispose"/> is called.
/// </summary>
// Prevent double-dispose, and null field out on dispose
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Wrapper over System.Environment abstraction for unit testing
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Abstraction for System.Environment for unit testing
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Let inspection tools detect that CPS uses a SourceSwitch for tracing messages.
/// <summary>
/// This class contains methods that are useful for logging.
/// </summary>
/// <summary>
/// The CPS trace source.
/// </summary>
/// <summary>
/// Buffer to preserve latest set of error messages to help diagnosing Watson bugs.
/// </summary>
/// <summary>
/// Gives the current Travel Level setting for the CPS tracing
/// </summary>
/// <summary>
/// Requests a verbose trace message to be written out to the listeners.
/// </summary>
/// <param name="formattedMessage">The message to be traced.</param>
/// <summary>
/// Requests a verbose trace message to be written out to the listeners.
/// </summary>
/// <param name="unformattedMessage">The unformatted message to be traced.</param>
/// <param name="args">The arguments to be formatted into the message</param>
/// <summary>
/// Requests a warning trace message to be written out to the listeners.
/// </summary>
/// <param name="formattedMessage">The message to be traced.</param>
/// <summary>
/// Requests a warning trace message to be written out to the listeners.
/// </summary>
/// <param name="unformattedMessage">The unformatted message to be traced.</param>
/// <param name="args">The arguments to be formatted into the message</param>
/// <summary>
/// Requests an error trace message to be written out to the listeners.
/// </summary>
/// <param name="formattedMessage">The message to be traced.</param>
/// <summary>
/// Requests an error trace message to be written out to the listeners.
/// </summary>
/// <param name="unformattedMessage">The unformatted message to be traced.</param>
/// <param name="args">The arguments to be formatted into the message</param>
/// <summary>
/// Requests an error trace message to be written out to the listeners
/// </summary>
// Allocate the next index.  We use CompareExchange here to prevent the race condition between two threads.
// possible to override, if the buffer is written heavily
// but this is just to help us to gather information, so performance is more important here.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Contains monikers for icons shipped with Managed Project System.
/// </summary>
// These GUIDs and IDs are defined in src\Microsoft.VisualStudio.ProjectSystem.Managed.VS\ManagedImages.imagemanifest
// These internal fields are provided for convenience
// NOTE SharedProject is defined in both manifests
//      internal static ImageMoniker SharedProject    => new ImageMoniker { Guid = KnownImageIds.ImageCatalogGuid, Id = KnownImageIds.SharedProject    };
// These methods are called by the debugger, as instructed by the DebuggerDisplayAttributes at the top of the file.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Posts an event with the specified event name.
/// </summary>
/// <param name="eventName">
///     The name of the event.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="eventName"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="eventName"/> is an empty string ("").
/// </exception>
/// <summary>
///     Posts an event with the specified event name and property with the 
///     specified name and value.
/// </summary>
/// <param name="eventName">
///     The name of the event.
/// </param>
/// <param name="propertyName">
///     The name of the property.
/// </param>
/// <param name="propertyValue">
///     The value of the property.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="eventName"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="propertyName"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="propertyValue"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="eventName"/> is an empty string ("").
///     <para>
///         -or
///     </para>
///     <paramref name="propertyName"/> is an empty string ("").
/// </exception> 
/// <summary>
///     Posts an event with the specified event name and properties with the 
///     specified names and values.
/// </summary>
/// <param name="eventName">
///     The name of the event.
/// </param>
/// <param name="properties">
///     An <see cref="IEnumerable{T}"/> of property names and values.
/// </param>
/// <exception cref="ArgumentNullException">
///     <paramref name="eventName"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="properties"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="eventName"/> is an empty string ("").
///     <para>
///         -or-
///     </para>
///     <paramref name="properties"/> is contains no elements.
/// </exception> 
/// <summary>
/// Hashes personally identifiable information for telemetry consumption.
/// </summary>
/// <param name="value">Value to hashed.</param>
/// <returns>Hashed value.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides telemetry event names used throughout this project.
/// </summary>
/// <summary>
///     Indicates the prefix (vs/projectsystem/managed/) of all event names throughout this project.
/// </summary>
/// <summary>
///     Indicates that a project's last build is considered up-to-date.
/// </summary>
/// <summary>
///     Indicates that a project's last build is considered out-of-date.
/// </summary>
/// <summary>
///     Indicates that the dependency tree was updated with unresolved dependencies.
/// </summary>
/// <summary>
///     Indicates that the dependency tree was updated with all resolved dependencies.
/// </summary>
/// <summary>
///     Indicates that a design-time build has completed.
/// </summary>
/// <summary>
///     Indicates that .NET Core SDK version.
/// </summary>
/// <summary>
///     Indicates that the TempPE compilation queue has been processed
/// </summary>
/// <summary>
///     Indicates that the TempPE compilation has occurred on demand from a designer
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides telemetry property names used throughout this project.
/// </summary>
/// <summary>
///     Indicates the prefix (vs.projectsystem.managed) of all property names throughout this project.
/// </summary>
/// <summary>
///     Indicates the reason that a project's last build is considered out-of-date.
/// </summary>
/// <summary>
///     Indicates the project when the dependency tree is updated with all resolved dependencies.
/// </summary>
/// <summary>
///     Indicates the project when when the dependency tree is updated with unresolved dependencies.
/// </summary>
/// <summary>
///     Indicates whether seen all rules initialized when the dependency tree is updated with all resolved dependencies.
/// </summary>
/// <summary>
///      Indicates whether seen all rules initialized when the dependency tree is updated with unresolved dependencies.
/// </summary>
/// <summary>
///     Indicates whether a design-time build has completed without errors.
/// </summary>
/// <summary>
///     Indicates the targets and their times during a design-time build.
/// </summary>
/// <summary>
///     Indicates the project that contains the SDK version.
/// </summary>
/// <summary>
///     Indicates the actual underlying version of .NET Core SDK.
/// </summary>
/// <summary>
///     Indicates the number of TempPE DLLs compiled
/// </summary>
/// <summary>
///     Indicates the starting length of the TempPE compilation queue
/// </summary>
/// <summary>
///     Indicates whether the TempPE compilation was cancelled
/// </summary>
/// <summary>
///     Indicates the duration of the TempPE compilation
/// </summary>
// Property names use the event names, but with slashes replaced by periods.
// For example, vs/myevent would translate to vs.myevent.myproperty.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Splits a string by a delimiter, producing substrings lazily during enumeration.
///     Skips empty items, behaving equivalently to <see cref="string.Split(char[])"/> with
///     <see cref="StringSplitOptions.RemoveEmptyEntries"/>.
/// </summary>
/// <remarks>
///     Unlike <see cref="string.Split(char[])"/> and overloads, <see cref="LazyStringSplit"/>
///     does not allocate an array for the return, and allocates strings on demand during
///     enumeration. A custom enumerator type is used so that the only allocations made are
///     the substrings themselves. We also avoid the large internal arrays assigned by the
///     methods on <see cref="string"/>.
/// </remarks>
/// <remarks>
///     This extension method has special knowledge of the <see cref="LazyStringSplit"/> type and
///     can compute its result without allocation.
/// </remarks>
/// <inheritdoc cref="System.Linq.Enumerable.FirstOrDefault{TSource}(IEnumerable{TSource})"/>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides extension methods for <see cref="StringBuilder"/> instances.
/// </summary>
/// <summary>
///     Appends the text representation of the specified format to the
///     specified string builder.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="builder"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="FormatException">
///     The format specification in <paramref name="format"/> is invalid.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Join the caller to our collection, so that if the lock is already held by another task that needs UI 
// thread access we don't deadlock if we're also being waited on by the UI thread. For example, when CPS
// is draining critical tasks and is waiting us.
// We do an inner JoinableTaskFactory.RunAsync here to workaround
// https://github.com/Microsoft/vs-threading/issues/132
// Join the caller to our collection, so that if the lock is already held by another task that needs UI 
// thread access we don't deadlock if we're also being waited on by the UI thread. For example, when CPS
// is draining critical tasks and is waiting us.
// We do an inner JoinableTaskFactory.RunAsync here to workaround
// https://github.com/Microsoft/vs-threading/issues/132
// Join the caller to our collection, so that if the lock is already held by another task that needs UI 
// thread access we don't deadlock if we're also being waited on by the UI thread. For example, when CPS
// is draining critical tasks and is waiting us.
// Join the caller to our collection, so that if the lock is already held by another task that needs UI 
// thread access we don't deadlock if we're also being waited on by the UI thread. For example, when CPS
// is draining critical tasks and is waiting us.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Produces a series of <see cref="CancellationToken"/> objects such that requesting a new token
/// causes the previously issued token to be cancelled.
/// </summary>
/// <remarks>
/// <para>Consuming code is responsible for managing overlapping asynchronous operations.</para>
/// <para>This class has a lock-free implementation to minimise latency and contention.</para>
/// </remarks>
/// <summary>
/// Initializes a new instance of <see cref="CancellationSeries"/>.
/// </summary>
/// <param name="token">An optional cancellation token that, when cancelled, cancels the last
/// issued token and causes any subsequent tokens to be issued in a cancelled state.</param>
/// <summary>
/// Creates the next <see cref="CancellationToken"/> in the series, ensuring the last issued
/// token (if any) is cancelled first.
/// </summary>
/// <param name="token">An optional cancellation token that, when cancelled, cancels the
/// returned token.</param>
/// <returns>
/// A cancellation token that will be cancelled when either:
/// <list type="bullet">
/// <item><see cref="CreateNext"/> is called again</item>
/// <item>The token passed to this method (if any) is cancelled</item>
/// <item>The token passed to the constructor (if any) is cancelled</item>
/// <item><see cref="Dispose"/> is called</item>
/// </list>
/// </returns>
/// <exception cref="ObjectDisposedException">This object has been disposed.</exception>
// Obtain the token before exchange, as otherwise the CTS may be cancelled before
// we request the Token, which will result in an ObjectDisposedException.
// This way we would return a cancelled token, which is reasonable.
// A registered action on the token may throw, which would surface here.
// Ensure we always dispose the prior CTS.
// Already disposed
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides static extensions methods for <see cref="CancellationToken"/> instances.
/// </summary>
// CancellationToken parameters must come last
/// <summary>
///     Registers a delegate that will be called when this <see cref="CancellationToken"/>
///     is canceled, executing the callback immediately if it has already been canceled 
///     and <see cref="RegisterOptions.ExecuteImmediatelyIfAlreadyCanceledAndDisposed"/> is specified.
/// </summary>
/// <param name="token">
///     The <see cref="CancellationToken"/> to register for cancellation.
/// </param>
/// <param name="options">
///     Options that control how the registration occurs.
/// </param>
/// <param name="callback">
///     The delegate to be executed when the <see cref="CancellationToken"/> is canceled.
/// </param>
/// <returns>
///     A <see cref="CancellationTokenRegistration"/> that can be used to deregister the callback.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="callback"/> is <see langword="null"/>
/// </exception>
/// <exception cref="ObjectDisposedException">
///     <paramref name="options"/> is <see cref="RegisterOptions.None"/> and the <see cref="CancellationTokenSource"/> 
///     has been disposed.
/// </exception>
// The CancellationTokenSource has already been disposed.  It rejected the register.
// But now we know the CancellationToken is in its final state (either canceled or not).
// So simulate the right behavior by invoking the callback or not, based on whether it was
// already canceled.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Schedules an asynchronous operation to be run after some delay, acting as a trailing-edge debouncer.
/// Subsequent scheduled operations will cancel previously scheduled tasks.
/// </summary>
/// <remarks>
/// <para>Operations can overlap, however the <see cref="CancellationToken"/> passed to an earlier
/// operation is cancelled if and when a later operation is scheduled, which always occurs before that
/// later operation is started. It is up to the caller to ensure proper use of the cancellation token
/// provided when <paramref name="operation"/> is invoked.</para>
///
/// <para>
/// The returned Task represents
/// the current scheduled task but not necessarily represents the task that
/// ends up doing the actual work. If another task is scheduled later which causes
/// the cancellation of the current scheduled task, the caller will not know
/// and need to use that latest return task instead.
/// </para>
/// </remarks>
/// <exception cref="ObjectDisposedException">The object has been disposed.</exception>
/// <summary>
/// Runs an asynchronous operation immediately, cancelling any previously scheduled tasks.
/// See <see cref="ScheduleAsyncTask(Func{CancellationToken, Task}, CancellationToken)"/> for more information.
/// </summary>
/// <exception cref="ObjectDisposedException">The object has been disposed.</exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides options for <see cref="CancellationTokenExtensions.Register(CancellationToken, RegisterOptions, Action)"/>.
/// </summary>
/// <summary>
///     Throw <see cref="ObjectDisposedException"/> if the <see cref="CancellationToken"/> is already disposed.
/// </summary>
/// <summary>
///     Execute the specified callback immediately if the <see cref="CancellationToken"/> is already canceled and disposed.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Runs tasks in the sequence they are added. This is done by starting with a completed task, and leveraging ContinueWith\Unwrap to
/// "schedule" subsequent tasks to start after the previous one is completed. The Task containing the callers function is returned so that
/// the caller can await for their specific task to complete. When disposed unprocessed tasks are cancelled.
/// </summary>
// Tests fail if this is disposed
/// <summary>
/// Deadlocks will occur if a task returned from ExecuteTask , awaits a task which also calls ExecuteTask. The 2nd one will never get started since
/// it will be backed up behind the first one completing. The AsyncLocal is used to detect when a task is being executed, and if a downstream one gets
/// added, it will be executed directly, rather than get queued
/// </summary>
/// <summary>
/// Adds a new task to the continuation chain and returns it so that it can be awaited.
/// </summary>
// If we are on the same execution chain, run the task directly
/// <summary>
/// Dispose cancels outstanding tasks
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Helper class which allows a task to be scheduled to run after some delay, but if a new task
/// is scheduled before the delay runs out, the previous task is cancelled.
/// </summary>
/// <summary>
/// Creates an instance of the TaskDelayScheduler. If an originalSourceToken is passed, it will be linked to the PendingUpdateTokenSource so
/// that cancelling that token will also flow through and cancel a pending update.
/// </summary>
// We want to return a joinable task so wrap the function
/// <summary>
/// Cancels any pending tasks and disposes this object.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides extensions for <see cref="Task"/> instances.
/// </summary>
/// <summary>
///     Creates a task that will complete indicating whether the specified task completed or timed-out.
/// </summary>
/// <param name="task">
///     The <see cref="Task"/> to wait on for completion.
/// </param>
/// <param name="millisecondsTimeout">
///     The number of milliseconds to wait, or <see cref="Timeout.Infinite"/> (-1) to wait indefinitely.
/// </param>
/// <returns>
///     An <see cref="Task"/> instance on which to wait.
/// </returns>
/// <exception cref="ArgumentOutOfRangeException">
///     <paramref name="millisecondsTimeout"/> is a negative number other than -1, which represents an infinite time-out.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides sentinel Tasks that represent commonly returned values.
/// </summary>
/// <summary>
///     Represents a <see cref="Task{TResult}"/> that's completed successfully with the result of <see langword="false"/>.
/// </summary>
/// <summary>
///     Represents a <see cref="Task{TResult}"/> that's completed successfully with the result of <see langword="true"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides the special "Dependencies" folder to project trees.
/// </summary>
/// <remarks>
/// This provider handles data subscription. It delegates the construction of the actual "Dependencies" node tree
/// to an instance of <see cref="IDependenciesTreeViewProvider" />.
/// </remarks>
/// <summary><see cref="IProjectTreePropertiesProvider"/> imports that apply to the references tree.</summary>
/// <summary>Latest updated snapshot of all rules schema catalogs.</summary>
/// <summary>
/// A subscription to the snapshot service dataflow.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="DependenciesProjectTreeProvider"/> class.
/// </summary>
// Hook this so we can unregister the snapshot change event when the project unloads
/// <summary>
/// Gets a value indicating whether a given set of nodes can be copied or moved underneath some given node.
/// </summary>
/// <param name="nodes">The set of nodes the user wants to copy or move.</param>
/// <param name="receiver">
/// The target node where <paramref name="nodes"/> should be copied or moved to.
/// May be <c>null</c> to determine whether a given set of nodes could allowably be copied anywhere (not 
/// necessarily everywhere).
/// </param>
/// <param name="deleteOriginal"><c>true</c> for a move operation; <c>false</c> for a copy operation.</param>
/// <returns><c>true</c> if such a move/copy operation would be allowable; <c>false</c> otherwise.</returns>
/// <summary>
/// Gets a value indicating whether deleting a given set of items from the project, and optionally from disk,
/// would be allowed. 
/// Note: CanRemove can be called several times since there two types of remove operations:
///   - Remove is a command that can remove project tree items form the tree/project but not from disk. 
///     For that command requests deleteOptions has DeleteOptions.None flag.
///   - Delete is a command that can remove project tree items and form project and from disk. 
///     For this command requests deleteOptions has DeleteOptions.DeleteFromStorage flag.
/// We can potentially support only Remove command here, since we don't remove Dependencies form disk, 
/// thus we return false when DeleteOptions.DeleteFromStorage is provided.
/// </summary>
/// <param name="nodes">The nodes that should be deleted.</param>
/// <param name="deleteOptions">
/// A value indicating whether the items should be deleted from disk as well as from the project file.
/// </param>
/// <summary>
/// Deletes items from the project, and optionally from disk.
/// Note: Delete and Remove commands are handled via IVsHierarchyDeleteHandler3, not by
/// IAsyncCommandGroupHandler and first asks us we CanRemove nodes. If yes then RemoveAsync is called.
/// We can remove only nodes that are standard and based on project items, i.e. nodes that 
/// are created by default IProjectDependenciesSubTreeProvider implementations and have 
/// DependencyNode.GenericDependencyFlags flags and IRule with Context != null, in order to obtain 
/// node's itemSpec. ItemSpec then used to remove a project item having same Include.
/// </summary>
/// <param name="nodes">The nodes that should be deleted.</param>
/// <param name="deleteOptions">A value indicating whether the items should be deleted from disk as well as 
/// from the project file.
/// </param>
/// <exception cref="InvalidOperationException">Thrown when <see cref="IProjectTreeProvider.CanRemove"/> 
/// would return <c>false</c> for this operation.</exception>
// Get the list of shared import nodes.
// Get the list of normal reference Item Nodes (this excludes any shared import nodes).
// Handle the removal of normal reference Item Nodes (this excludes any shared import nodes).
// if node does not have an IRule with valid ProjectPropertiesContext we can not 
// get its itemsSpec. If nodes provided by custom IProjectDependenciesSubTreeProvider
// implementation, and have some custom IRule without context, it is not a problem,
// since they would not have DependencyNode.GenericDependencyFlags and we would not 
// end up here, since CanRemove would return false and Remove command would not show 
// up for those nodes. 
// Handle the removal of shared import nodes.
// Find the import that is included in the evaluation of the specified ConfiguredProject that
// imports the project file whose full path matches the specified one.
/// <summary>
/// Efficiently finds a descendent with the given path in the given tree.
/// </summary>
/// <param name="root">The root of the tree.</param>
/// <param name="path">The absolute or project-relative path to the item sought.</param>
/// <returns>The item in the tree if found; otherwise <c>null</c>.</returns>
// We override this since we need to find children under either:
//
// - our dependencies root node
// - dependency sub tree nodes
// - dependency sub tree top level nodes
//
// Deeper levels will be graph nodes with additional info, not direct dependencies
// specified in the project file.
/// <summary>
/// Gets the path to a given node that can later be provided to <see cref="IProjectTreeProvider.FindByPath" /> to locate the node again.
/// </summary>
/// <param name="node">The node whose path is sought.</param>
/// <returns>
/// A non-empty string, or <c>null</c> if searching is not supported.
/// For nodes that represent files on disk, this is the project-relative path to that file.
/// The root node of a project is the absolute path to the project file.
/// </returns>
// Needed for graph nodes search
/// <summary>
/// Generates the original references directory tree.
/// </summary>
// symbol LoadedProject is banned
// symbol LoadedProject is banned
// this.IsApplicable may take a project lock, so we can't do it inline with this method
// which is holding a private lock.  It turns out that doing it asynchronously isn't a problem anyway,
// so long as we guard against races with the Dispose method.
// symbol LoadedProjectAsync is banned
// symbol LoadedProjectAsync is banned
// Issue this token before hooking the SnapshotChanged event to prevent a race
// where a snapshot tree is replaced by the initial, empty tree created below.
// The handler will cancel this token before submitting its update.
// Allow property providers to perform customization.
// These are ordered from lowest priority to highest, allowing higher priority
// providers to override lower priority providers.
// Note that all the parameters are specified so we can force this call to an
// overload of NewTree available prior to 15.5 versions of CPS. Once a 15.5 build
// is publicly available we can move this to an overload with default values for
// most of the parameters, and we'll only need to pass the interesting ones.
// Take the highest priority view provider
// We do not expect any exception when we call SubmitTreeUpdateAsync, but we don't want to leak an exception here.
// Because it will fail the dataflow block and stops updating the project tree silently.
/// <summary>
/// Creates a new instance of the configured project exports class.
/// </summary>
// Note that all the parameters are specified so we can force this call to an
// overload of NewTree available prior to 15.5 versions of CPS. Once a 15.5 build
// is publicly available we can move this to an overload with default values for
// most of the parameters, and we'll only need to pass the interesting ones.
// Issue https://github.com/dotnet/project-system/issues/4860 suggests this code path
// can exist, however a repro was not found to dig deeper into the underlying cause.
// For now just return null as the upstream caller handles null correctly anyway.
// Since we have no browse object, we still need to create *something* so
// that standard property pages can pop up.
// Note: it is unlikely that we end up here, however for cases when node providers
// getting their node data not from Design time build events, we might have OnDependenciesChanged
// event coming before initial design time build event updates NamedCatalogs in this class.
// Thus, just in case, explicitly request it here (GetCatalogsAsync will acquire a project read lock)
/// <summary>
/// Describes services collected from the active configured project.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="MyConfiguredProjectExports"/> class.
/// </summary>
/// <summary>
/// A private implementation of <see cref="IProjectTreeCustomizablePropertyContext"/> used when creating
/// the dependencies nodes.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// An implementation of <see cref="IDependenciesTreeViewProvider"/> that groups dependencies
/// by target framework for cross-targeting projects, or without grouping when not cross-targeting.
/// </summary>
/// <summary><see cref="IProjectTreePropertiesProvider"/> imports that apply to the references tree.</summary>
// Keep a reference to the original tree to return in case we are cancelled.
/// <summary>
/// Builds all available sub trees under root: target framework or Dependencies node
/// when there is only one target.
/// </summary>
// If a dependency is not visible we will still register a top-level group if it
// has the ShowEmptyProviderRootNode flag.
// No such flag, so skip it completely.
// Only add visible dependencies. See note above.
// In theory this should never happen, as it means we have a dependency model of a type
// that no provider claims. https://github.com/dotnet/project-system/issues/3653
/// <summary>
/// Builds a sub tree under root: target framework or Dependencies node when there is only one target.
/// </summary>
// when transition from unresolved to resolved or vise versa - remove old node
// and re-add new  one to allow GraphProvider to recalculate children
// NOTE this project system supports multiple implicit configuration dimensions (such as target framework)
// which is a concept not modelled by DTE/VSLangProj. In order to produce a sensible view of the project
// via automation, we expose only the active target framework at any given time.
//
// This is achieved by using IProjectItemTree for active target framework items, and IProjectTree for inactive
// target frameworks. CPS only creates automation objects for items with "Reference" flag if they implement
// IProjectItemTree. See SimpleItemNode.Initialize (in CPS) for details.
// shouldCleanup
/// <summary>
/// Removes nodes that don't exist anymore
/// </summary>
// For IProjectTree remove ProjectTreeFlags.Common.Reference flag, otherwise CPS would fail to
// map this node to graph node and GraphProvider would be never called.
// Only IProjectItemTree can have this flag
/// <summary>
/// A private implementation of <see cref="IProjectTreeCustomizablePropertyContext"/> used when updating
/// dependencies nodes.
/// </summary>
// NOTE properties with hard-coded results are currently not set, and
//      we avoid creating backing fields for them to keep the size of
//      this class down. They can be changed as needed in future.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Represents the set of icons associated with a particular dependency.
/// In practice dependencies use a relatively small number of distinct icon
/// sets; we can save considerable amounts of memory by giving the sets their
/// own type and sharing instances.
/// </summary>
/// <summary>
/// Gets the icon to use when the dependency is resolved and collapsed.
/// </summary>
/// <summary>
/// Gets the icon to use when the dependency is resolved and expanded.
/// </summary>
/// <summary>
/// Gets the icon to use when the dependency is unresolved and collapsed.
/// </summary>
/// <summary>
/// Gets the icon to use when the dependency is unresolved and expanded.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Caches and reuses <see cref="DependencyIconSet"/> instances.
/// In practice dependencies use a relatively small number of distinct icon
/// sets; we can save considerable amounts of memory by ensuring that the same
/// logical sets are represented with the same instances.
/// </summary>
/// <summary>Custom equality comparer, to prevent boxing value tuples during dictionary operations.</summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Cached immutable instances of <see cref="ProjectTreeFlags"/> used by nodes in the dependencies tree.
/// </summary>
/// <remarks>
/// Members having names ending in <c>Flags</c> are aggregates, containing multiple flags. All others are singular.
/// </remarks>
/// <summary>
/// The set of flags common to all Reference nodes.
/// </summary>
/// <summary>
/// The set of flags to assign to unresolved Reference nodes.
/// </summary>
/// <remarks>
/// Contains <see cref="ProjectTreeFlags.Common.BrokenReference"/> which stops
/// <c>IGraphProvider</c> APIs from being called for that node.
/// </remarks>
/// <summary>
/// The set of flags to assign to resolved Reference nodes.
/// </summary>
/// <summary>
/// Dependencies having this flag support displaying a browse object, where the corresponding <see cref="IRule" />
/// is obtained by <see cref="IDependenciesTreeServices.GetBrowseObjectRuleAsync(Snapshot.IDependency, IProjectCatalogSnapshot)" />.
/// </summary>
/// <summary>
/// This flag indicates that dependency can show a hierarchy of dependencies
/// </summary>
/// <summary>
/// These public flags below are to be used with all nodes: default project item
/// nodes and all custom nodes provided by third party <see cref="IProjectDependenciesSubTreeProvider"/>
/// implementations. This is to have a way to distinguish dependency nodes in general.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Model for creating telemetry events when dependency tree is updated.
/// It maintains some light state for each Target Framework to keep track
/// whether all expected rules have been observed; this information is passed
/// as a property of the telemetry event and can be used to determine if the
/// 'resolved' event is fired too early (so sessions can be appropriately filtered).
/// </summary>
/// <remarks>
/// Instantiated per unconfigured project.
/// </remarks>
/// <summary>
/// Holds data used for telemetry. If telemetry is disabled, or if required
/// information has been gathered, this field will be null.
/// </summary>
/// <summary>
/// Maintain state for a single target framework.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Models changes to a targeted project's dependencies.
/// </summary>
/// <summary>
/// Gets models for the set of added and updated dependencies.
/// </summary>
/// <summary>
/// Gets models for the set of removed dependencies.
/// </summary>
/// <remarks>
/// Consumers must only use the <see cref="IDependencyModel.Id"/> and
/// <see cref="IDependencyModel.ProviderType"/> properties of returned items.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Abstracts tree nodes API and allows to use them outside of <see cref="ProjectTreeProviderBase"/>.
/// </summary>
/// <summary>
/// Creates <see cref="IProjectItemTree"/> - a tree node associated with a project item.
/// </summary>
/// <param name="caption"></param>
/// <param name="itemContext"></param>
/// <param name="propertySheet"></param>
/// <param name="browseObjectProperties"></param>
/// <param name="icon"></param>
/// <param name="expandedIcon"></param>
/// <param name="visible"></param>
/// <param name="flags"></param>
/// <summary>
/// Creates <see cref="IProjectTree"/> - a generic CPS tree node.
/// </summary>
/// <param name="caption"></param>
/// <param name="filePath"></param>
/// <param name="browseObjectProperties"></param>
/// <param name="icon"></param>
/// <param name="expandedIcon"></param>
/// <param name="visible"></param>
/// <param name="flags"></param>
/// <summary>
/// Gets an <see cref="IRule"/> to attach to a project item, which would be used to 
/// display browse object properties page.
/// </summary>
/// <param name="dependency"></param>
/// <param name="catalogs"></param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Abstraction that helps to build different views for Dependencies node contents.
/// Having multiple views implementations we could have some context commands switching 
/// between different views. 
/// View is responsible for building nodes hierarchy based on given dependencies snapshot.
/// </summary>
/// <summary>
/// Builds the "Dependencies" node <see cref="IProjectTree"/> for the given <paramref name="snapshot"/> based on the previous <paramref name="dependenciesTree"/>.
/// Implementations should nest all top-level dependencies beneath this node, potentially grouped by target framework, dependency type and so forth.
/// </summary>
/// <param name="dependenciesTree">The previous dependencies tree, to which the updated <paramref name="snapshot"/> should be applied.</param>
/// <param name="snapshot">The current dependencies snapshot to apply to the tree.</param>
/// <param name="cancellationToken">Supports cancellation of this operation.</param>
/// <returns>An updated "Dependencies" node.</returns>
/// <summary>
/// Finds node by path in current dependencies view hierarchy.
/// </summary>
/// <param name="root">Node where we start searching</param>
/// <param name="path">Path to find</param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// A public model used to update dependencies in the snapshot.
/// </summary>
/// <summary>
/// Uniquely identifies the dependency within its project (for a given configuration).
/// </summary>
/// <remarks>
/// For dependencies obtained via MSBuild, this equals <see cref="OriginalItemSpec"/>.
/// </remarks>
/// <summary>
/// Dependency type, a formal name of the provider type that knows how to create a node
/// for given dependency.
/// </summary>
/// <summary>
/// Name of the dependency
/// </summary>
/// <summary>
/// ItemSpec by which dependency could be found in msbuild Project. 
///     - If dependency is "Resolved" then resolved path will be in Path property, 
///       and unresolved in OriginalItemSpec.
///     - if dependency is "Unresolved" then Path and OriginalItemSpec are the same.
///     - if dependency is "custom", i.e. does not have item in the msbuild project or
///       item is not represented by xaml rule, then OriginalItemSpec will be ignored
///       and should be empty.
/// </summary>
/// <summary>
/// When <see cref="Resolved"/> is <see langword="true"/>, this contains the resolved path
/// of the dependency, otherwise it is equal to <see cref="OriginalItemSpec"/>.
/// </summary>
/// <summary>
/// Friendly name of the dependency, should be used for UI (captions etc)
/// </summary>
/// <summary>
/// Used in <see cref="IDependenciesTreeServices.GetBrowseObjectRuleAsync"/> to determine the browse
/// object rule for this dependency.
/// </summary>
/// <summary>
/// Used in <see cref="IDependenciesTreeServices.GetBrowseObjectRuleAsync"/> to determine the browse
/// object rule for this dependency.
/// </summary>
/// <summary>
/// Version of the dependency
/// </summary>
/// <summary>
/// Specifies if dependency is resolved or not
/// </summary>
/// <summary>
/// Specifies if dependency is an explicit project dependency or not
/// </summary>
/// <summary>
/// Specifies if dependency was brought by default and can not be removed/modified by user.
/// </summary>
/// <summary>
/// In some cases dependency should be present in snapshot, but not displayed in the Tree.
/// </summary>
/// <summary>
/// Gets the icon to use when the dependency is resolved and collapsed.
/// </summary>
/// <summary>
/// Gets the icon to use when the dependency is resolved and expanded.
/// </summary>
/// <summary>
/// Gets the icon to use when the dependency is unresolved and collapsed.
/// </summary>
/// <summary>
/// Gets the icon to use when the dependency is unresolved and expanded.
/// </summary>
/// <summary>
/// Gets a value that determines this node's order relative to its peers.
/// </summary>
/// <remarks>
/// <para>
///     This behaviour only applies to graph nodes (i.e. children of top-level dependencies).
/// </para>
/// <para>
///     The default is zero, which means ordering will be alphabetical.
///     If non-zero, the node will be positioned after all nodes having lower priority.
/// </para>
/// </remarks>
/// <summary>
/// A list of properties that might be displayed in property pages
/// (in BrowsableObject context).
/// </summary>
/// <summary>
/// Gets the set of child dependency IDs. May be empty, but never <see langword="null"/>.
/// </summary>
/// <remarks>
/// Each ID is of the form provided by the dependency model.
/// For dependencies obtained via MSBuild, these will be <see cref="OriginalItemSpec"/> values.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// For maintaining light state about dependency tree to generate telemetry
/// </summary>
/// <summary>
/// Gets a value indicating whether this telemetry service is active.
/// If not, then it will remain inactive and no methods need be called on it.
/// Note that an instance may become inactive during its lifetime.
/// </summary>
/// <summary>
/// Initialize telemetry state with the set of target frameworks and rules we expect to observe.
/// </summary>
/// <summary>
/// Indicate that a set of rules has been observed in either an Evaluation or Design Time pass.
/// This information is used when firing tree update telemetry events to indicate whether all rules
/// have been observed.
/// </summary>
/// <summary>
/// Fire telemetry when dependency tree completes an update
/// </summary>
/// <param name="hasUnresolvedDependency">indicates if the snapshot used for the update had any unresolved dependencies</param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Contract responsible for providing data about project dependencies of a specific type,
/// for example assemblies, projects, packages etc.
/// </summary>
/// <summary>
/// Gets a string that uniquely identifies the type of dependency nodes emitted by this provider.
/// </summary>
/// <remarks>
/// This string will be associated with provider's nodes (via project tree flags).
/// </remarks>
/// <summary>
/// Returns the root node for this provider's dependency nodes.
/// </summary>
/// <remarks>
/// Despite the method's name, implementations may return the same instance for repeated
/// calls, so long as the returned value is immutable.
/// </remarks>
/// <summary>
/// Raised when this provider's dependencies changed.
/// </summary>
/// <summary>
/// Initializes a new instance of <see cref="DependenciesChangedEventArgs"/>.
/// </summary>
/// <param name="provider">The subtree provider whose dependencies changed.</param>
/// <param name="targetShortOrFullName">
/// The short or full name of the target framework to which <paramref name="changes"/> apply.
/// Optional if the project is not multi-targeting.
/// </param>
/// <param name="changes">The collection of dependency changes.</param>
/// <param name="token">A cancellation token that allows cancelling the update.</param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Internal extension of <see cref="IProjectDependenciesSubTreeProvider"/> contract,
/// to support generic dependencies modifications.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// For maintaining light state about the SDK version used in a project
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Do not block initialization on reporting the sdk version. It is possible to deadlock.
// Wait for the project to be loaded so that we don't prematurely load the active configuration
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Immutable map of configured project to target framework.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Creates <see cref="AggregateCrossTargetProjectContext"/> instances based on the 
///     current <see cref="UnconfiguredProject"/>.
/// </summary>
/// <summary>
///     Creates a <see cref="AggregateCrossTargetProjectContext"/>.
/// </summary>
/// <returns>
///     The created <see cref="AggregateCrossTargetProjectContext"/>.
/// </returns>
// Get the set of active configured projects ignoring target framework.
// Type or member is obsolete
// Type or member is obsolete
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Implementations of this interface add, update and remove <see cref="IDependencyModel"/> instances in response to
/// project rule changes. They use both evaluated items and items returned by targets called during design-time builds.
/// The latter are fully resolved with all item metadata, while the former contain just the information found in the
/// project file, which is enough to quickly populate the dependency tree while we wait for the slower design-time
/// build to complete and return richer item metadata.
/// </summary>
/// <summary>
/// Gets the rule name for dependency items returned via evaluation (eg: <c>PackageReference</c>).
/// </summary>
/// <summary>
/// Gets the rule name for dependency items resolved by design-time builds (eg: <c>ResolvedPackageReference</c>).
/// </summary>
/// <summary>
/// Handles the specified set of changes to a rule, and applies them
/// to the given <see cref="DependenciesChangesBuilder"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Rule data sourced by evaluation.
/// </summary>
/// <summary>
///     Rule data sourced by both evaluation and design-time build,
///     joined by project version to ensure consistency.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Assists in the creation and caching of flags used by <see cref="DependencyModel"/> subclasses.
/// </summary>
/// <remarks>
/// <see cref="ProjectTreeFlags"/> internally performs operations on immutable sets during operations such as
/// <see cref="ProjectTreeFlags.Union(ProjectTreeFlags)"/> and <see cref="ProjectTreeFlags.Union(ProjectTreeFlags)"/>
/// which commonly results in allocating identical values on the heap. By caching them, dependency model types can
/// avoid such allocations during their construction, keeping them lighter.
/// </remarks>
// The 'isResolved' dimension determines whether we start with generic resolved or unresolved dependency flags.
// We then add (union) and remove (except) any other flags as instructed.
// The 'isImplicit' dimension only enforces, when true, that the dependency cannot be removed.
/// <summary>Retrieves the cached <see cref="ProjectTreeFlags"/> given the arguments.</summary>
/// <summary>Provides a unique mapping between (bool,bool) and [0,3].</summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Priorities used to order graph nodes.
/// Not applicable to top-level nodes.
/// When two nodes have the same priority, alphabetical ordering is used to break the tie.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Models presentation information for a node in the dependency tree.
/// </summary>
/// <remarks>
/// <para>
///     This includes not just dependencies, but also subtrees (eg. "Packages")
///     and graph nodes.
/// </para>
/// <para>
///     This interface allows representing these different types of tree items
///     in a consistent manner for use with graph/tree APIs.
/// </para>
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <inheritdoc cref="IAggregateDependenciesSnapshotProvider"/>
/// <summary>
/// Even though the collection is immutable we still lock to ensure synchronized event subscription and unsubscription.
/// Because <see cref="AggregateDependenciesSnapshotProvider"/> is in global scope, this is a global lock.
/// </summary>
/// <summary>
/// Immutable map from project path to snapshot provider.
/// </summary>
/// <remarks>
/// Modifications of this collection are locked by <see cref="_lock"/>, however we still use an immutable collection
/// here so that read-only calls from <see cref="GetSnapshot(string)"/>, <see cref="GetSnapshot(IDependency)"/> and
/// <see cref="GetSnapshots"/> don't need to take a global lock.
/// </remarks>
// Project has unloaded, so remove it from the cache and unregister event handlers
// Remove and re-add provider with new project path
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Immutable snapshot of all project dependencies across all target frameworks.
/// </summary>
/// <summary>
/// For each target framework in <paramref name="changes"/>, applies the corresponding
/// <see cref="IDependenciesChanges"/> to <paramref name="previousSnapshot"/> in order to produce
/// and return an updated <see cref="DependenciesSnapshot"/> object.
/// If no changes are made, <paramref name="previousSnapshot"/> is returned unmodified.
/// </summary>
/// <remarks>
/// As part of the update, each <see cref="IDependenciesSnapshotFilter"/> in <paramref name="snapshotFilters"/>
/// is given a chance to influence the addition and removal of dependency data in the returned snapshot.
/// </remarks>
/// <returns>An updated snapshot, or <paramref name="previousSnapshot"/> if no changes occured.</returns>
// Dependencies-by-target-framework has changed
// The active target framework changed
// The project path changed
// Nothing has changed, so return the same snapshot
// Only sync if a the full list of target frameworks has been provided
// This is a long-winded way of doing this that minimises allocations
// Ensure all required target frameworks are present
// Remove any extra target frameworks
// Internal, for test use -- normal code should use the factory methods
/// <summary>
/// Gets the full path to the project file whose dependencies this snapshot contains.
/// </summary>
/// <remarks>
/// Cannot be null or empty.
/// </remarks>
/// <summary>
/// Gets the active target framework for project.
/// </summary>
/// <summary>
/// Gets a dictionary of dependencies by target framework.
/// </summary>
/// <summary>
/// Gets whether this snapshot contains at least one unresolved dependency which is both visible
/// and reachable from a visible top-level dependency, for any target framework.
/// </summary>
/// <summary>
/// Finds dependency for given id across all target frameworks.
/// </summary>
/// <param name="dependencyId">Unique id for dependency to be found.</param>
/// <param name="topLevel">If <see langword="true"/>, search is first performed on top level
/// dependencies before searching all dependencies.</param>
/// <returns>The <see cref="IDependency"/> if found, otherwise <see langword="null"/>.</returns>
// if top level first try to find by top level id with full path,
// if found - return, if not - try regular Id in the DependenciesWorld
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Just in case custom providers don't do it, add corresponding flags for Resolved state.
// This is needed for tree update logic to track if tree node changing state from unresolved 
// to resolved or vice-versa (it helps to decide if we need to remove it or update in-place
// in the tree to avoid flicks).
// If this is one of our implementations of IDependencyModel then we can just reuse the icon
// set rather than creating a new one.
/// <summary>
/// Private constructor used to clone Dependency
/// </summary>
// Copy values as necessary to create a clone with any properties overridden
// TODO if Properties contains "Folder.IdentityProperty" should we update it? (see public ctor)
/// <summary>
/// Id unique for a particular provider. We append target framework and provider type to it, 
/// to get a unique id for the whole snapshot.
/// </summary>
// Avoid calculating this unless absolutely needed as 
// we have a lot of Dependency instances floating around
// For generic node types we do set correct, known item types, however for custom nodes
// provided by third party extensions we can not guarantee that item type will be known. 
// Thus always set predefined itemType for all custom nodes.
// TODO: generate specific xaml rule for generic Dependency nodes
// tracking issue: https://github.com/dotnet/project-system/issues/1102
// Used for debugging only
/// <summary>
/// Determines whether <paramref name="id"/> is equal to the result of <see cref="GetID"/> when passed
/// <paramref name="targetFramework"/>, <paramref name="providerType"/> and <paramref name="modelId"/>.
/// </summary>
/// <remarks>
/// This method performs no heap allocations unless <paramref name="modelId"/> must be escaped.
/// </remarks>
// Escape model ID
// NOTE It doesn't seem possible to avoid the potential string allocation here without
// reimplementing OrdinalIgnoreCase comparison.
/// <summary>
/// Constructs the string identifier for a dependency from its target framework, provider type and dependency model ID.
/// </summary>
/// <remarks>
/// This string has form <c>"tfm-name\provider-type\model-id"</c>.
/// <list type="bullet">
///   <item>All characters are lower-case.</item>
///   <item><c>".."</c> is replaced with <c>"__"</c>.</item>
///   <item><c>"/"</c> is replaced with <c>"\"</c>.</item>
///   <item>Any trailing <c>"\"</c> characters are trimmed.</item>
/// </list>
/// </remarks>
/// <param name="targetFramework"></param>
/// <param name="providerType"></param>
/// <param name="modelId"></param>
// normalize modelId (without allocating)
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Compares equality of <see cref="IDependency"/> instances based on <see cref="IDependency.Id"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Global scope contract that provides information about project level 
/// dependencies snapshot providers.
/// </summary>
/// <summary>
/// Since IAggregateDependenciesSnapshotProvider is global scope component, 
/// each <see cref="DependenciesSnapshotProvider"/> should register itself when it is ready.
/// </summary>
/// <returns>An object that, when disposed, unregisters <paramref name="snapshotProvider"/>.</returns>
/// <summary>
/// Gets the snapshot for <paramref name="projectFilePath"/>, or <see langword="null"/> if none found.
/// </summary>
/// <param name="projectFilePath">Path to the project for which the snapshot is requested.</param>
/// <returns><see cref="DependenciesSnapshot"/> or <see langword="null"/> if no project exists with the specified path.</returns>
/// <summary>
/// Gets the targeted snapshot for <paramref name="dependency"/>, or <see langword="null"/> if none found.
/// </summary>
/// <param name="dependency">A dependency that identifies the project and target framework to search with.</param>
/// <returns><see cref="TargetedDependenciesSnapshot"/> or <see langword="null"/> if no snapshot exists with matching project and target framework.</returns>
/// <summary>
/// Gets the current snapshot from every registered project.
/// </summary>
/// <returns>A collection of <see cref="DependenciesSnapshot"/>. Will not contain <see langword="null"/> values.</returns>
/// <summary>
/// Fired when a snapshot changed in a snapshot provider.
/// </summary>
/// <summary>
/// Fired when snapshot provider is unloading.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Represents internal immutable dependency entity that is stored in immutable 
/// snapshot <see cref="TargetedDependenciesSnapshot"/>.
/// </summary>
/// <summary>
/// Target framework of the snapshot dependency belongs to
/// </summary>
/// <summary>
/// Get the full path of the dependency, if relevant, otherwise, <see cref="string.Empty"/>.
/// </summary>
/// <summary>
/// Gets the set of icons to use for this dependency based on its state (e.g. resolved, expanded).
/// </summary>
/// <summary>
/// Returns a copy of this immutable instance with the specified property changes.
/// </summary>
/// <summary>
/// Gets an composite identifier comprised of <see cref="TargetFramework"/>, <see cref="ProviderType"/>
/// and the originating <see cref="IDependencyModel"/>'s <see cref="IDependencyModel.Id"/>.
/// </summary>
/// <remarks>
/// This string has form <c>"tfm-name\provider-type\model-id"</c>.
/// See <see cref="Dependency.GetID"/> for details on how this string is constructed.
/// </remarks>
/// <summary>
/// Dependency type, a formal name of the provider type that knows how to create a node
/// for given dependency.
/// </summary>
/// <summary>
/// Name of the dependency
/// </summary>
/// <summary>
/// ItemSpec by which dependency could be found in msbuild Project.
///     - If dependency is "Resolved" then resolved path will be in Path property,
///       and unresolved in OriginalItemSpec.
///     - if dependency is "Unresolved" then Path and OriginalItemSpec are the same.
///     - if dependency is "custom", i.e. does not have item in the msbuild project or
///       item is not represented by xaml rule, then OriginalItemSpec will be ignored
///       and should be empty.
/// </summary>
/// <summary>
/// When <see cref="Resolved"/> is <see langword="true"/>, this contains the resolved path
/// of the dependency, otherwise it is equal to <see cref="OriginalItemSpec"/>.
/// </summary>
/// <summary>
/// Friendly name of the dependency, should be used for UI (captions etc)
/// </summary>
/// <summary>
/// Used in <see cref="IDependenciesTreeServices.GetBrowseObjectRuleAsync"/> to determine the browse
/// object rule for this dependency.
/// </summary>
/// <summary>
/// Used in <see cref="IDependenciesTreeServices.GetBrowseObjectRuleAsync"/> to determine the browse
/// object rule for this dependency.
/// </summary>
/// <summary>
/// Used in <see cref="IDependenciesTreeServices.GetBrowseObjectRuleAsync"/> to populate the browse
/// object for resolved dependencies, to be displayed in property pages (in BrowsableObject context).
/// </summary>
/// <summary>
/// Specifies if dependency is resolved or not
/// </summary>
/// <summary>
/// Specifies if dependency is an explicit project dependency or not
/// </summary>
/// <summary>
/// Specifies if dependency was brought by default and can not be removed/modified by user.
/// </summary>
/// <summary>
/// In some cases dependency should be present in snapshot, but not displayed in the Tree.
/// </summary>
/// <summary>
/// Gets a value that determines this node's order relative to its peers.
/// </summary>
/// <remarks>
/// <para>
///     This behaviour only applies to graph nodes (i.e. children of top-level dependencies).
/// </para>
/// <para>
///     The default is zero, which means ordering will be alphabetical.
///     If non-zero, the node will be positioned after all nodes having lower priority.
/// </para>
/// </remarks>
/// <summary>
/// Gets the set of child dependency IDs. May be empty, but never <see cref="ImmutableArray{T}.IsDefault"/>.
/// </summary>
/// <remarks>
/// Each ID is of the form <c>"tfm-name\provider-type\model-id"</c>.
/// See <see cref="Dependency.GetID"/> for details on how this string is constructed.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Returns a IDependencyViewModel for given dependency.
/// </summary>
/// <summary>
/// Returns id having full path instead of OriginalItemSpec
/// </summary>
/// <summary>
/// Returns id having full path instead of OriginalItemSpec
/// </summary>
/// <summary>
/// Returns true if given dependency is a nuget package.
/// </summary>
/// <summary>
/// Returns true if given dependency is a project.
/// </summary>
/// <summary>
/// Returns true if given dependencies belong to the same targeted snapshot, i.e. have same target.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Applies changes to <paramref name="previousSnapshot"/> and produces a new snapshot if required.
/// If no changes are made, <paramref name="previousSnapshot"/> is returned unmodified.
/// </summary>
/// <returns>An updated snapshot, or <paramref name="previousSnapshot"/> if no changes occured.</returns>
// Also factor in any changes to path/framework/catalogs
// TODO breaking here denies later filters the opportunity to modify builders
// Create the unfiltered dependency
// A dependency was accepted
// Even though the dependency was rejected, it's possible that filters made
// changes to other dependencies.
// Internal, for test use -- normal code should use the factory methods
// Perform a single pass through dependencies, gathering as much information as possible
// Walk the dependency graph to find visible, unresolved dependencies which are reachable
// from visible top-level dependencies.
// There are no visible and unresolved dependencies in the snapshot
// TODO use ToImmutableAndFree?
// It is possible that there exists a dependency which is both visible and unresolved, yet not
// actually present in the tree because one of its ancestors is not visible. Therefore instead
// of scanning all dependencies in the snapshot, we walk the dependency graph starting with
// top-level visible nodes, and remember those which have at least one visible, unresolved and
// reachable descendant.
// 'spine' is a stack containing an enumerator for each level of the graph, which is updated as
// we walk the graph. We are working with struct enumerators so need this array. It will grow
// if needed.
// Start with all top-level dependencies
// Move to next item at this level
// This level is done, so pop back up a level
// No more levels, so finished tree traversal
// Resume the previous level
// Wvaluate the current dependency
// Skip any hidden nodes
// We've already visited this item, so skip it
// This node is unresolved
// This node is unresolved, so set it and all items up the spine as unresolved
// This node is resolved, set it to false. If a descendant is later
// found which is visible, reachable and unresolved, then this dependency's
// entry will be updated to 'true' as part of marking all entries in the spine.
// This dependency has child dependencies, so traverse into them
// Grow the spine
// Enumerate child dependencies
// If, after all that, all visible and reachable dependencies are resolved, return
// null as there is no value in a collection where every entry is false. Consumers
// of this collection are local to this class and will null appropriately.
/// <summary>
/// Path to project containing this snapshot.
/// </summary>
/// <summary>
/// <see cref="ITargetFramework" /> for which project has dependencies contained in this snapshot.
/// </summary>
/// <summary>
/// Catalogs of rules for project items (optional, custom dependency providers might not provide it).
/// </summary>
/// <summary>
/// Top level project dependencies.
/// </summary>
/// <summary>
/// Contains all unique <see cref="IDependency"/> objects in the project, from all levels.
/// Allows looking them up by their IDs.
/// </summary>
/// <summary>
/// Maps each top-level dependency by its path, where path is composed of targetFramework/providerType/dependencyPath.
/// </summary>
/// <summary>
/// A map whose keys are the IDs of all reachable dependencies, and whose values are <see langword="true" /> if
/// the dependency has a reachable, visible, unresolved descendant, otherwise <see langword="false" />.
/// If this fields is <see langword="null" /> then there are no reachable visible unresolved dependencies in the
/// entire snapshot.
/// Any dependency not in this collection will not be displayed in the tree.
/// </summary>
/// <summary>
/// Gets whether this snapshot contains at least one unresolved dependency which is both visible
/// and reachable from a visible top-level dependency.
/// </summary>
/// <summary>
/// Gets whether this dependency's node should appear as unresolved in the dependencies tree.
/// </summary>
/// <remarks>
/// Returns <see langword="true" /> if, for either <paramref name="dependency"/> or one of its descendants, all of the following are true:
/// <list type="number">
///   <item><see cref="IDependency.Visible"/> is <see langword="true" />, and</item>
///   <item><see cref="IDependency.Resolved"/> is <see langword="false" />, and</item>
///   <item>the dependency is reachable via the dependency graph from a visible top-level node, where all intermediate nodes are also visible.</item>
/// </list>
/// </remarks>
// No reachable dependency in this snapshot is visible and unresolved
/// <summary>
/// Efficient API for checking if a there is at least one unresolved dependency with given provider type.
/// </summary>
/// <param name="providerType">Provider type to check</param>
/// <returns>Returns true if there is at least one unresolved dependency with given providerType.</returns>
/// <summary>
/// Returns a list of direct child nodes for given dependency
/// </summary>
/// <param name="dependency"></param>
// TODO what if a dependency's child isn't in the snapshot? is that a bug?
// TODO why is the ID also considered a path there?
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Context used by <see cref="IDependenciesSnapshotFilter"/> implementations when filtering
/// a dependency that is being added to a <see cref="DependenciesSnapshot"/> by
/// <see cref="DependenciesSnapshot.FromChanges"/>.
/// </summary>
/// <summary>
/// Attempts to find the dependency in the project's tree with specified <paramref name="dependencyId"/>.
/// </summary>
/// <summary>
/// Adds a new, or replaces an existing dependency (keyed on <see cref="IDependency.Id"/>).
/// </summary>
/// <remarks>
/// In the course of filtering one dependency, the filter may wish to modify or add other
/// dependencies in the project's tree. This method allows that to happen.
/// </remarks>
/// <summary>
/// Returns <see langword="true"/> if the project tree contains a dependency with specified <paramref name="dependencyId"/>.
/// </summary>
/// <summary>
/// Returns an enumerator over all dependencies in the project tree.
/// </summary>
/// <summary>
/// Indicates the filter wishes to add <paramref name="dependency"/> to the snapshot.
/// </summary>
/// <remarks>
/// Note that this may not be the instance the filter was provided, as it may mutate it
/// in some way prior to adding it to the snapshot. Also note that when multiple filters
/// exist, later filters may further mutate or reject this filter's accepted dependency.
/// </remarks>
/// <param name="dependency">The dependency to add to the snapshot.</param>
/// <summary>
/// Indicates the filter rejects the addition or updating of the dependency in the snapshot.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Deduplicates captions of top-level dependencies from the same provider. This is done by
/// appending the <see cref="IDependencyModel.OriginalItemSpec"/> to the caption in parentheses.
/// </summary>
// Only apply to top-level dependencies
// Exact match.
// Prefix matches.
// Check whether we have a match of form "Caption (ItemSpec)".
// " (".Length
// ")".Length
// Change the matching dependency's alias too
// Use the alias for the caption
// Accept without changes
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Base class for all snapshot filters.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Implementations of this interface control how the addition and removal of <see cref="IDependency"/>
/// objects influences the sequence of <see cref="TargetedDependenciesSnapshot"/> objects.
/// </summary>
/// <remarks>
/// For each added and removed dependency in an update, <see cref="TargetedDependenciesSnapshot.FromChanges"/>
/// iterates through an ordered set of these filters, allowing each to influence how the dependency data is
/// integrated into the next snapshot.
/// </remarks>
/// <summary>
/// Called before adding or updated a dependency to a snapshot.
/// </summary>
/// <remarks>
/// When an <see cref="IDependency"/> is added or updated, implementations of this method may:
/// <list type="bullet">
///   <item>accept the dependency as is,</item>
///   <item>accept the dependency but modify it before it is added/updated,</item>
///   <item>reject the dependency outright (though any previous state of the dependency is kept)</item>
/// </list>
/// In addition to the above operations, implementations of this method may also modify other
/// dependencies in the snapshot. All these operations are performed via the <paramref name="context"/>.
/// </remarks>
/// <param name="targetFramework">Target framework for which dependency was resolved.</param>
/// <param name="dependency">The dependency to which filter should be applied.</param>
/// <param name="subTreeProviderByProviderType">All dictionary of subtree providers keyed by <see cref="IProjectDependenciesSubTreeProvider.ProviderType"/>.</param>
/// <param name="projectItemSpecs">List of all items contained in project's xml at given moment (non-imported items), otherwise, <see langword="null"/> if we do not have any data.</param>
/// <param name="context">An object via which the filter must signal acceptance or rejection, in addition to making further changes to other dependencies.</param>
/// <summary>
/// Called before removing a dependency from a snapshot.
/// </summary>
/// <param name="targetFramework">Target framework for which dependency was resolved.</param>
/// <param name="dependency">The dependency to which filter should be applied.</param>
/// <param name="context">An object via which the filter must signal acceptance or rejection, in addition to making further changes to other dependencies.</param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Changes explicit, resolved, top-level project dependencies to implicit if they are not present in the set of known project item specs.
/// </summary>
/// <remarks>
/// Only applies to dependencies whose providers implement <see cref="IProjectDependenciesSubTreeProviderInternal"/>.
/// </remarks>
// must have data
// top-level
// explicit
// resolved
// generic dependency
// except for shared projects
// is not a known item spec
// Obtain custom implicit icon
// Obtain a pooled icon set with this implicit icon
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Context used by <see cref="IDependenciesSnapshotFilter"/> implementations when filtering
/// a dependency that is being removed from a <see cref="DependenciesSnapshot"/> by
/// <see cref="DependenciesSnapshot.FromChanges"/>.
/// </summary>
/// <summary>
/// Attempts to find the dependency in the project's tree with specified <paramref name="dependencyId"/>.
/// </summary>
/// <summary>
/// Adds a new, or replaces an existing dependency (keyed on <see cref="IDependency.Id"/>).
/// </summary>
/// <remarks>
/// In the course of filtering one dependency, the filter may wish to modify or add other
/// dependencies in the project's tree. This method allows that to happen.
/// </remarks>
/// <summary>
/// Returns <see langword="true"/> if the project tree contains a dependency with specified <paramref name="dependencyId"/>.
/// </summary>
/// <summary>
/// Returns an enumerator over all dependencies in the project tree.
/// </summary>
/// <summary>
/// Indicates the filter allows the removal of the dependency from the snapshot.
/// </summary>
/// <summary>
/// Indicates the filter rejects the removal of the dependency from the snapshot.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Sdk nodes are actually packages and their hierarchy of dependencies is resolved from
/// NuGet's assets json file. However Sdk themselves are brought by DesignTime build for rules
/// SdkReference. This filter matches Sdk to their corresponding NuGet package and sets  
/// of top level sdk dependencies from the package. Packages are invisible to avoid visual
/// duplication and confusion.
/// </summary>
// This is an SDK dependency.
//
// Try to find a resolved package dependency with the same name.
// Set to resolved, and copy dependencies.
// This is a resolved package dependency.
//
// Try to find an SDK dependency with the same name.
// We have an SDK dependency for this package. Such dependencies, when implicit, are created
// as unresolved by SdkRuleHandler, and are only marked resolved here once we have resolved the
// corresponding package.
//
// Set to resolved, and copy dependencies.
// This is a package dependency.
//
// Try to find an SDK dependency with the same name.
// We are removing the package dependency related to this SDK dependency
// and must undo the changes made above in BeforeAdd.
//
// Set to unresolved, and clear dependencies.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Prohibits the unresolved dependency rule (evaluation) from overriding the corresponding 
/// resolved rule (design-time build) in the snapshot. 
/// </summary>
/// <remarks>
/// Once resolved, a dependency cannot revert to unresolved state. It will only appear as
/// unresolved again if it is first removed.
/// </remarks>
// TODO should this verify that the existing one is actually resolved?
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Marks project references as unresolved where the referenced project contains a visible unresolved dependency.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// No other property should be used for removal.
//
// We intended to change the type of IDependenciesChanges.RemovedNodes
// but due to cross-team scheduling went this route to maintain compatibility.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Used by <see cref="DependenciesSnapshotProvider"/> to keep an <see cref="AggregateCrossTargetProjectContext"/>
/// instance up to date.
/// </summary>
/// <summary>
///     Current <see cref="AggregateCrossTargetProjectContext"/>, which is an immutable map of
///     configured project to target framework.
/// </summary>
/// <remarks>
/// <para>
///     Updates of this field are serialized within a lock, but reads are free threaded as any
///     potential race can only be handled outside this class.
/// </para>
/// <para>
///     Value is null before initialization, and not null after.
/// </para>
/// </remarks>
// Check if we have already computed the project context.
// For non-cross targeting projects, we can use the current project context if the TargetFramework hasn't changed.
// For cross-targeting projects, we need to verify that the current project context matches latest frameworks targeted by the project.
// If not, we create a new one and dispose the current one.
// No change
// No change
// Check if the current project context is up-to-date for the current active and known project configurations.
// No change
// Force refresh the CPS active project configuration (needs UI thread).
// Create new project context.
// Active target framework is different.
// Different number of target frameworks.
// Differing TargetFramework
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides immutable dependencies snapshot for a given project.
/// </summary>
/// <summary>
/// Raised when the project's full path changes (i.e. due to being renamed).
/// </summary>
/// <summary>
/// Raised when the project and its snapshot provider are unloading.
/// </summary>
/// <summary>
/// Disposable items to be disposed when this provider is no longer in use.
/// </summary>
/// <summary>
/// Disposable items related to the current subscriptions. This collection may be replaced
/// from time to time (e.g. when target frameworks change).
/// </summary>
/// <summary>
/// Lazily populated set of subscribers. May be <see cref="ImmutableArray{T}.IsDefault" /> if <see cref="Subscribers"/>
/// has not been called, though once initialized it will not revert to default state.
/// </summary>
/// <summary>
/// Gets the current immutable dependencies snapshot for the project.
/// </summary>
/// <remarks>
/// Never null.
/// </remarks>
/// <summary>
/// Dataflow to monitor the project snapshot changes.
/// </summary>
// The project factory is completing.
// Subscribe to project data. Ensure the project doesn't unload during subscription.
// This host object subscribes to configured project evaluation data for its own purposes.
// Each of the host's subscribers are initialized.
// If our project unloads, we have no more work to do. Notify listeners and clean everything up.
// Gets the set of items defined directly the project, and not included by imports.
// We don't have catalog snapshot, we're likely updating because one of our project 
// dependencies changed. Just return 'no data'
// Returns unescaped evaluated include
// If "TargetFrameworks" property has changed, we need to refresh the project context and subscriptions.
// remember actual property value and compare
/// <summary>
/// Determines whether the current project context object is out of date based on the project's target frameworks.
/// If so, a new one is created and subscriptions are updated accordingly.
/// </summary>
// Prevent concurrent project context updates.
// The context changed, so update a few things.
// Dispose existing subscriptions.
// Add subscriptions for the configured projects in the new project context.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Ensures the correct sequencing of updates to the dependencies snapshot, and appropriate debouncing
/// and propagation of updates to downstream consumers of the snapshot.
/// </summary>
// Initial snapshot is empty.
// Updates will be published via Dataflow.
// Updates are debounced to conflate rapid updates and reduce frequency of tree updates downstream.
/// <summary>
/// Executes <paramref name="updateFunc"/> on the current snapshot within a lock. If a new snapshot
/// object is returned, <see cref="Current"/> is updated and the update is posted to <see cref="Source"/>.
/// </summary>
// Conflate rapid snapshot updates by debouncing events over a short window.
// This reduces the frequency of tree updates with minimal perceived latency.
// Always publish the latest snapshot
// Ensure we don't double-dispose.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Broken design time builds sometimes cause updates with no project changes and sometimes
// cause updates with a project change that has no difference.
// We handle the former case here, and the latter case is handled in the CommandLineItemHandler.
// Create an object to track dependency changes.
// Give each handler a chance to register dependency changes.
// Notify subscribers of a change in dependency data
// Record all the rules that have occurred
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Base class for <see cref="IDependencyCrossTargetSubscriber"/> implementations.
/// </summary>
// We can't re-use the DisposableBag after disposing it, so null it out
// to ensure we create a new one the next time we go to add subscriptions.
// Use an intermediate buffer block for project rule data to allow subsequent blocks
// to only observe specific rule name(s).
// Ensure updates don't overlap and that we aren't disposed during the update without cleaning up properly
// Ensure the project doesn't unload during the update
// TODO pass TasksService.UnloadCancellationToken into Handle to reduce redundant work on unload
// Ensure the project's capabilities don't change during the update
// Get the target framework to update for this change.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// process added nodes
// process removed nodes
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Implementations subscribe to project data sources, and produce project dependency data.
/// </summary>
/// <remarks>
/// <para>
///     Instances are imported into a <see cref="DependenciesSnapshotProvider"/>.
/// </para>
/// <para>
///     That host will call <see cref="InitializeSubscriberAsync"/> once, then call <see cref="AddSubscriptions"/>
///     with details of target frameworks to subscribe to.
/// </para>
/// <para>
///     If the host's <see cref="AggregateCrossTargetProjectContext"/> changes, the host
///     will call <see cref="ReleaseSubscriptions"/> before calling <see cref="AddSubscriptions"/>
///     with the updated project context.
/// </para>
/// <para>
///     When the host is disposed, it will call <see cref="ReleaseSubscriptions"/>.
/// </para>
/// </remarks>
/// <summary>
///     Raised whenever this subscriber has new data about project dependencies.
/// </summary>
/// <summary>
///     Called once, when this subscriber is first loaded into its <paramref name="provider"/>.
/// </summary>
/// <param name="provider">The object that's hosting this subscriber.</param>
/// <summary>
///     Requests this subscriber to create subscriptions based on the target frameworks specified in <paramref name="projectContext"/>.
/// </summary>
/// <remarks>
///     The caller is responsible for synchronizing calls to this and <see cref="ReleaseSubscriptions"/>.
/// </remarks>
/// <summary>
///     Requests this subscriber to release all previously created subscriptions.
/// </summary>
/// <remarks>
///     The caller is responsible for synchronizing calls to this and <see cref="AddSubscriptions"/>.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// General Metadata
// Target Metadata
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// We receive evaluated and resolved project data separately, each as its own rule.
// We always have evaluated data.
// We only have resolved data if the update came via the JointRule data source.
// For changes we try to add new dependency. If it is a resolved dependency, it would just override
// old one with new properties. If it is unresolved dependency, it would be added only when there no
// resolved version in the snapshot.
// Should be overridden by subclasses, unless they override 'HandleAddedItem', 'HandleRemovedItem'
// and 'HandleChangedItem' to not use this method.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// We have design-time build data
// Disregard items of type 'Target' from design-time build
// We only have evaluation data
// store only unique dependency IDs
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Unregister event handlers when the project unloads
// Only notify if the solution is not closing.
// If it is closing, notifying would result in pointless updates.
// If the solution service is unavailable, always update.
/// <summary>
/// When some other project's snapshot changed we need to check if our snapshot has a top level
/// dependency on changed project. If it does we need to refresh those top level dependencies to 
/// reflect changes.
/// </summary>
/// <param name="thisProjectSnapshot"></param>
/// <param name="otherProjectSnapshot"></param>
/// <param name="shouldBeResolved">
/// Specifies if top-level project dependencies resolved status. When other project just had its dependencies
/// changed, it is resolved=true (we check target's support when we add project dependencies). However when 
/// other project is unloaded, we should mark top-level dependencies as unresolved.
/// </param>
/// <param name="token"></param>
// if any of the snapshots is not provided or this is the same project - skip
// We're only interested in project dependencies
// avoid unnecessary removing since, add would upgrade dependency in snapshot anyway,
// but remove would require removing item from the tree instead of in-place upgrade.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Note that an implicit SDK is always created as unresolved. It will be resolved
// later when SdkAndPackagesDependenciesSnapshotFilter observes their corresponding
// package.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// A thread-safe object pool, backed by <see cref="ImmutableHashSet{T}"/> and using interlocked
/// operations for optimistic, lock-free concurrent access.
/// </summary>
/// <remarks>
/// Objects added to this pool will never be released.
/// </remarks>
/// <typeparam name="T"></typeparam>
// Would be nice if this was on ImmutableInterlocked as
// requested in https://github.com/dotnet/corefx/issues/33653
// The value already exists in the set. Return it.
// We already have a volatile read that we can reuse for the next loop
// We won the race-condition and have updated the collection.
// Return the value that is in the collection (as of the Interlocked operation).
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// IMPORTANT cannot be readonly
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <inheritdoc cref="string.IsNullOrEmpty(string)"/>
/// <inheritdoc cref="string.IsNullOrWhiteSpace(string)"/>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Avoid using cref tags with a prefix
/// <summary>
///     Represents timer IDs that are passed to <see cref="T:Microsoft.Internal.Performance.CodeMarker"/>.
/// </summary>
/// <summary>
///     Indicates that NuGet package restore has finished.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//github.com/dotnet/roslyn-analyzers/issues/1432", Scope = "member", Target = "~M:Microsoft.VisualStudio.ProjectSystem.VS.EditAndContinue.EditAndContinueProvider.Dispose")]
//github.com/dotnet/roslyn-analyzers/issues/1432", Scope = "member", Target = "~M:Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.BuildMacroInfo.Dispose")]
//github.com/dotnet/roslyn-analyzers/issues/1432", Scope = "member", Target = "~M:Microsoft.VisualStudio.ProjectSystem.VS.References.DesignTimeAssemblyResolution.Dispose")]
//github.com/dotnet/project-system/issues/3921", Scope = "member", Target = "~M:Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.PropertyPage.SetObjects(System.UInt32,System.Object[])")]
//github.com/dotnet/roslyn-analyzers/issues/1654", Scope = "member", Target = "~M:Microsoft.VisualStudio.ProjectSystem.VS.TempPE.TempPEBuildManager.DisposeCoreAsync(System.Boolean)~System.Threading.Tasks.Task")]
//github.com/dotnet/roslyn-analyzers/issues/2416", Scope = "member", Target = "~M:Microsoft.VisualStudio.ProjectSystem.VS.NuGet.ProjectAssetFileWatcher.ProjectAssetFileWatcherInstance.GetFileHashOrNull(System.String)~System.Byte[]")]
//github.com/dotnet/roslyn-analyzers/issues/2416", Scope = "member", Target = "~M:Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.GraphNodes.Actions.InputNodeGraphActionHandlerBase.TryHandleRequest(Microsoft.VisualStudio.GraphModel.IGraphContext)~System.Boolean")]
//github.com/dotnet/roslyn-analyzers/issues/2416", Scope = "member", Target = "~M:Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.GraphNodes.Actions.SearchGraphActionHandler.Search(Microsoft.VisualStudio.GraphModel.IGraphContext)")]
//github.com/dotnet/roslyn-analyzers/issues/2416", Scope = "member", Target = "~M:Microsoft.VisualStudio.Telemetry.VsTelemetryService.HashValue(System.String)~System.String")]
//github.com/dotnet/roslyn-analyzers/issues/2416", Scope = "member", Target = "~P:Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.DebugPageViewModel.BrowseDirectoryCommand")]
//github.com/dotnet/roslyn-analyzers/issues/2416", Scope = "member", Target = "~P:Microsoft.VisualStudio.ProjectSystem.VS.PropertyPages.DebugPageViewModel.BrowseExecutableCommand")]
//github.com/dotnet/roslyn-analyzers/issues/2416", Scope = "member", Target = "~M:Microsoft.VisualStudio.ProjectSystem.VS.PackageRestore.ProjectAssetFileWatcher.ProjectAssetFileWatcherInstance.GetFileHashOrNull(System.String)~System.Byte[]")]
//  Type Forwarding may be removed in the future, when we accept breaking changes.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
/// <summary>
///   Overrides the current thread's CurrentUICulture property for all
///   resource lookups using this strongly typed resource class.
/// </summary>
/// <summary>
///   Looks up a localized string similar to There aren&apos;t any active launch profiles configured for this project..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Component (Windows Forms) Designer.
/// </summary>
/// <summary>
///   Looks up a localized string similar to The debug executable &apos;{0}&apos; specified in the &apos;{1}&apos; debug profile does not exist..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Framework ({0}).
/// </summary>
/// <summary>
///   Looks up a localized string similar to The project doesn&apos;t know how to run the profile {0}..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Don&apos;t show again.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Edit {0}.
/// </summary>
/// <summary>
///   Looks up a localized string similar to An error in the launch settings file needs to be corrected before you can run the &apos;{0}&apos; project . Please see the error list for details..
/// </summary>
/// <summary>
///   Looks up a localized string similar to An error in the launch settings file needs to be corrected before you can run the &apos;{0}&apos; project. {1}. Please see the error list for details..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Dependency.
/// </summary>
/// <summary>
///   Looks up a localized string similar to {0} - Import comes fom target file. This import cannot be removed..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Learn more.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Editing of multiple target framework is not supported..
/// </summary>
/// <summary>
///   Looks up a localized string similar to The debug profile &apos;{0}&apos; is missing the path to the executable to debug..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Expected to find migrated cpsroj in {0}, but did not find any..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Unable to run your project. The &quot;RunCommand&quot; property is not defined..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Projects targeting .NET Core {0}.{1} or newer are not supported by this version of Visual Studio..
/// </summary>
/// <summary>
///   Looks up a localized string similar to OK.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Project.
/// </summary>
/// <summary>
///   Looks up a localized string similar to &amp;Pack.
/// </summary>
/// <summary>
///   Looks up a localized string similar to &amp;Pack {0}.
/// </summary>
/// <summary>
///   Looks up a localized string similar to A newer version of Visual Studio is recommended for projects targeting .NET Core {0}.{1}..
/// </summary>
/// <summary>
///   Looks up a localized string similar to A project with an Output Type of Class Library cannot be started directly.
///
///In order to debug this project, add an executable project to this solution which references the library project. Set the executable project as the startup project..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Renaming the code element &apos;{0}&apos; failed..
/// </summary>
/// <summary>
///   Looks up a localized string similar to You are renaming a file. Would you also like to perform a rename in this project of all references to the code element &apos;{0}&apos;?.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Renaming Type.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Renaming Type from &apos;{0}&apos; to &apos;{1}&apos;.
/// </summary>
/// <summary>
///   Looks up a localized string similar to The metadata on &apos;DotNetCliToolReference&apos; item &apos;{0}&apos; is inconsistent between target frameworks. Only the first one will be restored..
/// </summary>
/// <summary>
///   Looks up a localized string similar to The value of the &apos;TargetFrameworkMoniker&apos; and &apos;NuGetTargetMoniker&apos; properties in the &apos;{0}&apos; configuration are both empty. This configuration will not contribute to NuGet restore, which may result in restore and build errors..
/// </summary>
/// <summary>
///   Looks up a localized string similar to The value of the &apos;{0}&apos; property is inconsistent between target frameworks. This property must be identical for NuGet restore to function correctly. The value &apos;{1}&apos; from the &apos;{2}&apos; configuration will be used, other target frameworks may fail to pick NuGet assets..
/// </summary>
/// <summary>
///   Looks up a localized string similar to User Control (Windows Forms) Designer.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Form (Windows Forms) Designer.
/// </summary>
/// <summary>
///   Looks up a localized string similar to The working directory &apos;{0}&apos; specified in the &apos;{1}&apos; debug profile does not exist..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Xproj project files are no longer supported. For details on migrating to csproj see https://docs.microsoft.com/en-us/dotnet/core/migration/..
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known command groups.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// from VS: src\vsproject\cool\coolpkg\resource.h
// from VS: src\vsproject\vb\vbprj\vbprjstr.h
// from VS: src\vsproject\fidalgo\WPF\Flavor\WPFFlavor\WPFProject.cs
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known F# command IDs.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known project-system command IDs.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known project-system order related command IDs.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known command IDs.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known command IDs.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides common well-known command IDs from the WPF flavor.
/// </summary>
// from VS: src\vsproject\fidalgo\WPF\Flavor\WPFFlavor\Guids.cs
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// There's no public API registering a trace listener for a 
// non-public trace source, so we need to use reflection
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represent the default set of capabilities for all .NET-based project.
/// </summary>
/// <summary>
///     Represents F#'s set of capabilities that are always present.
/// </summary>
/// <summary>
///     Represents C#'s set of capabilities that are always present.
/// </summary>
/// <summary>
///     Represents Visual Basic's set of capabilities that are always present.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Visual Basic
// "Visual Basic"
// "Visual Basic Project Files (*.vbproj);*.vbproj"
// Empty string because content type is not important, we just want to tell the diff that the file type is supported
// Use the XML editor
// F#
// "F#"
// "F# Project Files (*.fsproj);*.fsproj"
// Empty string because content type is not important, we just want to tell the diff that the file type is supported
// Use the XML editor
// C#
// "C#"
// "C# Project Files (*.csproj);*.csproj"
// Empty string because content type is not important, we just want to tell the diff that the file type is supported
// Use the XML editor
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents the managed project types in Visual Studio.
/// </summary>
/// <remarks>
///     A project type points to a factory that implements <see cref="IVsProjectFactory"/> and is responsible for creating an in-memory 
///     representation (implementing <see cref="IVsHierarchy"/>, <see cref="IVsProject"/>) that features through out Visual Studio 
///     interact with.
/// </remarks>
/// <summary>
///     A <see cref="string"/> representing the Visual Basic project type based on the Common Project System (CPS).
/// </summary>
/// <summary>
///     A <see cref="string"/> representing the legacy Visual Basic project type based on the native project system in msvbprj.dll.
/// </summary>
/// <summary>
///     A <see cref="Guid"/> representing the legacy Visual Basic project type based on the native project system in msvbprj.dll.
/// </summary>
/// <summary>
///     A <see cref="string"/> representing the C# project type based on the Common Project System (CPS).
/// </summary>
/// <summary>
///     A <see cref="Guid"/> representing the C# project type based on the Common Project System (CPS).
/// </summary>
/// <summary>
///     A <see cref="string"/> representing the legacy C# project type based on the native project system in csproj.dll.
/// </summary>
/// <summary>
///     A <see cref="Guid"/> representing the legacy C# project type based on the native project system in csproj.dll.
/// </summary>
/// <summary>
///     A <see cref="string"/> representing the F# project type based on the Common Project System (CPS).
/// </summary>
/// <summary>
///     A <see cref="Guid"/> representing the F# project type based on the Common Project System (CPS).
/// </summary>
/// <summary>
///     A <see cref="string"/> representing the legacy F# project type based on the Managed Package Framework (MPF).
/// </summary>
/// <summary>
///     A <see cref="Guid"/> representing the legacy F# project type based on the Managed Package Framework (MPF).
/// </summary>
/// <summary>
///     A <see cref="string"/> representing the deprecated C# (xproj) project type based on the Common Project System (CPS).
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This service creates a file from a given file template.
/// </summary>
/// <summary>
/// Create a file with the given template file and add it to the parent node.
/// </summary>
/// <param name="templateFile">The name of the template zip file.</param>
/// <param name="path">The path to the file to be created.</param>
/// <returns>true if file is added successfully.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IEnvironmentOptions"/> that calls into <see cref="DTE"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Exports a service to be aggregated with the project node.
/// </summary>
// Reuse ComServiceIdAttribute's logic for calculating IIDs.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Singleton loaded by the managed package which tracks projects in the solution to detect if any of them are not supported
/// with this version of Visual Studio and puts up a dialog warning the user.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a method for retrieving options from the host environment.
/// </summary>
/// <summary>
///     Returns the value associated with the specified category, page and option, if it exists, 
///     otherwise, returns <paramref name="defaultValue"/>.
/// </summary>
/// <param name="category">
///     A <see cref="string"/> containing the category of the option to return.
/// </param>
/// <param name="page">
///     A <see cref="string"/> containing the page of the option to return.
/// </param>
/// <param name="option">
///     A <see cref="string"/> containing the name of the option to return.
/// </param>
/// <param name="defaultValue">
///     The value to return if the value does not exist.
/// </param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// A service that is initialized when the VS package is initialized.
/// </summary>
/// <remarks>
/// Implementations must be exported in global scope.
/// </remarks>
/// <summary>
/// Called when the package is initializing.
/// </summary>
/// <remarks>
/// Always called on the UI thread.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Returns the specified interface from the service. This is useful when the service and interface differ
/// </summary>
// Do not used banned APIs
// Do not used banned APIs
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides access to common Visual Studio project services provided by the <see cref="UnconfiguredProject"/>.
/// </summary>
/// <summary>
///     Gets <see cref="IVsHierarchy"/> provided by the <see cref="UnconfiguredProject"/>.
/// </summary>
/// <summary>
///     Gets <see cref="IVsProject4"/> provided by the <see cref="UnconfiguredProject"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Shows a Yes/No confirmation box to the user.
/// </summary>
/// <returns>
///     <see langword="true"/> if the user clicked the Yes button, otherwise; 
///     <see langword="false"/> if the user clicked the No button.
/// </returns>
///<exception cref="COMException">
///     This method was not accessed from the UI thread.
/// </exception>
/// <summary>
///     Shows a warning to the user.
/// </summary>
///<exception cref="COMException">
///     This method was not accessed from the UI thread.
/// </exception>
/// <summary>
///     Shows a error to the user.
/// </summary>
///<exception cref="COMException">
///     This method was not accessed from the UI thread.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides access to a Visual Studio proffered service.
/// </summary>
/// <typeparam name="T">
///     The type of the service to retrieve and return from <see cref="GetValueAsync"/>.
/// </typeparam>
/// <summary>
///     Gets the service object associated with <typeparamref name="T"/>.
/// </summary>
/// <param name="cancellationToken">
///     A token whose cancellation indicates that the caller no longer is interested 
///     in the result. The default is <see cref="CancellationToken.None"/>.
/// </param>
/// <value>
///     The service <see cref="object"/> associated with <typeparamref name="T"/>;
///     otherwise, <see langword="null"/> if it is not present;
/// </value>
/// <remarks>
///     Note that cancelling <paramref name="cancellationToken"/> will not cancel the 
///     creation of the service, but will result in an expedient cancellation of the 
///     returned <see cref="Task"/>, and a dis-joining of any <see cref="JoinableTask"/> 
///     that may have occurred as a result of this call.
/// </remarks>
/// <exception cref="OperationCanceledException">
///     The result is awaited and <paramref name="cancellationToken"/> is cancelled.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides access to a Visual Studio proffered service.
/// </summary>
/// <typeparam name="TService">
///     The type of the service to retrieve.
/// </typeparam>
/// <typeparam name="TInterface">
///     The type of the service to return from <see cref="IVsService{T}.GetValueAsync(CancellationToken)"/>
/// </typeparam>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides access to a Visual Studio proffered service that must be used on the UI thread.
/// </summary>
/// <typeparam name="T">
///     The type of the service to retrieve and return from <see cref="Value"/>.
/// </typeparam>
/// <summary>
///     Gets the service object associated with <typeparamref name="T"/>.
/// </summary>
/// <exception cref="COMException">
///     This property was not accessed from the UI thread.
/// </exception>
/// <value>
///     The service <see cref="object"/> associated with <typeparamref name="T"/>;
///     otherwise, <see langword="null"/> if it is not present.
/// </value>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides access to a Visual Studio proffered service that must be used on the UI thread.
/// </summary>
/// <typeparam name="TService">
///     The type of the service to retrieve.
/// </typeparam>
/// <typeparam name="TInterface">
///     The type of the service to return from <see cref="IVsService{T}.GetValueAsync"/>
/// </typeparam>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This class is here only to remember whether this is a newly created project or not. CPS will import INewProjectInitializationProvider and Call
/// InitializeNewProject for new projects. Just set a bool to remember this state.
/// 
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Returns the specified <see cref="HierarchyId"/> for the specified node.
/// </summary>
/// <remarks>
///     This method should only be called on and the result used on the UI thread.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Always make sure TryApplyChanges is called from an UI thread.
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <inheritdoc cref="ISolutionService"/>
// We handle both prioritized and regular before/after events to update state as early as possible,
// and ensure we set the value regardless of whether the caller supports one or both interfaces.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Lookup for known <see cref="ITargetFramework"/> objects, keyed by both
/// <see cref="ITargetFramework.ShortName"/> and <see cref="ITargetFramework.FullName"/>.
/// </summary>
// Fast path for an exact name match
// Try to parse a short or full framework name
// The full name was known, so cache by the provided (unknown) name too for next time
// The short name was known, so cache by the provided (unknown) name too for next time
// This is a completely new target framework. Create, cache and return it.
// Note: catching all exceptions and return a generic TargetFramework for given shortOrFullName
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IUnconfiguredProjectVsServices"/> that delegates onto 
///     it's <see cref="IUnconfiguredProjectServices.HostObject"/> and underlying <see cref="IUnconfiguredProjectCommonServices"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Do not used banned APIs (wrapping IAsyncServiceProvider/SAsyncServiceProvider)
/// <summary>
///     Provides an implementation of <see cref="IVsService{T}"/> that calls into Visual Studio's <see cref="IAsyncServiceProvider"/>.
/// </summary>
// If the service request requires a package load, GetServiceAsync will 
// happily do that on a background thread.
// We explicitly switch to the UI thread to avoid doing a QueryInterface 
// via blocking RPC for STA objects when we cast explicitly to the type
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Do not used banned APIs (wrapping IAsyncServiceProvider/SAsyncServiceProvider)
/// <summary>
///     Provides an implementation of <see cref="IVsService{TInterfaceType, TServiceType}"/> that calls into Visual Studio's <see cref="SVsServiceProvider"/>.
/// </summary>
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Responsible for listening to project loaded events and firing <see cref="IUnconfiguredProjectTasksService.PrioritizedProjectLoadedInHost"/> and 
///     <see cref="IUnconfiguredProjectTasksService.ProjectLoadedInHost"/>.
/// </summary>
// Only want to run in projects where this is applicable
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Do not used banned APIs (wrapping IServiceProvider)
/// <summary>
///     Provides an implementation of <see cref="IVsUIService{T}"/> that calls into Visual Studio's <see cref="IServiceProvider"/>.
/// </summary>
// We always verify that we're on the UI thread regardless 
// of whether we've already retrieved the service to always
// enforce this.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Do not used banned APIs (wrapping IServiceProvider)
/// <summary>
///     Provides an implementation of <see cref="IVsUIService{TInterfaceType, TServiceType}"/> that calls into Visual Studio's <see cref="IServiceProvider"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     An abstract class that maps <see cref="IExtenderCATIDProvider"/> to a more correct model.
/// </summary>
// TODO remove suppression once CPS annotation corrected
// Nullability of reference types in return type doesn't match implicitly implemented member.
// Nullability of reference types in return type doesn't match implicitly implemented member.
// CPS's implementation of ExtenderCATIDType incorrectly treats the same "instances" as distinct items based 
// where they are accessed in CPS. It also incorrectly maps "HierarchyExtensionObject" and "HierarchyBrowseObject" 
// as only applying to the hierarchy, when they take ITEMIDs indicating the node they apply to.
//
// See https://docs.microsoft.com/en-us/visualstudio/extensibility/internals/extending-the-object-model-of-the-base-project.
//
// The latter issue we can do nothing about, however, to address the former, map these types to a truer form it makes 
// it easier on implementors and maintainers of this to understand the objects we're talking about.
// IVsHierarchy.GetProperty(VSITEMID.Root, VSHPROPID_ExtObjectCATID)
// DTE.Project
// IVsHierarchy.GetProperty(VSHPROPID_BrowseObjectCATID)
// EnvDTE.Project.Properties
// IVsCfgProvider2.GetCfgProviderProperty(VSCFGPROPID_IntrinsicExtenderCATID)/DTE.Configuration
// IVsHierarchy.GetProperty(VSHPROPID_CfgBrowseObjectCATID)
// EnvDTE.Configuration.Properties
// EnvDTE.ProjectItem
// VSLangProject.Reference
// EnvDTE.ProjectItem.Properties (when reference)
// EnvDTE.ProjectItem.Properties (when file)
// FolderProperties
// EnvDTE.ProjectItem.Properties (when folder)
// EnvDTE.ProjectItem.Properties (when not file, folder, reference)
/// <summary>
///     Represents <see cref="EnvDTE.Project"/>.
/// </summary>
/// <summary>
///     Represents <see cref="EnvDTE.Project.Properties"/>.
/// </summary>
/// <summary>
///     Represents <see cref="EnvDTE.Configuration"/>.
/// </summary>
/// <summary>
///     Represents <see cref="EnvDTE.Configuration.Properties"/>.
/// </summary>
/// <summary>
///     Represents <see cref="EnvDTE.ProjectItem"/>.
/// </summary>
/// <summary>
///     Represents <see cref="EnvDTE.ProjectItem.Properties"/> when a file.
/// </summary>
/// <summary>
///     Represents <see cref="EnvDTE.ProjectItem.Properties"/> when a folder.
/// </summary>
/// <summary>
///     Represents <see cref="VSLangProj.Reference"/> or <see cref="EnvDTE.ProjectItem.Properties"/> when a reference.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Manages the portable executable (PE) files produced by running custom tools.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="VSBuildManager"/> class.
/// </summary>
// This has to be a property import to prevent a circular dependency as the bridge imports this class in order to fire events
/// <summary>
/// Occurs when a design time output moniker is deleted.
/// </summary>
/// <summary>
/// Occurs when a design time output moniker is dirty
/// </summary>
/// <summary>
/// Gets the project of which the selected item is a part.
/// </summary>
/// <summary>
/// Gets the top-level extensibility object.
/// </summary>
/// <summary>
/// Gets the immediate parent object of a given object.
/// </summary>
/// <summary>
/// Gets the temporary portable executable (PE) monikers for a project.
/// </summary>
// We don't need to thread switch here because if the caller is on the UI thread then everything is fine
// and if the caller is on a background thread, switching us to the UI thread doesn't provide any guarantees to it.
// It would mean the bridges state can't change, but it only reads the state once, and thats not our responsibility anyway.
/// <summary>
/// Builds a temporary portable executable (PE) and returns its description in an XML string.
/// </summary>
// See comment above about why we don't need any thread switching here.
/// <summary>
/// Occurs when a design time output moniker is deleted.
/// </summary>
/// <summary>
/// Occurs when a design time output moniker is dirty.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// <see cref="VSProject"/> imports <see cref="VSLangProj.VSProject"/> provided by CPS
/// and wraps it into an object that implements both <see cref="VSLangProj.VSProject"/> and 
/// <see cref="VSLangProj.ProjectProperties"/>. This enables us to provide
/// ProjectProperties to the Project Property Pages and maintain Backward Compatibility.
/// </summary>
/// <remarks>
/// This implementation of VSProject just redirects the VSProject call to the contained
/// VSProject object imported from CPS
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// IEvaluatedProperty.GetValueAsync always returns a non-null value, though
// it inherits this method from IProperty which can return null.
// Implementation of VsLangProj.ProjectProperties
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// For testing purpose only
/// </summary>
// Non-nullable field '_activeConfiguredProjectSubscriptionService' is uninitialized
// Non-nullable field '_activeConfiguredProjectSubscriptionService' is uninitialized
/// <summary>
/// For testing purpose only
/// </summary>
/// <summary>
/// Returns an enumerator for the list of imports.
/// </summary>
// lIndex is One-based index
//set up a subscription to listen for namespace import changes
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Cannot reach this point, since index has to be Int or String
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     An implementation of <see cref="IVsErrorListProvider"/> that delegates onto the language
///     service so that it de-dup warnings and errors between IntelliSense and build.
/// </summary>
/// <remarks>
/// <see cref="UnconfiguredProject"/> must be imported in the constructor in order for scope of this class' export to be correct.
/// </remarks>
// We only want to pass compiler, analyzers, etc to the language 
// service, so we skip tasks that do not have a code
// Language Service doesn't handle it, typically because file 
// isn't in the project or because it doesn't have line/column
/// <summary>
///     Attempts to extract the details required by the VS Error List from an MSBuild build event.
/// </summary>
/// <param name="eventArgs">The build event.  May be null.</param>
/// <param name="result">The extracted details, or <c>null</c> if <paramref name="eventArgs"/> was <c>null</c> or of an unrecognized type.</param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Captures details from various types of MSBuild events.
/// </summary>
/// <summary>
/// Gets the line number that should be reported to the VS error list.
/// (<see cref="LineNumber"/> - 1) to account for +1 that the error list applies.
/// </summary>
// The VS error list uses 0-based line numbers so a -1 adjustment needs to be made.
// It's weird.  We report "12" and they'll display "13".
/// <summary>
/// Gets the line number that should be reported to the VS error list.
/// (<see cref="LineNumber"/> - 1) to account for +1 that the error list applies.
/// </summary>
// The VS error list uses 0-based line numbers so a -1 adjustment needs to be made.
// It's weird.  We report "12" and they'll display "13".
/// <summary>
/// Gets the column number that should be reported to the VS error list.
/// (<see cref="ColumnNumber"/> - 1) to account for +1 that the error list applies.
/// See <see cref="LineNumberForErrorList"/>, too.
/// </summary>
/// <summary>
/// Gets the column number that should be reported to the VS error list.
/// (<see cref="ColumnNumber"/> - 1) to account for +1 that the error list applies.
/// See <see cref="LineNumberForErrorList"/>, too.
/// </summary>
/// <summary>
/// Makes the specified path absolute if possible, otherwise return an empty string.
/// </summary>
/// <param name="basePath">The path used as the root if <paramref name="path"/> is relative.</param>
/// <param name="path">An absolute or relative path.</param>
/// <returns>An absolute path, or the empty string if <paramref name="path"/> invalid.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This implementation is a copy from CPS
/// </summary>
// This will throw if the cookie is not in the list.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This implementation is a copy from CPS
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This implementation is a copy from CPS
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Checks a legacy VB project for compatibility with the new project system.
/// </summary>
// We need to fill this out: https://github.com/dotnet/roslyn/issues/11285
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the C# implementation of <see cref="IItemTypeGuidProvider"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides QueryDebugTargetsAsync() support for running the project output or any random executable. It is not an exported
/// CPS debugger but hooks into the launch profiles extensibility point. The order of this provider is
/// near the bottom to ensure other providers get chance to handle it first
/// </summary>
// The higher the number the higher priority and we want this one last
/// <summary>
/// This provider handles running the Project and empty commandName (this generally just runs the executable)
/// </summary>
/// <summary>
/// Called just prior to launch to do additional work (put up ui, do special configuration etc).
/// </summary>
/// <summary>
/// Called just after the launch to do additional work (put up ui, do special configuration etc).
/// </summary>
// Used by default Windows debugger to figure out whether to add an extra
// pause to end of window when CTRL+F5'ing a console application
/// <summary>
/// This is called on F5/Ctrl-F5 to return the list of debug targets. What we return depends on the type
/// of project.
/// </summary>
// Resolve the tokens in the profile
/// <summary>
/// Does some basic validation of the settings. If we don't, the error messages are terrible.
/// </summary>
/// <summary>
/// Helper returns cmd.exe as the launcher for Ctrl-F5 (useCmdShell == true), otherwise just the exe and args passed in.
/// </summary>
// Escape the characters ^<>& so that they are passed to the application rather than interpreted by cmd.exe.
/// <summary>
/// This is called on F5 to return the list of debug targets. What we return depends on the type
/// of project.
/// </summary>
// If no working directory specified in the profile, we default to output directory. If for some reason the output directory
// is not specified, fall back to the project folder.
// If the directory at OutDir doesn't exist, fall back to the project folder
// Is this profile just running the project? If so we ignore the exe
// Get the executable to run, the arguments and the default working directory
// If the working directory is not rooted we assume it is relative to the project directory
// IF the executable is not rooted, we want to make is relative to the workingDir unless is doesn't contain
// any path elements. In that case we are going to assume it is in the current directory of the VS process, or on
// the environment path. If we can't find it, we just launch it as before.
// Root of current drive
// Combine with the working directory used by the profile
// Try to resolve against the current working directory (for compat) and failing that, the environment path.
// Apply environment variables.
/// <summary>
/// Queries properties from the project to get information on how to run the application. The returned Tuple contains:
/// exeToRun, arguments, workingDir
/// </summary>
// If the working directory is relative, it will be relative to the project root so make it a full path
// First try "RunCommand" property
// If we're launching for debug purposes, prevent someone F5'ing a class library
// Otherwise, fall back to "TargetPath"
// If dotnet.exe is used runCommand returns just "dotnet". The debugger is going to require a full path so we need to append the .exe
// extension.
// If the path is just the name of an exe like dotnet.exe then we try to find it on the path
/// <summary>
/// Searches the path variable for the first match of exeToSearchFor. Returns
/// null if not found.
/// </summary>
// We don't want one bad path entry to derail the search
/// <summary>
/// Escapes the given characters in a given string, ignoring escape sequences when inside a quoted string.
/// </summary>
/// <param name="unescaped">The string to escape.</param>
/// <param name="toEscape">The characters to escape in the string.</param>
/// <returns>The escaped string.</returns>
// If we're currently not in a quoted string, then we need to escape anything in toEscape.
// The valid transitions are to EscapedCharacter (for a '\', such as '\"'), and QuotedString.
// If a '\' was the previous character, then we blindly append to the string, escaping if necessary,
// and move back to NormalCharacter. This handles '\"'
// If we're in a string, we don't escape any characters. If the current character is a '\',
// then we move to QuotedStringEscapedCharacter. This handles '\"'. If the current character
// is a '"', then we're out of the string. Otherwise, we stay in the string.
// If we have one slash, then we blindly append to the string, no escaping, and move back to
// QuotedString. This handles escaped '"' inside strings.
// We can't get here.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides the set of debug profiles to populate the debugger dropdown.  The Property associated
/// with this is the ActiveDebugProfile which contains the currently selected profile, and the DebugProfiles which
/// is the name of the enumerator provider
/// </summary>
// Represents the link to the launch profiles
// Represents the link to our source provider
/// <summary>
/// This provides access to the class which creates the list of debugger values..
/// </summary>
// Compute the new enum values from the profile provider
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides the IEnumValue's for the ActiveDebugProfile property. This is what is used to drive
/// the debug target selection dropdown.
/// </summary>
/// <summary>
/// Create a new instance of the class.
/// </summary>
/// <summary>
/// See <see cref="IDynamicEnumValuesGenerator"/>
/// </summary>
/// <summary>
/// See <see cref="IDynamicEnumValuesGenerator"/>
/// </summary>
/// <summary>
/// See <see cref="IDynamicEnumValuesGenerator"/>
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Handles the NoAction profile so that Ctrl-f5\F5 throws an error to the user
/// </summary>
// High number so it called first
/// <summary>
/// This provider handles the NoAction profile
/// </summary>
/// <summary>
/// Called just prior to launch to do additional work (put up ui, do special configuration etc).
/// </summary>
// Nothing to do here
/// <summary>
/// Called just prior to launch to do additional work (put up ui, do special configuration etc).
/// </summary>
// Nothing to do here
/// <summary>
/// When F5\Ctrl-F5 is invoked on a NoAction profile and error is thrown to the user. Typical case is trying to run a 
/// class library project
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Interface definition used by the ProjectDebugger to decide how to launch a profile. The order
/// of the imports is important in that this determines the order which profiles will be tested
/// for support 
/// </summary>
/// <summary>
/// Return true if this provider supports this profile type.
/// </summary>
/// <summary>
/// Called in response to an F5/Ctrl+F5 operation to get the debug launch settings to pass to the
/// debugger for the active profile
/// </summary>
/// <summary>
/// Called just prior to launch to allow the provider to do additional work.
/// </summary>
/// <summary>
/// Called right after launch to allow the provider to do additional work.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Optional interface that can be cast from IDebugProfileLaunchTargetsProvider for those implementations which need to distinguish
/// calls to QueryDebugTargetsAsync that originate from IVsDebuggableProjectCfg:QueryDebugTargets, from calls that originate from 
/// IVsDebuggableProjectCfg:DebugLaunch. If this interface is implemented, calls that originate from a debugLaunch will call 
/// QueryDebugTargetsForDebugLaunchAsync(). Calls from QueryDebugTargets will call IDebugProfileLaunchTargetsProvider:QueryDebugTargetsAsync
/// </summary>
/// <summary>
/// Called in response to an F5/Ctrl+F5 operation to get the debug launch settings to pass to the
/// debugger for the active profile.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// This is the Guid of C#, VB and F# Debug property page
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// The exported CPS debugger for all types of K projects (web, consoles, class libraries). Defers to
/// other types to get the DebugTarget information to launch.
/// </summary>
/// <summary>
/// Constructors. Unit test one is 2nd
/// </summary>
// We want it sorted so that higher numbers come first (is the default for these collections but explicitly expressed here)
/// <summary>
/// Import the LaunchTargetProviders which know how to run profiles
/// </summary>
// Tracks the last launched provider so we can forward calls to IDeployedProjectItemMappingProvider
/// <summary>
/// Called by CPS to determine whether we can launch
/// </summary>
/// <summary>
/// Helper returns the correct debugger engine based on the targeted framework
/// </summary>
// The engine depends on the framework
/// <summary>
/// TODO: This is a placeholder until issue https://github.com/dotnet/project-system/issues/423 is addressed. 
/// This information should come from the targets file.
/// </summary>
/// <summary>
/// This is called to query the list of debug targets  
/// </summary>
/// <summary>
/// This is called on F5 to return the list of debug targets. What is returned depends on the debug provider extensions
/// which understands how to launch the currently active profile type. 
/// </summary>
// Get the active debug profile (timeout of 5s, though in reality is should never take this long as even in error conditions
// a snapshot is produced).
// Should have a profile
// Now find the DebugTargets provider for this profile
/// <summary>
/// Returns the provider which knows how to launch the profile type.
/// </summary>
// We search through the imports in order to find the one which supports the profile
/// <summary>
/// Overridden to direct the launch to the current active provider as determined by the active launch profile
/// </summary>
/// <summary>
/// Launches the Visual Studio debugger.
/// </summary>
// The debugger needs to be called on the UI thread
// Free up the memory allocated to the (mostly) managed debugger structure.
/// <summary>
/// Copy information over from the contract struct to the native one.
/// </summary>
/// <returns>The native struct.</returns>
// **Begin common section -- keep this in sync with GetDebuggerStruct**
// **End common section**
/// <summary>
/// Frees memory allocated by GetDebuggerStruct.
/// </summary>
/// <summary>
/// Converts the environment key value pairs to a valid environment string of the form
/// key=value/0key2=value2/0/0, with nulls between each entry and a double null terminator.
/// </summary>
// If no dictionary was set, or its empty, the debugger wants null for its environment block.
// Collect all the variables as a null delimited list of key=value pairs.
// Add a final list-terminating null character.
// This is sent to native code as a BSTR and no null is added automatically.
// But the contract of the format of the data requires that this be a null-delimited,
// null-terminated list.
/// <summary>
/// Collects an array of GUIDs into an array of bytes.
/// </summary>
/// <remarks>
/// The order of the GUIDs are preserved, and each GUID is copied exactly one after the other in the byte array.
/// </remarks>
/// <summary>
/// IDeployedProjectItemMappingProvider
/// Implemented so that we can map URL's back to local file item paths
/// </summary>
// Just delegate to the last provider. It needs to figure out how best to map the items
// Return false to allow normal processing
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Responsible for adding or removing the project from the startup list based on whether the project
///     is debuggable or not.
/// </summary>
/// <remarks>
/// <see cref="UnconfiguredProject"/> must be imported in the constructor in order for scope of this class' export to be correct.
/// </remarks>
// If we're already registered, the service no-ops
// If we're already unregistered, the service no-ops
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//schemas.microsoft.com/developer/msbuild/2003";
// If the project has either a Project-level SDK attribute or an Import-level SDK attribute, we'll open it with the new project system.
// Check both namespace-qualified and unqualified forms to include projects with and without the xmlns attribute.
/*/msb:Import[@Sdk]", nsm) != null || doc.XPathSelectElement("/*/Import[@Sdk]") != null;
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the Visual Basic implementation of <see cref="IItemTypeGuidProvider"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides support for all Add Item commands that operate on <see cref="IProjectTree"/> nodes, across C# and VB
/// </summary>
/// <summary>
/// Gets the list of potential templates that could apply to this handler. Implementors should cache the results of this method.
/// </summary>
// Look up the resources from each package to get the strings to pass to the Add Item dialog.
// These strings must match what is used in the template exactly, including localized versions. Rather than relying on
// our localizations being the same as the VS repository localizations we just load the right strings using the same
// resource IDs as the templates themselves use.
/// <summary>
/// Initializes a new instance of CommandDetails allowing for each string to come from different packages
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Enable the command if the build manager is ready to build.
// Ensure build manager is initialized.
// Switch to UI thread for querying the build manager service.
// Register for solution build events.
// Build manager APIs require UI thread access.
// Save documents before build.
/*docCookie*/));
// We need to make sure dependencies are built so they can go into the package
// Assembly our list of projects to build
// First we find out how many dependent projects there are
// Get all of the dependent projects, and add them to our list
// Turn off "GeneratePackageOnBuild" because otherwise the Pack target will not do a build, even if there is no built output
// We tell the Solution Build Manager to Package our project, which will call the Pack target, which will build if necessary.
// Any dependent projects will just do a normal build
// Build manager APIs require UI thread access.
// Unregister solution build events.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// We assume that if the AppDesignerTreeModifier marked an AppDesignerFolder, that we must support the Project Designer
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Handles populating a menu command on the debug dropdown when the menu reflects the IEnumValues for
/// a debug property. It shows the active framework used for running the app (F5/Ctrl+F5).
/// </summary>
/// <summary>
/// Called by the base when one if our menu ids is clicked. Need to return true if the command was handled
/// </summary>
/// <summary>
/// Called by the base when one of our menu ids is queried for. If the index is
/// is greater than the count we want to return false
/// </summary>
// See if the projects support at least two runtimes
// Only call this if we will need it down below.
// Hide and disable the command
// Get's a check if it matches the active one, or there is no active one in which case the first one is the active one
// Implement internal logic asynchronously
// Implement internal logic asynchronously
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Updates the text of the Frameworks menu to include the current active framework. Instead of just saying
/// Frameworks it will say Frameworks (netcoreapp1.0).
/// </summary>
/// <summary>
/// Exec handler called when one of the menu items is selected. Does some
/// basic validation before calling the commands QueryStatusCommand to update
/// its state
/// </summary>
/// <summary>
/// QueryStatus handler called to update the status of the menu items. Does some
/// basic validation before calling the commands QueryStatusCommand to update
/// its state
/// </summary>
// Only get this if we will need it down below
// If no active framework or the current active property doesn't match any of the frameworks, then
// set it to the first one.
/// <summary>
/// For unit testing to wrap the JTF.Run call.
/// </summary>
// Only wrapped for test purposes
// Do not used banned APIs
// Do not used banned APIs
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Implementation of an OleMenuCommand which supports the DynamicStart (like an MRU list) type 
/// of commands
/// </summary>
/// <summary>
/// Derived classes need to implement the following two methods. They must return false
/// if the command is not handled (index is out of range)
/// </summary>
/// <summary>
/// Overridden to set the MatchedCmdId. This is used later by QS\Exec when determining the
/// index of the current selection.
/// </summary>
// Is the index in range?
// No match, clear command id and return false
/// <summary>
/// Returns the current index (0 based) of the command that is currently selected (set by 
/// MatchedCommandId).
/// </summary>
// Index is the current matched ID minus the base
/// <summary>
/// Exec handler called when one of the menu items is selected. Does some
/// basic validation before calling the commands QueryStatusCommand to update
/// its state
/// </summary>
// Only return if command was handled
// We want to make sure to clear the matched commandid.
/// <summary>
/// QueryStatus handler called to update the status of the menu items. Does some
/// basic validation before calling the commands QueryStatusCommand to update
/// its state
/// </summary>
// Only return if command was handled
// We want to make sure to clear the matched commandid.
// If we get this far, hide the command
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides a mechanism to get an export from a DotNet project which is the only startup project. The capabilityMatch is
/// used to refine the projects that are considered
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Opens the Project Designer ("Property Pages") when selecting the Open menu item on the AppDesigner folder
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Opens the Project Designer ("Property Pages") when the user double-clicks or presses ENTER on the AppDesigner folder while its selected
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Registers VS menu commands provided by the managed language project system package in.
/// </summary>
/// <summary>
/// <see cref="MenuCommand"/> implementations may export themselves with this contract name
/// to be automatically added when the managed-language project system package initializes.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Handles populating a menu command on the debug dropdown when the menu reflects the IEnumValues for
/// a debug property. It shows the active framework used for running the app (F5/Ctrl+F5).
/// </summary>
/// <summary>
/// Returns the export T of the startup projects if those projects support the specified capabilities
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///  Creates a TemplateDetails record where both resources come from a single package
/// </summary>
/// <summary>
///  Creates a TemplateDetails record where both resources come from a single package, and combines the two capabilities with &amp; before checking.
/// </summary>
/// <summary>
///  Creates a TemplateDetails record by combining the two capabilities with &amp; before checking.
/// </summary>
/// <summary>
///  Creates a new TemplateDetails record
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//                     Command Id                                        Capabilities                                                        DirNamePackageGuid          DirNameResourceId                                       TemplateNameResourceId
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//                     Command Id                                Capability                      DirNamePackageGuid          DirNameResourceId                                       TemplateNameResourceId
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//                     Command Id                             Capabilities                                          DirNamePackageGuid       DirNameResourceId                                         TemplateName  TemplateNameResourceId
//                                                                                                                                                                                                     PackageGuid
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// We use a hint receiver that listens for when a file gets added.
// The reason is so we can modify the MSBuild project inside the same write lock of when a file gets added internally in CPS.
// This ensures that we only perform actions on the items that were added as result of a e.g. a add new/existing item dialog.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Wait for updating to finish before re-selecting the node that moved.
// We need to re-select the node after it is moved in order to continuously move the node using hotkeys.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// These are helper functions to select items in a IVsUIHierarchy.
/// This is hack due to CPS not exposing functionality to do this. They have it internally though.
/// Bug filed here: https://devdiv.visualstudio.com/DevDiv/VS%20IDE%20CPS/_workitems/edit/589115
/// </summary>
/// <summary>
/// Select an item in a IVsIHierarchy.
/// Calls on the UI thread.
/// </summary>
/// <summary>
/// Select an item in a IVsIHierarchy.
/// </summary>
// We need to unselect the item if it is already selected to re-select it correctly.
/// <summary>
/// Callbacks with a hierarchy and hierarchy window for use.
/// </summary>
/// <summary>
/// Get reference to IVsUIHierarchyWindow interface from guid persistence slot.
/// </summary>
/// <param name="serviceProvider">The service provider.</param>
/// <param name="persistenceSlot">Unique identifier for a tool window created using IVsUIShell::CreateToolWindow.
/// The caller of this method can use predefined identifiers that map to tool windows if those tool windows
/// are known to the caller. </param>
/// <returns>A reference to an IVsUIHierarchyWindow interface, or <c>null</c> if the window isn't available, such as command line mode.</returns>
// Do not used banned APIs
// Do not used banned APIs
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Reset everything because we are done.
// We need to make sure these are all reset so we can listen for changes again.
// This will only be called once even if you are adding multiple files from say, e.g. add existing item dialog
// However we check to see if we captured the previous includes for sanity to ensure it only gets set once.
/// <summary>
/// When the task runs, if the receiver picks up that we will be adding an item, it will capture the MSBuild project's includes.
/// If any items were added as a result of the task running, the hint receiver will perform the specified action on those items.
/// </summary>
// We need to be sure we are not hinting before we reset, otherwise everything would get reset before HintedAsync gets called.
// This is for sanity.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Helper methods to interact with a project tree that have items with a valid display order.
/// </summary>
/// <summary>
/// Performs a move on any items that were added based on the previous includes.
/// </summary>
// We do a sanity re-evaluation to absolutely ensure changes were met.
/// <summary>
/// Get all evaluated includes from a project as an immutable hash set. This includes items that aren't for ordering as well.
/// </summary>
/// <summary>
/// Checks to see if the project tree has a valid display order.
/// </summary>
/// <summary>
/// Gets the display order for a project tree.
/// </summary>
// It's safe to return zero here. Project trees that do not have a display order are always assumed zero.
/// <summary>
/// Checks if the given project tree can move up over one of its siblings.
/// </summary>
/// <summary>
/// Move the project tree up over one of its siblings.
/// </summary>
/// <summary>
/// Checks if the given project tree can move down over one of its siblings.
/// </summary>
/// <summary>
/// Move the project tree down over one of its siblings.
/// </summary>
/// <summary>
/// Move the respective item elements above the target.
/// </summary>
/// <summary>
/// Move the respective item elements below the target.
/// </summary>
/// <summary>
/// Move the respective item elements to the top of the target's children.
/// </summary>
// This is to handle adding files to empty folders since empty folders do not have a valid display order yet.
// We need to find a target up the tree that has a valid display order, because it most likely will have our reference element that we want.
/// <summary>
/// Get project item elements based on the project tree.
/// Project tree can be a folder or item.
/// </summary>
/// <summary>
/// Determines if we are moving up or down files or folders.
/// </summary>
// GetItemsByEvaluatedInclude is efficient and uses a MultiDictionary underneath.
//     It uses this: new MultiDictionary<string, ProjectItem>(StringComparer.OrdinalIgnoreCase);
// We only care about adding one item associated with the evaluated include.
/// <summary>
/// Gets a read-only collection with the evaluated includes associated with a project tree.
/// Evaluated includes will be in order by their display order.
/// </summary>
// The queue is how we process each project tree.
// Technically it is possible to have more than one of the same item names.
// We only want to add one of them.
// Sanity check
/// <summary>
/// Checks to see if the display order is valid.
/// </summary>
/// <summary>
/// Gets a collection a project tree's children. 
/// The children will only have a valid display order, and the collection will be in order by their display order.
/// </summary>
/// <summary>
/// Gets a sibling based on the given project tree. Can return null.
/// </summary>
/// <param name="projectTree">the given project tree</param>
/// <param name="returnSibling">passes the index of the given project tree from the given ordered sequence, expecting to return a sibling</param>
/// <returns>a sibling</returns>
/// <summary>
/// Gets the previous sibling of the given project tree, if there is any. Can return null.
/// </summary>
/// <summary>
/// Gets the next sibling of the given project tree, if there is any. Can return null.
/// </summary>
/// <summary>
/// Gets a sibling of the given project tree based on the move action. Can return null.
/// </summary>
/// <summary>
/// Gets a reference element based on the given project tree and move action. Can return null.
/// The reference element is the element for which moved items will be above or below it.
/// </summary>
/// <summary>
/// Moves child elements based on the reference element and move action.
/// </summary>
/// <param name="elements"></param>
/// <param name="referenceElement">element for which moved items will be above or below it</param>
/// <param name="moveAction"></param>
/// <returns>true or false; 'true' if all elements were successfully moved. 'false' if just one element was not moved successfully.</returns>
// Sanity check
// Iterate in reverse order when we are wanting to move elements down.
// If we didn't do this, the end result would be the moved elements are reversed.
/// <summary>
/// Move project elements based on the given project tree, reference project tree and move action. 
/// Will modify the project if successful, but not save; only dirty.
/// </summary>
// The reference element is the element for which moved items will be above or below it.
/// <summary>
/// Move project elements based on the given project tree and move action. 
/// Will modify the project if successful, but not save; only dirty.
/// </summary>
// Determine what sibling we want to look at based on if we are moving up or down.
// We are excluding folder elements until CPS allows empty folders to be part of the order; when they do, we can omit checking the item type for "Folder".
// Related changes will also need to happen in TryMoveElementsToTop when CPS allows empty folders in ordering.
// Don't choose items that were imported. Most likely won't happen on added elements, but just in case for sanity.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This does proper file ordering for pasting or dropping items into a folder or project.
/// </summary>
// Grab the paste handler that has the highest order precedence that is below PasteOrdering's order precedence. 
// Grab the paste processor that has the highest order precedence that is below PasteOrdering's order precedence. 
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Naming Styles
// Naming Styles
// VSAPROPID
//[in] VSAPROPID
// VSAPROPID
// [in] VSAPROPID
// called after main initialization and before command executing and entering main loop
// !!!! NOTE !!!! THIS MUST BE THE SAME AS THE FIRST PROP DEFINED
// GUID of the Application ID Package; e.g. this is used to load resource strings.
// BSTR or I4 localize name of the App used in title bar.
// (either a string or a resource id that is loaded from GuidAppIDPackage UILibrary)
// I4 - Command Line Options dialog resource id in appid package satellite dll
// BOOL - default FALSE. TRUE if appid uses the solution, but does show it to the user
// !!! can be called before main initialization happen
// BOOL - default TRUE
// BOOL - default TRUE
// !!! can be called before main initialization happen
// BOOL - default TRUE
// BSTR - solution file extension (default - ".sln");
// BSTR - solution options file extension (default - ".suo");
// BSTR - path/filename for alternate MSOx DLL (default - ask MSI), exactly as passed to LoadLibrary
// BOOL - default TRUE should shortcuts to solutions/projects be added to 'recent' folder?
// I4 - HICON  for 32x32 icon
// I4 - HICON  for 16x16 icon
// BSTR - default Home page URL (for Web browser)
// BSTR - default Search page URL (for Web browser)
// IDispatch * (for IDocHostUIHandler::GetExternal), default SApplicationObject
// BSTR or I4 localize name of the short version of the App name, less than 32 chars.
// CLSID under which we're registered as a JIT Debug or Attach Server
// GUID of the "General" output window for the shell. First request for this creates it.
// default FALSE. TRUE if debugger should use SVsDebugLaunch launch service
// GUID of the default debug engine for this appid
// I4 - beginning of res id range of the Command Line Options string resource(s) in appid package
// satellite dll. used instead of CmdLineOptDialog when output piped to console
// I4 - end of res id range of the Command Line Options string resource(s) in appid package
// satellite dll. used instead of CmdLineOptDialog when output piped to console
// used to register as a runtime JIT Debugger
// BOOL - default is TRUE.  Persists expansion state of the project explorer
// Deprecated -- use PredefinedAliasesString instead
//   (was I4 - resource id in appid package satellite dll of predefined aliases text)
// BOOL - default is FALSE.  Should the Dynamic Help window be shown on F1
// BOOL - default is TRUE.  Are the MRU commands on the File menu used?
// BOOL - default is TRUE.  Should the main window accept dropped files (i.e., WS_EX_ACCEPTFILES)?
// BOOL - default is TRUE.  Should the AnswerWizard menubar control be disabled?
// BOOL - default is FALSE.  Should the Ansi codepage check be used when loading UI libraries?
// Set to TRUE to disable debugger's support for source-instruction stepping.
// BOOL - default is TRUE.  Should the VS shortcuts be used in the Open/Save/Browse dialogs?
// Either a VSASKUEdition or a string. VSASKUEdition if it is a standard version, or a BSTR if a custom version.
// BSTR - logo for command line
// BSTR - application supported in DDE (expected in WM_DDE_INITIATE).  Required for DDE support.
// BSTR - topic supported in DDE (expected in WM_DDE_INITIATE)  Required for DDE support.
// BOOL - default is FALSE.  If TRUE, about box puts up stuff about VSIP license required
// GUID - package GUID, which implements IVSDropFilesHandler to override default behaviour
// BSTR or I4 - error message for invalid cmd line to show before cmd line options help
// (either a string or a resource id that is loaded from GuidAppIDPackage UILibrary)
// BOOL - default is FALSE. Should security manager add safe domains from HKCU\<appid hive>\VsProtocol\SafeDomains
// BSTR - should be link to tech support for this appid.
// BOOL - default is FALSE.  Should the Miscellaneous Files project be hidden by default?
// BSTR - predefined aliases for the appid
// BOOL - default is FALSE.  Should runtime (and runtime ver) show up at the top of about box?
// I4 - some combination of the bits defined in VSASubSKUEdition or zero (if none).
// BSTR global (application) scoped text for Client Text field of status bar.
// BSTR or I4 localized replacement name for the 'Visual Studio Solutions' node in the 'Project Types' tree in
// the New Project dialog. (either a string or a resource id that is loaded from GuidAppIDPackage UILibrary)
// BSTR full path to the projects location (overrides the 'Visual Studio Projects' location)
// BSTR string used as the second line in the solution file (used for determining SLN double-click behavior)
// BOOL - default is FALSE. Should the Solution Explorer tool window hide its toolbar?
// BSTR name of folder at the end of the default my documents location, e.g. 'Visual Studio' in the default case: '%USERPROFILE%\My Documents\Visual Studio'
// BSTR name of folder used for appid-specific subfolders under '%USERPROFILE%\My Documents\Visual Studio', e.g. 'Visual Basic Express' for '%USERPROFILE%\My Documents\Visual Studio\Settings\Visual Basic Express'
// BSTR or I4 localized replacement name for the 'Visual Studio installed templates' header in the 'Templates' list
// in the New Project dialog. (either a string or a resource id that is loaded from GuidAppIDPackage UILibrary)
// BOOL - default is TRUE. Should the "Add New Online Template" icon be added to the New Project/Item dialogs?
// Note: if this icon is not added then the "My Templates" group only shows up if other user templates are added.
// VARIANT_BOOL indicating wether Add-ins can be loaded or not. If not implemented, then VARIANT_TRUE is assumed.
// I4 - HICON  for 64x64 icon
// BOOL - default is TRUE. In order to turn off AutoRecovery, an AppID should implement this
// propid and set its value to FALSE.
// VARIANT_BOOL indicating whether shell should treat the output window as disabled. Returning VARIANT_TRUE means that
// solution build manager will not try to output anything into the output window and 'Show Output window when build starts' will be hidden
// in the Options dialog. Default value is VARIANT_FALSE.
// VARIANT_BOOL indicating whether we should disable the start page in the shell
// INT_PTR pointing to the memory containing the VSSTARTPAGETHEME struct. The memory should be allocated and de-allocated at the
// appid implementation level.
// Returns the highest applicable license GUID, if licenses are required.
// If no licenses are required, returns E_NOTIMPL.
// The banner on top of the Registration and Trial dialogs.
// VARIANT_BOOL indicating if an AutoRecovery took place. The default value is VARIANT_FALSE, and it is set to VARAINT_TRUE
// iff an AutoRecovery happened, before the DTEEvents::OnStartupComplete event is fired. An AppID should query this value
// if they need to know if a Recovery took place to change their startup action, for example
// INT_PTR pointing to the memory containing the VSABOUTBOXTHEME struct. The memory should be allocated and de-allocated at the
// appid implementation level.
// BSTR Title for the SQM optin dialog.
// VARIANT_BOOL indicating whether the disaster recovery mechanism should save previously unsaved files.  The default is FALSE.
// I4 Enumeration indicating whether this is:
// 0: full release
// 1: CTP
// 2: Beta
// 3: RC
// I4 Days until expiration:
// <n> days
// -1 if already expired.
// if this is a full release, ie. not expiring, always returns 0
// BSTR what this release is branded as, e.g. November CTP, Beta 2, etc.
// BSTR what this release is branded as, e.g. November CTP, Beta 2, etc.
// SafeArray of BSTRs, in order from earliest to latest
// VT_BOOL. TRUE if machine-wide registry values should be moved under HKEY_CURRENT_USER
//          and common app-data files are written under per-user app-data with a
//          "Configuration" or "UserSettings" subkey/subfolder
// VT_BSTR  Alternative registry root to use when user settings and machine configuration
//          need to be different. If not implemented, then use the default registry root.
// VT_BOOL. TRUE if we should not write to the user's appdata folder
//          This might be TRUE in a "kiosk" application where the application leaves no
//          trace of the user behind on the machine.
// BSTR full name of the SQM log created for the current session.
// VT_BOOL (default is TRUE). In order to turn off support for Restart Manager, an AppID should implement this
// BSTR URL to show in the internal web browser for Help - Samples command
// BSTR (Remote) application data directory
// BSTR Local application data directory
// BSTR common (all users) application data directory
// VT_DATE value that represents the last time the configuration cache was built
//         of Visual Studio was initializing
// SafeArray of BSTRs. APPID specific list of folders where to look for Common (shared by all users) VS extensions.
//                     VS Extension Manager looks under these locations for VSIX manifest files.
// BSTR. APPID specific folder path for User extensions. VS Extension Manager
//       looks under this location for VSIX manifest files.
// VT_BOOL. Tells PkgDef management and Extension Manager API whether to load User extensions.
//          This property is calculated based on the security logic of extension management and user preferrences.
// SafeArray of BSTRs. List of folders that were searched for enabled user extensions.
//                     These are the essentially the user extensions that were enabled when the appid initialized.
// VT_BOOL. Each APPID specifies through this property if it allows loading ALL Visual Studio Packages
//          without PLK checking. Default is FALSE.
// VT_BOOL. Specifies whether the AppID is running in safe mode.
// I4. See PIDFamily enum in DDConfig.h for list of valid values.
// INT_PTR pointing to the memory containing the VSSPLASHSCREENTHEME struct. The memory should be allocated and
// de-allocated at the appid implementation level.
// VT_BOOL. True means the appid always requires elevation
//          False means the appid never requires elevation
//          Default means the appid doesn't care, allow msenv to make the decision based on other factors (command line switches, etc.)
// BSTR Full path of root location of installation (e.g. drive>:\Program Files\Microsoft Visual Studio <version>\)
// BSTR Full path of folder for installing per-machine Extensions (e.g. Example: C:\Program Files\Microsoft Visual Studio <VS version>\Common7\IDE\Extensions)
// INT_PTR pointing to the memory containing the VSGENERICTHEME struct. The memory should be allocated and
// de-allocated at the appid implementation level.
// VT_BSTR, Read-Only. Path to ActivityLog file.
// VT_BSTR, Read-Only. The build version of the release and the branch/machine/user information used to build it (e.g. "10.0.30319.01 RTMRel" or "10.0.30128.1 BRANCHNAME(COMPUTERNAME-USERNAME)"). This is the same as the release string shown in Help/About.
// VT_BOOL. Specifies whether samples are enabled. Defaults to false if not specified for Isolated Shell appids.
// VT_BOOL. Specifies whether Microsoft-owned extension galleries are enabled. Defaults to false if not specified for Isolated Shell appids.
// VT_BOOL. Specifies whether private extension galleries are enabled. Defaults to false if not specified for Isolated Shell appids.
// VT_BSTR. Gets a vector path for an icon. This vector path must conform to the path markup syntax used by System.Windows.Media.Geometry.
// VT_BSTR. The localized full brand name of the application, including SKU information. E.g. "Microsoft Visual Studio Professional 2012 RC" or "Microsoft Visual Studio Express 2012 RC for Windows 8"
// VT_BSTR. A short version of VSAPROPID_AppBrandName, less than 32 chars. E.g. "VS Pro 2012 RC" or "VS Express 2012 RC for Win8"
// VT_BSTR. A localized text describing the current SKU (name, year, release type, etc). E.g. "Ultimate 2012 RC" or "Express 2012 RC for Web"
// GUID representing the color theme that should be used by default for the appid. If unimplemented by the appid, or if the theme does not exist when the appid is launched, the default light theme is chosen.
// VT_UNKNOWN. IUnknown the free thread activity log service object.
// VT_INT_PTR - HICON for SM_CXICON x SM_CYICON app update icon.
// VT_INT_PTR - HICON for SM_CXSMICON x SM_CYSMICON app update icon.
// VT_INT_PTR - HICON for 64 x 64 app update icon.
// VT_BOOL. Specifies whether the application supports subscription license from VS Online
// GUID unique LicenseID that application specifies under $RootFolder$\Licenses for coordinating its VS Online subscription tokens.
// VT_BSTR. Unique Name that identifies this application with the VS Online Licensing Service.
// VT_BOOL. Specifies whether the application supports Connected User UI (e.g. Connected User sign-in, ID Card, roaming settings, first launch sign-in invitation, etc.)
// SafeArray of BSTRs, in order from earliest to latest, including current version, of registry roots checked during settings migration
// VT_BOOL. Specifies whether the help notification should be published to the notification hub on first launch
// VT_BSTR (optional). Specifies the default profile for the appid (e.g. "General")
// VT_UNKNOWN (optional). Specifies an IUnknown from which the IVsThemeThumbnailProvider interface for the appid can be queried.
// VT_BOOL. Specifies whether VS is community edition. Only applicable to VS Professional.
// BSTR URL to show in the About box for the license terms
// BSTR Name to be used for the APPID in return value of DTE.Edition property
// VT_UNKNOWN. IUnknown the free threaded app query load service object.
// VT_BOOL. Specifies whether the VS Telemetry API is enabled in the SKU or not.
// BSTR - solution working folders extension(default - "");
// BSTR what this release is branded as, e.g. November CTP, Beta 2, etc. (unlocalized)
//      For the localized version of this string, use VSAPROPID_ReleaseString_Short
// VT_BOOL. Specifies whether the AppId enables NoToolWin mode.
// VT_BOOL. Specifies whether the AppId is running in isolation.
// VT_BSTR. The AppId's isolation installation name.
// VT_BSTR. The AppId's isolation installation id.
// VT_BSTR. The AppId's isolation installation version.
// VT_BSTR. The AppId's isolation installation workloads.
// VT_BSTR. The AppId's isolation installation packages.
// VT_BSTR. The AppId's isolation installation userdata file path.
// VT_BSTR. The AppId's isolation installation logs directory.
// VT_BSTR. The Setup Engine file path;.
// VT_BSTR. The root legacy compat directory that MSIs that are not isolation aware may install things to
// SafeArray of BSTRs. A list of directories to exclude from extension processing (pkgdef, MEF, etc..)
// VT_BOOL. Specifies whether Setup finished correctly.
// VT_BSTR. The AppId's installation channel ID, for example VisualStudio.15.Release
// VT_BSTR. The AppId's installation channel manifest unique ID, for example VisualStudio.15.Release/public.d15rel/15.0.26020.0
// VT_BSTR. The AppId's installation nickname to disambiguate between SxS installations.
// VT_BSTR. The AppId's product display version.
// VT_BSTR. The AppId's product semantic version.
// VT_BSTR. The AppId's installation channel title.
// VT_BSTR. The AppId's installation channel suffix.
// VT_BSTR. The number of alpha-packs this installation has.
// VT_BSTR. The campaign id associated with this install.
// VT_BSTR. The AppId's host version, preferred by _DTE.Version property.
// VT_BSTR. The SkuName, unlocalized and sent with Telemetry.
// VT_BSTR. The branch name of the build.
// OBSOLETTE, use AcademicStudent
// Book is OBSOLETE! This will never, ever be returned to you by
// the shell, as the SKU was cut!
//OBSOLETE
//Team
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IActiveEditorContextTracker"/> that tracks the 
///     "active" context for the editor by handling the VSHPROPID_ActiveIntellisenseProjectContext 
///     hierarchy property.
/// </summary>
// For scoping
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Exposes a VS specific API related to <see cref="IVsContainedLanguage"/>
/// </summary>
/// <summary>
///     Gets an object that represents a host-specific IVsContainedLanguageFactory implementation.
///     Note: currently we have only one target framework and IVsHierarchy and itemId is returned as 
///     they are from the unconfigured project. Later when combined intellisense is implemented, depending
///     on implementation we might need to have a logic that returns IVsHierarchy and itemId specific to 
///     currently active target framework (that's how it was in Dev14's dnx/dotnet project system)
/// </summary>
/// <param name="filePath">Path to a file</param>
/// <param name="hierarchy">Project hierarchy containing given file for current language service</param>
/// <param name="itemid">item id of the given file</param>
/// <param name="containedLanguageFactory">an instance of IVsContainedLanguageFactory specific for current language service</param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Adapts CPS's <see cref="ICodeModelProvider"/> and <see cref="IProjectCodeModelProvider"/> to Roslyn's <see cref="ICodeModelFactory"/> implementation.
/// </summary>
// Isn't a file that Roslyn knows about
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// NOTE: While this type is implemented in Roslyn, we force the cast on 
// the UI thread because they are free to change this to an STA object
// which would result in an RPC call from a background thread.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the C# <see cref="CodeDomProvider"/> for use by designers and code generators.
/// </summary>
/// <remarks>
///     This service is requested by <see cref="IVSMDCodeDomCreator.CreateCodeDomProvider(object, int)"/> and 
///     returned by <see cref="IVSMDCodeDomProvider.CodeDomProvider"/>.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     An implementation of <see cref="ILanguageFeaturesProvider"/> to provider C# language-specific features.
/// </summary>
/// <summary>
///     Makes a proper language identifier from the specified name.
/// </summary>
/// <param name="name">
///     A <see cref="string"/> containing the name.
/// </param>
/// <returns>
///     A proper identifier which meets the C# language specification.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="name"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="name"/> is an empty string ("").
/// </exception>
/// <summary>
///     Makes a proper namespace from the specified name.
/// </summary>
/// <param name="name">
///     A <see cref="string"/> containing the name.
/// </param>
/// <returns>
///     A proper namespace which meets the C# language specification.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="name"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="name"/> is an empty string ("").
/// </exception>
/// <summary>
///     Concatenates the specified namespace names.
/// </summary>
/// <param name="namespaceNames">
///     A <see cref="string"/> array containing the namespace names to be concatenated.
/// </param>
/// <returns>
///     A concatenated namespace name.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="namespaceNames"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="namespaceNames"/> contains no elements.
///     <para>
///         -or-
///     </para>
///     <paramref name="namespaceNames"/> contains an element that is <see langword="null"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the Visual Basic <see cref="CodeDomProvider"/> for use by designers and code generators.
/// </summary>
/// <remarks>
///     This service is requested by <see cref="IVSMDCodeDomCreator.CreateCodeDomProvider(object, int)"/> and 
///     returned by <see cref="IVSMDCodeDomProvider.CodeDomProvider"/>.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides access to the project output window pane.
/// </summary>
/// <summary>
///     Returns the project output window pane.
/// </summary>
/// <returns>
///     The project <see cref="IVsOutputWindowPane"/> object, or <see langword="null"/> 
///     if the <see cref="IVsOutputWindow"/> service is not present.
/// </returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Command-line build
// Creating a pane causes it to be "active", reset the active pane back to the previously active pane
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IProjectLogger"/> that logs to the Output window.
/// </summary>
// Extremely naive implementation of a Windows Pane logger - the assumption here is that text is rarely written,
// so transitions to the UI thread are uncommon and are fire and forget. If we start writing to this a lot (such
// as via build), then we'll need to implement a better queueing mechanism.
// Not tied to one particular project
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents the data source of metadata needed for input into restore operations for an individual <see cref="ConfiguredProject"/>.
///     This will be later combined with other implicitly active <see cref="ConfiguredProject"/> instances within a 
///     <see cref="UnconfiguredProject"/> to provide enough data to restore the entire project.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides a view of the project's restore state.
/// </summary>
/// <summary>
///     Gets the block that broadcasts current restore data.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents the data source of metadata needed for input into restore operations for a <see cref="UnconfiguredProject"/>
///     instance by resolving conflicts and combining the data of all implicitly active <see cref="ConfiguredProject"/> 
///     instances.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IPackageRestoreConfiguredInputDataSource"/> that combines evaluations results
///     of <see cref="DotNetCliToolReference"/>, <see cref="ProjectReference"/> and project build versions of <see cref="PackageReference"/> 
///     into <see cref="PackageRestoreConfiguredInput"/>.
/// </summary>
// Evaluation
// Evaluation
// Evaluation
// Project Build
// Project Build                                                                        
// Project Build
// Transform the changes from evaluation/design-time build -> restore data
// We need to coordinate these at the unconfigured-level
// Set the link up so that we publish changes to target block
// Join the source blocks, so if they need to switch to UI thread to complete 
// and someone is blocked on us on the same thread, the call proceeds
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Responsible for reporting package restore progress to operation progress.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// The steps leading up to and during restore are the following:
//
//      1) Evaluation
//      2) Design-Time build (call CollectPackageReferences, et all)
//      3) Push package references & restore data to NuGet ("Nominate")
//      4) If assets file updated during restore, repeat above
//
// It can take two cycles of above (during first open, or when assets file is out of 
// date) before we have a design-time build that contains all the references that a 
// project depends on, up to and including mscorlib/System.Runtime.
// 
// We want the "IntelliSense" operation progress stage to only be considered completed
// once we've stopped this cycle, which will let Roslyn, designers and other consumers
// disable commands, or give indicators that the project is still loading.
//
// To figure out when we've finished the cycle, we compare the last write time of the 
// assets file during the last evaluation against the timestamp of the file on disk just 
// after restore. If they don't match, we know that we're about to repeat the cycle and 
// we're still incomplete. Once they match in timestamp, we know that the last design-time 
// build ran with the latest assets file and we notify operation progress that we're now
// completed with the results.
// If restore failed, we treat as though it is up-to-date to avoid it forever being stuck out of date.
// If the assets file wasn't included as part of the <AdditionalDesignTimeBuildInput> item,
// consider it up-to-date by return MaxValue, so that it is not forever stuck out-of-date.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Responsible for pushing ("nominating") project data such as referenced packages and 
///     target frameworks to NuGet so that it can perform a package restore.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// No configurations - likely during project close
// Restore service always does work regardless of whether the value we pass them to actually
// contains changes, only nominate if there are any.
// Prevent overlap until Restore completes
// Restore service gives us a guarantee that the assets file
// will contain *at least* the changes that we pushed to it.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// At a high-level, we want to combine all implicitly active configurations (ie the active config of each TFM) restore data
// (via ProjectRestoreUpdate) and combine it into a single IVsProjectRestoreInfo2 instance and publish that. When a change is 
// made to a configuration, such as adding a PackageReference, we should react to it and push a new version of our output. If the 
// active configuration changes, we should react to it, and publish data from the new set of implicitly active configurations.
// Filter out those without PackageReference
// Transform all restore data -> combined restore data
// Set the link up so that we publish changes to target block
// Join the source blocks, so if they need to switch to UI thread to complete 
// and someone is blocked on us on the same thread, the call proceeds
// If there are no updates, we have no active configurations
// We need to combine the snapshots from each implicitly active configuration (ie per TFM), 
// resolving any conflicts, which we'll report to the user.
// All configurations need to agree on where the project-wide asset file is located.
// All configurations need to agree on where the project-wide extensions path is located
// All configurations need to agree on what the overall "user-written" frameworks for the 
// project so that conditions in the project-wide 'nuget.g.props' and 'nuget.g.targets' 
// are written and evaluated correctly.
// Always use the first TFM listed in project to provide consistent behavior
// Every config should had same value
// CLI tool references are project-wide, so if they have conflicts in names, 
// they must have the same metadata, which avoids from having to condition 
// them so that they only appear in one TFM.
// Wrap it in a data source that will drop project version and identity versions so as they will never agree
// on these versions as they are unique to each configuration. They'll be consistent by all other versions.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     A <see cref="IProjectValueDataSource{T}"/> that drops <see cref="ProjectDataSources.ConfiguredProjectIdentity"/> and 
///     <see cref="ProjectDataSources.ConfiguredProjectVersion"/> versions from each value of the original
///     <see cref="IProjectValueDataSource{T}"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Abstract immutable collection that supports lookup by index and name.
/// </summary>
// Data here must be treated as immutable. We use readonly interfaces into mutable backing types
// for the reduction in memory and improvements in performance.
// Build a list, to maintain order for index-based lookup.
// Build a dictionary to support key-based lookup.
// While the majority of elements (items, properties, metadata) are guaranteed to be unique,
// Target Frameworks are not, filter out duplicates - NuGet uses the int-based indexer anyway.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents restore input data for a single <see cref="ConfiguredProject"/>.
/// </summary>
/// <summary>
///     Gets the configuration of the <see cref="ConfiguredProject"/> this input was produced from.
/// </summary>
/// <summary>
///     Gets the restore information produced in this input.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents restore input data for an <see cref="UnconfiguredProject"/>.
/// </summary>
/// <summary>
///     Gets the restore information produced in this input. Can be <see langword="null"/> if
///     the project has no active configurations.
/// </summary>
/// <summary>
///     Gets the <see cref="PackageRestoreConfiguredInput"/> instances that contributed to <see cref="RestoreInfo"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Immutable collection of <see cref="IVsProjectProperty"/> objects.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents a single key/value for a <see cref="IVsTargetFrameworkInfo"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Concrete implementation of <see cref="IVsProjectRestoreInfo2"/> that will be passed to 
///     <see cref="IVsSolutionRestoreService3.NominateProjectAsync(string, IVsProjectRestoreInfo2, System.Threading.CancellationToken)"/>.
/// </summary>
// We "rename" BaseIntermediatePath to avoid confusion for our usage, 
// because it actually represents "MSBuildProjectExtensionsPath"
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents a single package, tool or project reference.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Immutable collection of <see cref="IVsReferenceItem"/> objects.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Immutable collection of <see cref="IVsReferenceProperty"/> objects.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents a single key/value for a <see cref="IVsReferenceItem"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Contains builder methods for creating <see cref="IVsProjectRestoreInfo"/> instances.
/// </summary>
/// <summary>
///     Converts an immutable dictionary of rule snapshot data into an <see cref="IVsProjectRestoreInfo"/> instance.
/// </summary>
// For certain project types such as UWP, "TargetFrameworkMoniker" != the moniker that restore uses
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents restore data for a package restore operation.
/// </summary>
/// <summary>
///     Gets the last write time of the assets file at the end of the last restore
///     or <see cref="DateTime.MinValue"/> if the file did not exist.
/// </summary>
/// <summary>
///     Gets the file path of the assets file.
/// </summary>
/// <summary>
///     Gets an indication if the restore was successful.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents the restore data for a single target framework in <see cref="UnconfiguredProject"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Immutable collection of <see cref="IVsTargetFrameworkInfo"/> objects.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Mark members as static
// Mark members as static
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Implementation of <see cref="IProjectGuidStorageProvider"/> that avoids persisting the 
///     project GUID property to the project file if isn't already present in the file.
/// </summary>
// We use the construction model to avoid evaluating during asynchronous project load
// Avoid searching for the <ProjectGuid/> if we've already checked previously in GetProjectGuidAsync.
// This handles project open, avoids us needed to take another read-lock during setting of it.
//
// Technically a project could add a <ProjectGuid/> latter down the track by editing the project or 
// reloading from disk, however, both the solution, CPS and other components within Visual Studio
// do not handle the GUID changing underneath them.
// Avoid touching the project file unless the actual GUID has changed, regardless of format
// NOTE: Unlike evaluation, we return the first <ProjectGuid /> to mimic legacy project system behavior
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Concrete implementation of <see cref="IPageMetadata"/>.
/// </summary>
// TODO remove suppression once CPS annotation corrected
// Nullability of reference types in return type doesn't match implicitly implemented member.
// Nullability of reference types in return type doesn't match implicitly implemented member.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IProjectDesignerService"/> based on Visual Studio services.
/// </summary>
// Opened within Visual Studio
// Can only use Shell APIs on the UI thread
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// A provider for properties that are stored either in the project file OR in the source code of the project.
/// This is defined in the VS layer so that we can import <see cref="VisualStudioWorkspace"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Returns the set of Startup objects (or entry point types) in a project.
/// </summary>
/// <summary>
/// When we implement WinForms support, we need to set this for VB WinForms projects
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known C# project property pages.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides project designer property pages.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known F# project property pages.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides project designer property pages.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// check if value already exists
// exec task as written in the project file is invalid, we should be resilient to this case.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// OutputTypeEx acts as a converter for the MSBuild OutputType value expressed as <see cref="VSLangProj110.prjOutputTypeEx"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// OutputType acts as a converter for the MSBuild OutputType value expressed as <see cref="VSLangProj.prjOutputType"/>.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Since we have persisted the value of OutputType, we don't have to persist the incoming value
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// CPS implements IVsHierarchy.SetProperty for the TFM property to call through the multi-targeting service and change the TFM.
// This causes the project to be reloaded after changing the values.
// Since the property providers are called under a write-lock, trying to reload the project on the same context fails saying it can't load the project
// if a lock is held. We are not going to write to the file under this lock (we return null from this method) and so we fork execution here to schedule
// a lambda on the UI thread and we don't pass the lock information from this context to the new one.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This Dynamic Enum Value Provider provides enum based msbuild property
/// value to display in the UI and also map the value, we obtain from the
/// UI to msbuild complaint values for persistence
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// The value obtained from the EnumValue, when asked for value, is the <see cref="EnumValue.DisplayName"/>, unless otherwise
/// a different overload is used to obtain the value of <see cref="EnumValue.Name"/>. Hence a provider usually needs just a map
/// with a typical entry looking like, [ValuePersistedByUI] -> EnumValue {Name = [ValueToPersist] DisplayName = [ValueToReturnForGet]}
/// In the case of OptionStrict, Compile Property Page explicitly gets the value from <see cref="EnumValue.Name"/> for the Enums and 
/// casts them to integer. This requires us to make <see cref="EnumValue.Name"/> as '0' and '1' and hence cannot reuse 
/// <see cref="_persistOptionStrictEnumValues"/> Values to be used when trying to retrieve value for the enum.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides common well-known Visual Basic project property pages.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides project designer property pages.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Implements the <see cref="IVsBuildMacroInfo"/> interface to be consumed by project properties.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BuildMacroInfo"/> class.
/// </summary>
/// <param name="configuredProject">Project being evaluated.</param>
/// <param name="threadingService">Project threading service.</param>
/// <summary>
/// Retrieves the value or body of a macro based on the macro's name.
/// </summary>
/// <param name="bstrBuildMacroName">String containing the name of the macro.</param>
/// <param name="pbstrBuildMacroValue">String containing the value or body of the macro.</param>
/// <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
// Important for ProjectNodeComServices to null out fields to reduce the amount 
// of data we leak when extensions incorrectly holds onto the IVsHierarchy.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Do not used banned APIs
// get the new cell, set focus, then open for edit
// Do not used banned APIs
/// <summary>
/// Called when a property changes on the view model. Used to detect when the custom UI changes so that
/// the size of its grids can be determined
/// </summary>
/// <summary>
/// Used to make sure the custom controls layout matches the rest of the dialog. Assumes the custom control has a 3 column
/// grid just like the main dialog page. If it doesn't no layout update is done.
/// </summary>
// Get the control that was added to the grid
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Hook into our own property changed event. This is solely to know when an active profile has been edited
// for unit testing
/// <summary>
/// This is here so that we can clear the in-memory status of the active profile if it has been edited. This is
/// so that the profile, and hence the users customizations, will be saved to disk
/// </summary>
// Existing commands are shown in the UI as project
// since that is what is run when that command is selected. However, we don't want to just update the actual
// profile to this value - we want to treat them as equivalent.
// Let the active provider know of the changes. 
// These are all controlled by the ui provider and is affected by changing the launch type
//Unlike other properties that have default values, nativeDebugging may not be set yet. Because false is the default behavior adding it has no effect
//Unlike other properties that have default values, sqlDebugging may not be set yet. Because false is the default behavior adding it has no effect
/// <summary>
/// Use the active profile in the CurrentLaunchSettings
/// </summary>
//No selected item - Disable Remove button
/// <summary>
/// Provides binding to the current UI Provider user control. 
/// </summary>
/// <summary>
/// Returns the active UI provider for the current selected launchType or mull if no selection or the selected item
/// does not have a provider installed
/// </summary>
//Raise event to focus on 
/// <summary>
/// If we have an existing CustomControl, we disconnect from its change notifications
/// and hook into the new ones. Assumes the activeProvider has already been changed
/// </summary>
// Get the old custom control and disconnect from notifications
// Now hook into the current providers notifications. We do that after having set the profile on the provider
// so that we don't get notifications while the control is initializing. Note that this is likely the first time the 
// custom control is asked for and we want to call it and have it created prior to setting the active profile
/// <summary>
/// Called from the CustomUI when a change occurs. This just fires a dummy property change
/// to dirty the page.
/// </summary>
/// <summary>
/// Helper returns true if there is an active provider and it supports the specified property
/// </summary>
/// <summary>
/// Helper called when a profile is added (new profile command), or a profile is deleted (delete profile command)
/// </summary>
/// <summary>
/// Called when the selection does change. Note that this code relies on the fact the current selection has been
/// updated
/// </summary>
// we need to keep the property page control from setting IsDirty when we are just switching between profiles.
// we still need to notify the display of the changes though
// these have no backing store in the viewmodel, we need to send notifications when we change selected profiles
// consider a better way of doing this
// need to set it dirty so Apply() actually saves the profile
// Billhie: this causes hangs. Disabling for now
//if (this.ParentControl != null)
//{
//    this.ParentControl.IsDirty = true;
//    WaitForAsync<int>(this.ParentControl.Apply);
//}
/// <summary>
/// Functions which actually does the save of the settings. Persists the changes to the launch settings
/// file and configures IIS if needed.
/// </summary>
/// <summary>
/// Called whenever the debug targets change. Note that after a save this function will be
/// called. It looks for changes and applies them to the UI as needed. Switching profiles
/// will also cause this to change as the active profile is stored in the profiles snapshot.
/// </summary>
// Since this get's reentered if the user saves or the user switches active profiles.
// This should never change the dirty state when loading the dialog
// Remember the current selection
// Update the set of settings and generate a property change so the list of profiles gets updated. Note that we always
// clear the active profile on the CurrentLaunchSettings so that when we do set one and property changed event is set
// Reload the launch profiles collection
// When loading new profiles we need to clear the launch type. This is so the external changes cause the current 
// active provider to be refreshed
// If we have a selection, we want to leave it as is
// Note that we have to be careful since the collection can be empty. 
/// <summary>
/// The initialization entry point for the page It also hooks into debug provider so that it can update when the profile changes
/// </summary>
// We need to get the set of UI providers, if any.
/// <summary>
/// initializes the collection of UI providers.
/// </summary>
// We need to get the set of UI providers, if any.
/// <summary>
/// Gets the UI providers
/// </summary>
// Initialize the page
/// <summary>
/// Called when then the user saves the form.
/// </summary>
// Fire a property changed so we can get the page to be dirty when we add a new profile
/// <summary>
/// Called after every profile change to update the list of launch types based on the following:
/// 
///     The list of UI providers as each provider provides a name
///     The command name in the profile if it doesn't match one of the existing providers.
///     
/// </summary>        
// Populate the set of unique launch types from the list of providers since there can be duplicates with different priorities. However,
// the command name will be the same so we can grab the first one for the purposes of populating the list
// Need to notify the list has changed prior to changing the selected one
// cause the property page to be dirtied when a row is added or removed
// cause the property page to be dirtied when a cell is updated
/// <summary>
/// Overridden to do cleanup
/// </summary>
/// <summary>
/// Called by the currently active control when errors within the control have changed
/// </summary>
/// <summary>
/// We are considered in error if we have errors, or the currently active control has errors
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Implementation of ILaunchSettingsUIProvider for the Executable launch type.
/// </summary>
// Lowest priority to allow this to be overridden
/// <summary>
/// Required to control the MEF scope
/// </summary>
/// <summary>
/// The name of the command that is written to the launchSettings.json file
/// </summary>
/// <summary>
/// The name to display in the dropdown for this command
/// </summary>
/// <summary>
/// Launch url is not supported
/// </summary>
/// <summary>
/// No custom UI
/// </summary>
/// <summary>
/// Called when the selected profile changes to a profile which matches this command. curSettings will contain 
/// the current values from the page, and activeProfile will point to the active one.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Pass help topic to base if there is one
/// <summary>
/// Validate the name is valid
/// </summary>
/// <summary>
/// Returns the name of the current product we are instantiated in from the appropriate resource
/// Used for dialog title binding
/// </summary>
/// <summary>
/// Called when window loads. Use it to set focus on the text box correctly.
/// </summary>
// We need to schedule this to occur later after databinding has completed, otherwise
// focus appears in the textbox, but at the start of the suggested name rather than at
// the end.
// Avoid legacy threading switching APIs. 
// see https://github.com/Microsoft/vs-threading/issues/138
// There is currently no better way to queue an item on 
// DispatcherPriority.DataBind until the above issue is fixed
// Avoid legacy threading switching APIs
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Implementation of ILaunchSettingsUIProvider for the Executable launch type.
/// </summary>
// Lowest priority to allow this to be overridden
/// <summary>
/// Required to control the MEF scope
/// </summary>
/// <summary>
/// The name of the command that is written to the launchSettings.json file
/// </summary>
/// <summary>
/// The name to display in the dropdown for this command
/// </summary>
/// <summary>
/// Disable the executable and launch url controls
/// </summary>
/// <summary>
/// No custom UI
/// </summary>
/// <summary>
/// Called when the selected profile changes to a profile which matches this command. curSettings will contain 
/// the current values from the page, and activeProfile will point to the active one.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// WIN32 Constants
/// <summary>
/// Property. Gets or sets whether the page is dirty. Dirty status is pushed to owner property sheet
/// </summary>
// Only process real changes
// If dirty, this causes Apply to be called
/// <summary>
/// IPropertyPage
/// This is called before our form is shown but after SetObjects is called.
/// This is the place from which the form can populate itself using the information available
/// in CPS.
/// </summary>
// Initialization can cause some events to be fired when we change some values
// so we use this flag (_ignoreEvents) to notify IsDirty to ignore
// any changes that happen during initialization
// We're hosted in WinForms, make sure we 
// set Parent so that we inherit Font & Colors
/// <summary>
/// This is where the information entered in the form should be saved in CPS
/// </summary>
/// <summary>
/// Called when the page is deactivated
/// </summary>
/// <summary>
/// Returns a struct describing our property page
/// </summary>
// set the size to 0 so the host doesn't use scroll bars
// we want to do that within our own container.
/// <summary>
/// Returns the help context
/// </summary>
/// <summary>
/// IPropertyPage
///  Called when the page is moved or sized
/// </summary>
/// <summary>
/// Notification that debug mode changed
/// </summary>
/// <summary>
/// Informs derived classes that configuration has changed
/// </summary>
/// <summary>
/// IPropertyPage
/// Site for our page
/// </summary>
/// <summary>
/// IPropertyPage
/// Show/Hide the page
/// </summary>
/// <summary>
/// IPropertyPage
/// Handles mnemonics
/// </summary>
// Preprocessing should be passed to the control whose handle the message refers to.
// Returning S_OK (0) indicates we handled the message ourselves
// Returning S_FALSE (1) indicates we have not handled the message
/// <summary>
/// Initialize and listen to debug mode changes
/// </summary>
// Do not used banned APIs
// Do not used banned APIs
/// <summary>
/// Quit listening to debug mode changes
/// </summary>
// If we have never configured anything (maybe a failure occurred on open so app designer is closing us). In this case
// do nothing
// Look for an IVsBrowseObject
// We need to save ThreadHandling because the appdesigner will call SetObjects with null, and then call
// Deactivate(). We need to run Async code during Deactivate() which requires ThreadHandling.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Only process real changes
// Let the view model know we are done.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//Ask the shell to do the command mapping for us and without firing off the command. We need to check if this command is one of the
//supported commands first before actually firing the command.
/*scope count*/,
/*scopes*/,
//Any command that wasn't translated by TranslateAcceleratorEx or has no VS handler in global scope should be routed to WPF
//Allow VS to take over for anything that would be a common shell command
//  (CTRL+Tab, CTRL+Shift+TAB, Shift+ALT+Enter, etc.)
//If there's a GUID_VSStandardCommandSet97 command that should be handled by WPF instead, check for them and return false
//Otherwise indicate that the command should be handled by VS
//If there are additional commands that VS should be handling instead of WPF, check for them and return true here
//Otherwise indicate that the command should be handled by WPF
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
/// <summary>
///   Returns the cached ResourceManager instance used by this class.
/// </summary>
/// <summary>
///   Overrides the current thread's CurrentUICulture property for all
///   resource lookups using this strongly typed resource class.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Add.
/// </summary>
/// <summary>
///   Looks up a localized string similar to All files.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Application arguments:.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Arguments to be passed to the application.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Browse....
/// </summary>
/// <summary>
///   Looks up a localized string similar to Cancel.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Return to the debug property page with no changes.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Checking enables a textbox to specify an absolute or relative URl.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Enable native code debugging.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Enable SQL Server debugging.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Debug.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Delete.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Delete the current profile and change to the next available profile.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Duplicate Key.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Environment variables:.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Key.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Value.
/// </summary>
/// <summary>
///   Looks up a localized string similar to The errors on the page must be corrected prior to saving your changes..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Executable:.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Executable files.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Path to the executable to run.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Launch:.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Launch browser:.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Absolute or relative URL.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Name cannot be empty..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Name.
/// </summary>
/// <summary>
///   Looks up a localized string similar to New....
/// </summary>
/// <summary>
///   Looks up a localized string similar to Open the new profile dialog.
/// </summary>
/// <summary>
///   Looks up a localized string similar to New profile.
/// </summary>
/// <summary>
///   Looks up a localized string similar to newProfile.
/// </summary>
/// <summary>
///   Looks up a localized string similar to OK.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Create the profile and return to the debug property page with the new profile selected.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Profile:.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Executable.
/// </summary>
/// <summary>
///   Looks up a localized string similar to IIS Express.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Start.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Project.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Profile name:.
/// </summary>
/// <summary>
///   Looks up a localized string similar to That profile name is invalid or there is an existing profile with the same name..
/// </summary>
/// <summary>
///   Looks up a localized string similar to You must specify a profile name..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Remove.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Value cannot be empty..
/// </summary>
/// <summary>
///   Looks up a localized string similar to Value.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Working directory:.
/// </summary>
/// <summary>
///   Looks up a localized string similar to Absolute path to working directory.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Since calls to ignore events can be nested, a downstream call could change the outer 
/// value.  To guard against this, IgnoreEvents returns true if the count is > 0 and there is no setter. 
/// PushIgnoreEvents\PopIgnoreEvents  are used instead to control the count.
/// </summary>
// For some properties we don't want to invalidate the property page
/// <summary>
/// Override to do cleanup
/// </summary>
//Ported from "vset\qtools\testmanagement\ui\controls\wpf\controls" as this follows the simplest option so far
//Some unused properties are removed such as "Hitting Enter" support, etc.
/// <summary>
/// This text box functions like any other text box, except that it allows the consumer
/// to specify a 'water mark' that appears in the text area (or some other indicator
/// based on the presence of text in the text property.
/// 
/// Additionally, it adds:
/// HasInputtedText
/// </summary>
/// <summary>
/// Primarily, this static constructor will register the metadata overrides, for such things as
/// resource look up, and property changing notifications.
/// </summary>
/// <summary>
/// The text to be displayed in the watermark area when there is no text/has no focus
/// </summary>
/// <summary>
/// If there is text, that has been inputted, then this value will change to indicate that
/// this control does indeed contain valid text.
/// 
/// Note that this is needed because the Text property changes all the time, and doesn't/cannot
/// be reverted with styles to empty or null.
/// </summary>
/// <summary>
/// Called when the TextProperty Changes. Facilitates the HasInputtedText property changing
/// as and when the control has no text.
/// </summary>
/// <param name="sender"></param>
/// <param name="args"></param>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Hosts a WPF implementation of a property page UI within the WinForms based property page infrastructure.
/// </summary>
//viewModel can be non-null when the configuration is changed.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// 
// wpfHostPanel
// 
// 
// WpfBasedPropertyPage
// 
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// DTE COM calls can fail for any number of valid reasions.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Initializes a new instance of the <see cref="AddFileContextProvider"/> class.
/// </summary>
/// <summary>
/// Returns a value indicating whether this provider should be activated.
/// </summary>
/// <returns>Value indicating whether this provider should be activated.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Initializes a new instance of the <see cref="AssemblyReferencesProviderContext"/> class.
/// </summary>
/// <summary>
/// Returns a value indicating whether this provider should be activated.
/// </summary>
/// <returns>Value indicating whether this provider should be activated.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Base reference context provider which abstract CPS overrides
/// </summary>
/// <summary>
/// Lazy instance of the next handler in the chain.
/// </summary>
/// <summary>
/// Initializes a new instance of the <see cref="BaseReferenceContextProvider"/> class.
/// </summary>
/// <summary>
/// Gets the next handler in the chain.
/// </summary>
/// <summary>
/// Gets the collection of reference provider contexts that can handle individual reference type operations.
/// </summary>
/// <summary>
/// Gets the configured project.
/// </summary>
/// <summary>
/// Returns a value indicating whether this provider should be activated.
/// </summary>
/// <returns>Value indicating whether this provider should be activated.</returns>
// There should always be a "next" handler as the usage of this class is to override a base
// provider. If there's no other handler in the chain mark the provider as not applicable.
/// <summary>
/// Creates a populated provider context.
/// </summary>
/// <remarks>
/// The caller is responsible to dispose of the result when its use is over.
/// </remarks>
/// <returns>
/// A task whose result is the export life time context. The expected type of object here is <see cref="IVsReferenceProviderContext"/>.
/// Returning Task&lt;ExportLifetimeContext&lt;object[]&gt;&gt; instead of Task&lt;ExportLifetimeContext&lt;IVsReferenceProviderContext[]&gt;&gt; is because IVsReferenceProviderContext is an embedded interop type,
/// so it can't be used across assembly boundaries.
/// </returns>
/// <summary>
/// Applies reference changes.
/// </summary>
/// <param name="operation">The add or remove operation as defined by <see cref="__VSREFERENCECHANGEOPERATION"/></param>
/// <param name="changedContext"><see cref="IVsReferenceProviderContext"/> representing the references to change. The declaration uses object instead because IVsReferenceProviderContext is an embedded interop type,
/// so it can't be used across assembly boundaries.</param>
/// <returns>A task whose result changes the references.</returns>
/// <summary>
/// Contains the constants used for order precedence metadata on the exports of initialized provider contexts.
/// </summary>
/// <remarks>
/// Higher numbers appear earlier in the Reference Manager.
/// 
/// These values are the values CPS uses for the tab order. This should be removed
/// when those are exposed publicly and use those values directly.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Initializes a new instance of the <see cref="ComReferencesProviderContext"/> class.
/// </summary>
/// <summary>
/// Returns a value indicating whether this provider should be activated.
/// </summary>
/// <returns>Value indicating whether this provider should be activated.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IVsDesignTimeAssemblyResolution"/> that sits over the top of VSLangProj.References.
/// </summary>
// Need to override CPS's version, which it implements on the project node as IVsDesignTimeAssemblyResolution
// Before CPS's version
// NOTE: Unlike the legacy project system, this implementation does resolve only "framework" assemblies. In .NET Core and other project types, framework assemblies
// are not treated specially - they just come through as normal references from packages. We also do not have a static registration of what assemblies would make up 
// a framework, so we assume that what the project is referencing represents the "framework" of accessible types. This is the same as what the legacy project system
// does under the UWP flavor (when the DTARUseReferencesFromProject MSBuild property is set).
// 
// This implementation will work for .NET Core based projects, but we might run into unexpected behavior when bringing up legacy projects where designers/components
// expect to ask for/use types that are not currently referenced by the project. We should revisit at that time.
//
// Ideally this would sit on a simple wrapper over the top of project subscription service, however, CPS's internal ReferencesHostBridge, which populates VSLangProj.References,
// already does the work to listen to the project subscription for reference adds/removes/changes and makes sure to publish the results in sync with the solution tree.
// We just use its results.
// Note we use the original name, not the parsed name, as they could be different
// NOTE: We mimic the behavior of the legacy project system when in "DTARUseReferencesFromProject" mode, it matches 
// only on version, and only against currently referenced assemblies, nothing more. 
//
// See ResolveAssemblyReference in vs\env\vscore\package\MSBuild\ToolLocationHelperShim.cs
//
// 
// If the caller didn't specify a version, than they only want to match on name
// If the reference is the same or higher than the requested version, then we consider it a match
// We only want resolved assembly references
// Important for ProjectNodeComServices to null out fields to reduce the amount 
// of data we leak when extensions incorrectly holds onto the IVsHierarchy.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Initializes a new instance of the <see cref="AssemblyReferencesProviderContext"/> class.
/// </summary>
/// <summary>
/// Returns a value indicating whether this provider should be activated.
/// </summary>
/// <returns>Value indicating whether this provider should be activated.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Initializes a new instance of the <see cref="SharedProjectReferencesProviderContext"/> class.
/// </summary>
/// <summary>
/// Returns a value indicating whether this provider should be activated.
/// </summary>
/// <returns>Value indicating whether this provider should be activated.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Initializes a new instance of the <see cref="WinRTReferencesProviderContext"/> class.
/// </summary>
/// <summary>
/// Returns a value indicating whether this provider should be activated.
/// </summary>
/// <returns>Value indicating whether this provider should be activated.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// We do not need to block the completion of HandleRename so we queue it using the threading service
// and ignore the result.
// NOTE: we queue work on JTF queue so VS shutdown can happen cleanly
// Do not offer to rename types if the user changes the file extensions
// see if the current project contains a compilation
// Check that the new name is a valid identifier in the current programming language
// Check if there are any symbols that need to be renamed
// Ask if the user wants to rename the symbol
// Try and apply the changes to the current solution
// Do not warn the user if the rename was cancelled by the user
// Notify the user if the rename could not be performed
// Perform the rename operation
// Notify other VS features that symbol is about to be renamed
// Try and apply the changes to the current solution
// Notify other VS features that symbol has been renamed
// this project does not support compilations
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="ISpecialFilesManager"/> that wraps <see cref="IVsProjectSpecialFiles"/>
/// </summary>
// Not handled
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// For unit testing purposes, to avoid having to mock all of CPS
/// </summary>
/// <summary>
/// Get the list of design time monikers that need to have TempPE libraries created. Needs to be called on the UI thread.
/// </summary>
/// <summary>
/// Gets the XML that describes a TempPE DLL, including building it if necessary
/// </summary>
/// <summary>
/// ApplyAsync is called on the UI thread and its job is to update AppliedValue to be correct based on the changes that have come through data flow after being processed
/// </summary>
// Not using use the ThreadingService property because unit tests
// As it happens the DesignTimeInputsDelta contains all of the state we need
/// <summary>
/// InitializeInnerCoreAsync is responsible for setting an initial AppliedValue. This value will be used by any UI thread calls that may happen
/// before the first data flow blocks have been processed. If this method doesn't set a value then the system will block until the first blocks
/// have been applied.
/// </summary>
/// <summary>
/// This method is where we tell data flow which blocks we're interested in receiving updates for
/// </summary>
/// <summary>
/// Preprocess gets called as each data flow block updates and its job is to take the input from those blocks and do whatever work needed
/// so that ApplyAsync has all of the info it needs to do its job.
/// </summary>
// As it happens the DesignTimeInputsDelta contains all of the state we need
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// The public facade for the broadcast block. We don't expose the broadcast block directly because we don't want to allow consumers to complete or fault us
/// </summary>
/// <summary>
/// This is to allow unit tests to force completion of our source block rather than waiting for async work to complete
/// </summary>
// Create an action block to process the design time inputs and configuration general changes
// Create an action block to process file change notifications
// File changes don't change state, but it makes sense to run with the state at the time the update came in
// Ignore any file changes until we've received the first set of design time inputs (which shouldn't happen anyway)
// That first update will send out all of the files so we're not losing anything
// if a shared input changes, we recompile everything
// Since we've just queued every file, we don't care about any other changed files in this set
// File changes don't get project state, so they don't update it.
// This can't change while we're running, but let's use a local so you don't have to take my word for it
// On the first call where we receive design time inputs we queue compilation of all of them, knowing that we'll only compile if the file write date requires it
// If its not the first call...
// If a new shared design time input is added, we need to recompile everything regardless of source file modified date
// because it could be an old file that is being promoted to a shared input
// If the namespace or output path inputs have changed, then we recompile every file regardless of date
// Otherwise we just queue any new design time inputs, and still do date checks
// Make sure we have the up to date output path
// if the path is bad, then we presume we wouldn't be able to act on any files anyway
// so we can just clear _latestDesignTimeInputs to ensure file changes aren't processed, and return.
// If the path is ever fixed this block will trigger again and all will be right with the world.
// This is our only update to current state, and data flow protects us from overlaps. File changes don't update state
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Add an item to our queue, or if it exists, ensure that if anyone wanted us to ignore the file write time, we don't lose that info
/// <summary>
/// Updates the queue items by either adding or updating from addOrUpdateItems, whilst ensuring that no items are tracked that aren't in the master list
/// </summary>
/// <param name="addOrUpdateItems">The items to add or update in the queue</param>
/// <param name="masterListOfItems">The master list of items which will always be a superset of the queue contents</param>
/// <param name="sharedInputs">The shared inputs that are to be updated in each item</param>
/// <param name="tempPEOutputPath">The output path that is to be updated in each item</param>
// If the item exists, ensure that if anyone wanted us to ignore the file write time, we don't lose that info
// If the item doesn't need to be tracked, we'll clean it up later (we have to loop through everything then anyway)
// Minor optimization - no point adding only to remove later
// now go through our queue and make sure we aren't tracking items that aren't in the master list
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This is to allow unit tests to run the compilation synchronously rather than waiting for async work to complete
/// </summary>
// Create an action block process the design time delta
// Cancel any in-progress queue processing
// add all of the changes to our queue
// Create a cancellation source so we can cancel the compilation if another message comes through
// For unit testing purposes, optionally block the thread until the task we scheduled is complete
// This will stop our blocks taking any more input
// we don't want to pop if we've been cancelled in the time it took to take the write lock, so check just in case.
// this may be overkill
// Grab the next file to compile off the queue
// if the compilation was cancelled, we need to re-add the file so we catch it next time
/// <summary>
/// Gets the XML that describes a TempPE DLL, including building it if necessary
/// </summary>
/// <param name="relativeFileName">A project relative path to a source file that is a design time input</param>
/// <param name="tempPEOutputPath">The path in which to place the TempPE DLL if one is created</param>
/// <param name="sharedInputs">The list of shared inputs to be included in the TempPE DLL</param>
/// <returns>An XML description of the TempPE DLL for the specified file</returns>
// A call to this method indicates that the TempPE system is in use for real, so we use it as a trigger for starting background compilation of things
// This means we get a nicer experience for the user once they start using designers, without wasted cycles compiling things just because a project is loaded
// Remove the file from our todo list, in case it was in there.
// Note that other than this avoidance of unnecessary work, this method is stateless.
// make sure the file is up to date
// If the compilation failed or was cancelled we should clean up any old TempPE outputs lest a designer gets the wrong types, plus its what legacy did
// plus the way the Roslyn compiler works is by creating a 0 byte file first
// true in this case means "we tried to compile", and is just for telemetry reasons. It doesn't indicate success or failure of compilation
// Turn the file path back into a relative path to compute output DLL name
// Since we are given a relative path we can just replace path separators and we know we'll have a valid filename
// if we can't read the file time of the output file, then we presumably can't compile to it either, so returning false is appropriate.
// if we can't read the file time of an input file, then we presumably can't read from it to compile either, so returning false is appropriate
// This is a HashSet because we allow files to be both inputs and shared inputs, and we don't want to compile the same file twice,
// plus Roslyn needs to call Contains on this quite a lot in order to ensure its only compiling the right files so we want that to be fast.
// When it comes to compiling the files there is no difference between shared and normal design time inputs, we just track differently because
// shared are included in every DLL.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Processes Compile source items into <see cref="DesignTimeInputs" /> that includes design time and shared design time inputs
/// only.
/// </summary>
// Transform the changes from evaluation/design-time build -> restore data
// Set the link up so that we publish changes to target block
// Join the source blocks, so if they need to switch to UI thread to complete 
// and someone is blocked on us on the same thread, the call proceeds
// if there is no full path then we can calculate it
// Legacy allows files to be DesignTime and DesignTimeShared
// Linked files are never used as TempPE inputs
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Produces output whenever a design time input changes
/// </summary>
/// <summary>
/// The block that receives updates from the active tree provider.
/// </summary>
/// <summary>
/// The public facade for the broadcast block.
/// </summary>
/// <summary>
/// The block that actually does our processing
/// </summary>
/// <summary>
/// This is to allow unit tests to force completion of our source block rather than waiting for async work to complete
/// </summary>
// we don't care about the difference between types of inputs, so we just construct one hashset for fast comparisons later
// Remove any files we're watching that we don't care about any more
// Now watch and output files that are new
// We don't care about delete and add here, as they come through data flow, plus they are really bouncy - every file change is a Time, Del and Add event)
// Completing the output block before the action block means any final messages that are currently being produced
// will not be sent out, which is what we want in this case.
// Wait for any processing to finish so we don't fight over the cookies 🍪
// Unsubscribe from all files
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides a bridge from the DesignTimeInputs system to the UI thread, for use by the BuildManager, which is part of VSLangProj
/// </summary>
/// <summary>
/// Get the list of design time monikers that need to have TempPE libraries created. Needs to be called on the UI thread.
/// </summary>
/// <summary>
/// Gets the XML that describes a TempPE DLL, including building it if necessary
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Represents the data source of source items that are design time inputs or shared design time inputs, and have changed
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Gets the XML that describes a TempPE DLL, including building it if necessary
/// </summary>
/// <param name="relativeFileName">A project relative path to a source file that is a design time input</param>
/// <param name="tempPEOutputPath">The path in which to place the TempPE DLL if one is created</param>
/// <param name="sharedInputs">The list of shared inputs to be included in the TempPE DLL</param>
/// <returns>An XML description of the TempPE DLL for the specified file</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Represents the data source of source items that are design time inputs or shared design time inputs
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Represents a data source that produces output whenever a design time input changes
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Suppresses the "Open in Object Browser" command for NuGet packages.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Remembers expanded graph nodes to track changes in their children. We don't control the lifetime
/// of these objects, so use weak references to track which contexts are still alive. Elements in this
/// collection will be forgotten once garbage collected.
/// </summary>
// Remember this graph context in order to track changes.
// When references change, we will adjust children of this graph as necessary
/// <summary>
/// ProjectContextChanged gets fired every time dependencies change for projects across solution.
/// <see cref="_expandedGraphContexts"/> contains all nodes that we need to check for potential updates
/// in their child dependencies.
/// </summary>
// _expandedGraphContexts remembers graph expanded or checked so far.
// Each context represents one level in the graph, i.e. a node and its first level dependencies
// Tracking changes over all expanded contexts ensures that all levels are processed
// and updated when there are any changes in nodes data.
// Calling OnCompleted ensures that the changes are reflected in UI
// or updatedSnapshot == null
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Maintains a collection of objects via <see cref="WeakReference{T}"/>, allowing elements to be
/// garbage collected.
/// </summary>
/// <remarks>
/// Note this implementation exists intentionally, despite <see cref="PlatformUI.WeakCollection{T}"/>.
/// It allocates less memory during use, and combines pruning with enumeration. Neither type is
/// free-threaded.
/// </remarks>
/// <typeparam name="T">Type of objects tracked within this collection.</typeparam>
/// <summary>
/// A struct enumerator for items within the weak collection, allowing enumeration without
/// allocation. Dead references are cleaned up during enumeration.
/// </summary>
// Reference is alive: yield it
// Reference has been collected: remove it and continue
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides actual dependencies nodes under Dependencies\[DependencyType]\[TopLevel]\[....] sub nodes. 
/// </summary>
/// <remarks>
/// When a dependency has flag <see cref="ProjectTreeFlags.Common.BrokenReference"/>,
/// <see cref="IGraphProvider"/> APIs are not called for that node.
/// </remarks>
/// <summary>The set of commands this provider supports.</summary>
// The "Contains" command finds a graph node's children
/// <summary>
/// Non-null once initialised.
/// </summary>
/// <summary>
/// Entry point for progression. Gets called every time when progression
///  - Needs to know if a node has children
///  - Wants to get children for a node
///  - During solution explorer search
/// </summary>
// Only one handler should succeed
// OnCompleted must be called to display changes 
// priority sets correct order among peers
// to ensure Graph id for node is unique we add a hash codes for node's parents separated by ';'
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Maps between the representation of icons used by <see cref="IVsImageService2"/> and the rest of the dependencies node,
/// caching the mapping data for performance.
/// </summary>
// Do not used banned APIs
// Do not used banned APIs
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Progression imports IGraphProviders as non-shared parts, which means if they themselves export other interfaces
// imports of those in the same scope/container will see a different instance to what progression sees. This class works 
// around that by importing DependenciesGraphProvider as shared and simply delegating onto it.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Defines the structure of identifiers for graph nodes in the dependencies tree.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// for idPartName == CodeGraphNodeIdName.File it can be null, avoid unnecessary exception
// Assembly and File are represented by a Uri, extract LocalPath string from Uri
// for some node ids Uri might throw format exception, thus try to get string at least
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Handles the mechanics of adding and removing nodes from the graph.
/// Decisions about which nodes to add and where to add them are made by the
/// <see cref="ViewProviders.IDependenciesGraphViewProvider"/> implementations.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Keeps registered graph contexts up to date with project dependency changes.
/// </summary>
/// <remarks>
/// Listens to aggregate snapshot changes and updates registered graph contexts accordingly.
/// </remarks>
/// <summary>
/// Registers <paramref name="context"/> to be updated as project dependencies change.
/// </summary>
/// <remarks>
/// There is no way to unregister these contexts. Internally, weak references are held
/// so that registered context objects may still be garbage collected.
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles requests asking whether a given dependencies graph node has any child nodes.
/// </summary>
/// <remarks>
/// <para>
///     This information can be used to determine whether to show an 'expand' marker
///     against graph node items in Solution Explorer.
/// </para>
/// <para>
///     The actual population of child nodes is performed separately by
///     <see cref="GetChildrenGraphActionHandler"/>.
/// </para>
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Handles requests to populate populated children of a given dependencies graph node.
/// </summary>
/// <remarks>
/// <para>
///     Determining whether a node has children or not is performed separately by
///     <see cref="CheckChildrenGraphActionHandler"/>.
/// </para>
/// </remarks>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Base class for graph action handlers, providing access to snapshot dependency data and
///     instances of type <see cref="IDependenciesGraphViewProvider"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Handles graph progression requests via <see cref="IGraphProvider.BeginGetGraphData"/>.
/// </summary>
/// <remarks>
/// Implementations perform requests such as:
/// <list type="bullet">
///   <item>Does a node have children?</item>
///   <item>What are a node's children?</item>
///   <item>What are search results for a node?</item>
/// </list>
/// </remarks>
/// <summary>
/// Attempts to handle the graph request.
/// </summary>
/// <param name="graphContext">A context object that describes the request and other relevant data.</param>
/// <returns><see langword="true"/> if the request was completed successfully, otherwise <see langword="false"/>.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Base class for graph action handlers that operate on a set of input nodes,
///     each of which is backed by an <see cref="IDependency"/>.
/// </summary>
// this is top level node and it contains full path 
// No full path, so this must be a node generated by a different provider.
// Trim backslashes (without allocating)
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Updates the graph to include any <see cref="GraphNode"/>s matching the search criteria.
/// </summary>
/// <summary>
/// Generates search graph containing nodes matching search criteria in Solution Explorer 
/// and attaches it to correct top level node.
/// </summary>
// 'node' is a GraphNode for top level dependency (which is part of solution explorer tree)
// Setting ProjectItem category (and correct GraphNodeId) ensures that search graph appears 
// under right solution explorer hierarchy item
/// <summary>
/// Does flat search among dependency world lists to find any dependencies that match search criteria.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// store refreshed dependency info
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Supports all dependencies
// Update the node info saved on the 'inputNode'
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Handles child, search, and tracking operations for a particular kind of
/// <see cref="IDependency"/>.
/// </summary>
/// <summary>
///     Gets whether this provider would like to apply changes to a graph node in response to a snapshot update,
///     based on the provided arguments.
/// </summary>
/// <param name="nodeProjectPath">The project path stored on the graph node that we want to update.</param>
/// <param name="updatedSnapshotProjectPath">The project path according to the updated snapshot we want to apply changes from.</param>
/// <param name="updatedDependency">The dependency from the updated snapshot with ID matching the graph node we want to update.</param>
/// <summary>
///     Adds and removes graph nodes to make <paramref name="graphContext"/> match the expected state for
///     <paramref name="updatedDependency"/>.
/// </summary>
/// <remarks>
///     Should only be called if <see cref="ShouldApplyChanges"/> returned <see langword="true" />.
/// </remarks>
/// <param name="graphContext">The context via which to make graph changes.</param>
/// <param name="nodeProjectPath">The path of the project containing the node to update.</param>
/// <param name="updatedDependency">The dependency that changed, triggering this update. It is a dependency of the project owning the graph node to update.</param>
/// <param name="dependencyGraphNode">The graph node to update in response to the changed dependency.</param>
/// <param name="targetedSnapshot">The updated snapshot matching <paramref name="updatedDependency"/>'s target framework.</param>
/// <returns><see langword="true" /> if the graph context was changed, otherwise <see langword="false" />.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// store refreshed dependency info
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides the graph of project reference dependencies.
/// Allows drilling into the transitive dependencies of a given <c>&lt;ProjectReference&gt;</c>.
/// </summary>
// Only supports project reference dependencies
// store refreshed dependency
/// <summary>
/// Returns true if the updated dependency's path matches the updated snapshot's project path,
/// meaning the project dependency has changed and we want to try and update.
/// </summary>
// Project references list all top level dependencies as direct children
// Pass the path of the referenced project
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provider that computes display order of tree items based on input ordering of
/// evaluated includes from the project file.
/// </summary>
/// <summary>
/// Get the display path for an item. The display path is what you see visually in solution explorer.
/// </summary>
// This is a linked file.
// We use the link path because that is the rendering/display path in solution explorer.
/// <summary>
/// Create an ordered map.
/// </summary>
// We need assign the display order to folders first before the file.
// These folders could be physical or virtual. Virtual coming from link paths.
// Folders are special. 
// FIXME: Due to the lack of metadata/info from property context 
//     in CalculatePropertyValues, we use the folder's name to identify it.
//
// The problem with this approach is this scenario:
//     Foo/Bar/File.fs
//     Test/Bar/File.fs
// In this case, any folder named "Bar" will always have the same display order as other "Bar" folders.
//     Again, this is due to not having enough info in property context.
// We uniquely identify a file by its fullpath.
/// <summary>
/// Tries to get a display order for a property context.
/// </summary>
// Due to the lack of metadata/info in property context, we can only look up
//     a physical/virtual folder by its name alone.
/// <summary>
/// Assign a display order property to items that have previously been preordered
/// or other (hidden) items under the project root that are not folders
/// </summary>
/// <param name="propertyContext">context for the tree item being evaluated</param>
/// <param name="propertyValues">mutable properties that can be changed to affect display order etc</param>
// assign display order to folders and items that appear in order map
// sometimes these items temporarily have null item type. Ignore these cases
// move unordered non-folder items to the end 
// (this will typically be hidden items visible on "Show All Files")
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Setup the dataflow for a provider that updates solution tree item properties with 
/// display order metadata derived from <see cref="IOrderedSourceItemsDataSourceService"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Handles opening of files displayed in the project imports tree.
/// </summary>
// Open all items.
// Open the document.
// Set it as read only if necessary.
// Detach the document from this project.
// Ignore failure. It may be that we've already transferred the item to Miscellaneous Files.
// Show the document window
/// <summary>
/// Calls <paramref name="action"/> for each of <paramref name="items"/>. If any action
/// throws, its exception is caught and processing continues. When all items have been
/// handled, any exceptions are thrown either as a single exception or an
/// <see cref="AggregateException"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides an implementation of <see cref="IAddItemDialogService"/> that wraps <see cref="IVsAddProjectItemDlg"/>.
/// </summary>
// Let the dialog ask the hierarchy itself
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides an abstraction over dialogs to make them unit testable. Each dialog will have its own abstraction which
/// can be retrieved from this service.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//Strictly used for databinding, no notifications
// No notifications required here either
// Need to hook keyboard event and force it to close on ESC keypress
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides methods for opening the Add New Item or Add Existing Items dialogs.
/// </summary>
/// <summary>
///     Returns a value indicating whether the specified node can have new or existing items added to it.
/// </summary>
/// <summary>
///     Shows the "Add New Item" dialog for the specified node.
/// </summary>
/// <param name="node">
///     The <see cref="IProjectTree"/> that the new item will be added to.
/// </param>
/// <returns>
///     <see langword="true"/> if the user selected an item and clicked OK, otherwise, <see langword="false"/> if the cancelled the dialog.
/// </returns>
/// <exception cref="ArgumentException">
///     <paramref name="node"/> is marked with <see cref="ProjectTreeFlags.Common.DisableAddItemFolder"/> or <see cref="ProjectTreeFlags.Common.DisableAddItemRecursiveFolder"/>.
/// </exception>
/// <summary>
///     Shows the "Add New Item" dialog for the specified node and selecting the specified template.
/// </summary>
/// <param name="node">
///     The <see cref="IProjectTree"/> that the new item will be added to.
/// </param>
/// <param name="localizedDirectoryName">
///     The localized name of the directory that contains the template to select.
/// </param>
/// <param name="localizedTemplateName">
///     The localized name of the template to select.
/// </param>
/// <returns>
///     <see langword="true"/> if the user selected an item and clicked OK, otherwise, <see langword="false"/> if the cancelled the dialog.
/// </returns>
/// <exception cref="ArgumentNullException">
///     <paramref name="localizedDirectoryName"/> is <see langword="null"/>.
///     <para>
///         -or-
///     </para>
///     <paramref name="localizedTemplateName"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="localizedDirectoryName"/> is an empty string ("").
///     <para>
///         -or-
///     </para>
///     <paramref name="localizedTemplateName"/> is an empty string ("").
///     <para>
///         -or-
///     </para>
///     <paramref name="node"/> is marked with <see cref="ProjectTreeFlags.Common.DisableAddItemFolder"/> or <see cref="ProjectTreeFlags.Common.DisableAddItemRecursiveFolder"/>.
/// </exception>
/// <summary>
///     Shows the "Add Existing Items" dialog for the specified node.
/// </summary>
/// <param name="node">
///     The <see cref="IProjectTree"/> that the existing items will be added to.
/// </param>
/// <returns>
///     <see langword="true"/> if the user selected an item and clicked OK, otherwise, <see langword="false"/> if the cancelled the dialog.
/// </returns>
/// <exception cref="ArgumentException">
///     <paramref name="node"/> is marked with <see cref="ProjectTreeFlags.Common.DisableAddItemFolder"/> or <see cref="ProjectTreeFlags.Common.DisableAddItemRecursiveFolder"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Provides an abstraction over dialogs to make them unit testable. Each dialog will have its own abstraction which
/// can be retrieved from this service. 
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Any false, the result is false
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Reset error condition
// We are doing Row Validation - make sure that in addition to Name - Value is valid
// We are doing Row Validation - make sure that in addition to Value - Name is valid
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Static class containing helper utilities for working with UI thread.
/// </summary>
/// <summary>
/// Helper utility to ensure that we are on UI thread. Needs to be called 
/// in every method/propetrty needed UI thread for our protection (to avoid hangs 
/// which are hard to repro and investigate).
/// </summary>
// Do not used banned APIs
// Do not used banned APIs
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// This property helps to alter behavior when in unit test mode,
/// for example not throw or not switch to UI thread etc.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// try to get the cell but it may possibly be virtualized
// now try to bring into view and retrieve the cell
// may be virtualized, bring into view and try again
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// If the cached file exists reads the data and returns it as a string
/// </summary>
// If the cached file exists read it
/// <summary>
/// Downloads from the downloadUri to the cached file. 
/// </summary>
// Make sure it is valid data before we write to the file (will throw on failure, we don't need the returned data)
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Example data shown below. Support version is the version at which VS will warn the user and the warning will have a 
/// don't show again checkbox. The error version (if specified) indicates the version at which the customer is given a stronger 
/// message about support and does not have the don't show again dialog box option. The two versions establish a range of 
/// "supported" versions.
/// eg: 
/// <code>
/// {
///  "vsVersions": {
///    "15.6": {
///      "supportedVersion": "2.1",
///      "openSupportedMessage": "Warning when targeting 2.1",
///      "unsupportedVersion": "3.0",
///      "openUnsupportedMessage": "error when targeting 3.0 or newer"
///    }
///  }
///}
///</code>
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <inheritdoc cref="IDotNetCoreProjectCompatibilityDetector"/>
//go.microsoft.com/fwlink/?linkid=868064";
//go.microsoft.com/fwlink/?linkid=866797";
//go.microsoft.com/fwlink/?linkid=866798";
// Tracks how often we need to look for new data
// These are internal for unit testing
// Initialize our cache file
// Check to see if a solution is already open. If so we set _solutionOpened to true so that subsequent projects added to 
// this solution are processed.
// do not block package initialization on this
// First make sure that the cache file exists
// check if the project is compatible
// Only check this project if the solution is opened and we haven't already warned at the maximum level. Note that fAdded
// is true for both add and a reload of an unloaded project
// Run on the background
// We need to check if this project has been newly created. Our projects will implement IProjectCreationState -we can 
// skip any that don't
// This method is overridden in test code
// NOTE: this explicit cast is necessary for the subsequent COM QI to succeed. 
// This method is overridden in test code
// Clear state flags
// Run on the background
// Track the most severe compatibility level
// Warn the user.
// Used so we know when to process newly added projects
/// <summary>
/// Fired when the solution load process is fully complete, including all background loading
/// of projects. This event always fires after the initial opening of a solution
/// </summary>
// Schedule this to run on idle
// Check if already warned - this could happen in the off chance two projects are added very quickly since the detection work is 
// scheduled on idle.
// Only want to warn once per solution
// Get current dontShowAgain value
// There is no message to show the user in this case so we return
// The interesting case here is Asp.Net Core on full framework
// Look through the package references
// This is a semantic version string. We only care about the non-semantic version part
/// <summary>
/// Compares the passed in version to the compatibility data to determine the compat level
/// </summary>
// Only compare major, minor. The presence of build with change the comparison. ie: 2.0 != 2.0.0
// No restrictions
// Version is less than the supported preview version and the user wants to use preview SDKs
// A supported version exists and the version is less than the supported version
// The version is not unsupported and exactly matches the supported version
// Supported version is null or not recommended check unsupported version
// Unsupported version is not recommended
/// <summary>
/// Pings the server to download version compatibility information and stores this in a cached file in the users app data. If the cached file is
/// less than 24 hours old, it uses that data. Otherwise it downloads from the server. If the download fails it will use the previously cached
/// file, or if that file doesn't not exist, it uses the data baked into this class
/// </summary>
// Do we need to update our cached data? Note that since the download could take a long time like tens of seconds we don't really want to
// start showing messages to the user well after their project is opened and they are interacting with it. Thus we start a task to update the 
// file, so that the next time we come here, we have updated data.
// Try the cache file
// See if the cache file needs refreshing and if so, kick off a task to do so
// Invalidate the in-memory cached data on success
// First try to match exactly on our VS version and if that fails, match on just major, minor
// Now fix up missing data
// Something failed or no remote file,  use the compatibility data we shipped with which does not have any warnings
/// <summary>
/// If the cached file exists reads the data and returns it
/// </summary>
// Unused IVsSolutionEvents
// Unused IVsSolutionLoadEvents
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Initializes the exported <see cref="IDotNetCoreProjectCompatibilityDetector"/> when the package loads.
/// </summary>
// Need to use the CPS export provider to get the dotnet compatibility detector
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Checks a legacy Visual Basic project for compatibility with the new project system.
/// </summary>
// We need to fill this out: https://github.com/dotnet/roslyn/issues/11285
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides the Visual Basic implementation of <see cref="IItemTypeGuidProvider"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// TODO track https://github.com/dotnet/roslyn/issues/37069 regarding these suppressions
// TODO track https://github.com/dotnet/roslyn/issues/37069 regarding these suppressions
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// A filter for the Add New Item dialog that filters out Windows Forms items from non-Windows Forms projects.
/// </summary>
// Most of the templates for Windows Forms items are filtered by capabilities in the .vstemplate but there are a couple
// that use an older .vsz tmeplate format that doesn't support capabilities, so we filter them all out here.
// These item templates are an older style that can't be filtered by capabilities, and use a Wizard that is broken for .NET Core
// Important for ProjectNodeComServices to null out fields to reduce the amount 
// of data we leak when extensions incorrectly holds onto the IVsHierarchy.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     A project-specific editor provider that is responsible for handling two things;
///     
///     1) Add the Windows Forms designer to the list of editor factories for a "designable" source file, and 
///        determines whether it opens by default.
///     
///     2) Persists whether the designer opens by default when the user uses Open With -> Set As Default.
/// </summary>
// Need to run before CPS's version before its deleted
// 'useGlobalEditor' means use the default editor that is registered for source files
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Xproj is deprecated. It cannot be upgraded, and cannot be loaded.
// Log a message explaining that the project cannot be automatically upgraded
// and how to perform the upgrade manually. This message will be presented in
// the upgrade report.
// Should not be called
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Represents an ITEMID in an IVsHierarchy.
/// </summary>
/// <summary>
///     Represents the root of a project hierarchy and is used to identify the entire hierarchy, as opposed 
///     to a single item.
/// </summary>
/// <summary>
///     Represents the currently selected items, which can include the root of the hierarchy.
/// </summary>
/// <summary>
///     Represents the absence of a project item. This value is used when there is no current selection.
/// </summary>
/// <summary>
///     Represent an empty item.
/// </summary>
/// <summary>
///     Returns the underlying ITEMID.
/// </summary>
/// <summary>
///     Returns a value indicating if the <see cref="HierarchyId"/> represents the root of a project hierarchy
///     and is used to identify the entire hierarchy, as opposed to a single item.
/// </summary>
/// <summary>
///     Returns a value indicating if the <see cref="HierarchyId"/> represents the currently selected items, 
///     which can include the root of the hierarchy.
/// </summary>
/// <summary>
///    Returns a value indicating if the <see cref="HierarchyId"/> is empty.
/// </summary>
/// <summary>
///    Returns a value indicating if the <see cref="HierarchyId"/> is <see cref="IsNil"/> or 
///    <see cref="IsEmpty"/>.
/// </summary>
/// <summary>
///    Returns a value indicating if the <see cref="HierarchyId"/> represents the absence of a project item. 
///    This value is used when there is no current selection.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Adapts an IServiceProvider to an OLE IServiceProvider
// Should only throw on OOM according to MSDN
// Do not used banned APIs (deliberately adapting)
// Do not used banned APIs
// Don't leak the IUnknown
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides extension methods for <see cref="IVsOutputWindow"/>.
/// </summary>
/// <summary>
///     Actives the output window pane associated with the specified GUID. Does nothing if the pane cannot be found.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="outputWindow"/> is <see langword="null"/>.
/// </exception>
/// <exception cref="ArgumentException">
///     <paramref name="paneGuid"/> is empty.
/// </exception>
// Pane found
/// <summary>
///     Returns the GUID associated with the active window pane, or <see cref="Guid.Empty"/> if no 
///     active pane or the active pane is unknown.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="outputWindow"/> is <see langword="null"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides extension methods for <see cref="IVsOutputWindowPane"/>.
/// </summary>
/// <summary>
///     Prints text to the output window avoiding pushing a message pump, if possible.
/// </summary>
/// <exception cref="ArgumentNullException">
///     <paramref name="pane"/> is <see langword="null"/>.
/// </exception>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Returns the version of VS as defined by <see cref="VSAPropID.VSAPROPID_ProductSemanticVersion"/> with the trailing sem version stripped, or <see langword="null"/> on failure.
/// </summary>
/// <summary>
/// Returns the local app data folder as defined by <see cref="__VSSPROPID4.VSSPROPID_LocalAppDataDir"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides extension methods for <see cref="IVsHierarchy"/> instances.
/// </summary>
/// <summary>
///     Returns the GUID of the specified property.
/// </summary>
/// <summary>
///     Gets the value of the specified property if the hierarchy supports it, or throws an exception if there was an error.
/// </summary>
/// <summary>
///     Gets the value of the specified property of the specified item if the hierarchy supports it, or throws an exception if there was an error.
/// </summary>
// Needs https://github.com/dotnet/roslyn/issues/38638
/// <summary>
///     Gets the value of the specified property if the hierarchy supports it, or returns a HRESULT if there was an error.
/// </summary>
// Needs https://github.com/dotnet/roslyn/issues/38638
/// <summary>
///     Gets the value of the specified property of the specified item if the hierarchy supports it, or returns a HRESULT if there was an error.
/// </summary>
// NOTE: We consider it a bug in the underlying project system or the caller if this cast fails
/// <summary>
/// Convenient way to get to the UnconfiguredProject from the hierarchy
/// </summary>
/// <summary>
/// Returns EnvDTE.Project object for the hierarchy
/// </summary>
/// <summary>
/// Returns the path to the project file. Assumes the hierarchy implements IVsProject. Returns null on failure
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Provides extension methods for <see cref="IVsProject"/> instances.
/// </summary>
/// <summary>
///     Returns the <see cref="HierarchyId"/> of the given document moniker, or 
///     <see cref="HierarchyId.Nil"/> if the document moniker is not part of the project.
/// </summary>
// We only return items that are actually part of the project. CPS returns non-member from this API.
/// <summary>
///     Opens the specified item with the specified editor using the primary logical view.
/// </summary>
/// <returns>
///     The <see cref="IVsWindowFrame"/> that contains the editor; otherwise, <see langword="null"/> if it was opened
///     with an editor external of Visual Studio.
/// </returns>
// NOTE: frame is 'null' when opened in an external editor
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Directly loads a localized string from a VSPackage satellite DLL.
/// </summary>
/// <param name="vsShell">The IVsShell implementation</param>
/// <param name="packageGuid">Unique identifier of the VSPackage whose UI DLL contains the string specified to load.</param>
/// <param name="resourceId">Identifier of the string table resource.</param>
/// <returns>The requested string</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Wrapper for <see cref="VsShellUtilities"/> to allow for testing.
/// </summary>
// This is a semantic version string. We only care about the non-semantic version part
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Don't hash PII for internal users since we don't need to.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// To enable this for a process, add the following to the app.config for the project:
//
// <configuration>
//  <system.diagnostics>
//    <trace>
//      <listeners>
//        <remove name="Default" />
//        <add name="ThrowingTraceListener" type="Microsoft.VisualStudio.Diagnostics.ThrowingTraceListener, Microsoft.VisualStudio.ProjectSystem.Managed.TestServices" />
//      </listeners>
//    </trace>
//  </system.diagnostics>
//</configuration>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// TODO test different SDK version
// TODO review GitHub issues and produce tests for known bugs
// TODO ensure VS shut down after test fixture completes
// non private as explicitly added
// NOTE the dependencies node makes only the first TFM visible via DTE.
// For example, netstandard1.3 has 49 references while net461 has the 14 shown here.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// TestCleanup will fire up another instance of Visual Studio to reset 
// the AutoloadExternalChanges if it thinks the default changed even if
// that was just caused by settings to be sync'd. Just turn this feature off.
// Do not add things we reference to the MEF Container
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// project reload is on a one second delay
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Base class for integration tests that start with a specific solution/project layout on disk.
/// </summary>
/// <summary>
/// Paths of temporary workspaces to delete when the test fixture completes.
/// Each path is a root, so should be deleted recursively.
/// </summary>
/// <summary>
/// Verifies that the "Dependencies" node of <paramref name="project"/> has a structure that
/// matches <paramref name="nodes"/>.
/// </summary>
/// <param name="project">The project whose Dependencies node should be inspected.</param>
/// <param name="nodes">The expected structure for the Dependencies node.</param>
/// <summary>
/// Verifies that the solution's first "Dependencies" node has a structure that
/// matches <paramref name="nodes"/>.
/// </summary>
/// <param name="nodes">The expected structure for the Dependencies node.</param>
/// <summary>
/// Creates <paramref name="project"/> on disk and opens it, returning its test extension object.
/// </summary>
/// <param name="project"></param>
// Wait for dataflow to update the nodes
// TODO create a more reliable (and usually faster) way of doing this
// https://github.com/dotnet/project-system/issues/3426
/// <summary>
/// Models the expected state of a node in the "Dependencies" node tree.
/// </summary>
/// <remarks>
/// This type is designed to work with object and collection initializers.
/// For example:
/// <example>
/// <code>new Node(".NETCoreApp 2.1", ManagedImageMonikers.Library)
/// {
///     new Node("SDK", ManagedImageMonikers.Sdk)
/// }</code>
/// </example>
/// </remarks>
/// <summary>
/// Gets and sets the expected icon for this node.
/// A <see langword="null"/> value will disable validation.
/// </summary>
/// <summary>
/// Gets and sets the expected icon for this node.
/// A <see langword="null"/> value will disable validation.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Defines a <c>global.json</c> file to be created when using <see cref="ProjectLayoutTestBase"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Defines a <c>.csproj</c> file to be created when using <see cref="ProjectLayoutTestBase"/>.
/// </summary>
/// <summary>
/// Adds a P2P (project-to-project) reference from this project to <paramref name="referree"/>.
/// </summary>
/// <param name="referree">The project to reference.</param>
/// <summary>
/// We only implement <see cref="IEnumerable"/> to support collection initialiser syntax.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Defines a <c>.sln</c> file to be created when using <see cref="ProjectLayoutTestBase"/>.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Avoids logging "known" warnings that only make investigating real errors harder.
/// </summary>
// Other than WriteEntry(SinkEntryType, String), everything else is delegated to the base
// Set the base TestContext
// We have lifetime actions that we have no control over that fail to run due to the lack of
// elevated process, we don't output these warnings to the log as it only confuses investigations.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Just to make sure AssemblyInitialize/Cleanup get called
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// This combined with TestBase.IncludeReferencedAssembliesInHostComposition set to false, deliberately limit
// the number of assemblies added to the composition to reduce MEF composition errors in the build log.
// Microsoft.Test.Apex.VisualStudio
// Microsoft.Test.Apex.Framework
// This assembly
// Omni
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Heavily based on MsTestOperationsConfiguration, which is only needed so that we can control the CompositionAssemblies
// to avoid MEF composition errors being output into the test output and making it harder to understand the build log.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Gets the Visual Studio hive to run tests under.
/// </summary>
// Get hive from .runsettings if present (command-line)
// Otherwise, respect the environment, failing that use the default
// Use the same version we're running inside (Test Explorer)
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Responsible for making the OmniLog test-specific and prevent incremental logging.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Responsible for shutting down Visual Studio after last test is done with it.
/// </summary>
// To reduce integration test time, we want to reuse Visual Studio instances where possible.
// Apex will automatically close VS only if the previous test failed, this shuts down Visual Studio
// after all the tests have finished.            
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// This file is used by Code Analysis to maintain SuppressMessage 
// attributes that are applied to this project.
// Project-level suppressions either have no target or are given 
// a specific target and scoped to a namespace, type, member, etc.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// MSBuild will write out the XML declaration if the encoding isn't UTF8, 
// force it into thinking it is to make comparison easier.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
///     Visits the entire tree, calling <see cref="IProjectTreePropertiesProvider.CalculatePropertyValues(IProjectTreeCustomizablePropertyContext, IProjectTreeCustomizablePropertyValues)"/>
///     for every node.
/// </summary>
// Cheat here, because the IProjectTree that we get from ProjectTreeParser is mutable, we want to clone it
// so that any properties providers changes don't affect the "original" tree. If we implemented a completely
// immutable tree, then we wouldn't have to do that - but that's currently a lot of work for test-only purposes.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Parses a string into a project tree
//
// We always start with the root, with zero indent
// Use 'throw' expression
// Use 'throw' expression
// Attempts to read the indent level of the current project item
//
// Root              <--- IndentLevel: 0
//     Parent        <--- IndentLevel: 1
//         Child     <--- IndentLevel: 2
// If we read '\r', it must be followed by a '\n'
// Parse "Root (visibility: visible, flags: {ProjectRoot}), FilePath: "C:\My Project\MyFile.txt", Icon: {1B5CF1ED-9525-42B4-85F0-2CB50530ECA9 1}, ExpandedIcon: {1B5CF1ED-9525-42B4-85F0-2CB50530ECA9 1}
// Parses "(visibility: visible, flags: {ProjectRoot})"
// Properties section is optional
// Empty properties
// Parse 'visible' in 'visibility:visible' or 'invisible' in 'visibility:invisible"
// Parse '{ProjectRoot Folder}'
// Empty flags
// Parses 'AppDesigner' in '{AppDesigner Folder}'
// Parses ', FilePath: "C:\Temp\Foo"'
// This section is optional
// Parses '1`
// Parses '"test.fs"'
// Parses '"C:\Temp\Foo"'
// Parses '"C:\Temp"'
// Parses '{1B5CF1ED-9525-42B4-85F0-2CB50530ECA9 1}'
// Empty icon
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// MutableProjectItemTree acts as a builder for both MutableProjectItemTree and MutableProjectTree
// 
// Once we've finished building, return either ourselves if we are already are a MutableProjectItemTree
// otherwise, copy ourselves to a MutableProjectTree.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Does nothing other than return the "SubType" property
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Simple, cheap, forward-only string reader
// Treat null as end of string
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Are we at the end of the string?
// Consume token, so "position" is correct
// Otherwise, we must have hit a delimiter as whitespace will have been consumed as part of the identifier
// Otherwise, must be a literal
// Represents a self-contained unit within a tokenized string
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Input                                                                                    // Expected
// Input                                                                                    // Expected
// Input                                                                                    // Expected
// Input                                                                                    // Expected
// Input                                                                                    // Expected
// Input                                                                                    // Expected
// Input                                                                                    // Expected
// Input                                                                                                                                    // Expected
// Remove the newlines from the start and end of input and expected so that 
// it makes it easier inside the test to layout the repro.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//github.com/xunit/xunit/issues/1877", Scope = "member", Target = "~M:Microsoft.VisualStudio.ProjectSystem.SetDiffTests.ProducesCorrectDiff(System.Int32[],System.Int32[],System.Int32[],System.Int32[])")]
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Type or member is obsolete
// Type or member is obsolete
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// A useful helper moq for IFileSystem.
/// Use AddFile, AddFolder method to add file paths and folders paths to the file system.
/// Maintaining the integrity of file system is the responsibility of caller. (Like creating
/// files and folders in a proper way)
/// </summary>
// Every write should increase in time and just using DateTime.UtcNow can cause issues where
// two very fast writes return the same value. The following better simulates writes in the real world
// Caller does not check the return value.
// SearchOption is ignored and always considered fully recursive.
// Now supports search patterns
// Need to handle at least simple wildcards. *.* and *.ext
// Convert the wildcard to a regex
// This makes sure each write to the file increases the timestamp
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Find the node that has the parent folder and add the new node as a child.
// TODO remove ! when CPS annotations updated
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// evaluated properties are never null
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Every IProjectSubscriptionUpdate contains the version of the configured project
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Note, we have to wait for both the source *and* target block as 
// the Completion of the source block doesn't mean that the target 
// block has finished.
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// We should create a new instance here
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Change the active configurations
// Change the active configurations
// Should not be listening
// Change the active configurations
// Change the active configurations
// Should not be listening
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// ActiveConfiguration                 Configurations
// ActiveConfiguration                 Configurations                                            Expected Active Configurations
// ActiveConfiguration                 Configurations
// Copyright (c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Active configs                                                         Current
// Just to init
// Active configs                                                         Current
// Active configs                                                         Current
// Wait for data to be sent
// Wait for data to be sent
// Should now be considered active
// Should now be considered in-active
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// BasePath                                        FullPath                                 Link                                           Expected
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Run first task and wait until we've entered it
// Run second task, we should never enter it
// Now release first
// Now we should enter first one
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright(c) Microsoft.All Rights Reserved.Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Input                                    All Dimensions                                                  Variant dimensions                        Expected
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// On ChangeEventStage.After nothing should be changed
// On ChangeEventStage.Before the property should be added
// On ChangeEventStage.After nothing should be changed
// On ChangeEventStage.Before the property should be removed
// On ChangeEventStage.Before nothing should be changed
// On ChangeEventStage.Before the property should be renamed
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Just verifies it doesn't throw. In other words, the function is trying to set the correct property. The way the property mocks
// are set up there is no easy way to capture the value being set without rewriting how they work.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Tests all the possible replacements. env3 tests that environment vars are resolved before msbuild tokens
// Not a valid token
//localhost:8080/$(unknownproperty)",
// Name and Command name should never be touched
//localhost:8080/", resolvedProfile.LaunchUrl);
// Test msbuild vars
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//localhost:1234:/test.html", profile.LaunchUrl);
//localhost:1234:/test.html", serializableProfile["launchUrl"]);
// tests launchBrowser:false is not rewritten
// Json string data
//localhost:1234:/test.html"",
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Test overload
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Type or member is obsolete
// Change the value of activeDebugProfile to web it should be the active one. Simulates a change
// on disk doesn't affect active profile
// don't change file on disk, just active one
// Set the serialization provider
//localhost:12345/",
// Last Write time should be set
// Check disk contents
// Wait for completion of task
// Write file and generate disk change
// Set the ignore flag. It should be ignored.
// Should run this time
// Write new file, but set the timestamp to match
//localhost:12345/",
// Setup SCC to verify it is called before modifying the file
// Check disk contents
// Check snapshot
// Verify the activeProfile is set to the first one since no existing snapshot
// Verify the activeProfile hasn't changed
// Verifify the settings haven't been persisted and the sccProvider wasn't called to checkout the file
// Check disk file was written unless not in memory
// Check snapshot
// Check disk file was written unless in memory profile
// Check snapshot
// Check disk file was written
// Check snapshot
// Check disk file was not written
// Check snapshot
// Check disk file was written
// Check snapshot
// Check disk file was written
// Check snapshot
// Check disk file was not written
// Check snapshot
// Check disk file was written
// Check snapshot
//localhost:1234:/test.html"",
//localhost:12345/"",
// Derives from base class to be able to set protected members
// ECan pass null for all and a default will be created
// Block the code from setting up one on the real file system. Since we block, it we need to set up the fileChange scheduler manually
// Make the unit tests run faster
// Wrappers to call protected members
// Used to test global settings
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Test 
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Lowest
// Highest
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Evaluation
// Project Build
// Unload project
// Evaluation
// Project Build
// Dispose the instance underneath us
// Evaluation
// Project Build
// Evaluation/Project Build       IsActiveContext
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Configurations          Project GUID                               Expected
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// This isn't supposed to be a exhaustive set of tests as we assume that Roslyn has tested their 
// command-line parsing code, just enough to make sure we're passing the data through correctly.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Include path                          Expected full path
// Include path                          Expected full path
// Current state                       Added files                     Expected state
// Current state                      Added files                      Expected state
// Current state                      Removed files                    Expected state
// Current state                      Removed files                    Expected state
// Current state                       Added files                     Expected state
// Current state                      Added files                      Expected state
// Current state                      Removed files                    Expected state
// Current state                      Removed files                    Expected state
// Current state                      Original name        New name                         Expected state
// Current state                      Original name        New name                         Expected state
// Setup the "current state"
// Setup the "current state"
// Setup the "current state"
// Setup the "current state"
// Setup the "current state"
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Dimension Names                             Dimension Values       Implicit Dimension Names,                 Expected
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// This isn't supposed to be a exhaustive set of tests as we assume that Roslyn has tested their 
// command-line parsing code, just enough to make sure we're passing the data through correctly.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// NOTE: No trailing new line, as the logger itself should be adding it
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Configure whether AssemblyInfo properties are generated in project file or not.
// Negative cases
/*Trivia*/ ""MyDescription"" /*Trivia*/)]", "Description", "NewDescription",
/*Trivia*/ ""NewDescription"" /*Trivia*/)]")]
//Negative cases
// Confirm the new value.
// Verify no code changes as property was written to project file.
// AssemblyVersion
// FileVersion
// Version
// PackageId
// Authors
// Product
// AssemblyVersion
// FileVersion
// PackageVersion
// Read the property value again and confirm the new value.
// Verify no code changes as property was written to project file.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Verify get key file value without intercepted provider.
// Verify relative path key file value from intercepted key file provider.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Verify interception for GetEvaluatedPropertyValueAsync.
// Verify interception for GetUnevaluatedPropertyValueAsync.
// Verify interception for SetPropertyValueAsync.
// Verify interception for GetEvaluatedPropertyValueAsync.
// Verify interception for GetUnevaluatedPropertyValueAsync.
// Verify interception for SetPropertyValueAsync.
// Verify interception for GetEvaluatedPropertyValueAsync.
// Verify interception for GetUnevaluatedPropertyValueAsync.
// Verify interception for SetPropertyValueAsync.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Resolved rules get their data from design time targets. Any editable properties need a
// property-level data source that specifies the storage for that property as the project file
// so that changes made in the properties pane are reflected in the project file and vice versa.
// Properties are visible and non-readonly by default
// All resolved dependency items have a corresponding 'original' item spec, which contains
// the value of the item produced by evaluation.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Special case for Folder rule which hasn't been split yet, but is in the Items folder. But also its completely different.
// No need to check None against None
// First fix up the Name as we know they'll differ.
// Special case for Folder rule which hasn't been split yet, but is in the Items folder. But also its completely different.
// No need to check None against None
// First fix up the Name and DisplayName as we know they'll differ.
// Special case for Folder rule which hasn't been split yet, but is in the Items folder
// No need to define categories if they're not going to be used
// If a rule is split between File and BrowseObject we need to trim the BrowseObject part off
// If a rule is split between File and BrowseObject we need to trim the BrowseObject part off
// special case - Folder's Identity property is used by dependencies node
// Special case for Folder because it is both File and BrowseObject context (for now), but is named like a File.
// ignore ItemType as we know they'll be different
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// The "DisplayName" property is localised, while "Name" is not.
// Visible properties without a "DisplayName" will appear in English in all locales.
// Properties are visible by default
// A target must be specified
// Target must not be specified on other source types
// An item type must be specified
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//schemas.microsoft.com/build/2009/properties";
// Not all rules are embedded as manifests so we have to read the xaml files from the file system.
// Ignore XAML documents for non-Rule types (such as ProjectSchemaDefinitions)
/// <summary>Projects a XAML file name into the form used by unit tests theories.</summary>
// we return the rule name separately mainly to get a readable display in Test Explorer so failures can be diagnosed more easily
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Breadthfirst
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// We override CreateFileAsync to call the CreateEmptyFileAsync which makes writting tests in the base easier
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// AppDesigner is turned off
// We override CreateFileAsync to call the CreateEmptyFileAsync which makes writting tests in the base easier
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// AppDesignerFolder        // Expected return
// Mimics an extension turning on DisableAddItem flag for our parent
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Don't support AppDesigner
// "Properties" is the default, so we shouldn't find "My Project"
// Mimic's Visual Basic projects
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Values returned by mocks that may be modified in test cases as needed
// NOTE most of these mocks are only present to prevent NREs in Initialize
// Enable "Info" log level, as we assert logged messages in tests
// TODO add a Content or None item as CopyAlways and verify (these are currently excluded by CollectInputs)
// ALWAYS COPY THIS ITEM
// This test covers a race condition described in https://github.com/dotnet/project-system/issues/4014
//
// t0 Modify input file
// t1 Check up to date (false) so start a build
// t2 Modify input file
// t3 Produce first (earliest) output DLL (from t0 input)
// t4 Check incorrectly claims everything up to date, as t3 > t2
// Run test (t1)
// Modify input while build in progress (t2)
// Update write time of output (t3)
// Run check again (t4)
// This test covers a false negative described in https://github.com/dotnet/project-system/issues/5386
// where the initial snapshot of items sets LastItemsChangedAtUtc, so if a project is up to date when
// it is loaded, then the items are considered changed *after* the last build, but MSBuild's up-to-date
// check will determine the project doesn't require a rebuild and so the output timestamps won't update.
// This previously left the project in a state where it would be considered out of date endlessly.
// Initial change does NOT set LastItemsChangedAtUtc
// Broadcasting an update with no change to items does NOT set LastItemsChangedAtUtc
// Broadcasting changed items DOES set LastItemsChangedAtUtc
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// This boxes
// Non boxing foreach
// Equivalence with string.Split
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// The first task or two may already be running. So we skip completed tasks until we find 
// one that is is cancelled
// All remaining tasks should be cancelled
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Gets the absolute path to the checked out location of this repo.
/// </summary>
/// <remarks>
/// Intended for unit tests that need to inspect files in the repo itself.
/// </remarks>
// Start with this DLL's location
// Walk up the tree until we find the 'artifacts' folder
// Go up one more level
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// TODO explore when before/after inputs have duplicate items
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Moq gets really confused with mocking IProjectValueDataSource<IVsProjectRestoreInfo2>.SourceBlock
// because of the generic/non-generic version of it. Avoid it.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Symbol IProjectGuidService2 is banned
// All IProjectGuidService2 have to be IProjectGuidService instances
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// This is the one place where IProjectGuidService is allowed to be referenced
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// All parameters are ignored, we just return the specified value.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Named with an _ instead of IVsProjectFactory to avoid collisions with the actual IVsProjectFactory
// class.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Non-nullable property is uninitialized
// Non-nullable property is uninitialized
// Allow b to have whatever if we didn't specify any properties
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// The list of assemblies that may contain <see cref="ProjectSystemContractProvider.System"/> exports.
/// </summary>
// Microsoft.VisualStudio.ProjectSystem.Managed
// Microsoft.VisualStudio.ProjectSystem.Managed.VS
/// <summary>
/// The list of assemblies to scan for contracts.
/// </summary>
// Microsoft.VisualStudio.ProjectSystem
// Microsoft.VisualStudio.ProjectSystem.VS
// Microsoft.VisualStudio.ProjectSystem.Managed
// Microsoft.VisualStudio.ProjectSystem.Managed.VS
// Prepare the self-host service and composition
// First step, we scan all imports, and gather all places requiring "AppliesTo" metadata.
// We don't support using the contract name with different interfaces, so we don't verify those contracts.
/// <summary>
/// Check whether the import requiring a component to have "AppliesTo" metadata.
/// If the imports ask metadata from the exports, and the metadata based on IAppliesToMetadataView,
/// the "AppliesTo" metadata is required.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Remove unused private members
// These components solely exist so that the MEF composition for 
// these tests can see the "scopes" that used within CPS.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Produces inputs for theory based on the composed part
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Imports should respect/filter the capabilities of the exports they receive
// We don't verify ImportingConstructor, only check properties.
// ImportMany, we want to use OrderPrecedenceImportCollection
// Single import
// If the consumer imports metadata, we assume it will be checked.
// we require it to import the metadata, or the component requires the same capability, or the capability
// of the consumed component can be inferred from the capability of the consumer.
// Exports coming from a single part must apply to the same capabilities
// Gather the appliesTo metadata from all exports of the same part.
// Now check all of them should be the same.
// BUG: https://github.com/dotnet/project-system/issues/5519
// If a contract requires AppliesTo to be specified, then an export must specify it
// If the exports has already had the metadata, it is good.
// Check whether the export satisfy any contract required the appliesTo metadata.
// If it matches one of the contract, we will report an error, because it lacks the required metadata.
// Imports must respect import cardinality specified via [ProjectSystemContract]
// Imports cannot import something from a child scope, if the part comes from parent scope
// You can import something from child if its the start of a scope
// Do we import from a child scope but export to a parent scope? ie Importing ConfiguredProject, but exporting to an UnconfiguredProject service would be invalid
// Imports must import interfaces that are marked with [ProjectSystemContract]
// Exports must export interfaces that are marked with [ProjectSystemContract]
/// <summary>
/// Check whether a capability is not a simple string, but a complex expression.
/// We don't have built-in logic to check whether one expression can infer another one today, so we don't do validation when an expression is being used.
/// </summary>
/// <summary>
/// Check whether a type is a subclass of a generic type.
/// </summary>
/// <summary>
/// Get AppliesTo metadata from an export.
/// </summary>
/// <returns>returns null if the metadata cannot be found.</returns>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Now "unload" the project
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Avoid instantiating JoinableTaskContext
// Provide JoinableTaskFactory where allowed
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//Count
//GetEnumerator
//IsPresent(string)
//IsPresent(int)
//Item(int)
// Initial add
// Remove from the end
// Remove from the beginning
// Add at the beginning
// Add at the end
// Add in the middle
// Remove from the middle
// Addition and deletion in jumbled order with the same no of elements as before
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Force initialization
/* Code */, "File", 1, 1, 1, 1, "Message", "HelpKeyword", "Sender"));
//          ErrorMessage                                    Code
//          Line        Column          Expected Line  Expected Column
// Is this the right behavior? See https://github.com/dotnet/project-system/issues/145
// Is this the right behavior?
// Is this the right behavior?
//          Line        Column      End Line     End Column             Expected End Line  Expected End Column
// Is this the right behavior? See https://github.com/dotnet/project-system/issues/145
// Is this the right behavior?
// Is this the right behavior?
//  Roslyn's ProjectExternalErrorReporter throws if end is less than start
//          File                                        ProjectFile                             ExpectedFileName
// Is this the right behavior?  See https://github.com/dotnet/project-system/issues/146
// Is this the right behavior?  See https://github.com/dotnet/project-system/issues/146
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Handshake between the project system and factory around the actual guid value so we do not test 
// for a specified guid, other than to confirm it's not empty
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// empty string args
// Now control-F5, add env
// Validate that when the DLO_Profiling is set we don't run the cmd.exe
// Now control-F5, add env vars
// Exe relative, no working dir
// Exe relative to full working dir
// Exe relative to full working dir
// Exe relative to path
// Exe relative to path
// Exe relative to path
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// case sensitive check
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Set this to have ILaunchSettingsProvider return this profile (null by default)
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
//schemas.microsoft.com/developer/msbuild/2003""> </Project>", ProjectType.FSharp)]
//schemas.microsoft.com/developer/msbuild/2003""> </Project>", ProjectType.LegacyFSharp)]
//schemas.microsoft.com/developer/msbuild/2003""> <Import Project=""Sdk.props"" Sdk=""FSharp.Sdk"" /> </Project>", ProjectType.FSharp)]
//schemas.microsoft.com/developer/msbuild/2003""> <Import Project=""Sdk.props"" /> </Project>", ProjectType.LegacyFSharp)]
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Command is enabled if there is no build in progress.
// Command is disabled if there is build in progress.
// Ensure we handle the command, but don't invoke build as there is a build already in progress.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Avoid instantiating JoinableTaskContext
// Avoid instantiating JoinableTaskContext
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// test1.fs
// test2.fs
// test3.fs
// test4.fs
// first folder
// first folder
// second folder
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// test2.fs
// test1.fs
// test4.fs
// test3.fs
// second folder
// first folder
// first folder
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// The expected result here may not be the desired behavior, but it is the current behavior that we need to test for.
// Moving test3.fs up, skips the import, but also moves above test1.fs, that is due to skipping imports during manipulation.
// Assert false as nothing should change because we can't move over an import file that is at the very bottom.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Should be unregistered
// Case-sensitive
// Case-sensitive
// Set it the value first
// Now explicitly set to null
// Case-sensitive
// Set it the value first
// Now explicitly set to null
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Input                                        // Expected
// COMBINING GRAPHEME JOINERs, not actual spaces
// Input                                                                    // Expected
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Make we don't call String.Format
// Format          Argument                Expected
// Not looking for exhaustive tests, just enough to indicate we're calling string.Format
// Format              Argument1    Argument2             Expected
// Not looking for exhaustive tests, just enough to indicate we're calling string.Format
// Format               Argument1    Argument2     Argument3           Expected
// Not looking for exhaustive tests, just enough to indicate we're calling string.Format
// Format               Arguments                                          Expected
// Not looking for exhaustive tests, just enough to indicate we're calling string.Format
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Should have only been called once
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// All NuGetRestore properties end up in the "target framework" property bag
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Overflow
// With escaped characters
// With escaped characters
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// OpenItemWithSpecific returns null frame when opened in external editor
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Setup the debug profiles
// Change a property, should trigger the selected profile to no longer be in-memory
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// BUG: https://devdiv.visualstudio.com/DevDiv/_workitems?id=368836
// SDKs say they are "assemblies" for Reference.Type, but SDK for Reference.RefType
// Input                                                                        // Name             // Version          // Path
// We let a later version satisfy an earlier version
// Input                                                                        // Name             // Version          // Path
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Change in case
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// One file should have been added
// One file should have been added
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// First update should include the file
// Second shouldn't
// Create a block to receive the output
// complete out block so that it produces output
// The timeout here is annoying, but even though our test is "smart" and waits for data, unfortunately if the code breaks the test is more likely to hang than fail
// root namespace and project folder have changed if its the first time we've sent inputs
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// For tracking compilation events that occur, to verify
// This also validates that getting the description didn't force a compile, because the output is up to date
// If the first compile didn't happen, our test results won't be valid
// Remove the output file, should mean that getting the XML forces a compile
// Verify a second compile happened
// We want our compilation to fail
// We want our compilation to throw
// We want our compilation to throw
// "Create" our output file
// Short delay so that files are actually newer than any previous output, since tests run fast
// Ensure our input files are in, and up to date, in the mock file system
// Sadly, we need a timeout
// Make everything full paths here, to allow for easier test authoring
// Ensure our input files are in the mock file system
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Nullable annotations don't add a lot of value to this class, and until https://github.com/dotnet/roslyn/issues/33199 is fixed
// MemberData doesn't work anyway
// A single design time input
// A single design time input, and a normal file
// A single design time input, and a single shared design time input
// A file that is both a design time and shared design time input
// A design time input that is a linked file, and hence ignored
// Create a block to receive the results of the block under test
// Construct our input value, including a default project config
// Send our input, and wait for our receiver to complete
// Assert
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Nullable annotations don't add a lot of value to this class, and until https://github.com/dotnet/roslyn/issues/33199 is fixed
// MemberData doesn't work anyway
// A single design time input
// design time inputs
// shared design time inputs
// expected watched files
// file change notifications to send
// file change notifications expected
// A design time input and a shared design time input
// A file that is both design time and shared, should only be watched once
// A design time input that gets modified
// A design time input and a shared design time input, that both change, to ensure ordering is correct
// Send our input. DesignTimeInputs expects full file paths
// The TaskCompletionSource is the thing we use to wait for the test to finish
// Create a block to receive the output
// if we've seen every file, we're done
// Send down our fake file changes
// The timeout here is annoying, but even though our test is "smart" and waits for data, unfortunately if the code breaks the test is more likely to hang than fail
// Observe the task in case of exceptions
// Dispose the watcher so that internal blocks complete (especially for tests that don't send any file changes)
// Make sure we watched all of the files we should
// Should clean up and unwatch everything
// Create our mock design time inputs data source, but with a source we can actually use
// Create our class under test
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Both top level
// Same provider type
// Different captions
//   -> No change
// Accepts unchanged dependency
// No other changes made
// Both top level
// Same provider type
// Same captions
//   -> Changes caption for both to match alias
// clone, with changes
// The context changed, beyond just the filtered dependency
// The filtered dependency had its caption changed to its alias
// The other dependency had its caption changed to its alias
// Both top level
// Same provider type
// Duplicate caption, though with parenthesized text after one instance
//   -> Changes caption of non-parenthesized
// caption already includes alias
// The context was unchanged, beyond the filtered dependency
// The filtered dependency had its caption changed to its alias
// The other dependency had its caption changed to its alias
// Both top level
// Same provider type
// Duplicate caption prefix
//   -> No change
// identical caption prefix
// TODO test a longer suffix here -- looks like the implementation might not handle it correctly
// Accepts unchanged dependency
// No other changes made
// Accepts unchanged dependency
// No other changes made
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// This is a resolved dependency
// This is an unresolved dependency
// This is a resolved dependency with an unresolved child dependency
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Returns changed dependency
// No other changes made
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Dependency should be accepted, but converted to resolved state
// No changes other than the filtered dependency
// Accepts unchanged dependency
// No other changes made
// to see if unresolved is fixed
// Accepts unchanged dependency
// Other changes made
// Accepts removal
// Makes other changes too
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// These throw in unit tests but assert elsewhere
/// <summary>
/// Added because circular dependencies can cause stack overflows
/// https://github.com/dotnet/project-system/issues/3374
/// </summary>
// verify it doesn't stack overflow
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Non-nullable property is uninitialized
// Non-nullable property is uninitialized
// Copy all properties from this instance
// Override specific properties as needed
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Dependency rejected
// Nothing else changed
// Dependency accepted unchanged
// Nothing else changed
// Dependency accepted unchanged
// Nothing else changed
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Accepts unchanged dependency
// No other changes made
// Accepts unresolved version
// No other changes made
// Accepts unchanged dependency
// No other changes made
// Accepts unchanged dependency
// No other changes made
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Arrange
// Act
// Assert
// Act
// Assert            
// Act
// Assert            
// Act
// Assert            
// Act
// Assert            
// Act
// Assert            
// Act
// Assert            
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Arrange
// Act
// Assert
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// for scenario where we need to see if it was recreated or not
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// case insensitive
// unknown type
// hidden file
// unknown folder
// case insensitive
// unknown type
// hidden file
// unknown folder
// 1. simple ordering with no folders in evaluated include
// unknown folders and their nested items
// included items
// hidden or other items under project root
// 2. nested ordering with folders that should also be ordered
// rootedPath is set to null for folders as we never get any metadata for folders in reality.
// unknown folders 
// included items
// hidden or other items under project root
// duplicate and out of alphabetical order
// Our link path
// duplicate and out of alphabetical order
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
/// <summary>
/// Asynchronously runs the specified <paramref name="action"/> on an STA thread.
/// </summary>
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Handshake between the project system and factory around the actual guid value so we do not test 
// for a specified guid, other than to confirm it's not empty
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Avoid instantiating JoinableTaskContext
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Let's folks double-click the designer file to open it as text
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Avoid instantiating JoinableTaskContext
// Avoid instantiating JoinableTaskContext
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Parse data with the following structure repeated.
// There may be other lines in the file which are ignored for our purposes.
//
// folder "folder\path"
//   file source = "file\path1"
//   file source = "file\path2"
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// Override PostEventToSession to avoid actually sending to telemetry
