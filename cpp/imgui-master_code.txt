________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\imgui.cpp
// dear imgui, v1.75 WIP
// (main code and documentation)
// Help:
// - Read FAQ at http://dearimgui.org/faq
// - Newcomers, read 'Programmer guide' below for notes on how to setup Dear ImGui in your codebase.
// - Call and read ImGui::ShowDemoWindow() in imgui_demo.cpp for demo code. All applications in examples/ are doing that.
// Resources:
// - FAQ                   http://dearimgui.org/faq
// - Homepage & latest     https://github.com/ocornut/imgui
// - Releases & changelog  https://github.com/ocornut/imgui/releases
// - Gallery               https://github.com/ocornut/imgui/issues/2847 (please post your screenshots/video there!)
// - Glossary              https://github.com/ocornut/imgui/wiki/Glossary
// - Wiki                  https://github.com/ocornut/imgui/wiki
// - Issues & support      https://github.com/ocornut/imgui/issues
// Developed by Omar Cornut and every direct or indirect contributors to the GitHub.
// See LICENSE.txt for copyright and licensing details (standard MIT License).
// This library is free but I need your support to sustain development and maintenance.
// Businesses: you can support continued development via invoiced technical support, maintenance and sponsoring contracts. Please reach out to "contact AT dearimgui.org".
// Individuals: you can support continued development via donations. See docs/README or web page.
// It is recommended that you don't modify imgui.cpp! It will become difficult for you to update the library.
// Note that 'ImGui::' being a namespace, you can add functions into the namespace from your own source files, without
// modifying imgui.h or imgui.cpp. You may include imgui_internal.h to access internal data structures, but it doesn't
// come with any guarantee of forward compatibility. Discussing your changes on the GitHub Issue Tracker may lead you
// to a better solution or official support for them.
/*
//www.dearimgui.org/faq, or in docs/FAQ.md (with a Markdown viewer)
// [SECTION] FORWARD DECLARATIONS
// [SECTION] CONTEXT AND MEMORY ALLOCATORS
// [SECTION] MAIN USER FACING STRUCTURES (ImGuiStyle, ImGuiIO)
// [SECTION] MISC HELPERS/UTILITIES (Geometry functions)
// [SECTION] MISC HELPERS/UTILITIES (String, Format, Hash functions)
// [SECTION] MISC HELPERS/UTILITIES (File functions)
// [SECTION] MISC HELPERS/UTILITIES (ImText* functions)
// [SECTION] MISC HELPERS/UTILITIES (Color functions)
// [SECTION] ImGuiStorage
// [SECTION] ImGuiTextFilter
// [SECTION] ImGuiTextBuffer
// [SECTION] ImGuiListClipper
// [SECTION] RENDER HELPERS
// [SECTION] MAIN CODE (most of the code! lots of stuff, needs tidying up!)
// [SECTION] ERROR CHECKING
// [SECTION] SCROLLING
// [SECTION] TOOLTIPS
// [SECTION] POPUPS
// [SECTION] KEYBOARD/GAMEPAD NAVIGATION
// [SECTION] DRAG AND DROP
// [SECTION] LOGGING/CAPTURING
// [SECTION] SETTINGS
// [SECTION] PLATFORM DEPENDENT HELPERS
// [SECTION] METRICS/DEBUG WINDOW
//-----------------------------------------------------------------------------
// DOCUMENTATION
//-----------------------------------------------------------------------------
/*
//goo.gl/9LgVZW
//www.dearimgui.org/faq)
//www.johno.se/book/imgui.html, http://mollyrocket.com/861 & more links docs/README.md.
// Application init: create a dear imgui context, setup some options, load fonts
// TODO: Set optional io.ConfigFlags values, e.g. 'io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard' to enable keyboard controls.
// TODO: Fill optional fields of the io structure later.
// TODO: Load TTF/OTF fonts if you don't want to use the default font.
// Initialize helper Platform and Renderer bindings (here we are using imgui_impl_win32.cpp and imgui_impl_dx11.cpp)
// Application main loop
// Feed inputs to dear imgui, start new frame
// Any application code here
// Render dear imgui into screen
// Shutdown
// Application init: create a dear imgui context, setup some options, load fonts
// TODO: Set optional io.ConfigFlags values, e.g. 'io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard' to enable keyboard controls.
// TODO: Fill optional fields of the io structure later.
// TODO: Load TTF/OTF fonts if you don't want to use the default font.
// Build and load the texture atlas into a texture
// (In the examples/ app this is usually done within the ImGui_ImplXXX_Init() function from one of the demo Renderer)
// At this point you've got the texture data and you need to upload that your your graphic system:
// After we have created the texture, store its pointer/identifier (_in whichever format your engine uses_) in 'io.Fonts->TexID'.
// This will be passed back to your via the renderer. Basically ImTextureID == void*. Read FAQ for details about ImTextureID.
// Application main loop
// Setup low-level inputs, e.g. on Win32: calling GetKeyboardState(), or write to those fields from your Windows message handlers, etc.
// (In the examples/ app this is usually done within the ImGui_ImplXXX_NewFrame() function from one of the demo Platform bindings)
// set the time elapsed since the previous frame (in seconds)
// set the current display width
// set the current display height here
// set the mouse position
// set the mouse button states
// Call NewFrame(), after this point you can use ImGui::* functions anytime
// (So you want to try calling NewFrame() as early as you can in your mainloop to be able to use Dear ImGui everywhere)
// Most of your application code here
// may use any Dear ImGui functions, e.g. ImGui::Begin("My window"); ImGui::Text("Hello, world!"); ImGui::End();
// may use any Dear ImGui functions as well!
// Render dear imgui, swap buffers
// (You want to try calling EndFrame/Render as late as you can, to be able to use Dear ImGui in your own game rendering code)
// Shutdown
// TODO: Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled
// TODO: Setup viewport covering draw_data->DisplayPos to draw_data->DisplayPos + draw_data->DisplaySize
// TODO: Setup orthographic projection matrix cover draw_data->DisplayPos to draw_data->DisplayPos + draw_data->DisplaySize
// TODO: Setup shader: vertex { float2 pos, float2 uv, u32 color }, fragment shader sample color from 1 texture, multiply by vertex color.
// vertex buffer generated by Dear ImGui
// index buffer generated by Dear ImGui
// The texture for the draw call is specified by pcmd->TextureId.
// The vast majority of draw calls will use the Dear ImGui texture atlas, which value you have set yourself during initialization.
// We are using scissoring to clip some objects. All low-level graphics API should supports it.
// - If your engine doesn't support scissoring yet, you may ignore this at first. You will get some small glitches
//   (some elements visible outside their bounds) but you can fix that once everything else works!
// - Clipping coordinates are provided in imgui coordinates space (from draw_data->DisplayPos to draw_data->DisplayPos + draw_data->DisplaySize)
//   In a single viewport application, draw_data->DisplayPos will always be (0,0) and draw_data->DisplaySize will always be == io.DisplaySize.
//   However, in the interest of supporting multi-viewport applications in the future (see 'viewport' branch on github),
//   always subtract draw_data->DisplayPos from clipping bounds to convert them to your viewport space.
// - Note that pcmd->ClipRect contains Min+Max bounds. Some graphics API may use Min+Max, other may use Min+Size (size being Max-Min)
// Render 'pcmd->ElemCount/3' indexed triangles.
// By default the indices ImDrawIdx are 16-bit, you can change them to 32-bit in imconfig.h if your engine doesn't support 16-bit indices.
//github.com/ocornut/imgui/issues/787
//goo.gl/9LgVZW.
//github.com/ocornut/imgui/releases for more details.
//github.com/ocornut/imgui/issues/1382 for details.
//www.dearimgui.org/faq, or in docs/FAQ.md (with a Markdown viewer)
//github.com/ocornut/imgui/wiki) has many resources and links.
//github.com/ocornut/imgui/wiki/Glossary) page also may be useful.
//www.dearimgui.org/faq
//www.dearimgui.org/faq for fully detailed answer. You really want to read this.
//www.dearimgui.org/faq
// Label = "OK",     ID = hash of (..., "OK")
// Label = "Cancel", ID = hash of (..., "Cancel")
// Label = "OK",     ID = hash of ("MyWindow", "OK")
// Label = "OK",     ID = hash of ("MyOtherWindow", "OK")
// ID collision! Interacting with either button will trigger the first one.
// Label = "Play",   ID = hash of ("MyWindow", "Play")
// Label = "Play",   ID = hash of ("MyWindow", "Play##foo1")  // Different from above
// Label = "Play",   ID = hash of ("MyWindow", "Play##foo2")  // Different from above
// Label = "",       ID = hash of (..., "##On")   // No visible label, just a checkbox!
// Label = "Hello",  ID = hash of (..., "###ID")
// Label = "World",  ID = hash of (..., "###ID")  // Same as above, even though the label looks different
// Variable title,   ID = hash of "MyGame"
// Push i to the id tack
// Label = "Click",  ID = hash of ("Window", i, "Click")
// Label = "Click",  ID = hash of ("Window", obj pointer, "Click")
// Label = "Click",  ID = hash of ("Window", obj->Name, "Click")
// Label = "Click",  ID = hash of (..., "Click")
// Label = "Click",  ID = hash of (..., "node", "Click")
// Label = "Click",  ID = hash of (..., "node", my_ptr, "Click")
// Label = "Click",  ID = hash of (..., "Click")
// <-- this function call will do a PushID() for you (unless instructed not to, with a special flag)
// Label = "Click",  ID = hash of (..., "node", "Click")
//www.dearimgui.org/faq and https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples
//www.dearimgui.org/faq
//www.dearimgui.org/faq and docs/FONTS.txt
//www.dearimgui.org/faq
// toupper
// vsnprintf, sscanf, printf
// MSVC 2008 or earlier
// intptr_t
// intptr_t
// Debug options
// Display navigation scoring preview when hovering items. Display last moving direction matches when holding CTRL
// Display the reference navigation rectangle for each window
// Save additional comments in .ini file
// Visual Studio warnings
// condition expression is constant
// 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
// Clang/GCC warnings with -Weverything
// warning : unknown warning group '-Wformat-pedantic *'        // not all warnings are known by all clang versions.. so ignoring warnings triggers new warnings on some configuration. great!
// warning : use of old-style cast                              // yes, they are more terse.
// warning : comparing floating point with == or != is unsafe   // storing and comparing against same constants (typically 0.0f) is ok.
// warning : format string is not a string literal              // passing non-literal to vsnformat(). yes, user passing incorrect format strings can crash the code.
// warning : declaration requires an exit-time destructor       // exit-time destruction order is undefined. if MemFree() leads to users code that has been disabled before exit it might cause problems. ImGui coding style welcomes static/globals.
// warning : declaration requires a global destructor           // similar to above, not sure what the exact difference is.
// warning : implicit conversion changes signedness             //
// warning : format specifies type 'void *' but the argument has type 'xxxx *' // unreasonable, would lead to casting every %p arg to void*. probably enabled by -pedantic.
// warning : cast to 'void *' from smaller integer type 'int'
// warning : zero as null pointer constant              // some standard header variations use #define NULL 0
// warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.
// We disable -Wpragmas because GCC doesn't provide an has_warning equivalent and some forks/patches may not following the warning/version association.
// warning: unknown option after '#pragma GCC diagnostic' kind
// warning: 'xxxx' defined but not used
// warning: cast to pointer from integer of different size
// warning: format '%p' expects argument of type 'void*', but argument 6 has type 'ImGuiWindow*'
// warning: implicit conversion from 'float' to 'double' when passing argument to function
// warning: conversion to 'xxxx' from 'xxxx' may alter its value
// warning: format not a string literal, format string not checked
// warning: assuming signed overflow does not occur when assuming that (X - c) > X is always false
// [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
// When using CTRL+TAB (or Gamepad Square+L/R) we delay the visual a little in order to reduce visual noise doing a fast switch.
// Time before the highlight and screen dimming starts fading in
// Time before the window list starts to appear
// Window resizing from edges (when io.ConfigWindowsResizeFromEdges = true and ImGuiBackendFlags_HasMouseCursors is set in io.BackendFlags by back-end)
// Extend outside and inside windows. Affect FindHoveredWindow().
// Reduce visual noise by only highlighting the border after a certain time.
// Lock scrolled window (so it doesn't pick child windows that are scrolling through) for a certaint time, unless mouse moved.
//-------------------------------------------------------------------------
// [SECTION] FORWARD DECLARATIONS
//-------------------------------------------------------------------------
// Settings
// Platform Dependents default implementation for IO functions
// Navigation
// Error Checking
// Misc
//-----------------------------------------------------------------------------
// [SECTION] CONTEXT AND MEMORY ALLOCATORS
//-----------------------------------------------------------------------------
// Current context pointer. Implicitly used by all Dear ImGui functions. Always assumed to be != NULL.
// ImGui::CreateContext() will automatically set this pointer if it is NULL. Change to a different context by calling ImGui::SetCurrentContext().
// 1) Important: globals are not shared across DLL boundaries! If you use DLLs or any form of hot-reloading: you will need to call
//    SetCurrentContext() (with the pointer you got from CreateContext) from each unique static/DLL boundary, and after each hot-reloading.
//    In your debugger, add GImGui to your watch window and notice how its value changes depending on which location you are currently stepping into.
// 2) Important: Dear ImGui functions are not thread-safe because of this pointer.
//    If you want thread-safety to allow N threads to access N different contexts, you can:
//    - Change this variable to use thread local storage so each thread can refer to a different context, in imconfig.h:
//          struct ImGuiContext;
//          extern thread_local ImGuiContext* MyImGuiTLS;
//          #define GImGui MyImGuiTLS
//      And then define MyImGuiTLS in one of your cpp file. Note that thread_local is a C++11 keyword, earlier C++ uses compiler-specific keyword.
//    - Future development aim to make this context pointer explicit to all calls. Also read https://github.com/ocornut/imgui/issues/586
//    - If you need a finite number of contexts, you may compile and use multiple instances of the ImGui code from different namespace.
// Memory Allocator functions. Use SetAllocatorFunctions() to change them.
// If you use DLL hotreloading you might need to call SetAllocatorFunctions() after reloading code from this file.
// Otherwise, you probably don't want to modify them mid-program, and if you use global/static e.g. ImVector<> instances you may need to keep them accessible during program destruction.
//-----------------------------------------------------------------------------
// [SECTION] MAIN USER FACING STRUCTURES (ImGuiStyle, ImGuiIO)
//-----------------------------------------------------------------------------
// Global alpha applies to everything in ImGui
// Padding within a window
// Radius of window corners rounding. Set to 0.0f to have rectangular windows
// Thickness of border around windows. Generally set to 0.0f or 1.0f. Other values not well tested.
// Minimum window size
// Alignment for title bar text
// Position of the collapsing/docking button in the title bar (left/right). Defaults to ImGuiDir_Left.
// Radius of child window corners rounding. Set to 0.0f to have rectangular child windows
// Thickness of border around child windows. Generally set to 0.0f or 1.0f. Other values not well tested.
// Radius of popup window corners rounding. Set to 0.0f to have rectangular child windows
// Thickness of border around popup or tooltip windows. Generally set to 0.0f or 1.0f. Other values not well tested.
// Padding within a framed rectangle (used by most widgets)
// Radius of frame corners rounding. Set to 0.0f to have rectangular frames (used by most widgets).
// Thickness of border around frames. Generally set to 0.0f or 1.0f. Other values not well tested.
// Horizontal and vertical spacing between widgets/lines
// Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label)
// Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
// Horizontal spacing when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).
// Minimum horizontal spacing between two columns. Preferably > (FramePadding.x + 1).
// Width of the vertical scrollbar, Height of the horizontal scrollbar
// Radius of grab corners rounding for scrollbar
// Minimum width/height of a grab box for slider/scrollbar
// Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
// Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.
// Thickness of border around tabs.
// Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.
// Alignment of button text when button is larger than text.
// Alignment of selectable text when button is larger than text.
// Window position are clamped to be visible within the display area by at least this amount. Only applies to regular windows.
// If you cannot see the edge of your screen (e.g. on a TV) increase the safe area padding. Covers popups/tooltips as well regular windows.
// Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). May be removed later.
// Enable anti-aliasing on lines/borders. Disable if you are really short on CPU/GPU.
// Enable anti-aliasing on filled shapes (rounded rectangles, circles, etc.)
// Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.
// Default theme
// To scale your entire UI (e.g. if you want your app to use High DPI or generally be DPI aware) you may use this helper function. Scaling the fonts is done separately and is up to you.
// Important: This operation is lossy because we round all sizes to integer. If you need to change your scale multiples, call this over a freshly initialized ImGuiStyle structure rather than scaling multiple times.
// Most fields are initialized with zero
// Our pre-C++11 IM_STATIC_ASSERT() macros triggers warning on modern compilers so we don't use it here.
// Settings
// Miscellaneous options
// Set Mac OS X style defaults based on __APPLE__ compile time flag
// Platform Functions
// Platform dependent default implementations
// Input (NB: we already have memset zero the entire structure!)
// Pass in translated ASCII characters for text input.
// - with glfw you can get those from the callback set in glfwSetCharCallback()
// - on Windows you can get those using ToAscii+keyboard state, or via the WM_CHAR message
//-----------------------------------------------------------------------------
// [SECTION] MISC HELPERS/UTILITIES (Geometry functions)
//-----------------------------------------------------------------------------
// Use ImBezierClosestPointCasteljau()
// Closely mimics PathBezierToCasteljau() in imgui_draw.cpp
// tess_tol is generally the same value you would find in ImGui::GetStyle().CurveTessellationTol
// Because those ImXXX functions are lower-level than ImGui:: we cannot access this value automatically.
//-----------------------------------------------------------------------------
// [SECTION] MISC HELPERS/UTILITIES (String, Format, Hash functions)
//-----------------------------------------------------------------------------
// Consider using _stricmp/_strnicmp under Windows or strcasecmp/strncasecmp. We don't actually use either ImStricmp/ImStrnicmp in the codebase any more.
//return (int)wcslen((const wchar_t*)str);  // FIXME-OPT: Could use this when wchar_t are 16-bit
// Find end-of-line. Return pointer will point to either first \n, either str_end.
// find beginning-of-line
// Trim str by offsetting contents when there's leading data + writing a \0 at the trailing position. We use this in situation where the cost is negligible.
// Leading blanks
// Find end of string
// Trailing blanks
// Copy memory if we had leading blanks
// Zero terminate
// A) MSVC version appears to return -1 on overflow, whereas glibc appears to return total count (which may be >= buf_size).
// Ideally we would test for only one of those limits at runtime depending on the behavior the vsnprintf(), but trying to deduct it at compile time sounds like a pandora can of worm.
// B) When buf==NULL vsnprintf() will return the output size.
// We support stb_sprintf which is much faster (see: https://github.com/nothings/stb/blob/master/stb_sprintf.h)
// You may set IMGUI_USE_STB_SPRINTF to use our default wrapper, or set IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS
// and setup the wrapper yourself. (FIXME-OPT: Some of our high-level operations such as ImGuiTextBuffer::appendfv() are
// designed using two-passes worst case, which probably could be improved using the stbsp_vsprintfcb() function.)
//#define IMGUI_USE_STB_SPRINTF
// #ifdef IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS
// CRC32 needs a 1KB lookup table (not cache friendly)
// Although the code to generate the table is simple and shorter than the table itself, using a const table allows us to easily:
// - avoid an unnecessary branch/memory tap, - keep the ImHashXXX functions usable by static constructors, - make it thread-safe.
// Known size hash
// It is ok to call ImHashData on a string with known length but the ### operator won't be supported.
// FIXME-OPT: Replace with e.g. FNV1a hash? CRC32 pretty much randomly access 1KB. Need to do proper measurements.
// Zero-terminated string hash, with support for ### to reset back to seed value
// We support a syntax of "label###id" where only "###id" is included in the hash, and only "label" gets displayed.
// Because this syntax is rarely used we are optimizing for the common case.
// - If we reach ### in the string we discard the hash so far and reset to the seed.
// - We don't do 'current += 2; continue;' after handling ### to keep the code smaller/faster (measured ~10% diff in Debug build)
// FIXME-OPT: Replace with e.g. FNV1a hash? CRC32 pretty much randomly access 1KB. Need to do proper measurements.
//-----------------------------------------------------------------------------
// [SECTION] MISC HELPERS/UTILITIES (File functions)
//-----------------------------------------------------------------------------
// Default file functions
// We need a fopen() wrapper because MSVC/Windows fopen doesn't handle UTF-8 filenames.
// We should in theory be using fseeko()/ftello() with off_t and _fseeki64()/_ftelli64() with __int64, waiting for the PR that does that in a very portable pre-C++11 zero-warnings way.
// #ifndef IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS
// Helper: Load file content into memory
// Memory allocated with IM_ALLOC(), must be freed by user using IM_FREE() == ImGui::MemFree()
//-----------------------------------------------------------------------------
// [SECTION] MISC HELPERS/UTILITIES (ImText* functions)
//-----------------------------------------------------------------------------
// Convert UTF-8 to 32-bit character, process single character input.
// Based on stb_from_utf8() from github.com/nothings/stb/
// We handle UTF-8 decoding error by skipping forward.
// will be invalid but not end of string
// will be invalid but not end of string
// str[1] < 0x80 is checked below
// will be invalid but not end of string
// str[1] < 0x80 is checked below
// utf-8 encodings of values used in surrogate pairs are invalid
// FIXME: Losing characters that don't fit in 2 bytes
// Based on stb_to_utf8() from github.com/nothings/stb/
//else if (c < 0x10000)
// Not optimal but we very rarely use this function.
//-----------------------------------------------------------------------------
// [SECTION] MISC HELPERS/UTILTIES (Color functions)
// Note: The Convert functions are early design which are not consistent with other API.
//-----------------------------------------------------------------------------
// Convert rgb floats ([0-1],[0-1],[0-1]) to hsv floats ([0-1],[0-1],[0-1]), from Foley & van Dam p592
// Optimized http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv
// Convert hsv floats ([0-1],[0-1],[0-1]) to rgb floats ([0-1],[0-1],[0-1]), from Foley & van Dam p593
// also http://en.wikipedia.org/wiki/HSL_and_HSV
// gray
//-----------------------------------------------------------------------------
// [SECTION] ImGuiStorage
// Helper: Key->value storage
//-----------------------------------------------------------------------------
// std::lower_bound but without the bullshit
// For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once.
// We can't just do a subtraction because qsort uses signed integers and subtracting our ID doesn't play well with that.
// References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.
// FIXME-OPT: Need a way to reuse the result of lower_bound when doing GetInt()/SetInt() - not too bad because it only happens on explicit interaction (maximum one a frame)
//-----------------------------------------------------------------------------
// [SECTION] ImGuiTextFilter
//-----------------------------------------------------------------------------
// Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]"
// Subtract
// Grep
// Implicit * grep
//-----------------------------------------------------------------------------
// [SECTION] ImGuiTextBuffer
//-----------------------------------------------------------------------------
// On some platform vsnprintf() takes va_list by reference and modifies it.
// va_copy is the 'correct' way to copy a va_list but Visual Studio prior to 2013 doesn't have it.
// Add zero-terminator the first time
// Helper: Text buffer for logging/accumulating text
// FIXME-OPT: could do a first pass write attempt, likely successful on first pass.
// Add zero-terminator the first time
//-----------------------------------------------------------------------------
// [SECTION] ImGuiListClipper
// This is currently not as flexible/powerful as it should be and really confusing/spaghetti, mostly because we changed
// the API mid-way through development and support two ways to using the clipper, needs some rework (see TODO)
//-----------------------------------------------------------------------------
// Helper to calculate coarse clipping of large list of evenly sized items.
// NB: Prefer using the ImGuiListClipper higher-level helper if you can! Read comments and instructions there on how those use this sort of pattern.
// NB: 'items_count' is only used to clamp the result, if you don't know your count you can use INT_MAX
// If logging is active, do not perform any clipping
// We create the union of the ClipRect and the NavScoringRect which at worst should be 1 page away from ClipRect
// When performing a navigation request, ensure we have one item extra in the direction we are moving to
// Set cursor position and a few other things so that SetScrollHereY() and Columns() can work when seeking cursor.
// FIXME: It is problematic that we have to do that here, because custom/equivalent end-user code would stumble on the same issue.
// The clipper should probably have a 4th step to display the last item in a regular manner.
// Setting those fields so that SetScrollHereY() can properly function after the end of our clipper usage.
// If we end up needing more accurate data (to e.g. use SameLine) we may as well make the clipper have a fourth step to let user process and display the last item in their list.
// Setting this so that cell Y position are set properly
// Use case A: Begin() called from constructor with items_height<0, then called again from Sync() in StepNo 1
// Use case B: Begin() called from constructor with items_height>0
// FIXME-LEGACY: Ideally we should remove the Begin/End functions but they are part of the legacy API we still support. This is why some of the code in Step() calling Begin() and reassign some fields, spaghetti style.
// calculate how many to clip/display
// advance cursor
// In theory here we should assert that ImGui::GetCursorPosY() == StartPosY + DisplayEnd * ItemsHeight, but it feels saner to just seek at the end and not assert/crash the user.
// advance cursor
// Step 0: the clipper let you process the first element, regardless of it being visible or not, so we can measure the element height.
// Step 1: the clipper infer height from first element, calculate the actual range of elements to display, and position the cursor before the first element.
// If this triggers, it means Item 0 hasn't moved the cursor vertically
// Step 2: dummy step only required if an explicit items_height was passed to constructor or Begin() and user still call Step(). Does nothing and switch to Step 3.
// Step 3: the clipper validate that we have reached the expected Y position (corresponding to element DisplayEnd), advance the cursor to the end of the list and then returns 'false' to end the loop.
//-----------------------------------------------------------------------------
// [SECTION] RENDER HELPERS
// Some of those (internal) functions are currently quite a legacy mess - their signature and behavior will change.
// Also see imgui_draw.cpp for some more which have been reworked to not rely on ImGui:: state.
//-----------------------------------------------------------------------------
// We don't need to clamp 0..255 because Style.Alpha is in 0..1 range.
// Internal ImGui functions to render text
// RenderText***() functions calls ImDrawList::AddText() calls ImBitmapFont::RenderText()
// Hide anything after a '##' string
// FIXME-OPT
// FIXME-OPT
// Default clip_rect uses (pos_min,pos_max)
// Handle clipping on CPU immediately (vs typically let the GPU clip the triangles that are overlapping the clipping rectangle edges)
// Perform CPU side clipping for single clipped element to avoid using scissor state
// If we had no explicit clipping rectangle then pos==clip_min
// Align whole block. We should defer that to the better rendering function when we'll have support for individual line alignment.
// Render
// Hide anything after a '##' string
// Another overly complex function until we reorganize everything into a nice all-in-one helper.
// This is made more complex because we have dissociated the layout rectangle (pos_min..pos_max) which define _where_ the ellipsis is, from actual clipping of text and limit of the ellipsis display.
// This is because in the context of tabs we selectively hide part of the text when the Close Button appears, but we don't want the ellipsis to move.
//draw_list->AddLine(ImVec2(pos_max.x, pos_min.y - 4), ImVec2(pos_max.x, pos_max.y + 4), IM_COL32(0, 0, 255, 255));
//draw_list->AddLine(ImVec2(ellipsis_max_x, pos_min.y-2), ImVec2(ellipsis_max_x, pos_max.y+2), IM_COL32(0, 255, 0, 255));
//draw_list->AddLine(ImVec2(clip_max_x, pos_min.y), ImVec2(clip_max_x, pos_max.y), IM_COL32(255, 0, 0, 255));
// FIXME: We could technically remove (last_glyph->AdvanceX - last_glyph->X1) from text_size.x here and save a few pixels.
// Hello wo...
// |       |   |
// min   max   ellipsis_max
//          <-> this is generally some padding value
// Width of the glyph with no padding on either side
// Full width of entire ellipsis
// Full ellipsis size without free spacing after it.
// We can now claim the space between pos_max.x and ellipsis_max.x
// Always display at least 1 character if there's no room for character + ellipsis
// Trim trailing space before ellipsis (FIXME: Supporting non-ascii blanks would be nice, for this we need a function to backtrack in UTF-8 text)
// Ascii blanks are always 1 byte
// Render text, render ellipsis
// Render a rectangle shaped with optional rounding and borders
// Render an arrow aimed to be aligned with text (p_min is a position in the same space text would be positioned). To e.g. denote expanded/collapsed state
//-----------------------------------------------------------------------------
// [SECTION] MAIN CODE (most of the code! lots of stuff, needs tidying up!)
//-----------------------------------------------------------------------------
// ImGuiWindow is mostly a dumb struct. It merely has a constructor and a few helper methods
// Clear so the InnerRect.GetSize() code in Begin() doesn't lead to overflow even if the result isn't used.
// This is only used in rare/specific situations to manufacture an ID out of nowhere.
// Free up/compact internal window buffers, we can use this when a window becomes unused.
// This is currently unused by the library, but you may call this yourself for easy GC.
// Not freed:
// - ImGuiWindow, ImGuiWindowSettings, Name
// - StateStorage, ColumnsStorage (may hold useful data)
// This should have no noticeable visual effect. When the window reappear however, expect new allocation/buffer growth/copy cost.
// We stored capacity of the ImDrawList buffer to reduce growth-caused allocation/copy when awakening.
// The other buffers tends to amortize much faster.
// FIXME-NAV: Refactor those functions into a single, more explicit one.
// Clear declaration of inputs claimed by the widget
// (Please note that this is WIP and not all keys/inputs are thoroughly declared by all widgets yet)
// FIXME-NAV: The existence of SetNavID/SetNavIDWithRectRel/SetFocusID is incredibly messy and confusing and needs some explanation or refactoring.
// Assume that SetFocusID() is called in the context where its window->DC.NavLayerCurrent and window->DC.NavFocusScopeIdCurrent are valid.
// Note that window may be != g.CurrentWindow (e.g. SetFocusID call in InputTextEx for multi-line text)
// This marking is solely to be able to provide info for IsItemDeactivatedAfterEdit().
// ActiveId might have been released by the time we call this (as in the typical press/release button behavior) but still need need to fill the data.
// Avoid unused variable warnings when asserts are compiled out.
//IM_ASSERT(g.CurrentWindow->DC.LastItemId == id);
// An active popup disable hovering on other windows (apart from its own children)
// FIXME-OPT: This could be cached/stored within the window.
// For the purpose of those flags we differentiate "standard popup" from "modal popup"
// NB: The order of those two tests is important because Modal windows are also Popups.
// Advance cursor given item size for layout.
// We increase the height in this function to accommodate for baseline offset.
// In theory we should be offsetting the starting position (window->DC.CursorPos), that will be the topic of a larger refactor,
// but since ItemSize() is not yet an API that moves the cursor (to handle e.g. wrapping) enlarging the height has the same effect.
// Always align ourselves on pixel boundaries
//if (g.IO.KeyAlt) window->DrawList->AddRect(window->DC.CursorPos, window->DC.CursorPos + ImVec2(size.x, line_height), IM_COL32(255,0,0,200)); // [DEBUG]
// Next line
// Next line
//if (g.IO.KeyAlt) window->DrawList->AddCircle(window->DC.CursorMaxPos, 3.0f, IM_COL32(255,0,0,255), 4); // [DEBUG]
// Horizontal layout mode
// Declare item bounding box for clipping and interaction.
// Note that the size can be different than the one provided to ItemSize(). Typically, widgets that spread over available surface
// declare their minimum size requirement to ItemSize() and then use a larger region for drawing/interaction, which is passed to ItemAdd().
// Navigation processing runs prior to clipping early-out
//  (a) So that NavInitRequest can be honored, for newly opened windows to select a default widget
//  (b) So that we can scroll up/down past clipped items. This adds a small O(N) cost to regular navigation requests
//      unfortunately, but it is still limited to one window. It may not scale very well for windows with ten of
//      thousands of item, but at least NavMoveRequest is only set on user interaction, aka maximum once a frame.
//      We could early out with "if (is_clipped && !g.NavInitRequest) return false;" but when we wouldn't be able
//      to reach unclipped widgets. This would work if user had explicit scrolling control (e.g. mapped on a stick).
// We intentionally don't check if g.NavWindow != NULL because g.NavAnyRequest should only be set when it is non null.
// If we crash on a NULL g.NavWindow we need to fix the bug elsewhere.
// [DEBUG] Item Picker tool, when enabling the "extended" version we perform the check in ItemAdd()
// Clipping test
//if (g.IO.KeyAlt) window->DrawList->AddRect(bb.Min, bb.Max, IM_COL32(255,255,0,120)); // [DEBUG]
// We need to calculate this now to take account of the current clipping rectangle (as items like Selectable may change them)
// This is roughly matching the behavior of internal-facing ItemHoverable()
// - we allow hovering to be true when ActiveId==window->MoveID, so that clicking on non-interactive items such as a Text() item still returns true with IsItemHovered()
// - this should work even for non-interactive items that have no ID, so we cannot use LastItemId
// Test for bounding box overlap, as updated as ItemAdd()
// Flags not supported by this function
// Test if we are hovering the right window (our window could be behind another window)
// [2017/10/16] Reverted commit 344d48be3 and testing RootWindow instead. I believe it is correct to NOT test for RootWindow but this leaves us unable to use IsItemHovered() after EndChild() itself.
// Until a solution is found I believe reverting to the test from 2017/09/27 is safe since this was the test that has been running for a long while.
//if (g.HoveredWindow != window)
//    return false;
// Test if another item is active (e.g. being dragged)
// Test if interactions on this window are blocked by an active popup or modal.
// The ImGuiHoveredFlags_AllowWhenBlockedByPopup flag will be tested here.
// Test if the item is disabled
// Special handling for the dummy item after Begin() which represent the title bar or tab.
// When the window is collapsed (SkipItems==true) that last item will never be overwritten so we need to detect the case.
// Internal facing ItemHoverable() used when submitting widgets. Differs slightly from IsItemHovered().
// [DEBUG] Item Picker tool!
// We perform the check here because SetHoveredID() is not frequently called (1~ time a frame), making
// the cost of this tool near-zero. We can get slightly better call-stack and support picking non-hovered
// items if we perform the test in ItemAdd(), but that would incur a small runtime cost.
// #define IMGUI_DEBUG_TOOL_ITEM_PICKER_EX in imconfig.h if you want this check to also be performed in ItemAdd().
// Process TAB/Shift+TAB. Be mindful that this function may _clear_ the ActiveID when tabbing out.
// Increment counters
// Process TAB/Shift-TAB to tab *OUT* of the currently focused item.
// (Note that we can always TAB out of a widget that doesn't allow tabbing in)
// Modulo on index will be applied at the end of frame once we've got the total counter of items.
// Handle focus requests
// If another item is about to be focused, we clear our own active id
// wrap_pos_x is provided is window local space
// IM_ALLOC() == ImGui::MemAlloc()
// IM_FREE() == ImGui::MemFree()
// Internal state access - if you want to share Dear ImGui state between modules (e.g. DLL) or allocate it yourself
// Note that we still point to some static data and members (such as GFontAtlas), so the state instance you end up using will point to the static data within its module
// For custom thread-based hackery you may want to have control over this.
// Helper function to verify ABI compatibility between caller code and compiled version of Dear ImGui.
// Verify that the type sizes are matching between the calling file's compilation unit and imgui.cpp's compilation unit
// If the user has inconsistent compilation settings, imgui configuration #define, packing pragma, etc. your user code
// may see different structures than what imgui.cpp sees, which is problematic.
// We usually require settings to be in imconfig.h to make sure that they are accessible to all compilation units involved with Dear ImGui.
// Same value as passed to the old io.RenderDrawListsFn function. Valid after Render() and until the next call to NewFrame()
// Set ActiveId even if the _NoMove flag is set. Without it, dragging away from a window with _NoMove would activate hover on other windows.
// We _also_ call this when clicking in a window empty space when io.ConfigWindowsMoveFromTitleBarOnly is set, but clear g.MovingWindow afterward.
// This is because we want ActiveId to be set even when the window is not permitted to move.
// Handle mouse moving window
// Note: moving window with the navigation keys (Square + d-pad / CTRL+TAB + Arrows) are processed in NavUpdateWindowing()
// We actually want to move the root window. g.MovingWindow == window we clicked on (could be a child window).
// We track it to preserve Focus and so that generally ActiveIdWindow == MovingWindow and ActiveId == MovingWindow->MoveId for consistency.
// When clicking/dragging from a window that has the _NoMove flag, we still set the ActiveId in order to prevent hovering others.
// Initiate moving window, handle left-click and right-click focus
// Initiate moving window
// Unless we just made a window/popup appear
// Click to focus window and start moving (after we're done with all our widgets)
// Clicking on void disable focus
// With right mouse button we close popups without changing focus based on where the mouse is aimed
// Instead, focus will be restored to the window under the bottom-most closed popup.
// (The left mouse button path calls FocusWindow on the hovered window, which will lead NewFrame->ClosePopupsOverWindow to trigger)
// Find the top-most window between HoveredWindow and the top-most Modal Window.
// This is where we can trim the popup stack.
// Round mouse position to avoid spreading non-rounded position (e.g. UpdateManualResize doesn't support them well)
// If mouse just appeared or disappeared (usually denoted by -FLT_MAX components) we cancel out movement in MouseDelta
// so the third click isn't turned into a double-click
// Maintain the maximum distance we reaching from the initial click position, which is used with dragging threshold
// Clicking any mouse button reactivate mouse hovering which may have been deactivated by gamepad/keyboard navigation
// Reset the locked window if we move the mouse or after the timer elapses
// Zoom / Scale window
// FIXME-OBSOLETE: This is an old feature, it still works but pretty much nobody is using it and may be best redesigned.
// Mouse wheel scrolling
// If a child window has the ImGuiWindowFlags_NoScrollWithMouse flag, we give a chance to scroll its parent
// Vertical Mouse Wheel scrolling
// Horizontal Mouse Wheel scrolling, or Vertical Mouse Wheel w/ Shift held
// The reason this is exposed in imgui_internal.h is: on touch-based system that don't have hovering, we want to dispatch inputs to the right target (imgui vs imgui+app)
// Find the window hovered by mouse:
// - Child windows can extend beyond the limit of their parent so we need to derive HoveredRootWindow from HoveredWindow.
// - When moving a window we can skip the search, which also conveniently bypasses the fact that window->WindowRectClipped is lagging as this point of the frame.
// - We also support the moved window toggling the NoInputs flag after moving has started in order to be able to detect windows below it, which is useful for e.g. docking mechanisms.
// Modal windows prevents cursor from hovering behind them.
// Disabled mouse?
// We track click ownership. When clicked outside of a window the click is owned by the application and won't report hovering nor request capture even while dragging over our windows afterward.
// If mouse was first clicked outside of ImGui bounds we also cancel out hovering.
// FIXME: For patterns of drag and drop across OS windows, we may need to rework/remove this test (first committed 311c0ca9 on 2015/02)
// Update io.WantCaptureMouse for the user application (true = dispatch mouse info to imgui, false = dispatch mouse info to Dear ImGui + app)
// Update io.WantCaptureKeyboard for the user application (true = dispatch keyboard info to imgui, false = dispatch keyboard info to Dear ImGui + app)
// Update io.WantTextInput flag, this is to allow systems without a keyboard (e.g. mobile, hand-held) to show a software keyboard if possible
// Check user data
// (We pass an error message in the assert expression to make it visible to programmers who are not using a debugger, as most assert handlers display their argument)
// Perform simple check: required key mapping (we intentionally do NOT check all keys to not pressure user into setting up everything, but Space is required and was only recently added in 1.60 WIP)
// Perform simple check: the beta io.ConfigWindowsResizeFromEdges option requires back-end to honor mouse cursor changes and set the ImGuiBackendFlags_HasMouseCursors flag accordingly.
// Check and assert for various common IO and Configuration mistakes
// Load settings on first frame (if not explicitly loaded manually before)
// Save settings (with a delay after the last modification, so we don't spam disk too much)
// Let user know they can call SaveIniSettingsToMemory(). user will need to clear io.WantSaveIniSettings themselves.
// Setup current font and draw list shared data
// Mark rendering data as invalid to prevent user who may have a handle on it to use it.
// Drag and drop keep the source ID alive so even if the source disappear our state is consistent
// Clear reference to active widget if the widget isn't alive anymore
// Drag and drop
// Update keyboard input state
// Update gamepad/keyboard directional navigation
// Update mouse input state
// Calculate frame-rate for the user, as a purely luxurious feature
// Find hovered window
// (needs to be before UpdateMouseMovingWindowNewFrame so we fill g.HoveredWindowUnderMovingWindow on the mouse release frame)
// Handle user moving window with mouse (at the beginning of the frame to avoid input lag or sheering)
// Background darkening/whitening
// OS Input Method Editor showing on top-left of our window by default
// Mouse wheel scrolling, scale
// Pressing TAB activate widget focus
// Note that SetKeyboardFocusHere() sets the Next fields mid-frame. To be consistent we also
// manipulate the Next fields even, even though they will be turned into Curr fields by the code below.
// Turn queued focus request into current one
// Mark all windows as not visible and compact unused memory.
// Garbage collect (this is totally functional but we may need decide if the side-effects are desirable)
// Closing the focused window restore focus to the first active root window in descending z-order
// No window should be open at the beginning of the frame.
// But in order to allow the user to call NewFrame() multiple times without calling Render(), we are doing an explicit clear.
// [DEBUG] Item picker tool - start with DebugStartItemPicker() - useful to visually select an item and break into its call-stack.
// Create implicit/fallback window - which we will only render it if the user has added something to it.
// We don't use "Debug" to avoid colliding with user trying to create a "Debug" window with custom flags.
// This fallback is particularly important as it avoid ImGui:: calls from crashing.
// [DEBUG] Item picker tool - start with DebugStartItemPicker() - useful to visually select an item and break into its call-stack.
// Add .ini handle for ImGuiWindow type
// Add .ini handle for ImGuiTable type
// #ifdef IMGUI_HAS_TABLE
// #ifdef IMGUI_HAS_DOCK
// This function is merely here to free heap allocations.
// The fonts atlas can be used prior to calling NewFrame(), so we clear it even if g.Initialized is FALSE (which would happen if we never called NewFrame)
// Cleanup of other data are conditional on actually having initialized Dear ImGui.
// Save settings (unless we haven't attempted to load them: CreateContext/DestroyContext without a call to NewFrame shouldn't save an empty file)
// Clear everything else
// FIXME: Add a more explicit sort order in the window structure.
// Remove trailing command if unused
// Draw list sanity check. Detect mismatch between PrimReserve() calls and incrementing _VtxCurrentIdx, _VtxWritePtr etc.
// May trigger for you if you are using PrimXXX functions incorrectly.
// Check that draw_list doesn't use more vertices than indexable (default ImDrawIdx = unsigned short = 2 bytes = 64K vertices per ImDrawList = per window)
// If this assert triggers because you are drawing lots of stuff manually:
// - First, make sure you are coarse clipping yourself and not trying to draw many things outside visible bounds.
//   Be mindful that the ImDrawList API doesn't filter vertices. Use the Metrics window to inspect draw list contents.
// - If you want large meshes with more than 64K vertices, you can either:
//   (A) Handle the ImDrawCmd::VtxOffset value in your renderer back-end, and set 'io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset'.
//       Most example back-ends already support this from 1.71. Pre-1.71 back-ends won't.
//       Some graphics API such as GL ES 1/2 don't have a way to offset the starting vertex so it is not supported for them.
//   (B) Or handle 32-bit indices in your renderer back-end, and uncomment '#define ImDrawIdx unsigned int' line in imconfig.h.
//       Most example back-ends already support this. For example, the OpenGL example code detect index size at compile-time:
//         glDrawElements(GL_TRIANGLES, (GLsizei)pcmd->ElemCount, sizeof(ImDrawIdx) == 2 ? GL_UNSIGNED_SHORT : GL_UNSIGNED_INT, idx_buffer_offset);
//       Your own engine or render API may use different parameters or function calls to specify index sizes.
//       2 and 4 bytes indices are generally supported by most graphics API.
// - If for some reason neither of those solutions works for you, a workaround is to call BeginChild()/EndChild() before reaching
//   the 64K limit to split your draw commands in multiple draw lists.
// clipped children may have been marked not active
// Layer is locked for the root window, however child windows may use a different viewport (e.g. extruding menu)
// When using this function it is sane to ensure that float are perfectly rounded to integer values, to that e.g. (int)(max.x-min.x) in user's render produce correct result.
// This is normally called by Render(). You may want to call it directly if you want to avoid calling Render() but the gain will be very minimal.
// Don't process EndFrame() multiple times.
// Notify OS when our Input Method Editor cursor has moved (e.g. CJK inputs using Microsoft IME)
// Hide implicit/fallback "Debug" window if it hasn't been used
// Show CTRL+TAB list window
// Drag and Drop: Elapse payload (if delivered, or if source stops being submitted)
// Drag and Drop: Fallback for source tooltip. This is not ideal but better than nothing.
// End frame
// Initiate moving window + handle left-click and right-click focus
// Sort the window list so that all child windows are after their parent
// We cannot do that on FocusWindow() because childs may not exist yet
// if a child is active its parent will add it
// This usually assert if there is a mismatch between the ImGuiWindowFlags_ChildWindow / ParentWindow values and DC.ChildWindows[] in parents, aka we've done something wrong.
// Unlock font atlas
// Clear Input data for next frame
// Gather ImDrawList to render (for each active window)
// NavWindowingTarget is always temporarily displayed as the top-most window
// Draw software mouse cursor if requested
// Setup ImDrawData structure for end-user
// (Legacy) Call the Render callback function. The current prefer way is to let the user retrieve GetDrawData() and call the render function themselves.
// Calculate text size. Text can be multi-line. Optionally ignore text after a ## marker.
// CalcTextSize("") should return ImVec2(0.0f, g.FontSize)
// Hide anything after a '##' string
// Round
// Find window given position, search front-to-back
// FIXME: Note that we have an inconsequential lag here: OuterRectClipped is updated in Begin(), so windows moved programatically
// with SetWindowPos() and not SetNextWindowPos() will have that rectangle lagging by a frame at the time FindHoveredWindow() is
// called, aka before the next Begin(). Moving window isn't affected.
// Using the clipped AABB, a child window will typically be clipped by its parent (not always)
// Those seemingly unnecessary extra tests are because the code here is a little different in viewport/docking branches.
// Test if mouse cursor is hovering given rectangle
// NB- Rectangle is clipped by our current clip setting
// NB- Expand the rectangle to be generous on imprecise inputs systems (g.Style.TouchExtraPadding)
// Clip
// Expand for touch input
// Note that dear imgui doesn't know the semantic of each entry of io.KeysDown[]!
// Use your own indices/enums according to how your back-end/engine stored them into io.KeysDown[]!
// t0 = previous time (e.g.: g.Time - g.IO.DeltaTime)
// t1 = current time (e.g.: g.Time)
// An event is triggered at:
//  t = 0.0f     t = repeat_delay,    t = repeat_delay + repeat_rate*N
// FIXME: 2019/05/03: Our old repeat code was wrong here and led to doubling the repeat rate, which made it an ok rate for repeat on mouse hold.
// [Internal] This doesn't test if the button is pressed
// NB: prefer to call right after BeginPopup(). At the time Selectable/MenuItem is activated, the popup is already closed!
// We typically use ImVec2(-FLT_MAX,-FLT_MAX) to denote an invalid mouse position.
// The assert is only to silence a false-positive in XCode Static Analysis.
// Because GImGui is not dereferenced in every code path, the static analyzer assume that it may be NULL (which it doesn't for other functions).
// Return the delta from the initial clicking position while the mouse button is clicked or was just released.
// This is locked and return 0.0f until the mouse moves past a distance threshold at least once.
// NB: This is only valid if IsMousePosValid(). Back-ends in theory should always keep mouse position valid when dragging even outside the client window.
// NB: We don't need to reset g.IO.MouseDragMaxDistanceSqr
// Allow last item to be overlapped by a subsequent item. Both may be activated during the same frame before the later one takes priority.
// Inherit the NoMove flag
// Size
// Arbitrary minimum child size (0.0f causing too much issues)
// Build up name. If you need to append to a same child from multiple location in the ID stack, use BeginChild(ImGuiID id) with a stable value.
// Set the cursor to handle case where the user called SetNextWindowPos()+BeginChild() manually.
// While this is not really documented/defined, it seems that the expected thing to do.
// Process navigation-in immediately so NavInit can run on first frame
// Steal ActiveId with a dummy id so that key-press won't activate child item
// Mismatched BeginChild()/EndChild() calls
// Arbitrary minimum zero-ish child size of 4.0f causes less trouble than a 0.0f
// When browsing a window that has no activable items (scroll only) we keep a highlight on the child
// Not navigable into
// Helper to create a child window / scrolling region that looks like a normal widget frame.
//IMGUI_DEBUG_LOG("CreateNewWindow '%s', flags = 0x%08X\n", name, flags);
// Create window the first time
// Default/arbitrary window position. Use SetNextWindowPos() with the appropriate condition flag to change the initial position of a window.
// User can disable loading and saving of settings. Tooltip and child windows also don't store settings.
// Retrieve settings from .ini file
// So first call to CalcContentSize() doesn't return crazy values
// Quite slow but rare and only once
// Using -1,-1 on either X/Y axis to preserve the current size.
// Minimum size
// Reduce artifacts with very small windows
// Tooltip always resize
// Maximum window size is determined by the viewport size or monitor size
// Popups and menus bypass style.WindowMinSize by default, but we give then a non-zero minimum size to facilitate understanding problematic cases (e.g. empty popups)
// When the window cannot fit all contents (either because of constraints, either because screen is too small),
// we are growing the size on the other axis to compensate for expected scrollbar. FIXME: Might turn bigger than ViewportSize-WindowPadding.
// Expected window upper-left
// Expected window lower-right
// Lower-right
// Lower-left
// Upper-left (Unused)
// Upper-right (Unused)
// Top
// Right
// Bottom
// Left
// 0..3: corners (Lower-right, Lower-left, Unused, Unused)
// 4..7: borders (Top, Right, Bottom, Left)
// Handle resize for: Resize Grips, Borders, Gamepad
// Return true when using auto-fit (double click on resize grip)
// Early out to avoid running this code for e.g. an hidden implicit/fallback Debug window.
// Resize grips and borders are on layer 1
// Manual resize grips
// Using the FlattenChilds button flag we make the resize button accessible even if we are hovering over a child window
//GetForegroundDrawList(window)->AddRect(resize_rect.Min, resize_rect.Max, IM_COL32(255, 255, 0, 255));
// Manual auto-fit when double-clicking
// Resize from any of the four corners
// We don't use an incremental MouseDelta but rather compute an absolute target size based on mouse position
// Corner of the window corresponding to our corner grip
//GetForegroundDrawLists(window)->AddRect(border_rect.Min, border_rect.Max, IM_COL32(255, 255, 0, 255));
// Top
// Right
// Bottom
// Left
// Navigation resize (keyboard/gamepad)
// FIXME-NAV: Should store and accumulate into a separate size buffer to handle sizing constraints properly, right now a constraint will make us stuck.
// Apply back modified position/size to window
// Resize nav layer
// Top
// Right
// Bottom
// Left
// Thicker than usual
// Ensure that ScrollBar doesn't read last frame's SkipItems
// Draw window + handle manual resize
// As we highlight the title bar when want_focus is set, multiple reappearing windows will have have their title bar highlighted on their reappearing frame.
// Title bar only
// Window background
// Title bar
// Menu bar
// Soft clipping, in particular child window don't have minimum size covering the menu bar so this is useful for them.
// Scrollbars
// Render resize grips (after their input handling so we don't have a frame of latency)
// Borders
// Render title text, collapse button, close button
// Close & Collapse button are on the Menu NavLayer and don't default focus (unless there's nothing else on that layer)
// Layout buttons
// FIXME: Would be nice to generalize the subtleties expressed here into reusable code.
// Collapse button (submitting first so it gets priority when choosing a navigation init fallback)
// Defer actual collapsing to next frame as we are too far in the Begin() function
// Close button
// Title bar text (with: horizontal alignment, avoiding collapse/close button, optional "unsaved document" marker)
// FIXME: Refactor text alignment facilities along with RenderText helpers, this is WAY too much messy code..
// As a nice touch we try to ensure that centered title text doesn't get affected by visibility of Close/Collapse button,
// while uncentered title text will still reach edges correct.
// 0.0f on either edges, 1.0f on center
//if (g.IO.KeyCtrl) window->DrawList->AddRect(layout_r.Min, layout_r.Max, IM_COL32(255, 128, 0, 255)); // [DEBUG]
// Push a new Dear ImGui window to add widgets to.
// - A default window called "Debug" is automatically stacked at the beginning of every frame so you can use widgets without explicitly calling a Begin/End pair.
// - Begin/End can be called multiple times during the frame with the same window name to append content.
// - The window name is used as a unique identifier to preserve window information across frames (and save rudimentary information to the .ini file).
//   You can use the "##" or "###" markers to use the same label with different id, or same id with different label. See documentation at the top of this file.
// - Return false when window is collapsed, so you can early out in your code. You always need to call ImGui::End() even if false is returned.
// - Passing 'bool* p_open' displays a Close button on the upper-right corner of the window, the pointed value will be set to false when the button is pressed.
// Window name required
// Forgot to call ImGui::NewFrame()
// Called ImGui::Render() or ImGui::EndFrame() and haven't called ImGui::NewFrame() again yet
// Find or create
// Any condition flag will do since we are creating a new window here.
// Automatically disable manual moving/resizing when NoInputs is set
// Update the Appearing flag
// Not using !WasActive because the implicit "Debug" window would always toggle off->on
// We recycle popups so treat window as activated if popup id changed
// Update Flags, LastFrameActive, BeginOrderXXX fields
// Parent window is latched only on the first call to Begin() of the frame, so further append-calls can be done from a different window stack
// We allow window memory to be compacted so recreate the base stack when needed.
// Add to stack
// We intentionally set g.CurrentWindow to NULL to prevent usage until when the viewport is set, then will call SetCurrentWindow()
// Process SetNextWindow***() calls
// May be processed on the next frame if this is our first frame and we are measuring size
// FIXME: Look into removing the branch so everything can go through this same code path for consistency.
// When reusing window again multiple times a frame, just append content (don't need to setup again)
// Initialize
// FIXME-WIP: Undocumented behavior of Child+Tooltip for pinned tooltip (#1345)
// Restore buffer capacity when woken from a compacted state, to avoid
// Update stored window name when it changes (which can _only_ happen with the "###" operator, so the ID would stay unchanged).
// The title bar always display the 'name' parameter, so we only update the string storage if it needs to be visible to the end-user elsewhere.
// Window titles visible when using CTRL+TAB
// UPDATE CONTENTS SIZE, UPDATE HIDDEN STATUS
// Update contents size from last frame for auto-fitting (or use explicit size)
// Hide new windows for one frame until they calculate their size
// Hide popup/tooltip window when re-opening while we measure size (because we recycle the windows)
// We reset Size/ContentSize for reappearing popups/tooltips early in this function, so further code won't be tempted to use the old size.
// FIXME-VIEWPORT: In the docking/viewport branch, this is the point where we select the current viewport (which may affect the style)
// LOCK BORDER SIZE AND PADDING FOR THE FRAME (so that altering them doesn't cause inconsistencies)
// Collapse window by double-clicking on title bar
// At this point we don't have a clipping rectangle setup yet, so we can use the title bar area for hit detection and drawing
// We don't use a regular button+id to test for double-click on title bar (mostly due to legacy reason, could be fixed), so verify that we don't have items over the title bar.
// SIZE
// Calculate auto-fit size, handle automatic resize
// Using SetNextWindowSize() overrides ImGuiWindowFlags_AlwaysAutoResize, so it can be used on tooltips/popups, etc.
// Auto-fit may only grow window during the first few frames
// We still process initial auto-fit on collapsed windows to get a window width, but otherwise don't honor ImGuiWindowFlags_AlwaysAutoResize when collapsed.
// Apply minimum/maximum window size constraints and final size
// Decoration size
// POSITION
// Popup latch its initial position, will position itself when it appears next frame
// Position child window
// Position given a pivot (e.g. for centering)
// Clamp position/size so window stays visible within its viewport or monitor
// Ignore zero-sized display explicitly to avoid losing positions if a window manager reports zero-sized window when initializing or minimizing.
// Ignore zero-sized display explicitly to avoid losing positions if a window manager reports zero-sized window when initializing or minimizing.
// Lock window rounding for the frame (so that altering them doesn't cause inconsistencies)
// Apply window focus (new and reactivated windows are moved to front)
// Handle manual resize: Resize Grips, Borders, Gamepad
// Allow resize from lower-left if we have the mouse cursor feedback for it.
// SCROLLBAR VISIBILITY
// Update scrollbar visibility (based on the Size that was effective during last frame or the auto-resized Size).
// When reading the current size we need to read it after size constraints have been applied.
// When we use InnerRect here we are intentionally reading last frame size, same for ScrollbarSizes values before we set them again.
//bool scrollbar_y_from_last_frame = window->ScrollbarY; // FIXME: May want to use that in the ScrollbarX expression? How many pros vs cons?
// UPDATE RECTANGLES (1- THOSE NOT AFFECTED BY SCROLLING)
// Update various regions. Variables they depends on should be set above in this function.
// We set this up after processing the resize grip so that our rectangles doesn't lag by a frame.
// Outer rectangle
// Not affected by window border size. Used by:
// - FindHoveredWindow() (w/ extra padding when border resize is enabled)
// - Begin() initial clipping rect for drawing window background and borders.
// - Begin() clipping whole child
// Inner rectangle
// Not affected by window border size. Used by:
// - InnerClipRect
// - ScrollToBringRectIntoView()
// - NavUpdatePageUpPageDown()
// - Scrollbar()
// Inner clipping rectangle.
// Will extend a little bit outside the normal work region.
// This is to allow e.g. Selectable or CollapsingHeader or some separators to cover that space.
// Force round operator last to ensure that e.g. (int)(max.x-min.x) in user's render code produce correct result.
// Note that if our window is collapsed we will end up with an inverted (~null) clipping rectangle which is the correct behavior.
// Affected by window/frame border size. Used by:
// - Begin() initial clip rect
// Default item width. Make it proportional to window size if window manually resizes
// SCROLLING
// Lock down maximum scrolling
// The value of ScrollMax are ahead from ScrollbarX/ScrollbarY which is intentionally using InnerRect from previous rect in order to accommodate
// for right/bottom aligned items without creating a scrollbar.
// Apply scrolling
// DRAWING
// Setup draw list and outer clipping rectangle
// Draw modal window background (darkens what is behind them, all viewports)
// Draw navigation selection/windowing rectangle background
// Avoid drawing if the window covers all the viewport anyway
// Since 1.71, child window can render their decoration (bg color, border, scrollbars, etc.) within their parent to save a draw call.
// When using overlapping child windows, this will break the assumption that child z-order is mapped to submission order.
// We disable this when the parent window has zero vertices, which is a common pattern leading to laying out multiple overlapping child.
// We also disabled this when we have dimming overlay behind this specific one child.
// FIXME: More code may rely on explicit sorting of overlapping child window and would need to disable this somehow. Please get in contact if you are affected.
// Handle title bar, scrollbar, resize grips and resize borders
// Draw navigation selection/windowing rectangle border
// If a window fits the entire viewport, adjust its highlight inward
// UPDATE RECTANGLES (2- THOSE AFFECTED BY SCROLLING)
// Work rectangle.
// Affected by window padding and border size. Used by:
// - Columns() for right-most edge
// - TreeNode(), CollapsingHeader() for right-most edge
// - BeginTabBar() for right-most edge
// [LEGACY] Content Region
// FIXME-OBSOLETE: window->ContentRegionRect.Max is currently very misleading / partly faulty, but some BeginChild() patterns relies on it.
// Used by:
// - Mouse wheel scrolling + many other things
// Setup drawing context
// (NB: That term "drawing context / DC" lost its meaning a long time ago. Initially was meant to hold transient data only. Nowadays difference between window-> and window->DC-> is dubious.)
// disabled
// Apply focus (we need to call FocusWindow() AFTER setting DC.CursorStartPos so our initial navigation reference rectangle can start around there)
// Title bar
// Pressing CTRL+C while holding on a window copy its content to the clipboard
// This works but 1. doesn't handle multiple Begin/End pairs, 2. recursing into another Begin/End pair - so we need to work that out and add better logging scope.
// Maybe we can support CTRL+C on every element?
/*
// We fill last item data based on Title Bar/Tab, in order for IsItemHovered() and IsItemActive() to be usable after Begin().
// This is useful to allow creating context menus on title bar only, etc.
// Append
// Clear 'accessed' flag last thing (After PushClipRect which will set the flag. We want the flag to stay false when the default "Debug" window is unused)
// Child window can be out of sight and have "negative" clip windows.
// Mark them as collapsed so commands are skipped earlier (we can't manually collapse them because they have no title bar).
// Hide along with parent or if parent is collapsed
// Don't render if style alpha is 0.0 at the time of Begin(). This is arbitrary and inconsistent but has been there for a long while (may remove at some point)
// Update the Hidden flag
// Update the SkipItems flag, used to early out of all items functions (no layout required)
// Error checking: verify that user hasn't called End() too many times!
// Error checking: verify that user doesn't directly call End() on a child window.
// Close anything that is open
// Inner window clip rectangle
// Stop logging
// FIXME: add more options for scope of logging
// Pop from window stack
// We can ignore the top-most window
// We can ignore the top-most window
// Moving window to front of display and set focus (which happens to be back of our sorted list)
// Restore NavId
//IMGUI_DEBUG_LOG("FocusWindow(\"%s\")\n", window ? window->Name : NULL);
// Close popups if any
// Passing NULL allow to disable keyboard focus
// Move the root window to the top of the pile
// Steal focus on active widgets
// FIXME: This statement should be unnecessary. Need further testing before removing it..
// Bring to front
// We may later decide to test for different NoXXXInputs based on the active navigation input (mouse vs nav) but that may feel more confusing to the user.
// Calculate default item width given value passed to PushItemWidth() or SetNextItemWidth().
// The SetNextItemWidth() data is generally cleared/consumed by ItemAdd() or NextItemData.ClearFlags()
// [Internal] Calculate full item size given user provided 'size' parameter and default width/height. Default width is often == CalcItemWidth().
// Those two functions CalcItemWidth vs CalcItemSize are awkwardly named because they are not fully symmetrical.
// Note that only CalcItemWidth() is publicly exposed.
// The 4.0f here may be changed to match CalcItemWidth() and/or BeginChild() (right now we have a mismatch which is harmless but undesirable)
// Font Atlas not created. Did you call io.Fonts->GetTexDataAsRGBA32 / GetTexDataAsAlpha8 ?
// FIXME: Look into renaming this once we have settled the new Focus/Activation/TabStop system.
// FIXME: This may incur a round-trip (if the end user got their data from a float4) but eventually we aim to store the in-flight colors as ImU32
// ImGuiStyleVar_Alpha
// ImGuiStyleVar_WindowPadding
// ImGuiStyleVar_WindowRounding
// ImGuiStyleVar_WindowBorderSize
// ImGuiStyleVar_WindowMinSize
// ImGuiStyleVar_WindowTitleAlign
// ImGuiStyleVar_ChildRounding
// ImGuiStyleVar_ChildBorderSize
// ImGuiStyleVar_PopupRounding
// ImGuiStyleVar_PopupBorderSize
// ImGuiStyleVar_FramePadding
// ImGuiStyleVar_FrameRounding
// ImGuiStyleVar_FrameBorderSize
// ImGuiStyleVar_ItemSpacing
// ImGuiStyleVar_ItemInnerSpacing
// ImGuiStyleVar_IndentSpacing
// ImGuiStyleVar_ScrollbarSize
// ImGuiStyleVar_ScrollbarRounding
// ImGuiStyleVar_GrabMinSize
// ImGuiStyleVar_GrabRounding
// ImGuiStyleVar_TabRounding
// ImGuiStyleVar_ButtonTextAlign
// ImGuiStyleVar_SelectableTextAlign
// We avoid a generic memcpy(data, &backup.Backup.., GDataTypeSize[info->Type] * info->Count), the overhead in Debug is not worth it.
// Create switch-case from enum with regexp: ImGuiCol_{.*}, --> case ImGuiCol_\1: return "\1";
// Flags not supported by this function
// Not inside a Begin()/End()
// Can we focus this window with CTRL+TAB (or PadMenu + PadFocusPrev/PadFocusNext)
// Note that NoNavFocus makes the window not reachable with CTRL+TAB but it can still be focused with mouse or programmaticaly.
// If you want a window to never be focused, you may use the e.g. NoInputs flag.
// Test condition (NB: bit 0 is always true) and clear flags for next time
// Make sure the user doesn't attempt to combine multiple condition flags.
// Set
// As we happen to move the window while it is being appended to (which is a bad idea - will smear) let's at least offset the cursor
// And more importantly we need to offset CursorMaxPos/CursorStartPos this so ContentSize calculation doesn't get affected.
// Test condition (NB: bit 0 is always true) and clear flags for next time
// Make sure the user doesn't attempt to combine multiple condition flags.
// Set
// Test condition (NB: bit 0 is always true) and clear flags for next time
// Set
// Make sure the user doesn't attempt to combine multiple condition flags.
// Make sure the user doesn't attempt to combine multiple condition flags.
// Content size = inner scrollable rectangle, padded with WindowPadding.
// SetNextWindowContentSize(ImVec2(100,100) + ImGuiWindowFlags_AlwaysAutoResize will always allow submitting a 100x100 item.
// Make sure the user doesn't attempt to combine multiple condition flags.
// FIXME: This is in window space (not screen space!). We should try to obsolete all those functions.
// [Internal] Absolute coordinate. Saner. This is not exposed until we finishing refactoring work rect features.
// In window space (not screen space!)
// User generally sees positions in window coordinates. Internally we store CursorPos in absolute screen coordinates because it is more convenient.
// Conversion happens as we pass the value to user, but it makes our naming convention confusing because GetCursorPos() == (DC.CursorPos - window.Pos). May want to rename 'DC.CursorPos'.
// -1 is allowed but not below
// Push a given id value ignoring the ID stack as a seed.
// Lock horizontal starting position + capture group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
// To enforce Log carriage return
// Mismatched BeginGroup()/EndGroup() calls
// To enforce Log carriage return
// FIXME: Incorrect, we should grab the base offset from the *first line* of the group but it is hard to obtain now.
// If the current ActiveId was declared within the boundary of our group, we copy it to LastItemId so IsItemActive(), IsItemDeactivated() etc. will be functional on the entire group.
// It would be be neater if we replaced window.DC.LastItemId by e.g. 'bool LastItemIsActive', but would put a little more burden on individual widgets.
// Also if you grep for LastItemId you'll notice it is only used in that context.
// (The tests not symmetrical because ActiveIdIsAlive is an ID itself, in order to be able to handle ActiveId being overwritten during the frame.)
// Forward Edited flag
// Forward Deactivated flag
//window->DrawList->AddRect(group_bb.Min, group_bb.Max, IM_COL32(255,0,255,255));   // [Debug]
// Gets back to previous line and continue with horizontal layout
//      offset_from_start_x == 0 : follow right after previous item
//      offset_from_start_x != 0 : align to specified x position (relative to window/group left)
//      spacing_w < 0            : use default spacing if pos_x == 0, no spacing if pos_x != 0
//      spacing_w >= 0           : enforce spacing amount
//-----------------------------------------------------------------------------
// [SECTION] ERROR CHECKING
//-----------------------------------------------------------------------------
// Report when there is a mismatch of Begin/BeginChild vs End/EndChild calls. Important: Remember that the Begin/BeginChild API requires you
// to always call End/EndChild even if Begin/BeginChild returns false! (this is unfortunately inconsistent with most other Begin* API).
// Save and compare stack sizes on Begin()/End() to detect usage errors
// Begin() calls this with write=true
// End() calls this with write=false
// Window stacks
// NOT checking: DC.ItemWidth, DC.AllowKeyboardFocus, DC.ButtonRepeat, DC.TextWrapPos (per window) to allow user to conveniently push once and not pop (they are cleared on Begin)
// Too few or too many PopID()/TreePop()
// Too few or too many EndGroup()
// Global stacks
// For color, style and font stacks there is an incentive to use Push/Begin/Pop/.../End patterns, so we relax our checks a little to allow them.
// Too few or too many EndMenu()/EndPopup()
// Too few or too many PopStyleColor()
// Too few or too many PopStyleVar()
// Too few or too many PopFont()
//-----------------------------------------------------------------------------
// [SECTION] SCROLLING
//-----------------------------------------------------------------------------
// 'snap_on_edges' allows for a discontinuity at the edge of scrolling limits to take account of WindowPadding so that scrolling to make the last item visible scroll far enough to see the padding.
// Scroll to keep newly navigated item fully into view
//GetForegroundDrawList(window)->AddRect(window_rect.Min, window_rect.Max, IM_COL32_WHITE); // [DEBUG]
// Also scroll parent window to keep us into view if necessary
// We store a target position so centering can occur on the next frame when we are guaranteed to have a known window size
// We store a target position so centering can occur on the next frame when we are guaranteed to have a known window size
// center_x_ratio: 0.0f left of last item, 0.5f horizontal center of last item, 1.0f right of last item.
// Left of last item, in window space
// Precisely aim before, in the middle or after the last item.
// center_y_ratio: 0.0f top of last item, 0.5f vertical center of last item, 1.0f bottom of last item.
// Top of last item, in window space
// Precisely aim above, in the middle or below the last line.
//-----------------------------------------------------------------------------
// [SECTION] TOOLTIPS
//-----------------------------------------------------------------------------
// The default tooltip position is a little offset to give space to see the context menu (it's also clamped within the current viewport/monitor)
// In the context of a dragging tooltip we try to reduce that offset and we enforce following the cursor.
// Whatever we do we want to call SetNextWindowPos() to enforce a tooltip position and disable clipping the tooltip without our display area, like regular tooltip do.
//ImVec2 tooltip_pos = g.IO.MousePos - g.ActiveIdClickOffset - g.Style.WindowPadding;
//PushStyleVar(ImGuiStyleVar_Alpha, g.Style.Alpha * 0.60f); // This would be nice but e.g ColorButton with checkboard has issue with transparent colors :(
// Not exposed publicly as BeginTooltip() because bool parameters are evil. Let's see if other needs arise first.
// Hide previous tooltip from being displayed. We can't easily "reset" the content of a window so we create a new one.
// Mismatched BeginTooltip()/EndTooltip() calls
//-----------------------------------------------------------------------------
// [SECTION] POPUPS
//-----------------------------------------------------------------------------
// Mark popup as open (toggle toward open state).
// Popups are closed when user click outside, or activate a pressable item, or CloseCurrentPopup() is called within a BeginPopup()/EndPopup() block.
// Popup identifiers are relative to the current ID-stack (so OpenPopup and BeginPopup needs to be at the same level).
// One open popup per level of the popup hierarchy (NB: when assigning we reset the Window member of ImGuiPopupRef to NULL)
// Tagged as new ref as Window will be set back to NULL if we write this into OpenPopupStack.
//IMGUI_DEBUG_LOG("OpenPopupEx(0x%08X)\n", g.FrameCount, id);
// Gently handle the user mistakenly calling OpenPopup() every frame. It is a programming mistake! However, if we were to run the regular code path, the ui
// would become completely unusable because the popup will always be in hidden-while-calculating-size state _while_ claiming focus. Which would be a very confusing
// situation for the programmer. Instead, we silently allow the popup to proceed, it will keep reappearing and the programming error will be more obvious to understand.
// Close child popups if any, then flag popup for open/reopen
// When reopening a popup we first refocus its parent, otherwise if its parent is itself a popup it would get closed by ClosePopupsOverWindow().
// This is equivalent to what ClosePopupToLevel() does.
//if (g.OpenPopupStack[current_stack_size].PopupId == id)
//    FocusWindow(parent_window);
// When popups are stacked, clicking on a lower level popups puts focus back to it and close popups above it.
// Don't close our own child popup windows.
// Find the highest popup which is a descendant of the reference window (generally reference window = NavWindow)
// Trim the stack when popups are not direct descendant of the reference window (the reference window is often the NavWindow)
// This test is not required but it allows to set a convenient breakpoint on the statement below
//IMGUI_DEBUG_LOG("ClosePopupsOverWindow(%s) -> ClosePopupToLevel(%d)\n", ref_window->Name, popup_count_to_keep);
// Fallback
// Close the popup we have begin-ed into.
// Closing a menu closes its top-most parent popup (unless a modal)
//IMGUI_DEBUG_LOG("CloseCurrentPopup %d -> %d\n", g.BeginPopupStack.Size - 1, popup_idx);
// A common pattern is to close a popup when selecting a menu item/selectable that will open another window.
// To improve this usage pattern, we avoid nav highlight for a single frame in the parent window.
// Similarly, we could avoid mouse hover highlight in this window but it is less visually problematic.
// We behave like Begin() and need to consume those values
// Recycle windows based on depth
// Not recycling, so we can close/open during the same frame
// NB: Begin can return false when the popup is completely clipped (e.g. zero size display)
// Early out for performance
// We behave like Begin() and need to consume those values
// If 'p_open' is specified for a modal popup window, the popup will have a regular close button which will close the popup.
// Note that popup visibility status is owned by Dear ImGui (and manipulated with e.g. OpenPopup) so the actual value of *p_open is meaningless here.
// We behave like Begin() and need to consume those values
// Center modal windows by default
// FIXME: Should test for (PosCond & window->SetWindowPosAllowFlags) with the upcoming window.
// NB: is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
// Mismatched BeginPopup()/EndPopup() calls
// Make all menus and popups wrap around for now, may need to expose that policy.
// Child-popups don't need to be layed out
// If user hasn't passed an ID, we can use the LastItemID. Using LastItemID as a Popup ID won't conflict!
// You cannot pass a NULL str_id if the last item has no identifier (e.g. a Text() item)
// This is a helper to handle the simplest case of associating one named popup to one given widget.
// You may want to handle this on user side if you have specific needs (e.g. tweaking IsItemHovered() parameters).
// You can pass a NULL str_id to use the identifier of the last item.
// If user hasn't passed an ID, we can use the LastItemID. Using LastItemID as a Popup ID won't conflict!
// You cannot pass a NULL str_id if the last item has no identifier (e.g. a Text() item)
// r_avoid = the rectangle to avoid (e.g. for tooltip it is a rectangle around the mouse cursor which we want to avoid. for popups it's a small point around the cursor.)
// r_outer = the visible area rectangle, minus safe area padding. If our popup size won't fit because of safe area padding we ignore it.
//GetForegroundDrawList()->AddRect(r_avoid.Min, r_avoid.Max, IM_COL32(255,0,0,255));
//GetForegroundDrawList()->AddRect(r_outer.Min, r_outer.Max, IM_COL32(0,255,0,255));
// Combo Box policy (we want a connecting edge)
// Already tried this direction?
// Below, Toward Right (default)
// Above, Toward Right
// Below, Toward Left
// Above, Toward Left
// Default popup policy
// Already tried this direction?
// Fallback, try to keep within display
// Child menus typically request _any_ position within the parent menu item, and then we move the new menu outside the parent bounds.
// This is how we end up with child menus appearing (most-commonly) on the right of the parent menu.
// We want some overlap to convey the relative depth of each menu (currently the amount of overlap is hard-coded to style.ItemSpacing.x).
// Position tooltip (always follows mouse)
// FIXME: Hard-coded based on mouse cursor shape expectation. Exact dimension not very important.
// If there's not enough room, for tooltip we prefer avoiding the cursor at all cost even if it means that part of the tooltip won't be visible.
//-----------------------------------------------------------------------------
// [SECTION] KEYBOARD/GAMEPAD NAVIGATION
//-----------------------------------------------------------------------------
// Scoring function for directional navigation. Based on https://gist.github.com/rygorous/6981057
// Current modified source rect (NB: we've applied Max.x = Min.x in NavUpdate() to inhibit the effect of having varied item width)
// When entering through a NavFlattened border, we consider child window items as fully clipped for scoring
// This allows the scored item to not overlap other candidates in the parent window
// We perform scoring on items bounding box clipped by the current clipping rectangle on the other axis (clipping on our movement axis would give us equal scores for all clipped items)
// For example, this ensure that items in one column are not reached when moving vertically from items in another column.
// Compute distance between boxes
// FIXME-NAV: Introducing biases for vertical navigation, needs to be removed.
// Scale down on Y to keep using box-distance for vertically touching items
// Compute distance between centers (this is off by a factor of 2, but we only compare center distances with each other so it doesn't matter)
// L1 metric (need this for our connectedness guarantee)
// Determine which quadrant of 'curr' our candidate item 'cand' lies in based on distance
// For non-overlapping boxes, use distance between boxes
// For overlapping boxes with different centers, use distance between centers
// Degenerate case: two overlapping buttons with same center, break ties arbitrarily (note that LastItemId here is really the _previous_ item order, but it doesn't matter)
// Hold to preview score in matching quadrant. Press C to rotate.
// Is it in the quadrant we're interesting in moving to?
// Does it beat the current best candidate?
// Try using distance between center points to break ties
// Still tied! we need to be extra-careful to make sure everything gets linked properly. We consistently break ties by symbolically moving "later" items
// (with higher index) to the right/downwards by an infinitesimal amount since we the current "best" button already (so it must have a lower index),
// this is fairly easy. This rule ensures that all buttons with dx==dy==0 will end up being linked in order of appearance along the x axis.
// moving bj to the right/down decreases distance
// Axial check: if 'curr' has no link at all in some direction and 'cand' lies roughly in that direction, add a tentative link. This will only be kept if no "real" matches
// are found, so it only augments the graph produced by the above method using extra links. (important, since it doesn't guarantee strong connectedness)
// This is just to avoid buttons having no links in a particular direction when there's a suitable neighbor. you get good graphs without this too.
// 2017/09/29: FIXME: This now currently only enabled inside menu bars, ideally we'd disable it everywhere. Menus in particular need to catch failure. For general navigation it feels awkward.
// Disabling it may lead to disconnected graphs when nodes are very spaced out on different axis. Perhaps consider offering this as an option?
// Check axial match
// We get there when either NavId == id, or when g.NavAnyRequest is set (which is updated by NavUpdateAnyRequestFlag above)
//if (!g.IO.NavActive)  // [2017/10/06] Removed this possibly redundant test but I am not sure of all the side-effects yet. Some of the feature here will need to work regardless of using a _NoNavInputs flag.
//    return;
// Process Init Request
// Even if 'ImGuiItemFlags_NoNavDefaultFocus' is on (typically collapse/close button) we record the first ResultId so they can be used as a fallback
// Found a match, clear request
// Process Move Request (scoring for navigation)
// FIXME-NAV: Consider policy for double scoring (scoring from NavScoringRectScreen + scoring from a rect wrapped according to current wrapping policy)
// [DEBUG] Score all items in NavWindow at all times
// Features like PageUp/PageDown need to maintain a separate score for the visible set of items.
// Update window-relative bounding box of navigated item
// Always refresh g.NavWindow, because some operations such as FocusItem() don't have a window.
// Store item bounding box (relative to window position)
// No points calling this with no wrapping
// FIXME: This could be replaced by updating a frame number in each window when (window == NavWindow) and (NavLayer == 0).
// This way we could find the last focused window among our children. It would be much less confusing this way?
// Restore the last focused child.
// Call when we are expected to land on the Main Layer (0) after FocusWindow()
// This needs to be called before we submit any widget (aka in or before Begin)
//IMGUI_DEBUG_LOG("[Nav] NavInitWindow() init_for_nav=%d, window=\"%s\", layer=%d\n", init_for_nav, window->Name, g.NavLayer);
// Mouse (we need a fallback in case the mouse becomes invalid after being used)
// When navigation is active and mouse is disabled, decide on an arbitrary position around the bottom left of the currently navigated item.
// ImFloor() is important because non-integer mouse position application in back-end might be lossy and result in undesirable non-zero delta.
// Instant, read analog input (0.0f..1.0f, as provided by user)
// Return 1.0f when just released, no repeat, ignore analog input.
// Return 1.0f when just pressed, no repeat, ignore analog input.
// Set input source as Gamepad when buttons are pressed before we map Keyboard (some features differs when used with Gamepad vs Keyboard)
// Update Keyboard->Nav inputs mapping
// AltGR is Alt+Ctrl, also even on keyboards without AltGR we don't want Alt+Ctrl to open menu.
// Process navigation init request (select first/default focus)
// In very rare cases g.NavWindow may be null (e.g. clearing focus after requesting an init request, which does happen when releasing Alt while clicking on void)
// Apply result from previous navigation init request (will typically select the first item, unless SetItemDefaultFocus() has been called)
//IMGUI_DEBUG_LOG("[Nav] Apply NavInitRequest result: 0x%08X Layer %d in \"%s\"\n", g.NavInitResultId, g.NavLayer, g.NavWindow->Name);
// Process navigation move request
// When a forwarded move request failed, we restore the highlight that we disabled during the forward frame
// Apply application mouse position movement, after we had a chance to process move request result.
// Set mouse position given our knowledge of the navigated item position from last frame
// Store our return window (for returning from Layer 1 to Layer 0) and clear it as soon as we step back in our own Layer 0
// Update CTRL+TAB and Windowing features (hold Square to move/resize/etc.)
// Set output flags for user application
// Process NavCancel input (to close a popup, get back to parent, clear focus)
// Exit child window
// Reassigning with same value, we're being explicit here.
// -V1048
// Close open popup/menu
// Leave the "menu" layer
// Clear NavLastId for popups but keep it for regular child window so we can leave one and come back where we were
// Process manual activation request
// Process programmatic activation request
// Initiate directional inputs request
// Forwarding previous request (which has been modified, e.g. wrap around menus rewrite the requests with a starting rectangle at the other side of the window)
// (Preserve g.NavMoveRequestFlags, g.NavMoveClipDir which were set by the NavMoveRequestForward() function)
// Update PageUp/PageDown/Home/End scroll
// FIXME-NAV: Consider enabling those keys even without the master ImGuiConfigFlags_NavEnableKeyboard flag?
// If we initiate a movement request and have no current NavId, we initiate a InitDefautRequest that will be used as a fallback if the direction fails to find a match
//IMGUI_DEBUG_LOG("[Nav] NavInitRequest from move, window \"%s\", layer=%d\n", g.NavWindow->Name, g.NavLayer);
// Reassigning with same value, we're being explicit here.
// -V1048
// Scrolling
// *Fallback* manual-scroll with Nav directional keys when window has no navigable item
// We need round the scrolling speed because sub-pixel scroll isn't reliably supported.
// *Normal* Manual scroll with NavScrollXXX keys
// Next movement request will clamp the NavId reference rectangle to the visible area, so navigation will resume within those bounds.
// Reset search results
// When we have manually scrolled (without using navigation) and NavId becomes out of bounds, we project its bounding box to the visible area to restart navigation within visible items
// Terrible approximation for the intent of starting navigation from first fully visible item
// For scoring we use a single segment on the left side our current item bounding box (not touching the edge to avoid box overlap with zero-spaced items)
// Ensure if we have a finite, non-inverted bounding box here will allows us to remove extraneous ImFabs() calls in NavScoreItem().
//GetForegroundDrawList()->AddRect(g.NavScoringRectScreen.Min, g.NavScoringRectScreen.Max, IM_COL32(255,200,0,255)); // [DEBUG]
// [DEBUG]
// Apply result from previous frame navigation directional move request
// In a situation when there is no results but NavId != 0, re-enable the Navigation highlight (because g.NavId is not considered as a possible result)
// Select which result to use
// PageUp/PageDown behavior first jumps to the bottom/top mostly visible item, _otherwise_ use the result from the previous/next page.
// Maybe entering a flattened child from the outside? In this case solve the tie using the regular scoring rules.
// Scroll to keep newly navigated item fully into view.
// Offset our result position so mouse position can be applied immediately after in NavUpdate()
// Don't set NavJustMovedToId if just landed on the same spot (which may happen with ImGuiNavMoveFlags_AllowCurrentNavId)
// Handle PageUp/PageDown/Home/End keys
// If either (not both) are pressed
// Fallback manual-scroll when window has no navigable item
// Because our scoring rect is offset up, we request the down direction (so we can always land on the last item)
// Because our scoring rect is offset down, we request the up direction (so we can always land on the last item)
// FIXME-NAV: handling of Home/End is assuming that the top/bottom most item will be visible with Scroll.y == 0/ScrollMax.y
// Scrolling will be handled via the ImGuiNavMoveFlags_ScrollToEdge flag, we don't scroll immediately to avoid scrolling happening before nav result.
// Preserve current horizontal position if we have any.
// FIXME-OPT O(N)
// FIXME-OPT O(N)
// Don't reset windowing target if there's a single window in the list
// Windowing management mode
// Keyboard: CTRL+Tab (change focus/move/resize), Alt (toggle menu layer)
// Gamepad:  Hold Menu/Square (change focus/move/resize), Tap Menu/Square (toggle menu layer)
// Fade out
// Start CTRL-TAB or Square+L/R window selection
// Gamepad update
// Highlight only appears after a brief time holding the button, so that a fast tap on PadMenu (to toggle NavLayer) doesn't add visual noise
// Select window to focus
// Single press toggles NavLayer, long press with L/R apply actual focus on release (until then the window was merely rendered top-most)
// Once button was held long enough we don't consider it a tap-to-toggle-layer press anymore.
// Keyboard: Focus
// Visuals only appears after a brief time after pressing TAB the first time, so that a fast CTRL+TAB doesn't add visual noise
// 1.0f
// Keyboard: Press and Release ALT to toggle menu layer
// FIXME: We lack an explicit IO variable for "is the imgui window focused", so compare mouse validity to detect the common case of back-end clearing releases all keys on ALT-TAB
// Move window
// FIXME: Doesn't code variable framerate very well
// Apply final focus
// If the window only has a menu layer, select it directly
// Apply menu/layer toggle
// Move to parent menu if necessary
// When entering a regular menu bar with the Alt key, we always reinitialize the navigation ID.
// Window has already passed the IsWindowNavFocusable()
// Overlay displayed when using CTRL+TAB. Called by EndFrame().
//-----------------------------------------------------------------------------
// [SECTION] DRAG AND DROP
//-----------------------------------------------------------------------------
// Call when current ID is active.
// When this returns true you need to: a) call SetDragDropPayload() exactly once, b) you may render the payload visual/description, c) call EndDragDropSource()
// Early out for most common case
// If you want to use BeginDragDropSource() on an item with no unique identifier for interaction, such as Text() or Image(), you need to:
// A) Read the explanation below, B) Use the ImGuiDragDropFlags_SourceAllowNullID flag, C) Swallow your programmer pride.
// Early out
// Magic fallback (=somehow reprehensible) to handle items with no assigned ID, e.g. Text(), Image()
// We build a throwaway ID based on current ID stack + relative AABB of items in window.
// THE IDENTIFIER WON'T SURVIVE ANY REPOSITIONING OF THE WIDGET, so if your widget moves your dragging operation will be canceled.
// We don't need to maintain/call ClearActiveID() as releasing the button will early out this function and trigger !ActiveIdIsAlive.
// Allow the underlying widget to display/return hovered during the mouse release frame, else we would get a flicker.
// Target can request the Source to not display its tooltip (we use a dedicated flag to make this request explicit)
// We unfortunately can't just modify the source flags and skip the call to BeginTooltip, as caller may be emitting contents.
// Discard the drag if have not called SetDragDropPayload()
// Use 'cond' to choose to submit payload on drag start or every frame
// Not called between BeginDragDropSource() and EndDragDropSource()
// Copy payload
// Store in heap
// Store locally
// We don't use BeginDragDropTargetCustom() and duplicate its code because:
// 1) we use LastItemRectHoveredRect which handles items that pushes a temporarily clip rectangle in their code. Calling BeginDragDropTargetCustom(LastItemRect) would not handle them.
// 2) and it's faster. as this code may be very frequently called, we want to early out as fast as we can.
// Also note how the HoveredWindow test is positioned differently in both functions (in both functions we optimize for the cheapest early out case)
// Not called between BeginDragDropTarget() and EndDragDropTarget() ?
// Forgot to call EndDragDropTarget() ?
// Accept smallest drag target bounding box, this allows us to nest drag targets conveniently without ordering constraints.
// NB: We currently accept NULL id as target. However, overlapping targets requires a unique ID to function!
// Render default drop visuals
// Source can also inhibit the preview (useful for external sources that lives for 1 frame)
// FIXME-DRAG: Settle on a proper default visuals for drop target.
// For extern drag sources affecting os window focus, it's easier to just test !IsMouseDown() instead of IsMouseReleased()
// We don't really use/need this now, but added it for the sake of consistency and because we might need it later.
//-----------------------------------------------------------------------------
// [SECTION] LOGGING/CAPTURING
//-----------------------------------------------------------------------------
// All text output from the interface can be captured into tty/file/clipboard.
// By default, tree nodes are automatically opened during logging.
//-----------------------------------------------------------------------------
// Pass text data straight to log (without being displayed)
// Internal version that takes a position to decide on newline placement and pad items according to their depth.
// We split text into individual lines to add current tree level padding
// Re-adjust padding if we have popped out of our starting depth
// Split the string. Each new line (after a '\n') is followed by spacing corresponding to the current depth of our log entry.
// We don't add a trailing \n to allow a subsequent item on the same line to be captured.
// An empty "" string at a different Y position should output a carriage return.
// Start logging/capturing text output
// Start logging/capturing text output to given file
// FIXME: We could probably open the file in text mode "at", however note that clipboard/buffer logging will still
// be subject to outputting OS-incompatible carriage return if within strings the user doesn't use IM_NEWLINE.
// By opening the file in binary mode "ab" we have consistent output everywhere.
// Start logging/capturing text output to clipboard
// Helper to display logging buttons
// FIXME-OBSOLETE: We should probably obsolete this and let the user have their own helper (this is one of the oldest function alive!)
// Start logging at the end of the function so that the buttons don't appear in the log
//-----------------------------------------------------------------------------
// [SECTION] SETTINGS
//-----------------------------------------------------------------------------
// Skip to the "###" marker if any. We don't skip past to match the behavior of GetID()
// Preserve the full string when IMGUI_DEBUG_INI_SETTINGS is set to make .ini inspection easier.
// Allocate chunk
// Store with zero terminator
// Zero-tolerance, no error reporting, cheap .ini parsing
// For user convenience, we allow passing a non zero-terminated string (hence the ini_size parameter).
// For our convenience and to make the code simpler, we'll also write zero-terminators within the buffer. So let's create a writable copy..
// Skip new lines markers, then find end of the line
// Parse "[Type][Name]". Note that 'Name' can itself contains [] characters, which is acceptable with the current format and parsing code.
// Overwrite first ']'
// Skip second '['
// Let type handler parse the line
// Call registered handlers (e.g. SettingsHandlerWindow_WriteAll() + custom handlers) to write their stuff into a text buffer
// Gather data from windows that were active during this session
// (if a window wasn't opened in this session we preserve its settings)
// Write to text buffer
// ballpark reserve
//-----------------------------------------------------------------------------
// [SECTION] VIEWPORTS, PLATFORM WINDOWS
//-----------------------------------------------------------------------------
// (this section is filled in the 'docking' branch)
//-----------------------------------------------------------------------------
// [SECTION] DOCKING
//-----------------------------------------------------------------------------
// (this section is filled in the 'docking' branch)
//-----------------------------------------------------------------------------
// [SECTION] PLATFORM DEPENDENT HELPERS
//-----------------------------------------------------------------------------
// UWP doesn't have Win32 functions
// Win32 clipboard implementation
// Use old API to avoid need for separate .mm file
// OSX clipboard implementation
// If you enable this you will need to add '-framework ApplicationServices' to your linker command-line!
// Local Dear ImGui-only clipboard implementation, if user hasn't defined better clipboard handlers.
// Win32 API IME support (for Asian languages, etc.)
// Notify OS Input Method Editor of text input position
//-----------------------------------------------------------------------------
// [SECTION] METRICS/DEBUG WINDOW
//-----------------------------------------------------------------------------
// Avoid naming collision with imgui_demo.cpp's HelpMarker() for unity builds.
// Debugging enums
// Windows Rect Type
// Tables Rect Type
// State
// Basic info
// Helper functions to display common structures:
// - NodeDrawList()
// - NodeColumns()
// - NodeWindow()
// - NodeWindows()
// - NodeTabBar()
// - NodeStorage()
// Can't display stats for active draw list! (we don't have the data double-buffered)
// Render additional visuals into the top-most draw list
// Calculate approximate coverage area (touched pixel count)
// This will be in pixels squared as long there's no post-scaling happening to the renderer output.
// Display vertex information summary. Hover to get all triangles drawn in wire-frame
// Draw wire-frame version of everything
// Disable AA on triangle outlines is more readable for very large and thin triangles.
// Display individual triangles/vertices. Hover on to get the corresponding triangle highlighted.
// Manually coarse clip our print out of individual vertices to save CPU, only items that may be visible.
// Disable AA on triangle outlines is more readable for very large and thin triangles.
// Standalone tab bars (not associated to docking/windows functionality) currently hold no discernible strings.
// Important: we currently don't store a type, real value may not be integer.
// Details for Popups
// Details for TabBars
// Details for Tables
// #define IMGUI_HAS_TABLE
// Details for Docking
// #define IMGUI_HAS_DOCK
// Misc Details
// Data is "in-flight" so depending on when the Metrics window is called we may see current frame information or not
// Tools
// The Item Picker tool is super useful to visually select an item and break into the call-stack of where it was submitted.
// Overlay: Display windows Rectangles and Begin Order
// Overlay: Display Tables Rectangles
// #define IMGUI_HAS_TABLE
// Overlay: Display Docking info
// #define IMGUI_HAS_DOCK
//-----------------------------------------------------------------------------
// Include imgui_user.inl at the end of imgui.cpp to access private data/functions that aren't exposed.
// Prefer just including imgui_internal.h from your code rather than using this define. If a declaration is missing from imgui_internal.h add it or request it on the github.
//-----------------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\imgui_demo.cpp
// dear imgui, v1.75 WIP
// (demo code)
// Help:
// - Read FAQ at http://dearimgui.org/faq
// - Newcomers, read 'Programmer guide' in imgui.cpp for notes on how to setup Dear ImGui in your codebase.
// - Call and read ImGui::ShowDemoWindow() in imgui_demo.cpp for demo code. All applications in examples/ are doing that.
// Read imgui.cpp for more details, documentation and comments.
// Get latest version at https://github.com/ocornut/imgui
// Message to the person tempted to delete this file when integrating Dear ImGui into their code base:
// Do NOT remove this file from your project! Think again! It is the most useful reference code that you and other coders
// will want to refer to and call. Have the ImGui::ShowDemoWindow() function wired in an always-available debug menu of
// your game/app! Removing this file from your project is hindering access to documentation for everyone in your team,
// likely leading you to poorer usage of the library.
// Everything in this file will be stripped out by the linker if you don't call ImGui::ShowDemoWindow().
// If you want to link core Dear ImGui in your shipped builds but want a thorough guarantee that the demo will not be linked,
// you can setup your imconfig.h with #define IMGUI_DISABLE_DEMO_WINDOWS and those functions will be empty.
// In other situation, whenever you have Dear ImGui available you probably want this to be available for reference.
// Thank you,
// -Your beloved friend, imgui_demo.cpp (which you won't delete)
// Message to beginner C/C++ programmers about the meaning of the 'static' keyword:
// In this demo code, we frequently we use 'static' variables inside functions. A static variable persist across calls, so it is
// essentially like a global variable but declared inside the scope of the function. We do this as a way to gather code and data
// in the same place, to make the demo source code faster to read, faster to write, and smaller in size.
// It also happens to be a convenient way of storing simple UI related information as long as your function doesn't need to be
// reentrant or used in multiple threads. This might be a pattern you will want to use in your code, but most of the real data
// you would be editing is likely going to be stored outside your functions.
// The Demo code in this file is designed to be easy to copy-and-paste in into your application!
// Because of this:
// - We never omit the ImGui:: namespace when calling functions, even though most of our code is already in the same namespace.
// - We try to declare static variables in the local scope, as close as possible to the code using them.
// - We never use any of the helpers/facilities used internally by Dear ImGui, unless it has been exposed in the public API (imgui.h).
// - We never use maths operators on ImVec2/ImVec4. For other of our sources files, they are provided by imgui_internal.h w/ IMGUI_DEFINE_MATH_OPERATORS.
//   For your own sources file they are optional and require you either enable those, either provide your own via IM_VEC2_CLASS_EXTRA in imconfig.h.
//   Because we don't want to assume anything about your support of maths operators, we don't use them in imgui_demo.cpp.
/*
// [SECTION] Forward Declarations, Helpers
// [SECTION] Demo Window / ShowDemoWindow()
// [SECTION] About Window / ShowAboutWindow()
// [SECTION] Style Editor / ShowStyleEditor()
// [SECTION] Example App: Main Menu Bar / ShowExampleAppMainMenuBar()
// [SECTION] Example App: Debug Console / ShowExampleAppConsole()
// [SECTION] Example App: Debug Log / ShowExampleAppLog()
// [SECTION] Example App: Simple Layout / ShowExampleAppLayout()
// [SECTION] Example App: Property Editor / ShowExampleAppPropertyEditor()
// [SECTION] Example App: Long Text / ShowExampleAppLongText()
// [SECTION] Example App: Auto Resize / ShowExampleAppAutoResize()
// [SECTION] Example App: Constrained Resize / ShowExampleAppConstrainedResize()
// [SECTION] Example App: Simple Overlay / ShowExampleAppSimpleOverlay()
// [SECTION] Example App: Manipulating Window Titles / ShowExampleAppWindowTitles()
// [SECTION] Example App: Custom Rendering using ImDrawList API / ShowExampleAppCustomRendering()
// [SECTION] Example App: Documents Handling / ShowExampleAppDocuments()
// toupper
// INT_MIN, INT_MAX
// sqrtf, powf, cosf, sinf, floorf, ceilf
// vsnprintf, sscanf, printf
// NULL, malloc, free, atoi
// MSVC 2008 or earlier
// intptr_t
// intptr_t
// 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
// warning : use of old-style cast                              // yes, they are more terse.
// warning : 'xx' is deprecated: The POSIX name for this item.. // for strdup used in demo code (so user can copy & paste the code)
// warning : cast to 'void *' from smaller integer type 'int'
// warning : warning: format string is not a string literal
// warning : declaration requires an exit-time destructor       // exit-time destruction order is undefined. if MemFree() leads to users code that has been disabled before exit it might cause problems. ImGui coding style welcomes static/globals.
// warning : warning: macro is not used                         // we define snprintf/vsnprintf on Windows so they are available, but not always used.
// warning : zero as null pointer constant                  // some standard header variations use #define NULL 0
// warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.
// warning : macro name is a reserved identifier                //
// warning: unknown option after '#pragma GCC diagnostic' kind
// warning: cast to pointer from integer of different size
// warning : format string is not a string literal (potentially insecure)
// warning: implicit conversion from 'float' to 'double' when passing argument to function
// warning: conversion to 'xxxx' from 'xxxx' may alter its value
// [__GNUC__ >= 6] warning: this 'if' clause does not guard this statement      // GCC 6.0+ only. See #883 on GitHub.
// Play it nice with Windows users (Update: since 2018-05, Notepad finally appears to support Unix-style carriage returns!)
//-----------------------------------------------------------------------------
// [SECTION] Forward Declarations, Helpers
//-----------------------------------------------------------------------------
// Forward Declarations
// Helper to display a little (?) mark which shows a tooltip when hovered.
// In your own code you may want to display an actual icon if you are using a merged icon fonts (see docs/FONTS.txt)
// Helper to display basic user controls.
//-----------------------------------------------------------------------------
// [SECTION] Demo Window / ShowDemoWindow()
//-----------------------------------------------------------------------------
// - ShowDemoWindowWidgets()
// - ShowDemoWindowLayout()
// - ShowDemoWindowPopups()
// - ShowDemoWindowColumns()
// - ShowDemoWindowMisc()
//-----------------------------------------------------------------------------
// We split the contents of the big ShowDemoWindow() function into smaller functions (because the link time of very large functions grow non-linearly)
// Demonstrate most Dear ImGui features (this is big function!)
// You may execute this function to experiment with the UI and understand what it does. You may then search for keywords in the code when you are interested by a specific feature.
// Exceptionally add an extra assert here for people confused with initial dear imgui setup
// Examples Apps (accessible from the "Examples" menu)
// Dear ImGui Apps (accessible from the "Tools" menu)
// Demonstrate the various window flags. Typically you would just use the default!
// Don't pass our bool* to Begin
// We specify a default position/size in case there's no data in the .ini file. Typically this isn't required! We only do it to make the Demo applications a little more welcoming.
// Main body of the Demo window starts here.
// Early out if the window is collapsed, as an optimization.
// Most "big" widgets share a common width settings by default.
//ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.65f);    // Use 2/3 of the space for widgets and 1/3 for labels (default)
// Use fixed width for labels (by passing a negative value), the rest goes to widgets. We choose a width proportional to our font size.
// Menu Bar
//www.dearimgui.org/faq/");
// Create a way to restore this flag otherwise we could be stuck completely!
// Make a local copy to avoid modifying actual back-end flags.
// All demo contents
// End of ShowDemoWindow()
// Color buttons, demonstrate using PushID() to add unique identifier in the ID stack, and changing style.
// Use AlignTextToFramePadding() to align text baseline to the baseline of framed elements (otherwise a Text+SameLine+Button sequence will have the text a little too high by default)
// Arrow buttons with Repeater
// Using the _simplified_ one-liner Combo() api here
// See "Combo" section for examples of how to use the more complete BeginCombo()/EndCombo() api.
// To wire InputText() with std::string or any other custom string type,
// see the "Text Input > Resize Callback" section of this demo, and the misc/cpp/imgui_stdlib.h file.
// Using the format string to display a name instead of an integer.
// Here we completely omit '%d' from the format string, so it'll only display a name.
// This technique can also be used with DragInt().
// List box
//static int listbox_item_current2 = 2;
//ImGui::SetNextItemWidth(-1);
//ImGui::ListBox("##listbox2", &listbox_item_current2, listbox_items, IM_ARRAYSIZE(listbox_items), 4);
// Testing ImGuiOnceUponAFrame helper.
//static ImGuiOnceUponAFrame once;
//for (int i = 0; i < 5; i++)
//    if (once)
//        ImGui::Text("This will be displayed only once.");
// Use SetNextItemOpen() so set the default state of a node to be open.
// We could also use TreeNodeEx() with the ImGuiTreeNodeFlags_DefaultOpen flag to achieve the same thing!
// Dumb representation of what may be user-side selection state. You may carry selection state inside or outside your objects in whatever format you see fit.
// Temporary storage of what node we have clicked to process selection at the end of the loop. May be a pointer to your own node type, etc.
// Disable the default open on single-click behavior and pass in Selected flag according to our selection state.
// Items 0..2 are Tree Node
// Items 3..5 are Tree Leaves
// The only reason we use TreeNode at all is to allow selection of the leaf.
// Otherwise we can use BulletText() or advance the cursor by GetTreeNodeToLabelSpacing() and call Text().
// ImGuiTreeNodeFlags_Bullet
// Update selection state. Process outside of tree loop to avoid visual inconsistencies during the clicking-frame.
// CTRL+click to toggle
//if (!(selection_mask & (1 << node_clicked))) // Depending on selection behavior you want, this commented bit preserve selection when clicking on item that is part of the selection
// Click to single-select
/*
// Using shortcut. You can use PushStyleColor()/PopStyleColor() for more flexibility.
// Using shortcut. You can use PushTextWrapPos()/PopTextWrapPos() for more flexibility.
// UTF-8 test with Japanese characters
// (Needs a suitable font, try Noto, or Arial Unicode, or M+ fonts. Read docs/FONTS.txt for details.)
// - From C++11 you can use the u8"my text" syntax to encode literal strings as UTF-8
// - For earlier compiler, you may be able to encode your sources as UTF-8 (e.g. Visual Studio save your file as 'UTF-8 without signature')
// - FOR THIS DEMO FILE ONLY, BECAUSE WE WANT TO SUPPORT OLD COMPILERS, WE ARE *NOT* INCLUDING RAW UTF-8 CHARACTERS IN THIS SOURCE FILE.
//   Instead we are encoding a few strings with hexadecimal constants. Don't do this in your application!
//   Please use u8"text in any language" in your application!
// Note that characters values are preserved even by InputText() if the font cannot be displayed, so you can safely copy & paste garbled characters into another application.
// Normally we would use u8"blah blah" with the proper characters directly in the string.
//static char buf[32] = u8"NIHONGO"; // <- this is how you would write it with C++11, using real kanjis
// Here we are grabbing the font texture because that's the only one we have access to inside the demo code.
// Remember that ImTextureID is just storage for whatever you want it to be, it is essentially a value that will be passed to the render function inside the ImDrawCmd structure.
// If you use one of the default imgui_impl_XXXX.cpp renderer, they all have comments at the top of their file to specify what they expect to be stored in ImTextureID.
// (for example, the imgui_impl_dx11.cpp renderer expect a 'ID3D11ShaderResourceView*' pointer. The imgui_impl_opengl3.cpp renderer expect a GLuint OpenGL texture identifier etc.)
// If you decided that ImTextureID = MyEngineTexture*, then you can pass your MyEngineTexture* pointers to ImGui::Image(), and gather width/height through your own functions, etc.
// Using ShowMetricsWindow() as a "debugger" to inspect the draw data that are being passed to your render will help you debug issues if you are confused about this.
// Consider using the lower-level ImDrawList::AddImage() API, via ImGui::GetWindowDrawList()->AddImage().
// -1 = uses default padding
// Expose flags as checkbox for the demo
// Clear the other flag, as we cannot combine both
// Clear the other flag, as we cannot combine both
// General BeginCombo() API, you have full control over your selection data and display type.
// (your selection data could be an index, a pointer to the object, an id for the object, a flag stored in the object itself, etc.)
// Here our selection is a single pointer stored outside the object.
// The second parameter is the label previewed before opening the combo.
// Set the initial focus when opening the combo (scrolling + for keyboard navigation support in the upcoming navigation branch)
// Simplified one-liner Combo() API, using values packed in a single constant string
// Simplified one-liner Combo() using an array of const char*
// If the selection isn't within 0..count, Combo won't display a preview
// Simplified one-liner Combo() using an accessor function
// Selectable() has 2 overloads:
// - The one taking "bool selected" as a read-only selection information. When Selectable() has been clicked is returns true and you can alter selection state accordingly.
// - The one taking "bool* p_selected" as a read-write selection information (convenient in some cases)
// The earlier is more flexible, as in real application your selection may be stored in a different manner (in flags within objects, as an external list, etc).
// Clear selection when CTRL is not held
// Using the Selectable() override that takes "bool* p_selected" parameter and toggle your booleans automatically.
// Note: We _unnecessarily_ test for both x/y and i here only to silence some static analyzer. The second part of each test is unnecessary.
// To wire InputText() with std::string or any other custom string type,
// see the "Text Input > Resize Callback" section of this demo, and the misc/cpp/imgui_stdlib.h file.
// Note: we are using a fixed-sized buffer for simplicity here. See ImGuiInputTextFlags_CallbackResize
// and the code in misc/cpp/imgui_stdlib.h for how to setup InputText() for dynamically resizing strings.
/*\n"
// To wire InputText() with std::string or any other custom string type,
// you can use the ImGuiInputTextFlags_CallbackResize flag + create a custom ImGui::InputText() wrapper using your prefered type.
// See misc/cpp/imgui_stdlib.h for an implementation of this using std::string.
// NB: On resizing calls, generally data->BufSize == data->BufTextLen + 1
// Tip: Because ImGui:: is a namespace you would typicall add your own function into the namespace in your own source files.
// For example, you may add a function called ImGui::InputText(const char* label, MyString* my_str).
// For this demo we are using ImVector as a string container.
// Note that because we need to store a terminating zero character, our size/capacity are 1 more than usually reported by a typical string class.
// Plot/Graph widgets are currently fairly limited.
// Consider writing your own plotting widget, or using a third-party one (see "Wiki->Useful Widgets", or github.com/ocornut/imgui/issues/2747)
// Create a dummy array of contiguous float values to plot
// Tip: If your float aren't contiguous but part of a structure, you can pass a pointer to your first float and the sizeof() of your structure in the Stride parameter.
// Create dummy data at fixed 60 hz rate for the demo
// Plots can display overlay texts
// (in this example, we will display an average value)
// Use functions to generate output
// FIXME: This is rather awkward because current plot API only pass in indices. We probably want an API passing floats and user provide sample rate/count.
// Animate a simple progress bar
// Typically we would use ImVec2(-1.0f,0.0f) or ImVec2(-FLT_MIN,0.0f) to use all available width,
// or ImVec2(width,0.0f) for a specified width. ImVec2(0.0f,0.0f) uses ItemWidth.
// Generate a dummy default palette. The palette will persist and can be edited.
// Alpha
// Lock X position
// Preserve alpha!
// Allow user to drop colors into each palette entry
// (Note that ColorButton is already a drag source by default, unless using ImGuiColorEditFlags_NoDragDrop)
// This is by default if you call ColorPicker3() instead of ColorPicker4()
// Disable all RGB/HSV/Hex displays
// Override display mode
// HSV encoded support (to avoid RGB<>HSV round trips and singularities when S==0 or V==0)
// The DragScalar/InputScalar/SliderScalar functions allow various data types: signed/unsigned int/long long and float/double
// To avoid polluting the public API with all possible combinations, we use the ImGuiDataType enum to pass the type,
// and passing all arguments by address.
// This is the reason the test code below creates local variables to hold "zero" "one" etc. for each types.
// In practice, if you frequently use a given type that is not covered by the normal API entry points, you can wrap it
// yourself inside a 1 line function which can take typed argument as value instead of void*, and then pass their address
// to the generic function. For example:
//   bool MySliderU64(const char *label, u64* value, u64 min = 0, u64 max = 0, const char* format = "%lld")
//   {
//      return SliderScalar(label, ImGuiDataType_U64, value, &min, &max, format);
//   }
// Limits (as helper variables that we can take the address of)
// Note that the SliderScalar function has a maximum usable range of half the natural type maximum, hence the /2 below.
// State
// ColorEdit widgets automatically act as drag source and drag target.
// They are using standardized payload strings IMGUI_PAYLOAD_TYPE_COLOR_3F and IMGUI_PAYLOAD_TYPE_COLOR_4F to allow your own widgets
// to use colors in their drag and drop interaction. Also see the demo in Color Picker -> Palette demo.
// Our buttons are both drag sources and drag targets here!
// Set payload to carry the index of our item (could be anything)
// Display preview (could be anything, e.g. when dragging an image we could decide to display the filename and a small preview of the image, etc.)
// Simple reordering
// Submit an item (various types available) so we can query their status in the following block.
// Testing text items with no identifier/interaction
// Testing button
// Testing button (with repeater)
// Testing checkbox
// Testing basic item
// Testing input text (which handles tabbing)
// Testing +/- buttons on scalar input
// Testing multi-component items (IsItemXXX flags are reported merged)
// Testing multi-component items (IsItemXXX flags are reported merged)
// Testing menu item (they use ImGuiButtonFlags_PressedOnRelease button policy)
// Testing tree node
// Testing tree node with ImGuiButtonFlags_PressedOnDoubleClick button policy.
// Display the value of IsItemHovered() and other common item state functions.
// Note that the ImGuiHoveredFlags_XXX flags can be combined.
// Because BulletText is an item itself and that would affect the output of IsItemXXX functions,
// we query every state in a single call to avoid storing them and to simplify the code
// Testing IsWindowFocused() function with its various flags.
// Note that the ImGuiFocusedFlags_XXX flags can be combined.
// Testing IsWindowHovered() function with its various flags.
// Note that the ImGuiHoveredFlags_XXX flags can be combined.
// Calling IsItemHovered() after begin returns the hovered status of the title bar.
// This is useful in particular if you want to create a context menu (with BeginPopupContextItem) associated to the title bar of a window.
// <-- This is using IsItemHovered()
// Child 1: no border, enable horizontal scrollbar
// Child 2: rounded border
// Demonstrate a few extra things
// - Changing ImGuiCol_ChildBg (which is transparent black in default styles)
// - Using SetCursorPos() to position the child window (because the child window is an item from the POV of the parent window)
//   You can also call SetNextWindowPos() to position the child window. The parent window will effectively layout from this position.
// - Using ImGui::GetItemRectMin/Max() to query the "item" state (because the child window is an item from the POV of the parent window)
//   See "Widgets" -> "Querying Status (Active/Focused/Hovered etc.)" section for more details about this.
// Use SetNextItemWidth() to set the width of a single upcoming item.
// Use PushItemWidth()/PopItemWidth() to set the width of a group of items.
// Demonstrate using PushItemWidth to surround three items. Calling SetNextItemWidth() before each of them would have the same effect.
// Text
// Adjust spacing
// Button
// Button
// Aligned to arbitrary position. Easy/cheap column.
// Checkbox
// Various
//if (ImGui::IsItemHovered()) ImGui::SetTooltip("ListBox %d hovered", i);
// Dummy
// Manually wrapping (we should eventually provide this as an automatic layout feature, but for now you can do it manually)
// Expected position if next button was on same line
// Expose a couple of the available flags. In most cases you may just call BeginTabBar() with no flags (0).
// Tab Bar
// Persistent user state
// Passing a bool* to BeginTabItem() is similar to passing one to Begin(): the underlying bool will be set to false when the tab is closed.
// Capture the group size and create widgets using the same size
// If your line starts with text, call AlignTextToFramePadding() to align text to upcoming widgets.
// Because we don't know what's coming after the Text() statement, we need to move the text baseline down by FramePadding.y
// SmallButton() uses the same vertical padding as Text
// If your line starts with text, call AlignTextToFramePadding() to align text to upcoming widgets.
// SmallButton() sets FramePadding to zero. Text baseline is aligned to match baseline of previous Button
// Tree
// Dummy tree data
// Vertically align text node a bit lower so it'll be vertically centered with upcoming widget. Otherwise you can use SmallButton (smaller fit).
// Common mistake to avoid: if we want to SameLine after TreeNode we need to do it before we add child content.
// Dummy tree data
// Bullet
// Vertical scroll functions
// Avoid calling SetScrollHereY when running with culled items
// 0.0f:top, 0.5f:center, 1.0f:bottom
// Horizontal scroll functions
// Avoid calling SetScrollHereY when running with culled items
// 0.0f:left, 0.5f:center, 1.0f:right
// Miscellaneous Horizontal Scrolling Demo
// Display random stuff (for the sake of this trivial demo we are using basic Button+SameLine. If you want to create your own time line for a real application you may be better off
// manipulating the cursor position yourself, aka using SetCursorPos/SetCursorScreenPos to position the widgets yourself. You may also want to use the lower-level ImDrawList API)
// Demonstrate a trick: you can use Begin to set yourself in the context of another window (here we are already out of your child window)
// Will grow contents size (unless explicitly overwritten)
// Will grow contents size and display highlight over full width
// Will grow and use contents size
// Will use contents size
// Will use contents size
// Will grow and use contents size
// The properties of popups windows are:
// - They block normal mouse hovering detection outside them. (*)
// - Unless modal, they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
// - Their visibility state (~bool) is held internally by Dear ImGui instead of being held by the programmer as we are used to with regular Begin() calls.
//   User can manipulate the visibility state by calling OpenPopup().
// (*) One can use IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup) to bypass it and detect hovering even when normally blocked by a popup.
// Those three properties are connected. The library needs to hold their visibility state because it can close popups at any time.
// Typical use for regular windows:
//   bool my_tool_is_active = false; if (ImGui::Button("Open")) my_tool_is_active = true; [...] if (my_tool_is_active) Begin("My Tool", &my_tool_is_active) { [...] } End();
// Typical use for popups:
//   if (ImGui::Button("Open")) ImGui::OpenPopup("MyPopup"); if (ImGui::BeginPopup("MyPopup") { [...] EndPopup(); }
// With popups we have to go through a library call (here OpenPopup) to manipulate the visibility state.
// This may be a bit confusing at first but it should quickly make sense. Follow on the examples below.
// Simple selection popup
// (If you want to show the current selection inside the Button itself, you may want to build a string using the "###" operator to preserve a constant ID with a variable label)
// Showing a menu with toggles
// Call the more complete ShowExampleMenuFile which we use in various places of this demo
// BeginPopupContextItem() is a helper to provide common/simple popup behavior of essentially doing:
//    if (IsItemHovered() && IsMouseReleased(0))
//       OpenPopup(id);
//    return BeginPopup(id);
// For more advanced uses you may want to replicate and cuztomize this code. This the comments inside BeginPopupContextItem() implementation.
// We can also use OpenPopupOnItemClick() which is the same as BeginPopupContextItem() but without the Begin call.
// So here we will make it that clicking on the text field with the right mouse button (1) will toggle the visibility of the popup above.
// When used after an item that has an ID (here the Button), we can skip providing an ID to BeginPopupContextItem().
// BeginPopupContextItem() will use the last item ID as the popup ID.
// In addition here, we want to include your editable label inside the button label. We use the ### operator to override the ID (read FAQ about ID for details)
// ### operator override ID ignoring the preceding label
//static int dummy_i = 0;
//ImGui::Combo("Combo", &dummy_i, "Delete\0Delete harder\0");
// Testing behavior of widgets stacking their own regular popups over the modal.
// Also demonstrate passing a bool* to BeginPopupModal(), this will create a regular close button which will close the popup.
// Note that the visibility state of popups is owned by imgui, so the input value of the bool actually doesn't matter here.
// NB: As a quirk in this very specific example, we want to differentiate the parent of this menu from the parent of the various popup menus above.
// To do so we are encloding the items in a PushID()/PopID() block to make them two different menusets. If we don't, opening any popup above and hovering our menu here
// would open it. This is because once a menu is active, we allow to switch to a sibling menu by just hovering on it, which is the desired behavior for regular menus.
// Basic columns
// 3-ways, no border
//if (ImGui::Button(label, ImVec2(-FLT_MIN,0.0f))) {}
// 4-ways, with border
// NB: Future columns API should allow automatic horizontal borders.
// Create multiple items in a same cell before switching to next column
// Word wrapping
// Scrolling columns
/*
// Also demonstrate using the clipper for large list
// Helper class to easy setup a text filter.
// You may want to implement a more feature-full filtering scheme in your own application.
// Display ImGuiIO output flags
// Display Keyboard/Mouse state
// FIXME: We should convert 'c' to UTF-8 here but the functions are not public.
//ImGui::SameLine(); HelpMarker("Use ImGui::PushAllowKeyboardFocus(bool)\nto disable tabbing through certain widgets.");
// Use >= 0 parameter to SetKeyboardFocusHere() to focus an upcoming item
// Draw a line between the button and the mouse cursor
// Drag operations gets "unlocked" when the mouse has moved past a certain threshold (the default threshold is stored in io.MouseDragThreshold)
// You can request a lower or higher threshold using the second parameter of IsMouseDragging() and GetMouseDragDelta()
//-----------------------------------------------------------------------------
// [SECTION] About Window / ShowAboutWindow()
// Access from Dear ImGui Demo -> Tools -> About
//-----------------------------------------------------------------------------
// Back quotes will make the text appears without formatting when pasting to GitHub
//-----------------------------------------------------------------------------
// [SECTION] Style Editor / ShowStyleEditor()
//-----------------------------------------------------------------------------
// - ShowStyleSelector()
// - ShowFontSelector()
// - ShowStyleEditor()
//-----------------------------------------------------------------------------
// Demo helper function to select among default colors. See ShowStyleEditor() for more advanced options.
// Here we use the simplified Combo() api that packs items into a single literal string. Useful for quick combo boxes where the choices are known locally.
// Demo helper function to select among loaded fonts.
// Here we use the regular BeginCombo()/EndCombo() api which is more the more flexible one.
// You can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it compares to an internally stored reference)
// Default to using internal storage as reference
// Simplified Settings
// Make GrabRounding always the same value as FrameRounding
// Save/Revert button
// Tips: in a real user application, you may want to merge and use an icon font into the main font, so instead of "Save"/"Revert" you'd use icons.
// Read the FAQ and docs/FONTS.txt about using icon fonts. It's really easy and super convenient!
// Scale only this font
// Display all glyphs of the fonts in separate pages of 256 characters
// We use ImFont::RenderChar as a shortcut because we don't have UTF-8 conversion functions available to generate a string.
// scale only this window
// scale everything
// Not exposing zero here so user doesn't "lose" the UI (zero alpha clips all widgets). But application code could have a toggle to switch between zero and non-zero.
//-----------------------------------------------------------------------------
// [SECTION] Example App: Main Menu Bar / ShowExampleAppMainMenuBar()
//-----------------------------------------------------------------------------
// - ShowExampleAppMainMenuBar()
// - ShowExampleMenuFile()
//-----------------------------------------------------------------------------
// Demonstrate creating a "main" fullscreen menu bar and populating it.
// Note the difference between BeginMainMenuBar() and BeginMenuBar():
// - BeginMenuBar() = menu-bar inside current window we Begin()-ed into (the window needs the ImGuiWindowFlags_MenuBar flag)
// - BeginMainMenuBar() = helper to create menu-bar-sized window at the top of the main viewport + call BeginMenuBar() into it.
// Disabled item
// Note that shortcuts are currently provided for display only (future version will add flags to BeginMenu to process shortcuts)
// Disabled
//-----------------------------------------------------------------------------
// [SECTION] Example App: Debug Console / ShowExampleAppConsole()
//-----------------------------------------------------------------------------
// Demonstrate creating a simple console window, with scrolling, filtering, completion and history.
// For the console example, here we are using a more C++ like approach of declaring a class to hold the data and the functions.
// -1: new line, 0..History.Size-1 browsing history.
// "classify" is only here to provide an example of "C"+[tab] completing to "CL" and displaying matches.
// Portable helpers
// FIXME-OPT
// As a specific feature guaranteed by the library, after calling Begin() the last Item represent the title bar. So e.g. IsItemHovered() will return true when hovering the title bar.
// Here we create a context menu only available from the title bar.
// TODO: display items starting from the bottom
//static float t = 0.0f; if (ImGui::GetTime() - t > 0.02f) { t = ImGui::GetTime(); AddLog("Spam %f", t); }
// Options menu
// Options, Filter
// 1 separator, 1 input text
// Leave room for 1 separator + 1 InputText
// Display every line as a separate entry so we can change their color or add custom widgets. If you only want raw text you can use ImGui::TextUnformatted(log.begin(), log.end());
// NB- if you have thousands of entries this approach may be too inefficient and may require user-side clipping to only process visible items.
// You can seek and display only the lines that are visible using the ImGuiListClipper helper, if your elements are evenly spaced and you have cheap random access to the elements.
// To use the clipper we could replace the 'for (int i = 0; i < Items.Size; i++)' loop with:
//     ImGuiListClipper clipper(Items.Size);
//     while (clipper.Step())
//         for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
// However, note that you can not use this code as is if a filter is active because it breaks the 'cheap random-access' property. We would need random-access on the post-filtered list.
// A typical application wanting coarse clipping and filtering may want to pre-compute an array of indices that passed the filtering test, recomputing this array when user changes the filter,
// and appending newly elements as they are inserted. This is left as a task to the user until we can manage to improve this example code!
// If your items are of variable size you may want to implement code similar to what ImGuiListClipper does. Or split your data into fixed height items to allow random-seeking into your list.
// Tighten spacing
// Normally you would store more information in your item (e.g. make Items[] an array of structure, store color/type etc.)
// Command-line
// Auto-focus on window apparition
// Auto focus previous widget
// Insert into history. First find match and delete it so it can be pushed to the back. This isn't trying to be smart or optimal.
// Process command
// On commad input, we scroll to bottom even if AutoScroll==false
// In C++11 you are better off using lambdas for this sort of forwarding callbacks
//AddLog("cursor: %d, selection: %d-%d", data->CursorPos, data->SelectionStart, data->SelectionEnd);
// Example of TEXT COMPLETION
// Locate beginning of current word
// Build a list of candidates
// No match
// Single match. Delete the beginning of the word and replace it entirely so we've got nice casing
// Multiple matches. Complete as much as we can, so inputing "C" will complete to "CL" and display "CLEAR" and "CLASSIFY"
// List matches
// Example of HISTORY
// A better implementation would preserve the data on the current input line along with cursor position.
//-----------------------------------------------------------------------------
// [SECTION] Example App: Debug Log / ShowExampleAppLog()
//-----------------------------------------------------------------------------
// Usage:
//  static ExampleAppLog my_log;
//  my_log.AddLog("Hello %d world\n", 123);
//  my_log.Draw("title");
// Index to lines offset. We maintain this with AddLog() calls, allowing us to have a random access on lines
// Keep scrolling if already at the bottom
// Options menu
// Main window
// In this example we don't use the clipper when Filter is enabled.
// This is because we don't have a random access on the result on our filter.
// A real application processing logs with ten of thousands of entries may want to store the result of search/filter.
// especially if the filtering function is not trivial (e.g. reg-exp).
// The simplest and easy way to display the entire buffer:
//   ImGui::TextUnformatted(buf_begin, buf_end);
// And it'll just work. TextUnformatted() has specialization for large blob of text and will fast-forward to skip non-visible lines.
// Here we instead demonstrate using the clipper to only process lines that are within the visible area.
// If you have tens of thousands of items and their processing cost is non-negligible, coarse clipping them on your side is recommended.
// Using ImGuiListClipper requires A) random access into your data, and B) items all being the  same height,
// both of which we can handle since we an array pointing to the beginning of each line of text.
// When using the filter (in the block of code above) we don't have random access into the data to display anymore, which is why we don't use the clipper.
// Storing or skimming through the search result would make it possible (and would be recommended if you want to search through tens of thousands of entries)
// Demonstrate creating a simple log window with basic filtering.
// For the demo: add a debug button _BEFORE_ the normal log window contents
// We take advantage of a rarely used feature: multiple calls to Begin()/End() are appending to the _same_ window.
// Most of the contents of the window will be added by the log.Draw() call.
// Actually call in the regular Log helper (which will Begin() into the same window as we just did)
//-----------------------------------------------------------------------------
// [SECTION] Example App: Simple Layout / ShowExampleAppLayout()
//-----------------------------------------------------------------------------
// Demonstrate create a window with multiple child windows.
// left
// right
// Leave room for 1 line below us
//-----------------------------------------------------------------------------
// [SECTION] Example App: Property Editor / ShowExampleAppPropertyEditor()
//-----------------------------------------------------------------------------
// Demonstrate create a simple property editor.
// Use object uid as identifier. Most commonly you could also use the object pointer as a base ID.
// Text and Tree nodes are less high than regular widgets, here we add vertical spacing to make the tree lines equal high.
// Use field index as identifier.
// Here we use a TreeNode to highlight on hover (we could use e.g. Selectable as well)
// Iterate dummy objects with dummy members (all the same data)
//-----------------------------------------------------------------------------
// [SECTION] Example App: Long Text / ShowExampleAppLongText()
//-----------------------------------------------------------------------------
// Demonstrate/test rendering huge amount of text, and the incidence of clipping.
// Single call to TextUnformatted() with a big buffer
// Multiple calls to Text(), manually coarsely clipped - demonstrate how to use the ImGuiListClipper helper.
// Multiple calls to Text(), not clipped (slow)
//-----------------------------------------------------------------------------
// [SECTION] Example App: Auto Resize / ShowExampleAppAutoResize()
//-----------------------------------------------------------------------------
// Demonstrate creating a window which gets auto-resized according to its content.
// Pad with space to extend size horizontally
//-----------------------------------------------------------------------------
// [SECTION] Example App: Constrained Resize / ShowExampleAppConstrainedResize()
//-----------------------------------------------------------------------------
// Demonstrate creating a window with custom resize constraints.
// Helper functions to demonstrate programmatic constraints
// Vertical only
// Horizontal only
// Width > 100, Height > 100
// Width 400-500
// Height 400-500
// Always Square
// Fixed Step
//-----------------------------------------------------------------------------
// [SECTION] Example App: Simple Overlay / ShowExampleAppSimpleOverlay()
//-----------------------------------------------------------------------------
// Demonstrate creating a simple static window with no decoration + a context-menu to choose which corner of the screen to use.
// Transparent background
//-----------------------------------------------------------------------------
// [SECTION] Example App: Manipulating Window Titles / ShowExampleAppWindowTitles()
//-----------------------------------------------------------------------------
// Demonstrate using "##" and "###" in identifiers to manipulate ID generation.
// This apply to all regular items as well. Read FAQ section "How can I have multiple widgets with the same label? Can I have widget without a label? (Yes). A primer on the purpose of labels/IDs." for details.
// By default, Windows are uniquely identified by their title.
// You can use the "##" and "###" markers to manipulate the display/ID.
// Using "##" to display same title but have unique identifier.
// Using "###" to display a changing title but keep a static identifier "AnimatedTitle"
//-----------------------------------------------------------------------------
// [SECTION] Example App: Custom Rendering using ImDrawList API / ShowExampleAppCustomRendering()
//-----------------------------------------------------------------------------
// Demonstrate using the low-level ImDrawList to draw custom shapes.
// Tip: If you do a lot of custom rendering, you probably want to use your own geometrical types and benefit of overloaded operators, etc.
// Define IM_VEC2_CLASS_EXTRA in imconfig.h to create implicit conversions between your types and ImVec2/ImVec4.
// ImGui defines overloaded operators but they are internal to imgui.cpp and not exposed outside (to avoid messing with your types)
// In this example we are not using the maths operators!
// Primitives
// First line uses a thickness of 1.0f, second line uses the configurable thickness
// n-gon
// Circle
// Square
// Square with all rounded corners
// Square with two rounded corners
// Triangle
// Thin triangle
// Horizontal line (note: drawing a filled rectangle will be faster!)
// Vertical line (note: drawing a filled rectangle will be faster!)
// Diagonal line
// n-gon
// Circle
// Square
// Square with all rounded corners
// Square with two rounded corners
// Triangle
// Thin triangle
// Horizontal line (faster than AddLine, but only handle integer thickness)
// Vertical line (faster than AddLine, but only handle integer thickness)
// Pixel (faster than AddLine)
// Here we are using InvisibleButton() as a convenience to 1) advance the cursor and 2) allows us to use IsItemHovered()
// But you can also draw directly and poll mouse/keyboard by yourself. You can manipulate the cursor using GetCursorPos() and SetCursorPos().
// If you only use the ImDrawList API, you can notify the owner window of its extends by using SetCursorPos(max).
// ImDrawList API uses screen coordinates!
// Resize canvas to what's available
// clip lines within the canvas (if we resize it, etc.)
//-----------------------------------------------------------------------------
// [SECTION] Example App: Documents Handling / ShowExampleAppDocuments()
//-----------------------------------------------------------------------------
// Simplified structure to mimic a Document model
// Document title
// Set when the document is open (in this demo, we keep an array of all available documents to simplify the demo)
// Copy of Open from last update.
// Set when the document has been modified
// Set when the document
// An arbitrary variable associated to the document
// Display dummy contents for the Document
// Useful to test drag and drop and hold-dragged-to-open-tab behavior.
// Display context menu for the Document
// [Optional] Notify the system of Tabs/Windows closure that happened outside the regular tab interface.
// If a tab has been closed programmatically (aka closed from another source such as the Checkbox() in the demo, as opposed
// to clicking on the regular tab closing button) and stops being submitted, it will take a frame for the tab bar to notice its absence.
// During this frame there will be a gap in the tab bar, and if the tab that has disappeared was the selected one, the tab bar
// will report no selected tab during the frame. This will effectively give the impression of a flicker for one frame.
// We call SetTabItemClosed() to manually notify the Tab Bar or Docking system of removed tabs to avoid this glitch.
// Note that this completely optional, and only affect tab bars with the ImGuiTabBarFlags_Reorderable flag.
// Options
// Menu
// [Debug] List documents with one checkbox for each
// Submit Tab Bar and Tabs
// [DEBUG] Stress tests
//if ((ImGui::GetFrameCount() % 30) == 0) docs[1].Open ^= 1;            // [DEBUG] Automatically show/hide a tab. Test various interactions e.g. dragging with this on.
//if (ImGui::GetIO().KeyCtrl) ImGui::SetTabItemSelected(docs[1].Name);  // [DEBUG] Test SetTabItemSelected(), probably not very useful as-is anyway..
// Submit Tabs
// Cancel attempt to close when unsaved add to save queue so we can display a popup.
// Update closing queue
// Close queue is locked once we started a popup
// Display closing confirmation UI
// Close documents when all are unsaved
// End of Demo code
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\imgui_draw.cpp
// dear imgui, v1.75 WIP
// (drawing and font code)
/*
// [SECTION] STB libraries implementation
// [SECTION] Style functions
// [SECTION] ImDrawList
// [SECTION] ImDrawListSplitter
// [SECTION] ImDrawData
// [SECTION] Helpers ShadeVertsXXX functions
// [SECTION] ImFontConfig
// [SECTION] ImFontAtlas
// [SECTION] ImFontAtlas glyph ranges helpers
// [SECTION] ImFontGlyphRangesBuilder
// [SECTION] ImFont
// [SECTION] Internal Render Helpers
// [SECTION] Decompression code
// [SECTION] Default font data (ProggyClean.ttf)
// vsnprintf, sscanf, printf
// alloca (glibc uses <alloca.h>. Note that Cygwin may have _WIN32 defined, so the order matters here)
// alloca
// for clang with MS Codegen
// alloca
// Visual Studio warnings
// condition expression is constant
// unreferenced local function has been removed (stb stuff)
// 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
// Clang/GCC warnings with -Weverything
// warning : use of old-style cast                              // yes, they are more terse.
// warning : comparing floating point with == or != is unsafe   // storing and comparing against same constants ok.
// warning : declaration requires a global destructor           // similar to above, not sure what the exact difference is.
// warning : implicit conversion changes signedness             //
// warning : zero as null pointer constant              // some standard header variations use #define NULL 0
// warning : possible misuse of comma operator here             //
// warning : macro name is a reserved identifier                //
// warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.
// warning: unknown option after '#pragma GCC diagnostic' kind
// warning: 'xxxx' defined but not used
// warning: implicit conversion from 'float' to 'double' when passing argument to function
// warning: conversion to 'xxxx' from 'xxxx' may alter its value
// warning: stack protector not protecting local variables: variable length buffer
// [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
//-------------------------------------------------------------------------
// [SECTION] STB libraries implementation
//-------------------------------------------------------------------------
// Compile time options:
//#define IMGUI_STB_NAMESPACE           ImStb
//#define IMGUI_STB_TRUETYPE_FILENAME   "my_folder/stb_truetype.h"
//#define IMGUI_STB_RECT_PACK_FILENAME  "my_folder/stb_rect_pack.h"
//#define IMGUI_DISABLE_STB_TRUETYPE_IMPLEMENTATION
//#define IMGUI_DISABLE_STB_RECT_PACK_IMPLEMENTATION
// declaration of 'xx' hides previous local declaration
// warning : cast from 'const xxxx *' to 'xxx *' drops const qualifier //
// warning: comparison is always true due to limited range of data type [-Wtype-limits]
// warning: cast from type 'const xxxx *' to type 'xxxx *' casts away qualifiers
// in case the user already have an implementation in the _same_ compilation unit (e.g. unity builds)
// in case the user already have an implementation in the _same_ compilation unit (e.g. unity builds)
// namespace ImStb
//-----------------------------------------------------------------------------
// [SECTION] Style functions
//-----------------------------------------------------------------------------
// Those light colors are better suited with a thicker font than the default one + FrameBorder
//-----------------------------------------------------------------------------
// ImDrawList
//-----------------------------------------------------------------------------
// Const data
// Using macros because C++ is a terrible language, we want guaranteed inline, no code in header, and no overhead in Debug builds
// Force a new command after us (see comment below)
// Our scheme may appears a bit unusual, basically we want the most-common calls AddLine AddRect etc. to not have to perform any check so we always have a command ready in the stack.
// The cost of figuring out if a new command has to be added or if we can merge is paid in those Update** functions only.
// If current command is used with different settings we need to add a new command
// Try to merge with previous command if it matches, else use current command
// If current command is used with different settings we need to add a new command
// Try to merge with previous command if it matches, else use current command
// Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
// Reserve space for a number of vertices and indices.
// You must finish filling your reserved data before calling PrimReserve() again, as it may reallocate or
// submit the intermediate results. PrimUnreserve() can be used to release unused allocations.
// Large mesh support (when enabled)
// Release the a number of reserved vertices/indices from the end of the last reservation made with PrimReserve().
// Fully unrolled with inline call to keep our debug builds decently fast.
// On AddPolyline() and AddConvexPolyFilled() we intentionally avoid using ImVec2 and superflous function calls to optimize debug/non-inlined builds.
// Those macros expects l-values.
// TODO: Thickness anti-aliased lines cap are missing their AA fringe.
// We avoid using the ImVec2 math operators here to reduce cost to a minimum for debug/non-inlined builds.
// Anti-aliased stroke
// Temporary buffer
//-V630
// FIXME-OPT: Merge the different loops, possibly remove the temporary buffer.
// Average normals
// Add temporary vertexes
// Add indexes
// Add vertexes
// FIXME-OPT: Merge the different loops, possibly remove the temporary buffer.
// Average normals
// Add temporary vertexes
// Add indexes
// Add vertexes
// Non Anti-aliased Stroke
// FIXME-OPT: Not sharing edges
// We intentionally avoid using ImVec2 and its math operators here to reduce cost to a minimum for debug/non-inlined builds.
// Anti-aliased Fill
// Add indexes for fill
// Compute normals
//-V630
// Average normals
// Add vertices
// Inner
// Outer
// Add indexes for fringes
// Non Anti-aliased Fill
// Note that we are adding a point at both a_min and a_max.
// If you are trying to draw a full closed circle you don't want the overlapping points!
// Closely mimics BezierClosestPointCasteljauStep() in imgui.cpp
// Auto-tessellated
// p_min = upper-left, p_max = lower-right
// Note we don't render 1 pixels sized rectangles properly.
// Better looking lower-right corner and rounded non-AA shapes.
// p_min = upper-left, p_max = lower-right
// Because we are filling a closed shape we remove 1 from the count of segments/points
// Because we are filling a closed shape we remove 1 from the count of segments/points
// Guaranteed to honor 'num_segments'
// Because we are filling a closed shape we remove 1 from the count of segments/points
// Guaranteed to honor 'num_segments'
// Because we are filling a closed shape we remove 1 from the count of segments/points
// Cubic Bezier takes 4 controls points
// Pull default font/size from the shared ImDrawListSharedData instance
// Use high-level ImGui::PushFont() or low-level ImDrawList::PushTextureId() to change font.
//-----------------------------------------------------------------------------
// ImDrawListSplitter
//-----------------------------------------------------------------------------
// FIXME: This may be a little confusing, trying to be a little too low-level/optimal instead of just doing vector swap..
//-----------------------------------------------------------------------------
// Current channel is a copy of CmdBuffer/IdxBuffer, don't destruct again
// Channels[] (24/32 bytes each) hold storage that we'll swap with draw_list->_CmdBuffer/_IdxBuffer
// The content of Channels[0] at this point doesn't matter. We clear it to make state tidy in a debugger but we don't strictly need to.
// When we switch to the next channel, we'll copy draw_list->_CmdBuffer/_IdxBuffer into Channels[0] and then Channels[1] into draw_list->CmdBuffer/_IdxBuffer
// Note that we never use or rely on channels.Size because it is merely a buffer that we never shrink back to 0 to keep all sub-buffers ready for use.
// Calculate our final buffer sizes. Also fix the incorrect IdxOffset values in each command.
// Merge previous channel last draw command with current channel first draw command if matching.
// FIXME-OPT: Improve for multiple merges.
// Write commands and indices in order (they are fairly small structures, we don't copy vertices only indices)
// We call this instead of AddDrawCmd(), so that empty channels won't produce an extra draw call.
// Overwrite ImVector (12/16 bytes), four times. This is merely a silly optimization instead of doing .swap()
//-----------------------------------------------------------------------------
// [SECTION] ImDrawData
//-----------------------------------------------------------------------------
// For backward compatibility: convert all buffers from indexed to de-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!
// Helper to scale the ClipRect field of each ImDrawCmd.
// Use if your final output buffer is at a different scale than draw_data->DisplaySize,
// or if there is a difference between your window resolution and framebuffer resolution.
//-----------------------------------------------------------------------------
// [SECTION] Helpers ShadeVertsXXX functions
//-----------------------------------------------------------------------------
// Generic linear color gradient, write to RGB fields, leave A untouched.
// Distribute UV over (a, b) rectangle
//-----------------------------------------------------------------------------
// [SECTION] ImFontConfig
//-----------------------------------------------------------------------------
// FIXME: 2 may be a better default?
//-----------------------------------------------------------------------------
// [SECTION] ImFontAtlas
//-----------------------------------------------------------------------------
// A work of art lies ahead! (. = white layer, X = black layer, others are blank)
// The white texels on the top left are the ones we'll use everywhere in Dear ImGui to render filled shapes.
// Pos ........ Size ......... Offset ......
// ImGuiMouseCursor_Arrow
// ImGuiMouseCursor_TextInput
// ImGuiMouseCursor_ResizeAll
// ImGuiMouseCursor_ResizeNS
// ImGuiMouseCursor_ResizeEW
// ImGuiMouseCursor_ResizeNESW
// ImGuiMouseCursor_ResizeNWSE
// ImGuiMouseCursor_Hand
// When clearing this we lose access to the font name and other information used to build the font.
// Build atlas on demand
// Convert to RGBA32 format on demand
// Although it is likely to be the most commonly used format, our font rendering is 1 channel / 8 bpp
// Create new font
// When using MergeMode make sure that a font has already been added before. You can use ImGui::GetIO().Fonts->AddFontDefault() to add the default imgui font.
// Invalidate texture
// Default font TTF is compressed with stb_compress then base85 encoded (see misc/fonts/binary_to_compressed_c.cpp for encoder)
// We can't assume little-endianness.
// Load embedded ProggyClean.ttf at size 13, disable oversampling
// Store a short copy of filename into into the font name for convenience
// NB: Transfer ownership of 'ttf_data' to ImFontAtlas, unless font_cfg_template->FontDataOwnedByAtlas == false. Owned TTF buffer will be deleted after Build().
// Breaking change on 2019/11/21 (1.74): ImFontAtlas::AddCustomRectRegular() now requires an ID >= 0x110000 (instead of >= 0x10000)
// Return index
// Return index
// Font atlas needs to be built before we can calculate UV coordinates
// Make sure the rectangle has been packed
// Temporary data for one source font (multiple source fonts can be merged into one destination ImFont)
// (C++03 doesn't allow instancing ImVector<> with function-local types so we declare the type here.)
// Hold the list of codepoints to pack (essentially points to Codepoints.Data)
// Rectangle to pack. We first fill in their size and the packer will give us their position.
// Output glyphs
// Ranges as requested by user (user is allowed to request too much, e.g. 0x0020..0xFFFF)
// Index into atlas->Fonts[] and dst_tmp_array[]
// Highest requested codepoint
// Glyph count (excluding missing glyphs and glyphs already set by an earlier source font)
// Glyph bit map (random access, 1-bit per codepoint. This will be a maximum of 8KB)
// Glyph codepoints list (flattened version of GlyphsMap)
// Temporary data for one destination ImFont* (multiple source fonts can be merged into one destination ImFont)
// Number of source fonts targeting this destination font.
// This is used to resolve collision when multiple sources are merged into a same destination font.
// Clear atlas
// Temporary storage for building
// 1. Initialize font loading structure, check font data validity
// Find index from cfg.DstFont (we allow the user to set cfg.DstFont. Also it makes casual debugging nicer than when storing indices)
// cfg.DstFont not pointing within atlas->Fonts[] array?
// Initialize helper structure for font loading and verify that the TTF/OTF data is correct
// Measure highest codepoints
// 2. For every requested codepoint, check for their presence in the font data, and handle redundancy or overlaps between source fonts to avoid unused glyphs.
// Don't overwrite existing glyphs. We could make this an option for MergeMode (e.g. MergeOverwrite==true)
// It is actually in the font?
// Add to avail set/counters
// 3. Unpack our bit map into a flat list (we now have all the Unicode points that we know are requested _and_ available _and_ not overlapping another)
// Allocate packing character data and flag packed characters buffer as non-packed (x0=y0=x1=y1=0)
// (We technically don't need to zero-clear buf_rects, but let's do it for the sake of sanity)
// 4. Gather glyphs sizes so we can pack them in our virtual canvas.
// Convert our ranges in the format stb_truetype wants
// Gather the sizes of all rectangles we will need to pack (this loop is based on stbtt_PackFontRangesGatherRects)
// We need a width for the skyline algorithm, any width!
// The exact width doesn't really matter much, but some API/GPU have texture size limitations and increasing width can decrease height.
// User can override TexDesiredWidth and TexGlyphPadding if they wish, otherwise we use a simple heuristic to select the width based on expected surface.
// 5. Start packing
// Pack our extra data rectangles first, so it will be on the upper-left corner of our texture (UV will have small values).
// 6. Pack each source font. No rendering yet, we are working with rectangles in an infinitely tall texture at this point.
// Extend texture height and mark missing glyphs as non-packed so we won't render them.
// FIXME: We are not handling packing failure here (would happen if we got off TEX_HEIGHT_MAX or if a single if larger than TexWidth?)
// 7. Allocate texture
// 8. Render/rasterize font characters into the texture
// Apply multiply operator
// End packing
// 9. Setup ImFont and glyphs for runtime
// We can have multiple input fonts writing into a same destination font (when using MergeMode=true)
// Register glyph
// Cleanup temporary (ImVector doesn't honor destructor)
// We expect at least the default custom rects to be registered, else something went wrong.
// Render/copy pixels
// Render into our custom data block
// Register custom rectangle glyphs
// Build all fonts lookup tables
// Ellipsis character is required for rendering elided text. We prefer using U+2026 (horizontal ellipsis).
// However some old fonts may contain ellipsis at U+0085. Here we auto-detect most suitable ellipsis character.
// FIXME: Also note that 0x2026 is currently seldomly included in our font ranges. Because of this we are more likely to use three individual dots.
// Verify glyph exists
// Retrieve list of range (2 int per range, values are inclusive)
// Basic Latin + Latin Supplement
// Basic Latin + Latin Supplement
// Korean alphabets
// Korean characters
// Basic Latin + Latin Supplement
// General Punctuation
// CJK Symbols and Punctuations, Hiragana, Katakana
// Katakana Phonetic Extensions
// Half-width characters
// CJK Ideograms
//-------------------------------------------------------------------------
// [SECTION] ImFontAtlas glyph ranges helpers
//-------------------------------------------------------------------------
// Store 2500 regularly used characters for Simplified Chinese.
// Sourced from https://zh.wiktionary.org/wiki/%E9%99%84%E5%BD%95:%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E5%B8%B8%E7%94%A8%E5%AD%97%E8%A1%A8
// This table covers 97.97% of all characters used during the month in July, 1987.
// You can use ImFontGlyphRangesBuilder to create your own ranges derived from this, by merging existing ranges or adding new characters.
// (Stored as accumulative offsets from the initial unicode codepoint 0x4E00. This encoding is designed to helps us compact the source code size.)
// not zero-terminated
// Basic Latin + Latin Supplement
// General Punctuation
// CJK Symbols and Punctuations, Hiragana, Katakana
// Katakana Phonetic Extensions
// Half-width characters
// 1946 common ideograms code points for Japanese
// Sourced from http://theinstructionlimit.com/common-kanji-character-ranges-for-xna-spritefont-rendering
// FIXME: Source a list of the revised 2136 Joyo Kanji list from 2010 and rebuild this.
// You can use ImFontGlyphRangesBuilder to create your own ranges derived from this, by merging existing ranges or adding new characters.
// (Stored as accumulative offsets from the initial unicode codepoint 0x4E00. This encoding is designed to helps us compact the source code size.)
// not zero-terminated
// Basic Latin + Latin Supplement
// CJK Symbols and Punctuations, Hiragana, Katakana
// Katakana Phonetic Extensions
// Half-width characters
// Basic Latin + Latin Supplement
// Cyrillic + Cyrillic Supplement
// Cyrillic Extended-A
// Cyrillic Extended-B
// Basic Latin
// Punctuations
// Thai
// Basic Latin
//-----------------------------------------------------------------------------
// [SECTION] ImFontGlyphRangesBuilder
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// [SECTION] ImFont
//-----------------------------------------------------------------------------
// -1 is reserved
// Create a glyph to handle TAB
// FIXME: Needs proper TAB handling but it needs to be contextualized (or we could arbitrary say that each string starts at "column 0" ?)
// So we can call this function multiple times
// x0/y0/x1/y1 are offset from the character upper-left layout position, in pixels. Therefore x0/y0 are often fairly close to zero.
// Not to be mistaken with texture coordinates, which are held by u0/v0/u1/v1 in normalized format (0.0..1.0 on each texture axis).
// Bake spacing into AdvanceX
// Compute rough surface usage metrics (+1 to account for average padding, +0.99 to round)
// Currently this can only be called AFTER the font has been built, aka after calling ImFontAtlas::GetTexDataAs*() function.
// 'dst' already exists
// both 'dst' and 'src' don't exist -> no-op
// Simple word-wrapping for English, not full-featured. Please submit failing cases!
// FIXME: Much possible improvements (don't cut things like "word !", "word!!!" but cut within "word,,,,", more sensible support for punctuations, support for Unicode punctuations, etc.)
// For references, possible wrap point marked with ^
//  "aaa bbb, ccc,ddd. eee   fff. ggg!"
//      ^    ^    ^   ^   ^__    ^    ^
// List of hardcoded separators: .,;!?'"
// Skip extra blanks after a line returns (that includes not counting them in width computation)
// e.g. "Hello    world" --> "Hello" "World"
// Cut words that cannot possibly fit within one line.
// e.g.: "The tropical fish" with ~5 characters worth of width --> "The tr" "opical" "fish"
// We work with unscaled widths to avoid scaling every characters
// Allow wrapping after punctuation.
// We ignore blank width at the end of the line (they can be skipped)
// Words that cannot possibly fit within an entire line will be cut anywhere.
// FIXME-OPT: Need to avoid this.
// Calculate how far we can render. Requires two passes on the string data but keeps the code simple and not intrusive for what's essentially an uncommon feature.
// Wrap_width is too small to fit anything. Force displaying 1 character to minimize the height discontinuity.
// +1 may not be a character start point in UTF-8 but it's ok because we use s >= word_wrap_eol below
// Wrapping skips upcoming blanks
// Decode and advance source
// Malformed UTF-8?
// Match behavior of RenderText(), those 4 codepoints are hard-coded.
// ImGui:: functions generally already provides a valid text_end, so this is merely to handle direct calls.
// Align to be pixel perfect
// Fast-forward to first visible line
// For large text, scan for the last visible line in order to avoid over-reserving in the call to PrimReserve()
// Note that very large horizontal line will still be affected by the issue (e.g. a one megabyte string buffer without a newline will likely crash atm)
// Reserve vertices for remaining worse case (over-reserving is useful and easily amortized)
// Calculate how far we can render. Requires two passes on the string data but keeps the code simple and not intrusive for what's essentially an uncommon feature.
// Wrap_width is too small to fit anything. Force displaying 1 character to minimize the height discontinuity.
// +1 may not be a character start point in UTF-8 but it's ok because we use s >= word_wrap_eol below
// Wrapping skips upcoming blanks
// Decode and advance source
// Malformed UTF-8?
// break out of main loop
// Arbitrarily assume that both space and tabs are empty glyphs as an optimization
// We don't do a second finer clipping test on the Y axis as we've already skipped anything before clip_rect.y and exit once we pass clip_rect.w
// Render a character
// CPU side clipping used to fit text in their frame when the frame is too small. Only does clipping for axis aligned quads.
// We are NOT calling PrimRectUV() here because non-inlined causes too much overhead in a debug builds. Inlined here:
// Give back unused vertices (clipped ones, blanks) ~ this is essentially a PrimUnreserve() action.
// Same as calling shrink()
//-----------------------------------------------------------------------------
// [SECTION] Internal Render Helpers
// (progressively moved from imgui.cpp to here when they are redesigned to stop accessing ImGui global state)
//-----------------------------------------------------------------------------
// - RenderMouseCursor()
// - RenderArrowPointingAt()
// - RenderRectFilledRangeH()
//-----------------------------------------------------------------------------
// Render an arrow. 'pos' is position of the arrow tip. half_sz.x is length from base to tip. half_sz.y is length on each side.
// Fix warnings
//return (-0.69813170079773212f * x * x - 0.87266462599716477f) * x + 1.5707963267948966f; // Cheap approximation, may be enough for what we do.
// FIXME: Cleanup and move code to ImDrawList.
// We will == compare to this because we know this is the exact value ImAcos01 can return.
// BL
// TR
// BL
// TR
// TR
// BR
// TR
// BR
//-----------------------------------------------------------------------------
// [SECTION] Decompression code
//-----------------------------------------------------------------------------
// Compressed with stb_compress() then converted to a C array and encoded as base85.
// Use the program in misc/fonts/binary_to_compressed_c.cpp to create the array from a TTF file.
// The purpose of encoding as base85 instead of "0x00,0x01,..." style is only save on _source code_ size.
// Decompression from stb.h (public domain) by Sean Barrett https://github.com/nothings/stb/blob/master/stb.h
//-----------------------------------------------------------------------------
// INVERSE of memmove... write each byte before copying the next...
// use fewer if's for cases that expand small
/* *i >= 0x20 */ stb__lit(i+1, i[0] - 0x20 + 1), i += 1 + (i[0] - 0x20 + 1);
// more ifs for cases that expand large, since overhead is amortized
/*length*/)
// error! stream is > 4GB
/* NOTREACHED */
//-----------------------------------------------------------------------------
// [SECTION] Default font data (ProggyClean.ttf)
//-----------------------------------------------------------------------------
// ProggyClean.ttf
// Copyright (c) 2004, 2005 Tristan Grimmer
// MIT license (see License.txt in http://www.upperbounds.net/download/ProggyClean.ttf.zip)
// Download and more information at http://upperbounds.net
//-----------------------------------------------------------------------------
// File: 'ProggyClean.ttf' (41208 bytes)
// Exported using misc/fonts/binary_to_compressed_c.cpp (with compression + base85 string encoding).
// The purpose of encoding as base85 instead of "0x00,0x01,..." style is only save on _source code_ size.
//-----------------------------------------------------------------------------
//L[MkA#W@lK.N'[0#7RL_&#w+F%HtG9M#XL`N&.,GM4Pg;-<nLENhvx>-VsM.M0rJfLH2eTM`*oJMHRC`N"
/*JL(L-^(]$wIM`dPtOdGA,U3:w2M-0<q-]L_?^)1vw'.,MRsqVr.L;aN&#/EgJ)PBc[-f>+WomX2u7lqM2iEumMTcsF?-aT=Z-97UEnXglEn1K-bnEO`gu"
//MQ&ZDkKP)X<WSVL(68uVl&#c'[0#(s1X&xm$Y%B7*K:eDA323j998GXbA#pwMs-jgD$9QISB-A_(aN4xoFM^@C58D0+Q+q3n0#3U1InDjF682-SjMXJK)("
//c&iH&R8pRbA#Kjm%upV1g:"
/*JL]@*t7Bu_G3_7mp7<iaQjO@.kLg;x3B0lqp7Hf,^Ze7-##@/c58Mo(3;knp0%)A7?-W+eI'o8)b<"
//9@`b+?.TeN_&B8Ss?v;^Trk;f#YvJkl&w$]>-+k?'(<S:68tq*WoDfZu';mM?8X[ma8W%*`-=;D.(nc7/;"
//,]1?#`VY[Jr*3&&slRfLiVZJ:]?=K3Sw=[$=uRB?3xk48@aeg<Z'<$#4H)6,>e0jT6'N#(q%.O=?2S]u*(m<-"
//)>-k=m=*XnK$>=)72L]0I%>.G690a:$##<,);?;72#?x9+d;"
/*JL4tNR/,SVO3,aUw'DJN:)Ss;wGn9A32ijw%FL+Z0Fn.U9;reSq)bmI32U==5ALuG&#Vf1398/pVo"
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\imgui_widgets.cpp
// dear imgui, v1.75 WIP
// (widgets code)
/*
// [SECTION] Forward Declarations
// [SECTION] Widgets: Text, etc.
// [SECTION] Widgets: Main (Button, Image, Checkbox, RadioButton, ProgressBar, Bullet, etc.)
// [SECTION] Widgets: Low-level Layout helpers (Spacing, Dummy, NewLine, Separator, etc.)
// [SECTION] Widgets: ComboBox
// [SECTION] Data Type and Data Formatting Helpers
// [SECTION] Widgets: DragScalar, DragFloat, DragInt, etc.
// [SECTION] Widgets: SliderScalar, SliderFloat, SliderInt, etc.
// [SECTION] Widgets: InputScalar, InputFloat, InputInt, etc.
// [SECTION] Widgets: InputText, InputTextMultiline
// [SECTION] Widgets: ColorEdit, ColorPicker, ColorButton, etc.
// [SECTION] Widgets: TreeNode, CollapsingHeader, etc.
// [SECTION] Widgets: Selectable
// [SECTION] Widgets: ListBox
// [SECTION] Widgets: PlotLines, PlotHistogram
// [SECTION] Widgets: Value helpers
// [SECTION] Widgets: MenuItem, BeginMenu, EndMenu, etc.
// [SECTION] Widgets: BeginTabBar, EndTabBar, etc.
// [SECTION] Widgets: BeginTabItem, EndTabItem, etc.
// [SECTION] Widgets: Columns, BeginColumns, EndColumns, etc.
// toupper
// MSVC 2008 or earlier
// intptr_t
// intptr_t
// Visual Studio warnings
// condition expression is constant
// 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
// Clang/GCC warnings with -Weverything
// warning : use of old-style cast                              // yes, they are more terse.
// warning : comparing floating point with == or != is unsafe   // storing and comparing against same constants (typically 0.0f) is ok.
// warning : format string is not a string literal              // passing non-literal to vsnformat(). yes, user passing incorrect format strings can crash the code.
// warning : implicit conversion changes signedness             //
// warning : zero as null pointer constant              // some standard header variations use #define NULL 0
// warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.
// warning: unknown option after '#pragma GCC diagnostic' kind
// warning: format not a string literal, format string not checked
// [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
//-------------------------------------------------------------------------
// Data
//-------------------------------------------------------------------------
// Those MIN/MAX values are not define because we need to point to them
// (-2147483647 - 1), (0x80000000);
// (2147483647), (0x7FFFFFFF)
// (0xFFFFFFFF)
// (-9223372036854775807ll - 1ll);
// (9223372036854775807ll);
// (0xFFFFFFFFFFFFFFFFull);
//-------------------------------------------------------------------------
// [SECTION] Forward Declarations
//-------------------------------------------------------------------------
// For InputTextEx()
//-------------------------------------------------------------------------
// [SECTION] Widgets: Text, etc.
//-------------------------------------------------------------------------
// - TextEx() [Internal]
// - TextUnformatted()
// - Text()
// - TextV()
// - TextColored()
// - TextColoredV()
// - TextDisabled()
// - TextDisabledV()
// - TextWrapped()
// - TextWrappedV()
// - LabelText()
// - LabelTextV()
// - BulletText()
// - BulletTextV()
//-------------------------------------------------------------------------
// FIXME-OPT
// Long text!
// Perform manual coarse clipping to optimize for long multi-line text
// - From this point we will only compute the width of lines that are visible. Optimization only available when word-wrapping is disabled.
// - We also don't vertically center the text within the line full height, which is unlikely to matter because we are likely the biggest and only item on the line.
// - We use memchr(), pay attention that well optimized versions of those str/mem functions are much faster than a casually written loop.
// Lines to skip (can't skip when logging text)
// Lines to render
// Count remaining lines
// Render (we don't hide text after ## in this end-user function)
// Keep existing wrap position if one is already set
// Add a label+text combo aligned to other label+value widgets
// Render
// Text with a little bullet aligned to the typical tree node.
// Empty text doesn't add padding
// Render
//-------------------------------------------------------------------------
// [SECTION] Widgets: Main
//-------------------------------------------------------------------------
// - ButtonBehavior() [Internal]
// - Button()
// - SmallButton()
// - InvisibleButton()
// - ArrowButton()
// - CloseButton() [Internal]
// - CollapseButton() [Internal]
// - ScrollbarEx() [Internal]
// - Scrollbar() [Internal]
// - Image()
// - ImageButton()
// - Checkbox()
// - CheckboxFlags()
// - RadioButton()
// - ProgressBar()
// - Bullet()
//-------------------------------------------------------------------------
// The ButtonBehavior() function is key to many interactions and used by many/most widgets.
// Because we handle so many cases (keyboard/gamepad navigation, drag and drop) and many specific behavior (via ImGuiButtonFlags_),
// this code is a little complex.
// By far the most common path is interacting with the Mouse using the default ImGuiButtonFlags_PressedOnClickRelease button behavior.
// See the series of events below and the corresponding state reported by dear imgui:
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnClickRelease:             return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+0 (mouse is outside bb)        -             -                -               -                  -                    -
//   Frame N+1 (mouse moves inside bb)      -             true             -               -                  -                    -
//   Frame N+2 (mouse button is down)       -             true             true            true               -                    true
//   Frame N+3 (mouse button is down)       -             true             true            -                  -                    -
//   Frame N+4 (mouse moves outside bb)     -             -                true            -                  -                    -
//   Frame N+5 (mouse moves inside bb)      -             true             true            -                  -                    -
//   Frame N+6 (mouse button is released)   true          true             -               -                  true                 -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//   Frame N+8 (mouse moves outside bb)     -             -                -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnClick:                    return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+2 (mouse button is down)       true          true             true            true               -                    true
//   Frame N+3 (mouse button is down)       -             true             true            -                  -                    -
//   Frame N+6 (mouse button is released)   -             true             -               -                  true                 -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnRelease:                  return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+2 (mouse button is down)       -             true             -               -                  -                    true
//   Frame N+3 (mouse button is down)       -             true             -               -                  -                    -
//   Frame N+6 (mouse button is released)   true          true             -               -                  -                    -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnDoubleClick:              return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+0 (mouse button is down)       -             true             -               -                  -                    true
//   Frame N+1 (mouse button is down)       -             true             -               -                  -                    -
//   Frame N+2 (mouse button is released)   -             true             -               -                  -                    -
//   Frame N+3 (mouse button is released)   -             true             -               -                  -                    -
//   Frame N+4 (mouse button is down)       true          true             true            true               -                    true
//   Frame N+5 (mouse button is down)       -             true             true            -                  -                    -
//   Frame N+6 (mouse button is released)   -             true             -               -                  true                 -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// Note that some combinations are supported,
// - PressedOnDragDropHold can generally be associated with any flag.
// - PressedOnDoubleClick can be associated by PressedOnClickRelease/PressedOnRelease, in which case the second release event won't be reported.
//------------------------------------------------------------------------------------------------------------------------------------------------
// The behavior of the return-value changes when ImGuiButtonFlags_Repeat is set:
//                                         Repeat+                  Repeat+           Repeat+             Repeat+
//                                         PressedOnClickRelease    PressedOnClick    PressedOnRelease    PressedOnDoubleClick
//-------------------------------------------------------------------------------------------------------------------------------------------------
//   Frame N+0 (mouse button is down)       -                        true              -                   true
//   ...                                    -                        -                 -                   -
//   Frame N + RepeatDelay                  true                     true              -                   true
//   ...                                    -                        -                 -                   -
//   Frame N + RepeatDelay + RepeatRate*N   true                     true              -                   true
//-------------------------------------------------------------------------------------------------------------------------------------------------
// Default behavior requires click+release on same spot
// Drag source doesn't report as hovered
// Special mode for Drag and Drop where holding button pressed for a long time while dragging another item triggers the button
// AllowOverlap mode (rarely used) requires previous frame HoveredId to be null or to match. This allows using patterns where a later submitted widget overlaps a previous one.
// Mouse
// Hold on ID
// Repeat mode trumps <on release>
// 'Repeat' mode acts when held regardless of _PressedOn flags (see table above).
// Relies on repeat logic of IsMouseClicked() but we may as well do it ourselves if we end up exposing finer RepeatDelay/RepeatRate settings.
// Gamepad/Keyboard navigation
// We report navigated item as hovered but we don't set g.HoveredId to not interfere with mouse.
// Set active id so it can be queried by user via IsItemActive(), equivalent of holding the mouse button.
// This is so SetActiveId assign a Nav source
// Repeat mode trumps <on release>
// Try to vertically align buttons that are smaller/have no padding so that text baseline matches (bit hacky, since it shouldn't be a flag)
// Render
// Automatically close popups
//if (pressed && !(flags & ImGuiButtonFlags_DontClosePopups) && (window->Flags & ImGuiWindowFlags_Popup))
//    CloseCurrentPopup();
// Small buttons fits within text without additional vertical spacing.
// Tip: use ImGui::PushID()/PopID() to push indices or pointers in the ID stack.
// Then you can keep 'str_id' empty or the same for all your buttons (instead of creating a string based on a non-string id)
// Cannot use zero-size for InvisibleButton(). Unlike Button() there is not way to fallback using the label size.
// Render
// Button to close a window
//, float size)
// We intentionally allow interaction when clipped so that a mechanical Alt,Right,Validate sequence close a window.
// (this isn't the regular behavior of buttons, but it doesn't affect the user much because navigation tends to keep items visible).
// Render
// Render
/*+ ImVec2(0.0f, -0.5f)*/, g.FontSize * 0.5f + 1.0f, bg_col, 12);
// Switch to moving the window after mouse is moved beyond the initial drag threshold
// Vertical/Horizontal scrollbar
// The entire piece of code below is rather confusing because:
// - We handle absolute seeking (when first clicking outside the grab) and relative manipulation (afterward or when clicking inside the grab)
// - We store values as normalized ratio and in a form that allows the window content to change while we are holding on a scrollbar
// - We handle both horizontal and vertical scrollbars, which makes the terminology not ideal.
// Still, the code should probably be made simpler..
// When we are too small, start hiding and disabling the grab (this reduce visual noise on very small window and facilitate using the resize grab)
// V denote the main, longer axis of the scrollbar (= height for a vertical scrollbar)
// Calculate the height of our grabbable box. It generally represent the amount visible (vs the total scrollable amount)
// But we maintain a minimum size in pixel to allow for the user to still aim inside.
// Adding this assert to check if the ImMax(XXX,1.0f) is still needed. PLEASE CONTACT ME if this triggers.
// Handle input right away. None of the code of Begin() is relying on scrolling position before calling Scrollbar().
// Click position in scrollbar normalized space (0.0f->1.0f)
// On initial click calculate the distance between mouse and the center of the grab
// Apply scroll
// It is ok to modify Scroll here because we are being called in Begin() after the calculation of ContentSize and before setting up our starting position
//(win_size_contents_v - win_size_v));
// Update values for rendering
// Update distance to grab now that we have seeked and saturated
// Render
// Calculate scrollbar bounding box
// frame_padding < 0: uses FramePadding from style (default)
// frame_padding = 0: no framing
// frame_padding > 0: set framing size
// The color used are the button colors.
// Default to using texture ID as ID. User can still push string/integer prefixes.
// We could hash the size/uv to create a unique ID but that would prevent the user from animating UV.
// Render
// Undocumented tristate/mixed/indeterminate checkbox (#2644)
// FIXME: This would work nicely if it was a public template, e.g. 'template<T> RadioButton(const char* label, T* v, T v_button)', but I'm not sure how we would expose it..
// size_arg (for each axis) < 0.0f: align to end, 0.0f: auto, > 0.0f: specified size
// Render
// Default displaying the fraction as percentage string, but user can override it
// Render and stay on same line
//-------------------------------------------------------------------------
// [SECTION] Widgets: Low-level Layout helpers
//-------------------------------------------------------------------------
// - Spacing()
// - Dummy()
// - NewLine()
// - AlignTextToFramePadding()
// - SeparatorEx() [Internal]
// - Separator()
// - SplitterBehavior() [Internal]
// - ShrinkWidths() [Internal]
//-------------------------------------------------------------------------
// In the event that we are on a line with items that is smaller that FontSize high, we will preserve its height.
// Horizontal/vertical separating line
// Check that only 1 option is selected
// Vertical separator, for menu bars (use current line height). Not exposed because it is misleading and it doesn't have an effect on regular layout.
// Draw
// Horizontal Separator
// We don't provide our width to the layout so that it doesn't get feed back into AutoFit
// Draw
// Those flags should eventually be overridable by the user
// Using 'hover_visibility_delay' allows us to hide the highlight and mouse cursor for a short time, which can be convenient to reduce visual noise.
// Minimum pane size
// Apply resize
// Render
// Shrink excess width from a set of item, by removing width from the larger items first.
// Round width and redistribute remainder left-to-right (could make it an option of the function?)
// Ensure that e.g. the right-most tab of a shrunk tab-bar always reaches exactly at the same distance from the right-most edge of the tab bar separator.
//-------------------------------------------------------------------------
// [SECTION] Widgets: ComboBox
//-------------------------------------------------------------------------
// - BeginCombo()
// - EndCombo()
// - Combo()
//-------------------------------------------------------------------------
// Always consume the SetNextWindowSizeConstraint() call in our early return paths
// Can't use both flags together
// Only one
// Recycle windows based on depth
// Peak into expected window size so we can position it
// We don't use BeginPopupEx() solely because we have a custom name string, which we could make an argument to BeginPopupEx()
// Horizontally align ourselves with the framed text
// This should never happen as we tested for IsPopupOpen() above
// Getter for the old Combo() API: const char*[]
// Getter for the old Combo() API: "item1\0item2\0item3\0"
// FIXME-OPT: we could pre-compute the indices to fasten this. But only 1 active combo means the waste is limited.
// Old API, prefer using BeginCombo() nowadays if you can.
// Call the getter to obtain the preview string which is a parameter to BeginCombo()
// The old Combo() API exposed "popup_max_height_in_items". The new more general BeginCombo() API doesn't have/need it, but we emulate it here.
// Display items
// FIXME-OPT: Use clipper (but we need to disable it on the appearing frame to make sure our call to SetItemDefaultFocus() is processed)
// Combo box helper allowing to pass an array of strings.
// Combo box helper allowing to pass all items in a single string literal holding multiple zero-terminated items "item1\0item2\0"
// FIXME-OPT: Avoid computing this, or at least only when combo is open
//-------------------------------------------------------------------------
// [SECTION] Data Type and Data Formatting Helpers [Internal]
//-------------------------------------------------------------------------
// - PatchFormatStringFloatToInt()
// - DataTypeGetInfo()
// - DataTypeFormatString()
// - DataTypeApplyOp()
// - DataTypeApplyOpFromText()
// - GetMinimumStepAtDecimalPrecision
// - RoundScalarWithFormat<>()
//-------------------------------------------------------------------------
// ImGuiDataType_S8
// ImGuiDataType_S16
// ImGuiDataType_S32
// ImGuiDataType_S64
// ImGuiDataType_S64
// ImGuiDataType_Float (float are promoted to double in va_arg)
// ImGuiDataType_Double
// FIXME-LEGACY: Prior to 1.61 our DragInt() function internally used floats and because of this the compile-time default value for format was "%.0f".
// Even though we changed the compile-time default, we expect users to have carried %f around, which would break the display of DragInt() calls.
// To honor backward compatibility we are rewriting the format string, unless IMGUI_DISABLE_OBSOLETE_FUNCTIONS is enabled. What could possibly go wrong?!
// Fast legacy path for "%.0f" which is expected to be the most common case.
// Find % (if any, and ignore %%)
// Find end of format specifier, which itself is an exercise of confidence/recklessness (because snprintf is dependent on libc or user).
// Honor leading and trailing decorations, but lose alignment/precision.
// Old versions used a default parameter of "%.0f", please replace with e.g. "%d"
// Signedness doesn't matter when pushing integer arguments
// User can input math operators (e.g. +100) to edit a numerical values.
// NB: This is _not_ a full expression evaluator. We should probably add one and replace this dumb mess..
// We don't support '-' op because it would conflict with inputing negative value.
// Instead you can use +-100 to subtract from an existing value
// Copy the value in an opaque buffer so we can compare at the end of the function if it changed at all.
// FIXME-LEGACY: The aim is to remove those operators and write a proper expression evaluator at some point..
// Store operand in a float so we can use fractional value for multipliers (*1.1), but constant always parsed as integer so we can fit big integers (e.g. 2000000003) past float precision
// Add (use "+-" to subtract)
// Multiply
// Divide
// Assign constant
// For floats we have to ignore format with precision (e.g. "%.2f") because sscanf doesn't take them in
// Add (use "+-" to subtract)
// Multiply
// Divide
// Assign constant
// scanf differentiate float/double unlike printf which forces everything to double because of ellipsis
// Add (use "+-" to subtract)
// Multiply
// Divide
// Assign constant
// All other types assign constant
// We don't bother handling support for legacy operators since they are a little too crappy. Instead we will later implement a proper expression evaluator in the future.
// Small types need a 32-bit buffer to receive the result from scanf()
// Don't apply if the value is not visible in the format string
//-------------------------------------------------------------------------
// [SECTION] Widgets: DragScalar, DragFloat, DragInt, etc.
//-------------------------------------------------------------------------
// - DragBehaviorT<>() [Internal]
// - DragBehavior() [Internal]
// - DragScalar()
// - DragScalarN()
// - DragFloat()
// - DragFloat2()
// - DragFloat3()
// - DragFloat4()
// - DragFloatRange2()
// - DragInt()
// - DragInt2()
// - DragInt3()
// - DragInt4()
// - DragIntRange2()
//-------------------------------------------------------------------------
// This is called by DragBehavior() when the widget is active (held by mouse or being manipulated with Nav controls)
// Default tweak speed
// Inputs accumulates into g.DragCurrentAccum, which is flushed into the current value as soon as it makes a difference with our precision settings
// For vertical drag we currently assume that Up=higher value (like we do with vertical sliders). This may become a parameter.
// Clear current value on activation
// Avoid altering values and clamping when we are _already_ past the limits and heading in the same direction, so e.g. if range is 0..255, current value is 300 and we are pushing to the right side, keep the 300.
// Offset + round to user desired precision, with a curve on the v_min..v_max range to get more precision on one side of the range
// Round to user desired precision based on format string
// Preserve remainder after rounding has been applied. This also allow slow tweaking of values.
// Lose zero sign for float/double
// Clamp values (+ handle overflow/wrap-around for integer types)
// Apply result
// Note: p_data, p_min and p_max are _pointers_ to a memory address holding the data. For a Drag widget, p_min and p_max are optional.
// Read code of e.g. SliderFloat(), SliderInt() etc. or examples in 'Demo->Widgets->Data Types' to understand how to use this function directly.
// When using a power curve the drag needs to have known bounds
// Default format string when passing NULL
// (FIXME-LEGACY: Patch old "%.0f" format string to use "%d", read function more details.)
// Tabbing or CTRL-clicking on Drag turns it into an input box
// Draw frame
// Drag behavior
// Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
// NB: v_speed is float to allow adjusting the drag speed with more precision
//-------------------------------------------------------------------------
// [SECTION] Widgets: SliderScalar, SliderFloat, SliderInt, etc.
//-------------------------------------------------------------------------
// - SliderBehaviorT<>() [Internal]
// - SliderBehavior() [Internal]
// - SliderScalar()
// - SliderScalarN()
// - SliderFloat()
// - SliderFloat2()
// - SliderFloat3()
// - SliderFloat4()
// - SliderAngle()
// - SliderInt()
// - SliderInt2()
// - SliderInt3()
// - SliderInt4()
// - VSliderScalar()
// - VSliderFloat()
// - VSliderInt()
//-------------------------------------------------------------------------
// Linear slider
// FIXME: Move some of the code into SliderBehavior(). Current responsability is larger than what the equivalent DragBehaviorT<> does, we also do some rendering, etc.
// v_range < 0 may happen on integer overflows
// For integer sliders: if possible have the grab size represent 1 unit
// For power curve sliders that cross over sign boundary we want the curve to be symmetric around 0.0f
// 0.0->1.0f
// Different sign
// Same sign
// Process interacting with the slider
// Gamepad/keyboard tweak speeds in % of slider bounds
// Gamepad/keyboard tweak speeds in integer steps
// This is to avoid applying the saturation when already past the limits
// Account for power curve scale on both sides of the zero
// Negative: rescale to the negative range before powering
// Positive: rescale to the positive range before powering
// Linear slider
// For integer values we want the clicking position to match the grab box so we round above
// This code is carefully tuned to work with large values (e.g. high ranges of U64) while preserving this property..
// Round to user desired precision based on format string
// Apply result
// Output grab position so it can be displayed by the caller
// For 32-bit and larger types, slider bounds are limited to half the natural type range.
// So e.g. an integer Slider between INT_MAX-10 and INT_MAX will fail, but an integer Slider between INT_MAX/2-10 and INT_MAX/2 will be ok.
// It would be possible to lift that limitation with some work but it doesn't seem to be worth it for sliders.
// Note: p_data, p_min and p_max are _pointers_ to a memory address holding the data. For a slider, they are all required.
// Read code of e.g. SliderFloat(), SliderInt() etc. or examples in 'Demo->Widgets->Data Types' to understand how to use this function directly.
// Default format string when passing NULL
// (FIXME-LEGACY: Patch old "%.0f" format string to use "%d", read function more details.)
// Tabbing or CTRL-clicking on Slider turns it into an input box
// Draw frame
// Slider behavior
// Render grab
// Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
// Add multiple sliders on 1 line for compact edition of multiple components
// Default format string when passing NULL
// (FIXME-LEGACY: Patch old "%.0f" format string to use "%d", read function more details.)
// Draw frame
// Slider behavior
// Render grab
// Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
// For the vertical slider we allow centered text to overlap the frame padding
//-------------------------------------------------------------------------
// [SECTION] Widgets: InputScalar, InputFloat, InputInt, etc.
//-------------------------------------------------------------------------
// - ImParseFormatFindStart() [Internal]
// - ImParseFormatFindEnd() [Internal]
// - ImParseFormatTrimDecorations() [Internal]
// - ImParseFormatPrecision() [Internal]
// - TempInputTextScalar() [Internal]
// - InputScalar()
// - InputScalarN()
// - InputFloat()
// - InputFloat2()
// - InputFloat3()
// - InputFloat4()
// - InputInt()
// - InputInt2()
// - InputInt3()
// - InputInt4()
// - InputDouble()
//-------------------------------------------------------------------------
// We don't use strchr() because our strings are usually very short and often start with '%'
// Printf/scanf types modifiers: I/L/h/j/l/t/w/z. Other uppercase letters qualify as types aka end of the format.
// Extract the format out of a format string with leading or trailing decorations
//  fmt = "blah blah"  -> return fmt
//  fmt = "%.3f"       -> return fmt
//  fmt = "hello %.3f" -> return fmt + 6
//  fmt = "%.3f hello" -> return buf written with "%.3f"
// If we only have leading decoration, we don't need to copy the data.
// Parse display precision back from the display format string
// FIXME: This is still used by some navigation code path to infer a minimum tweak step, but we should aim to rework widgets so it isn't needed.
// Maximum precision with scientific notation
// Create text input in place of another active widget (e.g. used when doing a CTRL+Click on drag/slider widgets)
// FIXME: Facilitate using this in variety of other situations.
// On the first frame, g.TempInputTextId == 0, then on subsequent frames it becomes == id.
// We clear ActiveID on the first frame to allow the InputText() taking it back.
// First frame we started displaying the InputText widget, we expect it to take the active id.
// Note: p_data, p_step, p_step_fast are _pointers_ to a memory address holding the data. For an Input widget, p_step and p_step_fast are optional.
// Read code of e.g. InputFloat(), InputInt() etc. or examples in 'Demo->Widgets->Data Types' to understand how to use this function directly.
// We call MarkItemEdited() ourselve by comparing the actual data rather than the string.
// The only purpose of the group here is to allow the caller to query item data e.g. IsItemActive()
// PushId(label) + "" gives us the expected ID from outside point of view
// Step buttons
// Prefer using "const char* format" directly, which is more flexible and consistent with other API.
// IMGUI_DISABLE_OBSOLETE_FUNCTIONS
// Hexadecimal input provided as a convenience but the flag name is awkward. Typically you'd use InputText() to parse your own data, if you want to handle prefixes.
//-------------------------------------------------------------------------
// [SECTION] Widgets: InputText, InputTextMultiline, InputTextWithHint
//-------------------------------------------------------------------------
// - InputText()
// - InputTextWithHint()
// - InputTextMultiline()
// - InputTextEx() [Internal]
//-------------------------------------------------------------------------
// call InputTextMultiline()
// call InputTextMultiline()
// We are only matching for \n so we can ignore UTF-8 decoding
// offset allow for the possibility of sitting after a trailing \n
// whereas size.y will ignore the trailing \n
// Wrapper for stb_textedit.h to edit text (our wrapper is for: statically sized buffer, single-line, wchar characters. InputText converts between UTF-8 and wchar)
// FIXME: Move setting to IO structure
// They need to be #define for stb_textedit.h
// We maintain our buffer length in both UTF-8 and wchar formats
// Offset remaining text (FIXME-OPT: Use memmove)
// Grow internal buffer if needed
// We don't use an enum so we can build even with conflicting symbols (if another user of stb_textedit.h leak their STB_TEXTEDIT_K_* symbols)
// keyboard input to move cursor left
// keyboard input to move cursor right
// keyboard input to move cursor up
// keyboard input to move cursor down
// keyboard input to move cursor to start of line
// keyboard input to move cursor to end of line
// keyboard input to move cursor to start of text
// keyboard input to move cursor to end of text
// keyboard input to delete selection or character under cursor
// keyboard input to delete selection or character left of cursor
// keyboard input to perform undo
// keyboard input to perform redo
// keyboard input to move cursor left one word
// keyboard input to move cursor right one word
// Public API to manipulate UTF-8 text
// We expose UTF-8 to the user (unlike the STB_TEXTEDIT_* functions which are manipulating wchar)
// FIXME: The existence of this rarely exercised code path is a bit of a nuisance.
// Contrary to STB_TEXTEDIT_INSERTCHARS() this is working in the UTF8 buffer, hence the midly similar code (until we remove the U16 buffer alltogether!)
// Return false to discard a character.
// Filter non-printable (NB: isprint is unreliable! see #2467)
// We ignore Ascii representation of delete (emitted from Backspace on OSX, see #2578, #2817)
// Filter private Unicode range. GLFW on OSX seems to send private characters for special keys like arrow keys (FIXME)
// Filter Unicode ranges we are not handling in this build.
// Generic named filters
// Custom callback filter
// Edit a string of text
// - buf_size account for the zero-terminator, so a buf_size of 6 can hold "Hello" but not "Hello!".
//   This is so we can easily call InputText() on static arrays using ARRAYSIZE() and to match
//   Note that in std::string world, capacity() would omit 1 byte used by the zero-terminator.
// - When active, hold on a privately held copy of the text (and apply back to 'buf'). So changing 'buf' while the InputText is active has no effect.
// - If you want to use ImGui::InputText() with std::string, see misc/cpp/imgui_stdlib.h
// (FIXME: Rather confusing and messy function, among the worse part of our codebase, expecting to rewrite a V2 at some point.. Partly because we are
//  doing UTF8 > U16 > UTF8 conversions on the go to easily interface with stb_textedit. Ideally should stay in UTF-8 all the time. See https://github.com/nothings/stb/issues/188)
// Can't use both together (they both use up/down keys)
// Can't use both together (they both use tab key)
// Must provide a callback if you set the ImGuiInputTextFlags_CallbackResize flag!
// Open group before calling GetID() because groups tracks id created within their scope,
// Arbitrary default of 8 lines high for multi-line
// Child window
// This is to ensure that EndChild() will display a navigation highlight
// NB: we are only allowed to access 'edit_state' if we are the active widget.
// Access state even if we don't own it yet.
// Take a copy of the initial buffer value (both in original UTF-8 format and converted to wchar)
// From the moment we focused we are ignoring the content of 'buf' (unless we are in read-only mode)
// UTF-8. we use +1 to make sure that .Data is always pointing to at least an empty string.
// Start edition
// wchar count <= UTF-8 count. we use +1 to make sure that .Data is always pointing to at least an empty string.
// TextA is not valid yet (we will display buf until then)
// We can't get the result from ImStrncpy() above because it is not UTF-8 aware. Here we'll cut off malformed UTF-8.
// Preserve cursor position and undo/redo stack if we come back to same widget
// FIXME: For non-readonly widgets we might be able to require that TextAIsValid && TextA == buf ? (untested) and discard undo stack if user buffer has changed.
// Recycle existing cursor/selection/undo stack but clamp position
// Note a single mouse click will override the cursor/position immediately by calling stb_textedit_click handler.
// Declare our inputs
// FIXME-NAV: Page up/down actually not supported yet by widget, but claim them ahead.
// Disable keyboard tabbing out as we will use the \t character.
// We have an edge case if ActiveId was set through another widget (e.g. widget being swapped), clear id immediately (don't wait until the end of the function)
// Release focus when we click outside
//-V560
// Lock the decision of whether we are going to take the path displaying the cursor or selection
// When read-only we always use the live data passed to the function
// FIXME-OPT: Because our selection/cursor code currently needs the wide text we need to convert it when active, which is not ideal :(
// Select the buffer to render.
// Password pushes a temporary font with only a fallback glyph
// Process mouse inputs and character inputs
// Although we are active we don't prevent mouse from hovering other elements unless we are interacting right now with the widget.
// Down the line we should have a cleaner library-wide concept of Selected vs Active.
// Edit in progress
// Double-click select a word only, OS X style (by simulating keystrokes)
// It is ill-defined whether the back-end needs to send a \t character when pressing the TAB keys.
// Win32 and GLFW naturally do it but not SDL.
// Insert TAB
// Process regular text input (before we check for Return because using some IME will effectively send a Return?)
// We ignore CTRL inputs, but need to allow ALT+CTRL as some keyboards (e.g. German) use AltGR (which _is_ Alt+Ctrl) to input certain characters.
// Insert character if they pass filtering
// Consume characters
// Process other shortcuts/key-presses
// OS X style: Shortcuts using Cmd/Super instead of Ctrl
// OS X style: Text editing cursor movement using Alt instead of Ctrl
// OS X style: Line/Text Start and End using Cmd+Arrows instead of Home/End
// Insert new line
// Cut, Copy
// Filter pasted buffer
// If everything was filtered, ignore the pasting operation
// Update render selection flag after events have been handled, so selection highlight can be displayed during the same frame.
// Process callbacks and apply result back to user's buffer.
// Restore initial value. Only return true if restoring to the initial value changes the current buffer contents.
// When using 'ImGuiInputTextFlags_EnterReturnsTrue' as a special case we reapply the live buffer back to the input buffer before clearing ActiveId, even though strictly speaking it wasn't modified on this frame.
// If we didn't do that, code like InputInt() with ImGuiInputTextFlags_EnterReturnsTrue would fail. Also this allows the user to use InputText() with ImGuiInputTextFlags_EnterReturnsTrue without maintaining any user-side storage.
// Apply new value immediately - copy modified buffer back
// Note that as soon as the input box is active, the in-widget value gets priority over any underlying modification of the input buffer
// FIXME: We actually always render 'buf' when calling DrawList->AddText, making the comment above incorrect.
// FIXME-OPT: CPU waste to do this every time the widget is active, should mark dirty state from the stb_textedit callbacks.
// User callback
// The reason we specify the usage semantic (Completion/History) is that Completion needs to disable keyboard TABBING at the moment.
// We have to convert from wchar-positions to UTF-8-positions, which can be pretty slow (an incentive to ditch the ImWchar buffer, see https://github.com/nothings/stb/issues/188)
// Call user code
// Read back what user may have modified
// Invalid to modify those fields
// You need to maintain BufTextLen if you change the text!
// Assume correct length and valid UTF-8 from user, saves us an extra strlen()
// Will copy result string if modified
// Copy result to user buffer
// If the underlying buffer resize was denied or not carried to the next frame, apply_new_text_length+1 may be >= buf_size.
// Clear temporary user storage
// Release active ID at the end of the function (so e.g. pressing Return still does a final application of the value)
// Render frame
// Not using frame_bb.Max because we have adjusted size
// Set upper limit of single-line InputTextEx() at 2 million characters strings. The current pathological worst case is a long line
// without any carriage return, which would makes ImFont::RenderText() reserve too many vertices and probably crash. Avoid it altogether.
// Note that we only use this limit on single-line InputText(), so a pathologically large line on a InputTextMultiline() would still crash.
//-V595
// We have specialized paths below for setting the length
// Render text. We currently only render selection when the widget is active or while scrolling.
// FIXME: We could remove the '&& render_cursor' to keep rendering selection when inactive.
// Render text (with cursor and selection)
// This is going to be messy. We need to:
// - Display the text (this alone can be more easily clipped)
// - Handle scrolling, highlight selection, display cursor (those all requires some form of 1d->2d cursor position calculation)
// - Measure text height (for scrollbar)
// We are attempting to do most of that in **one main pass** to minimize the computation cost (non-negligible for large amount of text) + 2nd pass for selection rendering (we could merge them by an extra refactoring effort)
// FIXME: This should occur on buf_display but we'd need to maintain cursor/select_start/select_end for UTF-8.
// Find lines numbers straddling 'cursor' (slot 0) and 'select_start' (slot 1) positions.
// Iterate all lines to find our line numbers
// In multi-line mode, we never exit the loop until all lines are counted, so add one extra to the searches_remaining counter.
//for (const ImWchar* s = text_begin; (s = (const ImWchar*)wcschr((const wchar_t*)s, (wchar_t)'\n')) != NULL; s++)  // FIXME-OPT: Could use this when wchar_t are 16-bit
// Calculate 2d position by finding the beginning of the line and measuring distance
// Store text height (note that we haven't calculated text width at all, see GitHub issues #383, #1224)
// Scroll
// Horizontal scroll in chunks of quarter width
// Vertical scroll
// Manipulate cursor pos immediately avoid a frame of lag
// Draw selection
// FIXME: current code flow mandate that render_cursor is always true here, we are leaving the transparent one for tests.
// FIXME: those offsets should be part of the style? they don't play so well with multi-line selection.
//p = (const ImWchar*)wmemchr((const wchar_t*)p, '\n', text_selected_end - p);  // FIXME-OPT: Could use this when wchar_t are 16-bit
//p = p ? p + 1 : text_selected_end;
// So we can see selected empty lines
// We test for 'buf_display_max_length' as a way to avoid some pathological cases (e.g. single-line 1 MB string) which would make ImDrawList crash.
// Draw blinking cursor
// Notify OS of text input position for advanced IME (-1 x offset so that Windows IME can cover our cursor. Bit of an extra nicety.)
// Render text only (no selection, no cursor)
// We don't need width
// Always add room to scroll an extra line
// Log as text
//-------------------------------------------------------------------------
// [SECTION] Widgets: ColorEdit, ColorPicker, ColorButton, etc.
//-------------------------------------------------------------------------
// - ColorEdit3()
// - ColorEdit4()
// - ColorPicker3()
// - RenderColorRectWithAlphaCheckerboard() [Internal]
// - ColorPicker4()
// - ColorButton()
// - SetColorEditOptions()
// - ColorTooltip() [Internal]
// - ColorEditOptionsPopup() [Internal]
// - ColorPickerOptionsPopup() [Internal]
//-------------------------------------------------------------------------
// Edit colors components (each component in 0.0f..1.0f range).
// See enum ImGuiColorEditFlags_ for available options. e.g. Only access 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
// With typical options: Left-click on colored square to open color picker. Right-click to open option menu. CTRL-Click over input fields to edit them and TAB to go to next item.
// If we're not showing any slider there's no point in doing any HSV conversions
// Context menu: display and modify options (before defaults are applied)
// Read stored options
// Check that only 1 is selected
// Check that only 1 is selected
// Convert to the formats we need
// Hue is lost when converting from greyscale rgb (saturation=0). Restore it.
// RGB/HSV 0..255 Sliders
// Short display
// Long display for RGBA
// Long display for HSVA
// Short display
// Long display for RGBA
// Long display for HSVA
// FIXME: When ImGuiColorEditFlags_HDR flag is passed HS values snap in weird ways when SV values go below 0.
// RGB Hexadecimal Input
// Treat at unsigned (%X is unsigned)
// Store current color and open a picker
// Use 256 + bar sizes?
// Convert back
// Drag and Drop Target
// NB: The flag test is merely an optional micro-optimization, BeginDragDropTarget() does the same test.
// Preserve alpha if any //-V512
// Drag-drop payloads are always RGB
// When picker is being actively used, use its active id so IsItemActive() will function on ColorEdit4().
// Helper for ColorPicker4()
// NB: This is rather brittle and will show artifact when rounding this enabled if rounded corners overlap multiple cells. Caller currently responsible for avoiding that.
// I spent a non reasonable amount of time trying to getting this right for ColorButton with rounding+anti-aliasing+ImGuiColorEditFlags_HalfAlphaPreview flag + various grid sizes and offsets, and eventually gave up... probably more reasonable to disable rounding alltogether.
// Helper for ColorPicker4()
// Note: ColorPicker4() only accesses 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
// (In C++ the 'float col[4]' notation for a function argument is equivalent to 'float* col', we only specify a size to facilitate understanding of the code.)
// FIXME: we adjust the big color square height based on item width, which may cause a flickering feedback loop (if automatic height makes a vertical scrollbar appears, affecting automatic width..)
// FIXME: this is trying to be aware of style.Alpha but not fully correct. Also, the color wheel will have overlapping glitches with (style.Alpha < 1.0)
// Context menu: display and store options.
// Read stored options
// Check that only 1 is selected
// Check that only 1 is selected
// Setup
// Arbitrary smallish width of Hue/Alpha picking bars
// Saturation/Value picking box
// Note: the triangle is displayed rotated with triangle_pa pointing to Hue, but most coordinates stays unrotated for logic.
// Hue point.
// Black point.
// White point.
// Hue is lost when converting from greyscale rgb (saturation=0). Restore it.
// Hue wheel + SV triangle logic
// Interactive with Hue wheel
// Interacting with SV triangle
// SV rectangle logic
// Hue bar logic
// Alpha bar logic
// ImGuiItemFlags_NoNav
// Convert back color to RGB
// R,G,B and H,S,V slider color editor
// FIXME: Hackily differenciating using the DragInt (ActiveId != 0 && !ActiveIdAllowOverlap) vs. using the InputText or DropTarget.
// For the later we don't want to run the hue-wrap canceling code. If you are well versed in HSV picker please provide your input! (See #2050)
// Try to cancel hue wrap (after ColorEdit4 call), if any
// Fix local Hue as display below will use it immediately.
// Important: this is still including the main rendering/style alpha!!
// Render Hue Wheel
// Half a pixel arc length in radians (2pi cancels out).
// Paint colors over existing vertices
// Render Cursor + preview on Hue Wheel
// Render SV triangle (rotated according to hue)
// Render SV Square
// Sneakily prevent the circle to stick out too much
// Render Hue Bar
// Render cursor/preview circle (clamp S/V within 0..1 range because floating points colors may lead HSV values to be out of range)
// Render alpha bar
// A little colored square. Return true when clicked.
// FIXME: May want to display/ignore the alpha component in the color display? Yet show it in the tooltip.
// 'desc_id' is not called 'label' because we don't display it next to the button, but only in the tooltip.
// Note that 'col' may be encoded in HSV if ImGuiColorEditFlags_InputHSV is set.
// The border (using Col_FrameBg) tends to look off when color is near-opaque and rounding is enabled. This offset seemed like a good middle ground to reduce those artifacts.
// Because GetColorU32() multiplies by the global style Alpha and we don't want to display a checkerboard if the source code had no alpha
// Color button are often in need of some sort of border
// Drag and Drop Source
// NB: The ActiveId test is merely an optional micro-optimization, BeginDragDropSource() does the same test.
// Tooltip
// Initialize/override default color options
// Check only 1 option is selected
// Check only 1 option is selected
// Check only 1 option is selected
// Check only 1 option is selected
// Note: only access 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
// FIXME: Picker size copied from main picker function
// Draw small/thumbnail version of each picker type (over an invisible button for selection)
// By default, Selectable() is closing popup
//-------------------------------------------------------------------------
// [SECTION] Widgets: TreeNode, CollapsingHeader, etc.
//-------------------------------------------------------------------------
// - TreeNode()
// - TreeNodeV()
// - TreeNodeEx()
// - TreeNodeExV()
// - TreeNodeBehavior() [Internal]
// - TreePush()
// - TreePop()
// - GetTreeNodeToLabelSpacing()
// - SetNextItemOpen()
// - CollapsingHeader()
//-------------------------------------------------------------------------
// We only write to the tree storage if the user clicks (or explicitly use the SetNextItemOpen function)
// We treat ImGuiCond_Once and ImGuiCond_FirstUseEver the same because tree node state are not saved persistently.
// When logging is enabled, we automatically expand tree nodes (but *NOT* collapsing headers.. seems like sensible behavior).
// NB- If we are above max depth we still allow manually opened nodes to be logged.
// We vertically grow up to current line height up the typical widget height.
// Framed header expand a little outside the default padding, to the edge of InnerClipRect
// (FIXME: May remove this at some point and make InnerClipRect align with WindowPadding.x instead of WindowPadding.x*0.5f)
// Collapser arrow width + Spacing
// Latch before ItemSize changes it
// Include collapser
// For regular tree nodes, we arbitrary allow to click past 2 worth of ItemSpacing
// Store a flag for the current depth to tell if we will allow closing this node when navigating one of its child.
// For this purpose we essentially compare if g.NavIdIsAlive went from 0 to 1 between TreeNode() and TreePop().
// This is currently only support 32 level deep and we are fine with (1 << Depth) overflowing into a zero.
// Flags that affects opening behavior:
// - 0 (default) .................... single-click anywhere to open
// - OpenOnDoubleClick .............. double-click anywhere to open
// - OpenOnArrow .................... single-click on arrow to open
// - OpenOnDoubleClick|OpenOnArrow .. single-click on arrow or double-click anywhere to open
// We allow clicking on the arrow section with keyboard modifiers held, in order to easily
// allow browsing a tree while preserving selection with code implementing multi-selection patterns.
// When clicking on the rest of the tree node we always disallow keyboard modifiers.
// Lightweight equivalent of IsMouseHoveringRect() since ButtonBehavior() already did the job
// When using Drag and Drop "hold to open" we keep the node highlighted after opening, but never close it again.
// If there's something upcoming on the line we may want to give it the priority?
// In this branch, TreeNodeBehavior() cannot toggle the selection so this will never trigger.
//-V547
// Render
// Framed type
// Leaf without bullet, left-adjusted text
// NB: '##' is normally used to hide text (as a library-wide feature), so we need to specify the text range to make sure the ## aren't stripped out here.
// Unframed typed for tree nodes
// Handle Left arrow to move to parent tree node (when ImGuiTreeNodeFlags_NavLeftJumpsBackHere is enabled)
// There should always be 1 element in the IDStack (pushed during window creation). If this triggers you called TreePop/PopID too much.
// Horizontal distance preceding label when using TreeNode() or Bullet()
// Set next TreeNode/CollapsingHeader open state.
// CollapsingHeader returns true when opened but do not indent nor push into the ID stack (because of the ImGuiTreeNodeFlags_NoTreePushOnOpen flag).
// This is basically the same as calling TreeNodeEx(label, ImGuiTreeNodeFlags_CollapsingHeader). You can remove the _NoTreePushOnOpen flag if you want behavior closer to normal TreeNode().
// Create a small overlapping close button
// FIXME: We can evolve this into user accessible helpers to add extra buttons on title bars, headers, etc.
// FIXME: CloseButton can overlap into text, need find a way to clip the text somehow.
//-------------------------------------------------------------------------
// [SECTION] Widgets: Selectable
//-------------------------------------------------------------------------
// - Selectable()
//-------------------------------------------------------------------------
// Tip: pass a non-visible label (e.g. "##dummy") then you can use the space to draw other text or image.
// But you need to make sure the ID is unique, e.g. enclose calls in PushID/PopID or use ##unique_id.
// FIXME-OPT: Avoid if vertically clipped.
// Fill horizontal space.
// Selectables are tightly packed together so we extend the box to cover spacing between selectable.
// We use NoHoldingActiveID on menus so user can click and _hold_ on a menu then drag to browse child entries
// Update NavId when clicking or when Hovering (this doesn't happen on most widgets), so navigation can be resumed with gamepad/keyboard
// In this branch, Selectable() cannot toggle the selection so this will never trigger.
//-V547
// Render
// Automatically close popups
//-------------------------------------------------------------------------
// [SECTION] Widgets: ListBox
//-------------------------------------------------------------------------
// - ListBox()
// - ListBoxHeader()
// - ListBoxFooter()
//-------------------------------------------------------------------------
// FIXME: This is an old API. We should redesign some of it, rename ListBoxHeader->BeginListBox, ListBoxFooter->EndListBox
// and promote using them over existing ListBox() functions, similarly to change with combo boxes.
//-------------------------------------------------------------------------
// FIXME: In principle this function should be called BeginListBox(). We should rename it after re-evaluating if we want to keep the same signature.
// Helper to calculate the size of a listbox and display a label on the right.
// Tip: To have a list filling the entire window width, PushItemWidth(-1) and pass an non-visible label e.g. "##empty"
// Size default to hold ~7 items. Fractional number of items helps seeing that we can scroll down/up without looking at scrollbar.
// Forward storage for ListBoxFooter.. dodgy.
// FIXME: In principle this function should be called EndListBox(). We should rename it after re-evaluating if we want to keep the same signature.
// Size default to hold ~7.25 items.
// We add +25% worth of item height to allow the user to see at a glance if there are more items up/down, without looking at the scrollbar.
// We don't add this extra bit if items_count <= height_in_items. It is slightly dodgy, because it means a dynamic list of items will make the widget resize occasionally when it crosses that size.
// I am expecting that someone will come and complain about this behavior in a remote future, then we can advise on a better solution.
// We include ItemSpacing.y so that a list sized for the exact number of items doesn't make a scrollbar appears. We could also enforce that by passing a flag to BeginChild().
// FIXME: In principle this function should be called EndListBox(). We should rename it after re-evaluating if we want to keep the same signature.
// Redeclare item size so that it includes the label (we have stored the full size in LastItemRect)
// We call SameLine() to restore DC.CurrentLine* data
// Assume all items have even height (= 1 line of text). If you need items of different or variable sizes you can create a custom version of ListBox() in your code without using the clipper.
// We know exactly our line height here so we pass it as a minor optimization, but generally you don't need to.
//-------------------------------------------------------------------------
// [SECTION] Widgets: PlotLines, PlotHistogram
//-------------------------------------------------------------------------
// - PlotEx() [Internal]
// - PlotLines()
// - PlotHistogram()
//-------------------------------------------------------------------------
// Determine scale from values if not specified
// Ignore NaN values
// Tooltip on hover
// Point in the normalized space of our target rectangle
// Where does the zero line stands
// NB: Draw calls are merged together by the DrawList system. Still, we should render our batch are lower level to save a bit of CPU.
// Text overlay
//-------------------------------------------------------------------------
// [SECTION] Widgets: Value helpers
// Those is not very useful, legacy API.
//-------------------------------------------------------------------------
// - Value()
//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
// [SECTION] MenuItem, BeginMenu, EndMenu, etc.
//-------------------------------------------------------------------------
// - ImGuiMenuColumns [Internal]
// - BeginMenuBar()
// - EndMenuBar()
// - BeginMainMenuBar()
// - EndMainMenuBar()
// - BeginMenu()
// - EndMenu()
// - MenuItem()
//-------------------------------------------------------------------------
// Helpers for internal use
// not using va_arg because they promote float to double
// FIXME: Provided a rectangle perhaps e.g. a BeginMenuBarEx() could be used anywhere..
// Currently the main responsibility of this function being to setup clip-rect + horizontal layout + menu navigation layer.
// Ideally we also want this to be responsible for claiming space out of the main window scrolling rectangle, in which case ImGuiWindowFlags_MenuBar will become unnecessary.
// Then later the same system could be used for multiple menu-bars, scrollbars, side-bars.
// Backup position on layer 0 // FIXME: Misleading to use a group for that backup/restore
// We don't clip with current window clipping rectangle as it is already set to the area below. However we clip with window full rect.
// We remove 1 worth of rounding to Max.x to that text in long menus and small windows don't tend to display over the lower-right rounded area, which looks particularly glitchy.
// Nav: When a move request within one of our child menu failed, capture the request to navigate among our siblings.
// To do so we claim focus back, restore NavId and then process the movement request for yet another frame.
// This involve a one-frame delay which isn't very problematic in this situation. We could remove it by scoring in advance for multiple window (probably not worth the hassle/cost)
// Sanity check
// Hide highlight for the current frame so we don't see the intermediary selection.
// Save horizontal position so next append can reuse it. This is kinda equivalent to a per-layer CursorPos.
// Restore position on layer 0
// For the main menu bar, which cannot be moved, we honor g.Style.DisplaySafeAreaPadding to ensure text can be visible on a TV set.
//-V1020
// When the user has left the menu layer (typically: closed menus through activation of an item), we restore focus to the previous window
// FIXME: With this strategy we won't be able to restore a NULL focus.
// Odd hack to allow hovering across menus of a same menu-set (otherwise we wouldn't be able to hover parent)
// The reference position stored in popup_pos will be used by Begin() to find a suitable position for the child menu,
// However the final position is going to be different! It is choosen by FindBestWindowPosForPopup().
// e.g. Menus tend to overlap each other horizontally to amplify relative Z-ordering.
// Menu inside an horizontal menu bar
// Selectable extend their highlight by half ItemSpacing in each direction.
// For ChildMenu, the popup position will be overwritten by the call to FindBestWindowPosForPopup() in Begin()
// -1 spacing to compensate the spacing added when Selectable() did a SameLine(). It would also work to call SameLine() ourselves after the PopStyleVar().
// Menu inside a menu
// Feedback to next frame
// (window->Flags & (ImGuiWindowFlags_Popup|ImGuiWindowFlags_ChildMenu))
// Close menu when not hovering it anymore unless we are moving roughly in the direction of the menu
// Implement http://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown to avoid using timers, so menus feels more reactive.
// FIXME-DPI: Values should be derived from a master "scale" factor.
// add a bit of extra slack.
// to avoid numerical issues
// triangle is maximum 200 high to limit the slope and the bias toward large sub-menus // FIXME: Multiply by fb_scale?
//GetForegroundDrawList()->AddTriangleFilled(ta, tb, tc, moving_within_opened_triangle ? IM_COL32(0,128,0,128) : IM_COL32(128,0,0,128)); // [DEBUG]
// Click to open
// Hover to open
// Nav-Right to open
// Menu bar
// Click an open menu again to close it
// First click to open, then hover to open others
// Nav-Down to open
// explicitly close if an open menu becomes disabled, facilitate users code a lot in pattern such as 'if (BeginMenu("options", has_object)) { ..use object.. }'
// Don't recycle same menu level in the same frame, first close the other menu and yield for a frame.
// Sub-menus are ChildWindow so that mouse can be hovering across them (otherwise top-most popup menu would steal focus and not allow hovering on parent menu)
// menu_is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
// Nav: When a left move request _within our child menu_ failed, close ourselves (the _parent_ menu).
// A menu doesn't close itself because EndMenuBar() wants the catch the last Left<>Right inputs.
// However, it means that with the current code, a BeginMenu() from outside another menu or a menu-bar won't be closable with the Left direction.
// We've been using the equivalent of ImGuiSelectableFlags_SetNavIdOnHover on all Selectable() since early Nav system days (commit 43ee5d73),
// but I am unsure whether this should be kept at all. For now moved it to be an opt-in feature used by menus only.
// Mimic the exact layout spacing of BeginMenu() to allow MenuItem() inside a menu bar, which is a little misleading but may be useful
// Note that in this situation we render neither the shortcut neither the selected tick mark
// -1 spacing to compensate the spacing added when Selectable() did a SameLine(). It would also work to call SameLine() ourselves after the PopStyleVar().
// Feedback for next frame
//-------------------------------------------------------------------------
// [SECTION] Widgets: BeginTabBar, EndTabBar, etc.
//-------------------------------------------------------------------------
// [BETA API] API may evolve! This code has been extracted out of the Docking branch,
// and some of the construct which are not used in Master may be left here to facilitate merging.
//-------------------------------------------------------------------------
// - BeginTabBar()
// - BeginTabBarEx() [Internal]
// - EndTabBar()
// - TabBarLayout() [Internal]
// - TabBarCalcTabID() [Internal]
// - TabBarCalcMaxTabWidth() [Internal]
// - TabBarFindTabById() [Internal]
// - TabBarRemoveTab() [Internal]
// - TabBarCloseTab() [Internal]
// - TabBarScrollClamp()v
// - TabBarScrollToTab() [Internal]
// - TabBarQueueChangeTabOrder() [Internal]
// - TabBarScrollingButtons() [Internal]
// - TabBarTabListPopupButton() [Internal]
//-------------------------------------------------------------------------
// Add to stack
//IMGUI_DEBUG_LOG("BeginTabBarEx already called this frame\n", g.FrameCount);
// When toggling back from ordered to manually-reorderable, shuffle tabs to enforce the last visible order.
// Otherwise, the most recently inserted tabs would move at the end of visible list which can be a little too confusing or magic for the user.
// Flags
// Layout will be done on the first call to ItemTab()
// Layout
// Draw separator
// Restore the last visible height if no tab is visible, this reduce vertical flicker/movement when a tabs gets removed without calling SetTabItemClosed().
// This is called only once a frame before by the first call to ItemTab()
// The reason we're not calling it in BeginTabBar() is to leave a chance to the user to call the SetTabItemClosed() functions.
// Garbage collect
// Setup next selected tab
// Process order change request (we could probably process it when requested but it's just saner to do it in a single spot).
//IM_ASSERT(tab_bar->Flags & ImGuiTabBarFlags_Reorderable); // <- this may happen when using debug tools
// Tab List Popup (will alter tab_bar->BarRect and therefore the available width!)
// NB: Will alter BarRect.Max.x!
// Compute ideal widths
// Refresh tab width immediately, otherwise changes of style e.g. style.FramePadding.x would noticeably lag in the tab bar.
// Additionally, when using TabBarAddTab() to manipulate tab bar order we occasionally insert new tabs that don't have a width yet,
// and we cannot wait for the next BeginTabItem() call. We cannot compute this width within TabBarAddTab() because font size depends on the active window.
// Store data so we can build an array sorted by width if we need to shrink tabs down
// Compute width
// g.Style.ItemInnerSpacing.x;
// If we don't have enough room, resize down the largest tabs first
// Layout all active tabs
// This is used by non-reorderable tab bar where the submission order is always honored.
// Horizontal scrolling buttons
// NB: Will alter BarRect.Max.x!
// If we have lost the selected tab, select the next most recently active one
// Lock in visible tab
// Update scrolling
// Scrolling speed adjust itself so we can always reach our target in 1/3 seconds.
// Teleport if we are aiming far off the visible line
// Clear name buffers
// Dockables uses Name/ID in the global namespace. Non-dockable items use the ID stack.
// The *TabId fields be already set by the docking system _before_ the actual TabItem was created, so we clear them regardless.
// Called on manual closure attempt
// This will remove a frame of lag for selecting another tab on closure.
// However we don't run it in the case where the 'Unsaved' flag is set, so user gets a chance to fully undo the closure
// Actually select before expecting closure
// When to scroll to make Tab N+1 visible always make a bit of N visible to suggest more scrolling area (since we don't have a scrollbar)
//window->DrawList->AddRect(ImVec2(tab_bar->BarRect.Max.x - scrolling_buttons_width, tab_bar->BarRect.Min.y), ImVec2(tab_bar->BarRect.Max.x, tab_bar->BarRect.Max.y), IM_COL32(255,0,0,255));
// If we are at the end of the list, still scroll to make our tab visible
// We use g.Style.FramePadding.y to match the square ArrowButton size
//-------------------------------------------------------------------------
// [SECTION] Widgets: BeginTabItem, EndTabItem, etc.
//-------------------------------------------------------------------------
// [BETA API] API may evolve! This code has been extracted out of the Docking branch,
// and some of the construct which are not used in Master may be left here to facilitate merging.
//-------------------------------------------------------------------------
// - BeginTabItem()
// - EndTabItem()
// - TabItemEx() [Internal]
// - SetTabItemClosed()
// - TabItemCalcSize() [Internal]
// - TabItemBackground() [Internal]
// - TabItemLabelAndCloseButton() [Internal]
//-------------------------------------------------------------------------
// We already hashed 'label' so push into the ID stack directly instead of doing another hash through PushID(label)
// Layout whole tab bar if not already done
// If the user called us with *p_open == false, we early out and don't render. We make a dummy call to ItemAdd() so that attempts to use a contextual popup menu with an implicit ID won't use an older ID.
// Store into ImGuiTabItemFlags_NoCloseButton, also honor ImGuiTabItemFlags_NoCloseButton passed by user (although not documented)
// Calculate tab contents size
// Acquire tab data
// Append name with zero-terminator
// If we are not reorderable, always reset offset based on submission order.
// (We already handled layout and sizing using the previous known order, but sizing is not affected by order!)
// Update selected tab
// New tabs gets activated
// SetSelected can only be passed on explicit tab bar
// Lock visibility
// On the very first frame of a tab bar we let first tab contents be visible to minimize appearing glitches
// Backup current layout position
// Layout
// We don't have CPU clipping primitives to clip the CloseButton (until it becomes a texture), so need to add an extra draw call (temporary in the case of vertical animation)
// Click to Select a tab
// Allow the close button to overlap unless we are dragging (in which case we don't want any overlapping tabs to be hovered)
// Drag and drop: re-order tabs
// While moving a tab it will jump on the other side of the mouse, so we also test for MouseDelta.x
// Enlarge tab display when hovering
// Render tab shape
// Select with right mouse button. This is so the common idiom for context menu automatically highlight the current widget.
// Render tab label, process close button
// Restore main window position so user can draw there
// Tooltip (FIXME: Won't work over the close button because ItemOverlap systems messes up with HoveredIdTimer)
// We test IsItemHovered() to discard e.g. when another item is active or drag and drop over the tab bar (which g.HoveredId ignores)
// [Public] This is call is 100% optional but it allows to remove some one-frame glitches when a tab has been unexpectedly removed.
// To use it to need to call the function SetTabItemClosed() after BeginTabBar() and before any call to BeginTabItem()
// Needs to be called AFTER BeginTabBar() and BEFORE the first call to BeginTabItem()
// We use Y intentionally to fit the close button circle.
// While rendering tabs, we trim 1 pixel off the top of our bounding box so they can fit within a regular frame height while looking "detached" from it.
// Render text label (with custom clipping) + Unsaved Document marker + Close Button logic
// We tend to lock style.FramePadding for a given tab-bar, hence the 'frame_padding' parameter.
// Render text label (with clipping + alpha gradient) + unsaved marker
// Close Button
// We are relying on a subtle and confusing distinction between 'hovered' and 'g.HoveredId' which happens because we are using ImGuiButtonFlags_AllowOverlapMode + SetItemAllowOverlap()
//  'hovered' will be true when hovering the Tab but NOT when hovering the close button
//  'g.HoveredId==id' will be true when hovering the Tab including when hovering the close button
//  'g.ActiveId==close_button_id' will be true when we are holding on the close button, in which case both hovered booleans are false
// Close with middle mouse button
//-------------------------------------------------------------------------
// [SECTION] Widgets: Columns, BeginColumns, EndColumns, etc.
// In the current version, Columns are very weak. Needs to be replaced with a more full-featured system.
//-------------------------------------------------------------------------
// - GetColumnIndex()
// - GetColumnCount()
// - GetColumnOffset()
// - GetColumnWidth()
// - SetColumnOffset()
// - SetColumnWidth()
// - PushColumnClipRect() [Internal]
// - PushColumnsBackground() [Internal]
// - PopColumnsBackground() [Internal]
// - FindOrCreateColumns() [Internal]
// - GetColumnsID() [Internal]
// - BeginColumns()
// - NextColumn()
// - EndColumns()
// - Columns()
//-------------------------------------------------------------------------
// Active (dragged) column always follow mouse. The reason we need this is that dragging a column to the right edge of an auto-resizing
// window creates a feedback loop because we store normalized positions. So while dragging we enforce absolute positioning.
// We are not supposed to drag column 0.
// Get into the columns background draw command (which is generally the same draw command as before we called BeginColumns)
// Being in channel 0 this should not have created an ImDrawCmd
// We have few columns per window so for now we don't need bother much with turning this into a faster lookup.
// Differentiate column ID with an arbitrary prefix for cases where users name their columns set the same as another widget.
// In addition, when an identifier isn't explicitly provided we include the number of columns in the hash to make it uniquer.
// Maximum 64 columns
// Nested columns are currently not supported
// Acquire storage for the columns set
// Set state for first column
// We aim so that the right-most column will have the same clipping width as other after being clipped by parent ClipRect
// Clear data if columns count changed
// Initialize default widths
// Compute clipping rectangle
// We don't generally store Indent.x inside ColumnsOffset because it may be manipulated by the user.
// Columns 1+ ignore IndentX (by canceling it out)
// FIXME-COLUMNS: Unnecessary, could be locked?
// New row/line
// Column 0 honor IndentX
// FIXME-COLUMNS: Could it be an overwrite?
// FIXME-COLUMNS: Share code with BeginColumns() - move code on columns setup.
// Restore cursor max pos, as columns don't grow parent
// Draw columns borders and handle resize
// The IsBeingResized flag ensure we preserve pre-resize columns width so back-and-forth are not lossy
// We clip Y boundaries CPU side because very long triangles are mishandled by some GPU drivers.
// Draw column
// Apply dragging after drawing the column lines, so our rendered lines are in sync with how items were displayed during the frame.
// [2018-03: This is currently the only public API, while we are working on making BeginColumns/EndColumns user-facing]
//flags |= ImGuiColumnsFlags_NoPreserveWidths; // NB: Legacy behavior
//-------------------------------------------------------------------------
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_allegro5.cpp
// dear imgui: Renderer + Platform Binding for Allegro 5
// (Info: Allegro 5 is a cross-platform general purpose library for handling windows, inputs, graphics, etc.)
// Implemented features:
//  [X] Renderer: User texture binding. Use 'ALLEGRO_BITMAP*' as ImTextureID. Read the FAQ about ImTextureID!
//  [X] Platform: Clipboard support (from Allegro 5.1.12)
//  [X] Platform: Mouse cursor shape and visibility. Disable with 'io.ConfigFlags |= ImGuiConfigFlags_NoMouseCursorChange'.
// Issues:
//  [ ] Renderer: The renderer is suboptimal as we need to unindex our buffers and convert vertices manually.
//  [ ] Platform: Missing gamepad support.
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp.
// https://github.com/ocornut/imgui, Original Allegro 5 code by @birthggd
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2019-12-05: Inputs: Added support for ImGuiMouseCursor_NotAllowed mouse cursor.
//  2019-07-21: Inputs: Added mapping for ImGuiKey_KeyPadEnter.
//  2019-05-11: Inputs: Don't filter character value from ALLEGRO_EVENT_KEY_CHAR before calling AddInputCharacter().
//  2019-04-30: Renderer: Added support for special ImDrawCallback_ResetRenderState callback to reset render state.
//  2018-11-30: Platform: Added touchscreen support.
//  2018-11-30: Misc: Setting up io.BackendPlatformName/io.BackendRendererName so they can be displayed in the About Window.
//  2018-06-13: Platform: Added clipboard support (from Allegro 5.1.12).
//  2018-06-13: Renderer: Use draw_data->DisplayPos and draw_data->DisplaySize to setup projection matrix and clipping rectangle.
//  2018-06-13: Renderer: Backup/restore transform and clipping rectangle.
//  2018-06-11: Misc: Setup io.BackendFlags ImGuiBackendFlags_HasMouseCursors flag + honor ImGuiConfigFlags_NoMouseCursorChange flag.
//  2018-04-18: Misc: Renamed file from imgui_impl_a5.cpp to imgui_impl_allegro5.cpp.
//  2018-04-18: Misc: Added support for 32-bit vertex indices to avoid conversion at runtime. Added imconfig_allegro5.h to enforce 32-bit indices when included from imgui.h.
//  2018-02-16: Misc: Obsoleted the io.RenderDrawListsFn callback and exposed ImGui_ImplAllegro5_RenderDrawData() in the .h file so you can call it yourself.
//  2018-02-06: Misc: Removed call to ImGui::Shutdown() which is not available from 1.60 WIP, user needs to call CreateContext/DestroyContext themselves.
//  2018-02-06: Inputs: Added mapping for ImGuiKey_Space.
// uint64_t
// memcpy
// Allegro
// Clipboard only supported from Allegro 5.1.12
// Visual Studio warnings
// condition expression is constant
// Data
// Setup blending
// Setup orthographic projection matrix
// Our visible imgui space lies from draw_data->DisplayPos (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right).
// Render function.
// (this used to be set in io.RenderDrawListsFn and called by ImGui::Render(), but you can now call this directly from your main loop)
// Avoid rendering when minimized
// Backup Allegro state that will be modified
// Setup desired render state
// Render command lists
// Allegro's implementation of al_draw_indexed_prim() for DX9 is completely broken. Unindex our buffers ourselves.
// FIXME-OPT: Unfortunately Allegro doesn't support 32-bit packed colors so we have to convert them to 4 float as well..
// FIXME-OPT: Unfortunately Allegro doesn't support 16-bit indices.. You can '#define ImDrawIdx int' in imconfig.h to request Dear ImGui to output 32-bit indices.
// Otherwise, we convert them from 16-bit to 32-bit at runtime here, which works perfectly but is a little wasteful.
// Render command lists
// User callback, registered via ImDrawList::AddCallback()
// (ImDrawCallback_ResetRenderState is a special callback value used by the user to request the renderer to reset render state.)
// Draw
// Restore modified Allegro state
// Build texture atlas
// Create texture
// Convert software texture to hardware texture.
// Store our identifier
// Create an invisible mouse cursor
// Because al_hide_mouse_cursor() seems to mess up with the actual inputs..
// Setup back-end capabilities flags
// We can honor GetMouseCursor() values (optional)
// Create custom vertex declaration.
// Unfortunately Allegro doesn't support 32-bit packed colors so we have to convert them to 4 floats.
// We still use a custom declaration to use 'ALLEGRO_PRIM_TEX_COORD' instead of 'ALLEGRO_PRIM_TEX_COORD_PIXEL' else we can't do a reliable conversion.
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Hide OS mouse cursor if imgui is drawing it or if it wants no cursor
// Setup display size (every frame to accommodate for window resizing)
// Setup time step
// Setup inputs
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_dx10.cpp
// dear imgui: Renderer for DirectX10
// This needs to be used along with a Platform Binding (e.g. Win32)
// Implemented features:
//  [X] Renderer: User texture binding. Use 'ID3D10ShaderResourceView*' as ImTextureID. Read the FAQ about ImTextureID!
//  [X] Renderer: Support for large meshes (64k+ vertices) with 16-bit indices.
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp.
// https://github.com/ocornut/imgui
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2019-07-21: DirectX10: Backup, clear and restore Geometry Shader is any is bound when calling ImGui_ImplDX10_RenderDrawData().
//  2019-05-29: DirectX10: Added support for large mesh (64K+ vertices), enable ImGuiBackendFlags_RendererHasVtxOffset flag.
//  2019-04-30: DirectX10: Added support for special ImDrawCallback_ResetRenderState callback to reset render state.
//  2018-12-03: Misc: Added #pragma comment statement to automatically link with d3dcompiler.lib when using D3DCompile().
//  2018-11-30: Misc: Setting up io.BackendRendererName so it can be displayed in the About Window.
//  2018-07-13: DirectX10: Fixed unreleased resources in Init and Shutdown functions.
//  2018-06-08: Misc: Extracted imgui_impl_dx10.cpp/.h away from the old combined DX10+Win32 example.
//  2018-06-08: DirectX10: Use draw_data->DisplayPos and draw_data->DisplaySize to setup projection matrix and clipping rectangle.
//  2018-04-09: Misc: Fixed erroneous call to io.Fonts->ClearInputData() + ClearTexData() that was left in DX10 example but removed in 1.47 (Nov 2015) on other back-ends.
//  2018-02-16: Misc: Obsoleted the io.RenderDrawListsFn callback and exposed ImGui_ImplDX10_RenderDrawData() in the .h file so you can call it yourself.
//  2018-02-06: Misc: Removed call to ImGui::Shutdown() which is not available from 1.60 WIP, user needs to call CreateContext/DestroyContext themselves.
//  2016-05-07: DirectX10: Disabling depth-write.
// DirectX
// Automatically link with d3dcompiler.lib as we are using D3DCompile() below.
// DirectX data
// Setup viewport
// Bind shader and vertex buffers
// Setup render state
// Render function
// (this used to be set in io.RenderDrawListsFn and called by ImGui::Render(), but you can now call this directly from your main loop)
// Avoid rendering when minimized
// Create and grow vertex/index buffers if needed
// Copy and convert all vertices into a single contiguous buffer
// Setup orthographic projection matrix into our constant buffer
// Our visible imgui space lies from draw_data->DisplayPos (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayPos is (0,0) for single viewport apps.
// Backup DX state that will be modified to restore it afterwards (unfortunately this is very ugly looking and verbose. Close your eyes!)
// Setup desired DX state
// Render command lists
// (Because we merged all buffers into a single one, we maintain our own offset into them)
// User callback, registered via ImDrawList::AddCallback()
// (ImDrawCallback_ResetRenderState is a special callback value used by the user to request the renderer to reset render state.)
// Apply scissor/clipping rectangle
// Bind texture, Draw
// Restore modified DX state
// Build texture atlas
// Upload texture to graphics system
// Create texture view
// Store our identifier
// Create texture sampler
// By using D3DCompile() from <d3dcompiler.h> / d3dcompiler.lib, we introduce a dependency to a given version of d3dcompiler_XX.dll (see D3DCOMPILER_DLL_A)
// If you would like to use this DX10 sample code but remove this dependency you can:
//  1) compile once, save the compiled shader blobs into a file or source code and pass them to CreateVertexShader()/CreatePixelShader() [preferred solution]
//  2) use code to detect any version of the DLL and grab a pointer to D3DCompile from the DLL.
// See https://github.com/ocornut/imgui/pull/638 for sources and details.
// Create the vertex shader
// NB: Pass ID3D10Blob* pErrorBlob to D3DCompile() to get error showing in (const char*)pErrorBlob->GetBufferPointer(). Make sure to Release() the blob!
// Create the input layout
// Create the constant buffer
// Create the pixel shader
// NB: Pass ID3D10Blob* pErrorBlob to D3DCompile() to get error showing in (const char*)pErrorBlob->GetBufferPointer(). Make sure to Release() the blob!
// Create the blending setup
// Create the rasterizer state
// Create depth-stencil State
// We copied g_pFontTextureView to io.Fonts->TexID so let's clear that as well.
// Setup back-end capabilities flags
// We can honor the ImDrawCmd::VtxOffset field, allowing for large meshes.
// Get factory from device
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_dx11.cpp
// dear imgui: Renderer for DirectX11
// This needs to be used along with a Platform Binding (e.g. Win32)
// Implemented features:
//  [X] Renderer: User texture binding. Use 'ID3D11ShaderResourceView*' as ImTextureID. Read the FAQ about ImTextureID!
//  [X] Renderer: Support for large meshes (64k+ vertices) with 16-bit indices.
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp
// https://github.com/ocornut/imgui
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2019-08-01: DirectX11: Fixed code querying the Geometry Shader state (would generally error with Debug layer enabled).
//  2019-07-21: DirectX11: Backup, clear and restore Geometry Shader is any is bound when calling ImGui_ImplDX10_RenderDrawData. Clearing Hull/Domain/Compute shaders without backup/restore.
//  2019-05-29: DirectX11: Added support for large mesh (64K+ vertices), enable ImGuiBackendFlags_RendererHasVtxOffset flag.
//  2019-04-30: DirectX11: Added support for special ImDrawCallback_ResetRenderState callback to reset render state.
//  2018-12-03: Misc: Added #pragma comment statement to automatically link with d3dcompiler.lib when using D3DCompile().
//  2018-11-30: Misc: Setting up io.BackendRendererName so it can be displayed in the About Window.
//  2018-08-01: DirectX11: Querying for IDXGIFactory instead of IDXGIFactory1 to increase compatibility.
//  2018-07-13: DirectX11: Fixed unreleased resources in Init and Shutdown functions.
//  2018-06-08: Misc: Extracted imgui_impl_dx11.cpp/.h away from the old combined DX11+Win32 example.
//  2018-06-08: DirectX11: Use draw_data->DisplayPos and draw_data->DisplaySize to setup projection matrix and clipping rectangle.
//  2018-02-16: Misc: Obsoleted the io.RenderDrawListsFn callback and exposed ImGui_ImplDX11_RenderDrawData() in the .h file so you can call it yourself.
//  2018-02-06: Misc: Removed call to ImGui::Shutdown() which is not available from 1.60 WIP, user needs to call CreateContext/DestroyContext themselves.
//  2016-05-07: DirectX11: Disabling depth-write.
// DirectX
// Automatically link with d3dcompiler.lib as we are using D3DCompile() below.
// DirectX data
// Setup viewport
// Setup shader and vertex buffers
// In theory we should backup and restore this as well.. very infrequently used..
// In theory we should backup and restore this as well.. very infrequently used..
// In theory we should backup and restore this as well.. very infrequently used..
// Setup blend state
// Render function
// (this used to be set in io.RenderDrawListsFn and called by ImGui::Render(), but you can now call this directly from your main loop)
// Avoid rendering when minimized
// Create and grow vertex/index buffers if needed
// Upload vertex/index data into a single contiguous GPU buffer
// Setup orthographic projection matrix into our constant buffer
// Our visible imgui space lies from draw_data->DisplayPos (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayPos is (0,0) for single viewport apps.
// Backup DX state that will be modified to restore it afterwards (unfortunately this is very ugly looking and verbose. Close your eyes!)
// 256 is max according to PSSetShader documentation
// Setup desired DX state
// Render command lists
// (Because we merged all buffers into a single one, we maintain our own offset into them)
// User callback, registered via ImDrawList::AddCallback()
// (ImDrawCallback_ResetRenderState is a special callback value used by the user to request the renderer to reset render state.)
// Apply scissor/clipping rectangle
// Bind texture, Draw
// Restore modified DX state
// Build texture atlas
// Upload texture to graphics system
// Create texture view
// Store our identifier
// Create texture sampler
// By using D3DCompile() from <d3dcompiler.h> / d3dcompiler.lib, we introduce a dependency to a given version of d3dcompiler_XX.dll (see D3DCOMPILER_DLL_A)
// If you would like to use this DX11 sample code but remove this dependency you can:
//  1) compile once, save the compiled shader blobs into a file or source code and pass them to CreateVertexShader()/CreatePixelShader() [preferred solution]
//  2) use code to detect any version of the DLL and grab a pointer to D3DCompile from the DLL.
// See https://github.com/ocornut/imgui/pull/638 for sources and details.
// Create the vertex shader
// NB: Pass ID3D10Blob* pErrorBlob to D3DCompile() to get error showing in (const char*)pErrorBlob->GetBufferPointer(). Make sure to Release() the blob!
// Create the input layout
// Create the constant buffer
// Create the pixel shader
// NB: Pass ID3D10Blob* pErrorBlob to D3DCompile() to get error showing in (const char*)pErrorBlob->GetBufferPointer(). Make sure to Release() the blob!
// Create the blending setup
// Create the rasterizer state
// Create depth-stencil State
// We copied g_pFontTextureView to io.Fonts->TexID so let's clear that as well.
// Setup back-end capabilities flags
// We can honor the ImDrawCmd::VtxOffset field, allowing for large meshes.
// Get factory from device
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_dx12.cpp
// dear imgui: Renderer for DirectX12
// This needs to be used along with a Platform Binding (e.g. Win32)
// Implemented features:
//  [X] Renderer: User texture binding. Use 'D3D12_GPU_DESCRIPTOR_HANDLE' as ImTextureID. Read the FAQ about ImTextureID!
//  [X] Renderer: Support for large meshes (64k+ vertices) with 16-bit indices.
// Issues:
//  [ ] 64-bit only for now! (Because sizeof(ImTextureId) == sizeof(void*)). See github.com/ocornut/imgui/pull/301
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp.
// https://github.com/ocornut/imgui
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2019-10-18: DirectX12: *BREAKING CHANGE* Added extra ID3D12DescriptorHeap parameter to ImGui_ImplDX12_Init() function.
//  2019-05-29: DirectX12: Added support for large mesh (64K+ vertices), enable ImGuiBackendFlags_RendererHasVtxOffset flag.
//  2019-04-30: DirectX12: Added support for special ImDrawCallback_ResetRenderState callback to reset render state.
//  2019-03-29: Misc: Various minor tidying up.
//  2018-12-03: Misc: Added #pragma comment statement to automatically link with d3dcompiler.lib when using D3DCompile().
//  2018-11-30: Misc: Setting up io.BackendRendererName so it can be displayed in the About Window.
//  2018-06-12: DirectX12: Moved the ID3D12GraphicsCommandList* parameter from NewFrame() to RenderDrawData().
//  2018-06-08: Misc: Extracted imgui_impl_dx12.cpp/.h away from the old combined DX12+Win32 example.
//  2018-06-08: DirectX12: Use draw_data->DisplayPos and draw_data->DisplaySize to setup projection matrix and clipping rectangle (to ease support for future multi-viewport).
//  2018-02-22: Merged into master with all Win32 code synchronized to other examples.
// DirectX
// Automatically link with d3dcompiler.lib as we are using D3DCompile() below.
// DirectX data
// Setup orthographic projection matrix into our constant buffer
// Our visible imgui space lies from draw_data->DisplayPos (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right).
// Setup viewport
// Bind shader and vertex buffers
// Setup blend factor
// Render function
// (this used to be set in io.RenderDrawListsFn and called by ImGui::Render(), but you can now call this directly from your main loop)
// Avoid rendering when minimized
// FIXME: I'm assuming that this only gets called once per frame!
// If not, we can't just re-allocate the IB or VB, we'll have to do a proper allocator.
// Create and grow vertex/index buffers if needed
// Upload vertex/index data into a single contiguous GPU buffer
// Setup desired DX state
// Render command lists
// (Because we merged all buffers into a single one, we maintain our own offset into them)
// User callback, registered via ImDrawList::AddCallback()
// (ImDrawCallback_ResetRenderState is a special callback value used by the user to request the renderer to reset render state.)
// Apply Scissor, Bind texture, Draw
// Build texture atlas
// Upload texture to graphics system
// Create texture view
// Store our identifier
// Create the root signature
// By using D3DCompile() from <d3dcompiler.h> / d3dcompiler.lib, we introduce a dependency to a given version of d3dcompiler_XX.dll (see D3DCOMPILER_DLL_A)
// If you would like to use this DX12 sample code but remove this dependency you can:
//  1) compile once, save the compiled shader blobs into a file or source code and pass them to CreateVertexShader()/CreatePixelShader() [preferred solution]
//  2) use code to detect any version of the DLL and grab a pointer to D3DCompile from the DLL.
// See https://github.com/ocornut/imgui/pull/638 for sources and details.
// Create the vertex shader
// NB: Pass ID3D10Blob* pErrorBlob to D3DCompile() to get error showing in (const char*)pErrorBlob->GetBufferPointer(). Make sure to Release() the blob!
// Create the input layout
// Create the pixel shader
// NB: Pass ID3D10Blob* pErrorBlob to D3DCompile() to get error showing in (const char*)pErrorBlob->GetBufferPointer(). Make sure to Release() the blob!
// Create the blending setup
// Create the rasterizer state
// Create depth-stencil State
// We copied g_pFontTextureView to io.Fonts->TexID so let's clear that as well.
// Setup back-end capabilities flags
// We can honor the ImDrawCmd::VtxOffset field, allowing for large meshes.
// Unused in master branch (will be used by multi-viewports)
// Create buffers with a default size (they will later be grown as needed)
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_dx9.cpp
// dear imgui: Renderer for DirectX9
// This needs to be used along with a Platform Binding (e.g. Win32)
// Implemented features:
//  [X] Renderer: User texture binding. Use 'LPDIRECT3DTEXTURE9' as ImTextureID. Read the FAQ about ImTextureID!
//  [X] Renderer: Support for large meshes (64k+ vertices) with 16-bit indices.
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp.
// https://github.com/ocornut/imgui
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2019-05-29: DirectX9: Added support for large mesh (64K+ vertices), enable ImGuiBackendFlags_RendererHasVtxOffset flag.
//  2019-04-30: DirectX9: Added support for special ImDrawCallback_ResetRenderState callback to reset render state.
//  2019-03-29: Misc: Fixed erroneous assert in ImGui_ImplDX9_InvalidateDeviceObjects().
//  2019-01-16: Misc: Disabled fog before drawing UI's. Fixes issue #2288.
//  2018-11-30: Misc: Setting up io.BackendRendererName so it can be displayed in the About Window.
//  2018-06-08: Misc: Extracted imgui_impl_dx9.cpp/.h away from the old combined DX9+Win32 example.
//  2018-06-08: DirectX9: Use draw_data->DisplayPos and draw_data->DisplaySize to setup projection matrix and clipping rectangle.
//  2018-05-07: Render: Saving/restoring Transform because they don't seem to be included in the StateBlock. Setting shading mode to Gouraud.
//  2018-02-16: Misc: Obsoleted the io.RenderDrawListsFn callback and exposed ImGui_ImplDX9_RenderDrawData() in the .h file so you can call it yourself.
//  2018-02-06: Misc: Removed call to ImGui::Shutdown() which is not available from 1.60 WIP, user needs to call CreateContext/DestroyContext themselves.
// DirectX
// DirectX data
// Setup viewport
// Setup render state: fixed-pipeline, alpha-blending, no face culling, no depth testing, shade mode (for gradient)
// Setup orthographic projection matrix
// Our visible imgui space lies from draw_data->DisplayPos (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayPos is (0,0) for single viewport apps.
// Being agnostic of whether <d3dx9.h> or <DirectXMath.h> can be used, we aren't relying on D3DXMatrixIdentity()/D3DXMatrixOrthoOffCenterLH() or DirectX::XMMatrixIdentity()/DirectX::XMMatrixOrthographicOffCenterLH()
// Render function.
// (this used to be set in io.RenderDrawListsFn and called by ImGui::Render(), but you can now call this directly from your main loop)
// Avoid rendering when minimized
// Create and grow buffers if needed
// Backup the DX9 state
// Backup the DX9 transform (DX9 documentation suggests that it is included in the StateBlock but it doesn't appear to)
// Copy and convert all vertices into a single contiguous buffer, convert colors to DX9 default format.
// FIXME-OPT: This is a waste of resource, the ideal is to use imconfig.h and
//  1) to avoid repacking colors:   #define IMGUI_USE_BGRA_PACKED_COLOR
//  2) to avoid repacking vertices: #define IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT struct ImDrawVert { ImVec2 pos; float z; ImU32 col; ImVec2 uv; }
// RGBA --> ARGB for DirectX9
// Setup desired DX state
// Render command lists
// (Because we merged all buffers into a single one, we maintain our own offset into them)
// User callback, registered via ImDrawList::AddCallback()
// (ImDrawCallback_ResetRenderState is a special callback value used by the user to request the renderer to reset render state.)
// Restore the DX9 transform
// Restore the DX9 state
// Setup back-end capabilities flags
// We can honor the ImDrawCmd::VtxOffset field, allowing for large meshes.
// Build texture atlas
// Upload texture to graphics system
// Store our identifier
// We copied g_pFontTextureView to io.Fonts->TexID so let's clear that as well.
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_glfw.cpp
// dear imgui: Platform Binding for GLFW
// This needs to be used along with a Renderer (e.g. OpenGL3, Vulkan..)
// (Info: GLFW is a cross-platform general purpose library for handling windows, inputs, OpenGL/Vulkan graphics context creation, etc.)
// (Requires: GLFW 3.1+)
// Implemented features:
//  [X] Platform: Clipboard support.
//  [X] Platform: Gamepad support. Enable with 'io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad'.
//  [X] Platform: Mouse cursor shape and visibility. Disable with 'io.ConfigFlags |= ImGuiConfigFlags_NoMouseCursorChange' (note: the resizing cursors requires GLFW 3.4+).
//  [X] Platform: Keyboard arrays indexed using GLFW_KEY_* codes, e.g. ImGui::IsKeyPressed(GLFW_KEY_SPACE).
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp.
// https://github.com/ocornut/imgui
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2019-12-05: Inputs: Added support for new mouse cursors added in GLFW 3.4+ (resizing cursors, not allowed cursor).
//  2019-10-18: Misc: Previously installed user callbacks are now restored on shutdown.
//  2019-07-21: Inputs: Added mapping for ImGuiKey_KeyPadEnter.
//  2019-05-11: Inputs: Don't filter value from character callback before calling AddInputCharacter().
//  2019-03-12: Misc: Preserve DisplayFramebufferScale when main window is minimized.
//  2018-11-30: Misc: Setting up io.BackendPlatformName so it can be displayed in the About Window.
//  2018-11-07: Inputs: When installing our GLFW callbacks, we save user's previously installed ones - if any - and chain call them.
//  2018-08-01: Inputs: Workaround for Emscripten which doesn't seem to handle focus related calls.
//  2018-06-29: Inputs: Added support for the ImGuiMouseCursor_Hand cursor.
//  2018-06-08: Misc: Extracted imgui_impl_glfw.cpp/.h away from the old combined GLFW+OpenGL/Vulkan examples.
//  2018-03-20: Misc: Setup io.BackendFlags ImGuiBackendFlags_HasMouseCursors flag + honor ImGuiConfigFlags_NoMouseCursorChange flag.
//  2018-02-20: Inputs: Added support for mouse cursors (ImGui::GetMouseCursor() value, passed to glfwSetCursor()).
//  2018-02-06: Misc: Removed call to ImGui::Shutdown() which is not available from 1.60 WIP, user needs to call CreateContext/DestroyContext themselves.
//  2018-02-06: Inputs: Added mapping for ImGuiKey_Space.
//  2018-01-25: Inputs: Added gamepad support if ImGuiConfigFlags_NavEnableGamepad is set.
//  2018-01-25: Inputs: Honoring the io.WantSetMousePos by repositioning the mouse (when using navigation and ImGuiConfigFlags_NavMoveMouse is set).
//  2018-01-20: Inputs: Added Horizontal Mouse Wheel support.
//  2018-01-18: Inputs: Added mapping for ImGuiKey_Insert.
//  2017-08-25: Inputs: MousePos set to -FLT_MAX,-FLT_MAX when mouse is unavailable/missing (instead of -1,-1).
//  2016-10-15: Misc: Added a void* user_data parameter to Clipboard function handlers.
// GLFW
// for glfwGetWin32Window
// 3.2+ GLFW_FLOATING
// 3.3+ GLFW_HOVERED
// 3.3+ glfwSetWindowOpacity
// 3.3+ glfwGetMonitorContentScale
// 3.2+ glfwCreateWindowSurface
// let's be nice to people who pulled GLFW between 2019-04-16 (3.4 define) and 2019-11-29 (cursors defines) // FIXME: Remove when GLFW 3.4 is released?
// 3.4+ GLFW_RESIZE_ALL_CURSOR, GLFW_RESIZE_NESW_CURSOR, GLFW_RESIZE_NWSE_CURSOR, GLFW_NOT_ALLOWED_CURSOR
// Data
// Main window
// Chain GLFW callbacks: our callbacks will call the user's previously installed callbacks, if any.
// Modifiers are not reliable across systems
// Setup back-end capabilities flags
// We can honor GetMouseCursor() values (optional)
// We can honor io.WantSetMousePos requests (optional, rarely used)
// Keyboard mapping. ImGui will use those indices to peek into the io.KeysDown[] array.
// Chain GLFW callbacks: our callbacks will call the user's previously installed callbacks, if any.
// Update buttons
// If a mouse press event came, always pass it as "mouse held this frame", so we don't miss click-release events that are shorter than 1 frame.
// Update mouse position
// Emscripten
// Hide OS mouse cursor if imgui is drawing it or if it wants no cursor
// Show OS mouse cursor
// FIXME-PLATFORM: Unfocused windows seems to fail changing the mouse cursor with GLFW 3.2, but 3.3 works here.
// Update gamepad inputs
// Cross / A
// Circle / B
// Square / X
// Triangle / Y
// D-Pad Left
// D-Pad Right
// D-Pad Up
// D-Pad Down
// L1 / LB
// R1 / RB
// L1 / LB
// R1 / RB
// Setup display size (every frame to accommodate for window resizing)
// Setup time step
// Update game controllers (if enabled and available)
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_glut.cpp
// dear imgui: Platform Binding for GLUT/FreeGLUT
// This needs to be used along with a Renderer (e.g. OpenGL2)
// !!! GLUT/FreeGLUT IS OBSOLETE SOFTWARE. Using GLUT is not recommended unless you really miss the 90's. !!!
// !!! If someone or something is teaching you GLUT in 2019, you are being abused. Please show some resistance. !!!
// !!! Nowadays, prefer using GLFW or SDL instead!
// Issues:
//  [ ] Platform: GLUT is unable to distinguish e.g. Backspace from CTRL+H or TAB from CTRL+I
//  [ ] Platform: Missing mouse cursor shape/visibility support.
//  [ ] Platform: Missing clipboard support (not supported by Glut).
//  [ ] Platform: Missing gamepad support.
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp.
// https://github.com/ocornut/imgui
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2019-04-03: Misc: Renamed imgui_impl_freeglut.cpp/.h to imgui_impl_glut.cpp/.h.
//  2019-03-25: Misc: Made io.DeltaTime always above zero.
//  2018-11-30: Misc: Setting up io.BackendPlatformName so it can be displayed in the About Window.
//  2018-03-22: Added GLUT Platform binding.
// unreferenced local function has been removed (stb stuff)
// Current time, in milliseconds
// Glut has 1 function for characters and one for "special keys". We map the characters in the 0..255 range and the keys above.
// == 9 == CTRL+I
// == CTRL+H
// == CTRL+M
// == CTRL+M
// Setup time step
// Start the frame
// Send character to imgui
//printf("char_down_func %d '%c'\n", c, c);
// Store letters in KeysDown[] array as both uppercase and lowercase + Handle GLUT translating CTRL+A..CTRL+Z as 1..26.
// This is a hacky mess but GLUT is unable to distinguish e.g. a TAB key from CTRL+I so this is probably the best we can do here.
// Unused
//printf("char_up_func %d '%c'\n", c, c);
// Unused
//printf("key_down_func %d\n", key);
// Unused
//printf("key_up_func %d\n", key);
// Unused
// Unused
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_marmalade.cpp
// dear imgui: Renderer + Platform Binding for Marmalade + IwGx
// Marmalade code: Copyright (C) 2015 by Giovanni Zito (this file is part of Dear ImGui)
// Implemented features:
//  [X] Renderer: User texture binding. Use 'CIwTexture*' as ImTextureID. Read the FAQ about ImTextureID!
// Missing features:
//  [ ] Renderer: Clipping rectangles are not honored.
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp.
// https://github.com/ocornut/imgui
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2019-07-21: Inputs: Added mapping for ImGuiKey_KeyPadEnter.
//  2019-05-11: Inputs: Don't filter value from character callback before calling AddInputCharacter().
//  2018-11-30: Misc: Setting up io.BackendPlatformName/io.BackendRendererName so they can be displayed in the About Window.
//  2018-02-16: Misc: Obsoleted the io.RenderDrawListsFn callback and exposed ImGui_Marmalade_RenderDrawData() in the .h file so you can call it yourself.
//  2018-02-06: Misc: Removed call to ImGui::Shutdown() which is not available from 1.60 WIP, user needs to call CreateContext/DestroyContext themselves.
//  2018-02-06: Inputs: Added mapping for ImGuiKey_Space.
// Data
// use this setting to scale the interface - e.g. on device you could use 2 or 3 scale factor
// Render function.
// (this used to be set in io.RenderDrawListsFn and called by ImGui::Render(), but you can now call this directly from your main loop)
// Avoid rendering when minimized
// Render command lists
// FIXME-OPT: optimize multiplication on GPU using vertex shader/projection matrix.
// FIXME: Not honoring ClipRect fields.
// TODO: restore modified state (i.e. mvp matrix)
/*user_data*/)
/*user_data*/, const char* text)
// pEvent->m_Button is of type s3ePointerButton and indicates which mouse
// button was pressed.  For touchscreen this should always have the value
// S3E_POINTER_BUTTON_SELECT
// Build texture atlas
// Upload texture to graphics system
// allocates and own buffers
// Store our identifier
// Keyboard mapping. ImGui will use those indices to peek into the io.KeysDown[] array.
// Setup display size (every frame to accommodate for window resizing)
// For retina display or other situations where window coordinates are different from framebuffer coordinates. User storage only, presently not used by ImGui.
// Setup time step
// Mouse position (set to -FLT_MAX,-FLT_MAX if no mouse / on another screen, etc.)
// If a mouse press event came, always pass it as "mouse held this frame", so we don't miss click-release events that are shorter than 1 frame.
// TODO: Hide OS mouse cursor if ImGui is drawing it
// s3ePointerSetInt(S3E_POINTER_HIDE_CURSOR,(io.MouseDrawCursor ? 0 : 1));
// Show/hide OSD keyboard
// Some text input widget is active?
// show OSD keyboard
// No text input widget is active
// hide OSD keyboard
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_opengl2.cpp
// dear imgui: Renderer for OpenGL2 (legacy OpenGL, fixed pipeline)
// This needs to be used along with a Platform Binding (e.g. GLFW, SDL, Win32, custom..)
// Implemented features:
//  [X] Renderer: User texture binding. Use 'GLuint' OpenGL texture identifier as void*/ImTextureID. Read the FAQ about ImTextureID!
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp.
// https://github.com/ocornut/imgui
// **DO NOT USE THIS CODE IF YOUR CODE/ENGINE IS USING MODERN OPENGL (SHADERS, VBO, VAO, etc.)**
// **Prefer using the code in imgui_impl_opengl3.cpp**
// This code is mostly provided as a reference to learn how ImGui integration works, because it is shorter to read.
// If your code is using GL3+ context or any semi modern OpenGL calls, using this is likely to make everything more
// complicated, will require your code to reset every single OpenGL attributes to their initial state, and might
// confuse your GPU driver.
// The GL2 code is unable to reset attributes or even call e.g. "glUseProgram(0)" because they don't exist in that API.
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2019-04-30: OpenGL: Added support for special ImDrawCallback_ResetRenderState callback to reset render state.
//  2019-02-11: OpenGL: Projecting clipping rectangles correctly using draw_data->FramebufferScale to allow multi-viewports for retina display.
//  2018-11-30: Misc: Setting up io.BackendRendererName so it can be displayed in the About Window.
//  2018-08-03: OpenGL: Disabling/restoring GL_LIGHTING and GL_COLOR_MATERIAL to increase compatibility with legacy OpenGL applications.
//  2018-06-08: Misc: Extracted imgui_impl_opengl2.cpp/.h away from the old combined GLFW/SDL+OpenGL2 examples.
//  2018-06-08: OpenGL: Use draw_data->DisplayPos and draw_data->DisplaySize to setup projection matrix and clipping rectangle.
//  2018-02-16: Misc: Obsoleted the io.RenderDrawListsFn callback and exposed ImGui_ImplOpenGL2_RenderDrawData() in the .h file so you can call it yourself.
//  2017-09-01: OpenGL: Save and restore current polygon mode.
//  2016-09-10: OpenGL: Uploading font texture as RGBA32 to increase compatibility with users shaders (not ideal).
//  2016-09-05: OpenGL: Fixed save and restore of current scissor rectangle.
// MSVC 2008 or earlier
// intptr_t
// intptr_t
// Include OpenGL header (without an OpenGL loader) requires a bit of fiddling
// It is customary to use APIENTRY for OpenGL function pointer declarations on all platforms.  Additionally, the Windows OpenGL header needs APIENTRY.
// Some Windows OpenGL headers need this
// OpenGL Data
// Functions
// Setup back-end capabilities flags
// Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled, vertex/texcoord/color pointers, polygon fill.
// If you are using this code with non-legacy OpenGL header/contexts (which you should not, prefer using imgui_impl_opengl3.cpp!!),
// you may need to backup/reset/restore current shader using the lines below. DO NOT MODIFY THIS FILE! Add the code in your calling function:
//  GLint last_program;
//  glGetIntegerv(GL_CURRENT_PROGRAM, &last_program);
//  glUseProgram(0);
//  ImGui_ImplOpenGL2_RenderDrawData(...);
//  glUseProgram(last_program)
// Setup viewport, orthographic projection matrix
// Our visible imgui space lies from draw_data->DisplayPos (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayPos is (0,0) for single viewport apps.
// OpenGL2 Render function.
// (this used to be set in io.RenderDrawListsFn and called by ImGui::Render(), but you can now call this directly from your main loop)
// Note that this implementation is little overcomplicated because we are saving/setting up/restoring every OpenGL state explicitly, in order to be able to run within any OpenGL engine that doesn't do so.
// Avoid rendering when minimized, scale coordinates for retina displays (screen coordinates != framebuffer coordinates)
// Backup GL state
// Setup desired GL state
// Will project scissor/clipping rectangles into framebuffer space
// (0,0) unless using multi-viewports
// (1,1) unless using retina display which are often (2,2)
// Render command lists
// User callback, registered via ImDrawList::AddCallback()
// (ImDrawCallback_ResetRenderState is a special callback value used by the user to request the renderer to reset render state.)
// Project scissor/clipping rectangles into framebuffer space
// Apply scissor/clipping rectangle
// Bind texture, Draw
// Restore modified GL state
// Build texture atlas
// Load as RGBA 32-bit (75% of the memory is wasted, but default font is so small) because it is more likely to be compatible with user's existing shaders. If your ImTextureId represent a higher-level concept than just a GL texture id, consider calling GetTexDataAsAlpha8() instead to save on GPU memory.
// Upload texture to graphics system
// Store our identifier
// Restore state
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_opengl3.cpp
// dear imgui: Renderer for modern OpenGL with shaders / programmatic pipeline
// - Desktop GL: 2.x 3.x 4.x
// - Embedded GL: ES 2.0 (WebGL 1.0), ES 3.0 (WebGL 2.0)
// This needs to be used along with a Platform Binding (e.g. GLFW, SDL, Win32, custom..)
// Implemented features:
//  [X] Renderer: User texture binding. Use 'GLuint' OpenGL texture identifier as void*/ImTextureID. Read the FAQ about ImTextureID!
//  [x] Renderer: Desktop GL only: Support for large meshes (64k+ vertices) with 16-bit indices.
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp.
// https://github.com/ocornut/imgui
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2020-01-07: OpenGL: Added support for glbindings OpenGL loader.
//  2019-10-25: OpenGL: Using a combination of GL define and runtime GL version to decide whether to use glDrawElementsBaseVertex(). Fix building with pre-3.2 GL loaders.
//  2019-09-22: OpenGL: Detect default GL loader using __has_include compiler facility.
//  2019-09-16: OpenGL: Tweak initialization code to allow application calling ImGui_ImplOpenGL3_CreateFontsTexture() before the first NewFrame() call.
//  2019-05-29: OpenGL: Desktop GL only: Added support for large mesh (64K+ vertices), enable ImGuiBackendFlags_RendererHasVtxOffset flag.
//  2019-04-30: OpenGL: Added support for special ImDrawCallback_ResetRenderState callback to reset render state.
//  2019-03-29: OpenGL: Not calling glBindBuffer more than necessary in the render loop.
//  2019-03-15: OpenGL: Added a dummy GL call + comments in ImGui_ImplOpenGL3_Init() to detect uninitialized GL function loaders early.
//  2019-03-03: OpenGL: Fix support for ES 2.0 (WebGL 1.0).
//  2019-02-20: OpenGL: Fix for OSX not supporting OpenGL 4.5, we don't try to read GL_CLIP_ORIGIN even if defined by the headers/loader.
//  2019-02-11: OpenGL: Projecting clipping rectangles correctly using draw_data->FramebufferScale to allow multi-viewports for retina display.
//  2019-02-01: OpenGL: Using GLSL 410 shaders for any version over 410 (e.g. 430, 450).
//  2018-11-30: Misc: Setting up io.BackendRendererName so it can be displayed in the About Window.
//  2018-11-13: OpenGL: Support for GL 4.5's glClipControl(GL_UPPER_LEFT) / GL_CLIP_ORIGIN.
//  2018-08-29: OpenGL: Added support for more OpenGL loaders: glew and glad, with comments indicative that any loader can be used.
//  2018-08-09: OpenGL: Default to OpenGL ES 3 on iOS and Android. GLSL version default to "#version 300 ES".
//  2018-07-30: OpenGL: Support for GLSL 300 ES and 410 core. Fixes for Emscripten compilation.
//  2018-07-10: OpenGL: Support for more GLSL versions (based on the GLSL version string). Added error output when shaders fail to compile/link.
//  2018-06-08: Misc: Extracted imgui_impl_opengl3.cpp/.h away from the old combined GLFW/SDL+OpenGL3 examples.
//  2018-06-08: OpenGL: Use draw_data->DisplayPos and draw_data->DisplaySize to setup projection matrix and clipping rectangle.
//  2018-05-25: OpenGL: Removed unnecessary backup/restore of GL_ELEMENT_ARRAY_BUFFER_BINDING since this is part of the VAO state.
//  2018-05-14: OpenGL: Making the call to glBindSampler() optional so 3.2 context won't fail if the function is a NULL pointer.
//  2018-03-06: OpenGL: Added const char* glsl_version parameter to ImGui_ImplOpenGL3_Init() so user can override the GLSL version e.g. "#version 150".
//  2018-02-23: OpenGL: Create the VAO in the render function so the setup can more easily be used with multiple shared GL context.
//  2018-02-16: Misc: Obsoleted the io.RenderDrawListsFn callback and exposed ImGui_ImplSdlGL3_RenderDrawData() in the .h file so you can call it yourself.
//  2018-01-07: OpenGL: Changed GLSL shader version from 330 to 150.
//  2017-09-01: OpenGL: Save and restore current bound sampler. Save and restore current polygon mode.
//  2017-05-01: OpenGL: Fixed save and restore of current blend func state.
//  2017-05-01: OpenGL: Fixed save and restore of current GL_ACTIVE_TEXTURE.
//  2016-09-05: OpenGL: Fixed save and restore of current scissor rectangle.
//  2016-07-29: OpenGL: Explicitly setting GL_UNPACK_ROW_LENGTH to reduce issues because SDL changes it. (#752)
//----------------------------------------
// OpenGL    GLSL      GLSL
// version   version   string
//----------------------------------------
//  2.0       110       "#version 110"
//  2.1       120       "#version 120"
//  3.0       130       "#version 130"
//  3.1       140       "#version 140"
//  3.2       150       "#version 150"
//  3.3       330       "#version 330 core"
//  4.0       400       "#version 400 core"
//  4.1       410       "#version 410 core"
//  4.2       420       "#version 410 core"
//  4.3       430       "#version 430 core"
//  ES 2.0    100       "#version 100"      = WebGL 1.0
//  ES 3.0    300       "#version 300 es"   = WebGL 2.0
//----------------------------------------
// MSVC 2008 or earlier
// intptr_t
// intptr_t
// Auto-enable GLES on matching platforms
// iOS, Android  -> GL ES 3, "#version 300 es"
// Emscripten    -> GL ES 2, "#version 100"
// GL includes
// Use GL ES 3
// Use GL ES 3
// About Desktop OpenGL function loaders:
//  Modern desktop OpenGL doesn't have a standard portable header file to load OpenGL function pointers.
//  Helper libraries are often used for this purpose! Here we are supporting a few common ones (gl3w, glew, glad).
//  You may use another loader/header of your choice (glext, glLoadGen, etc.), or chose to manually implement your own.
// Needs to be initialized with gl3wInit() in user's code
// Needs to be initialized with glewInit() in user's code
// Needs to be initialized with gladLoadGL() in user's code
// Initialize with glbinding::initialize()
// Desktop GL 3.2+ has glDrawElementsBaseVertex() which GL ES and WebGL don't have.
// OpenGL Data
// Extracted at runtime using GL_MAJOR_VERSION, GL_MINOR_VERSION queries.
// Specified by user or detected based on compile time GL settings.
// Uniforms location
// Vertex attributes location
// Functions
// Query for GL version
// GLES 2
// Setup back-end capabilities flags
// We can honor the ImDrawCmd::VtxOffset field, allowing for large meshes.
// Store GLSL version string so we can refer to it later in case we recreate shaders.
// Note: GLSL version is NOT the same as GL version. Leave this to NULL if unsure.
// Dummy construct to make it easily visible in the IDE and debugger which GL loader has been selected.
// The code actually never uses the 'gl_loader' variable! It is only here so you can read it!
// If auto-detection fails or doesn't select the same GL loader file as used by your application,
// you are likely to get a crash below.
// You can explicitly select a loader by using '#define IMGUI_IMPL_OPENGL_LOADER_XXX' in imconfig.h or compiler command-line.
// IMGUI_IMPL_OPENGL_LOADER_CUSTOM
// Make a dummy GL call (we don't actually need the result)
// IF YOU GET A CRASH HERE: it probably means that you haven't initialized the OpenGL function loader used by this code.
// Desktop OpenGL 3/4 need a function loader. See the IMGUI_IMPL_OPENGL_LOADER_xxx explanation above.
// Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled, polygon fill
// Setup viewport, orthographic projection matrix
// Our visible imgui space lies from draw_data->DisplayPos (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayPos is (0,0) for single viewport apps.
// We use combined texture/sampler state. Applications using GL 3.3 may set that otherwise.
// Bind vertex/index buffers and setup attributes for ImDrawVert
// OpenGL3 Render function.
// (this used to be set in io.RenderDrawListsFn and called by ImGui::Render(), but you can now call this directly from your main loop)
// Note that this implementation is little overcomplicated because we are saving/setting up/restoring every OpenGL state explicitly, in order to be able to run within any OpenGL engine that doesn't do so.
// Avoid rendering when minimized, scale coordinates for retina displays (screen coordinates != framebuffer coordinates)
// Backup GL state
// Support for GL 4.5's glClipControl(GL_UPPER_LEFT)
// Setup desired GL state
// Recreate the VAO every time (this is to easily allow multiple GL contexts to be rendered to. VAO are not shared among GL contexts)
// The renderer would actually work without any VAO bound, but then our VertexAttrib calls would overwrite the default one currently bound.
// Will project scissor/clipping rectangles into framebuffer space
// (0,0) unless using multi-viewports
// (1,1) unless using retina display which are often (2,2)
// Render command lists
// Upload vertex/index buffers
// User callback, registered via ImDrawList::AddCallback()
// (ImDrawCallback_ResetRenderState is a special callback value used by the user to request the renderer to reset render state.)
// Project scissor/clipping rectangles into framebuffer space
// Apply scissor/clipping rectangle
// Support for GL 4.5 rarely used glClipControl(GL_UPPER_LEFT)
// Bind texture, Draw
// Destroy the temporary VAO
// Restore modified GL state
// Build texture atlas
// Load as RGBA 32-bit (75% of the memory is wasted, but default font is so small) because it is more likely to be compatible with user's existing shaders. If your ImTextureId represent a higher-level concept than just a GL texture id, consider calling GetTexDataAsAlpha8() instead to save on GPU memory.
// Upload texture to graphics system
// Store our identifier
// Restore state
// If you get an error please report on github. You may try different GL context version or GLSL version. See GL<>GLSL version table at the top of this file.
// If you get an error please report on GitHub. You may try different GL context version or GLSL version.
// Backup GL state
// Parse GLSL version string
// Select shaders matching our GLSL versions
// Create shaders
// Create buffers
// Restore modified GL state
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_sdl.cpp
// dear imgui: Platform Binding for SDL2
// This needs to be used along with a Renderer (e.g. DirectX11, OpenGL3, Vulkan..)
// (Info: SDL2 is a cross-platform general purpose library for handling windows, inputs, graphics context creation, etc.)
// (Requires: SDL 2.0. Prefer SDL 2.0.4+ for full feature support.)
// Implemented features:
//  [X] Platform: Mouse cursor shape and visibility. Disable with 'io.ConfigFlags |= ImGuiConfigFlags_NoMouseCursorChange'.
//  [X] Platform: Clipboard support.
//  [X] Platform: Keyboard arrays indexed using SDL_SCANCODE_* codes, e.g. ImGui::IsKeyPressed(SDL_SCANCODE_SPACE).
//  [X] Platform: Gamepad support. Enabled with 'io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad'.
// Missing features:
//  [ ] Platform: SDL2 handling of IME under Windows appears to be broken and it explicitly disable the regular Windows IME. You can restore Windows IME by compiling SDL with SDL_DISABLE_WINDOWS_IME.
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp.
// https://github.com/ocornut/imgui
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2019-12-17: Inputs: On Wayland, use SDL_GetMouseState (because there is no global mouse state).
//  2019-12-05: Inputs: Added support for ImGuiMouseCursor_NotAllowed mouse cursor.
//  2019-07-21: Inputs: Added mapping for ImGuiKey_KeyPadEnter.
//  2019-04-23: Inputs: Added support for SDL_GameController (if ImGuiConfigFlags_NavEnableGamepad is set by user application).
//  2019-03-12: Misc: Preserve DisplayFramebufferScale when main window is minimized.
//  2018-12-21: Inputs: Workaround for Android/iOS which don't seem to handle focus related calls.
//  2018-11-30: Misc: Setting up io.BackendPlatformName so it can be displayed in the About Window.
//  2018-11-14: Changed the signature of ImGui_ImplSDL2_ProcessEvent() to take a 'const SDL_Event*'.
//  2018-08-01: Inputs: Workaround for Emscripten which doesn't seem to handle focus related calls.
//  2018-06-29: Inputs: Added support for the ImGuiMouseCursor_Hand cursor.
//  2018-06-08: Misc: Extracted imgui_impl_sdl.cpp/.h away from the old combined SDL2+OpenGL/Vulkan examples.
//  2018-06-08: Misc: ImGui_ImplSDL2_InitForOpenGL() now takes a SDL_GLContext parameter.
//  2018-05-09: Misc: Fixed clipboard paste memory leak (we didn't call SDL_FreeMemory on the data returned by SDL_GetClipboardText).
//  2018-03-20: Misc: Setup io.BackendFlags ImGuiBackendFlags_HasMouseCursors flag + honor ImGuiConfigFlags_NoMouseCursorChange flag.
//  2018-02-16: Inputs: Added support for mouse cursors, honoring ImGui::GetMouseCursor() value.
//  2018-02-06: Misc: Removed call to ImGui::Shutdown() which is not available from 1.60 WIP, user needs to call CreateContext/DestroyContext themselves.
//  2018-02-06: Inputs: Added mapping for ImGuiKey_Space.
//  2018-02-05: Misc: Using SDL_GetPerformanceCounter() instead of SDL_GetTicks() to be able to handle very high framerate (1000+ FPS).
//  2018-02-05: Inputs: Keyboard mapping is using scancodes everywhere instead of a confusing mixture of keycodes and scancodes.
//  2018-01-20: Inputs: Added Horizontal Mouse Wheel support.
//  2018-01-19: Inputs: When available (SDL 2.0.4+) using SDL_CaptureMouse() to retrieve coordinates outside of client area when dragging. Otherwise (SDL 2.0.3 and before) testing for SDL_WINDOW_INPUT_FOCUS instead of SDL_WINDOW_MOUSE_FOCUS.
//  2018-01-18: Inputs: Added mapping for ImGuiKey_Insert.
//  2017-08-25: Inputs: MousePos set to -FLT_MAX,-FLT_MAX when mouse is unavailable/missing (instead of -1,-1).
//  2016-10-15: Misc: Added a void* user_data parameter to Clipboard function handlers.
// SDL
// Data
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// If you have multiple SDL events and some of them are not meant to be used by dear imgui, you may need to filter events based on their windowID field.
// Setup back-end capabilities flags
// We can honor GetMouseCursor() values (optional)
// We can honor io.WantSetMousePos requests (optional, rarely used)
// Keyboard mapping. ImGui will use those indices to peek into the io.KeysDown[] array.
// Load mouse cursors
// Check and store if we are on Wayland
// Viewport branch will need this.
// Destroy last known clipboard data
// Destroy SDL mouse cursors
// Set OS mouse position if requested (rarely used, only when ImGuiConfigFlags_NavEnableSetMousePos is enabled by user)
// If a mouse press event came, always pass it as "mouse held this frame", so we don't miss click-release events that are shorter than 1 frame.
// SDL_GetMouseState() gives mouse position seemingly based on the last window entered/focused(?)
// The creation of a new windows at runtime and SDL_CaptureMouse both seems to severely mess up with that, so we retrieve that position globally.
// Won't use this workaround when on Wayland, as there is no global mouse position.
// SDL_CaptureMouse() let the OS know e.g. that our imgui drag outside the SDL window boundaries shouldn't e.g. trigger the OS window resize cursor.
// The function is only supported from SDL 2.0.4 (released Jan 2016)
// Hide OS mouse cursor if imgui is drawing it or if it wants no cursor
// Show OS mouse cursor
// Get gamepad
// Update gamepad inputs
// SDL_gamecontroller.h suggests using this value.
// Cross / A
// Circle / B
// Square / X
// Triangle / Y
// D-Pad Left
// D-Pad Right
// D-Pad Up
// D-Pad Down
// L1 / LB
// R1 / RB
// L1 / LB
// R1 / RB
// Setup display size (every frame to accommodate for window resizing)
// Setup time step (we don't use SDL_GetTicks() because it is using millisecond resolution)
// Update game controllers (if enabled and available)
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_vulkan.cpp
// dear imgui: Renderer for Vulkan
// This needs to be used along with a Platform Binding (e.g. GLFW, SDL, Win32, custom..)
// Implemented features:
//  [X] Renderer: Support for large meshes (64k+ vertices) with 16-bit indices.
// Missing features:
//  [ ] Renderer: User texture binding. Changes of ImTextureID aren't supported by this binding! See https://github.com/ocornut/imgui/pull/914
// You can copy and use unmodified imgui_impl_* files in your project. See main.cpp for an example of using this.
// If you are new to dear imgui, read examples/README.txt and read the documentation at the top of imgui.cpp.
// https://github.com/ocornut/imgui
// The aim of imgui_impl_vulkan.h/.cpp is to be usable in your engine without any modification.
// IF YOU FEEL YOU NEED TO MAKE ANY CHANGE TO THIS CODE, please share them and your feedback at https://github.com/ocornut/imgui/
// Important note to the reader who wish to integrate imgui_impl_vulkan.cpp/.h in their own engine/app.
// - Common ImGui_ImplVulkan_XXX functions and structures are used to interface with imgui_impl_vulkan.cpp/.h.
//   You will use those if you want to use this rendering back-end in your engine/app.
// - Helper ImGui_ImplVulkanH_XXX functions and structures are only used by this example (main.cpp) and by
//   the back-end itself (imgui_impl_vulkan.cpp), but should PROBABLY NOT be used by your own engine/app code.
// Read comments in imgui_impl_vulkan.h.
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2019-08-01: Vulkan: Added support for specifying multisample count. Set ImGui_ImplVulkan_InitInfo::MSAASamples to one of the VkSampleCountFlagBits values to use, default is non-multisampled as before.
//  2019-05-29: Vulkan: Added support for large mesh (64K+ vertices), enable ImGuiBackendFlags_RendererHasVtxOffset flag.
//  2019-04-30: Vulkan: Added support for special ImDrawCallback_ResetRenderState callback to reset render state.
//  2019-04-04: *BREAKING CHANGE*: Vulkan: Added ImageCount/MinImageCount fields in ImGui_ImplVulkan_InitInfo, required for initialization (was previously a hard #define IMGUI_VK_QUEUED_FRAMES 2). Added ImGui_ImplVulkan_SetMinImageCount().
//  2019-04-04: Vulkan: Added VkInstance argument to ImGui_ImplVulkanH_CreateWindow() optional helper.
//  2019-04-04: Vulkan: Avoid passing negative coordinates to vkCmdSetScissor, which debug validation layers do not like.
//  2019-04-01: Vulkan: Support for 32-bit index buffer (#define ImDrawIdx unsigned int).
//  2019-02-16: Vulkan: Viewport and clipping rectangles correctly using draw_data->FramebufferScale to allow retina display.
//  2018-11-30: Misc: Setting up io.BackendRendererName so it can be displayed in the About Window.
//  2018-08-25: Vulkan: Fixed mishandled VkSurfaceCapabilitiesKHR::maxImageCount=0 case.
//  2018-06-22: Inverted the parameters to ImGui_ImplVulkan_RenderDrawData() to be consistent with other bindings.
//  2018-06-08: Misc: Extracted imgui_impl_vulkan.cpp/.h away from the old combined GLFW+Vulkan example.
//  2018-06-08: Vulkan: Use draw_data->DisplayPos and draw_data->DisplaySize to setup projection matrix and clipping rectangle.
//  2018-03-03: Vulkan: Various refactor, created a couple of ImGui_ImplVulkanH_XXX helper that the example can use and that viewport support will use.
//  2018-03-01: Vulkan: Renamed ImGui_ImplVulkan_Init_Info to ImGui_ImplVulkan_InitInfo and fields to match more closely Vulkan terminology.
//  2018-02-16: Misc: Obsoleted the io.RenderDrawListsFn callback, ImGui_ImplVulkan_Render() calls ImGui_ImplVulkan_RenderDrawData() itself.
//  2018-02-06: Misc: Removed call to ImGui::Shutdown() which is not available from 1.60 WIP, user needs to call CreateContext/DestroyContext themselves.
//  2017-05-15: Vulkan: Fix scissor offset being negative. Fix new Vulkan validation warnings. Set required depth member for buffer image copy.
//  2016-11-13: Vulkan: Fix validation layer warnings and errors and redeclare gl_PerVertex.
//  2016-10-18: Vulkan: Add location decorators & change to use structs as in/out in glsl, update embedded spv (produced with glslangValidator -x). Null the released resources.
//  2016-08-27: Vulkan: Fix Vulkan example for use when a depth buffer is active.
// Reusable buffers used for rendering 1 current in-flight frame, for ImGui_ImplVulkan_RenderDrawData()
// [Please zero-clear before use!]
// Each viewport will hold 1 ImGui_ImplVulkanH_WindowRenderBuffers
// [Please zero-clear before use!]
// Vulkan data
// Font data
// Render buffers
// Forward Declarations
//-----------------------------------------------------------------------------
// SHADERS
//-----------------------------------------------------------------------------
// glsl_shader.vert, compiled with:
// # glslangValidator -V -x -o glsl_shader.vert.u32 glsl_shader.vert
/*
// glsl_shader.frag, compiled with:
// # glslangValidator -V -x -o glsl_shader.frag.u32 glsl_shader.frag
/*
//-----------------------------------------------------------------------------
// FUNCTIONS
//-----------------------------------------------------------------------------
// Unable to find memoryType
// Bind pipeline and descriptor sets:
// Bind Vertex And Index Buffer:
// Setup viewport:
// Setup scale and translation:
// Our visible imgui space lies from draw_data->DisplayPps (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayPos is (0,0) for single viewport apps.
// Render function
// (this used to be set in io.RenderDrawListsFn and called by ImGui::Render(), but you can now call this directly from your main loop)
// Avoid rendering when minimized, scale coordinates for retina displays (screen coordinates != framebuffer coordinates)
// Allocate array to store enough vertex/index buffers
// Create or resize the vertex/index buffers
// Upload vertex/index data into a single contiguous GPU buffer
// Setup desired Vulkan state
// Will project scissor/clipping rectangles into framebuffer space
// (0,0) unless using multi-viewports
// (1,1) unless using retina display which are often (2,2)
// Render command lists
// (Because we merged all buffers into a single one, we maintain our own offset into them)
// User callback, registered via ImDrawList::AddCallback()
// (ImDrawCallback_ResetRenderState is a special callback value used by the user to request the renderer to reset render state.)
// Project scissor/clipping rectangles into framebuffer space
// Negative offsets are illegal for vkCmdSetScissor
// Apply scissor/clipping rectangle
// Draw
// Create the Image:
// Create the Image View:
// Update the Descriptor Set:
// Create the Upload Buffer:
// Upload to Buffer:
// Copy to Image:
// Store our identifier
// Create The Shader Modules:
// Create Descriptor Set:
// Constants: we are using 'vec2 offset' and 'vec2 scale' instead of a full 3d projection matrix
// Setup back-end capabilities flags
// We can honor the ImDrawCmd::VtxOffset field, allowing for large meshes.
//-------------------------------------------------------------------------
// Internal / Miscellaneous Vulkan Helpers
// (Used by example's main.cpp. Used by multi-viewport features. PROBABLY NOT used by your own app.)
//-------------------------------------------------------------------------
// You probably do NOT need to use or care about those functions.
// Those functions only exist because:
//   1) they facilitate the readability and maintenance of the multiple main.cpp examples files.
//   2) the upcoming multi-viewport feature will need them internally.
// Generally we avoid exposing any kind of superfluous high-level helpers in the bindings,
// but it is too much code to duplicate everywhere so we exceptionally expose them.
//
// Your engine/app will likely _already_ have code to setup all that stuff (swap chain, render pass, frame buffers, etc.).
// You may read this code to learn about Vulkan, but it is recommended you use you own custom tailored code to do equivalent work.
// (The ImGui_ImplVulkanH_XXX functions do not interact with any of the state used by the regular ImGui_ImplVulkan_XXX functions)
//-------------------------------------------------------------------------
// Per Spec Format and View Format are expected to be the same unless VK_IMAGE_CREATE_MUTABLE_BIT was set at image creation
// Assuming that the default behavior is without setting this bit, there is no need for separate Swapchain image and image view format
// Additionally several new color spaces were introduced with Vulkan Spec v1.0.40,
// hence we must make sure that a format with the mostly available color space, VK_COLOR_SPACE_SRGB_NONLINEAR_KHR, is found and used.
// First check if only one format, VK_FORMAT_UNDEFINED, is available, which would imply that any format is available
// No point in searching another format
// Request several formats, the first found will be used
// If none of the requested image formats could be found, use the first available
// Request a certain mode and confirm that it is available. If not use VK_PRESENT_MODE_FIFO_KHR which is mandatory
//for (uint32_t avail_i = 0; avail_i < avail_count; avail_i++)
//    printf("[vulkan] avail_modes[%d] = %d\n", avail_i, avail_modes[avail_i]);
// Always available
// Create Command Buffers
// Also destroy old swap chain and in-flight frames data, if any.
// We don't use ImGui_ImplVulkanH_DestroyWindow() because we want to preserve the old swapchain to create the new one.
// Destroy old Framebuffer
// If min image count was not specified, request different count of images dependent on selected present mode
// Create Swapchain
// Assume that graphics family == present family
// Create the Render Pass
// Create The Image Views
// Create Framebuffer
// FIXME: We could wait on the Queue if we had the queue in wd-> (otherwise VulkanH functions can't use globals)
//vkQueueWaitIdle(g_Queue);
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\imgui_impl_win32.cpp
// dear imgui: Platform Binding for Windows (standard windows API for 32 and 64 bits applications)
// This needs to be used along with a Renderer (e.g. DirectX11, OpenGL3, Vulkan..)
// Implemented features:
//  [X] Platform: Clipboard support (for Win32 this is actually part of core imgui)
//  [X] Platform: Mouse cursor shape and visibility. Disable with 'io.ConfigFlags |= ImGuiConfigFlags_NoMouseCursorChange'.
//  [X] Platform: Keyboard arrays indexed using VK_* Virtual Key Codes, e.g. ImGui::IsKeyPressed(VK_SPACE).
//  [X] Platform: Gamepad support. Enabled with 'io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad'.
// Using XInput library for gamepad (with recent Windows SDK this may leads to executables which won't run on Windows 7)
//#pragma comment(lib, "Xinput9_1_0")
// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2020-01-14: Inputs: Added support for #define IMGUI_IMPL_WIN32_DISABLE_GAMEPAD/IMGUI_IMPL_WIN32_DISABLE_LINKING_XINPUT.
//  2019-12-05: Inputs: Added support for ImGuiMouseCursor_NotAllowed mouse cursor.
//  2019-05-11: Inputs: Don't filter value from WM_CHAR before calling AddInputCharacter().
//  2019-01-17: Misc: Using GetForegroundWindow()+IsChild() instead of GetActiveWindow() to be compatible with windows created in a different thread or parent.
//  2019-01-17: Inputs: Added support for mouse buttons 4 and 5 via WM_XBUTTON* messages.
//  2019-01-15: Inputs: Added support for XInput gamepads (if ImGuiConfigFlags_NavEnableGamepad is set by user application).
//  2018-11-30: Misc: Setting up io.BackendPlatformName so it can be displayed in the About Window.
//  2018-06-29: Inputs: Added support for the ImGuiMouseCursor_Hand cursor.
//  2018-06-10: Inputs: Fixed handling of mouse wheel messages to support fine position messages (typically sent by track-pads).
//  2018-06-08: Misc: Extracted imgui_impl_win32.cpp/.h away from the old combined DX9/DX10/DX11/DX12 examples.
//  2018-03-20: Misc: Setup io.BackendFlags ImGuiBackendFlags_HasMouseCursors and ImGuiBackendFlags_HasSetMousePos flags + honor ImGuiConfigFlags_NoMouseCursorChange flag.
//  2018-02-20: Inputs: Added support for mouse cursors (ImGui::GetMouseCursor() value and WM_SETCURSOR message handling).
//  2018-02-06: Inputs: Added mapping for ImGuiKey_Space.
//  2018-02-06: Inputs: Honoring the io.WantSetMousePos by repositioning the mouse (when using navigation and ImGuiConfigFlags_NavMoveMouse is set).
//  2018-02-06: Misc: Removed call to ImGui::Shutdown() which is not available from 1.60 WIP, user needs to call CreateContext/DestroyContext themselves.
//  2018-01-20: Inputs: Added Horizontal Mouse Wheel support.
//  2018-01-08: Inputs: Added mapping for ImGuiKey_Insert.
//  2018-01-05: Inputs: Added WM_LBUTTONDBLCLK double-click handlers for window classes with the CS_DBLCLKS flag.
//  2017-10-23: Inputs: Added WM_SYSKEYDOWN / WM_SYSKEYUP handlers so e.g. the VK_MENU key can be read.
//  2017-10-23: Inputs: Using Win32 ::SetCapture/::GetCapture() to retrieve mouse positions outside the client area when dragging.
//  2016-11-12: Inputs: Only call Win32 ::SetCursor(NULL) when io.MouseDrawCursor is set.
// Win32 Data
// Functions
// Setup back-end capabilities flags
// We can honor GetMouseCursor() values (optional)
// We can honor io.WantSetMousePos requests (optional, rarely used)
// Keyboard mapping. ImGui will use those indices to peek into the io.KeysDown[] array that we will update during the application lifetime.
// Hide OS mouse cursor if imgui is drawing it or if it wants no cursor
// Show OS mouse cursor
// Set OS mouse position if requested (rarely used, only when ImGuiConfigFlags_NavEnableSetMousePos is enabled by user)
// Set mouse position
// Gamepad navigation mapping
// Calling XInputGetState() every frame on disconnected gamepads is unfortunately too slow.
// Instead we refresh gamepad availability by calling XInputGetCapabilities() _only_ after receiving WM_DEVICECHANGE.
// Cross / A
// Circle / B
// Square / X
// Triangle / Y
// D-Pad Left
// D-Pad Right
// D-Pad Up
// D-Pad Down
// L1 / LB
// R1 / RB
// L1 / LB
// R1 / RB
// #ifndef IMGUI_IMPL_WIN32_DISABLE_GAMEPAD
// Setup display size (every frame to accommodate for window resizing)
// Setup time step
// Read keyboard modifiers inputs
// io.KeysDown[], io.MousePos, io.MouseDown[], io.MouseWheel: filled by the WndProc handler below.
// Update OS mouse position
// Update OS mouse cursor with the cursor requested by imgui
// Update game controllers (if enabled and available)
// Allow compilation with old Windows SDK. MinGW doesn't have default _WIN32_WINNT/WINVER versions.
// Process Win32 mouse/keyboard inputs.
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// PS: In this Win32 handler, we use the capture API (GetCapture/SetCapture/ReleaseCapture) to be able to read mouse coordinates when dragging mouse outside of our window bounds.
// PS: We treat DBLCLK messages as regular mouse down messages, so this code will work on windows classes that have the CS_DBLCLKS flag set. Our own example app code doesn't set this flag.
// You can also use ToAscii()+GetKeyboardState() to retrieve characters.
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_allegro5\main.cpp
// dear imgui: standalone example application for Allegro 5
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// Setup Allegro
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;  // Enable Keyboard Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Main loop
// Poll and handle events (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// Cleanup
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_emscripten\main.cpp
// dear imgui: standalone example application for Emscripten, using SDL2 + OpenGL3
// This is mostly the same code as the SDL2 + OpenGL3 example, simply with the modifications needed to run on Emscripten.
// It is possible to combine both code into a single source file that will compile properly on Desktop and using Emscripten.
// See https://github.com/ocornut/imgui/pull/2492 as an example on how to do just that.
//
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// (Emscripten is a C++-to-javascript compiler, used to publish executables for the web. See https://emscripten.org/)
// Emscripten requires to have full control over the main loop. We're going to store our SDL book-keeping variables globally.
// Having a single function that acts as a loop prevents us to store state in the stack of said function. So we need some location for this.
// For clarity, our main loop code is declared at the end.
// Setup SDL
// For the browser using Emscripten, we are going to use WebGL1 with GL ES2. See the Makefile. for requirement details.
// It is very likely the generated file won't work in many browsers. Firefox is the only sure bet, but I have successfully
// run this code on Chrome for Android for example.
//const char* glsl_version = "#version 300 es";
// Create window with graphics context
// Enable vsync
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// For an Emscripten build we are disabling file-system access, so let's not attempt to do a fopen() of the imgui.ini file.
// You may manually call LoadIniSettingsFromMemory() to load settings from your own storage.
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// This function call won't return, and will engage in an infinite loop, processing events from the browser, and dispatching them.
// We can pass this argument as the second parameter of emscripten_set_main_loop_arg(), but we don't use that.
// Our state (make them static = more or less global) as a convenience to keep the example terse.
// Poll and handle events (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Capture events here, based on io.WantCaptureMouse and io.WantCaptureKeyboard
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_glfw_opengl2\main.cpp
// dear imgui: standalone example application for GLFW + OpenGL2, using legacy fixed pipeline
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// (GLFW is a cross-platform general purpose library for handling windows, inputs, OpenGL/Vulkan graphics context creation, etc.)
// **DO NOT USE THIS CODE IF YOUR CODE/ENGINE IS USING MODERN OPENGL (SHADERS, VBO, VAO, etc.)**
// **Prefer using the code in the example_glfw_opengl2/ folder**
// See imgui_impl_glfw.cpp for details.
// [Win32] Our example includes a copy of glfw3.lib pre-compiled with VS2010 to maximize ease of testing and compatibility with old VS compilers.
// To link with VS2010-era libraries, VS2015+ requires linking with legacy_stdio_definitions.lib, which we do using this pragma.
// Your own project should not be affected, as you are likely to link with a newer binary of GLFW that is adequate for your version of Visual Studio.
// Setup window
// Enable vsync
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Our state
// Main loop
// Poll and handle events (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// If you are using this code with non-legacy OpenGL header/contexts (which you should not, prefer using imgui_impl_opengl3.cpp!!),
// you may need to backup/reset/restore current shader using the commented lines below.
//GLint last_program;
//glGetIntegerv(GL_CURRENT_PROGRAM, &last_program);
//glUseProgram(0);
//glUseProgram(last_program);
// Cleanup
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_glfw_opengl3\main.cpp
// dear imgui: standalone example application for GLFW + OpenGL 3, using programmable pipeline
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// (GLFW is a cross-platform general purpose library for handling windows, inputs, OpenGL/Vulkan graphics context creation, etc.)
// About Desktop OpenGL function loaders:
//  Modern desktop OpenGL doesn't have a standard portable header file to load OpenGL function pointers.
//  Helper libraries are often used for this purpose! Here we are supporting a few common ones (gl3w, glew, glad).
//  You may use another loader/header of your choice (glext, glLoadGen, etc.), or chose to manually implement your own.
// Initialize with gl3wInit()
// Initialize with glewInit()
// Initialize with gladLoadGL()
// GLFW including OpenGL headers causes ambiguity or multiple definition errors.
// Initialize with glbinding::initialize()
// Include glfw3.h after our OpenGL definitions
// [Win32] Our example includes a copy of glfw3.lib pre-compiled with VS2010 to maximize ease of testing and compatibility with old VS compilers.
// To link with VS2010-era libraries, VS2015+ requires linking with legacy_stdio_definitions.lib, which we do using this pragma.
// Your own project should not be affected, as you are likely to link with a newer binary of GLFW that is adequate for your version of Visual Studio.
// Setup window
// Decide GL+GLSL versions
// GL 3.2 + GLSL 150
// 3.2+ only
// Required on Mac
// GL 3.0 + GLSL 130
//glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);  // 3.2+ only
//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);            // 3.0+ only
// Create window with graphics context
// Enable vsync
// Initialize OpenGL loader
// If you use IMGUI_IMPL_OPENGL_LOADER_CUSTOM, your loader is likely to requires some form of initialization.
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Our state
// Main loop
// Poll and handle events (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// Cleanup
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_glfw_vulkan\main.cpp
// dear imgui: standalone example application for Glfw + Vulkan
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// Important note to the reader who wish to integrate imgui_impl_vulkan.cpp/.h in their own engine/app.
// - Common ImGui_ImplVulkan_XXX functions and structures are used to interface with imgui_impl_vulkan.cpp/.h.
//   You will use those if you want to use this rendering back-end in your engine/app.
// - Helper ImGui_ImplVulkanH_XXX functions and structures are only used by this example (main.cpp) and by
//   the back-end itself (imgui_impl_vulkan.cpp), but should PROBABLY NOT be used by your own engine/app code.
// Read comments in imgui_impl_vulkan.h.
// printf, fprintf
// abort
// [Win32] Our example includes a copy of glfw3.lib pre-compiled with VS2010 to maximize ease of testing and compatibility with old VS compilers.
// To link with VS2010-era libraries, VS2015+ requires linking with legacy_stdio_definitions.lib, which we do using this pragma.
// Your own project should not be affected, as you are likely to link with a newer binary of GLFW that is adequate for your version of Visual Studio.
//#define IMGUI_UNLIMITED_FRAME_RATE
// Unused arguments
// IMGUI_VULKAN_DEBUG_REPORT
// Create Vulkan Instance
// Enabling multiple validation layers grouped as LunarG standard validation
// Enable debug report extension (we need additional storage, so we duplicate the user array to add our new extension to it)
// Create Vulkan Instance
// Get the function pointer (required for any extensions)
// Setup the debug report callback
// Create Vulkan Instance without any debug feature
// Select GPU
// If a number >1 of GPUs got reported, you should find the best fit GPU for your purpose
// e.g. VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU if available, or with the greatest memory available, etc.
// for sake of simplicity we'll just take the first one, assuming it has a graphics queue family.
// Select graphics queue family
// Create Logical Device (with 1 queue)
// Create Descriptor Pool
// All the ImGui_ImplVulkanH_XXX structures/functions are optional helpers used by the demo.
// Your real engine/app may not use them.
// Check for WSI support
// Select Surface Format
// Select Present Mode
//printf("[vulkan] Selected PresentMode = %d\n", wd->PresentMode);
// Create SwapChain, RenderPass, Framebuffer, etc.
// Remove the debug report callback
// IMGUI_VULKAN_DEBUG_REPORT
// wait indefinitely instead of periodically checking
// Record Imgui Draw Data and draw funcs into command buffer
// Submit command buffer
// Now we can use the next set of semaphores
// Setup GLFW window
// Setup Vulkan
// Create Window Surface
// Create Framebuffers
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Upload Fonts
// Use any command queue
// Our state
// Main loop
// Poll and handle events (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// Cleanup
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_glut_opengl2\main.cpp
// dear imgui: standalone example application for GLUT/FreeGLUT + OpenGL2, using legacy fixed pipeline
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// !!! GLUT/FreeGLUT IS OBSOLETE SOFTWARE. Using GLUT is not recommended unless you really miss the 90's. !!!
// !!! If someone or something is teaching you GLUT in 2019, you are being abused. Please show some resistance. !!!
// !!! Nowadays, prefer using GLFW or SDL instead!
// unreferenced local function has been removed
// Our state
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Start the Dear ImGui frame
// Rendering
//glUseProgram(0); // You may want this if using this code in an OpenGL 3+ context where shaders may be bound, but prefer using the GL3+ code.
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Create GLUT window
// Setup GLUT display function
// We will also call ImGui_ImplGLUT_InstallFuncs() to get all the other functions installed for us,
// otherwise it is possible to install our own functions and call the imgui_impl_glut.h functions ourselves.
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Cleanup
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_marmalade\main.cpp
// dear imgui: standalone example application for Marmalade
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// Copyright (C) 2015 by Giovanni Zito
// This file is part of Dear ImGui
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;  // Enable Keyboard Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Our state
// Main loop
// Poll and handle inputs
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// Cleanup
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_null\main.cpp
// dear imgui: null/dummy example application
// (compile and link imgui, create context, run headless with NO INPUTS, NO GRAPHICS OUTPUT)
// This is useful to test building, but you cannot interact with anything here!
// Build atlas
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_sdl_directx11\main.cpp
// dear imgui: standalone example application for SDL2 + DirectX 11
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// (SDL is a cross-platform general purpose library for handling windows, inputs, OpenGL/Vulkan graphics context creation, etc.)
// Data
// Forward declarations of helper functions
// Main code
// Setup SDL
// (Some versions of SDL before <2.0.10 appears to have performance/stalling issues on a minority of Windows systems,
// depending on whether SDL_INIT_GAMECONTROLLER is enabled or disabled.. updating to latest version of SDL is recommended!)
// Setup window
// Initialize Direct3D
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Our state
// Main loop
// Poll and handle events (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// Present with vsync
//g_pSwapChain->Present(0, 0); // Present without vsync
// Cleanup
// Helper functions
// Setup swap chain
//createDeviceFlags |= D3D11_CREATE_DEVICE_DEBUG;
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_sdl_opengl2\main.cpp
// dear imgui: standalone example application for SDL2 + OpenGL
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// (SDL is a cross-platform general purpose library for handling windows, inputs, OpenGL/Vulkan graphics context creation, etc.)
// **DO NOT USE THIS CODE IF YOUR CODE/ENGINE IS USING MODERN OPENGL (SHADERS, VBO, VAO, etc.)**
// **Prefer using the code in the example_sdl_opengl3/ folder**
// See imgui_impl_sdl.cpp for details.
// Main code
// Setup SDL
// (Some versions of SDL before <2.0.10 appears to have performance/stalling issues on a minority of Windows systems,
// depending on whether SDL_INIT_GAMECONTROLLER is enabled or disabled.. updating to latest version of SDL is recommended!)
// Setup window
// Enable vsync
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Our state
// Main loop
// Poll and handle events (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
//glUseProgram(0); // You may want this if using this code in an OpenGL 3+ context where shaders may be bound
// Cleanup
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_sdl_opengl3\main.cpp
// dear imgui: standalone example application for SDL2 + OpenGL
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// (SDL is a cross-platform general purpose library for handling windows, inputs, OpenGL/Vulkan graphics context creation, etc.)
// (GL3W is a helper library to access OpenGL functions since there is no standard header to access modern OpenGL functions easily. Alternatives are GLEW, Glad, etc.)
// About Desktop OpenGL function loaders:
//  Modern desktop OpenGL doesn't have a standard portable header file to load OpenGL function pointers.
//  Helper libraries are often used for this purpose! Here we are supporting a few common ones (gl3w, glew, glad).
//  You may use another loader/header of your choice (glext, glLoadGen, etc.), or chose to manually implement your own.
// Initialize with gl3wInit()
// Initialize with glewInit()
// Initialize with gladLoadGL()
// Initialize with glbinding::initialize()
// Main code
// Setup SDL
// (Some versions of SDL before <2.0.10 appears to have performance/stalling issues on a minority of Windows systems,
// depending on whether SDL_INIT_GAMECONTROLLER is enabled or disabled.. updating to latest version of SDL is recommended!)
// Decide GL+GLSL versions
// GL 3.2 Core + GLSL 150
// Always required on Mac
// GL 3.0 + GLSL 130
// Create window with graphics context
// Enable vsync
// Initialize OpenGL loader
// If you use IMGUI_IMPL_OPENGL_LOADER_CUSTOM, your loader is likely to requires some form of initialization.
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Our state
// Main loop
// Poll and handle events (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// Cleanup
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_sdl_vulkan\main.cpp
// dear imgui: standalone example application for SDL2 + Vulkan
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// Important note to the reader who wish to integrate imgui_impl_vulkan.cpp/.h in their own engine/app.
// - Common ImGui_ImplVulkan_XXX functions and structures are used to interface with imgui_impl_vulkan.cpp/.h.
//   You will use those if you want to use this rendering back-end in your engine/app.
// - Helper ImGui_ImplVulkanH_XXX functions and structures are only used by this example (main.cpp) and by
//   the back-end itself (imgui_impl_vulkan.cpp), but should PROBABLY NOT be used by your own engine/app code.
// Read comments in imgui_impl_vulkan.h.
// printf, fprintf
// abort
//#define IMGUI_UNLIMITED_FRAME_RATE
// Unused arguments
// IMGUI_VULKAN_DEBUG_REPORT
// Create Vulkan Instance
// Enabling multiple validation layers grouped as LunarG standard validation
// Enable debug report extension (we need additional storage, so we duplicate the user array to add our new extension to it)
// Create Vulkan Instance
// Get the function pointer (required for any extensions)
// Setup the debug report callback
// Create Vulkan Instance without any debug feature
// Select GPU
// If a number >1 of GPUs got reported, you should find the best fit GPU for your purpose
// e.g. VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU if available, or with the greatest memory available, etc.
// for sake of simplicity we'll just take the first one, assuming it has a graphics queue family.
// Select graphics queue family
// Create Logical Device (with 1 queue)
// Create Descriptor Pool
// All the ImGui_ImplVulkanH_XXX structures/functions are optional helpers used by the demo.
// Your real engine/app may not use them.
// Check for WSI support
// Select Surface Format
// Select Present Mode
//printf("[vulkan] Selected PresentMode = %d\n", wd->PresentMode);
// Create SwapChain, RenderPass, Framebuffer, etc.
// Remove the debug report callback
// IMGUI_VULKAN_DEBUG_REPORT
// wait indefinitely instead of periodically checking
// Record Imgui Draw Data and draw funcs into command buffer
// Submit command buffer
// Now we can use the next set of semaphores
// Setup SDL
// Setup window
// Setup Vulkan
// Create Window Surface
// Create Framebuffers
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Upload Fonts
// Use any command queue
// Our state
// Main loop
// Poll and handle events (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// Cleanup
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_win32_directx10\main.cpp
// dear imgui: standalone example application for DirectX 10
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// Data
// Forward declarations of helper functions
// Main code
// Create application window
// Initialize Direct3D
// Show the window
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Our state
// Main loop
// Poll and handle messages (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// Present with vsync
//g_pSwapChain->Present(0, 0); // Present without vsync
// Helper functions
// Setup swap chain
//createDeviceFlags |= D3D10_CREATE_DEVICE_DEBUG;
// Win32 message handler
// Disable ALT application menu
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_win32_directx11\main.cpp
// dear imgui - standalone example application for DirectX 11
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// Data
// Forward declarations of helper functions
// Main code
// Create application window
// Initialize Direct3D
// Show the window
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Our state
// Main loop
// Poll and handle messages (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// Present with vsync
//g_pSwapChain->Present(0, 0); // Present without vsync
// Cleanup
// Helper functions
// Setup swap chain
//createDeviceFlags |= D3D11_CREATE_DEVICE_DEBUG;
// Win32 message handler
// Disable ALT application menu
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_win32_directx12\main.cpp
// dear imgui: standalone example application for DirectX 12
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// FIXME: 64-bit only for now! (Because sizeof(ImTextureId) == sizeof(void*))
//#define DX12_ENABLE_DEBUG_LAYER
// Data
// Forward declarations of helper functions
// Main code
// Create application window
// Initialize Direct3D
// Show the window
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Our state
// Main loop
// Poll and handle messages (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// Present with vsync
//g_pSwapChain->Present(0, 0); // Present without vsync
// Helper functions
// Setup swap chain
// No fence was signaled
// means no fence was signaled
// Win32 message handler
// Disable ALT application menu
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\examples\example_win32_directx9\main.cpp
// dear imgui: standalone example application for DirectX 9
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// Data
// Forward declarations of helper functions
// Main code
// Create application window
// Initialize Direct3D
// Show the window
// Setup Dear ImGui context
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls
// Setup Dear ImGui style
//ImGui::StyleColorsClassic();
// Setup Platform/Renderer bindings
// Load Fonts
// - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.
// - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.
// - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).
// - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.
// - Read 'docs/FONTS.txt' for more instructions and details.
// - Remember that in C/C++ if you want to include a backslash \ in a string literal you need to write a double backslash \\ !
//io.Fonts->AddFontDefault();
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Roboto-Medium.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/Cousine-Regular.ttf", 15.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/DroidSans.ttf", 16.0f);
//io.Fonts->AddFontFromFileTTF("../../misc/fonts/ProggyTiny.ttf", 10.0f);
//ImFont* font = io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\ArialUni.ttf", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
//IM_ASSERT(font != NULL);
// Our state
// Main loop
// Poll and handle messages (inputs, window resize, etc.)
// You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.
// - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.
// - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.
// Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.
// Start the Dear ImGui frame
// 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
// 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.
// Create a window called "Hello, world!" and append into it.
// Display some text (you can use a format strings too)
// Edit bools storing our window open/close state
// Edit 1 float using a slider from 0.0f to 1.0f
// Edit 3 floats representing a color
// Buttons return true when clicked (most widgets return true when edited/activated)
// 3. Show another simple window.
// Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
// Rendering
// Handle loss of D3D9 device
// Helper functions
// Create the D3DDevice
// Present with vsync
//g_d3dpp.PresentationInterval = D3DPRESENT_INTERVAL_IMMEDIATE;   // Present without vsync, maximum unthrottled framerate
// Win32 message handler
// Disable ALT application menu
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\misc\cpp\imgui_stdlib.cpp
// imgui_stdlib.cpp
// Wrappers for C++ standard library (STL) types (std::string, etc.)
// This is also an example of how you may wrap your own similar types.
// Compatibility:
// - std::string support is only guaranteed to work from C++11.
//   If you try to use it pre-C++11, please share your findings (w/ info about compiler/architecture)
// Changelog:
// - v0.10: Initial version. Added InputText() / InputTextMultiline() calls with std::string
// Resize string callback
// If for some reason we refuse the new length (BufTextLen) and/or capacity (BufSize) we need to set them back to what we want.
// Forward to user callback, if any
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\misc\fonts\binary_to_compressed_c.cpp
// dear imgui
// (binary_to_compressed_c.cpp)
// Helper tool to turn a file into a C array, if you want to embed font data in your source code.
// The data is first compressed with stb_compress() to reduce source code size,
// then encoded in Base85 to fit in a string so we can fit roughly 4 bytes of compressed data into 5 bytes of source code (suggested by @mmalex)
// (If we used 32-bit constants it would require take 11 bytes of source code to encode 4 bytes, and be endianness dependent)
// Note that even with compression, the output array is likely to be bigger than the binary file..
// Load compressed TTF fonts with ImGui::GetIO().Fonts->AddFontFromMemoryCompressedTTF()
// Build with, e.g:
//   # cl.exe binary_to_compressed_c.cpp
//   # gcc binary_to_compressed_c.cpp
// You can also find a precompiled Windows binary in the binary/demo package available from https://github.com/ocornut/imgui
// Usage:
//   binary_to_compressed_c.exe [-base85] [-nocompress] <inputfile> <symbolname>
// Usage example:
//   # binary_to_compressed_c.exe myfont.ttf MyFont > myfont.cpp
//   # binary_to_compressed_c.exe -base85 myfont.ttf MyFont > myfont.cpp
// stb_compress* from stb.h - declaration
// Read file
// Compress
// total guess
// Output as Base85 encoded
// File: '%s' (%d bytes)\n", filename, (int)data_sz);
// Exported using binary_to_compressed_c.cpp\n");
// This is made a little more complicated by the fact that ??X sequences are interpreted as trigraphs by old C/C++ compilers. So we need to escape pairs of ??.
// Cleanup
// stb_compress* from stb.h - definition
////////////////////           compressor         ///////////////////////
// simple implementation that just takes the source data in a big block
//#define stb_out(v)    (stb__out ? *stb__out++ = (stb_uchar) (v) : stb__write((stb_uchar) (v)))
/*  numlit <= 65536) */ stb_out3(0x070000 + numlit-1);
// 256K
// note that you can play with the hashing functions all you
// want without needing to change the decompressor
// stop short of the end so we don't scan off the end doing
// the hashing; this means we won't compress the last few bytes
// unless they were part of something longer
/* avoid retrying a match we already tried */ \
// rather than search for all matches, only try 4 candidate locations,
// chosen based on 4 different hash functions of different lengths.
// this strategy is inspired by LZO; hashing is unrolled here using the
// 'hc' macro
// because we use a shared hash table, can only update it
// _after_ we've probed all of them
// see if our best match qualifies
// fast path literals
// fallback literals if no match was a balanced tradeoff
// if we didn't get all the way, add the rest to literals
// the literals are everything from lit_start to q
// failure
// stream signature
// 64-bit length requires 32-bit leading 0
// end opcode
// success
________________________________________________________________________________________
E:/AllLangDS/ds/cpp/imgui-master\imgui-master\misc\freetype\imgui_freetype.cpp
// Wrapper to use FreeType (instead of stb_truetype) for Dear ImGui
// Get latest version at https://github.com/ocornut/imgui/tree/master/misc/freetype
// Original code by @vuhdo (Aleksei Skriabin). Improvements by @mikesart. Maintained and v0.60+ by @ocornut.
// Changelog:
// - v0.50: (2017/08/16) imported from https://github.com/Vuhdo/imgui_freetype into http://www.github.com/ocornut/imgui_club, updated for latest changes in ImFontAtlas, minor tweaks.
// - v0.51: (2017/08/26) cleanup, optimizations, support for ImFontConfig::RasterizerFlags, ImFontConfig::RasterizerMultiply.
// - v0.52: (2017/09/26) fixes for imgui internal changes.
// - v0.53: (2017/10/22) minor inconsequential change to match change in master (removed an unnecessary statement).
// - v0.54: (2018/01/22) fix for addition of ImFontAtlas::TexUvscale member.
// - v0.55: (2018/02/04) moved to main imgui repository (away from http://www.github.com/ocornut/imgui_club)
// - v0.56: (2018/06/08) added support for ImFontConfig::GlyphMinAdvanceX, GlyphMaxAdvanceX.
// - v0.60: (2019/01/10) re-factored to match big update in STB builder. fixed texture height waste. fixed redundant glyphs when merging. support for glyph padding.
// - v0.61: (2019/01/15) added support for imgui allocators + added FreeType only override function SetAllocatorFunctions().
// - v0.62: (2019/02/09) added RasterizerFlags::Monochrome flag to disable font anti-aliasing (combine with ::MonoHinting for best results!)
// Gamma Correct Blending:
//  FreeType assumes blending in linear space rather than gamma space.
//  See https://www.freetype.org/freetype2/docs/reference/ft2-base_interface.html#FT_Render_Glyph
//  For correct results you need to be using sRGB and convert to linear space in the pixel shader output.
//  The default imgui styles will be impacted by this change (alpha values will need tweaking).
// FIXME: cfg.OversampleH, OversampleV are not supported (but perhaps not so necessary with this rasterizer).
// ImMin,ImMax,ImFontAtlasBuild*,
// <freetype/freetype.h>
// <freetype/ftmodapi.h>
// <freetype/ftglyph.h>
// <freetype/ftsynth.h>
// unreferenced local function has been removed (stb stuff)
// warning: unknown option after '#pragma GCC diagnostic' kind
// warning: 'xxxx' defined but not used
// Glyph metrics:
// --------------
//
//                       xmin                     xmax
//                        |                         |
//                        |<-------- width -------->|
//                        |                         |
//              |         +-------------------------+----------------- ymax
//              |         |    ggggggggg   ggggg    |     ^        ^
//              |         |   g:::::::::ggg::::g    |     |        |
//              |         |  g:::::::::::::::::g    |     |        |
//              |         | g::::::ggggg::::::gg    |     |        |
//              |         | g:::::g     g:::::g     |     |        |
//    offsetX  -|-------->| g:::::g     g:::::g     |  offsetY     |
//              |         | g:::::g     g:::::g     |     |        |
//              |         | g::::::g    g:::::g     |     |        |
//              |         | g:::::::ggggg:::::g     |     |        |
//              |         |  g::::::::::::::::g     |     |      height
//              |         |   gg::::::::::::::g     |     |        |
//  baseline ---*---------|---- gggggggg::::::g-----*--------      |
//            / |         |             g:::::g     |              |
//     origin   |         | gggggg      g:::::g     |              |
//              |         | g:::::gg   gg:::::g     |              |
//              |         |  g::::::ggg:::::::g     |              |
//              |         |   gg:::::::::::::g      |              |
//              |         |     ggg::::::ggg        |              |
//              |         |         gggggg          |              v
//              |         +-------------------------+----------------- ymin
//              |                                   |
//              |------------- advanceX ----------->|
/// A structure that describe a glyph.
// Glyph's width in pixels.
// Glyph's height in pixels.
// The distance from the origin ("pen position") to the left of the glyph.
// The distance from the origin to the top of the glyph. This is usually a value < 0.
// The distance from the origin to the origin of the next glyph. This is usually a value > 0.
// Font parameters and metrics.
// Size this font was generated with.
// The pixel extents above the baseline in pixels (typically positive).
// The extents below the baseline in pixels (typically negative).
// The baseline-to-baseline distance. Note that it usually is larger than the sum of the ascender and descender taken as absolute values. There is also no guarantee that no glyphs extend above or below subsequent baselines when using this distance. Think of it as a value the designer of the font finds appropriate.
// The spacing in pixels between one row's descent and the next row's ascent.
// This field gives the maximum horizontal cursor advance for all glyphs in the font.
// FreeType glyph rasterizer.
// NB: No ctor/dtor, explicitly call Init()/Shutdown()
// Initialize from an external data buffer. Doesn't copy data, and you must ensure it stays valid up to this object lifetime.
// Change font pixel size. All following calls to RasterizeGlyph() will use this size
// [Internals]
// Font descriptor of the current font.
// = ImFontConfig::RasterizerFlags
// From SDL_ttf: Handy routines for converting from fixed point
// Convert to FreeType flags (NB: Bold and Oblique are processed separately)
// Vuhdo: I'm not sure how to deal with font sizes properly. As far as I understand, currently ImGui assumes that the 'pixel_height'
// is a maximum height of an any given glyph, i.e. it's the sum of font's ascender and descender. Seems strange to me.
// NB: FT_Set_Pixel_Sizes() doesn't seem to get us the same result.
// Update font info
// Need an outline for this to work
// Apply convenience transform (this is not picking from real "Bold"/"Italic" fonts! Merely applying FreeType helper transform. Oblique == Slanting)
//FT_BBox bbox;
//FT_Outline_Get_BBox(&slot->outline, &bbox);
//slot->metrics.width = bbox.xMax - bbox.xMin;
//slot->metrics.height = bbox.yMax - bbox.yMin;
// Grayscale image, 1 byte per pixel.
// Monochrome image, 1 bit per pixel. The bits in each byte are ordered from MSB to LSB.
// in case the user already have an implementation in the _same_ compilation unit (e.g. unity builds)
// Point within one of the dst_tmp_bitmap_buffers[] array
// Rectangle to pack. We first fill in their size and the packer will give us their position.
// Ranges as requested by user (user is allowed to request too much, e.g. 0x0020..0xFFFF)
// Index into atlas->Fonts[] and dst_tmp_array[]
// Highest requested codepoint
// Glyph count (excluding missing glyphs and glyphs already set by an earlier source font)
// Glyph bit map (random access, 1-bit per codepoint. This will be a maximum of 8KB)
// Temporary data for one destination ImFont* (multiple source fonts can be merged into one destination ImFont)
// Number of source fonts targeting this destination font.
// This is used to resolve collision when multiple sources are merged into a same destination font.
// Clear atlas
// Temporary storage for building
// 1. Initialize font loading structure, check font data validity
// Find index from cfg.DstFont (we allow the user to set cfg.DstFont. Also it makes casual debugging nicer than when storing indices)
// cfg.DstFont not pointing within atlas->Fonts[] array?
// Load font
// Measure highest codepoints
// 2. For every requested codepoint, check for their presence in the font data, and handle redundancy or overlaps between source fonts to avoid unused glyphs.
// Don't overwrite existing glyphs. We could make this an option (e.g. MergeOverwrite)
// It is actually in the font? (FIXME-OPT: We are not storing the glyph_index..)
// Add to avail set/counters
// 3. Unpack our bit map into a flat list (we now have all the Unicode points that we know are requested _and_ available _and_ not overlapping another)
//src_glyph.GlyphIndex = 0; // FIXME-OPT: We had this info in the previous step and lost it..
// Allocate packing character data and flag packed characters buffer as non-packed (x0=y0=x1=y1=0)
// (We technically don't need to zero-clear buf_rects, but let's do it for the sake of sanity)
// Allocate temporary rasterization data buffers.
// We could not find a way to retrieve accurate glyph size without rendering them.
// (e.g. slot->metrics->width not always matching bitmap->width, especially considering the Oblique transform)
// We allocate in chunks of 256 KB to not waste too much extra memory ahead. Hopefully users of FreeType won't find the temporary allocations.
// 4. Gather glyphs sizes so we can pack them in our virtual canvas.
// 8. Render/rasterize font characters into the texture
// Compute multiply table if requested
// Gather the sizes of all rectangles we will need to pack
// Render glyph into a bitmap (currently held by FreeType)
// Allocate new temporary chunk if needed
// Blit rasterized pixels to our temporary buffer and keep a pointer to it.
// We need a width for the skyline algorithm, any width!
// The exact width doesn't really matter much, but some API/GPU have texture size limitations and increasing width can decrease height.
// User can override TexDesiredWidth and TexGlyphPadding if they wish, otherwise we use a simple heuristic to select the width based on expected surface.
// 5. Start packing
// Pack our extra data rectangles first, so it will be on the upper-left corner of our texture (UV will have small values).
// 6. Pack each source font. No rendering yet, we are working with rectangles in an infinitely tall texture at this point.
// Extend texture height and mark missing glyphs as non-packed so we won't render them.
// FIXME: We are not handling packing failure here (would happen if we got off TEX_HEIGHT_MAX or if a single if larger than TexWidth?)
// 7. Allocate texture
// 8. Copy rasterized font characters back into the main texture
// 9. Setup ImFont and glyphs for runtime
// We can have multiple input fonts writing into a same destination font (when using MergeMode=true)
// Blit from temporary buffer to final texture
// Register glyph
// Cleanup
// Default memory allocators
// Current memory allocators
// FreeType memory allocation callbacks
/*memory*/, long size)
/*memory*/, void* block)
/*memory*/, long cur_size, long new_size, void* block)
// Implement realloc() as we don't ask user to provide it.
// FreeType memory management: https://www.freetype.org/freetype2/docs/design/design-4.html
// https://www.freetype.org/freetype2/docs/reference/ft2-module_management.html#FT_New_Library
// If you don't call FT_Add_Default_Modules() the rest of code may work, but FreeType won't use our custom allocator.
