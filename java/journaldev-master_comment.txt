/* this */) {
// copy string one into the result.
// append string two to the result.
/**
// Inflate the menu; this adds items to the action bar if it is present.
/**
/**
// End of your timer code.
/**
/**
// Inflate the menu; this adds items to the action bar if it is present.
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
// Creating Anchor.
///Compute the straight-line distance.
/*float[] distance_vector = currentAnchor.getPose().inverse()
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
// Inflate the menu; this adds items to the action bar if it is present.
// Handle action bar item clicks here. The action bar will
// automatically handle clicks on the Home/Up button, so long
// as you specify a parent activity in AndroidManifest.xml.
//noinspection SimplifiableIfStatement
// $FF: synthetic method
// $FF: bridge method
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//start camera if permission has been granted by user
//size of the screen
//.setLensFacing(CameraX.LensFacing.FRONT)
//bind to lifecycle:
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//bind to lifecycle:
//size of the screen
/*File file = new File(
// Setup image analysis pipeline that computes average pixel luminance
//Analyzing live camera feed begins.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//www.journaldev.com";
//www.journaldev.com/author/anupam"));
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/*");
// get the file url
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
// The enrolling flow for fingerprint. This is where you ask the user to set up fingerprint
// for your flow. Use of keys is necessary if you need to know if the set of
// enrolled fingerprints has changed.
// Set the alias of the entry in Android KeyStore where the key will appear
// and the constrains (purposes) in the constructor of the Builder
// Require the user to authenticate with a fingerprint to authorize every use
// of the key
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//Delay in ms
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
// Add a marker in Sydney and move the camera
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//needed for Android Oreo.
// Sign the user in with information from the Credential.
// See "Handle successful credential requests"
// Try to resolve the save request. This will prompt the user if
// the credential is new.
// Could not resolve the request
// Request has no resolution
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
//developer.android.com/design/patterns/settings.html">
//developer.android.com/guide/topics/ui/settings.html">Settings
/**
// For list preferences, look up the correct display value in
// the preference's 'entries' list.
// Set the summary to reflect the new value.
// For ringtone preferences, look up the correct display value
// using RingtoneManager.
// Empty values correspond to 'silent' (no ringtone).
// Clear the summary if there was a lookup error.
// Set the summary to reflect the new ringtone display
// name.
// For all other preferences, set the summary to the value's
// simple string representation.
/**
/**
// Set the listener to watch for value changes.
// Trigger the listener immediately with the preference's
// current value.
/**
// Show the Up button in the action bar.
/**
/**
/**
/**
// Bind the summaries of EditText/List/Dialog/Ringtone preferences
// to their values. When their values change, their summaries are
// updated to reflect the new value, per the Android Design
// guidelines.
/**
// Bind the summaries of EditText/List/Dialog/Ringtone preferences
// to their values. When their values change, their summaries are
// updated to reflect the new value, per the Android Design
// guidelines.
/**
// Bind the summaries of EditText/List/Dialog/Ringtone preferences
// to their values. When their values change, their summaries are
// updated to reflect the new value, per the Android Design
// guidelines.
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
/**
/**
/**
// UI references.
// Set up the login form.
//journaldev.com/settings"));
/**
/**
// Reset errors.
// Store values at the time of the login attempt.
// Check for a valid password, if the user entered one.
// Check for a valid email address.
// There was an error; don't attempt login and focus the first
// form field with an error.
// Show a progress spinner, and kick off a background task to
// perform the user login attempt.
//TODO: Replace this with your own logic
//TODO: Replace this with your own logic
/**
// On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
// for very easy animations. If available, use these APIs to fade-in
// the progress spinner.
// The ViewPropertyAnimator APIs are not available, so simply show
// and hide the relevant UI components.
// Retrieve data rows for the device user's 'profile' contact.
// Select only email addresses.
// Show primary email addresses first. Note that there won't be
// a primary email address if the user hasn't specified one.
//Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.
/**
// TODO: attempt authentication against a network service.
// Simulate network access.
// Account exists, return true if the password matches.
// TODO: register the new account here.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//www.android.com/static/2016/img/share/andy-lg.png");
//imagesAdapter.setItems(bitmapArrayList);
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
// Used to load the 'native-lib' library on application startup.
// Example of a call to a native method
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
// VM AND VIEW
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//View.VISIBLE
//8 == View.GONE
//View.VISIBLE
//8 == View.GONE
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//www.journaldev.com")))
//shortcutManager.disableShortcuts(Arrays.asList(shortcut1.getId()));
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"));
//commondatastorage.googleapis.com/gtv-videos-bucket/sample/WeAreGoingOnBullrun.mp4"));
//commondatastorage.googleapis.com/gtv-videos-bucket/sample/VolkswagenGTIReview.mp4"));
//commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4"));
//commondatastorage.googleapis.com/gtv-videos-bucket/sample/SubaruOutbackOnStreetAndDirt.mp4"));
//commondatastorage.googleapis.com/gtv-videos-bucket/sample/WhatCarCanYouGetForAGrand.mp4"));
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//com.journaldev.androidpnotifications/drawable/"+R.drawable.sample_bg);
/*",uri);
//com.journaldev.androidpnotifications/drawable/"+R.drawable.sample_bg);
/*",uri);
//com.journaldev.androidpnotifications/drawable/"+R.drawable.sample_bg);
/*",uri);
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/* flags */);
// Create bubble metadata
// Create bubble metadata
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//foreground permission allowed
//foreground and background
//handleForeground Location Updates
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//should not happen
//return super.getChangePayload(oldItemPosition, newItemPosition);
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//bottom of list!
/**
//ProgressBar would be displayed
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//api.chucknorris.io/jokes/";
//Add your error here.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//github.com/");
//Copy you logic to calculate progress and call
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//api.chucknorris.io/jokes/";
//10 MB
/*return originalResponse.newBuilder()
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//unsplash.com/")
//int totalFileSize = (int) (fileSize / (Math.pow(1024, 2)));
//Log.d("API123", download.getProgress() + " current progress");
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//reset spinners
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//www.rediff.com/rss/moviesreviewsrss.xml");
//www.cinemablend.com/rss_review.php");
// rss link url
// list of rss items
// looping through each item
// creating new HashMap
// adding each child node to HashMap key => value
// If you want parse the date
// adding HashList to ArrayList
// updating UI from Background Thread
// updating listview
// RSS XML document CHANNEL tag
// constructor
// adding item to list
// Check log for errors
// return item list
// return XML
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//Clearing the listeners below
/*CompositeDisposable compositeDisposable = new CompositeDisposable();
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
// Inflate the menu; this adds items to the action bar if it is present.
// Handle action bar item clicks here. The action bar will
// automatically handle clicks on the Home/Up button, so long
// as you specify a parent activity in AndroidManifest.xml.
//noinspection SimplifiableIfStatement
// capture the difference between view's top left corner and touch point
// cancel animations
//  a different approach would be to change the view's LayoutParams.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//change the ip to yours.
//172.20.10.3:3000").client(client).build().create(ApiService.class);
/*");
// get the file url
// i want to upload only images
/*");
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//www.journaldev.com", (new Date()).getTime());
//www.medium.com", (new Date()).getTime());
//www.reddit.com", (new Date()).getTime());
//www.github.com", (new Date()).getTime());
//www.hackerrank.com", (new Date()).getTime());
//www.developers.android.com", (new Date()).getTime());
// VM AND VIEW
// VM
// VIEW
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
// stores and recycles views as they are scrolled off screen
/**
//d.android.com/tools/testing">Testing documentation</a>
// Enables Always-on
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//www.journaldev.com/")
//holder.txtWord.setText(modelList.get(position));
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/*
// fade in
// fade out
// cross fade
// start fade in animation
// start fade out animation
// blink
// Zoom In
// Zoom Out
// Rotate
// Move
// Slide Up
// Slide Down
// Slide Down
// Sequential
// Together
/**
// Calls onProgressUpdate()
// execution of result of Long time consuming operation
// Things to be done while execution of long running operation is in
// progress. For example updating ProgessDialog
/**
//Creating the instance of ArrayAdapter containing list of fruit names
//Getting the instance of AutoCompleteTextView
//will start working from first character
//setting the adapter data into the AutoCompleteTextView
/**
// React to state change
// React to dragging events
/**
/**
/**
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
// Inflate the menu; this adds items to the action bar if it is present.
// Handle action bar item clicks here. The action bar will
// automatically handle clicks on the Home/Up button, so long
// as you specify a parent activity in AndroidManifest.xml.
//noinspection SimplifiableIfStatement
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//TextView ambleBold, ambleLight, ambleRegular, openSansItalic, openSansRegular;
/*private String A_BOLD= "Amble-Bold.ttf";
/*ambleBold=(TextView)findViewById(R.id.ambleBold);
/*ambleBold.setTypeface(Typeface.createFromAsset(getAssets(), A_BOLD));
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
// View lookup cache
// Get the data item for this position
// Check if an existing view is being reused, otherwise inflate the view
// view lookup cache stored in tag
// Return the completed view to render on screen
/**
// Inflate the menu; this adds items to the action bar if it is present.
// Handle action bar item clicks here. The action bar will
// automatically handle clicks on the Home/Up button, so long
// as you specify a parent activity in AndroidManifest.xml.
//noinspection SimplifiableIfStatement
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//swapi.co/api/")
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
/**
// Get Current Date
// Get Current Time
// Launch Time Picker Dialog
/**
// set all children draggable except the first (the header)
// the child is its own drag handle
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
// ignore case and accents
// the same thing should have been done for the search text
// not found, nothing to to
// highlight each appearance in the original text
// while searching in normalized text
/**
// Your piece of code on keyboard search click
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//Specify the view position
//Initially view will be added to top-left corner
//To get the accurate middle of the screen we subtract the width of the floating widget.
//remember the initial position.
//get the touch location
//Only start the activity if the application is in background. Pass the current badge_count to the activity
//close the service and remove the fab view
//Logic to auto-position the widget based on where it is positioned currently w.r.t middle of the screen.
//Calculate the X and Y coordinates of the view.
//Update the layout with new X & Y coordinates
//If the draw over permission is not available open the settings screen
//to grant the permission.
// To prevent starting the service if the required permission is NOT granted.
//Permission is not available. Display error text.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/* 15 secs */
/* 5 secs */
//get the permissions we have asked for before but are not granted..
//we will store this in a global list to access later.
// TODO: Consider calling
//    ActivityCompat#requestPermissions
// here to request the missing permissions, and then overriding
//   public void onRequestPermissionsResult(int requestCode, String[] permissions,
//                                          int[] grantResults)
// to handle the case where the user grants the permission. See the documentation
// for ActivityCompat#requestPermissions for more details.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
// Override this method according to your need
// TODO Auto-generated method stub
// show the selected Image
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/* 15 secs */
/* 5 secs */
// Obtain the SupportMapFragment and get notified when the map is ready to be used.
//get the permissions we have asked for before but are not granted..
//we will store this in a global list to access later.
/**
// Add a marker in Sydney and move the camera
/*LatLng sydney = new LatLng(-34, 151);
// TODO: Consider calling
//    ActivityCompat#requestPermissions
// here to request the missing permissions, and then overriding
//   public void onRequestPermissionsResult(int requestCode, String[] permissions,
//                                          int[] grantResults)
// to handle the case where the user grants the permission. See the documentation
// for ActivityCompat#requestPermissions for more details.
/**
// TODO: Consider calling
//    ActivityCompat#requestPermissions
// here to request the missing permissions, and then overriding
//   public void onRequestPermissionsResult(int requestCode, String[] permissions,
//                                          int[] grantResults)
// to handle the case where the user grants the permission. See the documentation
// for ActivityCompat#requestPermissions for more details.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
// get GPS status
// get network provider status
// if GPS Enabled get lat/long using GPS Services
// TODO: Consider calling
//    ActivityCompat#requestPermissions
// here to request the missing permissions, and then overriding
//   public void onRequestPermissionsResult(int requestCode, String[] permissions,
//                                          int[] grantResults)
// to handle the case where the user grants the permission. See the documentation
// for ActivityCompat#requestPermissions for more details.
/*if (checkNetwork) {
// TODO: Consider calling
//    ActivityCompat#requestPermissions
// here to request the missing permissions, and then overriding
//   public void onRequestPermissionsResult(int requestCode, String[] permissions,
//                                          int[] grantResults)
// to handle the case where the user grants the permission. See the documentation
// for ActivityCompat#requestPermissions for more details.
// TODO: Consider calling
//    ActivityCompat#requestPermissions
// here to request the missing permissions, and then overriding
//   public void onRequestPermissionsResult(int requestCode, String[] permissions,
//                                          int[] grantResults)
// to handle the case where the user grants the permission. See the documentation
// for ActivityCompat#requestPermissions for more details.
//get the permissions we have asked for before but are not granted..
//we will store this in a global list to access later.
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
// Get intent data
// Selected image id
// Send intent to SingleViewActivity
// Pass image index
/**
// Constructor
// create a new ImageView for each item referenced by the Adapter
// Keep all Images in array
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//get the permissions we have asked for before but are not granted..
//we will store this in a global list to access later.
// Inflate the menu; this adds items to the action bar if it is present.
// Handle action bar item clicks here. The action bar will
// automatically handle clicks on the Home/Up button, so long
// as you specify a parent activity in AndroidManifest.xml.
//noinspection SimplifiableIfStatement
/**
// Determine Uri of camera image to save.
// collect all camera intents
// collect all gallery intents
/*");
// the main intent is the last in the list (fucking android) so pickup the useless one
// Create a chooser from the main intent
// Add all other intents
/**
/**
// save file url in bundle as it will be null on scren orientation
// changes
// get the file url
//Log.d("API123", "permisionrejected " + permissionsRejected.size());
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
// setting image resource from drawable
// Resize the bitmap to 150x100 (width x height)
// Loads the resized Bitmap into an ImageView
/**
/**
// write text to file
// add-write text into file
//display file saved message
// Read text from file
//reading text from file
// char to string conversion
//Toast.makeText(getBaseContext(), s,Toast.LENGTH_SHORT).show();
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
// View lookup cache
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
// constructor
// function get json from url
// by making HTTP POST or GET mehtod
// Making HTTP request
// check for request method
// request method is POST
// defaultHttpClient
// request method is GET
// try parse the string to a JSON object
// return JSON String
//10.0.2.2/test_android/index.php";
// dismiss the dialog once product deleted
//Toast.makeText(getApplicationContext(),result,Toast.LENGTH_LONG).show();
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
/** Receives a JSONObject and returns a list of lists containing latitude and longitude */
/** Traversing all routes */
/** Traversing all legs */
/** Traversing all steps */
/** Traversing all points */
/**
//jeffreysambells.com/2010/05/27/decoding-polylines-from-google-maps-direction-api-with-java
// Obtain the SupportMapFragment and get notified when the map is ready to be used.
/**
//mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in Sydney"));
// Adding new item to the ArrayList
// Creating MarkerOptions
// Setting the position of the marker
// Add new marker to the Google Map Android API V2
// Checks, whether start and end locations are captured
// Getting URL to the Google Directions API
// Start downloading json data from Google Directions API
/**
// Parsing the data in non-ui thread
// Drawing polyline in the Google Map for the i-th route
// Origin of route
// Destination of route
// Sensor enabled
// Building the parameters to the web service
// Output format
// Building the url to the web service
//maps.googleapis.com/maps/api/directions/" + output + "?" + parameters;
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
// Inflate the menu; this adds items to the action bar if it is present.
// Handle action bar item clicks here. The action bar will
// automatically handle clicks on the Home/Up button, so long
// as you specify a parent activity in AndroidManifest.xml.
//noinspection SimplifiableIfStatement
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
// startActivity(new Intent(activityContext, DetailActivity.class).putExtra("name", name));
//api.coinmarketcap.com/v1/")
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
/**
// Constructor.
/**
/**
//This is necessary to change the icon of the Drawer Toggle upon state change.
/**
/**
// open right drawer
// Handle navigation view item clicks here.
// Handle the camera action
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//maps.googleapis.com/maps/api/";
/**
// origins/destinations:  LatLng as string
/**
//Call<PlacesPOJO.Root> call = apiService.doPlaces(placeType, latLngString,"\""+ businessName +"\"", true, "distance", APIClient.GOOGLE_PLACE_API_KEY);
// Log error here since request failed
/**
/**
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
/**
/**
//www.journaldev.com/"));
// Will display the notification in the notification bar
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//reqres.in/api/users/2";
//reqres.in/api/users/";
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//cdn.journaldev.com/wp-content/uploads/2017/01/android-constraint-layout-sdk-tool-install.png").placeholder(R.drawable.placeholder).into(imageView);
//cdn.journaldev.com/wp-content/uploads/2017/01/android-constraint-layout-sdk-tool-install.png").placeholder(R.drawable.placeholder).error(R.drawable.error).into(target);
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
// Start long running operation in a background thread
// Update the progress bar and display the
//current value in the text view
// Sleep for 200 milliseconds.
/**
/**
/* Clears all selected radio buttons to default */
/**
/**
//check if any items to add
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
// delete all the selected rows
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
/**
/**
/**
/*GridLayoutManager manager = new GridLayoutManager(this, 2, GridLayoutManager.VERTICAL, false);
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
/**
//reqres.in")
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//api.cryptonator.com/api/full/";
//Single call
/*Observable<Crypto> cryptoObservable = cryptocurrencyService.getCoinData("btc");
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
/**
/**
// Initialize the textview with '0'
// Display the value in textview
/**
/**
// TODO Auto-generated method stub
// TODO Auto-generated method stub
// TODO Auto-generated method stub
// TODO Auto-generated method stub
/**
// Get the transition name from the string
// Starting view
// The String
/**
/**
// Inflate the menu; this adds items to the action bar if it is present.
/**
// Inflate the menu; this adds items to the action bar if it is present.
// Handle action bar item clicks here. The action bar will
// automatically handle clicks on the Home/Up button, so long
// as you specify a parent activity in AndroidManifest.xml.
//noinspection SimplifiableIfStatement
/**
/**
// Spinner element
// Spinner click listener
// Spinner Drop down elements
// Creating adapter for spinner
// Drop down layout style - list view with radio button
// attaching data adapter to spinner
// On selecting a spinner item
// Showing selected spinner item
// TODO Auto-generated method stub
/**
/**
/**
// OnCLickListiner For List Items
/**
// Table Name
// Table columns
// Database Information
// database version
// Creating table query
/**
/**
/**
//maps.googleapis.com/maps/api/staticmap?size=230x200&path=";
// Inflate the menu; this adds items to the action bar if it is present.
// Handle action bar item clicks here. The action bar will
// automatically handle clicks on the Home/Up button, so long
// as you specify a parent activity in AndroidManifest.xml.
//noinspection SimplifiableIfStatement
/**
/**
/**
/**
// Inflate the menu; this adds items to the action bar if it is present.
// Handle action bar item clicks here. The action bar will
// automatically handle clicks on the Home/Up button, so long
// as you specify a parent activity in AndroidManifest.xml.
//noinspection SimplifiableIfStatement
/**
/**
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
// verify if the soft keyboard is open
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
//d.android.com/tools/testing">Testing documentation</a>
// Context of the app under test.
//commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4", "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4"));
/**
//d.android.com/tools/testing">Testing documentation</a>
/**
/**
/**
/**
/**
/**
//www.journaldev.com");
//webView.loadData("<html><body>Hello, world!</body></html>", "text/html", "UTF-8");
/**
/**
// TODO Auto-generated catch block
/**
/**
// check if user has a session
// not authenticated
// use state parameter to validate response from
// Authorization server
// use nonce parameter to validate idToken
// if authenticated, how to check for valid session?
//graph.windows.net", new ClientCredential(clientId, clientSecret),
/* Resolution for PKIX error */
// Install the all-trusting trust manager
/**
// checks if MethodInfo annotation is present for the method
// iterates all the annotations available in the method
//Change argument from String to Object
//@Override
//adding an element to array
//adding two arrays
/**
/**
//print the char[] elements
//let's convert char[] to String now
//let's see if str and str1 are equals or not
/**
/**
//return the list representation of array
//any change in array elements will change the arrayList elements also
//change the array element and see the effect is propogated to list also.
//below code will throw java.lang.UnsupportedOperationException because
// Arrays.asList() returns a fixed-size list backed by the specified array.
//strList.add("5");
//change both the array and arraylist and check if they are independent?
//default toString() method
//using Arrays.toString() for printing object array contents
//converting Object Array to String
//custom class
//array to String implementation
/**
/**
/**
//length check is necessary to avoid java.lang.ArrayIndexOutOfBoundsException
//but for simplicity I am not doing that
/**
/**
/**
/**
//initialize primitive one dimensional array
//initialize Object one dimensional array
//initialize multidimensional array
//multidimensional array initialization with only leftmost dimension
//array initialization using shortcut syntax
//length of array is number of rows or the left most dimension of array
/**
/**
//an array of int arrays of 2 row and 3 columns
//an array of String arrays of 3 rows and 4 columns
//creating and initializing two dimensional int array with shortcut syntax
//showing multidimensional arrays initializing
//yes it's valid
/**
/**
//List of String arrays
//printing list of String arrays in the ArrayList
/**
//list of Object arrays to hold different types of array
//list holds different types of Object arrays, let's print them
//iterating over the array and doing operation based on it's type
//using instanceof keyword to find the Object type in the array
//doSomethingForStringObject();
//doSomethingForAObject();
/**
// 1. List, Set, Map copyOf(Collection) method
// prints [Jack Nicholson, Marlon Brando]
// New API added - Creates an UnModifiable List from a List.
// prints [Jack Nicholson, Marlon Brando]
// copyOfActors.add("Robert De Niro"); Will generate
// UnsupportedOperationException
// prints [Jack Nicholson, Marlon Brando, Robert De Niro]
// prints [Jack Nicholson, Marlon Brando]
// 2. Collectors class toUnmodifiableList, toUnmodifiableSet, and
// toUnmodifiableMap methods
/*
//natural ordering example of priority queue
//PriorityQueue example with Comparator
//Comparator anonymous class implementation
//utility method to add random data to Queue
//utility method to poll data from queue
//Get current date using Date
//Get current date using Calendar
//Get current time in milliseconds
/**
// null check
// create SimpleDateFormat object with input format
// default system timezone if passed null or empty
// set timezone to SimpleDateFormat
// return Date in required format with timezone as String
//Test formatDateToString method
/**
//initialize SimpleDateFormat object
//Convert String to Date
//using locale
//Convert Date to String
//test addDays method
//test subtractDays method
/**
/**
//coding in terms of abstract classes
//using method implemented in abstract class - inheritance
//abstract class
//abstract method
//only public, static and final modifiers
//implicitly final
//interface methods are implicitly abstract and public
// TODO Auto-generated method stub
//programming for interfaces not implementation
//switching from one implementation to another easily
//Using inheritance for adapter pattern
//Using Composition for adapter pattern
//Composition - implementor
//constructor with implementor as input argument
//required parameters
//optional parameters
//	public Computer(String hdd, String ram){
//		this.HDD=hdd;
//		this.RAM=ram;
//	}
//	
//	public Computer(String hdd, String ram,boolean isGC, boolean isBT){
//		this.HDD=hdd;
//		this.RAM=ram;
//		this.isGraphicsCardEnabled=isGC;
//		this.isBluetoothEnabled=isBT;
//	}
//Builder Class
// required parameters
// optional parameters
//required fields
//optional fields
//return cloned object to avoid changing it by the client application
//required fields
//optional fields
// initialize the chain
// set the chain of responsibility
// process the request
//Creating the receiver object
//creating command and associating with receiver
//Creating invoker and associating with Command
//perform action on invoker object
//open command is forwarding request to openFile method
//collection of Shapes
//adding shape to drawing
//removing shape from drawing
//removing all the shapes
//get MySql DB connection using connection parameters
//get data from table and generate pdf report
//get data from table and generate pdf report
//get MySql DB connection using connection parameters
//get data from table and generate pdf report
//get data from table and generate pdf report
//adding time delay
//intrinsic property
//adding time delay
//create rules for expressions
// Channel Type Iterator
//message should not be received by the user sending it
// lets save the file
//now write something else
//checking file contents
//lets undo to last save
//checking file content again
//notice the deep copy so that Memento and FileWriterUtil content variables don't refer to same object
//synchronization is used to make sure any observer registered after message is received is not notified
//method to post message to the topic
//method to update the observer, used by subject
//attach with subject to observe
//create subject
//create observers
//register observers to the subject
//attach observer to subject
//check if any update is available
//now send message to subject
//methods to register and unregister observers
//method to notify observers of change
//method to get updates from subject
//read all employees from database and put into the list
//List of items
//pay by paypal
//pay by credit card
//template method, final so subclasses can't override
//default implementation
//methods to be implemented by subclasses
//using template method
//generating MySql HTML report and Oracle PDF report without using Facade
//generating MySql HTML report and Oracle PDF report using Facade
// Getting immutable class only with required parameters
// Getting immutable class with optional parameters
//Testing immutability
//lets modify the Object passed as argument or get from the Object
//check that immutable class properties are not changed
//Use the clone method to get the Employee object
//apply 5$ discount if book price is greater than 50
//benefitsOfEnumOverConstants();
/**
//Enum values are fixed
//we can pass any int constant
/**
//Enum constructors should always be private.
//Enum can have methods
//Enum can override functions
/**
/**
//below true flag tells OutputStream to append
/**
//to append to file, you need to initialize FileWriter using below constructor
//you can use write or append method
/**
//Below constructor argument decides whether to append or override
/**
//absolute file name with path
//file name only
//relative path
/**
//absolute file name with path
//file name only
//relative path
//delete empty directory
//try to delete directory with files
/**
//delete folder recursively
//to end the recursive loop
//if directory, go inside and call recursively
//call recursively
//call delete to delete files and empty directory
//www.journaldev.com/sitemap.xml";
//FileNameFilter implementation
/**
//set application user permissions to 455
//change permission to 777 for all the users
//no option for group and others
//using PosixFilePermission to set file permissions 777
//add owners permission
//add group permissions
//add others permissions
//no platform independence, good for Unix systems
//platform independent and safe to use across Unix and Windows
/**
// do nothing as file is already downloaded from FTP server
/**
//file name without extension
//file name with dot
//hidden files without extension
//close resources
//close resources
//read from is to buffer
//flush OutputStream to write any buffered data to file
//		System.out.println(readFileToStringUsingBufferedReader("/Users/pankaj/file.txt"));
//		System.out.println(readFileToStringUsingStringWriter("/Users/pankaj/file.txt"));
//		System.out.println(readFileToStringUsingScanner("/Users/pankaj/file.txt"));
//		Date start = new Date();
//		readFileToStringUsingBufferedReader("/Users/pankaj/BigFile.txt");
//		Date end = new Date();
//		System.out.println("Total time taken using BufferedReader = "+(end.getTime()-start.getTime()));
//		Date start = new Date();
//		readFileToStringUsingScanner("/Users/pankaj/BigFile.txt");
//		Date end = new Date();
//		System.out.println("Total time taken using Scanner = "+(end.getTime()-start.getTime()));
/**
//add new line character
/**
/**
//copy file conventional way
//copy files using java.nio
//copy files using apache commons io
//using Java 7 Files class
//        //using Runtime.exec
//        source = new File("/Users/pankaj/tmp/sourceRuntime.avi");
//        dest = new File("/Users/pankaj/tmp/destRuntime.avi");
//        start = System.nanoTime();
//        copyFileUsingJavaRuntime(source, dest);
//        System.out.println("Time taken by Java Runtime.exec Copy = "+(System.nanoTime()-start));
//we need to wait till process get's finished using waitFor()
//relative path
//complex relative paths
//URI paths
///Users/pankaj/test.txt"));
//check file permissions for application user
//change file permissions for application user only
//change file permissions for other users also
/**
//read file line by line
//read CSV Files and parse it to object array
/**
//parse line to get Emp Object
//read from system input
//text file, should be opening in default text editor
//first check if Desktop is supported by Platform or not
//let's try to open PDF file
//using Java 7 Files class to process small files, get complete file data
//using Scanner class for large files, to read line by line
//read using BufferedReader, to read line by line
//read using FileReader, no encoding support, not efficient
//process the line
//process the line
//process the line
//process the line
//close resources
//read line by line
//process each line
//read file to byte array
//read file to String list
//write object to file
//closing resources
/**
//create FileReader object from File object
//create BufferedReader object from FileReader to read file line by line
//read first line to start
//read next line
/**
//delete the last ls
//we can use Delimiter regex as "\\A", "\\Z" or "\\z"
/**
//absolute path rename file
//relative path rename file
//move file from one directory to another
//when source file is not present
// when destination already have a file with same name
//write,read data to tmp file like any normal file
//delete when application terminates
// create output directory if it doesn't exist
//buffer for read and write data to file
//create directories for sub directories in zip
//close this ZipEntry
//close last ZipEntry
/**
/**
/**
/**
/**
//close resources
/**
//now zip files one by one
//create ZipOutputStream to write to the zip file
//for ZipEntry we need to keep only relative file path, so we used substring on absolute path
//read the file and write to ZipOutputStream
/**
/**
//create ZipOutputStream to write to the zip file
//add a new Zip Entry to the ZipOutputStream
//read the file and write to ZipOutputStream
//Close the zip entry to write to zip file
//Close resources
// works because String is-a Object, inheritance in java
//myClass2=myClass1; // compilation error since MyClass<String> is not a MyClass<Object>
// MyClass<T> parent is Object
//Generics in method
//above statement can be written simply as
//This feature, known as type inference, allows you to invoke a generic method as an ordinary method, without specifying a type between angle brackets.
//Compiler will infer the type that is needed
//valid
//raw type
//valid
//valid and autoboxing support
//valid
//Before Java 5 - Start
//OK
//type casting leading to ClassCastException at runtime
//Before Java 5 - End
//Using Generics in Collection classes
// java 7 ? List<String> list1 = new ArrayList<>(); 
//list1.add(new Integer(5)); //compiler error
//no type casting needed, avoids ClassCastException
//int xx;
//public Animal(){}
//ClassA own method
//ClassB specific method
//how inheritance can be dangerous in this situation 
//where test() method is defined in superclass at later point of time
//	public int test(){
//		return 0;
//	}
//this.classC = new ClassC();
// do nothing as file is already saved to server
//FTP server path is relative. So if FTP account HOME directory is "/home/pankaj/public_html/" and you need to upload 
// files to "/home/pankaj/public_html/wp-content/uploads/image2/", you should pass directory parameter as "/wp-content/uploads/image2/"
//same method is declared in InterfaceA and InterfaceB both
//all the method calls below are going to same concrete implementation
//adding custom handler
//FileHandler file name with max size and number of log files limit
//setting custom filter for FileHandler
//logging messages
//add own logic to publish
//passed the int, will get converted to Integer object at Runtime
//autoboxing to add primitive type in collection classes
//unboxing, at runtime Integer.intValue() is called implicitly to return int
//unboxing, Integer is passed where int was expected
// Java 10 Onwards
/** Version class introduced in Java 9
// For Java 8 or lower, use System Property
//System.out.println(System.getProperty("java.version"));
//System.out.println(System.getProperty("java.specification.version"));
// This will work only on Java 10 or higher versions
//find O in the array using for loop
//break the loop as we found what we are looking for
//use of break in while loop
//break the while loop as we found what we are looking for
//use of break in do-while loop
//break the while loop as we found what we are looking for
//find index of first int greater than 10
//using break label to terminate outer statements
//process the array
/**
//to maintain the aspect ratio with fixed width of 100 pixels
//double aspectRatio = (double) img.getWidth(null)/(double) img.getHeight(null);
//tempJPG = resizeImage(img, 100, (int) (100/aspectRatio));
//newFileJPG = new File("/Users/pankaj/Desktop/images/rotate/"+listOfFiles[i].getName()+"_New.jpg");
//ImageIO.write(tempJPG, "jpg", newFileJPG);
//at.translate(width/2, width/2);
//at.translate(-height/2, -width/2);
// return bufferedImage;
/**
/**
/**
//print localhost ip address
//print website ip address
//print all ip addresses for a website
/**
/**
//loading xml file now, first clear existing properties
//Now free all the resources
/**
//loading xml file now, first clear existing properties
//Now free all the resources
/**
//primitives are simple to use
//polymorphism achieved by Wrapper classes, we can't pass primitive here
//wrapper classes can be used in Collections
//autoboxing takes care of primitive to wrapper class conversion
//wrapper classes can be null
//static nested classes example
//inner class example
//calling method using local inner class
//calling method using anonymous inner class
//OuterClass constructor
//static nested class, can access OuterClass static variables/methods
//inner class, non static and can access all the variables/methods of outer class
//local inner class
//local inner class inside the method
//anonymous inner class
//anonymous inner class implementing FilenameFilter interface
//Using java 7 binary representation for easy understanding
//create new Random number generator
//set long seed value using setter method
//generate random number integer
//Generate Random number between 1 and 10
//Generate random double
//Generate random float
//Generate random long
//Generate random boolean
//Generate random number byte array
//SecureRandom example
// inner public class
//member public enum
// inner classes
//member enum
//member interface
// Get Class using reflection
// below method is used most of the times in frameworks like JUnit
//Spring dependency injection, Tomcat web container
//Eclipse auto completion of method names, hibernate, Struts2 etc.
//because ConcreteClass is not available at compile time
// prints com.journaldev.reflection.ConcreteClass
//for primitive types, wrapper classes and arrays
// prints boolean
// prints double
//prints double[]
// prints java.lang.String[][]
//getting public inner classes, enums, interface information including inherited class
// prints "class com.journaldev.reflection.BaseClass"
// prints "null"
// prints "class java.lang.Object"
//[class com.journaldev.reflection.ConcreteClass$ConcreteClassPublicClass, 
//class com.journaldev.reflection.ConcreteClass$ConcreteClassPublicEnum, 
//interface com.journaldev.reflection.ConcreteClass$ConcreteClassPublicInterface,
//class com.journaldev.reflection.BaseClass$BaseClassInnerClass, 
//class com.journaldev.reflection.BaseClass$BaseClassMemberEnum]
//getting all of the classes, interfaces, and enums that are explicitly declared in ConcreteClass
//[class com.journaldev.reflection.ConcreteClass$ConcreteClassDefaultClass, 
//class com.journaldev.reflection.ConcreteClass$ConcreteClassDefaultEnum, 
//class com.journaldev.reflection.ConcreteClass$ConcreteClassPrivateClass, 
//class com.journaldev.reflection.ConcreteClass$ConcreteClassProtectedClass, 
//class com.journaldev.reflection.ConcreteClass$ConcreteClassPublicClass, 
//class com.journaldev.reflection.ConcreteClass$ConcreteClassPublicEnum, 
//interface com.journaldev.reflection.ConcreteClass$ConcreteClassPublicInterface]
//prints com.journaldev.reflection.ConcreteClass
//prints class com.journaldev.reflection.ConcreteClass
//Get class modifiers, concreteClass.getModifiers() returns int representation of Modifiers, Modifier class can be used to return it in normal string format
//prints "public"
//prints "public abstract interface"
//Getting package name
//prints "com.journaldev.reflection"
//Get Type parameters (generics)
//prints "[java.util.Map<K, V>, interface java.lang.Cloneable, interface java.io.Serializable]"
//prints "[interface java.util.Map, interface java.lang.Cloneable, interface java.io.Serializable]"
//Get All annotations
//prints int
//prints 5
//setting field value to 10 in object
//prints 10
//prints com.journaldev.reflection.BaseInterface
//turning off access check with below method call
// prints "private string"
//prints "private string updated"
//prints class com.journaldev.reflection.ConcreteClass
//prints class com.journaldev.reflection.ConcreteClass
//get method parameter types, prints "[class java.lang.Object, class java.lang.Object]"
//get method return type, return "class java.lang.Object", class reference for void
//get method modifiers
//invoking method
// prints {key=value}
//invoking private method
//prints "Method3"
//constructors
//getting constructor parameters
// prints "[int]"
//prints "Method1 impl."
// prints "[]"
// Regex pattern to valid email address
//static Pattern object, since pattern is fixed
//non-static Matcher object because it's created from the input String
//initialize the Pattern object
/**
// list of valid email addresses
// list of invalid email addresses
//		Pattern pattern = Pattern.compile(".xx.");
//		Matcher matcher = pattern.matcher("MxxY");
//		System.out.println("Input String matches regex - "+matcher.matches());
// bad regular expression
//Thread.sleep(100);
//pattern = Pattern.compile("*xx*");
//		String str = "bbb";
//		System.out.println("Using String matches method: "+str.matches(".bb"));
//		System.out.println("Using Pattern matches method: "+Pattern.matches(".bb", str));
//		System.out.println(Pattern.matches("ad.$", "ade"));
//		System.out.println(Pattern.matches("^d.", "ada"));
//		System.out.println(Pattern.matches("d.", "da"));
//		System.out.println(Pattern.matches("[ab]x", "cx"));
//		System.out.println(Pattern.matches("^[abc]d.", "ad9"));
//		System.out.println(Pattern.matches("[ab].d$", "bad"));
//		System.out.println(Pattern.matches("[ab]x", "cx"));
//		System.out.println(Pattern.matches("..", ".a"));
//		System.out.println(Pattern.matches("[ab][12].", "a2#"));
//		System.out.println(Pattern.matches("[ab]..[12]", "acd2"));
//		System.out.println(Pattern.matches("[ab][12]", "c2"));
//		System.out.println(Pattern.matches("[^ab][^12].", "c3#"));
//		System.out.println(Pattern.matches("[^ab]..[^12]", "xcd3"));
//		System.out.println(Pattern.matches("[^ab][^12]", "c2"));
//		System.out.println(Pattern.matches("[a-e1-3].", "d#"));
//		System.out.println(Pattern.matches("[a-e1-3]", "2"));
//		System.out.println(Pattern.matches("[a-e1-3]", "f2"));
//		System.out.println(Pattern.matches("x.|y", "xa"));
//		System.out.println(Pattern.matches("x.|y", "y"));
//		System.out.println(Pattern.matches("x.|y", "yz"));
//		System.out.println(Pattern.matches("[a-zA-Z_0-9]", "9"));
//true
//false
//true
//false
//validate phone numbers of format "1234567890"
//validating phone number with -, . or spaces
//validating phone number with extension length from 3 to 5
//validating phone number where area code is in braces ()
//return false if nothing matches the input
// using pattern with flags
// using Matcher find(), group(), start() and end() methods
// using Pattern split() method
// using Matcher.replaceFirst() and replaceAll() methods
/**
//get the localhost IP address, if server is running on some other IP, you need to use that
//establish socket connection to server
//write to socket using ObjectOutputStream
//read the server response message
//close resources
/**
//static ServerSocket variable
//socket server port on which it will listen
//create the socket server object
//keep listens indefinitely until receives 'exit' call or program terminates
//creating socket and waiting for client connection
//read from socket to ObjectInputStream object
//convert ObjectInputStream object to String
//create ObjectOutputStream object
//write object to Socket
//close resources
//terminate the server if client sends exit request
//close the ServerSocket object
//
// The server do a loop here to accept all connection initiated by the
// client application.
//
//
// Read a message sent by client application
//
//
// Send a response information to the client application
//
//let's sort the employee based on id in ascending order
//returns a negative integer, zero, or a positive integer as this employee id
//is less than, equal to, or greater than the specified object.
//this is required to print the user friendly information about the Employee
/**
/**
/**
/**
//sort int array
/**
//using Collections.sort() to sort ArrayList
/**
//sort primitives array like int array
//sorting String array
//sorting list of objects
//sorting custom object array
//sorting employees array using Comparable interface implementation
//sort employees array using Comparator by Salary
//sort employees array using Comparator by Age
//sort employees array using Comparator by Name
//Employees list sorted by ID and then name
//		System.out.println("Naturally Sorted List::" + dl);
// sort a list using Comparator implementation
/**
/**
// codePoints()
// chars()
//java-8 join()
/**
//split string delimited with special characters
/**
// isBlank()
// lines()
// strip(), stripLeading(), stripTrailing()
// repeat()
// 1. public String indent​(int n)
// 2. public <R> R transform​(Function<? super String,​? extends R> f)
//Java 12 String implements Constable, ConstantDesc - hence two new methods
// 3. public Optional<String> describeConstable()
// 4. public String resolveConstantDesc​(MethodHandles.Lookup lookup)
/**
//using array toString() method
//using Arrays.toString() method to print String array contents
//converting String array to String by appending them
/**
//convert String to byte array
//convert byte array to String
//let's see if str and str1 are equals or not
/**
/**
/**
//substring vs subSequence
/**
//using String split function
//using java.util.regex Pattern
/**
//get char at specific index
//Character array from String
/**
//String to char array
//String to char
//char to String
//remove all given char from String
//set the List of Format's you want to use
// parse the input String with list of SimpleDateFormats we have
//do nothing, we need to try other format
//check if parsed successfully?
//return date if parsed successfully or else throw exception
// Lets format some String to Date
/**
//convert String to InputStream using ByteArrayInputStream
// lets print it to console
/** This class shows how to convert String to int
//3*10^0 +2*10^1 + 1*10^2 
//Hexadecimal format int as String
// 16*16^0 + 15*16^1  
//Octadecimal format int as String
//3*8^0 + 2*8^1 + 1*8^2 + 0*8^3
//Binary format int as String
// 1*2^0 + 1*2^1 + 1*2^2
//Some random String
// 12*36^0 + 11*36^1 + 10*36^2
// 12*36^0 + 11*36^1 + 10*36^2
//To create Integer object from String, supports only decimal
//shut down executor service
//wait indefinitely for future task to complete
//do nothing
//Get database connection, delete unused data from DB
//return the thread name executing this callable task
//Get database connection, delete unused data from DB
//start second thread after waiting for 2 seconds or if it's dead
//start third thread only when first thread is dead
//let all threads finish execution before finishing main thread
// TODO Auto-generated catch block
//systemIODemo();
//get unmodifiable environment variables map
//Get Specific environment variable
//run the garbage collector
//map library name
//load external libraries
//System.load("lixSYX.so");
//System.loadLibrary("libos.name.dylib");
//run finalization
//terminates the currently running JVM
// this line will never print because JVM is terminated
//set input stream
//prints the first character from input stream
//set output stream
//set error stream
//prints 2013-08-05
//prints "Welcome Pankaj"
//prints "Current time is: 08 5,2013"
//No console is attached when run through Eclipse, background process
//Get System Defined Properties
//Get Specific Property
//Clear property example
//print null
//Set System property
//prints "IN"
//copying first two elements from array1 to array2 starting from index 2 of array2
//update attribute value
//update Element value
//delete element
//add new element
//write the updated document to file or console
//loop for each employee
//loop for each employee
//loop for each employee
//loop for each employee
//prefix id attribute with M
//prefix id attribute with F
//            XMLEventWriter xmlEventWriter = xmlOutputFactory
//                    .createXMLEventWriter(new FileOutputStream(fileName), "UTF-8");
//For Debugging - below code to print XML to Console
// Write the element nodes
//Create Start node
//Create Content
// Create End node
//now XML is loaded as Document in memory, lets convert it to Object List
//lets print Employee list information
//XMLReaderDOM domReader = new XMLReaderDOM();
//default locale
//Get ResourceBundle with Locale that are already defined
//Get resource bundle when Locale needs to be created
//lets print some messages
//default constructor
/** 
/**
/**
//utilize clone Object method
// deep cloning for immutable fields
// Deep Copy of field by field
// Copy Constructor for Cloning
// Deep Copy of field by field
// Check whether the emp and clonedEmp attributes are same or different
// Lets see the effect of using default cloning
// change emp props
// change emp name
// myMap.put("4", "4");
//check the output below. :)
//Let's modify the list size and get ConcurrentModificationException
//this line throws exception
/**
//inherited method from java.io.Writer 
/**
//inherited method from java.io.Writer 
//inherited method from java.io.OutputStreamWriter
/**
//inherited method from java.io.Writer 
//inherited method from java.io.OutputStreamWriter
/**
//inherited method from java.io.OutputStreamWriter 
/**
//inherited method from java.io.Writer 
/**
//inherited method from java.io.OutputStreamWriter 
/**
//inherited method from java.io.OutputStreamWriter 
/**
//inherited method from java.io.Writer 
/**
//inherited method from java.io.OutputStreamWriter 
/**
/**
/**
/**
/**
//xml.apache.org/xslt}indent-amount", indent);
/**
// for odd palindrom case like 12321, 3 will be the mid
// we need to move in the left and right side by 1 place till they
// reach the end
// below check to find out if its a palindrome
// update global indexes only if this is the longest one
// till now
// for even palindrome, we need to have similar logic with small
// change
// for example 12333321 when we choose 33 as mid
// make sure both indexes
// are valid
// after the loop we return
//method(null);
//check that last index has highest value in first loop,
// second last index has second last highest value and so on
//check that last index has highest value in first loop,
// second last index has second last highest value and so on
// sort the array
/**
//below assignment will throw compile time exception since e is final
//e = new Exception();
//below assignment disables the improved rethrow exception type checking feature of Java 7
// e=new ThirdException();
// switch case string is case sensitive
/**
// TODO Auto-generated catch block
// close resources
// TODO Auto-generated catch block
// TODO Auto-generated catch block
/**
//trying to override Object method gives compile time error as
//"A default method cannot override a method from java.lang.Object"
//	default String toString(){
//		return "i1";
//	}
//MyClass won't compile without having it's own log() implementation
//creating sample Collection
//traversing using Iterator
//traversing through forEach method of Iterable with anonymous class
//traversing with Consumer interface implementation
//Consumer implementation that can be reused
//sequential stream
//parallel stream
//using lambda with Stream API, filter example
//using lambda in forEach
//trying to override Object method gives compile time error as
//"A default method cannot override a method from java.lang.Object"
//	default String toString(){
//		return "i1";
//	}
//	static void print(String str){
//		System.out.println("Class Printing "+str);
//	}
//MyClass won't compile without having it's own log() implementation
//creating sample Collection
//traversing using Iterator
//traversing through forEach method of Iterable with anonymous class
//traversing with Consumer interface implementation
//Consumer implementation that can be reused
// find max odd number in the range 3 to 11 and square it
// private static int findSquareOfMaxOdd(List<Integer> numbers) {
// int max = 0;
// for(int i : numbers){
// if(i%2 != 0 && i > 3 && i < 11 && i > max){
// max =i;
// }
// }
// return max*max;
// }
//Predicate is functional interface and
// we are using lambdas to initialize it
// rather than anonymous inner classes
//Declarative approach using lambdas, stream and predicate
//Declarative approach
//	private static boolean isPrime(int number) {		
//		return number > 1
//				&& IntStream.range(2, number - 1).noneMatch(
//						index -> number % index == 0);
//	}
//Traditional approach
//	private static boolean isPrime(int number) {		
//		if(number < 2) return false;
//		for(int i=2; i<number; i++){
//			if(number % i == 0) return false;
//		}
//		return true;
//	}
//	public static String toString(){
//		System.out.println("Child foo called");
//		return "";
//	}
//sequential stream
//parallel stream
//using lambda with Stream API, filter example
//using lambda in forEach
//stream is closed, so we need to create it again
// [ef, d, aBc, 123456]
//[123456, aBc, d, ef]
//1,2,3,4,5,
// SimpleDateFormat is not thread-safe, so give one to each thread
// SimpleDateFormat is not thread-safe, so give one to each thread
//    private static final ThreadLocal<SimpleDateFormat> formatter = new ThreadLocal<SimpleDateFormat>(){
//        @Override
//        protected SimpleDateFormat initialValue()
//        {
//            return new SimpleDateFormat("yyyyMMdd HHmm");
//        }
//    };
//Date to Instant
//Now we can convert Instant to LocalDateTime or other similar classes
//Calendar to Instant
//TimeZone to ZoneId
//ZonedDateTime from specific Calendar
//Date API to Legacy classes
//Get the Year, check if it's leap year
//Compare two LocalDate for before and after
//Create LocalDateTime from LocalDate
//plus and minus operations
//Temporal adjusters for adjusting the dates
//Format examples
//default format
//specific format
//default format
//specific format
//default format
//Parse examples
//Current timestamp
//Instant from timestamp
//Duration example
/**
//Current Date
//Creating LocalDate by providing input arguments
//Try creating date by providing invalid inputs
//LocalDate feb29_2014 = LocalDate.of(2014, Month.FEBRUARY, 29);
//Exception in thread "main" java.time.DateTimeException: 
//Invalid date 'February 29' as '2014' is not a leap year
//Current date in "Asia/Kolkata", you can get it from ZoneId javadoc
//java.time.zone.ZoneRulesException: Unknown time-zone ID: IST
//LocalDate todayIST = LocalDate.now(ZoneId.of("IST"));
//Getting date from the base date i.e 01/01/1970
//Current Date
//Current Date using LocalDate and LocalTime
//Creating LocalDateTime by providing input arguments
//Try creating date by providing invalid inputs
//LocalDateTime feb29_2014 = LocalDateTime.of(2014, Month.FEBRUARY, 28, 25,1,1);
//Exception in thread "main" java.time.DateTimeException: 
//Invalid value for HourOfDay (valid values 0 - 23): 25
//Current date in "Asia/Kolkata", you can get it from ZoneId javadoc
//java.time.zone.ZoneRulesException: Unknown time-zone ID: IST
//LocalDateTime todayIST = LocalDateTime.now(ZoneId.of("IST"));
//Getting date from the base date i.e 01/01/1970
/**
//Current Time
//Creating LocalTime by providing input arguments
//Try creating time by providing invalid inputs
//LocalTime invalidTime = LocalTime.of(25,20);
//Exception in thread "main" java.time.DateTimeException: 
//Invalid value for HourOfDay (valid values 0 - 23): 25
//Current date in "Asia/Kolkata", you can get it from ZoneId javadoc
//java.time.zone.ZoneRulesException: Unknown time-zone ID: IST
//LocalTime todayIST = LocalTime.now(ZoneId.of("IST"));
//Getting date from the base date i.e 01/01/1970
//Create the CSVFormat object
//initialize the CSVParser object
//close the parser
//CSV Write Example using CSVPrinter
//close the printer
//columnMapping.put("Salary", "salary");
//add header record
//create CSVReader object
//read line by line
//skip header row
//create CSVReader object
//read all lines at once
//skip header row
// write the header
//write the beans data
// the name mapping provide the basis for bean setters 
//just read the header, so that it don't get mapped to Employee object
// ID (must be unique)
// Name
// Role
// Salary
// Create Workbook instance holding reference to .xlsx file
// Get first/desired sheet from the workbook
//Iterate through each rows one by one
//For each row, iterate through all the columns
//Check the cell type and format accordingly
//System.out.println("");
//System.out.println(countryMap);
//System.out.println(countryNames);
//System.out.println(countryShortCodes);
//Create the input stream from the xlsx/xls file
//Create Workbook instance for xlsx/xls file input stream
//Get the number of sheets in the xlsx file
//loop through each of the sheets
//Get the nth sheet from the workbook
//every sheet has rows, iterate over them
//Get the row object
//Every row has columns, get the column iterator and iterate over them
//Get the Cell object
//check the cell type and process accordingly
//2nd column
//random data, leave it
//end of cell iterator
//end of rows iterator
//end of sheets for loop
//close file input stream
//assuming xlsx file
//set formula cell
//lets write to file
//lets write the excel data to file now
/**
// System.out.println("Rows = "+rows);
/**
// for loop for the rows
// white spaces in the front of the numbers
//print leading white spaces
//print numbers
//move to next line
//utility function to print string given times
/**
// for loop for the rows
// white spaces in the front of the numbers
//print leading white spaces
//print numbers
//move to next line
/**
// for loop for the rows
// white spaces in the front of the numbers
//print leading white spaces
//print character
//move to next line
/**
// for loop for the rows
// white spaces in the front of the numbers
//print leading white spaces
//print numbers
//move to next line
/**
// for loop for the rows
// white spaces in the front of the numbers
//print leading white spaces
//print numbers
//move to next line
/**
// for loop for the rows
// white spaces in the front of the numbers
//print leading white spaces
//print character
//move to next line
/**
// for loop for the rows
// white spaces in the front of the numbers
//print leading white spaces
//print character
//move to next line
/**
//set message headers
/**
// Create the message body part
// Fill the message
// Create a multipart message for attachment
// Set text message part
// Second part is attachment
// Send the complete message parts
// Send message
/**
// Create the message body part
// Create a multipart message for attachment
// Set text message part
// Second part is image attachment
//Trick is to add the content-id header here
//third part for displaying image in the email body
//Set the multipart message to the email message
// Send message
/**
//SMTP Host
//SSL Port
//SSL Factory Class
//Enabling SMTP Authentication
//SMTP Port
//override the getPasswordAuthentication method
/**
//SMTP Host
//TLS Port
//enable authentication
//enable STARTTLS
//override the getPasswordAuthentication method
/**
/**
/**
// This loads the byte code data from the file
// defineClass is inherited from the ClassLoader class
// that converts byte array into a Class. defineClass is Final
// so we cannot override it
/**
/**
// Below method is used to check that the Foo is getting loaded
// by our custom class loader i.e CCLoader
//access super class constructor with super keyword
//access child class method
//use super to access super class method
// open file input stream
// read file line by line
//close reader
// schedule to run after sometime
// for(int i=0; i<3; i++){
// Thread.sleep(1000);
// WorkerThread worker = new WorkerThread("do heavy processing");
// scheduledThreadPool.schedule(worker, 10, TimeUnit.SECONDS);
// }
// for (int i = 0; i < 3; i++) {
// Thread.sleep(1000);
// WorkerThread worker = new WorkerThread("do heavy processing");
// // schedule task to execute at fixed rate
// scheduledThreadPool.scheduleAtFixedRate(worker, 0, 10,
// TimeUnit.SECONDS);
// }
// add some delay to let some threads spawn by scheduler
// wait for all tasks to finish
//release lock
//do some operation, DB read, write etc
//logging, no need for thread safety
// TODO Auto-generated method stub
// load the Driver Class
// create the connection now
//longer than column length
//truncate the table
//ps.execute("truncate table Employee");
//truncate the table
//ps.execute("truncate table Employee");
//truncate the table
//truncate the table
//execute and commit batch of 1000 queries
//commit remaining queries in the batch
// load the Driver Class
// create the connection now
//close the resultset here
//in real life, we can write logic to execute in batches, for simplicity I am returning
//set null for remaining ones
//close the resultset here
//close the resultset here
//localhost:3306/UserDB";
// load the Driver Class
// create the connection now
//read user entered data
// read user entered data
//set the parameter
// load the Driver Class
// create the connection now
//Read User Inputs
//register the OUT parameter before calling the stored procedure
//read the OUT parameter now
//Create Object Array for Stored Procedure call
//Read User Inputs
//register the OUT parameter before calling the stored procedure
//read the OUT parameter now
//Read User Inputs
//register the OUT parameter before calling the stored procedure
//read the OUT parameter now
//Read User Inputs
//register the OUT parameter before calling the stored procedure
//read the OUT parameter now
//localhost:3306/UserDB";
// load the Driver Class
// create the connection now
// set auto commit to false
// if code reached here, means main work is done successfully
// now commit transaction
// SQLException occurred in saving into Employee or Address tables
// exception occurred in inserting into Logs table
// we can ignore it by rollback to the savepoint
//lets commit now
//message is very long, will throw SQLException
//set auto commit to false
//now commit transaction
// load the Driver Class
// create the connection now
// TODO Auto-generated catch block
//using try-with-resources to avoid closing resources (boiler plate code)
//www.journaldev.com";
// Create the ByteMatrix for the QR-Code that encodes the given String
// Make the BufferedImage that are to hold the QRCode
// Paint and save the image using the ByteMatrix
// List to hold Employees object
// getter method for employee list
// create a new Employee and put it in Map
// initialize Employee object and set id attribute
// initialize list
// set boolean values for fields, will be used in setting Employee variables
// create the data container
// age element, set Employee age
// add Employee object to list
// Get Employees list
// print employee information
// TODO Auto-generated catch block
//read in the same order as written
//getter and setter methods
//serialize to file
/**
// deserialize to Object from given file
// serialize the given object and save it to file
//adding helper method for serialization to save/initialize super class state
//notice the order of read and write should be same
//validate the object here
//serialization proxy class
//obscuring data for security
//replacing serialized object to DataProxy object
// using Java 8 Optional to get the first service
// using Java 8 forEach() method
// Total Number of Loaded Services
//private constructor to avoid client applications to use constructor
//do something
//Below code will destroy the singleton pattern
//deserailize from file to object
//static block initialization for exception handling
//System.out.println(line.split(" ").length); //won't work with tabs and multiple spaces
// using Map merge method from Java 8
// another way using latest Java enhancements and no for loop, a bit complex though
// match found
// no match found till end
/**
// for odd palindrom case like 12321, 3 will be the mid
// we need to move in the left and right side by 1 place till they
// reach the end
// below check to find out if its a palindrome
// update global indexes only if this is the longest one
// till now
// for even palindrome, we need to have similar logic with small
// change
// for example 12333321 when we choose 33 as mid
// make sure both indexes
// are valid
// after the loop we return
//special chars
/**
//Handling error scenarios
// first character
// Full string without first character
// "Java" String created in pool and reference assigned to s1
//s2 is also having the same reference to "Java" in the pool
// proof that s1 and s2 have same reference
//s1 value got changed above, so how String is immutable?
//well, in above case a new String "Python" got created in the pool
//s1 is now referring to the new String in the pool 
//BUT, the original String "Java" is still unchanged and remains in the pool
//s2 is still referring to the original String "Java" in the pool
// proof that s1 and s2 have different reference
// prints "Java" supporting the fact that original String value is unchanged, hence String is immutable
/** Logic
//s1 = s1+s2
// s2=s1
/**
// recursive reverse
//iterative reverse
/**
/**
/**
/**
/*
/*
/**
/**
//do some msg validation, manipulation logic etc
//logic to send email
//logic to send SMS
//mock the injector with anonymous class
//mock the message service
//Send email
//Send SMS
//logic to send email
//do some msg validation, manipulation logic etc
//import com.google.inject.Inject;
//	constructor based injector
//	@Inject
//	public MyApplication(MessageService svc){
//		this.service=svc;
//	}
//setter method injector
//some business logic here
//bind the service to implementation class
//bind MessageService to Facebook Message implementation
//bind(MessageService.class).to(FacebookService.class);
//import com.google.inject.Singleton;
//some fancy code to send email
//import com.google.inject.Singleton;
//some complex code to send Facebook message
//return true if number is between 0 to 10
//return true if number is 33 or 77
//return true if number is not 99
//startsWith Java
//endsWith Dev
//contains Pyt
//matches ads
// 999 is one of substring
// below will throw exception because it's not mocked
//mockList.add(30);
//Iterator Style Mocking
// below will NOT throw exception because of nice mocking
//verify won't throw error for unexpected calls for nice mock
//calling real methods
//mock some behaviors
//real method will be called, check the console
//testing mocked method
//mock void method without any logic
//expectLastCall().andVoid().times(2);
//PowerMock.createMock()
//PowerMock.replay()
//PowerMock.verify()
//PowerMock.createMock()
//PowerMock.replay()
//PowerMock.verify()
//return new StringBuilder(s).reverse().toString();
//return new StringBuilder(s).reverse().toString();
//PowerMock.mockStatic()
//PowerMock.replayAll()
//PowerMock.verifyAll()
//PowerMock.mockStatic()
//PowerMock.replayAll()
//PowerMock.verifyAll()
//Initialize Sessions
//clear first level cache, so that second level cache is used
//Release resources
// Create the SessionFactory from hibernate.cfg.xml
//Get Session
//start transaction
//Save the Model object
//Commit transaction
//terminate session factory, otherwise program won't end
//Get Session
//start transaction
//Save the Model object
//Commit transaction
//terminate session factory, otherwise program won't end
//Get Session
//start transaction
//Save the Model object
//Commit transaction
//terminate session factory, otherwise program won't end
//XML based configuration
//Annotation based configuration
//Property based configuration
// Create the SessionFactory from hibernate.cfg.xml
// Make sure you log the exception, as it might be swallowed
// Create the SessionFactory from hibernate.cfg.xml
// Make sure you log the exception, as it might be swallowed
//Create Properties, can be read from property files too
//localhost/TestDB");
//we can set mapping file or class with annotation
//addClass(Employee1.class) will look for resource
// com/journaldev/hibernate/model/Employee1.hbm.xml (not good)
//Prep work
//Get All Employees
// Create the SessionFactory from hibernate.cfg.xml
//Saving many-to-many where Item is primary
//Saving many-to-many where Cart is primary
// Create the SessionFactory from hibernate-annotation.cfg.xml
// Create the SessionFactory from hibernate.cfg.xml
// Prep work
//HQL Named Query Example
//Native SQL Named Query Example
// rolling back to save the test data
// closing hibernate resources
// Create the SessionFactory from hibernate.cfg.xml
//Get Session
//start transaction
//Save the Model object
//Commit transaction
//Get Session
//start transaction
//Save the Model objects
//Commit transaction
//Hibernate requires no-args constructor
//Hibernate requires no-args constructor
// Create the SessionFactory from hibernate-annotation.cfg.xml
// Create the SessionFactory from hibernate.cfg.xml
//Get Session
//start transaction
//Save the Model object
//Commit transaction
//Get Saved Trasaction Data
//Get Session
//start transaction
//Save the Model object
//Commit transaction
//Get Session
//start transaction
//Save the Model object
//Commit transaction
//Get Saved Trasaction Data
//Get Session
//start transaction
//Save the Model object
//Commit transaction
// Create the SessionFactory from hibernate-annotation.cfg.xml
// Create the SessionFactory from hibernate.cfg.xml
//Getting Validator instance with Annotations
//If there are multiple JSR303 implementations in classpath
//we can get HibernateValidator specifically too
//XML Based validation
//Validation inheritance and Property-level constraints example
//@Valid annotation - validation in composition example
//default no-args constructor
//default no-args constructor
//using @NotNull at constructor rather than at field
//Get employee with id=1
//waiting for sometime to change the data in backend
//Fetch same data again, check logs that no query fired
//Create new session
//Get employee with id=1, notice the logs for query
//START: evict example to remove specific object from hibernate first level cache
//Get employee with id=2, first time hence query in logs
//evict the employee object with id=1
//since object is removed from first level cache, you will see query in logs
//this object is still present, so you won't see query in logs
//END: evict example
//START: clear example to remove everything from first level cache
// Prep work
//Get All Employees
// Get with ID, creating new Criteria to remove all the settings
//Pagination Example
//Like example
//Projections example
//using Projections for sum, min, max aggregation functions
//Join example for selecting few columns
// Rollback transaction to avoid messing test data
// closing hibernate resources
//Prep Work
//Get Example
//load Example
//		Employee emp1 = (Employee) session.load("com.journaldev.hibernate.model.Employee", new Long(1));
//byId example
//		Employee emp2 = (Employee) session.byId(Employee.class).getReference(new Long(3));
//		System.out.println("Employee byId called");
//		System.out.println("Employee ID= "+emp2.getId());
//		System.out.println("Employee byId Details:: "+emp2+"\n");
//Close resources
// Prep Work
//merge example - data already present in tables
// returns false
// Close resources
// Prep work
// Get All Employees
// Get All Employees - addScalar example
// Entity query - addEntity example
// Join example with addEntity and addJoin
//Above join returns both Employee and Address Objects in the array
// rolling back to save the test data
// closing hibernate resources
// Prep Work
//persist example - with transaction
// will be updated in database too
// Close resources
// Prep Work
//save example - without transaction
//save example - with transaction
//save example - existing row in table
//update some data
// Close resources
// Prep Work
//saveOrUpdate example - without transaction
//saveOrUpdate example - with transaction
//will be saved into DB
//Name changed
//again changed to previous value, so no Employee update
//update example
//		emp3.setName("Final updated name");
//		emp3.getAddress().setCity("Bangalore");
//		Transaction tx7 = session3.beginTransaction();
//		session3.update(emp3);
//		System.out.println("13. Before committing update transaction");
//		tx7.commit();
//		System.out.println("14. After committing update transaction");
//		
//		//merge example - data already present in tables
//		emp3.setSalary(25000);
//		Transaction tx8 = session3.beginTransaction();
//		Employee emp4 = (Employee) session3.merge(emp3);
//		System.out.println(emp4 == emp3); // returns true
//		emp3.setName("Test");
//		emp4.setName("Kumar");
//		System.out.println("15. Before committing merge transaction");
//		tx8.commit();
//		System.out.println("16. After committing merge transaction");
//		
//		//merge example - new data
//		Employee emp9 = getTestEmployee();
//		Session session4 = sessionFactory.openSession();
//		Transaction tx9 = session4.beginTransaction();
//		Employee emp10 = (Employee) session4.merge(emp9);
//		System.out.println(emp9 == emp10); // returns true
//		emp9.setName("Test");
//		emp10.setName("Kumar");
//		System.out.println("17. Before committing merge transaction");
//		tx9.commit();
//		System.out.println("18. After committing merge transaction");
// Close resources
// Prep Work
// update example
// Close resources
// Prep work
// Get All Employees
// Get Employee with id=3
// Get Employee with id=3
// Get Employee with id=3
// rolling back to save the test data
// closing hibernate resources
//Prep work
//Get All Employees
//Get Employee with id
//pagination example
//starts with 0
//Update Employee
//Delete Employee, we need to take care of foreign key constraints too
//Aggregate function examples
//join examples
//group by and like example
//order by example
//rolling back to save the test data
//closing hibernate resources
// Create the SessionFactory from hibernate.cfg.xml
//localhost/Test", "SA", "");
//Date to Instant
//Now we can convert Instant to LocalDateTime or other similar classes
//Calendar to Instant
//TimeZone to ZoneId
//ZonedDateTime from specific Calendar
//Date API to Legacy classes
// Get the Year, check if it's leap year
// Compare two LocalDate for before and after
// Create LocalDateTime from LocalDate
// plus and minus operations
// Temporal adjusters for adjusting the dates
// Format examples
// default format
// specific format
// default format
// specific format
// default format
// Parse examples
// Current timestamp
// Instant from timestamp
// Duration example
//1. Simple example with default system time zone
//2. Clock instant example
//3. UTC Time zone
//4. using specific time zone
//5. Get current milliseconds
//6. Offset to future or past time
//7. tick example
//8. Fixed Clock
/**
// Current Date
// Creating LocalDate by providing input arguments
// Try creating date by providing invalid inputs
// LocalDate feb29_2014 = LocalDate.of(2014, Month.FEBRUARY, 29);
// Exception in thread "main" java.time.DateTimeException:
// Invalid date 'February 29' as '2014' is not a leap year
// Current date in "Asia/Kolkata", you can get it from ZoneId javadoc
// java.time.zone.ZoneRulesException: Unknown time-zone ID: IST
// LocalDate todayIST = LocalDate.now(ZoneId.of("IST"));
// Getting date from the base date i.e 01/01/1970
// Current Date
// Current Date using LocalDate and LocalTime
// Creating LocalDateTime by providing input arguments
// Try creating date by providing invalid inputs
// LocalDateTime feb29_2014 = LocalDateTime.of(2014, Month.FEBRUARY, 28,
// 25,1,1);
// Exception in thread "main" java.time.DateTimeException:
// Invalid value for HourOfDay (valid values 0 - 23): 25
// Current date in "Asia/Kolkata", you can get it from ZoneId javadoc
// java.time.zone.ZoneRulesException: Unknown time-zone ID: IST
// LocalDateTime todayIST = LocalDateTime.now(ZoneId.of("IST"));
// Getting date from the base date i.e 01/01/1970
/**
// Current Time
// Creating LocalTime by providing input arguments
// Try creating time by providing invalid inputs
// LocalTime invalidTime = LocalTime.of(25,20);
// Exception in thread "main" java.time.DateTimeException:
// Invalid value for HourOfDay (valid values 0 - 23): 25
// Current date in "Asia/Kolkata", you can get it from ZoneId javadoc
// java.time.zone.ZoneRulesException: Unknown time-zone ID: IST
// LocalTime todayIST = LocalTime.now(ZoneId.of("IST"));
// Getting date from the base date i.e 01/01/1970
//Java Stream flatMap way
//legacy way
//requesting data from publisher
// Create Publisher
// Register Subscriber
// Publish items
// logic to wait till processing of all messages are over
//while (emps.size() != subs.getCounter()  || !publisher.isSubscribed(subs)) {
//}
// close the Publisher
// Create End Publisher
// Create Processor
//Create End Subscriber
//Create chain of publisher, processor and subscriber
// publisher to processor
// processor to subscriber
// Publish items
// Logic to wait for messages processing to finish
// Closing publishers
//requesting data from publisher
//	@Override
//	public void onNext(Employee item) {
//		System.out.println("Processing Employee "+item);
//		counter++;
//		if(counter==3) {
//			this.subscription.cancel();
//			return;
//		}
//		this.subscription.request(1);
//	}
// TODO Auto-generated method stub
// TODO Auto-generated method stub
// TODO Auto-generated method stub
//required parameters
//optional parameters
//required parameters
//optional parameters
/**
//www.journaldev.com/370/java-programming-interview-questions
//what will be the output?
/**
//www.journaldev.com/370/java-programming-interview-questions
/**
//www.journaldev.com/370/java-programming-interview-questions
//what will be the output?
/**
//www.journaldev.com/370/java-programming-interview-questions
//what will be the output?
//what will be the output?
//what will be the output?
//what will be the output?
/**
/**
/**
/**
//service.jaxws.journaldev.com/")
/**
//www.w3.org/2001/XMLSchema}anyType">
//www.w3.org/2001/XMLSchema}int"/>
//www.w3.org/2001/XMLSchema}int"/>
//www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
/**
/**
/**
/**
/**
/**
/**
//www.w3.org/2001/XMLSchema}anyType">
//service.jaxws.journaldev.com/}person" maxOccurs="unbounded" minOccurs="0"/>
/**
/**
//service.jaxws.journaldev.com/")
/**
//service.jaxws.journaldev.com/PersonService/addPersonRequest", output = "http://service.jaxws.journaldev.com/PersonService/addPersonResponse")
/**
//service.jaxws.journaldev.com/PersonService/deletePersonRequest", output = "http://service.jaxws.journaldev.com/PersonService/deletePersonResponse")
/**
//service.jaxws.journaldev.com/PersonService/getPersonRequest", output = "http://service.jaxws.journaldev.com/PersonService/getPersonResponse")
/**
//service.jaxws.journaldev.com/PersonService/getAllPersonsRequest", output = "http://service.jaxws.journaldev.com/PersonService/getAllPersonsResponse")
/**
//service.jaxws.journaldev.com/", wsdlLocation = "http://localhost:8888/ws/person?wsdl")
//service.jaxws.journaldev.com/", "PersonServiceImplService");
//localhost:8888/ws/person?wsdl");
/**
//service.jaxws.journaldev.com/", "PersonServiceImplPort"), PersonService.class);
/**
//service.jaxws.journaldev.com/", "PersonServiceImplPort"), PersonService.class, features);
//get person
//get all persons
//delete person
//get all persons
//localhost:8888/testWS", new TestService());
//localhost:8080/JAXWS-Tomcat/personWS?wsdl");
//check above URL in browser, you should see WSDL file
//creating QName using targetNamespace and name
//service.jaxws.journaldev.com/", "PersonServiceImplService"); 
//We need to pass interface and model beans to client
//add person
//get person
//get all persons
//delete person
//get all persons
//GET example
//localhost:8080/RestEasy-Example/employee/99/getDummy");
//POST example
//localhost:8080/RestEasy-Example/employee/add");
//DELETE example
//localhost:8080/RestEasy-Example/employee/50/delete");
//localhost:8888/ws/person", new PersonServiceImpl());  
//localhost:8888/ws/person?wsdl");
//check above URL in browser, you should see WSDL file
//creating QName using targetNamespace and name
//service.jaxws.journaldev.com/", "PersonServiceImplService"); 
//We need to pass interface and model beans to client
//add person
//get person
//get all persons
//delete person
//get all persons
/**
/**
/**
/**
/**
/**
/**
// Type metadata
//beans.jaxws.journaldev.com", "Person"));
//beans.jaxws.journaldev.com", "age"));
//www.w3.org/2001/XMLSchema", "int"));
//beans.jaxws.journaldev.com", "id"));
//www.w3.org/2001/XMLSchema", "int"));
//beans.jaxws.journaldev.com", "name"));
//www.w3.org/2001/XMLSchema", "string"));
/**
/**
/**
/**
/**
/**
// Use to get a proxy class for PersonServiceImpl
//localhost:8080/SOAPExample/services/PersonServiceImpl";
// The WSDD service name defaults to the port name.
/**
/**
//service.jaxws.journaldev.com", "PersonServiceImplService");
//service.jaxws.journaldev.com", "PersonServiceImpl"));
/**
// Unknown Port Name
/**
/**
//service.jaxws.journaldev.com", "p"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName("http://beans.jaxws.journaldev.com", "Person"), com.journaldev.jaxws.beans.Person.class, false, false);
//www.w3.org/2001/XMLSchema", "boolean"));
//service.jaxws.journaldev.com", "addPersonReturn"));
//service.jaxws.journaldev.com", "id"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "int"), int.class, false, false);
//www.w3.org/2001/XMLSchema", "boolean"));
//service.jaxws.journaldev.com", "deletePersonReturn"));
//service.jaxws.journaldev.com", "id"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "int"), int.class, false, false);
//beans.jaxws.journaldev.com", "Person"));
//service.jaxws.journaldev.com", "getPersonReturn"));
//beans.jaxws.journaldev.com", "Person"));
//service.jaxws.journaldev.com", "getAllPersonsReturn"));
//beans.jaxws.journaldev.com", "Person");
// All the type mapping information is registered
// when the first call is made.
// The type mapping information is actually registered in
// the TypeMappingRegistry of the service, which
// is the reason why registration is only needed for the first call.
// must set encoding style before registering serializers
//service.jaxws.journaldev.com", "addPerson"));
//service.jaxws.journaldev.com", "deletePerson"));
//service.jaxws.journaldev.com", "getPerson"));
//service.jaxws.journaldev.com", "getAllPersons"));
//localhost:3306/cardb";
// System.out.println("Connection established"+connect);
// close resources
// label, value
/**
// @NotNull(message="Please enter the model number")
// Get Gson object
// read JSON file data as String
// parse json string to object
// print object data
// create JSON String from Object
//create JsonReader object
//create objects
//print employee object
//loop to read all tokens
//get next token
//skip value to ignore it
//skip value to ignore it
//add to emp properties map
//writing on console, we can initialize with FileOutputStream to write to file
//set indentation for pretty print
//start writing
//{
// "id": 123
// "name": "David"
// "permanent": false
// "address": {
// "street": "BTM 1st Stage"
// "city": "Bangalore"
// "zipcode": 560100
// }
// "phoneNumbers": [
//123456,987654
// ]
// "role": "Manager"
// "cities": [
//"Los Angeles","New York"
// ]
//"properties": {
//"age": "28 years","salary": "1000 Rs"
// }
// }
//close writer
//read json file data to String
//create ObjectMapper instance
//convert json string to object
//convert Object to json string
//configure Object mapper for pretty print
//writing to console, can write to any output stream such as file
//converting json to Map
//another way
//read JSON like DOM Parser
//update JSON data
//add new key value
//remove existing key
//create JsonParser object
//loop through the tokens
//print employee object
//loop through the JsonTokens
//nested object, recursive call
//for pretty printing
// start root object
//start address object
//end address object
//start cities array
//closing cities array
//closing properties
//closing root object
/**
// {
// "id":123
//start of address object
//end of address object
//start of phone num array
// end of phone num array
// }
/**
// don't set anything
// we are not looking for other events
//close resources
//create JsonReader object
/**
//get JsonObject from JsonReader
//we can close IO resource and JsonReader now
//Retrieve data from JsonObject and create Employee bean
//reading arrays from json
//reading inner object from json object
//print employee bean information
//write to file
/**
//uncomment below code and understand each assert execution
/*assertAll("numbers",
// assertNull(new Object(), "assertNull Fail Message");
// assertNotNull(null, "assertNotNull Fail Message");
// this will fail
// assertSame("Hi", new String("Hi"), "My Failure Message");
// this will fail
// assertNotSame("Hi", "Hi", "assertNotSame Failure Message");
// this will fail
// assertThrows(IOException.class, () -> {throw new RuntimeException();});
// assertThrows(IOException.class, () -> {throw new RuntimeException();},
// "assertThrows Failure Message");
// assertAll("My Executables Heading Error Message", () -> {throw new
// Exception("Hi");});
// this will fail
/*
// this will timeout for sure
// assertTimeoutPreemptively(Duration.ofNanos(1), () ->
// System.out.println("Hello There"));
/*
/*
// code that I don't want to run as root user
//@Disabled
// printing system properties, they are being used in further tests
// My System Properties "os.name" value is "Mac OS X"
// My System Properties "user.name" value is "pankaj"
//dummy test
//   dynamicTest("Exception Executable", () -> {throw new Exception("Exception Example");}),
// below code shouldn't be part of test method
// move it to @BeforeEach/@AfterEach
// System.out.println("Current Test Count = "+repetitionInfo.getCurrentRepetition());
//For Constructor Based @InjectMocks injection
//For Property Setter Based @InjectMocks injection
//For Field Based @InjectMocks injection
// "null" gets printed as get(1) is not stubbed
//@Captor ArgumentCaptor<Long> acLong;
//	Need below method if using @Captor annotation
//	@BeforeEach
//	void setup() {
//		MockitoAnnotations.initMocks(this);
//	}
// Argument Matchers than static arguments
// every argument should be argument matcher
// use eq() when we have to use static value
// Arrays and Additional Matchers for rare cases
// argument matchers with verify
//@InjectMock creates an instance of the class and 
//injects the mocks that are marked with the annotations @Mock into it.
//if we don't call below, we will get NullPointerException
//mockFruits names is using mockList, below asserts confirm it
//below will print null because mockList.get(1) is not stubbed
//if we don't call below, we will get NullPointerException
//1. using Mockito.mock() method
//mocked method
//real method called since it's not stubbed
//calling real methods since below methods are not stubbed
//further calls will return the last mocked output
// "null" gets printed as get(1) is not stubbed
// call the real method on Spied object since it's not stubbed
// all interactions are verified, so below will pass
// isEmpty() is not verified, so below will fail
// verifyNoMoreInteractions(mockList);
// testing order of mock method calls
// can skip methods but order should be followed
// convert Person Object to MongoDB DBObject
// take special note of converting id String to ObjectId
// convert DBObject Object to Person
// take special note of converting ObjectId to String
//DAO class for different MongoDB CRUD operations
//take special note of "id" String to ObjectId conversion and vice versa
//also take note of "_id" key for primary key
// id will be used for primary key in MongoDB
// We could use ObjectId, but I am keeping it
// independent of MongoDB API classes
// keep it non-editable in UI
//create
//read
//update
//delete
//id will be used for storing MongoDB _id
/**
//localhost:8080/My-Jersey-Project/rest/emp/getEmp";
// set id as 1 for OK response
// Get connection instance
// Create Prepared Statement
// Set variables
// Execute
// Return employee instance
// Close statement
// Close connection
// Throw another exception for notifying the Servlet
// Synchronized against connectionUtility instance
// Check whether the connectionUtility is null or not
// Create a properties instance
// Load properties from classpath
// Set connection with connectionUtility
// Load driver class
// Create connection
//localhost:3306/journaldev", properties));
// Create a properties instance
// Load properties from classpath
// Load driver class
// Create connection
//10.10.90.3:3306/journaldev", properties));
// Create request dispatcher
// Include
// Set render parameter
// Set render parameter
// Create employee
// Fill in required data from the request sent
// Asking employeeDAO creating the employee against registered database
// Print out the created employee information
// Log the exception
// Throw another exception for notifying the Portlet
// Register Employee
// Reset employee
// Get connection instance
// Create Prepared Statement
// Set variables
// Execute
// Return employee instance
// Close statement
// Close connection
// Throw another exception for notifying the Servlet
// Synchronized against connectionUtility instance
// Check whether the connectionUtility is null or not
// Create a properties instance
// Load properties from classpath
// Set connection with connectionUtility
// Load driver class
// Create connection
//localhost:3306/journaldev", properties));
// Create a properties instance
// Load properties from classpath
// Load driver class
// Create connection
//localhost:3306/journaldev", properties));
// Register Employee
// Get connection instance
// Create Prepared Statement
// Set variables
// Execute
// Return employee instance
// Close statement
// Close connection
// Throw another exception for notifying the Servlet
// Synchronized against connectionUtility instance
// Check whether the connectionUtility is null or not
// Create a properties instance
// Load properties from classpath
// Set connection with connectionUtility
// Load driver class
// Create connection
//localhost:3306/journaldev", properties));
// Create a properties instance
// Load properties from classpath
// Load driver class
// Create connection
//localhost:3306/journaldev", properties));
// Get connection instance
// Create Prepared Statement
// Set variables
// Execute
// Return employee instance
// Close statement
// Close connection
// Throw another exception for notifying the Servlet
// Synchronized against connectionUtility instance
// Check whether the connectionUtility is null or not
// Create a properties instance
// Load properties from classpath
// Set connection with connectionUtility
// Load driver class
// Create connection
//localhost:3306/journaldev", properties));
// Create a properties instance
// Load properties from classpath
// Load driver class
// Create connection
//localhost:3306/journaldev", properties));
// Create a dispatcher
// Create a dispatcher
// Create a dispatcher
// Create a dispatcher
// Create request dispatcher
// Include
// Set render parameter
// Set render parameter
// Create employee
// Fill in required data from the request sent
// Asking employeeDAO creating the employee against registered database
// Print out the created employee information
// Log the exception
// Throw another exception for notifying the Portlet
// Check whether the name of the portlet is programmaticTitleChangePortlet
// If it's like that, just get the defined bundle
// Retrun the string that's corresponded for anyTitle property
// else return the default, either that's defined in the portlet.xml or that's defined in the bundle
// Handle default MIME type request
// Handle multipart request
// Create FileItemFactory
// Create PortletFileUpload instance
// Instead of parsing the request ourselves, let Apache PortletFileUpload do that
// Iterate over files
// Print out some of information
// Check if the loggedIn is null for initial state
// Get loggedIn value from the request parameter
// Fetch username and password from the request parameters of action
// Do some checking procedure
// Use render parameters to pass the result
// Use render parameters to pass the result
// Get all attributes' names that are defined along side of Application Scope
// Get the attribute's value
// Define attribute along side of Application Scope
/**
/**
/**
// Print out event information
// Throw NullPointerException
// Do any action that you would.
// Returns outcome
// Do any action that you would.
// Nothing
// Initialize the dashboard model
// Initialize the dashboard column #1
// Initialize the dashboard column #2
// Initialize the dashboard column #3
// Add widgets into column1
// Add widgets into column2
// Add widget into column3
// Add columns into your model
// Calling Business Service
// Add message
// Save employee
// Get uploaded file from the FileUploadEvent
// Print out the information of the file
// Add message
// Calling Business Service
// Add message
// Save employee
// Create a configuration instance
// Provide configuration file
// Build a SessionFactory
// Get current session, current session is already associated with Thread
// Begin transaction, if you would like save your instances, your calling of save must be associated with a transaction
// Create employee
// Save
// Commit, calling of commit will cause save an instance of employee
// Calling Business Service
// Add message
// Acquire session
// Save employee, saving behavior get done in a transactional manner
// Create submenus required
// Create menuitems required
// Create menuitems required
//www.journaldev.com");
// Associate menuitems with open submenu
// Associate menuitems with help submenu
// Associate open submenu with file submenu
// Associate submenus with the menubar
// Create menuitems required
//www.journaldev.com");
// Create submenu
// Create submenu
// Create menuitem
// Create menuitem
// Create menuitem
// Create menuitem
// Create menuitem
// Create menuitem
// Determine menuitem action
// Associate menuitem with submenu
// Associate submenu with menu
// NoOp
// Push some useful stuff to the request scope for use in the page
// At this point, the queue will not contain any ViewExpiredEvents. Therefore, let the parent handle them.
// Do some work
// Change the index that TabMenu refers as activated tab
// Create set of TagCloudItem (s)
//www.journaldev.com/dev/primefaces", 10);
//www.journaldev.com/dev/hibernate", 5);
// Add created TagCloudItems into your TagCloudModel
// TreeNode instance
// This is the root node, so it's data is root and its parent is null
// Create documents node
// Create document node
// Create images node
// Create image node
// Create videos node
// Create video node
// Populate Document Instances
// Create Documents TreeNode
// Create Document TreeNode
// Create Documents TreeNode
// Create Document TreeNode
// Fill in properties
// Initial value for valid boolean
// Do some computation
// Acquire Request Context instance
// Add isValid parameter
// If valid equal true, render accepted message
// Add message into your FacesContext
// Acquire RequestContext singleton and update desired components
// else If valid equal false, render refused message
// Add message into your FacesContext
// Acquire RequestContext singleton and update desired components
// Initial value for valid boolean
// Do some computation
// Hide all of dialogs
// If valid equal true, render accepted message
// Acquire RequestContext singleton and execute wanted JavaScript
// else If valid equal false, render refused message
// Acquire RequestContext singleton and execute wanted JavaScript
# creating Counter
# empty Counter
# Counter with initial values
# Iterable as argument for Counter
# List as argument to Counter
# Dictionary as argument to Counter
# Counter works with non-numbers too
# getting count
# getting count for non existing key, don't cause KeyError
# setting count
# setting count for non-existing key, adds to Counter
# Delete element from Counter
# specific Counter methods
# elements()
# doesn't return elements with count 0 or less
# most_common()
# Counter({'a': 3, 'b': 3})
# Counter({'a': 1, 'b': 1, 'c': 1})
# subtract
# Counter({'a': 2, 'b': 2, 'c': -1})
# update
# Counter({'a': 3, 'b': 3, 'c': 0})
# miscellaneous examples
# 6
# ['a', 'b', 'c']
# {'a', 'b', 'c'}
# {'a': 3, 'b': 3, 'c': 0}
# dict_items([('a', 3), ('b', 3), ('c', 0)])
# remove 0 or negative count elements
# Counter({'b': 3, 'a': 2})
# clear all elements
# Counter()
# arithmetic operations
# works with items having +ve count
# Counter({'a': 3, 'c': 1})
# keeps only +ve count elements
# Counter({'a': 1, 'b': 1})
# intersection min(c1[x], c2[x])
# Counter({'a': 1})
# union max(c1[x], c2[x])
# Counter({'a': 2, 'c': 2})
# creating a simple dict
# creating empty ordered dict
# creating ordered dict from dict
# adding elements to dict
# replacing a dict key value
# removing and adding a value
# moving apple to end and dog to start
# pop last item
# reversed iteration
# equality tests
# From python 3.6 onwards, order is retained for keyword arguments passed to the OrderedDict constructor
# Reference: https://www.python.org/dev/peps/pep-0468/
# Simple GET Call
# Print response byte array
#print(data.read())
# Making REST web service call
# Request with Header Data to send User-Agent header
#print(resp.read())
#Making POST request
#print response headers
# int
# long
# float
# complex
# another complex example
# numbers in different formats
# exponential
# binary
# octal
# hexadecimal
# type of args and kwargs
# using *args
# we can pass tuple values as *args
# using **kwargs
# we can pass dict too for **kwargs
# Usage of *args and **kwargs
# for quickly simulating a function response
# some complex logic
# with decorators
# import the module
# print the current month
# set first day of week as sunday
# re print the calender
# print if a year is leap year
# main program
# won't raise exception
# will raise exception
#change directory
#print current working directory
#create directory
#rename directory
#delete directory
#delete non-empty directory
# current environment variables
# check if an environment variable is already present?
# set an environment variable
# get the value of environment variable
# what if the environment variable is missing?
# print(os.environ['DATA'])  # raise KeyError(key) from None, KeyError: 'DATA'
# returns None
# os.environ['Data'] = 123  # TypeError: str expected, not int
# eval() simple example
# True
# 3
# eval() with user input
# globals and locals to restrict usage
# dictionary representing the current global symbol table.
# dictionary representing the current local symbol table.
# list of names in the current local scope
# prove that __builtins__ are included by default
# remove __builtins__ methods
# globals example
# init a string with the value of a number
# check the type of the variable
# use the float() function
# now check the type of the variable
# init an integer
# check the type of the variable
# use the float() function
# now check the type of the variable
# This loop is fetching word from the list
# This loop is fetching letter for the word
# This print is used to print a blank line
#sample syntax of python generator
#statements
#statements
#calling the generator
# initialize the list of string
# initialize the separator
# use python string joint to join the words of the string
# print the output result
# initial list
# print the list
# append some data
# print the updated list data
# declare another list
# print the new list
# append the previous list to this list
# print the updated list
# stripping brackets
# repr() function will be called on elements
# calling str function
#'.join(str(e) for e in l1))
#database connection
# Query for creating table
# python is strongly typed language
# def __ne__(self, other):
#     # return true if different types
#     if type(other) != type(self):
#         return True
#     if self.record != other.record:
#         return True
#     else:
#         return False
# creating a simple dict
# creating empty ordered dict
# creating ordered dict from dict
# adding elements to dict
# replacing a dict key value
# removing and adding a value
# moving apple to end and dog to start
# pop last item
# reversed iteration
# equality tests
# From python 3.6 onwards, order is retained for keyword arguments passed to the OrderedDict constructor
# Reference: https://www.python.org/dev/peps/pep-0468/
# If the file does not exist or we dont have,
# then it would throw an IOError
# Control jumps here if of the above statement throws IOError.
# Below statement logs <class 'OSError'>
# In any case, the code will continue
# after it logs the error.# self.gotmarks = self.name + ' obtained ' + self.marks + ' marks'
##################")
##################")
# iterable has all True
# iterable all elements are not True
# iterable is empty
# iterable elements are True string
# iterable all elements are true string with different case
# iterable all elements are not true string
# iterable all elements are empty string
# iterable objects example
#comment and check output
# comment and check output
# two types of and operator - Binary and Logical
# Logical AND operator example
# Binary AND Operator example
# iterable has at least one True
# iterable none of the elements are True
# iterable is empty
# iterable elements are True string (at least one)
# iterable any elements is true string with different case
# iterable any elements are not true string
# iterable all elements are empty string
# iterable objects example
# comment and check output
# comment and check output
# getting current time in different timezones
# converting one timezone to another
# date to timestamp
# converting date to formatted string
# date from timestamp
# parse string to date
# instantiating date from arguments
# datetime manipulations
# human readable formatting
# creating arrow instance from datetime
#numbers
# boolean
# strings
# list, tuple, dict
# custom objects
# 6
# 15
# 56
#b'))
# bin() with float
# x = 10.5
# print(bin(x))
# bin() with object
# Learn how to override bitwise operators for custom objects
# Boolean and None examples
# <class 'bool'>
# <class 'bool'>
# True
# False
# <class 'NoneType'>
# <class 'bool'>
# False
# string examples
# <class 'str'>
# <class 'bool'>
# True
# True because len() is used
# False, len() returns 0
# bool() with numbers
# True
# True
# True
# True
# False
# False
# False
# False
# False
# bool() with collections and sequences
# False
# False
# False
# bool() with custom object
# returns True for id > 0 else False
# returns 0 for id <= 0, else id
# breakpoint() is introduced in Python 3.7
# Execution Steps
# Default:
# $python3.7 python_breakpoint_examples.py
# Disable Breakpoint:
# $PYTHONBREAKPOINT=0 python3.7 python_breakpoint_examples.py
# Using Other Debugger (for example web-pdb):
# $PYTHONBREAKPOINT=web_pdb.set_trace python3.7 python_breakpoint_examples.py
# empty byte array
# string to bytearray
# encoding is mandatory, otherwise "TypeError: string argument without an encoding"
# mutable
# bytearray of given size, elements initialized to null
# bytearray from iterable
# empty byte array
# string to bytes
# encoding is mandatory, otherwise "TypeError: string argument without an encoding"
# Below code will throw error:
# TypeError: 'bytes' object does not support item assignment
# b[1] = 65  # immutable
# bytes of given size, elements initialized to null
# bytes from iterable
# creating object
# printing object
# object called as a function, no arguments
# only args
# only args of different types
# args and kwargs both
# while True:
#
#     try:
#         y = square(input('Please enter a number\n'))
#         print(y)
#     except ValueError as ve:
#         print(type(ve), '::', ve)
#     except TypeError as te:
#         print(type(te), '::', te)
# Learn how to override comparison operators for custom objects
# hexadecimal
# binary
# underscores in numeric literals, PEP 515, Python version 3.6+, https://www.python.org/dev/peps/pep-0515/
# c = complex("1 + 2j")  # ValueError: complex() arg is a malformed string
# c = complex("1+j", 2)  # TypeError: complex() can't take second arg if first is a string
# c = complex(2, "-2j")  # TypeError: complex() second arg can't be a string
# creating complex numbers
# complex number attributes and functions
# complex numbers normal manipulations
# TypeError: '<' not supported between instances of 'complex' and 'complex'
# print('Comparison =', c < c1)
# cmath module
# phase
# we can get phase using math.atan2() function too
# polar and rectangular coordinates
# cmath constants
# power and log functions
# trigonometric functions
# hyperbolic functions
# classification functions
# True
# False
# False
# True
# False
# False
# False
# True
# True
# False
# Current date time in local system
# only current date
# only current time in local system
# current date time in specific timezone using pytz module
# print(pytz.all_timezones)
# pendulum module to get current date and time in specific timezones
# print(pendulum.timezones)
# today's date
# date from timestamp
# date from ordinal
# date from ISO string format, added in Python 3.7
# date class attributes
# instance attributes, read only
# date operations with timedelta
# instance methods
# date to string formatting
# string to date instance
# class variables
# instance variable
# del e.id
# del e.name
# set to None vs del/delattr
# del e.role
# print(e.role)  # AttributeError: 'Employee' object has no attribute 'role'
# delattr(e, 'role')
# print(e.role)  # AttributeError: 'Employee' object has no attribute 'role'
# deleting an already deleted attribute
# del e.id # AttributeError: id
# delattr(e, 'name')  # AttributeError: name
# deleting non existing attribute
# del e.x  # AttributeError: x
# delattr(e, 'x')  # AttributeError: x
# delattr() benefit with dynamic attribute deletion
# init empty dictionary
# init dictionary with some key-value pair
# key    : value,
# print initial dictionaries
# insert value
# print updated dictionaries
# update values
# print updated dictionaries
# printing a single element
# add to dictionary
# existing key, so overwrite
# new key, so add
# simple example, returns (a // b, a % b) for integers
# floats, returns usually (math.floor(a / b), a % b)
# complex numbers, TypeError: can't take floor or mod of complex number.
# dm = divmod(3 + 2J, 3)
# filter() example without function
# integers
# float
# frozenset from iterable
# frozenset iteration
# frozenset functions
# since frozen set is immutable, add(), remove(), update(), pop() etc. functions are not defined
# python frozenset to list, tuple
# calling fx() to set the variables
# integers
# tuples
# strings
# dict
# custom object
# int from numbers
# int from float
# int from string
# int from bytes and bytearray
# int from object
# class info as tuple
# some more examples
# 1st level inheritance
# multilevel inheritance
# same class
# no inheritance
# class info as tuple
#prints 'Hello World'
# len with sequence
# string
# tuple
# list
# bytes
# range
# len with collections
# dict
# set
# frozenset
# locals() and globals() are same in the module script
# locals() inside function
# locals() inside class
# Logical and operator
# same
# In Python, every variable/object has a boolean value
# If first expression is False, then next one is not evaluated
# Logical OR operator
# The expressions are evaluated until it's required
# The expressions are evaluated until it's required
# Logical not operator
# combination of multiple operators
# evaluated from left to right, confirmed from the __bool__() print statement
# function to be used with map()
# utility function for pretty print iterator elements
# for new line
# map() with string
# map() with tuple
# map() with list
# converting map object to list, set etc.
# using lambda function with map
# map() with multiple iterable arguments
# map() with multiple iterable arguments of different sizes
# map() with function None
# map_iterator = map(None, 'abc')
# print(map_iterator)
# for x in map_iterator:
#     print(x)
# max of string
# max with tuple
# max of list
# max() with objects and key argument
# max() with empty iterable and default value
# max() with arguments
# max() with arguments and key function
# max() with multiple iterables
# max() with multiple iterables objects
# min of string
# min with tuple
# min of list
# min() with objects and key argument
# min() with empty iterable and default value
# min() with arguments
# min() with arguments and key function
# min() with multiple iterables
# min() with multiple iterables objects
# obj.i = 10  # AttributeError: 'object' object has no attribute 'i'
# setattr(obj, 'name', 'pankaj')  # AttributeError: 'object' object has no attribute 'name'
# drop in replacement for datetime
# converting to another timezone
# date time manipulations
# support for common datetime formats
# supports strftime() too
# parse string to date time
# parsing using specified format string
# drop in replacement for timedelta
# period of time
# period is iterable with days
# pow() with integers
# pow() with floats
# pow() with different formats
# 0b11 = 3
# 0o11 = 9
# 0xF = 15
# pow() with complex numbers
# print(pow(2 + 3j, 2, 3))  # ValueError: complex modulo
# print(pow(100.0, 2, 3))  # TypeError: pow() 3rd argument not allowed unless all arguments are integers
# print(pow(100, -1, 2))  # ValueError: pow() 2nd argument cannot be negative when 3rd argument specified
# for non-deletable attribute
# name = property(get_name, set_name, None)
# for read-only attribute
# name = property(get_name, None)
# Using @property decorator to achieve same results
# function with return statement
# function with return having expression
# return boolean
# return string
# return tuple
# return function, Currying https://en.wikipedia.org/wiki/Currying
# return outer function
# return multiple values
# showing the values
# reversed string
# reversed list
# reversed tuple
# reversed bytes
# reversed bytearray
# object with __reversed__ method
# object supporting sequence protocol i.e.
# implementing __len__() and __getitem__ method
# Floating Point Arithmetic: Issues and Limitations
# Refer https://docs.python.org/3.7/tutorial/floatingpoint.html
# if both side of rounding is same, even is returned
# OR
# round() with negative ndigit
#name made in constructor
# setattr with dynamic programming
# for read-only attribute
# below will throw exception "AttributeError: can't set attribute"
# setattr(p, 'name', 'Pankaj')
# indexes 1,3,5,7,9
# indexes 0,1,2,3,4
# slice string
# indexes 1,3,5,7,9
# slice with negative indexes
# indexes -1, -2
# python slice list/array
# indexes 0, 1, 2
# python slice tuple
# slice using extended indexing syntax
# 1,2
# 1,2
# 2 to length of sequence
# 0,2,4
# copy of sequence
# reverse iteration, end to start
# sorted() with string
# sorted() in reverse order
# sorted() with tuple
# sorted list
# sorted with list of different types
# s = sorted(['a', 1, 'x', -3])  # TypeError: '<' not supported between instances of 'int' and 'str'
# sorted with custom object
# list of employees
# sort list of employees based on id
# sort list of employees based on age
# below will print empty string because datetime object has no timezone information
# datetime with timezone
# time module
# sum of integers
# sum of integers in different formats
# sum of numbers with start
# sum of floats
# sum of complex numbers
# sum of numbers of different types
# sum of bytes and bytearray of numbers
# future dates
# past dates
# with date and time objects
# TypeError: unsupported operand type(s) for +: 'datetime.time' and 'datetime.timedelta'
# tm_after_30_mins = tm + timedelta(minutes=30)
# print('Time after 30 minutes:', tm_after_30_mins)
# timedelta attributes
# other supported operations
# class variables
# instance variable
# vars of object
# update __dict__ and then call vars()
# vars of class
# vars of module
# vars without argument
# prints all supported timezone list by pytz
# getting utc timezone
# getting timezone by name
# getting datetime of specified timezone
# using localize() function, my system is on IST timezone
# converting IST to UTC
# using list reverse() function to reverse the list
# using slicing to reverse and create a new list
# Object Oriented approach - using reversed()
# must return String if repr() function is used, otherwise any valid python expression
# can be returned, such as dict, tuple etc.
#return {'name':self.name, 'age':self.age}
# must return string object
# __str__() example
# __repr__() example
# initializing the variables
# defining constructor
# defining class methods
# definition of subclass starts here
# returns the value of student id
# end of subclass definition
# Create an object of the superclass
# call member methods of the objects
# Create an object of the subclass
# import the module
# get the current clock ticks from the time() function
# print the currentTime variable to know about it
# use current time to show current time in formatted string
# declare a integer type variable
# declare a string type variable
# declare a tuple type variable
# it will show the ClassTest as a 'type'
# it will show the ClassTest as a 'class'
# it will print the type of var_int as 'int'
# it will print the type of var_str as 'str'
# it will print the type of var_tup as 'tuple'
# zip the values
# compile() with string source
# reading code from a file
# eval example
# byte string example
# AST object example
# open file in text and read only mode
# open file in binary and read only mode
# open file in binary mode, read only with buffering
# open file in binary mode and no buffering
# open text file in append mode and line buffering
# open text file in write mode with truncate
# open text file in exclusive creation mode
# python import module example
# python import as
# python import from another directory
# Refer: https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly
# Refer: https://stackoverflow.com/questions/4383571/importing-files-from-different-folder
#python import class from another file
# python import class from another file
#  OR
# two sets intersection
# multiple sets intersection
# intersection() without arguments
# check if shallow copy or deep copy
# list to set
# frozenset to list
#  OR
# f_string is already evaluated and won't change now
# f-strings can run expressions, conversions etc.
# age = 40
# name = David
# f-strings supports raw-strings too
# f-string with objects
# calling function
# with whitespaces
# lambda with f-string
# miscellaneous examples
# string in list
# string not in list
# using count() function
# finding all indexes of string in the list
# not str
# string
# without validation
# validating input is string
# print('Uppercase String =', s.upper())
# print('Input String in Uppercase =', s.upper())
# string to datetime object
# printed in default format
# string to date object
# printed in default formatting
# string to time object
# time module
# default formatting - "%a %b %d %H:%M:%S %Y"
# exception handling example
# str to datetime with locale
# de_DE locale
# raw string \ escapes quotes (',") but \ remains in the result
# raw string can't be single \ or end with odd numbers of \
# prefix can be 'R' or 'r'
# doesn't remove new lines
# remove new lines too
# using regular expressions
# \s matches all white spaces
# ^ matches start
# $ matches end
# | for OR condition
# use below for this case, above methods are created so that we can
# check performance using timeit module
# welcome in Chinese
# some comparison examples with special characters
# typed with Option+s in Mac OS
#')
# when string size is more than specified width, original string is returned
# s.center('#')  # TypeError: 'str' object cannot be interpreted as an integer
# s1 = s.center()  # TypeError: center() takes at least 1 argument (0 given)
# s.center(20, '#$')  # TypeError: The fill character must be exactly one character long
# concatenating multiple strings
# string concatenation from user input
# using join() method
# string concatenation with other objects
# using % operator
# using format() function
# using f-string, PEP 498 Literal String Interpolation
# print(s + y)  # this will throw error: TypeError: can only concatenate str (not "int") to str
# other ways to concatenate string and int
# using %
# using format()
# using f-strings, Python 3.6+ only
# without start and end
# True
# with start index
# True
# False
# with start and end index
# True
# True
# False
# suffix as tuple
# True
# True
# case sensitive equals check
# case insensitive equals check
# some examples with special characters
#ç∂'
#ç∂'
# same as above
# index can be in any order
# unpacking from sequences
# keyword arguments
# accessing object attributes
# string with specified character length and alignment
# formatting numbers
#x};  oct: {0:#o};  bin: {0:#b}".format(28))
# calling str and repr functions
# my_dict = {'name': 'Pankaj'}
# print(s.format_map(my_dict))  # KeyError: 'job_title'
# print(s.format(**my_dict))  # KeyError: 'job_title'
#Not Found#'
# KeyError: 'job_title' because new dict is created from mapping, so __missing__ is not called.
# print(s.format(**my_dict))
# finally exception will be raised because all the indexes are found
# U+0660, U+1D7DC
# U+0660=0, U+1D7DC=4
# identifier can't start with digits 0-9
# identifier can't be empty string
# PEP-3131 introduced Non-ASCII characters to identifier list
# 00bc: ¼ (VULGAR FRACTION ONE QUARTER)
#2488: ⒈ (DIGIT ONE FULL STOP), 2497: ⒗ (NUMBER SIXTEEN FULL STOP)
# special characters
# special characters
# concatenate strings using join on empty string
# special characters
# new line, tabs, whitespaces, escape characters
# raw string length
# str.__len__() function
# user input string length
# string module constants
# ' \t\n\r\x0b\x0c'
# rpartition
# partition() and rpartition() difference
# removing spaces from a string
# remove substring from string
# remove newline
# remove specific number of times
# simple string replace example
# replace character in string
# replace with specified count
# str.replace example
# string replace with user input example
# reverse using while loop, string is a sequence
# reverse using for loop
# appending chars in reverse order
# reverse using slicing
# using join with reversed iterator
# reverse using recursion
# using list reverse()
# rjust() examples
#')
# when string size is more than specified width, original string is returned
# ljust() examples
#')
# when string size is more than specified width, original string is returned
# some error scenarios
# s.ljust('#')  # TypeError: 'str' object cannot be interpreted as an integer
# s.rjust('#')  # TypeError: 'str' object cannot be interpreted as an integer
# s1 = s.ljust()  # TypeError: ljust() takes at least 1 argument (0 given)
# s1 = s.rjust()  # TypeError: rjust() takes at least 1 argument (0 given)
# s.ljust(20, '#$')  # TypeError: The fill character must be exactly one character long
# s.rjust(20, '#$')  # TypeError: The fill character must be exactly one character long# s[:i] + s[i:] == s
# reverse a string using slicing
# simple string split example
# maxsplit example
# sep is not provider or None
# multiline string split
# multi character separator
# using split() with str class
# csv and user input example
# rsplit() example
# using split() with str class
# csv and user input example
# \r\n is treated as a single line boundary
# split() vs splitlines()
# without start and end
# with start index
# with start and end index
# prefix as tuple
# create substring using slice
# list of substrings using split
# if present or not
# substring count
# substring index positions
# German lowercase letter 'ß' is equivalent to "ss"
# string to bytes using bytes()
# bytes to string using decode()
# string to bytes using encode()
# using f-string from Python 3.6+, change to format() for older versions
# 321 '
# translation = s.maketrans('AB', 'a')  # ValueError: the first two maketrans arguments must have equal length
# translation = s.maketrans('AB', 'ab', 'CD', 'c')  #TypeError: maketrans() takes at most 3 arguments (4 given)
# providing dict as translation for characters
# dictionary as substitute argument
# TypeError: substitute() got multiple values for keyword argument 'name'
# s = t.substitute(**d, name='Timothy D. Cook')
# escaping $ sign
# complex example
# string with new line
# Creates a new Block and adds it to the chain
# Adds a new transaction to the list of transactions
# Hashes a Block
# Returns the last Block in the chain
# creating Counter
# empty Counter
# Counter with initial values
# Iterable as argument for Counter
# List as argument to Counter
# Dictionary as argument to Counter
# Counter works with non-numbers too
# getting count
# getting count for non existing key, don't cause KeyError
# setting count
# setting count for non-existing key, adds to Counter
# Delete element from Counter
# specific Counter methods
# elements()
# doesn't return elements with count 0 or less
# most_common()
# Counter({'a': 3, 'b': 3})
# Counter({'a': 1, 'b': 1, 'c': 1})
# subtract
# Counter({'a': 2, 'b': 2, 'c': -1})
# update
# Counter({'a': 3, 'b': 3, 'c': 0})
# miscellaneous examples
# 6
# ['a', 'b', 'c']
# {'a', 'b', 'c'}
# {'a': 3, 'b': 3, 'c': 0}
# dict_items([('a', 3), ('b', 3), ('c', 0)])
# remove 0 or negative count elements
# Counter({'b': 3, 'a': 2})
# clear all elements
# Counter()
# arithmetic operations
# works with items having +ve count
# Counter({'a': 3, 'c': 1})
# keeps only +ve count elements
# Counter({'a': 1, 'b': 1})
# intersection min(c1[x], c2[x])
# Counter({'a': 1})
# union max(c1[x], c2[x])
# Counter({'a': 2, 'c': 2})
## NOTE: Requires Python 3.7 or higher
# pythonic way
# converting to namedtuple
# Employee = namedtuple('Employee', 'name age role')
# Employee = namedtuple('Employee', 'name,age,role')
# accessing via index value
# accessing via name of the field
# namedtuple invalid keys and rename parameter
# rename=True will rename invalid names to index value with underscore prefix
# namedtuple module parameter - introduced in 3.6
# namedtuple additional methods
# _make(iterable)
# _asdict()
# _replace(**kwargs)
# namedtuple additional attributes
# _fields
# _fields_defaults - introduced in Python 3.7
# Python 3.7 removed verbose parameter and _source attribute
# Miscellaneous examples
# getattr
# Dict to Named Tuple
# Print a message or do something useful
# importing flask modules
# initializing a variable of Flask
# decorating index function with the app.route with url as /login
# initialize different data
# convert them to JSON data and then print it
# the json data will be indented
# initialize different JSON data
# convert them to Python Data
# imported for using queue.Empty exception
# creating processes
# completing process
# print the output
# confirms that the code is under main function
# instantiating without any argument
# instantiating process with arguments
# print(name)
# complete the processes
# instantiating a queue object
# Create a rank 1 array
# access the array using their index
# modify the array
# slicing can be used also
# print the whole list
# Create a rank 2 array using nested Python list
# access them using their index
# 1st slice for row, 2nd for column
# initialize a zero matrix
# Create an array of all ones
# Create a constant array
# Create a 3x3 identity matrix
# initialize two array
# Elementwise sum; both produce the array
# Elementwise difference; both produce the array
# Elementwise product; both produce the array
# Elementwise division; both produce the array
# Elementwise square root; produces the array
# Matrix Multiplication
# take user input to take the amount of data
# take input of the data
# open a file, where you ant to store the data
# dump information to that file
# close the file
# open a file, where you stored the pickled data
# dump information to that file
# close the file
# python deep copy
# importing the queue module
# taking an object of Queue()
# enqueueing some value in the object of Queue
# retrieving the values of the Queue
# importing only the Queue from the queue module
# taking an object of Queue()
# enqueueing some value in the object of Queue
# retrieving the values of the Queue
# after retrieving, check the size of the object
# resetting the seed to 10 i.e. first value
# define the handler  
# assign the handler to the signal SIGINT  
# wait for SIGINT  
# assign alarm_handler to SIGALARM  
# set alarm after 4 seconds  
# make sufficient delay for the alarm to happen 
# as both code is running on same pc
# socket server port number
# instantiate
# connect to the server
# take input
# send message
# receive response
# show in terminal
# again take input
# close the connection
# get the hostname
# initiate port no above 1024
# get instance
# look closely. The bind() function takes tuple as argument
# bind host address and port together
# configure how many client the server can listen simultaneously
# accept new connection
# receive data stream. it won't accept data packet greater than 1024 bytes
# if data is not received break
# send data to the client
# close the connection
# returns the exit code in unix
# declare variables
# create expressions
# create a callable object from expression
# call the function and print results
# This is the class we want to test. So, we need to import it
# instantiate the Person Class
# variable that stores obtained user_id
# variable that stores person name
# test case function to check the Person.set_name function
# initialize a name
# store the name into the list variable
# get the user id obtained from the function
# check if the obtained user id is null or not
# null user id will fail the test
# store the user id to the list
# test case function to check the Person.get_name function
# total number of stored user information
# if i not exceed total length then verify the returned name
# if the two name not matches it will fail the test case
# if length exceeds then check the 'no such user' type message
# begin the unittest.main()
# Simple GET Call
# Print response byte array
#print(data.read())
# Making REST web service call
# Request with Header Data to send User-Agent header
#print(resp.read())
#Making POST request
#print response headers
//localhost:7000/employees";
// tests
// tests
// check if id=3 is deleted
//localhost:8080/My-Jersey-Project/rest/emp/getEmp");
// tests
//localhost:8080/My-Jersey-Project/rest/emp/getEmp");
// tests
//specify the location of GeckoDriver for Firefox browser automation
//journaldev.com");
//print actual path of servlet
//print server info
//print client ip address
// max 10 seconds
// wait for given time before finishing
// we can do resource cleanup activity here
//we can return error response to client
//we can log the event here
//we can send appropriate response to client
// create the thread pool
// max 10 seconds
//complete the processing
// wait for given time before finishing
//localhost:8080/AsyncServletExample/AsyncLongRunningServlet?time=8000";
// hit server hard with lot of requests
//localhost:8080/AsyncServletExample/LongRunningServlet?time=8000";
// hit server hard with lot of requests
/**
/**
// TODO Auto-generated constructor stub
/**
/**
// TODO Auto-generated method stub
/**
/**
// TODO Auto-generated constructor stub
/**
/**
// TODO Auto-generated method stub
/**
// get request parameters for userID and password
// get reCAPTCHA request param
// get servlet config init params
// logging example
//www.google.com/recaptcha/api/siteverify";
// add reuqest header
// Send post request
// print result
//parse JSON response and return 'success' value
//lets print some DB information
// database URL
//localhost/TestDB";
// set the url, username and password for the database
// stop page from loading further by throwing SkipPageException
//Setting some attributes
//www.journaldev.com");
/**
//we can create DB connection resource here and set it to Servlet context
//localhost/mysql_db") &&
//get request parameters for userID and password
//get servlet config init params
//logging example
//delete cookie
//Set cookies for counter, accessible to only this servlet
//add some description to be viewed in browser cookie viewer
//setting max age to be 1 day
//set path to make it accessible to only this servlet
//adding cookie to the response
//set a domain specific cookie
/**
// get request parameters for userID and password
//setting cookie to expiry in 30 mins
/**
//invalidate the session if exists
//forward to login page to login
// Analyze the servlet exception
// Set response content type
// pass the request along the filter chain
//close any resources here
//initialize DB Connection
//initialize log4j
// Analyze the servlet exception
// Set response content type
//do cleanup if needed
// 10 MB 
// 50 MB
// 100 MB
/**
// gets absolute path of the web application
// constructs path of the directory to save uploaded file
// creates the save directory if it does not exists
//Get all the parts from request and write it to the file on server
/**
// pass the request along the filter chain
//close any resources here
/**
// pass the request along the filter chain
//we can close resources here
/**
// get request parameters for userID and password
//setting session to expiry in 30 mins
/**
//invalidate the session if exists
/**
// get request parameters for userID and password
//setting session to expiry in 30 mins
/**
//invalidate the session if exists
//create db connection now
//close DB connection here
//create database connection from init parameters and set it to context
/**
// get request parameters for userID and password
//setting session to expiry in 30 mins
/**
//invalidate the session if exists
//no encoding because we have invalidated the session
/**
//now we can use th in switch statements
/**
//Enum constructors should always be private.
//Enum can have methods
//Enum can override functions
// Getting Bean by Class
//	@RequestMapping(value="/person/update", method=RequestMethod.POST)
//	public Person updatePerson(@RequestParam(name="name", required=true) String name) {
//		person.setName(name);
//		return person;
//	}
//Returning is List is supported with JSON response only
//If you want XML, then add a wrapper class as Root XML element, for example EmployeeList
//creating initial data
//@Service
//field-based dependency injection
//@Autowired
//	constructor-based dependency injection	
//	@Autowired
//	public MyApplication(MessageService svc){
//		this.service=svc;
//	}
//some magic like validation, logging etc
//constructor-based dependency injection
//	public MyXMLApplication(MessageService svc) {
//		this.service = svc;
//	}
//setter-based dependency injection
// some magic like validation, logging etc
//close the context
// close the context
//@PropertySources({
//@PropertySource("classpath:db.properties"),
//@PropertySource(value = "classpath:root.properties", ignoreResourceNotFound=true)})
//@PropertySource("file:${HOME}/db.properties")
//DBConnection dbConnection = new DBConnection(env.getProperty("DB_DRIVER_CLASS"), env.getProperty("DB_URL"), env.getProperty("DB_USERNAME"), env.getProperty("DB_PASSWORD").toCharArray());
// close the spring context
// store
// retrieve
// search
// delete
// close the spring context
//Returning is List is supported with JSON response only
//If you want XML, then add a wrapper class as Root XML element, for example EmployeeList
//creating initial data
//MathService ms = context.getBean(MathService.class);
//close the spring context
// @Value("#{systemProperties['java.home']}")
// Never do below in production environment :D
// close the spring context
//Advice arguments, will be applied to bean methods with single String argument
//Pointcut to execute on all the methods of classes in a package
//printing hashcode to confirm all the objects are of different type
//Testing @Autowired annotations
//Autowired annotation on Constructor is equivalent to autowire="constructor"
//Autowired annotation on variable/setters is equivalent to autowire="byType"
// constructor is used for autowiring by constructor
// default constructor to avoid BeanInstantiationException for autowiring
// byName or byType
// used for autowire byName and byType
//EmployeeService service = ctx.getBean("employeeService", EmployeeService.class);
/**
/**
//JDBC Code - Start
//deliberately throwing different types of exception
//	@ExceptionHandler(EmployeeNotFoundException.class)
//	public @ResponseBody ExceptionJSONInfo handleEmployeeNotFoundException(HttpServletRequest request, Exception ex){
//		
//		ExceptionJSONInfo response = new ExceptionJSONInfo();
//		response.setUrl(request.getRequestURL().toString());
//		response.setMessage(ex.getMessage());
//		
//		return response;
//	}
//returning 404 error code
//404
/**
/**
// Creating the directory to store file
// Create the file on server
/**
// Creating the directory to store file
// Create the file on server
// ModelAttribute value should be same as used in the empSave.jsp
//which objects can be validated by this validator
//validate phone numbers of format "1234567890"
//validating phone number with -, . or spaces
//validating phone number with extension length from 3 to 5
//validating phone number where area code is in braces ()
//return false if nothing matches the input
/**
/**
/**
/**
//adding some time lag to check interceptor execution
//CRUD operations
//Create
//Read
//Update
//Delete
//Get All
//using RowMapper anonymous class, we can create a separate RowMapper for reuse
//Get the Spring Context
//Get the EmployeeDAO Bean
//EmployeeDAO employeeDAO = ctx.getBean("employeeDAO", EmployeeDAO.class);
//To use JdbcTemplate
//Run some tests for JDBC CRUD operations
//Create
//Read
//Update
//Get All
//Delete
//Close Spring Context
// setting value more than 20 chars, so that SQLException occurs
/**
/**
//For add and update person both
//new person, add it
//existing person, call update
/**
//creating dummy user details, should do JDBC operations
/**
/**
//Map to store employees, ideally we should use database
//localhost:9090/SpringRestExample";
//we can't get List<Employee> because JSON convertor doesn't know the type of
//object in the list and hence convert it to default JSON object type LinkedHashMap
//creating dummy user details, should do JDBC operations
// in-memory authentication
// auth.inMemoryAuthentication().withUser("pankaj").password("pankaj123").roles("USER");
// using custom UserDetailsService DAO
// auth.userDetailsService(new AppUserDetailsServiceDAO());
// using JDBC
// Spring Security should completely ignore URLs starting with /resources/
/*.html");
//localhost:8080");
// GET method and URI
//setting ACCEPT-Content
//gives access to response
//checking if response is OK
// checking for response type and message
// java bean properties
//Java Bean to hold the form parameters
/**
/**
//Java Bean to hold the form parameters
//not included in sublist
//included in sublist
// add a cookie to response
// add session attribute
//OR
// add context attribute
// variables for *Aware interfaces
// java bean properties to hold request attributes
//process task for given time
/**
//release resources here
// create resources here
//roles array needs to initialize because it's used with index in form
//do not preinitialize lists or any collections
//custom type converter example
/**
//setting update time in action class
//java bean variables
//Java Bean to hold the form parameters
// indices don't cause exceptions
// ints[0] = 0;ints[1] = 1;ints[2] = 2;
//NOTE: We can just specify dependsOnMethods= "update" and get same result
