                    GNU GENERAL PUBLIC LICENSE
                       Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Lesser General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.

                    GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change.

    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.

    c) If the modified program normally reads commands interactively
    when run, you must cause it, when started running for such
    interactive use in the most ordinary way, to print or display an
    announcement including an appropriate copyright notice and a
    notice that there is no warranty (or else, saying that you provide
    a warranty) and that users may redistribute the program under
    these conditions, and telling the user how to view a copy of this
    License.  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

    a) Accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of Sections
    1 and 2 above on a medium customarily used for software interchange; or,

    b) Accompany it with a written offer, valid for at least three
    years, to give any third party, for a charge no more than your
    cost of physically performing source distribution, a complete
    machine-readable copy of the corresponding source code, to be
    distributed under the terms of Sections 1 and 2 above on a medium
    customarily used for software interchange; or,

    c) Accompany it with the information you received as to the offer
    to distribute corresponding source code.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above.)

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

                            NO WARRANTY

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

    Gnomovision version 69, Copyright (C) year name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
  `Gnomovision' (which makes passes at compilers) written by James Hacker.

  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.
# TEAMMATES Developer Web Site

[![Travis Build Status](https://travis-ci.org/TEAMMATES/teammates.svg?branch=master)](https://travis-ci.org/TEAMMATES/teammates)
[![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/dvr6t33lqg6hsmxw/branch/master?svg=true)](https://ci.appveyor.com/project/damithc/teammates/branch/master)
[![Codecov Coverage Status](https://codecov.io/gh/TEAMMATES/teammates/branch/master/graph/badge.svg)](https://codecov.io/gh/TEAMMATES/teammates)
[![License](https://img.shields.io/badge/license-GPLv2-blue.svg)](LICENSE)

TEAMMATES is a free online tool for managing peer evaluations and other feedback paths of your students.
It is provided as a cloud-based service for educators/students and is currently used by hundreds of universities across the world.

<img src="src/web/assets/images/overview.png" width="600">

This is the developer web site for TEAMMATES. **Click [here](http://teammatesv4.appspot.com/) to go to the TEAMMATES product website.**

[**Documentation for Developers** :book:](docs/README.md) |
[Version History](https://github.com/TEAMMATES/teammates/milestones?direction=desc&sort=due_date&state=closed) |
[Project Stats](https://www.openhub.net/p/teammatesonline)

## Interested to join TEAMMATES developer team?

We welcome contributions from developers, especially students. Here are some resources:
* [**Contributor Orientation Guide**](docs/CONTRIBUTING.md): This document describes what you need to know/do to become a contributor.
* [**Project ideas page**](https://github.com/TEAMMATES/teammates/wiki): These are for those who would like to do a relatively bigger projects with TEAMMATES (e.g. summer internships).

## Acknowledgements

TEAMMATES team wishes to thank the following invaluable contributions:
* [**School of Computing, National University of Singapore (NUS)**](http://www.comp.nus.edu.sg), for providing us with the infrastructure support to run the project.
* [**Centre for Development of Teaching and Learning (CDTL)**](http://www.cdtl.nus.edu.sg/) of NUS, for supporting us with several *Teaching Enhancement Grants* over the years.
* **Learning Innovation Fund-Technology (LIF-T)** initiative of NUS, for funding us for the 2015-2018 period.
* **Google Summer of Code** Program, for including TEAMMATES as a mentor organization in *GSoC2014*, *GSoC2015*, *GSoC2016*, *GSoC2017* and *GSoC2018* editions.
* **Facebook Open Academy** Program, for including TEAMMATES as a mentor organization in FBOA 2016.
* **Jet Brains**, for the [Intellij IDEA](https://www.jetbrains.com/idea/) licences
* <img src="src/web/assets/images/yklogo.png" width="100"> [**YourKit LLC**](https://www.yourkit.com), for providing us with free licenses for the [YourKit Java Profiler](https://www.yourkit.com/java/profiler) (an industry leading profiler tool for Java applications).
* <img src="src/web/assets/images/saucelabs.png" width="100"> [**SauceLabs**](https://saucelabs.com), for providing us with a free [Open Sauce account](https://saucelabs.com/open-source) for cross-browser testing.

## Contacting us

The best way to contact us is to [post a message in our issue tracker](https://github.com/TEAMMATES/teammates/issues/new). Our issue tracker doubles as a discussion forum. You can use it for things like asking questions about the project or requesting technical help.

Alternatively (less preferred), you can email us at **teammates@comp.nus.edu.sg**.
# Contributor Covenant Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to making participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, gender identity and expression, level of experience,
nationality, personal appearance, race, religion, or sexual identity and
orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment
include:

* Using welcoming and inclusive language
* Being respectful of differing viewpoints and experiences
* Gracefully accepting constructive criticism
* Focusing on what is best for the community
* Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

* The use of sexualized language or imagery and unwelcome sexual attention or
  advances
* Trolling, insulting/derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or electronic
  address, without explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.

## Scope

This Code of Conduct applies both within project spaces and in public spaces
when an individual is representing the project or its community. Examples of
representing a project or community include using an official project e-mail
address, posting via an official social media account, or acting as an appointed
representative at an online or offline event. Representation of a project may be
further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported by contacting the project team at teammates@comp.nus.edu.sg. All
complaints will be reviewed and investigated and will result in a response that
is deemed necessary and appropriate to the circumstances. The project team is
obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good
faith may face temporary or permanent repercussions as determined by other
members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,
available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html

[homepage]: https://www.contributor-covenant.org
Before opening a new issue, please check that no existing issue covers the same topic.

Go to the "Preview" tab and click on the relevant issue type to be redirected to the appropriate template.

- [Bug reports](?template=bug-report.md)
- [Feature/enhancement requests, enhancement to build process](?template=feature-request.md)
- [Help requests](?template=help-request.md)
- [Data migration](?template=data-migration.md)

For other tasks (e.g. refactoring, adding tests, fixing typo), there is no template to follow. Simply provide a clear issue title and description of the work to be done.

If you are reporting a security vulnerability, due to the sensitive nature of such a report, you are kindly requested to refrain from opening a new issue.
Instead, submit your report by emailing the team at teammates@comp.nus.edu.sg.
Fixes #

**PR Checklist**

<!-- Remove this portion after you have made the checks. -->

Ensure that you have:
- [ ] Read and understood our PR guideline: https://github.com/TEAMMATES/teammates/blob/master/docs/process.md#step-4-submit-a-pr
  - [ ] Added the issue number to the "Fixes" keyword above
  - [ ] Titled the PR as specified in the abovementioned document
- [ ] Made your changes on a branch other than `master` and `release`
- [ ] Gone through all the changes in this PR and ensured that:
  - [ ] They addressed one (and only one) issue
  - [ ] No unintended changes were made
- [ ] Run and passed static analysis: `./gradlew lint` and `npm run lint`
- [ ] Added/updated tests, if changes in functionality were involved
- [ ] Added/updated documentation to public APIs (classes, methods, variables), if applicable

**Outline of Solution**

<!-- Tell us how you solved the issue. -->
<!-- If there are things you want the reviewers to focus on, include them here as well. -->
<!-- This portion can be skipped if the fix is trivial. -->
# TEAMMATES Support

If you are looking for support for TEAMMATES, check out:

* User Documentation
  * [For students](http://teammatesv4.appspot.com/studentHelp.jsp)
  * [For instructors](http://teammatesv4.appspot.com/instructorHelp.jsp)
* [Developer Documentation](../docs/README.md)
* [FAQs by external contributors](https://github.com/TEAMMATES/teammates/issues?utf8=✓&q=is:issue+label:a-DevHelp). Note that many of the questions asked and/or answers provided may have been outdated now.

If you want to reach out to the project team, the best way is to [post a message in our issue tracker](https://github.com/TEAMMATES/teammates/issues/new). Our issue tracker doubles as a discussion forum.
You can use it for things like asking questions about the project, the workflow, or requesting technical help.

Alternatively (less preferred), you can email us at **teammates@comp.nus.edu.sg**.
---
name: Bug report
about: Report a bug or defect in the application

---

<!-- Issue title: [brief description of bug] -->

- **Environment**: <!-- The environment in which you encountered the bug, e.g. live server at `V6.0.0`, `master` branch at commit 1234567. -->

**Steps to reproduce**



**Expected behaviour**



**Actual behaviour**



**Additional info**
<!-- You can enter any additional relevant info here. -->
<!-- If you know what caused the bug and/or how to resolve the bug, you can include them in this section. -->
---
name: Data migration
about: (for core team) Track the status of a data migration

---

<!-- Issue title: Data Migration: [summary of affected entities and fields] -->

Data migration initiated by PR #<!-- Fill up PR number -->.

- [x] Merged code that work for both the old and new versions of the data schema.
- [ ] Released a version containing the above in V<!-- Fill up version -->.
- [ ] Created a client script to migrate all data following the old schema to the new schema in PR #<!-- Fill up PR number -->.
- [ ] Ran the script against the live site.
- [ ] Removed the code that is specifically tailored for the old data schema in PR #<!-- Fill up PR number -->.
---
name: Feature request
about: Request a new or a change to existing user-facing feature

---

<!-- Issue title: [brief description of feature/enhancement] -->

- **Environment**: <!-- The environment in which the said feature/enhancement is absent, e.g. live server at `V6.0.0`, `master` branch at commit 1234567. -->

**Description of feature/enhancement**



**Justification**
<!-- Explain who will benefit (instructors, students, developers, etc.) and in what way. -->



**Existing similar features and their shortcomings**
<!-- Explain why existing similar features fall short of your expectation. -->
<!-- This section can be skipped if there are no existing similar features. -->
---
name: Help request
about: Request for technical help in development

---

<!-- Issue title: Help Request: [summary of your problem] -->

- **Commit SHA:** <!-- Result of running the command `git rev-parse HEAD` -->
- **Operating System:**
- **JDK Version:**
- **Node.js Version:**
- **Google Cloud SDK Version:**
- **IntelliJ Version (if applicable):**
- **Firefox / Chrome Version (if applicable):**

**What I was trying to do / What I need help with**
<!-- e.g. if you were setting up the project, tell us the step in the setting up guide at which you are stuck. -->
<!-- e.g. if you were resolving test failures, tell us which tests are failing. -->
<!-- Include information such as screenshots, error stack traces, or console messages to help us troubleshoot. -->



**Attempts to resolve the problem**
<!-- Tell us the steps you have taken to try to (unsuccessfully) resolve the problem and the outcomes. -->
---
name: Release
about: (for core team) Schedule and manage a release

---

<!-- Issue title: Release VX.Y.Z -->

Scheduled for <!-- insert date and time here, e.g. Thursday, Sep 20, 2018, 10.00am SGT -->.

Release Lead:

- [ ] Tagged the latest stable release code with the latest version number
- [ ] Released changelogs

PM:

- [ ] Deployed the new version
- [ ] Released the new version for end users
# Setting up CAPTCHA

TEAMMATES uses [reCAPTCHA](https://developers.google.com/recaptcha/) on the `Recover Session Links` page as a security check. It helps protect the website by blocking spam bots and abusive traffic, and only allows valid human users to pass through.
By default, the CAPTCHA widget is not shown on the page since no keys are specified in the config files.
 
However, this should be changed for production environments:

1. Register for CAPTCHA [here](https://www.google.com/recaptcha/admin). You may be prompted to sign in with your Google account.
1. Include `localhost` and/or `127.0.0.1` in the CAPTCHA domains setting if you are using this for development as well.
1. After obtaining the CAPTCHA keys:
    - Copy the site key to `captchaSiteKey` in the `config.ts` file.
    - Copy the secret key to `app.captcha.secretkey` in the `build.properties` file.
# Contributing to TEAMMATES

Thanks for taking your time to contribute to TEAMMATES!

We welcome contributions from anyone, in particular, students (see [here](https://teammatesv4.appspot.com/about.jsp) for the list of our contributors). One of the main objectives of TEAMMATES is to help students get experience in a OSS production environment. Here are some information that might be useful to would-be contributors.

* [Getting started](#getting-started)
  * [Know the product/project](#know-the-productproject)
  * [Code of Conduct](#code-of-conduct)
* [How can I contribute?](#how-can-i-contribute)
  * [Submitting an issue](#submitting-an-issue)
  * [Manual testing](#manual-testing)
  * [Submitting a pull request](#submitting-a-pull-request)
* [Contributor orientation guide](#contributor-orientation-guide)
  * [Knowledge required](#knowledge-required)
  * [Orientation task list](#orientation-task-list)
* [Other resources](#other-resources)

## Getting started

### Know the product/project

Understand what TEAMMATES is about, both as a product (users' point of view) and a project (developers' point of view).

* [Product intro page](https://teammatesv4.appspot.com) shown to potential users
* [Features overview](https://teammatesv4.appspot.com/features.jsp)
* [Project vision, challenges, and principles](overview.md)

### Code of Conduct

By participating in this project, you agree to uphold the [TEAMMATES Code of Conduct](../.github/CODE_OF_CONDUCT.md), which is adopted from [Contributor Covenant Code of Conduct](https://www.contributor-covenant.org/).

## How can I contribute?

### Submitting an issue

We use the [issue tracker](https://github.com/TEAMMATES/teammates/issues) to contain bug reports and feature/enhancement requests.
Before submitting a new issue, search the issue tracker to ensure that there is no similar open issue.

If you are certain that you are reporting a new issue, [open a new issue](https://github.com/TEAMMATES/teammates/issues/new) using the templates provided.

### Manual testing

We welcome anyone manually testing our product and reporting bugs or suggestions for enhancements in the issue tracker.

If you want to undertake such a role without actually contributing code, [get an instructor account from TEAMMATES](https://teammatesv4.appspot.com/request.jsp).
Remember to mention the purpose of your request under "Any other comments/queries". 

### Submitting a pull request

We accept patches/fixes in form of pull requests (PRs). Make sure that the pull request addresses an open issue in the issue tracker.
Remember to follow the [TEAMMATES Development Process](process.md).

By submitting a PR, you agree to allow the project team to license your work under the terms of the [GNU GPL v2 License](../LICENSE).

If this is your first time contributing to TEAMMATES, you may want to read up the contributor orientation guide lined out in the next section.

## Contributor orientation guide

Contributing to an OSS project requires you to figure out things on your own when you can, and seek help from the right resource (Google, StackOverflow, troubleshooting guides, issue tracker, etc.) when you cannot. To become a TEAMMATES contributor, you need to start honing those skills. To help you with that, we have created a sequence of tasks you can try to complete. Try to complete as many of them as you can, in the order they are listed.

Of course we are happy to guide you if you encounter any difficulties when doing these tasks; we have provided a [troubleshooting guide](troubleshooting-guide.md) for some commonly faced problems. Failing that, you may post a help request in our [issue tracker](https://github.com/TEAMMATES/teammates/issues).

> - The task descriptions are brief by intention. We want you to try to figure out how to do those things by yourself.
> - While the dev team members will be glad to answer your questions, you will not make a good impression if you ask questions which are already answered in the mentioned resources.

### Knowledge required

Although TEAMMATES uses many tools and technologies, you need not know all of them before you can contribute. The diagram below shows which technologies you need to learn to contribute in different roles.

![RolesAndTechnologies.png](images/RolesAndTechnologies.png)

Note that these roles are not fixed or formally assigned; it is simply for guidance only.

Roles:

* **Web page developer**: Works on static web pages, such as those used in the TEAMMATES product web site.
* **Front-end developer**: Works on the front-end of the app, i.e. the dynamically-generated user interface.
* **Test developer**: Works on automating system tests.
* **Back-end developer**: Works on the back-end logic of the app, including data storage.
* **DevOps developer**: Works on automations (CI, static analysis, scripting) and operations (logging, monitoring, troubleshooting).

### Orientation task list

#### Phase A: Set up locally

1. [Set up TEAMMATES development environment on your computer.](setting-up.md)<br>
   **Important: Follow instructions to the letter. Install the specified versions of the tool stack, not the latest versions.**
1. Get *dev green* (more info in [_Development Guidelines_ document](development.md)).
   It is OK to proceed to the next phase if you have fewer than 5 failing test cases.

#### Phase B: Learn

In order to contribute effectively, you are advised to learn how to do the various development routines lined out in [the _Development Guidelines_ document](development.md).
Try your best to be familiar with at least building and testing the application in your local development environment.

#### Phase C: Start contributing

When you are ready for a real contribution, you are advised to start with an issue labelled [d.FirstTimers](https://github.com/TEAMMATES/teammates/issues?q=is:issue+is:open+label:d.FirstTimers) (but do not do more than one of those), then move on to other issues labelled [d.Contributors](https://github.com/TEAMMATES/teammates/issues?q=is:issue+is:open+label:d.Contributors).
Steps for fixing an issue are lined out in the [process document](process.md).

> In the event that you cannot find a `d.FirstTimers`-labelled issue, you can start with a `d.Contributors`-labelled issue.
> You can consult the `e.*` label, if it is present, to estimate the difficulty. Lower number generally means less amount of work required.

#### Important

Fixing an issue quickly is not the important thing. In fact, issues given to new contributors are the ones we already know how to fix.
We are more interested to see how you go about fixing the issue. We want to know whether you are systematic and detail-oriented.

Take your time to learn and follow the workflow to the letter. Do not skip any steps because you think that step is "not important". We are more impressed when you finish an issue in fewer attempts than when you finish it in a shorter time but take many attempts because you were not meticulous enough along the way.

## Other resources

* [Support request](../.github/SUPPORT.md)
* [Comprehensive directory of resources, including style guides](../docs/README.md)
# Design

- [Architecture](#architecture)
- [UI Component](#ui-component)
- [Logic Component](#logic-component)
- [Storage Component](#storage-component)
- [Common Component](#common-component)
- [Test Driver Component](#test-driver-component)
- [E2E Component](#e2e-component)
- [Client Component](#client-component)

## Architecture

![High Level Architecture](images/highlevelArchitecture.png)

TEAMMATES is a Web application that runs on Google App Engine (GAE). Given above is an overview of the main components.
- **UI (Browser)**: The UI seen by users consists of Web pages containing HTML, CSS (for styling) and JavaScript (for client-side interactions such as sorting, input validation, etc.). This UI is a single HTML page generated by Angular framework. The initial page request is sent to the server over HTTP, and requests for data are sent asynchronously with AJAX.
- **UI (Server)**: The entry point for the application back end logic is designed as a REST-ful controller.
- **Logic**: The main logic of the application is in POJOs (Plain Old Java Objects).
- **Storage**: The storage layer of the application uses the persistence framework provided by **GAE Datastore**, a NoSQL database.
- **Test Driver**: TEAMMATES makes heavy use of automated regression testing. Test data is transmitted using JSON format.
  - `TestNG` is used for Java testing (all levels) and `Jest` for JavaScript unit-testing.
  - `HttpUnit` is used to set up a simulated web server in servlet-level tests, where an actual web server is not required.
- **E2E**: The E2E (end-to-end) component is used to interact with the application as a whole with Web browsers. Its primary function is for E2E tests.
  - `Selenium (Java)` is used to automate E2E testing with actual Web browsers.
- **Client**: The Client component can connect to the back end directly without using a Web browser. It is used for administrative purposes, e.g. migrating data to a new schema.
- **Common**: The Common component contains utility code (data transfer objects, helper classes, etc.) used across the application.

The diagram below shows how the code in each component is organized into packages and the dependencies between them.

![Package Diagram](images/packageDiagram.png)

Notes:
- `[logic] - [ui::website] - [ui::controller]` represent an application of `Model-View-Controller` pattern.
  - `ui::website` is not a real package; it is a conceptual package representing the front-end of the application.

## UI Component

The diagram below shows the object structure of the UI component.

![UI Component](images/UiComponent.png)

Notes:
- `ui::website` is not a Java package. It is written in Angular framework and consists of HTML, SCSS, and TypeScript files. The framework will build those files into HTML, CSS and JavaScript files ready to be used by standard Web browsers.

The UI component is the first stop for 99% of all requests that are received by the application.
Such a request will go through the following steps:

1. Request received by the GAE server.
1. Custom filters are applied according to the order specified in `web.xml`, e.g. `OriginCheckFilter`.
1. Request forwarded to a `*Servlet` object as specified in `web.xml` for further processing, depending on the type of request.

There are two general types of requests: user-invoked requests and automated (GAE server-invoked) requests, which are processed differently.

### User-invoked requests

User-invoked requests are all requests made by the users of the application, typically from the Web browser (i.e. by navigating to a particular URL of the application).
The request will be processed as follows:

![UI Workflow](images/UiWorkflow.png)

The initial request for the web page will be processed as follows:

1. Request forwarded to `WebPageServlet`.
1. `WebPageServlet` returns the built single web page (`index.html`).
1. The browser will render the page and execute the page scripts, most of the time requiring AJAX requests to the server.

Subsequent AJAX requests sent to the server will be processed as follows:

1. Request forwarded to the `WebApiServlet`.
1. `WebApiServlet` uses the `ActionFactory` to generate the matching `Action` object, e.g. `InstructorHomePageAction`.
1. `WebApiServlet` executes the action.
   1. The `Action` object checks the access rights of the user. If the action is allowed, it will be performed, interacting with the `Logic` component as necessary.
   1. The `Action` packages and processes the result into an `ActionResult` object. The most common format is `JsonResult` (requests for obtaining data or processing existing data), and other formats are defined as necessary, e.g. `FileDownloadResult` (e.g. downloading feedback session report) and `ImageResult` (e.g. profile pictures).
1. `WebApiServlet` sends the result back to the browser which will then process it on the front-end.

Requests for static asset files (e.g. CSS, JS files, images) are served directly without going through `web.xml` configuration at all.

The Web API is protected by two layers of access control check:
- Origin check: This mitigates [CSRF attack](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)).
- Authentication and authorization check: This checks if the logged in user (or lack thereof) has sufficient privileges to trigger the API's actions.

Special keys (`csrf key` and `backdoor key`) can be used to bypass each of the checks, typically for testing purpose. Those keys are strings known only to the person who deployed the application (typically, the administrator).

### Automated requests

Automated requests are all requests sent automatically by the GAE server during specific periods of time.
This type of request will be processed as follows:

1. The source of the request will be checked for administrator privilege. If this privilege is absent (e.g. non-administrator users trying to invoke the automated actions), the request will be dropped and a `403 Forbidden` status will be returned.
   - Requests generated by the GAE server are equipped with this privilege.
   - Administrators can manually invoke these requests; this is particularly useful in testing the actions associated with those requests.
1. Request forwarded to the `AutomatedServlet`.
1. `AutomatedServlet` uses the `AutomatedActionFactory` to generate the matching `AutomatedAction` object, e.g. `CompileLogsAction`.
1. `AutomatedServlet` executes the action.
1. The corresponding `AutomatedAction` will be performed, interacting with the `Logic` component as necessary.

GAE server sends such automated requests through two different configurations:
- Cron jobs: These are jobs that are automatically scheduled for a specified period of time, e.g. scheduling feedback session opening reminders. It is configured in `cron.xml`.
- Task queue workers: These are hybrids of user-invoked and GAE-invoked in that they are queued by users (i.e. users request for the tasks to be added to queue), but executed by GAE (i.e. GAE determines when and which tasks in the queue are executed at any point of time). This is typically used for tasks that may take a long time to finish and can exceed the 1 minute standard request processing limit imposed by GAE. It is configured in `queue.xml` as well as the `TaskQueue` nested class of the [Const](../src/main/java/teammates/common/util/Const.java) class.

### Template Method pattern

- Since the high-level workflow of processing a request is same for any request (differing by the two request types only), we use the [Template Method pattern](http://en.wikipedia.org/wiki/Template_method_pattern) to abstract the process flow into the `Action` and `AutomatedAction` classes.

## Logic Component

The `Logic` component handles the business logic of TEAMMATES. In particular, it is responsible for:
- Managing relationships between entities, e.g. cascade logic for create/update/delete.
- Managing transactions, e.g. ensuring atomicity of a transaction.
- Sanitizing input values received from the UI component.
- Providing a mechanism for checking access control rights.
- Connecting to GAE-provided or third-party APIs, e.g. for adding tasks to the task queue and for sending emails with third-party providers.

![Logic Component](images/LogicComponent.png)

Package overview:
- **`logic.api`**: Provides the API of the component to be accessed by the UI.
- **`logic.core`**: Contains the core logic of the system.

### Logic API

Represented by these classes:
- `Logic`: A [Facade class](http://en.wikipedia.org/wiki/Facade_pattern) which connects to the several `*Logic` classes to handle the logic related to various types of data and to access data from the `Storage` component.
- `GateKeeper`: Checks access rights of a user for a given action.
- `EmailGenerator`: Generates emails to be sent.
- `EmailSender`: Sends email with the provider chosen based on the build configuration. It connects to the email provider by using the appropriate `*Service` class.
- `TaskQueuer`: Adds tasks to the task queue. It connects to GAE's task queue API.

### Policies

Access control:
+ Although this component provides methods to perform access control, the API itself is not access controlled. The UI is expected to check access control (using `GateKeeper` class) before calling a method in the `Logic`.

API for creating entities:
+ Null parameters: Causes an assertion failure.
+ Invalid parameters: Throws `InvalidParametersException`.
+ Entity already exists: Throws `EntityAlreadyExistsException` (escalated from Storage level).

API for retrieving entities:
+ Attempting to retrieve objects using `null` parameters: Causes an assertion failure.
+ Entity not found:
  - Returns `null` if the target entity not found. This way, read operations can be used easily for checking the existence of an entity.

API for updating entities:
+ Update is done using `*UpdateOptions` inside every `*Attributes`. The `UpdateOptions` will specify what is used to identify the entity to update and what will be updated.
+ Entity not found: Throws `EntityDoesNotExistException`.
+ Invalid parameters: Throws `InvalidParametersException`.

API for deleting entities:
+ FailDeleteSilentlyPolicy: In general, delete operation do not throw exceptions if the target entity does not exist. This is because if it does not exist, it is as good as deleted.
+ Cascade policy:   When a parent entity is deleted, entities that have referential integrity with the deleted entity should also be deleted.
  Refer to the API for the cascade logic.

## Storage Component

The `Storage` component performs CRUD (Create, Read, Update, Delete) operations on data entities individually.
It contains minimal logic beyond what is directly relevant to CRUD operations.
In particular, it is reponsible for:
- Validating data inside entities before creating/updating them, to ensure they are in a valid state.
- Hiding the complexities of datastore from the `Logic` component. All GQL queries are to be contained inside the `Storage` component.
- Hiding the persistable objects: Classes in the `storage::entity` package are not visible outside this component to hide information specific to data persistence.
  - Instead, a corresponding non-persistent [data transfer object](http://en.wikipedia.org/wiki/Data_transfer_object) named `*Attributes` (e.g., `CourseAttributes` is the data transfer object for `Course` entities) object is returned. These datatransfer classes are in `common::datatransfer` package, to be explained later.

The `Storage` component does not perform any cascade delete/create operations. Cascade logic is handled by the `Logic` component.

![Storage Component](images/StorageComponent.png)

Package overview:
- **`storage.api`**: Provides the API of the component to be accessed by the logic component.
- **`storage.entity`**: Classes that represent persistable entities.
- **`storage.search`**: Classes for dealing with searching and indexing.

![Storage ER Diagram](images/StorageClassDiagram.png)

Note that the navigability of the association links between entity objects appear to be in the reverse direction of what we see in a normal OOP design.
This is because we want to keep the data schema flexible so that new entity types can be added later with minimal modifications to existing elements.

### Storage API

Represented by the `*Db` classes. These classes act as the bridge to the GAE Datastore.

### Policies

Add and Delete operations try to wait until data is persisted in the datastore before returning. This is not enough to compensate for eventual consistency involving multiple servers in the GAE production enviornment. However, it is expected to avoid test failures caused by eventual consistency in dev server and reduce such problems in the live server.
Note: 'Eventual consistency' here means it takes some time for a database operation to propagate across all serves of the Google's distributed datastore. As a result, the data may be in an inconsistent states for short periods of time although things should become consistent 'eventually'. For example, an object we deleted may appear to still exist for a short while.

Implementation of Transaction Control has been minimized due to limitations of GAE environment and the nature of our data schema.

API for creating:
+ Attempt to create an entity that already exists: Throws `EntityAlreadyExistsException`.
+ Attempt to create an entity with invalid data: Throws `InvalidParametersException`.

API for retrieving:
+ Attempt to retrieve an entity that does not exist: Returns `null`.

API for updating:
+ Attempt to update an entity that does not exist: Throws `EntityDoesNotExistException`.
+ Attempt to update an entity with invalid data: Throws `InvalidParametersException`.

API for deleting:
+ Attempt to delete an entity that does not exist: Fails silently.

## Common Component

The Common component contains common utilities used across TEAMMATES.

![Common Component](images/CommonComponent.png)

Package overview:
- **`common.util`**: Contains utility classes.
- **`common.exceptions`**: Contains custom exceptions.
- **`common.datatransfer`**: Contains data transfer objects.

`common.datatransfer` package contains lightweight "data transfer object" classes for transferring data among components. They can be combined in various ways to transfer structured data between components. Given below are three examples.

![Data Transfer Classes](images/dataTransferClasses.png)

1. `Test Driver` can use the `DataBundle` in this manner to send an arbitrary number of objects to be persisted in the database.
1. This structure can be used to transfer data of a course (e.g., when constructing the home page for an instructor).
1. This structure can be used to send results of a feedback session (e.g., when showing a feedback session report to an instructor).

Some of these classes are methodless (and thus more of a data structure rather than a class); these classes use public variables for data for easy access.

## Test Driver Component

This component automates the testing of TEAMMATES.

![Test Driver Component](images/TestDriverComponent.png)

Package overview:
- **`test.driver`**: Contains infrastructure and helpers needed for running the tests.
- **`test.cases`**: Contains test cases.
  Sub-packages:
  - **`.testdriver`**: Component test cases for testing the test driver infrastructure and helpers.
  - **`.datatransfer`**: Component test cases for testing the datatransfer objects from the `Common` component.
  - **`.util`**: Component test cases for testing the utility classes from the `Common` component.
  - **`.logic`**: Component test cases for testing the `Logic` component.
  - **`.storage`**: Component test cases for testing the `Storage` component.
  - **`.search`**: Component test cases for testing the search functions.
  - **`.webapi`**: System test cases for testing the user-invoked actions.
  - **`.automated`**: System test cases for testing the system-automated actions (manually invoked during testing).

Notes:
- Component tests: Some of these are pure unit tests (i.e. testing one component in isolation) while others are integration tests that test units as well as integration of units with each other.
- Front-end files (particularly TypeScript) are tested separately with `Jest`. The test cases are found in `*.spec.ts` files.

This is how TEAMMATES testing maps to standard types of testing.

```
Normal
|-----acceptance tests-----|-------------------system tests-------------------|-----integration tests-----|-----unit tests-----|
|--------manual testing--------|------automated E2E tests------|-------------------automated component tests-------------------|
TEAMMATES
```

## E2E Component

The E2E component has no knowledge of the internal workings of the application and can only interact either with Web browser (as a whole application) or REST API calls (for the back-end logic). Its primary function is for E2E tests and L&P (Load & Performance) tests.

![E2E Component](images/E2EComponent.png)

Package overview:

- **`e2e.util`**: Contains helpers needed for running E2E tests.
- **`e2e.pageobjects`**: Contains abstractions of the pages as they appear on a Browser (i.e. SUTs).
- **`e2e.cases`**: Contains test cases.
  - **`.util`**: Component test cases for testing the test helpers.
  - **`.e2e`**: System test cases for testing the application as a whole.
  - **`.lnp`**: Load and performance tests (experimental).

## Client Component

The Client component contains scripts that can connect directly to the application back-end for administrative purposes, such as migrating data to a new schema and calculating statistics.

![Client Component](images/ClientComponent.png)

Package overview:

- **`client.util`**: Contains helpers needed for client scripts.
- **`client.remoteapi`**: Classes needed to connect to the back end directly.
- **`client.scripts`**: Scripts that deal with the back end data for administrative purposes.
# Development Guidelines

These are the common tasks involved when working on features, enhancements, bug fixes, etc. for TEAMMATES.

* [Managing the dev server: front-end](#managing-the-dev-server-front-end)
* [Managing the dev server: back-end](#managing-the-dev-server-back-end)
* [Building front-end files](#building-front-end-files)
* [Logging in to a TEAMMATES instance](#logging-in-to-a-teammates-instance)
* [Testing](#testing)
* [Deploying to a staging server](#deploying-to-a-staging-server)
* [Running client scripts](#running-client-scripts)
* [Config points](#config-points)

The instructions in all parts of this document work for Linux, OS X, and Windows, with the following pointers:
- Replace `./gradlew` to `gradlew.bat` if you are using Windows.
- All the commands are assumed to be run from the root project folder, unless otherwise specified.
- It is assumed that the development environment has been correctly set up. If this step has not been completed, refer to [this document](setting-up.md).

> If you encounter any problems during the any of the processes, please refer to our [troubleshooting guide](troubleshooting-guide.md) before posting a help request on our [issue tracker](https://github.com/TEAMMATES/teammates/issues).

## Managing the dev server: front-end

> `Dev server` is the server run in your local machine.

Front-end dev server is the Angular-based server handling the user interface.

First, you need to compile some type definitions from the back-end to be used in this dev server. Run the following command:
```sh
./gradlew generateTypes
```

To start the dev server, run the following command until you see something like `｢wdm｣: Compiled successfully.`:
```sh
npm run start
```

The dev server URL will be given at the console output, e.g. `http://localhost:4200`.

To stop the dev server, press `Ctrl + C`.

- The dev server is run in _watch mode_ by default, i.e. any saved change to the front-end code will be propagated to the server immediately.
- The dev server is also run in _live reload mode_ by default, i.e. any saved change to the front-end code will automatically load all dev server web pages currently being opened.
  To disable this behaviour, run the dev server as follows instead:

  ```sh
  npm run start -- --live-reload=false
  ```

## Managing the dev server: back-end

Back-end dev server is the Google App Engine-based server handling all the business logic, including data storage.

### Starting the dev server

To start the server in the background, run the following command
and wait until the task exits with a `BUILD SUCCESSFUL`:
```sh
./gradlew appengineStart
```

To start the server in the foreground (e.g. if you want the console output to be visible),
run the following command instead:
```sh
./gradlew appengineRun
```

The dev server URL will be `http://localhost:8080` as specified in `build.gradle`.

### Stopping the dev server

If you started the server in the background, run the following command to stop it:
```sh
./gradlew appengineStop
```

If the server is running in the foreground, press `Ctrl + C` (or equivalent in your OS) to stop it or run the above command in a new console.

## Building front-end files

In order for the dev server to be able to serve both the front-end and the back-end of the application, the front-end files need to be *bundled and transpiled* (afterwards `built`).

Run the following commands to build the front-end files for the application's use in production mode:
```sh
# Generate type definition file from back-end
./gradlew generateTypes

# Bundle, transpile, and minify front-end files
npm run build
```

After this, the back-end dev server will also be able to serve the front-end.

## Logging in to a TEAMMATES instance

This instruction set applies for both dev server and production server, with slight differences explained where applicable.
- The local dev server is assumed to be accessible at `http://localhost:8080`.
  - This instruction also works when the local front-end dev server and back-end dev server are separate. In that case, the dev server address will be the front-end's, e.g. `http://localhost:4200`. However, a back-end server needs to be running in order for the authentication logic to work.
- If a URL is given as relative, prepend the server URL to access the page, e.g `/web/page/somePage` is accessible in dev server at `http://localhost:8080/web/page/somePage`.

### As administrator

1. Go to any administrator page, e.g `/web/admin/home`.
1. On the dev server, log in using any username, but remember to check the `Log in as administrator` check box. You will have the required access.
1. On the production server, you will be granted the access only if your account has administrator permission to the application.
1. When logged in as administrator, ***masquerade mode*** can also be used to impersonate instructors and students by adding `user=username` to the URL
 e.g `http://localhost:8080/web/student/home?user=johnKent`.

### As instructor

You need an instructor account which can be created by administrators.

1. Log in to `/web/admin/home` as an administrator.
1. Enter credentials for an instructor, e.g<br>
   Name: `John Dorian`<br>
   Email: `teammates.instructor@university.edu`<br>
   Institution: `National University of Singapore`<br>
1. The system will send an email containing the join link to the added instructor.<br>
   On the dev server, this email will not be sent. Instead, you can use the join link given after adding an instructor to complete the joining process.

Alternatively, an instructor can create other instructors for a course if s/he has sufficient privileges. A course co-owner, for example, will have such a privilege.

1. Ensure that there is a course to add instructors to and an instructor in that course with the privilege to add instructors.
1. Log in as that instructor.
1. Add the instructors for the course (`Instructors` → `View/Edit`).
1. The system will send an email containing the join link to each added instructor. Again, this will not happen on the dev server, so additional steps are required.
1. Log out and log in to `http://localhost:8080/web/admin/search` as administrator.
1. Search for the instructor you added in. From the search results, click anywhere on the desired row to get the course join link for that instructor.
1. Log out and use that join link to log in as the new instructor.

### As student

You need a student account which can be created by instructors (with sufficient privileges).

The steps for adding a student is almost identical to the steps for adding instructors by another instructor:
- Where appropriate, change the reference to "instructor" to "student".
- `Students` → `Enroll` to add students for the course.

**Alternative**: Run the test cases, they create several student and instructor accounts in the datastore. Use one of them to log in.

### Logging in without UI

In dev server, it is also possible to "log in" without UI (e.g. when only testing API endpoints). In order to do that, you need to submit the following API call:

```sh
POST http://localhost:8080/_ah/login?action=Log+In&email=test@example.com&isAdmin=on
```

where `email=test@example.com` and `isAdmin=on` can be replaced as appropriate.

The back-end server will return cookies which will subsequently be used to authenticate your requests.

To "log out", submit the following API call:

```sh
POST http://localhost:8080/_ah/login?action=Log+Out
```

## Testing

There are two big categories of testing in TEAMMATES:
- **Component tests**: white-box unit and integration tests, i.e. they test the application components with full knowledge of the components' internal workings. This is configured in `src/test/resources/testng-component.xml` (back-end) and `src/web/jest.config.js` (front-end).
- **E2E (end-to-end) tests**: black-box tests, i.e. they test the application as a whole without knowing any internal working. This is configured in `src/e2e/resources/testng-e2e.xml`.

### Configuring browsers for E2E Testing

TEAMMATES E2E testing requires Firefox or Chrome.

Before running tests, modify `src/e2e/resources/test.properties` if necessary, e.g. to configure which browser and test accounts to use.

#### Using Firefox

* You need to use geckodriver for testing with Firefox.
  * Download the latest stable geckodriver from [here](https://github.com/mozilla/geckodriver/releases).
    The site will also inform the versions of Firefox that can be used with the driver.
  * Specify the path to the geckodriver executable in `test.geckodriver.path` value in `test.properties`.

* If you want to use a Firefox version other than your computer's default, specify the custom path in `test.firefox.path` value in `test.properties`.

* If you are planning to test changes to JavaScript code, disable JavaScript caching for Firefox:
  * Enter `about:config` into the Firefox address bar and set `network.http.use-cache` (or `browser.cache.disk.enable` in newer versions of Firefox) to `false`.

#### Using Chrome

* You need to use chromedriver for testing with Chrome.
  * Download the latest stable chromedriver from [here](https://sites.google.com/a/chromium.org/chromedriver/downloads).
    The site will also inform the versions of Chrome that can be used with the driver.
  * Specify the path to the chromedriver executable in `test.chromedriver.path` value in `test.properties`.

* If you are planning to test changes to JavaScript code, disable JavaScript caching for Chrome:
  * Press Ctrl+Shift+J to bring up the Web Console.
  * Click on the settings button at the bottom right corner.
  * Under the General tab, check "Disable Cache".

* The chromedriver process started by the test suite will not automatically get killed after the tests have finished executing.<br>
  You will need to manually kill these processes after the tests are done.
  * On Windows, use the Task Manager or `taskkill /f /im chromedriver.exe` command.
  * On OS X, use the Activity Monitor or `sudo killall chromedriver` command.

### Running the tests

- When running the test cases, a few cases may fail (this can happen due to timing issues). They can be re-run until they pass without affecting the accuracy of the tests.

#### Running the tests with command line

To run all front-end component tests in watch mode (i.e. any change to source code will automatically reload the tests), run the following command:
```sh
npm run test
```

To run all front-end component tests once and generate coverage data afterwards, run the following command:
```sh
npm run coverage
```

To run an individual test in a test file, change `it` in the `*.spec.ts` file to `fit`.

To run all tests in a test file (or all test files matching a pattern), you can use Jest's watch mode and filter by filename pattern.

Back-end component tests and E2E tests follow this configuration:

Test suite | Command | Results can be viewed in
---|---|---
`Component tests` | `./gradlew componentTests` | `{project folder}/build/reports/component-test-try-{n}/index.html`, where `{n}` is the sequence number of the test run
`E2E tests` | `./gradlew e2eTests` | `{project folder}/build/reports/e2e-test-try-{n}/index.html`, where `{n}` is the sequence number of the test run
`Failed tests` | `./gradlew failedTests` | `{project folder}/build/reports/test-failed/index.html`
Any individual test | `./gradlew test --tests TestClassName` | `{project folder}/build/reports/tests/index.html`

- `Component tests` and `E2E tests` will be run in their entirety once and the failed tests will be re-run a few times. All other test suites will be run once and only once.
- Before running `E2E tests`, it is important to have the both front-end and back-end dev servers running locally first if you are testing against them.

You can generate the coverage data with `jacocoReport` task after running tests, e.g.:
```sh
./gradlew appengineRun componentTests jacocoReport
```
The report can be found in the `build/reports/jacoco/jacocoReport/` directory.

### Testing against production server

If you are testing against a production server (staging server or live server), some additional tasks need to be done.

1. You need to setup a `Gmail API`<sup>1</sup> as follows:
   * [Obtain a Gmail API credentials](https://github.com/TEAMMATES/teammates-ops/blob/master/platform-guide.md) and download it.
   * Copy the file to `src/e2e/resources/gmail-api` (create the `gmail-api` folder) of your project and rename it to `client_secret.json`.
   * It is also possible to use the Gmail API credentials from any other Google Cloud Platform project for this purpose.

1. Edit `src/e2e/resources/test.properties` as instructed is in its comments.
   * In particular, you will need legitimate Google accounts to be used for testing.

1. Run the full test suite or any subset of it as how you would have done it in dev server.
   * You may want to run `InstructorCourseDetailsPageUiTest` standalone first because you would need to login to test accounts for the first time.
   * Do note that the GAE daily quota is usually not enough to run the full test suite, in particular for accounts with no billing enabled.

<sup>1</sup> This setup is necessary because our test suite uses the Gmail API to access Gmail accounts used for testing (these accounts are specified in `test.properties`) to confirm that those accounts receive the expected emails from TEAMMATES.
This is needed only when testing against a production server because no actual emails are sent by the dev server and therefore delivery of emails is not tested when testing against the dev server.

## Deploying to a staging server

> `Staging server` is the server instance you set up on Google App Engine for hosting the app for testing purposes.

For most cases, you do not need a staging server as the dev server has covered almost all of the application's functionality.
If you need to deploy your application to a staging server, refer to [this guide](https://github.com/TEAMMATES/teammates-ops/blob/master/platform-guide.md#deploying-to-a-staging-server).

## Running client scripts

> Client scripts are scripts that remotely manipulate data on GAE via its Remote API. They are run as standard Java applications.

Most of developers may not need to write and/or run client scripts but if you are to do so, take note of the following:

* If you are to run a script in a production environment, there are additional steps to follow. Refer to [this guide](https://github.com/TEAMMATES/teammates-ops/blob/master/platform-guide.md#running-client-scripts).
* It is not encouraged to compile and run any script via command line; use any of the supported IDEs to significantly ease this task.

## Config points

There are several files used to configure various aspects of the system.

**Main**: These vary from developer to developer and are subjected to frequent changes.
* `build.properties`: Contains the general purpose configuration values to be used by the web API.
* `config.ts`: Contains the general purpose configuration values to be used by the web application.
* `test.properties`: Contains the configuration values for the test driver.
  * There are two separate `test.properties`; one for component tests and one for E2E tests.
* `client.properties`: Contains some configuration values used in client scripts.
* `appengine-web.xml`: Contains the configuration for deploying the application on GAE.

**Tasks**: These do not concern the application directly, but rather the development process.
* `build.gradle`: Contains the back-end third-party dependencies specification, as well as configurations for automated tasks/routines to be run via Gradle.
* `gradle.properties`, `gradle-wrapper.properties`: Contains the Gradle and Gradle wrapper configuration.
* `package.json`: Contains the front-end third-party dependencies specification, as well as configurations for automated tasks/routines to be run via NPM.
* `angular.json`: Contains the Angular application configuration.
* `.travis.yml`: Contains the Travis CI job configuration.
* `appveyor.yml`: Contains the AppVeyor CI job configuration.

**Static Analysis**: These are used to maintain code quality and measure code coverage. See [Static Analysis](static-analysis.md).
* `static-analysis/*`: Contains most of the configuration files for all the different static analysis tools.

**Other**: These are rarely, if ever will be, subjected to changes.
* `logging.properties`: Contains the java.util.logging configuration.
* `web.xml`: Contains the web server configuration, e.g servlets to run, mapping from URLs to servlets, security constraints, etc.
* `cron.xml`: Contains the cron jobs specification.
* `queue.xml`: Contains the task queues configuration.
* `datastore-indexes.xml`: Contains the Datastore indexes configuration.

# Using alternative email providers

Google App Engine provides JavaMail (reference: https://cloud.google.com/appengine/docs/java/mail/) as a default email service, but the service is limited to 100 emails per day which is insufficient for TEAMMATES usage.
We need to resort to third-party email service to fulfill this need.

This document will outline the alternative email services configured for use in TEAMMATES.

- [SendGrid](#sendgrid)
- [Mailgun](#mailgun)
- [Mailjet](#mailjet)

In many cases, you have to register your domain name with the email service and configure your DNS provider so that the service can start sending email for you.
The details for this can be seen on the documentation of each service.

## SendGrid

- Website: https://sendgrid.com
- Google App Engine reference: https://cloud.google.com/appengine/docs/flexible/java/sending-emails-with-sendgrid

To use SendGrid in TEAMMATES, create a free SendGrid account, create an API key, and update the relevant values in `build.properties`.

## Mailgun

- Website: https://www.mailgun.com
- Google App Engine reference: https://cloud.google.com/appengine/docs/java/mail/mailgun

To use Mailgun in TEAMMATES, create a free Mailgun account, get a domain name and find its API Key, and update the relevant values in `build.properties`.

## Mailjet

- Website: https://www.mailjet.com
- Google App Engine reference: https://cloud.google.com/appengine/docs/java/mail/mailjet

To use Mailjet in TEAMMATES, create a free Mailjet account, find your API key and secret key, and update the relevant values in `build.properties`.
# Glossary

This document lines out the common terms used in the project.

## Product-related

+ **Course**: We use "course" to mean "module", "class". A course here means an offering of a course in a particular semester/term. If the course is offered twice in two semesters (i.e. with different students and teaching team), they are considered two courses. There is, however, no time limit on how long a course may run.
+ **Contribution scale**:
```
    [equal share]+100%

    [equal share]+90%

    ...

    [equal share]

    [NOT SURE]

    [equal share]-10%

     ...

    [equal share]-90%

    [0%] (did nothing at all)
```
+ **Enrollment, Enroll** (NOT enrolment, enrol).
+ **Feedback Session**: A collection of questions for students and/or instructors alike to answer; synonymous to a questionnaire, a survey.<br>
  Sometimes, this is referred to as simply "Session"; developers must take extra care so as not to confuse it with HTTP sessions.

## Development-related

+ [**Main repo**](https://github.com/TEAMMATES/teammates): The repository containing the latest stable code.
+ [**Ops repo**](https://github.com/TEAMMATES/teammates-ops): The repository containing maintenance and operations-specific information.
+ **Specs**: System Specification.

`* server`:

+ **Dev server**: The development server running on your computer.
+ **CI server**: Continuous Integration server used for building/testing patches. Can be Travis or AppVeyor.
+ **Production server**: A server on Google App Engine. Can be a staging server or the live server.
+ **Staging server**: The server instance you created on Google App Engine for testing purpose.
+ **Live server**: The server running the released public version of the app (i.e. http://teammatesv4.appspot.com).

`* tests`:

+ **All tests**: The full test suite.
+ **Component tests**: Unit and integration tests, i.e. white-box tests. There are separate component test suites for front-end and back-end.
+ **E2E tests**: End-to-end system tests, i.e. black-box tests. Also used for product acceptance.
+ **CI tests**: Tests to be run on the CI server. Consists of components tests and E2E tests.

`* green`:

+ **Dev green**: **All** tests are passing on the dev server.
+ **CI green**: **CI** tests are passing on the CI server.
+ **Staging green**: **All** tests are passing against your own staging server.
+ **Live green**: **All** tests are passing against the app running on the live server.
# Set up an IDE

- [IntelliJ IDEA](#intellij-idea)

## IntelliJ IDEA

> - Replace all references of `IntelliJ IDEA → Preferences` to `File → Settings` if you are using Windows or Linux.

Supported IntelliJ versions: IntelliJ IDEA Ultimate Edition (required to work with Google App Engine).
You can sign up for the free [JetBrains student license](https://www.jetbrains.com/student/) if you are a student registered in an educational institution.

### Prerequisites

1. You need a Java 8 SDK defined in IntelliJ IDEA as follows:

   * Click `Configure → Project Defaults → Project Structure` (or `File → Project Structure` if a project is open).
     Select `SDKs` under` Platform Settings` and check if there is an SDK with JDK home path pointing to a JDK 8 path.
     If there is none, add a new SDK which uses JDK 8.
     ![intellijsetupguide-1.png](images/intellijsetupguide-1.png)

1. You need the [Google Cloud Code](https://cloud.google.com/code/docs/intellij/quickstart-IDEA) plugin installed and configured:

   ![intellijsetupguide-2.png](images/intellijsetupguide-2.png)
   * During installation, you may encounter a prompt to disable the obsolete `Google App Engine Integration` plugin. Answer `Yes`.
   * After installation, restart IntelliJ IDEA.
   * (Optional) To configure the plugin to use a specific Cloud SDK installation,
     click `Configure → Settings/Preferences` (or `IntelliJ IDEA → Preferences` if a project is open),
     go to `Other Settings → Cloud Code → Cloud SDK`, choose `Use a custom local installation`, and select your Google Cloud SDK directory.

### Project Setup

1. Import the project as a Gradle project as follows:
   1. Click `Import Project` (or `File → New → Project from Existing Sources...` if a project is open).
   1. Select the local repository folder and click `Open`.
   1. Select `Import project from external model` and then `Gradle`.
   1. Click `Next`.
   1. Check `Use auto-import` and uncheck `Create separate module per source set`.
   1. Ensure `Create directories for empty content root automatically` is unchecked.
   1. Ensure `Use default gradle wrapper` is selected.
   1. Ensure for `Gradle JVM:` that a JDK 8 is selected.
   1. Click `Finish`. Wait for the indexing process to complete.
   1. You should see a dialog box with the message:\
      `Frameworks detected: Google App Engine Standard, Angular CLI frameworks are detected.`.\
      **OR**\
      `Frameworks detected: Web, Google App Engine Standard, Angular CLI frameworks are detected`.\
      Click on `Configure` and ensure that only `Google App Engine Standard` and `Angular CLI` frameworks are shown, then click `OK`.
      If there are other frameworks shown, click `Cancel` and wait until indexing is completed, then try again.
      > If you closed or missed the dialog box, go to `View → Tool Windows → Event Log`.
        You should see the same message as the message in the dialog box. Click `Configure` and then `OK`.

1. Configure the following project-specific settings (all can be found in `IntelliJ IDEA → Preferences → ...`):

   * Indentation: 2 spaces are used in place of tabs for indentations. For Java and XML, 4 spaces are used instead.
     Configure for all the languages used in TEAMMATES:
     1. Go to `Editor → Code Style`.
     1. Select `Project` for `Scheme` if you do not wish to make the settings the default for your IDE.
     1. For `TypeScript`, `JSON`, `CSS`, and `HTML`:
        * Ensure that `Use tab character` is unchecked, and `Tab size:`, `Indent:`, and `Continuation indent:` are `2`, `2`, and `4` respectively.
     1. Repeat the previous step for `Java` and `XML` using the numbers `4`, `4`, and `8` respectively.

   * Text encoding: `UTF-8` is used for text encoding.
     Go to `Editor → File Encodings` and ensure that `Project Encoding` and `Default Encoding for properties files` is set to `UTF-8`.

1. Click `OK`.

1. To move on to the development phase, refer to [this document](development.md).
# Issue tracker

This document describes how the issue tracker is used by the TEAMMATES project.

* [Issue lifecycle](#issue-lifecycle)
* [Issue labels](#issue-labels)

## Issue lifecycle

<img src="images/IssueLifecycle.png" width="600">

Given above is an illustration of the issue lifecycle.
Colors indicate which roles are involved in which states/transitions.

## Issue labels

This portion will only describe the purpose of each *label group* briefly.
The full description of each individual label can be viewed under the [labels page](https://github.com/TEAMMATES/teammates/labels).

* **Status (`s.*`)**: Classifies issues and PRs based on **status**
  * No `s.*` label and no other labels in issue: issue is yet to be triaged
  * No `s.*` label and other labels present in issue: issue is accepted
* **Category (`c.*`)**: Classifies issues and PRs based on **type of work done**
* **Priority (`p.*`)**: Classifies issues based on **importance**, as determined by the project maintainers
* **Difficulty Level (`d.*`)**: Classifies issues based on **difficulty level**
  * No `d.*` label: variable difficulty level, typically between `d.Contributors` and `d.Committers` level
* **Aspect (`a-*`)**: Classifies issues based on the **non-functional aspect**
  * No `a-*` label: no specific aspect tackled, usually the case for enhancements or new features
* **Feature (`f-*`)**: Classifies issues based on the **functional aspect**
  * No `f-*` label: no specific feature tackled, usually the case for refactoring
* **Technology (`t-*`)**: Classifies issues based on the **technology/tool stack** involved
  * No `t-*` label: usually documentation update, or mixture of many languages
* **Effort Estimate (`e.*`)**: Indicates the **estimated number of hours** needed to work on the issue
  * `e.n`: `n` hours estimated effort, e.g. `e.1` is 1 hour, `e.2` is 2 hours, etc.
# Overview

## Vision

1. To become **the biggest student project in the world**.<br>
   Biggest = many contributors, many users, relatively large code base (150k-200k LoC), evolving over a long period.<br>
   "Biggest" above also implies an exceptionally high quality standard because high quality is a necessity for the long-term survival of a big student project.

1. To become **a model and a training ground for Software Engineering students** who want to learn SE skills in the context of a non-trivial real software product.

## Challenges

The project differs from typical student projects in the following areas, which makes it more challenging and the experience more enriching.
+ **Developers**: All developers are novices and their involvement with the project is short term and part time.
+ **Code**: Working with legacy code written by past developers is harder than writing from scratch.
+ **Data**: The data in the live system are confidential and developers are not allowed to see them. This makes troubleshooting harder.
+ **Releases**: Frequent releases to an active user database requires us to maintain "production quality" constantly.
+ **Platform**: TEAMMATES is running on Google App Engine cloud platform, which adds the following challenges.
  - It is an emerging platform evolving rapidly. We have to keep up.
  - It imposes various restrictions on the application, e.g. each request to the app has to be served within 60 seconds.
  - It charges us based on usage. We have to optimize usage.
+ **Software Engineering**: As TEAMMATES serves as a model system for training students, it should also focus on applying good SE techniques.

## Principles

We apply these principles to meet the challenges stated above.
+ **We keep moving forward, always**: We release frequently, in weekly [time-boxed iterations](http://en.wikipedia.org/wiki/Timeboxing). Every week, our product becomes better than the previous week. This means "go back and rewrite from scratch" is only a last resort.
+ **We are agile**: We are able to change the system quickly and easily to match emerging requirements. We aim for **minimal yet sufficient documentation**.
+ **We defend our code with tests, fiercely**: Since we practice [collective code ownership](http://www.extremeprogramming.org/rules/collective.html), we have to make sure the code is not accidentally broken by others. We use fully automated regression testing. The testing automation level of this project is probably higher than 99% of the projects out there.
+ **We are "Gods" of the few tools we use**: We stick to a minimal toolset. Adding third-party tools and libraries to the project is done only if there is a STRONG justification. Only mature, stable, and well-supported tools are considered. Once selected, we should know the tool very well to get the best out of it.
+ **We value quality more than functionality**: Our job is not to "anyhow get it to work". The system should be good enough to be considered a "model" software. Our code should be of "exceptionally" high quality: all code is reviewed before accepting.
+ **We know what we are doing**: For us, it is not enough to know something is broken, we should also know why it is broken. It is not enough to get something working, we should know how we got it to work.
+ **We seek the best, not stop at the first**: We do not settle for the first workable method to solve a problem. We study other ways of solving it and decide what is the best way for us.
+ **We take pains to save the team from pain**: Whenever we had to spend effort in figuring out something, we refine code/documents so that others don't have to go through the same pain. Whenever we figured out a less painful way of doing something, we make sure everyone in the team learn it too.
# Performance Testing

TEAMMATES makes use of [JMeter](https://jmeter.apache.org/) for load and performance (L&P) testing, and uses the [JMeter Java API](https://jmeter.apache.org/api/index.html) and TestNG to automate the process of running performance tests.
The performance test cases are located in the `teammates.e2e.cases.lnp` package.

## Creating Performance Tests

Each new test case must inherit the base L&P test class, and implement the methods required for generating the test data and the JMeter L&P test plan. 
The L&P test plans are created in Java using the JMeter API.

When running the L&P test, an equivalent `.jmx` file can be generated from this test plan.
To help with debugging, you can open this `.jmx` file in the JMeter GUI and add Listeners.

To see a sample implementation of a test case, you can refer to `StudentProfileLNPTest`. It is a _simple_ test case which load tests a GET endpoint (`/webapi/student/profile`).

## Running Performance Tests

If you want to use your own copy of [JMeter](https://jmeter.apache.org/download_jmeter.cgi), update the `test.jmeter.*` properties in `src/e2e/resources/test.properties` accordingly.  
Start the backend server, i.e. `localhost:8080`, before running the performance tests.

### Using Gradle

To run the performance tests, execute this command from the main project directory:
```sh
./gradlew lnpTests
```

- The JMeter test results are stored as JTL files with the same name as the test file in `src/e2e/lnp/results/TEST_NAME.jmx.jtl`. 
- A log file is generated as `jmeter.log`.

If the build fails:
- Check the console log messages and the `jmeter.log` file to see if there were any errors or exceptions thrown. If so, take the necessary steps to fix them.
- Check the generated `.jtl` result files to see whether the `success` value of any row is `false`. If so, investigate the cause (possibly by making use of the JMeter GUI and Listeners) and fix it.

### Using the Command Line

If you have JMeter installed, you can use `jmeter` in the command line to run tests and generate reports.

Execute this command after replacing the parameters with the relevant paths:
```sh
jmeter -n -t PATH_TO_TEST_FILE.jmx -l PATH_TO_RESULT_FILE.jtl -j PATH_TO_LOG_FILE.log
```

Also, you can use this command to generate a HTML **summary report** from the results file (`.jtl`) that was generated earlier:
```sh
jmeter -g PATH_TO_RESULT_FILE.jtl -o REPORT_OUTPUT_FOLDER -j PATH_TO_LOG_FILE.log
```

If you want to do both together (i.e. execute the test and generate the report), use:
```sh
jmeter -n -t PATH_TO_TEST_FILE.jmx -l PATH_TO_RESULT_FILE.jtl -e -o REPORT_OUTPUT_FOLDER -j PATH_TO_LOG_FILE.log
```

### Using JMeter GUI

You can also install JMeter and use its GUI to run performance tests. This is particularly useful when debugging or validating that the test works as expected.
However, you should not use the GUI to run large scale tests as it is very resource intensive.

> Remember to **disable or remove all `Listeners`** in the `.jmx` file, unless you are debugging. Having them enabled can have a negative impact on the test performance.
# Development Workflow

This is the project-wide development workflow for TEAMMATES.

* [Overview](#overview)
* [Fixing issues](#fixing-issues)
* [Reviewing a PR](#reviewing-a-pr)
* [Merging a PR](#merging-a-pr)

## Overview

<img src="images/workflow.png" width="600">

* This workflow is an adaptation of the [GitHub flow](https://guides.github.com/introduction/flow/).
* If you need any help regarding the workflow, please [post a new issue in our issue tracker](https://github.com/TEAMMATES/teammates/issues/new).
* It is assumed that the development environment has been correctly set up. If this step has not been completed, refer to [this document](setting-up.md).<br>
  You are also encouraged to be reasonably familiar with how to [work with your own local copy of TEAMMATES](development.md).

The following are the roles involved:
* **Dev**: fixing issues
* **Reviewer**: reviewing pull requests (PRs); usually a core team member
* **Code quality reviewer**: approving PRs; usually the Project Manager

> *Roles* are related to the development process and they are different from *Positions*, which relate to the organization structure of the TEAMMATES developer community.

## Fixing issues

**Role: Dev**

This instruction set will use the issue `Remove unnecessary System.out.printlns from Java files #3942` as an example.

### Step 1: Pick an issue to fix

Our issue tracker contains bug reports, feature requests, as well as suggestions for enhancements.
You are free to work on any of the issues listed there.

* If you are a contributor, there is no need to get the issue assigned to you.
* If you are a core team member, assign the issue to yourself and assign it a milestone.
  You are expected to open a PR for this issue within a week; inactivity for a longer time may result in the issue being un-assigned so that someone else can work on it.
* While not required, the following gestures are appreciated:
  * Indicating your interest in working on any particular issue by commenting on the issue thread itself.
  * Refraining from working on issues that are assigned to someone else or have open PRs.
* (Optional) You can discuss, via the issue tracker, the alternative solutions before choosing one to implement.
  Such a discussion reduces the chance of a rejected fix or a misunderstood issue.

The [issue labels](issues.md#issue-labels) may help you in choosing which issue to fix.

### Step 2: Start clean from a new branch

In most cases, you will start the PR from the `master` branch. There are scenarios where you are required to start from another branch instead:
* You are creating a hot patch: start from the `release` branch.
* You are working on a *long-lived feature branch* (a branch which contains multiple commits from possibly multiple authors, used for major feature development/refactoring): start from that branch.

For brevity, this instruction set will use `master` branch as the base branch. Any reference to the `master` branch should be replaced with the base branch that applies to your case.

1. Start off from your `master` branch and make sure it is up-to-date with the latest version of the main repo's `master` branch.
   ```sh
   git checkout master
   git pull
   ```

1. Create a new branch to push your commits into. If you have commit access and need to push into the main repo for some reason, name it `{IssueNumber}-{some-keywords}`,
   where `some-keywords` are representative keywords taken from the issue title.
   ```sh
   git checkout -b 3942-remove-unnecessary-println
   ```

Notes:

1. **Do not** combine fixes for multiple issues in one branch, unless they are tightly related.
1. Your `master` branch must never be ahead of the main repo's `master` branch at all times.

### Step 3: Fix the issue

> If this is your first issue, you may want to look at our coding and testing best practices as well as coding conventions (links given [here](README.md)).

Make the changes to the code, tests, and documentations as needed by the issue.

1. Commit the changes to your branch.
   ```sh
   git add -A
   git commit
   ```
   * You may commit as many times as you wish while you are making the changes.
     It is, however, a good idea to commit at meaningful points to keep your branch reasonably clean.
   * Use meaningful commit messages (e.g. `Add tests for the truncate method`).
     [Here](http://chris.beams.io/posts/git-commit/) is a good reference.
   * If you introduce changes that are incompatible with the prevailing data storage schema (afterwards "breaking changes"), a *data migration* is necessary to be done by the core team. If a data migration is necessary to take the issue forward:
     * Make sure that the core team (or at least your reviewer) is aware of this.
     * Follow [data migration best practices](https://github.com/TEAMMATES/teammates-ops/blob/master/best-practices.md#data-migration).
     * Your changes should initially work for both the old and new versions of the data schema. It is fine if an unclean hack is necessary for the new code to work under the *old* data schema.
     * Mark clearly in the code which parts are tailored specifically for the old data schema, *especially if an unclean hack is used*.
     * Concurrently or immediately after the breaking changes are merged, you need to create a [client script](development.md#running-client-scripts) to migrate all data following the old schema to the new schema.

1. Sync with the main repo frequently. While you were fixing the issue, others might have pushed new code to the main repo.
   * Update your repo's `master` branch with any new changes from main repo, then switch back to your work branch.

     ```sh
     git checkout master
     git pull
     git checkout 3942-remove-unnecessary-println
     ```
   * Option 1: merge those updates to the branch you are working on.

     ```sh
     git merge master
     ```
   * Option 2: if you are confident with rebasing, rebase your changes over the latest `master` branch.

     ```sh
     git rebase master
     ```
   * If there are updates to the dependencies on the build configuration, you should update your local copies accordingly.

1. <a name="things-to-check"></a>Before submitting your work for review, here are some things to check (non-exhaustive):
   * The code is **properly formatted for readability**.
   * The code base passes **static analysis** (i.e. code quality check):

     ```sh
     ./gradlew lint
     npm run lint
     ```
   * **All affected tests are passing** on your dev server.<br>
     You are more than welcome to also ensure *dev green*, i.e. all tests are passing on your dev server.
   * **Staging-tested (if need be)**: If your new code might behave differently on a remote server than how it behaves on the dev server,
     ensure that the affected tests are passing against the updated app running on your own GAE staging server.
   * **No unrelated changes** are introduced in the branch. This includes unnecessary formatting changes.
   * All changes or additions to functional code are **accompanied by changes or additions in tests**, even if they are absent before.
   * All new public APIs (methods, classes) are **documented with header comments**.
   * **Documentations are updated** when necessary, particularly when there are changes or additions to software design as well as user-facing features.

1. Push your branch to your fork, or to the main repo only if necessary.
   ```sh
   git push {remote-name} 3942-remove-unnecessary-println
   ```
   If the above command does not work e.g. because of rebasing, do a forced-push:
   ```sh
   git push -f {remote-name} 3942-remove-unnecessary-println
   ```

   > Anyone working on an issue, including core team members, should use branches in his/her own fork instead unless the branch needs to be in the main repo.
   > Such cases include:
   >
   > * The branch is being worked on by multiple people.
   > * The branch contains changes that need to be trialled by other core team member.

### Step 4: Submit a PR

[Create a PR](https://help.github.com/articles/creating-a-pull-request/) with the following configuration:
* The base branch is the main repo's `master` branch.
* PR name: copy-and-paste the relevant issue name and include the issue number in front in square brackets,
  e.g. `[#3942] Remove unnecessary System.out.printlns from Java files`.
* PR description: mention the issue number in this format: `Fixes #3942`.
  Doing so will [automatically close the related issue once the PR is merged](https://github.com/blog/1506-closing-issues-via-pull-requests).
* Ensure that "Allow edits from maintainers" is ticked.
* You are encouraged to describe the changes you have made in your branch and how they resolve the issue.

It is not required that you submit a PR only when your work is ready for review;
make it clear in the PR (e.g. in the description, in a comment, or as an `s.*` label) whether it is still a work-in-progress or is ready for review.

**Note**: if the PR does not fix an issue completely, observe the following:
* Use an appropriate PR name (at your discretion) instead of copying-and-pasting the relevant issue name.
* Use `Part of #3942` as the PR description. Do NOT use any of the special keywords.

### Step 5: Following up

Once a PR is opened, try and complete it within 2 weeks, or at least stay actively working on it.
Inactivity for a long period may necessitate a closure of the PR.

Labels `s.*` (status labels) are used to indicate status of PRs.
Their full descriptions can be viewed under the [labels page](https://github.com/TEAMMATES/teammates/labels).

#### Code review

Your code will be reviewed, in this sequence, by:
* Travis CI: by running static analysis.<br>
  If there are problems found, the build will terminate without proceeding to testing.<br>
  Most of the tools will display the cause of the failures in the console;
  if this is not the case, you can run any of the static analysis tools and obtain the reports locally.<br>
  Ensure that the static analysis passes before triggering another build.
* Travis CI: by building and running tests.<br>
  If there are failed tests, the build will be marked as a failure.
  You can consult the CI log to find which tests.<br>
  Ensure that all tests pass before triggering another build.
  * The CI log will also contain the command that will enable running the failed tests locally.
* Reviewer: a core team member will be assigned to the PR as its reviewer, who will approve your PR (`s.FinalReview`) or suggest changes (`s.Ongoing`).
  Feel free to add a comment if:
  * a reviewer is not assigned within 24 hours.
  * the PR does not get any review within 48 hours of review request.
  * you want to clarify or discuss about the suggestions given by your reviewer.
* Code quality reviewer: final review for maintainability and style.

#### Updating the PR

If you are tasked to update your PR either by Travis CI or by your reviewer, **do not** close the PR and open a new one.
You should make and push the updates to the same branch used in the PR, essentially repeating [step 3](#step-3-fix-the-issue).

Remember to add a comment to indicate the PR is ready for review again, e.g. `Ready for review` or `Changes made`.
If you have permission to change labels, you may additionally change the `s.*` PR label as appropriate.

The cycle of "code review" - "updating the PR" will be repeated until your PR is approved by all the parties involved (`s.ToMerge`).

### Step 6: Prepare for merging

The core team member responsible for merging your PR might contact you for reasons such as resolving merge conflicts.
Depending on the situation, this may necessitate more changes to be made in your PR (e.g. if your PR is functionally conflicting with a recent change), however this rarely happens.

Your work on the issue is done when your PR is successfully merged to the main repo's `master` branch.

## Reviewing a PR

**Role: Reviewer**

> - The reviewer of a PR is the assignee of it.
> - To remove whitespace-only changes from being shown, append `?w=1` to url of the `/files` page of the PR (the "Files changed" tab).

[GitHub's review feature](https://github.com/blog/2256-a-whole-new-github-universe-announcing-new-tools-forums-and-features#code-better-with-reviews) is to be used in this task.

* Ensure that the Travis CI build is successful and the developer has local dev green.
* Ensure the following:
  * Naming conventions for PR and branch are followed, and `Fixes #....` or similar keyword is present in the PR description.
  * The items in [this list](#things-to-check) are all satisfied.
  * The solution is the best possible solution to the problem under the circumstances.
  * The code is up-to-date with the latest `master` branch (or whichever base branch applies), or at least no conflict.
    If this is not the case, ask the dev to sync it.
* If any of the above are not OK:
  * Add comments in the diff to suggest changes.
    Bundle the review comments with the "Start a review" and "Add review comment" features, and finish it with "Request changes", preferably with the review summary.
  * Change the status of the PR to `s.Ongoing`.
* If the code is OK in all aspects, change the PR status to `s.FinalReview` and "Approve" the PR.

**Role: Code quality reviewer**

* Review the code for maintainability and style.
* The follow-up action is the same as that of reviewers, with the only difference being the label to be applied is `s.ToMerge`.

## Merging a PR

**Role: dev (with push permission), or reviewer**

This instruction set will use the issue `Remove unnecessary System.out.printlns from Java files #3942`, resolved by PR `#3944`, with `master` branch as the base branch, as an example.

* Merging can be done anytime as long as the `s.ToMerge` label is present and GitHub gives a green light for merging.
  There are a few scenarios where GitHub can prevent merging from proceeding:
  * **Merge conflict**: the PR is conflicting with the current `master` branch; the author will need to resolve the conflicts before proceeding.
  * **Outdated branch**: the PR is not in sync with the current `master` branch. If the PR allows edits from maintainers, simply update the branch using the "Update branch" option; otherwise, the author will need to sync it themselves before proceeding.

  It is up to the dev/reviewer's discretion on whether the merge conflict or outdated branch necessitates another review.<br>
  In general, unless the changeset is functionally conflicting, there is no need for another review.
* When ready for merging,
  * Merge with ["Squash and merge"](https://help.github.com/articles/about-pull-request-merges/#squash-and-merge-your-pull-request-commits) option. Format of the commit message:

    ```
    [#Issue number] Issue title as given in the original issue (#PR number)
    ```
    e.g. `[#3942] Remove unnecessary System.out.printlns from Java files (#3944)`.
  * Where appropriate (e.g. merging a long-lived feature branch), the ["Rebase and merge"](https://help.github.com/articles/about-pull-request-merges/#rebase-and-merge-your-pull-request-commits) option can be used instead.
  * Apply a `c.*` label to the PR to indicate the type of the PR, if it has not been done before.
* If the PR necessitates a data migration, [create a data migration issue](https://github.com/TEAMMATES/teammates/issues/new?template=data-migration.md) after merging.
# Documentation For Developers

Here are some documents important for TEAMMATES developers.

## Main documents

* The project [**vision, challenges, and principles**](overview.md) from a developer's perspective.
* The [**glossary**](glossary.md) of terms used in the project.
* Software [**Design**](design.md) - Architecture, APIs, etc.
* How to [**set up the developer environment**](setting-up.md).
* [**Development guideline**](development.md) - how to work with your own copy of TEAMMATES.
* The [**workflow/process to follow**](process.md) when contributing to TEAMMATES.
* [**Developer Troubleshooting Guide**](troubleshooting-guide.md)
* How the [**issue tracker**](issues.md) is used - issue lifecycle, issue labels, etc.

## Supplementary documents

* **Coding standards** for:
  [Java](https://oss-generic.github.io/process/codingStandards/CodingStandard-Java.html),
  [CSS](https://oss-generic.github.io/process/codingStandards/CodingStandard-Css.html),
  [HTML](https://oss-generic.github.io/process/codingStandards/CodingStandard-Html.html)

* **Best practices** for:
  * [UI design](best-practices/ui-design.md)
  * [Coding](best-practices/coding.md)
  * [Testing](best-practices/testing.md)
  * [Data migration](best-practices/data-migration.md)

* How to [**set up IDEs for development**](ide-setup.md). _(not actively supported/maintained; use at your own risk)_

## How-to documents

* [Static analysis](static-analysis.md): Performing code quality check.
* [Setting up third-party email providers](emails.md).
* [Setting up CAPTCHA](captcha.md).
* [Snapshot testing](snapshot-testing.md)
# Setting up a development environment

This is a step-by-step guide for setting up a development environment on your local machine.
Using this environment, you can contribute to the project by working on features, enhancements, bug fixes, etc.

All the instructions in this document work for Linux, OS X, and Windows, with the following pointers:
- Replace `./gradlew` to `gradlew.bat` if you are using Windows.
- All the commands are assumed to be run from the root project folder, unless specified otherwise.
- When a version is specified for any tool, install that version instead of the latest version available.

> If you encounter any problems during the setup process, please refer to our [troubleshooting guide](troubleshooting-guide.md) before posting a help request in our [issue tracker](https://github.com/TEAMMATES/teammates/issues).

## Step 1: Obtain your own copy of the repository

1. Install Git.
   1. (Optional but recommended) Install Sourcetree or other similar Git client.

1. Fork our repo at https://github.com/TEAMMATES/teammates. Clone the fork to your hard disk.

1. Add a remote name (e.g `upstream`) for your copy of the main repo. Fetch the remote-tracking branches from the main repo to keep it in sync with your copy.
   ```sh
   git remote add upstream https://github.com/TEAMMATES/teammates.git
   git fetch upstream
   ```
   **Verification:** Use the command `git branch -r` and the following lines should be part of the output:
   ```
    upstream/master
    upstream/release
    ```

1. Set your `master` branch to track the main repo's `master` branch.
   ```sh
   git checkout master
   git branch -u upstream/master
   ```

More information can be found at [this documentation](https://help.github.com/articles/fork-a-repo/).

## Step 2: Install necessary tools and languages

These tools are necessary regardless of whether you are developing front-end or back-end:

1. Install JDK 1.8.
1. Install Python 2.7.
1. Install Google Cloud SDK (minimum version 222.0.0). Follow the directions given [here](https://cloud.google.com/sdk/downloads).
   Note that you *do not* need to [initialize the SDK](https://cloud.google.com/sdk/docs/initializing).
   ```sh
   # Run the following command at the Google Cloud SDK directory

   # Linux/OS X
   ./install.sh --path-update true

   # Windows
   install.bat --path-update true
   ```
   If you are installing in Red Hat, CentOS, Fedora, Debian or Ubuntu, refer to the quick start of Google Cloud SDK for [Debian/Ubuntu](https://cloud.google.com/sdk/docs/quickstart-debian-ubuntu) or [Red Hat/CentOS/Fedora](https://cloud.google.com/sdk/docs/quickstart-redhat-centos) respectively.

   **Verification**: Run a `gcloud` command (e.g. `gcloud version`) in order to verify that you can access the SDK from the command line.

1. Run the following command to install App Engine Java SDK bundled with the Cloud SDK:
   ```sh
   # Linux/OS X/Windows
   gcloud -q components install app-engine-java
   
   # Red Hat/CentOS/Fedora
   sudo yum install google-cloud-sdk-app-engine-java
   
   # Debian/Ubuntu
   sudo apt-get install google-cloud-sdk-app-engine-java
   ```
   **Verification:** Run `gcloud version` and there should be an entry on `app-engine-java`.

If you want to develop front-end, you need to install the following:

1. Install Node.js (minimum version 8.9.4).
1. (Optional but highly recommended) Install Angular CLI version 7 globally.
   ```sh
   npm install -g @angular/cli@7
   ```
   **Verification:** Run `ng` and you should see a list of available Angular CLI commands.

## Step 3: Set up project-specific settings and dependencies

1. Run this command to create the main config files (these are not under revision control because their contents vary from developer to developer):
   ```sh
   ./gradlew createConfigs
   ```
   **Verification:** The file named `gradle.properties` should be added to the project root directory.

1. Modify the following config file:
   * `gradle.properties`<br>
      If you want to use a JDK other than the one specified in your PATH variable, add the value to the variable `org.gradle.java.home`.

1. Run this command to download the necessary tools for front-end development (if you are going to be involved):
   ```sh
   npm install
   ```
   **Verification:** A folder named `node_modules` should be added to the project root directory.

**Q:** Can I set up the project in IDEs, e.g. Eclipse, IntelliJ?<br>
**A:** You are welcome to; the core team have been using IntelliJ to a varying degree of success, but IDE-based development (even with IntelliJ) is not actively supported/maintained by the team.

## Step 4: Start developing

If you have followed every step correctly, your development environment should be set up successfully.

Proceed to the development routine as outlined in [this document](development.md).
# Snapshot Testing

## What is Snapshot Testing?

Snapshot testing is an extension of usual expected-vs-actual assertion where the following conditions apply:

1. The expected object ("snapshot" afterwards) is too large to be contained in a few lines of code (e.g. a web page HTML content)
1. The snapshot should be tolerant to some degree of data variation (e.g. date and time of test execution)
1. (Optional) There is an automated way to update the snapshot based on the state of the actual object at any point of time

In the case of TEAMMATES, snapshot testing is useful for the following comparisons:

1. Expected web page content/DOM structure vs actual rendered web page
1. Expected email content vs actual email generated by the system
1. Expected CSV content vs actual CSV generated by the system

## How does Snapshot Testing work?

Snapshots testing can run in two modes, namely, verification mode (default) and auto-update mode.

In verification mode, snapshot testing is essentially the same as a normal expected-vs-actual assertions, where the actual object is compared against the snapshot.

Auto-update mode is the flagship feature of snapshot testing. Essentially, this _reverses_ the process of testing, i.e. using the _actual_ generated object to overwrite the snapshot provided in the test.
To remove redundancy, even if auto-update mode is enabled, this overwriting procedure only happens when a test fails during the test run.

For such testing method to be effective, before the changes are committed, a *manual* (by the developer) verification to ensure only the intended changes have occurred is mandatory.

## How do we use Snapshot Testing?

For the web page comparison, the tests are done in the front-end using Jest. [Jest has native support for snapshot testing (in fact, that is where the name is obtained from!)](https://jestjs.io/docs/en/snapshot-testing). Auto-update mode is activated by pressing `u` when running Jest under watch mode.

For email and CSV content generation, the tests are done in the back-end. Auto-update mode is activated by setting the value of `test.snapshot.update` to `true` in `test.properties`.

## When do we use Snapshot Testing?

Snapshot testing is typically used in the following two situations:

1. To create a new source file for a (new) HTML comparison test, email content test, or CSV file content test.
1. To update existing source files to reflect intended changes to the UI of the web pages, the email content, or the CSV file content.

The following example describes the behaviour of snapshot testing and how it can be used in practice. Let us consider the case where the following line of test code is executed:

```ts
expect(fixture).toMatchSnapshot();
```

Here are three possible situations and the corresponding behaviours of snapshot testing when the test is executed with auto-update mode enabled:

1. If the snapshot exists and has the correct content, no updates to the source file will be observed.

1. If the snapshot exists but has the wrong content, it will be updated with the correct content. Subsequently, the test case will pass subsequent test runs with/without auto-update mode enabled.

1. If the snapshot does not exist, it will be created with the given name (in Jest it is auto-generated) AND with the correct content. Subsequently, the test case will pass subsequent test runs with/without auto-update mode enabled.

The same idea applies to email content test:

```java
EmailChecker.verifyEmailContent(email, recipient, subject, "/studentCourseJoinEmail.html");
```

And to CSV content test:

```java
CsvChecker.verifyCsvContent(csvContent, "/feedbackSessionResults.csv");
```

## When do we NOT use Snapshot Testing?

Snapshot testing is useful for regression testing, e.g. if a change to front-end logic caused the rendered HTML to change, snapshot testing will reflect those changes and it can be checked whether those changes are intended or not.

However, snapshot testing should NOT be used to check how a rendered HTML looks like before/during/after interactions, e.g.:

1. Take one snapshot at the initial phase
1. Perform a 'click' on a selected component of the page
1. Take another snapshot afterwards

Such (mis-)usage of snapshot testing will erode the value of test as the difference between the two snapshots cannot be traced.

In such a case, normal assertions should be used, e.g. by checking the component's internal data before and after the 'click'.

## Best Practices

1. Snapshot testing complements but does NOT replace unit tests.
1. Remember to disable the auto-update mode once the necessary changes have been made, before committing the changes.
1. Confirm that all the changes are EXPECTED.
1. After all the necessary changes have been made, run the test suites once without auto-update mode enabled to ensure that the tests pass.

## Final Notes

Do NOT create or modify the snapshot objects manually. Use auto-update mode even for seemingly trivial changes. The generated snapshot may not reflect the actual object identically. Some modifications have been made to achieve cross-compatibility (e.g. white space standardization).

Running any snapshot test with auto-update mode enabled can lead to false positive results since comparison failures, if any, are suppressed. This further underscores the need to run the test suite WITHOUT auto-update mode enabled to truly test the system.

In general, only the lines that are modified should be changed. However, since there are some forms of standardization such as white spacing, sometimes multiple (seemingly unrelated) lines may be affected due to changes in the indentation, and as such it is not a cause for concern. An example of this is shown below:

```html
<div>
  <span>
    <img>
  </span>
</div>
```

being changed to

```html
<div>
  <div>
    <span>
      <img>
    </span>
  </div>
</div>
```

Happy Testing!
# Static Analysis

TEAMMATES uses a number of static analysis tools in order to maintain code quality.
This document will cover an overview of these tools and how to run them in local environment.

- [Version numbers](#version-numbers)
- [Tool stack](#tool-stack)
- [Suppressing rules](#suppressing-rules)
- [Running static analysis](#running-static-analysis)

## Version numbers

The version number of all the tool stacks are declared in `build.gradle` or `package.json`.

## Tool stack

| Tool name | Ruleset |
| --- | --- |
| [CheckStyle](http://checkstyle.sourceforge.net/) | [`teammates-checkstyle.xml`]((../static-analysis/teammates-checkstyle.xml)) |
| [PMD](https://pmd.github.io/) | [`teammates-pmd.xml`](../static-analysis/teammates-pmd.xml), [`teammates-pmdMain.xml`](../static-analysis/teammates-pmdMain.xml) |
| [SpotBugs](https://spotbugs.github.io/) | [`teammates-spotbugs.xml`](../static-analysis/teammates-spotbugs.xml) |
| [ArchUnit](https://github.com/TNG/ArchUnit) | - |
| [TSLint](https://palantir.github.io/tslint/) | [`teammates-tslint.yml`](../static-analysis/teammates-tslint.yml) |
| [JSONlint](https://github.com/marionebl/jsonlint-cli) | - |
| [stylelint](http://stylelint.io) | [`teammates-stylelint.yml`](../static-analysis/teammates-stylelint.yml) |
| [lintspaces](https://github.com/evanshortiss/lintspaces-cli) | - |

## Suppressing rules

Not all rules from all static analysis tools need to be followed 100% of the time; there are times where some rules need to be broken for various reasons.
Most of the static analysis tools we use allow for such leeway through various means.

General rule of thumb when suppressing rules:
- The suppression should be as specific as possible, e.g. specific rule, specific scope (lines/methods/classes)
- The rule must be re-enabled after the suppression is no longer necessary
- The reason for violating the rule should be explained

## Running static analysis

> Note the following:
> - Change `./gradlew` to `gradlew.bat` in Windows.
> - All the commands are assumed to be run from the root project folder, unless otherwise specified.

| Tool name | Command |
| --- | --- |
| CheckStyle | `./gradlew checkstyleMain`, `./gradlew checkstyleTest` |
| PMD | `./gradlew pmdMain`, `./gradlew pmdTest` |
| SpotBugs | `./gradlew spotbugsMain`, `./gradlew spotbugsTest` |
| ArchUnit | `./gradlew architectureTest` |
| TSLint | `npm run lint:ts` |
| JSONlint | `npm run lint:json` |
| stylelint | `npm run lint:css` |
| lintspaces | `npm run lint:spaces` |

To run all static analysis tasks in one sitting, run the following two commands:
```sh
./gradlew lint --continue
npm run lint
```
# Developer Troubleshooting Guide

This document can help you to fix the common problems encountered while contributing to TEAMMATES.
Note that some of the screenshots might be outdated, but the instructions will remain the same and all necessary modifications will be explained.

* [Troubleshooting project setup](#troubleshooting-project-setup)
    * [Common setup errors and solutions](#common-setup-errors-and-solutions)
* [Troubleshooting test failures](#troubleshooting-test-failures)
    * [Common test errors and solutions](#common-test-errors-and-solutions)
* [Submitting help request](#submitting-help-request)

## Troubleshooting project setup

### Common setup errors and solutions

* **ERROR**: After downloading and installing Google Cloud SDK, running any `gcloud` command results in `gcloud: command not found` or alike.

  **REASON**: You did not choose to update the `PATH` variable when installing the SDK.

  **SOLUTION**: You can re-run the install command again without any side effect. Make sure to choose to update the `PATH` variable this time. Alternatively, you can use other appropriate methods to update your `PATH` variable to include the `/bin` sub-folder of the SDK folder.<br>
  To verify this, try running any `gcloud` command and it should now give you access to the SDK.

## Troubleshooting test failures

### Common test errors and solutions

* **ERROR**: Encountered `java.net.ConnectException: Connection refused` when running some tests.

  **SOLUTION**: Ensure that your dev server is started prior to running those tests.

* **ERROR**: Encountered `org.openqa.selenium.WebDriverException: Unable to bind to locking port 7054 within 45000 ms` when running tests with Browser.

  **SOLUTION**: Ensure compatible version of Firefox is installed as specified under [Development process document](development.md#testing).

* **ERROR**: Test failure message encountered when running full test suite: "Selenium cannot find Firefox binary in PATH".

  **REASON 1**: Path to Firefox executable on local machine is incorrect.

  **SOLUTION 1 (on Windows)**: Specify the correct folder in system PATH variable.

  Open Windows Explorer → Right-click on Computer → Advanced System Settings → "Advanced" tab → Environment Variables… → Select "PATH" from the list → Add directory of "Mozilla Firefox" folder to "Variable value" field.

  **REASON 2**: Incorrect custom path in `test.firefox.path`.

  **SOLUTION 2**: Make sure that the path is set correctly following the example from `test.template.properties`.

* **ERROR**: A handful of failed test cases (< 10).

  **SOLUTION**: Re-run the failed tests with TestNG, all test cases should pass eventually (it may take a few runs). If there are tests that persistently fail and not addressed in other parts of this guide, you may [request for help in the issue tracker](https://github.com/TEAMMATES/teammates/issues/new?template=help-request.md).

* **ERROR**: Tests fail due to accented characters.

  **SOLUTION**: Ensure that the text file encoding for your workspace has been set to `UTF-8` as specified under [Setting up guide](setting-up.md).

* **ERROR**: `InstructorCourseDetailsPageUiTest` fails in production server due to Gmail's access restriction (e.g `javax.mail.AuthenticationFailedException`)

  **SOLUTION**: ["Allow access for less secure apps"](https://support.google.com/accounts/answer/6010255?hl=en) for the accounts used in that particular test. As doing so will leave the accounts more vulnerable to security issues, it is strongly recommended that the access is revoked after the test passes.

* **ERROR (on Linux)**: `java.io.IOException: Directory "/tmpfiles" could not be created`.

   **SOLUTION**: Add `-Djava.io.tmpdir=/path/to/teammates/tmp` for the tests' run configurations. The "tmp" folder in the specified directory needs to be created before running the tests.

## Submitting help request

If none of the items in this guide helps with the problem you face, you can [post in the issue tracker](https://github.com/TEAMMATES/teammates/issues/new?template=help-request.md) to request for help. Remember to supply as much relevant information as possible when requesting for help.
# Coding Best Practices

## Quality

Maintainability is our top priority. Less is more. Prefer simple over complex.

## Style

The goal is to make the code as if it was written by one person.

* Prefer standard way of doing something over creating special cases.
* Try to be consistent with the existing code in naming, layout etc.
* Follow coding style guides as much as possible. Most of the static analysis tools will enforce those styles, but not all.

## Refactoring

* Follow the [boy scout rule](https://medium.com/@biratkirat/step-8-the-boy-scout-rule-robert-c-martin-uncle-bob-9ac839778385) (i.e. always leave the campground cleaner than you found it). Whenever you touch some code, e.g. to fix a bug, try to do some clean up of that code as well.
  But do the extra refactoring as a separate issue. One issue should fix only one thing.

## Code Comments

* Use comments ONLY when the code is not-self explanatory. Avoid redundant comments. Even comment elements such as `@return` and `@param` can be omitted if they do not add value.
* Comments should be well-written. They should not be written as 'note to self' of the developer, but as explanations to help the reader.
* Write header comments for all classes.
* Write header comments for all non-trivial public methods.

## User-visible text

Make sure the terminology used is understandable to users.

## Issue tracking

* Everything you do for the project, even non-coding tasks, should be recorded in the issue tracker.
* Use a descriptive issue name with a well-defined scope. `Improve DevMan` is not good because the scope is not clear (improve in what way?). `Add issue name convention to the DevMan` is a better name.
* All ongoing work should be reflected in the tracker correctly. The issue tracker should clearly show which issues are being handled at the moment, which are ready for review, etc. Use status labels (`s.*`) appropriately.
* Resist the urge to do more than one task under one issue/PR unless they are tightly coupled and one cannot be done without the other. Specifically, do not do refactorings unrelated to the fix. Instead, create a new issue and do as a separate PR.

  Reason: Occasionally we have to 'undo' fixes done previously, e.g. when we discover latent regressions introduced by that fix. Therefore, we should be able to undo any specific fix by reverting the merge commit of the relevant branch. If one branch merge brings in multiple fixes, we cannot undo one without the other.
* Small issues are better than big ones. Big issues take longer to finish and have a higher risk of merge conflicts.

## Revision control

Go through your change set before pushing it. Ensure all changes are as intended.

## Security

* When coding the UI (web pages), any user-entered value (e.g. course name) should be sanitized before displaying it back. This is to minimize cross-site scripting.
# Data Migration Best Practices

Data migration is necessary when a new, possibly backwards-incompatible, schema is introduced in the code base.

* [Making code work for both schemas](#making-code-work-for-both-schemas)
* [Interchangeability between consecutive versions](#interchangeability-between-consecutive-versions)

## Making code work for both schemas

Initially, the breaking change should be written such that it works for both the old data schema and the new data schema. This can be done in two ways:

* Using [Objectify lifecycle annotation `@OnLoad`](https://github.com/objectify/objectify/wiki/LifecycleCallbacks)
  * In this lifecycle call, one could convert data in the old schema to the new schema.
  * However, it would be difficult to write client script to migrate the old schema to the new schema as all entities loaded by Objectify in the client script will be in new data schema because of the lifecycle call. Therefore, it is hard to differentiate the data in old schema and the data in new schema.

* Using Getter and Setter
  * This is the **recommended** way to convert data from the old schema to the new schema. It allows you to storage data in the new schema without knowing the underlying data schema.
  * In doing this, data migration script can use Java Reflection to determine whether it is old data or not and convert it accordingly.

## Interchangeability between consecutive versions

It is undeniable that the version using old data schema should be interchangeable with the immediate next version using the new data schema. This is why it is important to write code that works for both schemas.

In addition, it is also important to make sure the code work for both the version tailored for the old data schema and the **immediate** next version without hacks of the old schema.

For example, a field `isInNewDataSchema` is introduced to take care of the old schema. It will be imprudent to remove the field in the immediate next version after the client script is run as all data generated by the new version will have this field missing and be *wrongly* treated as data in old schema in the old version.
In the immediate next version, the field should be marked to `true` although it has no usage. In the version after the immediate next version, the field can be safely removed. That is, we should make any two consecutive versions interchangeable at **ALL** times.
# Testing Best Practices

The goal is to make the system as fully covered by automated tests as possible.

## General guidelines

* **Try TDD**: Try to follow Test Driven Development (TDD). In particular, when fixing a bug, write the test case first before fixing it.
* **Write independent tests**: A test should have minimal to zero impact to global state/other tests that are running (possibly in parallel).
* **Write short tests**: It is better to have many `@Test`/`it` methods than to group all testing into one `@Test`/`it` method. This helps in debugging and rerunning failed tests.
* **Avoid redundant tests**: Be mindful of the cost of running a test. Do not add redundant tests.
* **Strive for 100% coverage**: Try to write tests to cover 100% of the functional code you wrote. We have configured JaCoCo for Java and Istanbul for TypeScript for your usage.
* **Coverage is not enough**: Be mindful of missing test cases (e.g., boundary values). Just because you have 100% coverage does not mean the code is error free. You could have missed execution paths in the test and in the SUT at the same time.
* **Test at different levels**: Test units at unit level. Do not attempt to test lower level components from higher level functionality.
* **Testing private methods**: It is OK to omit testing private methods if they are fully covered by tests written against public methods of the same class. If the private method is complex enough to warrant its own test method, you can use reflection to access the private method from the test class.
# UI Design Best Practices

The goal is to make the user guide unnecessary.

## Be forgiving in processing input

* Forgive extra blank lines and extra white space.
* Auto-correct if possible.
* Allow 'cancel' at any step where it makes sense.

## Be descriptive

* Errors should be explained in as much details as possible. Also explain how to correct it.
* After an action, give a description of what happened, e.g. after a mass enroll operation, you can explain which students were added, which were modified, and how many remained the same.
* Keep user informed of what is happening, e.g. inform user about sending emails to users.
* Disable (rather than hide) unavailable functions so that users know they exist.

## Minimize work (to be done by the user)

User convenience is **far** more important than developer convenience, e.g.

* Submitting a page should take the user to the next logical page while showing feedback about the previous action at the same time.
* When possible, give an 'undo' instead of asking to confirm every action.
* Use defaults so that users are not forced to enter values for each field. This applies to sorting as well (i.e. sort by default using the most likely sorting order).
* If only one option is available, choose it by default.

## Take user point of view

* Use terms from user domain.
* Use terms that show 'user intent' rather than mechanism, e.g. 'leave this course' instead of 'delete'.

## Be consistent

Use consistent naming guidelines for link, page name, page title.
This is not a picture! Btw dont waste your time reading this... (~.~)User-agent: *
Disallow: /page/
Sitemap: http://teammatesv4.appspot.com/sitemap.xml/**
/**
//cloud.google.com/appengine/docs/standard/java/tools/remoteapi">https://cloud.google.com/appengine/docs/standard/java/tools/remoteapi</a>
//", "");
// Dev Server doesn't require credential.
// Your Google Cloud SDK needs to be authenticated for Application Default Credentials
// in order to run any script in production server.
// Refer to https://developers.google.com/identity/protocols/application-default-credentials.
/**
/**
// script-like, not meant to be instantiated
/**
// the folder where the cursor position and console output is saved as a file
// 100 is the optimal batch size as there won't be too much time interval
// between read and save (if transaction is not used)
// cannot set number greater than 300
// see https://stackoverflow.com/questions/41499505/objectify-queries-setting-limit-above-300-does-not-work
/*
// buffer of entities to save
/**
/**
/**
/**
/**
//cloud.google.com/appengine/docs/standard/java/datastore/transactions#what_can_be_done_in_a_transaction">What can be done in a transaction</a>
//cloud.google.com/appengine/docs/standard/java/tools/remoteapi#transaction-efficiency">Transactions are less efficient</a>
/**
/**
/**
// the read place a "lock" on the object to migrate
// even transaction is enabled, there is no need to use transaction in preview mode
// migrate
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// scanning won't do write operation
// scanning won't do write operation
/**
// if file doesnt exists, then create it
/**
// update students and instructors
// recreate account and student profile
/**
/**
/**
/**
// if the user uses his own email address to register Google Services, the googleId is his own email address
// if the user registers a Google Account (e.g. 'alice@gmail.com'),
// the googleId is the string before '@gmail.com' (e.g. 'alice')
/**
// script-like, not meant to be instantiated
// CHECKSTYLE.OFF:SingleSpaceSeparator vertical alignment of values for readability
// CHECKSTYLE.ON:SingleSpaceSeparator
/**
// will approximately occupy 100MB memory space
/**
/**
/**
/**
// cannot set number greater than 300
// see https://stackoverflow.com/questions/41499505/objectify-queries-setting-limit-above-300-does-not-work
/**
/**
/**
/*
// utility class
/**
// parse courseToInstituteCacheFile
/**
/**
// parse metadata
// parse institutesStats
// construct bundle
/**
// save metadata
// save institutesStats
// false positive
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// time when TEAMMATES project begins
/**
// generate stats incrementally
// construct queries
// generate institute stats by scanning student entities
// generate institute stats by scanning account (instructor) entities
/**
/** The value of "client.target.url" in client.properties file. */
// access static fields directly
//localhost:[0-9]+(/.*)?");
/**
/**
/**
/**
/**
/**
/**
// Not necessary as BackDoor API is used instead
// Not necessary as BackDoor API is used instead
// Not necessary as BackDoor API is used instead
// Not necessary as BackDoor API is used instead
// BackDoor.getAccount(googleId);
// BackDoor.getStudentProfile(studentProfileAttributes.googleId);
// BackDoor.getFeedbackQuestion(courseId, feedbackSessionName, qnNumber);
// BackDoor.getFeedbackResponse(fr.feedbackQuestionId, fr.giver, fr.recipient);
// BackDoor.getFeedbackSession(courseId, feedbackSessionName);
// BackDoor.getInstructorByEmail(instructorEmail, courseId);
// BackDoor.getEncryptedKeyForInstructor(courseId, instructorEmail);
// BackDoor.getStudent(student.course, student.email);
// BackDoor.putDocuments(testData);
/**
/**
// no test data used in this test
/**
/**
/**
///" + new File(".").getCanonicalPath() + "/"
/**
//ignore and try to logout and login again if fail.
// logout and attempt to load the requested URL. This will be
// redirected to a dev-server/google login page
// This workaround is necessary because the front-end has not been optimized
// to enable masquerade mode yet
// login based on the login page type
// After login, the browser should be redirected to the page requested originally.
// No need to reload. In fact, reloading might results in duplicate request to the server.
/**
/**
/**
/**
/**
/**
/**
/**
// no test data used in this test
// this test does not require any browser
/**
//www.iana.org/time-zones";
// no test data used in this test
// ensure the front-end and the back-end have the same timezone database version
// Show diff when running test in Gradle
// ensure the timezone databases are up-to-date
// find the release day
// This will process raw offset strings, e.g. Zone1 1 Zone2 -2 Zone3 3 ... to:
// Zone1 1
// Zone2 -2
// Zone3 3
// ...
// to facilitate easy diff-ing when the need arises
/**
/**
/**
/**
/**
/**
// Write data to the file; overwrite if it already exists
/**
/**
// Write headers and data to the CSV file
/**
/**
/**
/**
/**
// Add result collector to the test plan for generating results file
// Run JMeter Test
// TODO: As mentioned in the docs, good to fail the test if there is an Exception, or if the `success` value of
//  requests is `false`. An example of when this occurs is if the JMeter test properties are not set or if `email`
//  is used for logging in instead of `googleid`. Tests should fail if this assertion fails:
//      assertTrue(resultsErrorRate < this.getAcceptableErrorRate());
/**
/**
/**
/**
// Create a course for each instructor
// Create and add student enrollment data with a team number corresponding to each section number
// Add HTTP sampler for test endpoint
/**
// There is no need to add the newly enrolled students to the JSON DataBundle#students. This is because the new
// CourseStudent entities that were created are automatically deleted when the corresponding course is deleted.
/**
/**
// "googleId" is used for logging in, not "email"
// Add HTTP sampler for test endpoint
// TODO: Generate summary report from .jtl results file + ReportGenerator, and log to console:
//  Replace "summariser.out" with Reporter.log("JMeter summary: ", true);
//  Also, consider displaying the link to the JMeter HTML report.
/**
/**
// <class name, package name>
/**
/**
// If the package name is in TestNG in the form of <package name="teammates.test.cases.package.name" />
// then files in the current directory are excluded because the whole package would be tested by TestNG.
/**
/**
/**
//code.google.com/p/selenium/wiki/PageObjects">https://code.google.com/p/selenium/wiki/PageObjects</a>
/** Browser instance the page is loaded into. */
/** Firefox change handler for handling when `change` events are not fired in Firefox. */
/**
//legit firefox
// To minimize test failures due to eventual consistency, we try to
//  reload the page and compare once more.
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Possible exploration: Change to listening to modal shown event as
// this is based on the implementation detail assumption that once modal-backdrop is added the modal is shown
// Possible exploration: Change to listening to modal hidden event as
// this is based on the implementation detail assumption that once modal-backdrop is removed the modal is hidden
/**
/**
/**
/**
// This method is a close mirror of HtmlUnitWebElement#clear(), except that events are not handled. Note that
// HtmlUnitWebElement is mirrored as opposed to RemoteWebElement (which is used with actual browsers) for convenience
// and the implementation can differ.
// Adapted from ExpectedConditions#stalenessOf which forces a staleness check. This allows a meaningful
// StaleElementReferenceException to be thrown rather than just getting a boolean from ExpectedConditions.
// Fail safe in case the implementation of staleness checks is changed
// It is important that a text box element is clickable before we fill it but due to legacy reasons we continue
// attempting to fill the text box element even if it's not clickable (which may lead to an unexpected failure
// later on)
// If the intended value is empty `clear` works well enough for us
// Otherwise we need to do special handling of entering input because `clear` and `sendKeys` work differently.
// See documentation for `clearAndSendKeys` for more details.
// Add event hook before blurring the text box element so we can detect the event.
// blur the element to receive events
// Although events should not be manually fired, the `change` event does not fire when text input is changed if
// Firefox is not in focus. Setting profile option `focusmanager.testmode = true` does not help as well.
// A temporary solution is to fire the `change` event until the buggy behavior is fixed.
// More details can be found in the umbrella issue of related bugs in the following link:
// https://github.com/mozilla/geckodriver/issues/906
// The firing of `change` event is also imperfect because no check for the type of the elements is done before firing
// the event, for instance a `change` event will be wrongly fired on any content editable element. The firing time of
// `change` events is also incorrect for several `input` types such as `checkbox` and `date`.
// See: https://developer.mozilla.org/en-US/docs/Web/Events/change
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Note: Should first check if the button can actually dismiss the modal otherwise the state will be consistent.
// However, it is too difficult to check.
/**
//github.com/w3c/webdriver/issues/1005">Missing "scroll into view" Actions primitive</a>.
// TODO: migrate to `scrollIntoView` when Geckodriver is adopted
/**
/**
/**
/**
/**
/**
/**
/**
/**
// The `change` event is fired with bubbling enabled to simulate how browsers fire them.
// See: https://developer.mozilla.org/en-US/docs/Web/Events/change
/**
/**
// TODO change this to private once all legacy UI tests are migrated
/**
/**
/**
/**
/**
/**
/**
// Allow CSV files to be download automatically, without a download popup.
// This method is used because Selenium cannot directly interact with the download dialog.
// Taken from http://stackoverflow.com/questions/24852709
/**
// This class is implemented as a Singleton class.
// The reason we're not implementing this class as static because we want to use wait() and notify().
/**
// +1 in case a sequential ui test uses a browser other than the first in pool
/**
/**
// Synchronized to ensure thread-safety
// Synchronized to ensure thread-safety
// Look for instantiated and available object.
// If less than capacity, create new object
// Wait if no more free objects and no more capacity.
/**
/**
/**
// the login panel will have attribute `aria-busy="true"` while in animation
//div[contains(text(), 'Use another account')]");
/**
// The load state of this page cannot be determined using Angular testability
// as there is a setInterval operation in the page (for the testimonial container),
// which causes Angular testability to never stabilize as per their specification.
//
// Since this page is a static page, we can fall back to the old way of
// just checking the document.readyState variable.
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Utility class
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// assume user is authenticated before
// touch one API endpoint to check authentication
// existing credential missing or not working, should do authentication for the account again
/**
/**
/**
// While we are not actually sending or receiving an email, a session is required so there will be strict parsing
// of address headers when we create a MimeMessage. We are also passing in empty properties where we are expected to
// supply some values because we are not actually sending or receiving any email.
/**
/*")) {
/**
// as per the RFC2046 specification, other multipart subtypes are recognized as multipart/mixed
/*");
/**
// search in reverse order as a multipart/alternative should have their most preferred format last
// Since we are looking in reverse order, if we did not encounter a text/html first we can return the plain
// text because that is the best preferred format that we understand. If a text/html comes along later it
// means the agent sending the email did not set the html text as preferable or did not set their preferred
// order correctly, and in that case we do not handle that.
/*") || bodyPart.isMimeType("message/rfc822")) {
// we do not know how to handle the text in the multipart or there is no text
/*")) {
/*")) {
//*If prompted to log in
/*If prompted to log in
/**
/** Global instance of the JSON factory. */
/** Global instance of the HTTP transport. */
/**
/**
// if the scopes need to change, the user will need to manually delete
// <TestProperties.TEST_GMAIL_API_FOLDER>/StoredCredential
/**
/**
//jmeter.apache.org/usermanual/component_reference.html">Apache JMeter: Component Reference</a></p>
// Utility class
// Intentional private constructor to prevent instantiation
/**
/**
/**
/**
/**
/**
/**
/**
//localhost:8080/webapi/auth");
/**
/**
// Find regex matches in response headers
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// This class prioritizes methods based on the following:
// 1) Orders methods based on package name as ordered/found in testng.xml
// 2) Orders methods based on package name in lexical order
// 3) Orders methods by class priority e.g. Add "@Priority(1)" to class
// 4) Orders methods by class name in lexical order
// 5) Orders methods by priority e.g. Add "@Priority(1)" to method
/**
/** The directory where the L&P test data files are stored. */
/** The directory where the L&P test configuration files are stored. */
/** The directory where the L&P test results are stored. */
/** The directory where HTML files for testing pages are stored. */
/** The directory where HTML files for testing email contents are stored. */
/** The directory where JSON files used to create data bundles are stored. */
/** The value of "test.app.url" in test.properties file. */
/** The version number of the application under test. */
/** The Google ID of the test instructor account. */
/** The password of the test instructor account. */
/** The Google ID of the first test student account. */
/** The password of the first test student account. */
/** The Google ID of the second test student account. */
/** The password of the second test student account. */
/** The Google ID of the test admin account. */
/** The password of the test admin account. */
/** The Google ID of the test unregistered account. */
/** The password of the test unregistered account. */
/** The value of "test.csrf.key" in test.properties file. */
/** The value of "test.backdoor.key" in test.properties file. */
/** The value of "test.selenium.browser" in test.properties file. */
/** One of the allowed values of "test.selenium.browser" in test.properties file. */
/** One of the allowed values of "test.selenium.browser" in test.properties file. */
/** The value of "test.firefox.path" in test.properties file. */
/** The value of "test.chromedriver.path" in test.properties file. */
/** The value of "test.geckodriver.path" in test.properties file. */
/** The value of "test.timeout" in test.properties file. */
/** The value of "test.persistence.timeout" in test.properties file. */
/** The value of "test.jmeter.home" in test.properties file. */
/** The value of "test.jmeter.properties" in test.properties file. */
/** The directory where credentials used in Gmail API are stored. */
// access static fields directly
//localhost:[0-9]+(/.*)?");
/**
// use builder to construct query
/**
/**
/**
/**
//TODO: [CourseAttribute] remove desanitization after data migration
//creating a new course with possibly desanitized name as course name cannot be accessed directly
/**
/**
/**
/**
/**
/**
/**
/**
/**
//TODO: [CourseAttribute] remove desanitization after data migration
//desanitization is applied to course name to ensure a well-defined order of the courses by course name
/**
/**
/**
/**
// booleans represent: isValidGiver?, isValidRecipient? isValidViewer?
// Strings represents: option shown in giver select box, option shown in recipient select box,
// text displayed during feedback submission respectively.
//used to generate options for MCQ & MSQ:
// Used by feedbackResponseComment:
/**
/**
/**
/**
// Fallthrough
// Fallthrough
// Fallthrough
// Fallthrough
// Fallthrough
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Sorts by studentName
// Sorts by teamName
// Compare between instructor and student
// Instructor should be at higher order compared to student
// Team 1 has higher sorting order when team 1 belongs instructor and team 2 belongs to student
// -1 represents team 1 is at higher order
// Team 2 has higher sorting order when team 2 belongs instructor and team 1 belongs to student
// 1 represents team 2 is at higher order
// Both teams belong to instructor
// Therefore team name 1 and 2 are the same, which is indicated by 0
// Both teams belong to student
// Compare on team names
// Sorts by teamName > studentName
/**
/**
/**
/**
/**
/**
/**
// For contribution questions.
// Key is questionId, value is a map of student email to StudentResultSumary
// Key is questionId, value is a map of team name to TeamEvalResult
/*
// Sorts by giverName > recipientName > qnNumber
// General questions and team questions at the bottom.
// Sorts by giverName > recipientName
// Sorts by teamName > giverName > recipientName > qnNumber
// Sorts by recipientName > giverName > qnNumber
// Sorts by teamName > recipientName > giverName > qnNumber
// Sorts by giverName > question > recipientTeam > recipientName
// Sorts by giverTeam > giverName > question > recipientTeam > recipientName
// Sorts by recipientName > question > giverTeam > giverName
// Sorts by recipientTeam > recipientName > question > giverTeam > giverName
// Sorts by recipientTeam > question > recipientName > giverTeam > giverName
// Sorts by giverTeam > question > giverName > recipientTeam > recipientName
// Sorts by recipientName > recipientEmail > giverName > giverEmail
// We change user email to team name here for display purposes.
// for TEAMS giver type, for older responses,
// the giverEmail is stored as the student giver's email in the database
// so we convert it to the team name for use in FeedbackSessionResultsBundle
// Copy the data before hiding response recipient and giver.
// unlike emailTeamNameTable, emailLastNameTable and emailTeamNameTable,
// roster.*Table is populated using the CourseRoster data directly
/**
// Hide recipient details if its not visible to the current user
// recipient type for self-feedback is the same as the giver type
// Hide giver details if its not visible to the current user
/**
/**
/**
// return person name if participant is a student
// return person name if participant is an instructor
// return team name if participantIdentifier is a team name
// return team name if participant is team identified by a member
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// use giver type to determine recipients if recipient is "self"
// TODO code duplication between this function and in FeedbackQuestionsLogic getRecipientsForQuestion
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// response.getResponseDetails().getAnswerHtml(response, question, this);
/**
/**
/**
/**
// An email must at least contains '@' character
/*
// TODO consider removing this to increase cohesion
// TODO: make responses to the student calling this method always on top.
/**
// sorts the questions by its natural ordering, which is by question number
// sorts the questions by its natural ordering, which is by question number
/**
/**
/**
/**
/**
/**
/**
/**
// There is a response not written by the student
// which is visible to the student
// There is a response comment visible to the student
/**
// Make class feedback always appear on top, and team responses at bottom.
/**
/**
/**
// If a instructor is also a student, the response should be considered as student's response.
/**
// getSectionFromRoster will return NO_SPECIFIC_SECTION for recipient who is Instructor or Nobody specific.
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// prevents instantiation; to be instantiated as children classes
/**
/**
/**
/**
/** The normalized 'claimed contribution' value to be shown to the instructor. */
/** The normalized 'perceived contribution' value to be shown to the instructor. */
/**
/**
/**
/** submitted value is uninitialized. */
/** submitted 'Not SUre'. */
/** did Not SuBmit. */
/** submission values originally from students of the team. */
/** submission values to be shown to instructor (after normalization). */
/** average perception of team shown to instructor. Excludes self evaluations */
/** team perception shown to students. denormalized to match their own claims */
/** the values that were used to calculate normalizedAveragePerceived values. */
// List of student email's.
// The index of the student in the list is used as the index for the int arrays.
// The 2d int arrays are of the format [giverIndex][recipientIndex]
/*This is the only method that should be public. However, many of the
/**
// remove from each array values matching special values in the other
// if the student did not submit
// TODO: methods like these private and use reflection to test
// TODO: make this private and use reflection to test
// TODO: make this private and use reflection to test
// omit calculation if no data points
/** replaces 999 etc. with NA, NSB, NSU etc.
/**
/**
/**
/**
/**
// No validation for isInstructor and createdAt fields.
/**
/**
/**
/**
/**
/**
/**
/**
// no additional sanitization required
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/** NOTE: Only use this to match and search for the ID of a known existing question entity. */
/**
/*
// These can't be changed anyway. Copy values to defensively avoid invalid parameters.
// There are `FeedbackTextQuestion` with plain text, Json without `recommendedLength`, and complete Json
// in data store. Gson cannot parse the plain text case, so we need to handle it separately.
/**
/**
/**
/**
/**
/**
// questionDescription can be null
/**
/**
// nothing to sanitize before saving
// For Text questions, the questionText simply contains the question, not a JSON
// This is due to legacy data in the data store before there are multiple question types
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Determines the type of comment giver- instructor, student, or team
// true if comment is given by response giver
/**
/**
/**
// Converts image in comment text to link.
/**
//TODO: handle the new attributes showCommentTo and showGiverNameTo
/**
/**
/**
/**
/**
/**
/**
// Compares end times
// If the end time is same, compares start times
// If both end and start time is same, compares session name
/**
// Check for null fields.
// Early return if any null fields
// Early return if any null fields
// If now and start are almost similar, it means the feedback session
// is open for only 24 hours.
// Hence we do not send a reminder e-mail for feedback session.
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// id is allowed to be null when the student is not registered
/**
/**
/**
/**
/**
/**
/**
/**
/**
// google id can be set to null
/**
/**
// accept empty string values as it means the user has not specified anything yet.
// No validation for modified date as it is determined by the system.
// No validation for More Info. It will properly sanitized.
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Add two empty options by default
// TODO
/**
/**
/**
/**
/**
// Constant sum has two options for user to select.
/**
//[1, 2, 3] format
//remove []
// distribute to recipient must have array size one
// difficult to do cross-responses validation
//Check that all points are >= 0
//Check that points sum up properly
//Check that points are given unevenly for all/at least some options as per the question settings
/**
//for instructor, only question view has stats.
//Student view of stats.
//List of teams with at least one response
//Each team's member(email) list
//Each team's responses
//Get each team's submission array. -> int[teamSize][teamSize]
//Where int[0][1] refers points from student 0 to student 1
//Where student 0 is the 0th student in the list in teamMembersEmail
//Each team's contribution question results.
//List of teams visible to the instructor and in the selected section
//Each team's member(email) list
//Each team's responses
//Get each team's submission array. -> int[teamSize][teamSize]
//Where int[0][1] refers points from student 0 to student 1
//Where student 0 is the 0th student in the list in teamMembersEmail
//Each team's eval results.
//Each person's results summary
//Check visibility of recipient
// TODO
//List of teams visible to the instructor and in the selected section
//Each team's member(email) list
//Each team's responses
//Get each team's submission array. -> int[teamSize][teamSize]
//Where int[0][1] refers points from student 0 to student 1
//Where student 0 is the 0th student in the list in teamMembersEmail
//Each team's eval results.
//Each person's results summary
//Check visibility of recipient
// Replace all Unset values
//For sorting purposes
/**
/**
//Initialize all as not submitted.
//Fill in submitted points
// skip instructors team (contrib questions should only have responses from student teams)
/**
// Valid answers: 0, 10, 20, .... 190, 200
// giver type can only be STUDENTS
// recipient type can only be OWN_TEAM_MEMBERS_INCLUDING_SELF
// restrictions on visibility options
/*
/**
/**
// Not sure, Equal Share, Not Submitted
// Negative share
// Positive share
/**
// Do more
// Do same
// Do less
// Do none
/**This is the claimed points from giver to recipient.
/**
// Not used for contribution question, due to calculations required. See corresponding function below.
// Need to get actual team name and giver/recipient emails here,
// only for getting the responseAnswer.
// TODO: check if this can be made non-static
// Valid answers: 0, 10, 20, .... 190, 200
// Do not add weight to mcqWeights if the weight cannot be parsed
// Do not assign value to mcqOtherWeight if the weight can not be parsed.
// TODO change this when implementing "other, please specify" field
// Create MCQ options
// Create MCQ weights
// Create MCQ other weight value
// Add two empty options by default
// Do not calculate weighted percentage if weights are not enabled.
// If weights are allowed, show the corresponding weights of a choice.
// If weights are assigned, create the per recipient statistics table,
// otherwise pass an empty string in it's place.
// Sort the list of responseAttributes based on recipient team and recipient name.
// TODO
// Add the Response Summary Statistics to the CSV String.
// If weights are assigned, add the 'Per Recipient Statistics' to the CSV string.
// If there are Empty Mcq options entered trigger this error
// If weights are enabled, number of choices and weights should be same.
// If user enters an invalid weight for a valid choice,
// the mcqChoices.size() will be greater than mcqWeights.size(),
// in that case, trigger this error.
// If weights are not enabled, but weight list is not empty or otherWeight is not 0
// In that case, trigger this error.
// If weights are enabled, but other option is disabled, and mcqOtherWeight is not 0
// In that case, trigger this error.
// If weights are enabled, and any of the weights have negative value,
// trigger this error.
// If 'Other' option is enabled, and other weight has negative value,
// trigger this error.
//If there are duplicate mcq options trigger this error
/**
/**
/**
// Replace the value by the actual weighted percentage.
/**
/**
/**
// Get the weight of the choice.
// Add the total weight of all responses of this choice to total.
/**
/**
// If weights are assigned, CSV file should include 'Weight' and 'Weighted Percentage' column as well.
/**
/**
// Add each column data in fragments
/**
/**
/**
/**
// construct default value for responseCount
// update responseCount here
// Generate Recipient Response statistics for csv files.
/**
// Get the response attributes sorted based on Recipient Team name and recipient name.
// Generate Recipient Response statistics for result page.
/**
/**
// Generate HTML for all <td> entries using template
//content of other field if "other" is selected as the answer
/*
/*
// if other option is not selected and selected answer is not part of Mcq option list trigger this error.
// if other option is selected but not text is provided trigger this error
// answer given by the student
// "1" (other is selected) or "0" (other is not selected)
// Do not add weight to msqWeights if the weight cannot be parsed
// Do not assign value to msqOtherWeight if the weight can not be parsed.
// Delete responses if max selectable restriction is newly added
// Delete responses if min selectable restriction is newly added
// A more strict min selectable choices restriction is placed
// A more strict max selectable choices restriction is placed
// additional checkbox for user to submit a blank response ("None of the above")
// additional checkbox for user to submit a blank response ("None of the above")
// Create MSQ weights
// Create MSQ other weight value
// Add two empty options by default
// Do not calculate weighted percentage if weights are not enabled.
// If weights are allowed, show the corresponding weights of a choice.
// Reuse Mcq result template until there is any reason to use a separate template.
// If weights are assigned, create the per recipient statistics table,
// otherwise pass an empty string in it's place.
// Sort responses based on recipient team and recipient name.
// Reuse Mcq result template until there is any reason to use a separate template.
// Reuse MCQ result templates until there is a reason to use separate templates.
// TODO
// Create 'Per recipient Stats' for csv if weights are enabled.
// Get the response attributes sorted based on Recipient Team name and recipient name.
// Add per recipient stats to csv string
// If there are Empty Msq options entered trigger this error
// If weights are enabled, number of choices and weights should be same.
// If a user enters an invalid weight for a valid choice,
// the msqChoices.size() will be greater than msqWeights.size(), in that case
// trigger this error.
// If weights are not enabled, but weight list is not empty or otherWeight is not 0
// In that case, trigger this error.
// If weight is enabled, but other option is disabled, and msqOtherWeight is not 0
// In that case, trigger this error.
// If weights are negative, trigger this error.
// If 'Other' option is enabled, and other weight has negative value,
// trigger this error.
//If there are duplicate mcq options trigger this error
/**
/**
/**
/**
// we will only show stats if there is at least one nonempty response
/**
/**
/**
// remove other answer temporarily to calculate stats for other options
// Answer string is empty when 'None of the above' option is selected,
// in that case, don't count that response.
// restore other answer if any
/**
// construct default value for responseCount
// update responseCount here
/**
// Generate HTML for all <td> entries using template
// Reuse Mcq result template until there is any reason to use a separate template.
/**
// Reuse Mcq result template until there is any reason to use a separate template.
// answers contain the "other" answer, if any
//content of other field if "other" is selected as the answer
// "1" if other is selected, "0" if other is not selected, null if other is disabled by the instructor
// number of Msq options selected including other option
// if other is not enabled and other is selected as an answer trigger this error
// if selected answers are not a part of the Msq option list trigger this error
// if other option is selected but no text is provided trigger this error
// if total choices selected exceed maximum choices allowed trigger this error
// if total choices selected is less than the minimum required choices
// if minimumSelectableChoices is enabled and None of the Above is selected as an answer trigger this error
// if none of the above is selected AND other options are selected trigger this error
// Set default values
// need to know which recipients are hidden since anonymised recipients will not appear in the summary table
// hidden recipients do not appear in the summary table, so ignore responses with hidden recipients
/**
// Move current user to the head of the recipient list
// Skip current user as it is added to the head of the list
// need to know which recipients are hidden since anonymised recipients will not appear in the summary table
// hidden recipients do not appear in the summary table, so ignore responses with hidden recipients
// Replace current user name with "You"
// Replace general identifier with "General"
// Replace current user team with "" when recipient type is not student
// Display other recipients' team name
// Display a dash if the user has only self response
// TODO
// need to know which recipients are hidden since anonymised recipients will not appear in the summary table
// hidden recipients do not appear in the summary table, so ignore responses with hidden recipients
// General recipient type would not give self response
// Therefore average exclude self response will always be hidden
// There exists at least one average score exclude self
// Compute number of responses including user's self response
// Compute number of responses excluding user's self response
// Compute minimum score received
// Compute maximum score received
// Compute total score received
// Compute total score received excluding self
// totalScoreExcludingSelf == null when the user has only self response
// Compute average score received
// Compute average score received excluding self
// List of recipients to hide
/**
// At least 2 responses are given to any recipient other than current user
//TODO: strengthen check for step
/**
// out of range
// when the answer is within range but not one of the possible values
/**
/** Gets the header for detailed responses in csv format. Override in child classes if necessary. */
// Retrieve giver details
// Retrieve recipient details
// Append feedback participant comments if allowed
// Append instructor comments if allowed
/**
/**
/**
/**
/**
/**
/**
// The following function handle the display of rows between possible givers
// and recipients who did not respond to a question in feedback sessions
/**
// we do not show all possible responses
/**
/** Checks if the question has been skipped. */
// Json string contains all attributes of a `FeedbackQuestionDetails` object,
// so it is sufficient to use it to compare two `FeedbackQuestionDetails` objects.
/**
// TODO: dummy enum, need to migrate CONSTSUM to either CONSTSUM_OPTIONS or CONSTSUM_RECIPIENTS
/**
/**
/**
/**
// Add two empty options by default
// TODO
/**
// remove the last comma
/**
//[1, 2, 3] format
//remove []
// remove last comma
// if duplicate ranks are not allowed but have been assigned trigger this error
// if number of options ranked is less than the minimum required trigger this error
// if number of options ranked is more than the maximum possible trigger this error
// if rank assigned is invalid trigger this error
/**
/**
/**
// group the options/feedback response by its rank
// every answer in the same group is given the same rank
/**
/**
// at least should be able to be viewed by other students for team recipient
// at least should be able to be viewed by own team members for non-team recipient
// If response recipient is instructor, responses for current student/team will not exist.
// TODO
/**
/**
/**
// collect each giver's responses
// generate response-responseDetails pair
// resolve ties for each giver's responses
/**
/**
/** A class holding the details for the response of a specific question type.
/**
// For Text questions, the answer simply contains the response text, not a JSON
// This is due to legacy data in the data store before there were multiple question types
/**
/**
// Set details
// If description sizes are invalid, default to empty descriptions.
/**
// No weights should be parsed for a null or empty sub question.
/**
/**
// TODO: need to check for exact match.
// Responses require deletion if choices change
// Responses require deletion if sub-questions change
// Create submission form
// Create submission form
// TODO display numerical value of option
// Check if existing choice for sub-question == current choice
// Get entire row
// Check if existing choice for sub-question == current choice
// Create table row header fragments
// Create table body
// Create rubric weight cell
// Get entire row
// Create rubric column options as the last row of the table
// Create edit form
// Add some choices by default
// Add some sub-questions by default
/**
// Create table row header fragments
/**
// Get entire row
/**
/**
// TODO
// table header
// table body
// Retrieve giver details
// Retrieve recipient details
// To show feedback participant comment only once for each response.
// To show instructor comment only once for each response.
// For rubric questions,
// 1) Description size should be valid
// 2) At least 2 choices
// 3) At least 1 sub-question
// 4) Choices and sub-questions should not be empty
// 5) Weights must be assigned to all cells if weights are assigned, which means
//    weight size should be equal to (numOfRubricChoices * numOfRubricSubQuestions).
// This should not happen.
// Set descriptions to empty if the sizes are invalid when extracting question details.
//Rubric choices are now allowed to be empty.
/*
/**
/**
// count frequencies
/**
/**
// calculate percentage frequencies and average value
//continue to next row if no response for this sub-question
// divide responsesFrequency by totalForSubQuestion to get percentage
// calculate the average for each sub-question
/**
/**
// <td> entries which display recipient identification details and rubric subQuestion
// <td> entries which display number of responses per subQuestion per rubric choice,
// and the corresponding weight of that choice of the specific sub-question.
// <td> entries which display aggregate statistics
// Generate HTML for all <td> entries using template
/**
// Append recipient identification details and rubric subQuestion
// Append number of responses per subQuestion per rubric choice
// Append aggregate statistics
/**
/*
// Parse and extract answers
// Expected length is 2.
// Failed to parse, ignore response.
// else the indexes are invalid.
// Failed to parse, ignore response.
/**
// -1 indicates no choice chosen
/*
//TODO: evaluate what statistics are needed for text questions later.
// TODO
//For essay questions the response is saved as plain-text due to legacy format before there were multiple question types
// no need to do validation
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Utility class
/**
/**
/**
// The following constants describe the positions of the attributes
// in the log message. i.e
// TEAMMATESLOG|||ACTION_NAME|||ACTION_RESPONSE|||TO_SHOW|||ROLE|||NAME|||GOOGLE_ID|||EMAIL
// |||MESSAGE(IN HTML)|||URL|||TIME_TAKEN
// Required fields
// id can be in the form of <googleId>%<time> e.g. bamboo3250%20151103170618465
// or <studentemail>%<courseId>%<time> (for unregistered students)
//     e.g. bamboo@gmail.tmt%instructor.ema-demo%20151103170618465
// Optional fields
// this field will always be true in log message for history reason
// private constructor to prevent instantiation
/**
// TEAMMATESLOG|||SERVLET_NAME|||ACTION|||TO_SHOW|||ROLE|||NAME|||GOOGLE_ID|||EMAIL|||MESSAGE(IN HTML)|||URL|||ID
/**
/**
// the number of fields is not enough, which should be an error
// TEAMMATESLOG|||ACTION_NAME|||ACTION_RESPONSE|||TO_SHOW|||ROLE|||NAME|||GOOGLE_ID|||EMAIL
// |||MESSAGE(IN HTML)|||URL|||TIME_TAKEN
/**
// Required parameters
// Optional parameters - initialized to default values
// use builder to build ActivityLogEntry
/**
// must either be http or https
/**
// utility class
// Intentional private constructor to prevent instantiation.
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// TODO remove this after all controller classes have been migrated
// Reason 1: Not all HTTP requests are POST, but null parameters for any HTTP request are equally undesirable
// Reason 2: This is applicable only at controller level
/**
/**
/**
/** The value of the application URL, or null if no server instance is running. */
/** The value of the "app.id" in build.properties file. */
/** The value of the "app.version" in build.properties file. */
/** The value of the "app.frontenddev.url" in build.properties file. */
/** The value of the "app.production.gcs.bucketname" in build.properties file. */
/** The value of the "app.backup.gcs.bucketname" in build.properties file. */
/** The value of the "app.csrf.key" in build.properties file. */
/** The value of the "app.backdoor.key" in build.properties file. */
/** The value of the "app.encryption.key" in build.properties file. */
/** The value of the "app.captcha.secretkey" in build.properties file. */
/** The value of the "app.crashreport.email" in build.properties file. */
/** The value of the "app.email.senderemail" in build.properties file. */
/** The value of the "app.email.sendername" in build.properties file. */
/** The value of the "app.email.replyto" in build.properties file. */
/** The value of the "app.email.service" in build.properties file. */
/** The value of the "app.sendgrid.apikey" in build.properties file. */
/** The value of the "app.mailgun.apikey" in build.properties file. */
/** The value of the "app.mailgun.domainname" in build.properties file. */
/** The value of the "app.mailjet.apikey" in build.properties file. */
/** The value of the "app.mailjet.secretkey" in build.properties file. */
/** The value of the "app.enable.datastore.backup" in build.properties file. */
// access static fields directly
//" : "https://") + hostname;
/**
/**
//cloud.google.com/appengine/docs/standard/java/how-requests-are-handled">https://cloud.google.com/appengine/docs/standard/java/how-requests-are-handled</a>
// This will be the case in dev server
/**
// In production, the back-end and front-end lives under the same domain
/**
/**
/*
/*
/*
// Utility class containing constants
/** This is the limit after which TEAMMATES will send error message.
/** e.g. "2014-04-01 11:59 PM UTC" */
/** Number to trim the Google ID when displaying to the user. */
/* Field sizes and error messages for invalid fields can be found
/* Text displayed to the user when the mouse hover over certain elements in
// Mcq
// Msq
// Numscale
// Contribution
// Constant sum
// Rubric
// Text Question
// TODO: rename FEEDBACK_QUESTION_CONSTSUMPOINTSPEROPTION to a more accurate name
//Email parameters
//Submission parameters for Task Queue
//Parameters for checking persistence of data during Eventual Consistency
/**
/* _PAGE/Page in the Action URI name means 'show page' */
/**
/* We omit adding the 'page' prefix to views because all of them are "pages" */
/* These are status messages that may be shown to the user */
// TODO: Let undo process to be in the Course page for now.
// Should implement to be able to undo the archiving from the home page later.
// Messages that are templates only
/** Template String. Parameters: Student's name, Course ID */
/** Template String. Parameters:  Course ID */
/**
/**
/**
/**
/**
/**
/* These indicate status of an operation, but they are not shown to the user */
// Backdoor responses
// General Error codes
// Error message used across DB level
// POST parameter null message
// HTTP parameter null message
// body parameter null message
/**
/**
/**
// CHECKSTYLE.OFF:JavadocVariable enum names are self-documenting
/**
/**
/**
/////////////////
// FIELD TYPES //
/////////////////
// name-related
// one more than longest official nationality name
// email-related
// others
/*
////////////////////
// ERROR MESSAGES //
////////////////////
// possible reasons for invalidity
// error message components
// generic (i.e., not specific to any field) error messages
// field-specific error messages
///////////////////////////////////////
// VALIDATION REGEX FOR INTERNAL USE //
///////////////////////////////////////
/**
/**
/**
/**
/**
/*
// utility class
// Intentional private constructor to prevent instantiation.
/////////////////////////////////////////
// VALIDATION METHODS FOR EXTERNAL USE //
/////////////////////////////////////////
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// return early if error already exists because session name is too long etc.
// checks for unsanitized HTML characters
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//Fails if sanitized value is not same as value
/**
/**
/**
// utility class
/**
/**
/**
// utility class
/**
/**
/**
/**
/**
/**
// Utility class
// Intentional private constructor to prevent instantiation.
/**
/**
// utility class
/**
/**
/**
// Do not include cookie header in production for privacy reasons
/**
/**
/**
/**
// utility class
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// || Const.ActionURIs.INSTRUCTOR_COURSE_STATS_PAGE.contains(actionName);
/**
/**
//mytaskhelper.com/forums/5-faq-s/topics/98-nationality-dropdown-list"
// utility class
/**
/**
/**
//developers.google.com/recaptcha/docs/verify">reCAPTCHA user response verification API</a>
/** The Google reCAPTCHA API URL to verify the response token. */
//www.google.com/recaptcha/api/siteverify";
/** The shared secret key between the TEAMMATES site and reCAPTCHA. */
/**
/**
/**
// utility class
/**
/**
/**
/**
/**
/**
/**
/**
//To ensure when apply sanitizeForHtml for multiple times, the string's still fine
//Regex meaning: replace '&' with safe encoding, but not the one that is safe already
/**
/**
/**
/**
/**
/**
/**
/**
//general case for punctuation
//to prevent injection
/**
//tools.ietf.org/html/rfc4180">http://tools.ietf.org/html/rfc4180</a>
/**
//tools.ietf.org/html/rfc4180">http://tools.ietf.org/html/rfc4180</a>
/**
// currentPos iterates one position beyond text length to include last chain
// format text.substring(startOfChain, currentPos) and append to result
// flip isSingleQuotationChain if chain is broken
/**
/**
/**
/**
// CHECKSTYLE.OFF:JavadocVariable
/**
// utility class
/**
/**
/**
/**
// Important to use the CANON_EQ flag to make sure that canonical characters
// such as é is correctly matched regardless of single/double code point encoding
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// NOPMD loop variable deliberately increased
/**
// 1 => a, not 0 => a
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// utility class
/**
/**
// TEXT
// MCQ
// MSQ
// Numscale
// Constant Sum
// Contribution
// Rank
// Rubric
/**
// utility class
/**
/**
// utility class
/**
// ZoneRulesProvider uses the system class loader for loading a custom provider as the default provider.
// However, GAE's system class loader includes only the Java runtime and not the application. Hence, we
// use reflection to temporarily replace the system class loader with the class loader for the current context.
// ZoneRulesProvider reads this system property to determine which provider to use as the default.
// This first reference to ZoneRulesProvider executes the class's static initialization block,
// performing the actual registration of our custom provider named in the system property above.
// The system class loader is used to load the class from the name.
// If any exceptions occur, an Error is thrown.
// Restore the original system class loader.
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Round to the nearest hour
// Adjust 00:00 -> 23:59
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/** Type for ZoneRules. */
/** Type for ZoneOffsetTransition. */
/** Type for ZoneOffsetTransitionRule. */
/**
/**
/**
/**
// forCaching flag is ignored because this is not a dynamic provider
/**
// follow original method signature
// group
// versions
// regions
// rules
// link version-region-rules
/**
// ZoneRules.readExternal(in)
// ZoneOffsetTransition.readExternal(in)
// ZoneOffsetTransitionRule.readExternal(in)
/**
// parse and validate the urlString with the built-in URL object
//" + url.getAuthority();
/**
//localhost:8080/index.jsp").getRelativeUrl()</code>
//google.com").getRelativeUrl()</code>
//teammatesv4.appspot.com/page/studentHomePage?user=abc").getRelativeUrl()</code>
/**
//localhost:8080/index.jsp").getBaseUrl()</code>
//localhost:8080</code></li>
//teammatesv4.appspot.com/index.jsp").getBaseUrl()</code>
//teammatesv4.appspot.com</code></li>
/**
/*
/**
// return the url if any of the key or the value is null or empty
// or if the key is already included in the url
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Does nothing by default so that it can be skipped entirely in anonymous classes when not used.
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// allow users to catch specific errors e.g. AssertionError
// continue retry process
/**
// status-related strings
// feedback action strings
/**
/**
/**
/**
/**
/**
/**
// Course or session cannot be found for one student => it will be the case for all students
// Do not waste time looping through all students
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// GAE Javamail is used when we need a service that is not prone to configuration failures
// and/or third-party API failures. The trade-off is the very little quota of 100 emails per day.
// GAE Javamail requires the sender email address to be of this format
/**
/**
/**
/**
/**
/**
/**
// These methods ensures the logged in user is of a particular type.
/**
/**
/**
/**
// These methods ensures that the nominal user specified has access to a given entity
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// These methods ensures that the nominal user specified can perform the specified action on a given entity.
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// The following methods are facades to the actual logic for adding tasks to the queue.
// Using this method, the actual logic can still be black-boxed
// while at the same time allowing this API to be mocked during test.
/**
/**
// The following methods are the actual API methods to be used by the client classes
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Equally spread out the emails to be sent over 1 hour
// Sets interval to a maximum of 5 seconds if the interval is too large
/**
// prevent initialization
/**
// Retrieve institute field from one of the instructors of the course
/**
// Register the student
/**
// Register the instructor
// Update the googleId of the student entity for the instructor which was created from sample data.
// Check if this Google ID has already joined this course
// Check if this Google ID has already joined this course
/**
/**
/**
// to prevent orphan course
// the instructor is the last instructor in the course
/**
/**
/* Explanation: This class depends on CoursesDb class but no other *Db classes.
// prevent initialization
/**
/**
/* Create the initial instructor for the course */
// roll back the transaction
/**
/**
/**
/**
/**
//TODO Remove excessive logging after the reason why s can be null is found
//TODO Failing might not be the best course of action here.
//Maybe throw a custom exception and tell user to wait due to eventual consistency?
// Skip the course existence check since the course ID is obtained from a
// valid CourseAttributes resulting from query
/**
/**
// First student of first section
// first student of subsequent section
/**
// First student of first section
// first student of subsequent section
/**
// first student of first team
// student in the same team as the previous student
// first student of subsequent teams (not the first team)
// if last iteration
/**
// TODO: reduce calls to this function, use above function instead.
/**
/**
/**
/**
/**
/**
/**
/**
// Check that all courseIds queried returned a course.
/**
/**
/**
// Check that all courseIds queried returned a course.
/**
/**
/**
/**
/**
/**
// Check that all courseIds queried returned a course.
/**
/**
/**
// prevent initialization
/**
// For ensuring only one account per Google ID is created
// For updating the student and instructor respondent lists in sessions before they are persisted
/**
// query the entity in db first to get the actual data and create document for actual entity
// contains question number before injection
/**
// question ID already injected
/**
// question ID already injected
// format of feedbackResponseId: questionNumber%giverEmail%recipient
/**
// Questions and responses will be deleted automatically.
// We don't attempt to delete them again, to save time.
/**
/**
// accounts for the many different Exceptions from different email services
/**
// accounts for the many different Exceptions from different email services
/**
// prevent initialization
/**
/**
/**
/**
// check whether the question numbers are consistent
// TODO can be removed once we are sure that question numbers will be consistent
/**
/**
/**
/**
// Return all self (creator) questions
/**
/**
// Ensure student does not evaluate himself
// Ensure instructor does not evaluate himself
// Ensure student('s team) does not evaluate own team.
// recipientEmail doubles as team name in this case.
// accepts self feedback too
/**
// remove hidden instructors
/**
// TODO the below will cause slow queries when recipients are large, find a better way
// instructor can only see students in allowed sections for him/her
// instructor can only see teams in allowed sections for him/her
/**
// Ensure student does not evaluate himself
// Ensure instructor does not evaluate himself
// Ensure student('s team) does not evaluate own team.
// recipientEmail doubles as team name in this case.
// accepts self feedback too
/**
// other question types
//fallthrough
//fallthrough
/**
// get questions in session before update
// update question
// shift other feedback questions (generate an empty "slot")
// adjust responses
/**
/**
// Silently fail if question does not exist.
// cascade delete responses for question.
// delete question
// adjust question numbers
/**
// Shifts all question numbers after questionNumberToShiftFrom down by one.
/**
// prevent initialization
/**
/*
// right now this method only updates comment's giverSection and receiverSection for a given response
/**
/**
/**
/**
/**
/**
//in the old ver, name is always visible
//comment giver can always see
/**
/**
/**
// prevent initialization
/**
/**
/**
/**
/**
/**
// Add responses that the user submitted himself
// Add responses that user is a receiver of when question is visible to
// receiver.
// many queries
// Early return if user is giver
// if response is given by team, then anyone in the team can see the response
// Refers to Giver's Team Members
// Response to team
// this is a team name
// Response to individual
// Response to team; recipient = teamName
// this is a team name
// Response to individual
/**
/**
/**
// key is feedback session name, value is a set of student emails that need respondents update
// key is feedback session name, value is a set of student emails that need respondents update
// deletes all responses given by the user to team members or given by the user as a representative of a team.
// Deletes all responses given by other team members to the user.
// update respondents
/**
// Deletes all responses given by the team.
// Deletes all responses received by the team.
/**
/**
/**
/**
/**
/**
/**
// record all giver and prepare respondents update
// delete all responses, comments of the question
/**
// key is feedback session name, value is a set of student emails that need respondents update
// key is feedback session name, value is a set of student emails that need respondents update
// update respondents
/**
// key is feedback session name, value is a set of student emails that need respondents update
// key is feedback session name, value is a set of student emails that need respondents update
// update respondents
/**
// key is feedback session name, value is a set of student emails that need respondents update
// key is feedback session name, value is a set of student emails that need respondents update
// update respondents
/**
// delete responses from the entity
// delete responses to the entity
/**
// Early return as STUDENTS covers all other student types.
/**
// prevent initialization
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// instructor can only see students in allowed sections for him/her
// instructor can only see teams in allowed sections for him/her
/**
/**
// Remove responses to the hidden instructors if they have been stored already
/**
/**
/**
// Load details of students and instructors once and pass it to callee
// methods
// (rather than loading them many times).
/**
/**
/**
/**
/**
/**
/**
/**
// sort responses by giver > recipient > qnNumber
// keep track of possible recipients with no responses
// print missing responses from the current giver
// add the rows for the possible givers and recipients who have missing responses
/**
/**
/**
/**
// automated emails are required only for custom publish times
// if there is no question for students, session is complete
// if there is no question for instructor, session is complete
/**
// adjust email sending status
// reset sentOpenEmail if the session has opened but is being un-opened
// now, or else leave it as sent if so.
// reset sentClosedEmail if the session has closed but is being un-closed
// now, or else leave it as sent if so.
// also reset sentClosingEmail
// reset sentPublishedEmail if the session has been published but is
// going to be unpublished now, or else leave it as sent if so.
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// is session closed in the past 1 hour
/**
/**
/**
/**
/**
/* Get the feedback results for user in a section iterated by questions */
// Load details of students and instructors once and pass it to callee
// methods
// (rather than loading them many times).
/* Get the feedback results for user in a section iterated by questions */
// create empty data containers to store results
// default for 'all' section selected will be EITHER case
// either giver or recipient needs to be in the selected section
// both giver and recipient must be from the selected section
//Show all questions even if no responses, unless is an ajax request for a specific question.
// create empty data containers to store results
/*
// If instructors are not restricted to view the giver's section,
// they are allowed to view responses to GENERAL, subject to visibility options
// keys of emailNameTable are participantIdentifiers,
// which consists of students' email, instructors' email, team names, or %GENERAL%.
// participants identifiers of anonymous responses are not anonymised in the tables
// return a pair of String that contains Giver/Recipient'sName (at index 0)
// and TeamName (at index 1)
// Email represents that there is no specific recipient.
// The email represents a missing *Attribute.
// It might be a team name or the *Attribute has been deleted.
// If any question is not completely answered, session is not
// completed
/**
// Allow all instructors to view always
// Allow viewing if session is viewable to students
// Allow students to view the feedback session if there are questions for them
// Allow students to view the feedback session
// if there are any questions for instructors to answer
// where the responses of the questions are visible to the students
/**
// change constant to actual maximum size.
/**
// prevent initialization
/* ====================================
/**
/**
/* ====================================
/**
/**
/**
/**
// cascade responses
// cascade comments
// cascade respondents
/**
/**
/**
/**
// cascade delete instructors
/**
/**
//cloud.google.com/appengine/docs/java/mail/">https://cloud.google.com/appengine/docs/java/mail/</a>
/**
/**
//cloud.google.com/appengine/docs/java/mail/mailgun">https://cloud.google.com/appengine/docs/java/mail/mailgun</a>
/**
//api.mailgun.net/v3/" + Config.MAILGUN_DOMAINNAME + "/messages");
/**
//cloud.google.com/appengine/docs/java/mail/mailjet">https://cloud.google.com/appengine/docs/java/mail/mailjet</a>
/**
/**
/**
// prevent initialization
/**
/**
/**
/**
/**
/**
//cloud.google.com/appengine/docs/flexible/java/sending-emails-with-sendgrid">https://cloud.google.com/appengine/docs/flexible/java/sending-emails-with-sendgrid</a>
/**
/**
// prevent initialization
/**
/**
/**
/**
// cascade email change, if any
// adjust submissions if moving to a different team
// update the new section name in responses
// TODO: check to delete comments for this section/team if the section/team is no longer existent in the course
/**
/**
// no conflicts
/**
// no conflicts
/**
/**
// the student is the only student in the team
/**
// Cascade delete students
/**
/**
/**
/**
/**
/**
/**
/**
// update only if change
/**
/**
/**
/**
/**
// update only if change
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// update only if change
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// update only if change
/**
/**
/**
/**
/**
/**
/**
/**
// comment does not have unique constraint
/**
/**
// the following process makes use of the key pattern of feedback response entity
// see generateId() in FeedbackResponse.java
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// update only if change
// need to recreate the entity
/**
/**
/**
// responses in section with giver or recipient as None are added to respective section selected
// also show responses in section with giver but without recipient
/**
/**
// remove duplications
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// The objectify library does not support throwing checked exceptions inside transactions
// update only if change
/**
/**
/**
/**
/**
/**
// defensive coding for legacy data
/**
// defensive coding for legacy data
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// update only if change
/**
// update only if change
/**
/**
/**
// cannot use direct key query as email of an instructor can be changed
/**
/**
// enable the ability to use java.time.Instant to issue query
// Invoked by GAE at application startup.
// GAE does not currently invoke this method.
/**
/**
/**
/**
// NOPMD
// update only if change
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// invalid registration key cannot be decrypted
/**
/**
/**
/**
/**
/**
// delete the old student
// update only if change
/**
/**
// If registration key detected is not unique, something is wrong
/**
// required by Objectify
/**
// CHECKSTYLE.OFF:IllegalImport can be removed after upgrading to Objectify V6
// CHECKSTYLE.ON:IllegalImport
/**
/**
//github.com/objectify/objectify/blob/v5.2/src/main/java/com/googlecode/objectify/annotation/Translate.java">@Translate annotation</a>
//github.com/objectify/objectify/blob/v5.2/src/main/java/com/googlecode/objectify/impl/translate/TranslatorFactory.java">TranslatorFactory</a></p>
/**
// required by Objectify
/**
/**
/**
// required by Objectify
/**
/**
/**
/**
// for legacy data. do not remove even if not covered in test.
/**
/**
/**
// TODO: where applicable, we should specify fields as @Unindex to prevent GAE from building unnecessary indexes.
/**
// Check for consistency in questionLogic/questionAttributes.
// (i.e. if type is own team, numberOfEntities must = 1).
// required by Objectify
// Allow GAE to generate key.
/**
/**
/**
/**
/**
// required by Objectify
/**
// Format is feedbackQuestionId%giverEmail%receiver
// i.e. if response is feedback for team: qnId%giver@gmail.com%Team1
//         if response is feedback for person: qnId%giver@gmail.com%reciever@email.com
/**
/**
/**
/** The foreign key to locate the Course object. */
/** The foreign key to locate the FeedbackSession object. */
/** The foreign key to locate the FeedbackQuestion object. */
/** The giver of the comment.
/** Role of a comment giver.
/** The foreign key to locate the FeedbackResponse object commented on. */
/** Response giver section. */
/** Response receiver section. */
/** True if the comment is given by a feedback participant. */
/** The creation time of this comment. */
/** The comment from giver about the feedback response. */
/** The e-mail of the account that last edited the comment. */
/** The time in which the comment is last edited. */
// required by Objectify
// Auto generated by GAE
/**
/**
// true as the default value if the field is null
/**
/**
// TODO: Remove after data migration
/**
// TODO: Remove after data migration
/**
// PMD.UnusedPrivateField and SingularField are suppressed
// as feedbackSessionId is persisted to the database
/**
// required by Objectify
/**
// Format is feedbackSessionName%courseId
/**
/**
/**
/** The foreign key to locate the Course object. */
/** Whether the associated course is archived. */
/** The instructor's name used for this course. */
/** The instructor's email used for this course. */
/** The instructor's registration key used for joining. */
// required by Objectify
// setId should be called after setting email and courseId
/**
// Format: email%courseId e.g., adam@gmail.com%cs1101
/**
/**
/**
// the legacy data corresponding to isArchived is stored as a null value (not a missing value)
// in the datastore
/**
/**
/**
/**
/**
// PMD.UnusedPrivateField and Singular field as suppressed
// as this is used by Objectify to specify Account as @Parent entity
/* only accepts "male", "female" or "other" */
// required by Objectify
/**
/**
/**
// prepare the response giver name and recipient name
// it's actually a team name here
// populate related Students/Instructors information
// in case of exceeding size limit for document
// produce searchableText for this feedback comment document:
// it contains courseId, courseName, feedback session name, question number, question title,
// response answer commentGiverEmail, commentGiverName, related people's information, and commentText
// courseId are used to filter documents visible to certain instructor
// searchableText and createdDate are used to match the query string
/**
// get instructor's information
// get FeedbackResponseComment from results
// search engine out of sync as SearchManager may fail to delete documents due to GAE error
// the chance is low and it is generally not a big problem
// get related response from results
// get related question from results
// get related session from results
// construct responseId to comment map
// construct questionId to response map
// construct session name to question map
// construct session name to session map
// get giver and recipient names
// in the old ver, name is always visible
// comment giver can always see
// giver can always see
// TODO: also need to decrease the size for (fr)CommentSearchResults|studentSearchResults
/**
//TODO: verify section
/**
// produce searchableText for this instructor document:
// contains courseId, courseName, instructorName, instructorEmail, instructorGoogleId, instructorRole, displayedName
// searchableText is used to match the query string
/**
// search engine out of sync as SearchManager may fail to delete documents due to GAE error
// the chance is low and it is generally not a big problem
//TODO TO REMOVE AFTER DATA MIGRATION - needed to work with code before the sanitizing was removed
/**
/**
// method not used
/**
/**
/**
/**
/**
//cloud.google.com/appengine/docs/java/search/">https://cloud.google.com/appengine/docs/java/search/</a>
// utility class
/**
/**
/*
// Update the final message to be shown if the task fails after maximum retries
// A transient error can be retried
// A non-transient error signals that the operation should not be retried
/**
/**
/*
// Update the list of documents to be put during the next retry
// Update the final message and data to be shown if the task fails after maximum retries
// If there is at least one transient error, continue retrying
// If all errors are non-transient, do not continue retrying
/**
/**
/**
/**
/**
/**
// produce searchableText for this student document:
// it contains courseId, courseName, studentEmail, studentName studentTeam and studentSection
// this is used to filter documents visible to certain instructor
// searchableText and createdDate are used to match the query string
/**
/**
// search engine out of sync as SearchManager may fail to delete documents due to GAE error
// the chance is low and it is generally not a big problem
/**
/**
/**
/**
/**
/**
/**
/**
// Sets an arbitrary retry code outside of the range 200-299 so GAE will automatically retry upon failure
/** Executes the action. */
/**
// deliberately done for testing
/**
// Cron jobs
// Task queue workers
/**
/**
// used as fallback
// Do not log task queue worker actions to prevent excessive logging
// Response status is not set to 4XX to 5XX to prevent GAE retry mechanism because
// if the cause of the exception is improper request URL, no amount of retry is going to help.
// The action will be inaccurately marked as "success", but the severe log can be used
// to trace the origin of the problem.
// Task will be recognised as failed and GAE retry mechanism can kick in
// Task will be recognised as failed and GAE retry mechanism can kick in
/**
// Sets the range to 6 minutes to slightly overlap the 5 minute email timer
// Do not send any emails if there are no severe logs; prevents spamming
/**
//cloud.google.com/appengine/docs/standard/java/config/cron">https://cloud.google.com/appengine/docs/standard/java/config/cron</a>
// Cron job schedulers use GET request
/**
//cloud.google.com/datastore/docs/export-import-entities">https://cloud.google.com/datastore/docs/export-import-entities</a>
//cloud.google.com/datastore/docs/reference/admin/rest/v1/projects/export">https://cloud.google.com/datastore/docs/reference/admin/rest/v1/projects/export</a>
//www.googleapis.com/auth/datastore");
//datastore.googleapis.com/v1/projects/" + appId + ":export");
// Documentation is wrong; the param name is output_url_prefix instead of outputUrlPrefix
//" + Config.BACKUP_GCS_BUCKETNAME + "/datastore-backups/" + timestamp);
/**
/**
/**
/**
/**
/**
// Filter out instructors who have submitted the feedback session
/**
/**
/**
/**
/**
// The instructor is queried using the `id`of instructor as it ensures that the
// instructor is retrieved (and not null) even if the index building for
// saving the new instructor takes more time in GAE.
// The instructor `id` can be constructed back using (instructorEmail%courseId)
// because instructors' email cannot be changed before joining the course.
/**
/**
/**
/**
//cloud.google.com/appengine/docs/standard/java/taskqueue/">https://cloud.google.com/appengine/docs/standard/java/taskqueue/</a>
// Task queue workers use POST request
/** An 'action' to be performed by the system. If the logged in user is allowed
/** This is used to ensure unregistered users don't access certain pages in the system. */
/** The regkey may also contain a next url parameter as well. */
/** This will be the admin user if the application is running under the masquerade mode. */
/** This is the 'nominal' user. Need not be the logged in user */
/** This is the unregistered and not loggedin student's attributes. */
/** The full request URL e.g., {@code /page/instructorHome?user=abc&course=c1}. */
/** Parameters received with the request. */
/** Execution status info to be shown to he admin (in 'activity log'). */
// TODO: make this a list?
/** Execution status info to be shown to the user. */
/**
/** Session that contains status message information. */
/** Session token used in forms/links to actions requiring origin validation. */
/** This is to get the blobInfo for any file upload from prev pages. */
/** This is for authentication at Action Level. */
/** Initializes variables.
// validateOriginIfRequired(); // This has been migrated to new action class
// Set error status forwarded from the previous action
/**
/*
// These methods are used for user authentication
/**
// Unregistered but loggedin user
// Unregistered and not logged in access given to page
// !Const.SystemParams.PAGES_ACCESSIBLE_WITHOUT_GOOGLE_LOGIN.contains(request.getRequestURI());
// Allowing admin to masquerade as another user
// Unregistered user
// since admin is masquerading, fabricate a regkey
// let the user go through as this is a persistence issue
// TODO: encrypt the email as currently anyone with the regkey can
//       get the email because of this redirect:
// boolean userNeedsRegistrationForPage =
//         !Const.SystemParams.PAGES_ACCESSIBLE_WITHOUT_REGISTRATION.contains(request.getRequestURI())
//         && !Const.SystemParams.PAGES_ACCESSIBLE_WITHOUT_GOOGLE_LOGIN.contains(request.getRequestURI());
// return userNeedsRegistrationForPage && userIsNotRegistered;
// These methods are used for CRUD operations on urls used for redirecting users to login page
/* ------------------------------------------------ */
/**
// get the result from the child class.
// set error flag of the result
// Set the common parameters for the response
// Pass status message using session to prevent XSS attack
/**
/**
// TODO handle the EntityDoesNotExistException properly in the method body so it does not
// have to be re-thrown here
/**
/**
/**
/**
/**
/**
/**
/**
//TODO: Replace this with a overloaded constructor in AjaxResult?
/**
/**
/**
/**
/**
/**
// ===================== Utility methods used by some child classes========
// CHECKSTYLE.OFF:AvoidStarImport as there would be many (>100) import lines added if we were to import all of the ActionURIs
// CHECKSTYLE.ON:AvoidStarImport
/**
/**
/**
/** The URI that represents the result.
/** True if the action did not complete successfully. */
/** The 'nominal' user for whom the action was executed. */
/** A list of status messages to be shown to the user. */
/**
/**
/**
/**
/**
/**
/** The data that will be sent back to the caller. */
/**
// If the list of status messages can be found in the session and it is not empty,
// means there are status messages to be shown to the user, add them to the page data.
/**
/*
// Content-Disposition is a header on the HTTP response to suggest a filename
// if the contents of the response is saved to a file.
/**
// Parameter is used to throw the exceeding range exception in test
// initialize SectionDetail correctly
// not tested as the test file is not large enough to reach this catch block
// this is for ajax loading of the html table in the modal
// "(Non-English characters not displayed properly in the downloaded file? click here)"
// TODO move into another action and another page data class
// default view: sort by question, statistics shown, grouped by team.
// bundle for all questions and all sections
// Warning for section wise viewing in case of many responses.
// Warning for section wise does not make sense if there are no multiple sections.
// load page structure without responses
// all sections and all questions for question view
// set up question tables, responses to load by ajax
// set isComplete to true to prevent behavior when there are too many responses,
// such as the display of warning messages
// bundle for all questions, with a selected section and selected section detail
// depending on the section detail, this function will filter accordingly
// bundle for a specific question, with all sections
// bundle for a specific question and a specific section
// not tested as the test file is not large enough to reach this catch block
/**
//display search tips and tutorials
//Start searching
/**
/** A 'redirect' type result. That is, the Browser will be required to make
/**
/** The data that will be used to render the page. */
/* These two are required for the 'status message' section of the page
/**
// If the list of status messages can be found in the session and it is not empty,
// means there are status messages to be shown to the user, add them to the page data.
// replace _ to - to keep it consistent with old behavior
/**
// isLargeNumberOfRespondents is an attribute used for testing the ui, for ViewType.Question
// used for html table ajax loading
// for question view
// for giver > question > recipient, recipient > question > giver,
// giver > recipient > question, recipient > giver > question
// TODO multiple page data classes inheriting this for each view type,
// rather than an enum determining behavior in many methods
/**
// if there is more than one question, we omit generation of responseRows,
// and load them by ajax question by question
/**
// results page to be loaded by ajax
// Note that if the page needs to load by ajax, then responses may be empty too,
// therefore the check for ajax to come before this
// no responses, nothing to initialize
// Iterate through the primary participant
// construct missing participant panels for the previous team
// Build participant panel for the current primary participant
// for the last section with responses
/**
// Iterate through the primary participant
// construct missing participant panels for the previous team
// Build participant panel for the current participant
// for the last section with responses
// first build secondary participant panels for the primary participant panel
// construct the primary participant panel
// questionToDetailsMap.get(question).getQuestionAdditionalInfoHtml(
// question.getQuestionNumber(), String.format(additionalInfoId, giverIndex, recipientIndex));
// participant has no responses for the current question
// Construct InstructorFeedbackResultsGroupByQuestionPanel for the current giver
// Moderation button on the participant panels are only shown is the panel is a giver panel,
// and if the participant is a student
// teamsWithResponses can include teams of anonymous student ("Anonymous student #'s Team")
// and "-"
// update the teams for the previous section
// create for every remaining team in the section, participantResultsPanels for every team member
// Create missing participants panels for the previous team
/**
/**
// skip team if no responses,
// or if the team is an anonymous student's team or an anonymous team, or is "-"
/**
// questionDetails.getQuestionAdditionalInfoHtml(question.questionNumber, additionalInfoId);
// setup classes, for loading responses by ajax
// ajax_submit: user needs to click on the panel to load
// ajax_auto: responses are loaded automatically
/**
/**
// keep track of possible givers who did not give a response
// keep track of possible recipients without a response from the current giver
// keep track of possible participant who did not give/receive a response to/from the participantIdentifier
/**
// Legacy data has "student's Team" as response giver when response giver is a team
// TODO consider using Url in future
// TODO the check for determining whether to show a profile picture
// can be improved to use isStudent
/**
// questionDetails.getNoResponseTextInHtml(giverIdentifier, possibleRecipient, bundle, question);
/**
// questionDetails.getNoResponseTextInHtml(recipientIdentifier, possibleGiver, bundle, question);
/**
/**
/*
// TODO: place below getter methods for template objects in some init method common to all views
// Only used for testing the ui
/**
/**
/* Whether checkbox is checked for search input */
/* Whether search results are empty */
/* Tables containing search results */
// 1 table for each course
// question.getQuestionDetails().getQuestionAdditionalInfoHtml(questionNumber, "");
// responseEntry.getResponseDetails().getAnswerHtmlInstructorView(question.getQuestionDetails());
/**
/**
/**
/** The user for whom the pages are displayed (i.e. the 'nominal user').
/* These util methods simply delegate the work to the matching *Helper
/**
/**
/**
/**
/**
// TODO investigate and fix the differences between question.isResponseVisibleTo and this method
/**
/**
/**
/**
/**
/**
//TODO TO REMOVE AFTER DATA MIGRATION
// For feedback participant comment
// for adding comments
// meta data for form
/**
// questionDetails.getQuestionAdditionalInfoHtml(this.questionNumber,
// personType + "-" + personIndex + "-session-" + fbIndex);
// response.getResponseDetails().getAnswerHtmlInstructorView(questionDetails);
// Checks and find the perceived contrib response for a student without submission
/**
// One InstructorFeedbackResultsSecondaryParticipantPanelBody for each secondary participant
/**
/**
/**
/**
// TODO: Support for users who are both instructor and student
// if false, then participant is a recipient
// email, team name, or %GENERAL%
// Shift panels for representing missing responses to the bottom
// store the attributes of the question for the non-display purposes
// such as form inputs
/**
// The indexes are used for the parameters of js functions for handling response comments
// TODO  investigate using question number instead of tracking an index
/**
/**
// A mapping from team name to a list of participant panels. Each participant panel is for one member of the team
/**
/**
/**
/**
/**
/**
// buffer to store the request body
/**
/**
// Access control level lower than required
// All-access pass granted
// All other cases: to be dealt in case-by-case basis
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Even though this is a DELETE action, PUT is used as DELETE does not allow usage of response body
//STUDENTS APIs
//STUDENT APIs
/**
/**
/**
/**
// deliberately done for testing
/**
// Set the archive status and status shown to user and admin
/**
/**
/**
/**
/**
/**
/**
/**
// should not moderate question which instructors cannot see
/**
/**
/**
/**
/**
// should not view response under preview mode
/**
/**
/**
// validate the response itself
// validate responses of the question
// TODO: It's troublesome to validate Rank Recipient question's responses as REST requests are sent concurrently.
// need to find way to do so.
/**
/**
/**
/**
/**
/**
// Only admins can create new accounts
/**
// replace email
// replace name
// replace course
// Strategy to Generate New Demo Course Id:
// a. keep the part of email before "@"
//    replace "@" with "."
//    replace email host with their first 3 chars. eg, gmail.com -> gma
//    append "-demo"
//    to sum up: lebron@gmail.com -> lebron.gma-demo
//
// b. if the generated courseId already exists, create another one by appending a integer to the previous courseId.
//    if the newly generate id still exists, increment the id, until we find a feasible one
//    eg.
//    lebron@gmail.com -> lebron.gma-demo  // already exists!
//    lebron@gmail.com -> lebron.gma-demo0 // already exists!
//    lebron@gmail.com -> lebron.gma-demo1 // already exists!
//    ...
//    lebron@gmail.com -> lebron.gma-demo99 // already exists!
//    lebron@gmail.com -> lebron.gma-demo100 // found! a feasible id
//
// c. in any cases(a or b), if generated Id is longer than FieldValidator.COURSE_ID_MAX_LENGTH, shorten the part
//    before "@" of the initial input email, by continuously removing its last character
/**
/**
/**
/**
/**
// validate questions (giver & recipient)
// validate questions (question details)
/**
/**
// Set up visibility settings
/**
/**
/* Process adding the instructor and setup status to be shown to user and admin */
/**
/**
/**
/*
/**
// Only admins can delete accounts
/**
/**
/**
/**
// verify user is the giver of the response
/**
// giver, allowed by default
// Case 1: the delete request comes from instructor
// Case 2: the delete request comes from the feedback response giver
/**
/**
//allow access to admins or instructor with modify permission
// Deleting last instructor from the course is not allowed if you're not the admin
/**
/**
// if student is not found, fail silently
/**
/**
/**
// Only admins can downgrade accounts
/**
// The student has been enrolled in the course.
// Unsuccessfully enrolled students will not be returned.
// The student is new.
// Unsuccessfully enrolled students will not be returned.
/**
// Only admins can downgrade accounts
/**
// Login information is available to everyone
/**
/**
/**
/**
// Any user can use a join link as long as its parameters are valid
/**
/**
/**
/**
// filter out unmodifiable questions
/**
/**
// hide some attributes for submission
/**
// hide session not visible to student
/**
/**
/**
//Only an instructor of the feedback session can check responses for questions within it.
//prefer question check over course checks
/**
// TODO implement this when necessary
// TODO implement this when necessary
/**
// fetching privilege for a particular instructor role.
// is getting privilege of another instructor
// course level privileges.
/**
// get partial details of instructors with information hiding
// student should belong to the course
// get all instructors of a course without information hiding
// this need instructor privileges
// hide information
// get all instructors of a course without information hiding
/**
/**
// Anyone can fetch the nationality data
/**
// Only admins can get the list of all ongoing sessions
//test for bounds
//test for bounds
/**
/**
// Allow additional filter by question ID (equivalent to question number) and section name
// TODO optimize the logic layer to get rid of functions that are no longer necessary
// Question number and section name filters are not applied here
// TODO do something
// TODO do something else
/**
/** String indicating ACCESS is not given. */
/** Message indicating that a student not found. */
// hide information if not an instructor
/**
/**
/**
/**
// Student access his own profile
// Access someone else's profile
// The student has not registered.
// create one on the fly
/**
/** Indicates ACCESS is not given. */
/** Indicates profile picture not found. */
//viewing someone else's photo
/**
// request to get all students of a course by instructor
// request to get team member by current student
// request to get all students of a course by instructor
// request to get team members by current student
// hide information for students
/**
/**
/**
/** The blob key for the image. */
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Any user can use a join link as long as its parameters are valid
/**
/**
// TODO
/**
/**
// nothing to do
// Can bypass CSRF check with the correct key
// Requests with missing referrer information are given the benefit of the doubt
// to accommodate users who choose to disable the HTTP referrer setting in their browser
// for privacy reasons
/**
//teammatesv4.appspot.com/page/instructorCourseDelete?courseid=abcdef
//mail.google.com/mail/u/0/
//teammatesv4.appspot.com
//mail.google.com
//teammatesv4.appspot.com/page/instructorCourseDelete?courseid=abcdef
//teammatesv4.appspot.com/page/instructorCoursesPage
//teammatesv4.appspot.com
//teammatesv4.appspot.com
// due to MalformedURLException
// Exception to the rule: front-end dev server requesting data from back-end dev server
// Newly-created session
// nothing to do
/**
/**
/**
/**
/**
/**
/**
// Only admins can reset accounts
/**
/**
/**
// Only admins can get accounts directly
/**
/**
// Only instructor can search
//Start searching
/*
/**
/* Tables containing search results */
/**
// Anyone can submit an error report
// Anyone can submit an error report
// Severe logs will trigger email to the system admin
/**
/**
// this is sending registration emails to all students in the course and we will check if the instructor
// canmodifystudent for course level since for modifystudent privilege there is only course level setting for now
/**
// no specific access control needed.
/**
/**
/**
/**
/**
/**
/**
/**
// update old value based on current request
// validate questions (giver & recipient)
// validate questions (question details)
/**
/**
// giver, allowed by default
// Edit comment text
// edit visibility settings
/**
/**
/**
/**
/**
/**
/**
/**
/**
//check if session-specific permissions are to be used
/**
/**
/**
/**
/**
// indicate that section group covers the section
// and mark that this section is special
/**
/**
/**
/**
/**
/**
// used as fallback
// This exception may not be caught because GAE kills the request soon after throwing it
// In that case, the error message in the log will be emailed to the admin by a separate cron job
/**
//www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/",
//www.google.com/recaptcha/",
/**
/**
/**
/**
/**
/**
/**
/**
/**
// the visibility types are mixed in feedback participant type
// therefore, we convert them to visibility types
// specially handling for contribution questions
// TODO: remove the hack
// remove the redundant visibility type as GIVER_TEAM_MEMBERS is just RECIPIENT_TEAM_MEMBERS
// contribution question keep the redundancy for legacy reason
// TODO: remove the abstraction after migration
// need to migrate CONSTSUM to either CONSTSUM_OPTIONS or CONSTSUM_RECIPIENTS
// correct to either CONSTSUM_OPTIONS or CONSTSUM_RECIPIENTS
// TODO: remove after data migration
// distributePointsFor is added after forceUnevenDistribution, see #8577
/**
/**
/**
// sort by name
/**
/**
/**
// TODO
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// If the giver is the user, show the real name of the recipient
// since the giver would know which recipient he/she gave the response to
// TODO fetch feedback response comments
// Student does not need to know the teams for giver and/or recipient
// TODO fetch feedback response comments
// For instructor view
// For student view
/**
/**
/**
/**
/**
/**
/**
/**
/**
// timezone name => offset from UTC in seconds
/**
/**
/**
/**
/**
//nothing to validate
/**
/**
/**
/**
/**
/**
// TODO remove this after migrate CONSTSUM to either CONSTSUM_OPTIONS or CONSTSUM_RECIPIENTS
/**
/**
// specially handling for contribution questions
// TODO: remove the hack
// add the redundant participant type OWN_TEAM_MEMBERS even if it is just RECIPIENT_TEAM_MEMBERS
// contribution question keep the redundancy for legacy reason
/**
/**
/**
/**
/**
// TODO remove this after migrate CONSTSUM to either CONSTSUM_OPTIONS or CONSTSUM_RECIPIENTS
/**
/**
// TODO decide what to validate
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// course level privileges should not be present.
// only session level privileges should be present.
/**
/**
/**
/**
/**
// no specific validation needed here.
/**
// Initialize to handle users make a http request with empty body.
/**
/**
/**
// GaeSimulation is not thread safe
/*
/**
/**
/**
// CHECKSTYLE.OFF:AbbreviationAsWordInName|MethodName the weird name is for easy spotting.
// CHECKSTYLE.ON:AbbreviationAsWordInName|MethodName
/**
/**
/*
// This method is adapted from JUnit 5's assertThrows.
// Once we upgrade to JUnit 5, their built-in method shall be used instead.
// As per reference method's specification
/**
// This interface is adapted from JUnit 5's Executable interface.
// Once we upgrade to JUnit 5, this interface shall no longer be necessary.
/**
// CHECKSTYLE.OFF:IllegalThrows
// CHECKSTYLE.ON:IllegalThrows
/**
// Ignore time field as it is stamped at the time of creation in testing
// Ignore time field as it is stamped at the time of creation in testing
// pretend keys match because the key is generated only before storing into database
// For these fields, we consider null and "" equivalent.
// pretend keys match because the key is generated only before storing into database
/**
/**
/**
/**
/**
/**
/** Executes the action and returns the result.
/** Executes the action and returns the result.
/** Executes the action and returns the result.
/** Executes the action and returns the result.
/**
/**
/**
/*
//we omit checking for admin access because these are covered by UI tests
//No need to check for instructors of the same course since even other instructors can access.
/*
//not checking for non-masquerade mode because admin may not be an instructor
//not checking for non-masquerade mode because admin may not be a student
/*
/**
/**
/**
/**
/**
/**
/**
/**
// see setup()
// either will be chosen by default when a section is selected
// accessControl--filtering of the result is tested in FeedbackSessionsLogicTest,
// so the test here about filtering is not rigorous
/**
/**
/**
// TODO fix these violations
// TODO fix this violation
// TODO remove the next after migration
/**
/**
/**
/**
// Session is closed recently
// fsLogic will set the flag to false
// Ditto, but with disabled closed reminder
// fsLogic will set the flag to false
// Still in grace period; closed reminder should not be sent
// fsLogic will set the flag to false
// 5 students and 5 instructors in course1
/**
// Modify session to close in 24 hours
// fsLogic will set the flag to true
// Ditto, but disable the closing reminder
// fsLogic will set the flag to true
// 1 session not yet opened; do not send the closing reminder
// fsLogic will set the flag to true
// 5 students and 5 instructors in course1, 1 student has completed the feedback session
/**
// Close the session and re-open with the opening time 1 day before
// 5 students and 5 instructors in course1
/**
// 5 students and 5 instructors in course1
/**
// Publish session by moving automated publish time
// Publish session by moving automated publish time and disable publish reminder
// Do a manual publish
/**
// re-read from Datastore to update the respondents list
// 1 student and 4 instructors sent reminder, 1 instructor notified
// notification to only requesting instructors
// Ensure that every email recipient is accounted for
/**
// send 3 emails as specified in the submission parameters
/**
// send 2 emails as specified in the submission parameters
/**
// 5 students and 5 instructors in course1
/**
/**
/**
/**
/**
//no links or input validation to check
/**
/**
// Instructor table
// Student table
/**
/**
// courseName resides in tooltip and is expected to be sanitized in the attribute
// adjustments made based on differences in sanitization used in fn:escapeXml
/**
/**
// courseName resides in tooltip and is expected to be sanitized in the attribute
// adjustments made based on differences in sanitization used in fn:escapeXml
/**
// no test data used in this test
/**
/**
// This test suite requires some real accounts; Here, we inject them to the test data.
// getHomePage();
//cannot access admin while logged in as student
// AppUrl nonExistentActionUrl = createUrl("/page/nonExistentAction");
// AppPage.getNewPageInstance(browser, nonExistentActionUrl, NotFoundPage.class);
// getHomePage().clickStudentLogin();
// getHomePage().clickInstructorLogin();
// getHomePage().clickInstructorLogin();
//cannot access directly
//cannot access by masquerading either
// A simple regex check is enough because we do full HTML tests
// elsewhere
// currentPage.changePageType(NotAuthorizedPage.class);
/**
// no test data used in this test
// users of this API are not supposed to let the following case happen
// empty table--trivial case, will not be tested
// empty cell--will not be tested
// cannot find table--will not be tested
// cannot find columns--will not be tested
//TODO: add test cases for other methods in AppPage
/**
/*
// Set closing time of one feedback session to tomorrow
// Set closing time of one feedback session to 30 mins ago
// Set opening time for one feedback session to yesterday
//Published time for one feedback session already set to some time in the past.
/**
/**
//TODO: move/create other ConstSumOption question related UI tests here.
//i.e. results page, submit page.
// TODO: Check that after deleting, the value is cleared
/**
/**
/**
// Make sure that constSumPointsTotal radio button is selected by default
// Verify that constSumPointsForEachOption field is disabled
// Select constSumPointsPerOption radio button
// Verify that constSumPoints field is disabled
// Select constSumPointsTotal radio button.
// Verify that constSumPointsForEachOption field is disabled
/**
//TODO: move/create other ConstSumRecipient question related UI tests here.
//i.e. results page, submit page.
/**
// Make sure that constSumPointsTotal radio button is selected by default
// Verify that constSumPointsForEachRecipient field is disabled
// Select constSumPointsPerOption radio button
// Verify that constSumPoints field is disabled
// Select constSumPointsTotal radio button.
// Verify that constSumPointsForEachRecipient field is disabled
/**
//TODO: move/create other Contribution question related UI tests here.
//i.e. results page, submit page.
//no question specific options to test
// default (first option)
//Check invalid feedback paths are disabled.
//Javascript should hide giver/recipient options that are not STUDENTS to OWN_TEAM_MEMBERS_INCLUDING_SELF
/**
/**
//TODO: move/create other MCQ question related UI tests here.
//i.e. results page, submit page.
//Make the generate options checkbox unchecked
// TODO: Check that after deleting, the value is cleared
//NOTE: Tests feedback giver/recipient and visibility options are copied from previous question.
/**
// Check if the MCQ weights column are visible or not.
// Check the 'other' option is disabled and otherWeight cell is hidden
// Check Assign MCQ weights Enabled but other option disabled
// Assign Other option and test that other weight cell is displayed.
// Uncheck checkboxes for consistency among other tests,
// otherwise these settings will persist after cancelling the question form
// Uncheck the 'Choices are weighted' checkbox.
// Cancel question
// Check if the 'Choices are weighted' checkbox unchecked by default.
// Check if the MCQ weights column hidden by default
// Fill MCQ choices and check corresponding weight values
// Verify MCQ other weight default value
// verify html page
// Delete the question
// Add a question with valid weights to check front-end validation
// Edit the question to enter invalid weight values
// Check validation for MCQ weight cells
// Check validation for empty other weight
// Check validation for the weight cells added by 'add option' button
// Check validation for mcq weight box
// Check validation for other weight
// Check validation for weight cells added by 'Add Option' button
// Delete the question.
// Fill MCQ choices and corresponding weight values
// Check that weights have been added correctly
// Check that weights have been added correctly
// Test for choice that has only spaces
// Choices with only spaces
// The question form removes invalid choices,
// So, the corresponding weights should be removed as well, without throwing an error.
// Check that the invalid choice and the corresponding weight cell is removed from the question.
// Check that weight has not been added to the question.
// Size of weight list should remain 3 as weight has not been added.
// Delete the question.
// Add a question to test edit weight feature.
// Fill MCQ choices and check corresponding weight values
// verify weights for the question
// verify html page
// Test visibility of mcq weights and checkbox before selecting mcq generated option.
// Check that 'choices are weighted' checkbox is hidden
// Uncheck the generated option checkbox
// Check that weight fields are again visible after unchecking generated option,
// and also check that all the fields have the default values stored.
// Add One option and check MCQ assign weight checkbox to check the mcq weight field value.
// Check the other option to test the value of other weight
// Create the Action URI for 'MCQ Weights Session' to show the result page.
// This will collapse the particular question 1 panel
/**
//TODO: move/create other MSQ question related UI tests here.
//i.e. results page, submit page.
//Make the generate options checkbox unchecked
// TODO: Check that after deleting, the value is cleared
// Check min/max selectable restrictions for
// new MSQ question with custom options
// Check min/max selectable restrictions for
// existing MSQ question with custom options
// Check min/max selectable restrictions for new
// MSQ question with options generated from students
// Check min/max selectable restrictions for existing
// MSQ question with options generated from students
// checking inputs after enabling maxSelectableChoices restriction
// when maxSelectableChoices = numOfOptions and
// an option is removed, maxSelectableChoices should decrease
// add an option back, maxSelectableChoices should remain same
// enable minSelectableChoices restriction only
// check inputs after enabling minSelectableChoices
// when minSelectableChoices = numOfOptions and
// an option is removed, minSelectableChoices should decrease
// add an option back, minSelectableChoices should remain same
// enable minSelectableChoices and maxSelectableChoices
// check inputs after enabling minSelectableChoices and maxSelectableChoices
// if maxSelectableChoices = minSelectableChoices and
// maxSelectableChoices is decreased, minSelectableChoices should also decrease
// when minSelectableChoices = maxSelectableChoices = numOfOptions and an option
// is removed, both minSelectableChoices and maxSelectableChoices should decrease
// add an option back, both minSelectableChoices and maxSelectableChoices should remain same
// disable minSelectableChoices and maxSelectableChoices
/**
// Check minSelectableChoices/maxSelectableChoices restrictions
// for MSQ question with options generated from students
// Check minSelectableChoices/maxSelectableChoices
// restrictions for MSQ question with options generated from teams
// enable minSelectableChoices/maxSelectableChoices
// restrictions, change generated options for selection
// disable minSelectableChoices and maxSelectableChoices
// checking inputs after enabling maxSelectableChoices
// enable minSelectableChoices restriction only
// enable minSelectableChoices and maxSelectableChoices restrictions
// check inputs after enabling minSelectableChoices and maxSelectableChoices
// set maxSelectableChoices = numOfOptions and minSelectableChoices = numOfOptions,
// then decreasing maxSelectableChoices must decrease minSelectableChoices too
// disable minSelectableChoices and maxSelectableChoices
/**
// Check if the MSQ weights column are visible or not.
// Check the 'other' option is disabled and otherWeight cell is hidden
// Check Assign MSQ weights Enabled but other option disabled
// Assign Other option and test that other weight cell is displayed.
// Uncheck checkboxes for consistency among other tests,
// otherwise these settings will persist after cancelling the question form
// Uncheck the 'Choices are weighted' checkbox.
// Cancel question
// Check if the 'Choices are weighted' checkbox unchecked by default.
// Check if the MSQ weights column hidden by default
// Fill MSQ choices and check corresponding weight values
// Verify MSQ other weight default value
// verify html page
// Delete the question
// Add a question with valid weights to check front-end validation
// Edit the question to enter invalid weight values
// Check validation for MSQ weight cells
// Check validation for empty other weight
// Check validation for the weight cells added by 'add option' button
// Check validation for Msq weight box
// Check validation for other weight
// Check validation for weight cells added by 'Add Option' button
// Delete the question.
// Fill MSQ choices and corresponding weight values
// Check that weights have been added correctly
// Check that weights have been added correctly
// Test for choice that has only spaces
// Choices with only spaces
// The question form removes invalid choices,
// So, the corresponding weights should be removed as well, without throwing an error.
// Check that the invalid choice and the corresponding weight cell is removed from the question.
// Check that weight has not been added to the question.
// Size of weight list should remain 3 as weight has not been added.
// Delete the question.
// Add a question to test edit weight feature.
// Fill MSQ choices and check corresponding weight values
// verify weights for the question
// verify html page
// Test visibility of msq weights and checkbox before selecting msq generated option.
// Check that 'choices are weighted' checkbox is hidden
// Uncheck the generated option checkbox
// Check that weight fields are again visible after unchecking generated option,
// and also check that all the fields have the default values stored.
// Add One option and check MSQ assign weight checkbox to check the msq weight field value.
// Check the other option to test the value of other weight
// Create the Action URI for 'MCQ Weights Session' to show the result page.
// This will collapse the particular question 1 panel
/**
//TODO: move/create other NumScale question related UI tests here.
//i.e. results page, submit page.
//Tests javascript that automatically makes max = min+1 when max is <= min.
//Reset values
/**
// verifies that question submit form without existing responses loads correctly
// to check if deleting responses work
// test rank messages
// try to submit with error
// Submit
// Go back to submission page and verify html
// try to submit duplicate ranks for question that permits it
// Go back to submission page
// to verify that the question submit form with existing response works correctly
// Question with only min options to be ranked restriction
// Question with only max options to be ranked restriction
// Question with both min and max options to be ranked restriction
// Question with only min recipients to be ranked restriction
// Question with only max recipients to be ranked restriction
// Question with both min and max options to be ranked restriction
// todo
// try to submit with insufficient non-blank option
// blank option at the start and end, to check they are removed
// Ensure that rank options is cleared.
// Unchecks and check to auto-fill with 1
// Verify that fields are editable
// Should end up with 4 choices, including (1) and (2)
// ticking "Maximum number of options a respondent must rank" checkbox only,
// should enable the maxOptionsToBeRanked input field only, with correct attributes
// ticking "Minimum number of options a respondent must rank" checkbox only,
// should enable the minOptionsToBeRanked input field only, with correct attributes
// ticking both "Minimum number of options a respondent must rank" checkbox and
// "Maximum number of options a respondent must rank" checkbox must enable both
// minOptionsToBeRanked and maxOptionsToBeRanked input fields, with correct attributes
// when maxOptionsToBeRanked = minOptionsToBeRanked,
// decreasing maxOptionsToBeRanked must decrease minOptionsToBeRanked too
// when maxOptionsToBeRanked = minOptionsToBeRanked,
// increasing minOptionsToBeRanked must increase maxOptionsToBeRanked too
// when maxOptionsToBeRanked = numOfOptions and maxOptionsToBeRanked = minOptionsToBeRanked,
// removing an option must decrease maxOptionsToBeRanked and minOptionsToBeRanked
// There are 2 instructors
// ticking "Maximum number of options a respondent must rank" checkbox only,
// should enable the maxOptionsToBeRanked input field only, with correct attributes
// ticking "Minimum number of options a respondent must rank" checkbox only,
// should enable the minOptionsToBeRanked input field only, with correct attributes
// ticking both "Minimum number of options a respondent must rank" checkbox and
// "Maximum number of options a respondent must rank" checkbox must enable both
// minOptionsToBeRanked and maxOptionsToBeRanked input fields, with correct attributes
// when maxOptionsToBeRanked = minOptionsToBeRanked,
// increasing minOptionsToBeRanked must increase maxOptionsToBeRanked too
// when maxOptionsToBeRanked = minOptionsToBeRanked,
// decreasing maxOptionsToBeRanked must decrease minOptionsToBeRanked too
/**
/**
// Question view
// Giver Recipient Question View
// Giver Question Recipient View
// Recipient Question Giver View
// Recipient Giver Question View
// Question view
// Done in testStudentSubmitPage
// Select table cell
// Submit
// Go back to submission page and verify html
// Submit another feedback response using another student's account
// Checks if the empty weight box is focused after clicking on 'Save question' button.
// If it is, that means the front-end validation works and the question is not submitted.
// Check if the weight cells added by 'Add Column' button are 'required' or not.
// Check if the weight cells added by 'Add Row' button are 'required' or not.
// Check if the 'required' attribute is removed and the question is successfully added or not,
// after the checkbox is unchecked.
// TODO somebody do this?
// Click edit button
// Check that fields are editable
// Check question text is updated
// Edit sub-question for row 1
// Add new sub-question
// Remove existing sub-questions
// Add new sub-question
// Remove new sub-question
// Should end up with 1 question
// Edit choice for col 1
// Add new choice
// Remove existing choice
// Add new choice
// Remove new choice
// Should end up with 4 choices, including (1) and (2)
// Edit the weight of the first choice
// Edit description for 0-0
// Edit description for a new row, to test if the js generated html works.
// Should end up with 2 rubric descriptions, (0) and (1)
// new column index 4
// checking move column for new column and row
// new column index 5
// new row index 2
// move last column to first
// move second column to last
// check buttons for new rubric question
// move last column to first
// move second column to last
/**
// This determines which column needs to be swapped and compared with the current column.
// Value 1 indicates column needs to be moved right. Swaps and comparisons happen accordingly.
// Value -1 indicates column needs to be moved left. Swaps and comparisons happen accordingly.
// swap current column with column
// to the left/right depending on offset
// this tests whether the JS validation disallows empty rubric options
// add a new question
// start editing it
// try to remove everything
// TODO check if the rubric column and link is indeed empty
// add something so that we know that the elements are still there
// and so that we don't get empty sub question error
// Check if the weight cells are visible or not.
// Uncheck checkboxes for consistency among other tests,
// otherwise these settings will persist after cancelling the question form
// Uncheck the 'Choices are weighted' checkbox.
// Check weight cells are hidden when checkbox is unchecked.
// Cancel question
// Fill choices and check corresponding weight values
// verify html page
// Delete the question
// Fill existing weight cells.
// Check that weights have been added correctly
// Weight list should contain 2 list (one for each subquestion) containing 4 weights each.
// Check weight values.
// Fill weight cells added with the new sub question
// Check that weights have been added successfully
// Check weights for each cell
// Fill weight cells added with the new sub question
// Check that weights have been added successfully
// All subquestions should have 5 cells attached after adding an additional column.
// Check weights for each cell
// Empty sub question
// Fill weight cells added with the new sub question
// Check that weights for empty sub question have not been added.
// The size of the weight list should remain same if adding weights for empty sub question fails.
// Delete the question
/**
// see beforeMethod()
// use both the student accounts injected for this test
//No input validation required
// student2 is yet to register, student1 is already registered
// get user authenticated so that we can access emails of them
// mark all emails as read to start from a clean state
// Hiding of the 'Send invite' link is already covered by content test.
//  (i.e., they contain cases of both hidden and visible 'Send invite' links.
// verify that all students did not receive reminders
// verify an unregistered student received reminder
// verify a registered student did not receive a reminder
// verify if sort is preserved after sending invite
// This is the full HTML verification for Instructor Course Details Page, the rest can all be verifyMainHtml
//the first table is the hidden table used for comments' visibility options
// ______TS("link: download student list");
// AppUrl studentListDownloadUrl = createUrl(Const.ActionURIs.INSTRUCTOR_COURSE_STUDENT_LIST_DOWNLOAD)
//                                 .withUserId("CCDetailsUiT.instr")
//                                 .withCourseId("CCDetailsUiT.CS2104");
// detailsPage.verifyDownloadLink(studentListDownloadUrl);
//Use ${test.student1} etc.
/**
// wait for some time for possible emails to arrive in the student's inbox
/**
/**
// This is the full HTML verification for Instructor Course Edit Page, the rest can all be verifyMainHtml
// Add instructor
// Edit instructor
// Add instructor
// Edit instructor
// not displayed to students
// select the role as Custom for instr1
// deselect some privileges from Co-owner default values
// after 3 sections added, no more things to add
// course level
// section level
// session level
// course level
// section level
// session level
// Create an registered instructor with all privileges except modifying instructors
// Create an unregistered instructor with co-owner privilege
// Delete own instructor role
// Delete other instructors
// Create another registered instructor with co-owner privilege
// Delete own instructor role
// Restore own instructor role to ensure remaining test cases work properly
/**
// TODO: use navigateTo instead
/**
// This is the full HTML verification for Instructor Course Enroll Page, the rest can all be verifyMainHtml
/* We test both empty and non-empty courses because the generated
// Modify team for student within section
// Modify section and team
// A student with no comment
// A new student with name containing accented characters
// This is the full HTML verification for Instructor Course Enroll Results Page, the rest can all be verifyMainHtml
// Check 'Edit' link
// Ensure students were actually enrolled
// Make the course empty
// A student with no comment
// A new student with name containing accented characters
// Check 'Edit' link
// Ensure students were actually enrolled
// Check 'Edit' link
// Ensure students were actually enrolled
// A new student with no email input
// A new student with invalid email input
// A new student with invalid team name
// A new student with invalid name
// Enroll a student with a script in the name
// Check that the script does not appear on the InstructorCourseEnrollResult page
// Check that the script does not appear on the InstructorCourseEnroll page either
/**
// use the instructor account injected for this test
/*covered in testJoinConfirmation()
// test content here to make test finish faster
// this test uses accounts from test.properties
// This is the full HTML verification for Instructor Course Join Confirmation Page,
// the rest can all be verifyMainHtml
/**
/* Comments given as 'Explanation:' are extra comments added to train
/* Explanation: This is made a global variable for convenience
/* Explanation: These two lines persist the test data on the server. */
/* Explanation: Ideally, there should not be 'state leaks' between
/*
// delete if it exists
/* Explanation: We bunch together everything as one test case instead
/* Explanation: We do 'non-invasive' (i.e., no changes to datastore) tests first */
// Explanation: Checks the rendering of the page content.
// Explanation: Checks the ajax request for course stats.
// Explanation: Checks if links going out of the page are correct
// Explanation: Checks if client-side input validation for fields
/* Explanation: We do 'invasive' tests last */
// Explanation: Checks 'actions' that can be performed using the page.
/* Explanation: The above categorization of test cases is useful in
/* Explanation: The page rendering is slightly different based on
// This is the full HTML verification for Instructor Courses Page, the rest can all be verifyMainHtml
// for course CS1101, current instructor cannot modify course or modify students
/* Explanation: We test each of 'view' links and 'enroll' links.
/* Explanation: When checking links, we check the destination page
/* Explanation: If the validation is done through one JS function
//one invalid case
//Checking max-length enforcement by the text boxes
/* Explanation: We test at least one valid case and one invalid case.
//this is a old instructor whose archive status is not set and is by default false
//after click archive button, new value will be assigned to instructor's isArchive attribute
//after this, his own archive status for this course will not be affected by other instructors
//of the same course
//this instructor already has his own non-null archive status
//so other instructors' archiving actions will not affect his own status
// TODO: Handling for the failure of archive and unarchive is still not good
// Need more improvement
// only possible if someone else delete the course while the user is viewing the page
// only possible if someone else delete the course while the user is viewing the page
// Delete and cancel
// Delete and confirm
// Delete all and cancel
// Delete all and confirm
/**
// no links to check
// This is the full HTML verification for Instructor Course Student Edit Page, the rest can all be verifyMainHtml
// Verify data
// Verify data
// Due to Google ID reset
// Verify adding the original student again does not overwrite the edited entity
/**
// This is the full HTML verification for Instructor Student Details Page, the rest can all be verifyMainHtml
// the helper here is configured to be able to view studentDetailsPage
// TODO: add test for the comment box in this page
/**
// test data is refreshed before each test case
// Full HTML verification already done in InstructorFeedbackSubmitPageUiTest
// Full HTML verification already done in InstructorFeedbackSubmitPageUiTest
// Unselect the mcq choice to remove response
/**
// Full HTML verification already done in InstructorFeedbackEditPageUiTest
// Full HTML verification already done in InstructorFeedbackEditPageUiTest
// Full HTML verification already done in InstructorFeedbackEditPageUiTest
/**
/** This contains data for the feedback session to be edited during testing. */
// see prepareData()
// This is the full HTML verification for Instructor Feedback Edit Page, the rest can all be verifyMainHtml
// test uncommon settings for 'send emails'
// The statement below is a 'dummy' but valid statement to wait for the data in back-end to be persistent
// TODO: to implement a more sophisticated method to wait for the persistence of data
// uncommon settings panel not in default will be automatically expanded
// test uncommon settings for 'session responses visibility'
// The statement below is a 'dummy' but valid statement to wait for the data in back-end to be persistent
// TODO: to implement a more sophisticated method to wait for the persistence of data
// test expanded uncommon settings section
// uncommon settings panel not in default will be automatically expanded
// Restore defaults
// Do a backdoor 'manual' publish.
// Ensuring that the settings did not default back to original values after manual publishing
// Restore defaults
// check if each question panel is expandable
//TODO: use simple element checks instead of html checks after adding names to the checkboxes
//      in the edit page (follow todo in instructorsFeedbackEdit.js)
//change back
// use getAttribute("textContent") instead of getText
// because of the row of Recipient's Team Members is not displayed
// Add 2 questions
// Enable edit mode before testing canceling
// Delete both questions to reset the status for the following tests
// edit so that both questions have the same question number
// verify both can be edited
// fix inconsistent state
// Check that the duplicated question is added to the feedback session
// Content is not tested as it follows the same logic for copy question which is tested
// Remove the question duplicated to not affect other test cases
// revert back to state expected by tests after this by deleting new copied questions
// testing recipientTypes
// testing giverTypes
// testing specific giverType-recipientType combinations
// remove the header row
// Create a new question and save
// Delete the new question through the backdoor so that it still appears in the browser
// Edit the deleted question and save
// Restore feedbackEditPage
// Create a new question and save
// Create response for the new question
// Change the feedback path of the question and save
// Delete the question
// add questions for previewing
// restore feedbackeditpage
// check redirect to main feedback page
/**
// see prepareData()
// TODO: `clickCommentModalButton` should wait for modal to open before returning
// TODO: all instances of this should do an immediate check instead of waiting for the error message
// Add first comment to response
// TODO: Wait for comment to be added before returning
// TODO: all instances of this should do an immediate check instead of waiting for the comment to be added.
/**
// the actual test data is refreshed before each test method
// This is the full HTML verification for Instructor Feedback Results Page, the rest can all be verifyMainHtml
// results page should be able to load incorrect data and still display it gracefully
// need to retrieve question from datastore to get its questionId
// make both questions have the same question number
// compare html for each question panel
// to verify that the right responses are showing for each question
//div[contains(@class,'panel')][.//input[@name='questionid'][@value='"
//div[contains(@class, 'table-responsive')]");
//div[contains(@class,'panel')][.//input[@name='questionid'][@value='"
//div[contains(@class, 'table-responsive')]");
// Do not sort by team
// By question
// TODO: Test sorting fully instead of partially.
// Do not sort by team
// Mouseover actions do not work on Selenium-Chrome
// Change fs name so that the ajax request will fail
// Get an error page due to missing parameters in URL
// If admin is an instructor, expected url is InstructorHomePage
//                 otherwise, expected url is unauthorised.jsp
// assertTrue("Expected url is InstructorHomePage or Unauthorised page, but is " + afterReportDownloadUrl,
//            afterReportDownloadUrl.contains(Const.WebPageURIs.INSTRUCTOR_HOME_PAGE)
//            || afterReportDownloadUrl.contains(Const.ViewURIs.UNAUTHORIZED));
// return to the previous page
// check if the rows match the given order of values
// click the sort icon again and check for the reverse order
/**
/** This contains data for the new feedback session to be created during testing. */
// the actual test data is refreshed before each test method
// This is the full HTML verification for Instructor Feedbacks Page, the rest can all be verifyMainHtml
// TODO: possibly remove some of the test cases below in the future
// Check that we are redirected to the edit page.
//TODO: check that the questions created match. Maybe do that in action test.
//Remove added session to prevent state leaks.
// disable emails for opening and closing
// fill in defaults
// set back to default course
// toggle emails for closing and results
// start time in past
// enable emails for closing
// visible from time is in future, hence the year.
//feedbackPage = getFeedbackPageForInstructor(idOfInstructorWithSessions);
/**
// Check that we are redirected to the edit page.
// Check that we are redirected to the edit page.
// Go back to previous page because 'copy feedback session' redirects to the 'FeedbackEdit' page.
// refresh page
// Delete and cancel
// Delete and confirm
// Delete all and cancel
// Delete all and confirm
//TODO implement this
// refresh page
// Test that the resend published link button doesn't exist
// Test that the resend published link button exists
// Test that the resend published link button can be clicked and the form can be cancelled
// Test the status message when the form is submitted with empty recipient list
// Test the status message when the form is submitted with a recipient list
// refresh page
// setup various dates for later test cases
// fill in default values for later test cases
//check if maxDate is start time and not publish time
// row -> row
// row -> radio
// radio -> radio
// radio -> row
// row -> radio (same row)
// refresh page
/**
// test data is refreshed before each test case
// No links to test
// This is the full HTML verification for Instructor Feedback Submit Page, the rest can all be verifyMainHtml
// Test partial response for question
// Just check that some of the responses persisted.
// Test editing an existing response + fill up rest of responses at the same time
// Changed from "Algo" to "UI"
// Click on "None of the above", the option will be deselected when another option is clicked
// Just check the edited responses, and two new response.
// checks that "" can be submitted and other choices reset when "" is clicked
// mcq questions comments
/**
// Nothing much to test for input validation.
// Test fields are disabled when session is closed.
// Test input disabled
// Test that the recipient selection is disabled and not visible
// Test input disabled
// Test that the recipient selection is disabled and not visible
// Test input disabled
// Test that the recipient selection is disabled and not visible
// Test input disabled
// Test that the recipient selection is disabled and not visible
// Test input entered are valid numbers for the question.
// 1 decimal allowed, not a valid response
// > 3 decimals allowed but still not a valid response
// users not allowed to type letters but if somehow in, not a valid response
// if < minimum, textbox will be set to minimum
/* Note: Negative will be tested properly on Chrome or Safari but not on Firefox,
/* However, if we test -1.23, on Chrome and Safari it will be changed to 1 but on
// submitPage.fillResponseTextBox(qnNumber, responseNumber, "-1.23");
// assertEquals("1", submitPage.getResponseTextBoxValue(qnNumber, responseNumber));
// if > maximum, int or with decimals, textbox will be set to maximum
// Test input disabled
// Test that the recipient selection is disabled and not visible
// Test instructions displayed for filling the form
// Test messages for const sum (to recipient) qn without restriction
// Test messages for const sum (to option) qn without restriction
// Test messages for const sum (to recipient) qn with uneven distribution
// Test messages for const sum (to options) qn with uneven distribution
// Test messages for const sum (to recipients) qn with uneven distribution for at least some recipients
// Test messages for const sum (to options) qn with uneven distribution for at least some options
// No tests from instructor since contribution questions are only from students to own team members.
// Test by logging in as student instead.
// Test input disabled
// Test that the recipient selection is disabled and not visible
// Next, we edit some student data to cover editing of students after creating the responses.
// move one student out of Team 2 into a new team, should not cause the existing response to disappear
// delete one student, should remove (hide on page render; not deleted) the response made to him,
// and change the number of options in the recipient dropdown list.
/**
// no test data used in this test
/**
// TODO: refactor this test. try to use admin login or create instructors and courses not using json
// Remove entities created during test
// This is the full HTML verification for Instructor Home Page, the rest can all be verifyMainHtml
//this case is implicitly tested when testing for 'delete course' action and
//new instructor without sample course
//loginAsInstructor(testData.accounts.get("newInstructorWithSampleCourse").email);
//already logged in
// Should not see private session
// update current instructor for CS1101 to have Co-owner privileges
// Test that download result button exist in homePage
// Verify an error page is returned due to missing parameters in URL
// assertTrue("Expected url is Unauthorised page, but is " + afterReportDownloadUrl,
//                 afterReportDownloadUrl.contains(Const.ViewURIs.UNAUTHORIZED));
// Redirect to the instructor home page after showing error page
// Test that the resend published link button exists for this published session
// Test that the resend published link button can be clicked and the form can be cancelled
// Test the status message when the form is submitted with empty recipient list
// Test that the resend published link button does not exist for this not published session
// Both will be false before it is archived for testing
//delete the course, then submit archive request to it
// assertTrue(browser.driver.getCurrentUrl().contains(Url.addParamToUrl(Const.ViewURIs.UNAUTHORIZED,
//         Const.ParamsNames.ERROR_FEEDBACK_URL_REQUESTED, Const.ActionURIs.INSTRUCTOR_COURSE_ARCHIVE)));
// recover the deleted course and its related entities
// Change action link so that ajax will fail
// Wait for modal to appear and show error.
//delete the other course as well
// Tested in student list page
/**
// upload a profile picture for one of the students
// This is the full HTML verification for Instructor Search Page, the rest can all be verifyMainHtml
/**
// put the search document for students only
// upload a profile picture for one of the students
// This is the full HTML verification for Instructor Student List Page, the rest can all be verifyMainHtml
// verify copy email functionality
// update current instructor privileges
// Mouseover actions do not work on Selenium-Chrome
// The following photo-related tests somehow does not work in AppVeyor environment.
// This should not be the same "bug" as the Chrome-related above as similar tests in
// InstructorFeedbackResultsPageUiTest still pass.
// TODO fix this
// already covered under testContent()
// ______TS("content: search active")
/**
// This is the full HTML verification for Instructor Student Records Page, the rest can all be verifyMainHtml
// TODO add link to a feedback session
/**
// use the instructor account injected for this test
//load the enrollPage
//Wait briefly to allow task queue to successfully execute tasks
//Verify pre-existing submissions and responses
// It might take a while for the submission adjustment to persist (especially on the live server),
// during which the pre-existing submissions and responses would be counted.
// Hence, this needs to be retried several times until the count becomes zero.
/**
// loginAdmin();
// We do not release the browser instance here because we want the tester to see the loaded page.
/**
/**
// No need  of data. Dummy data only for scrolling purposes
// 400ms which gives enough time to scroll
// 400ms which gives enough time to scroll
/**
// use the 1st student account injected for this test
// TODO: remove this test by 21/09/2014
// this test uses accounts from test.properties.
// NOTE: the logout link at the bottom of the page has to be changed to {*}
//       since the link is different in dev and staging servers
// This is the full HTML verification for Student Course Join Confirmation Page, the rest can all be verifyMainHtml
/*covered in testJoinConfirmation()
// this test uses accounts from test.properties
// This is also a HTML verification for Student Course Join Confirmation Page because they use the
// same html file for verification
// continuously ask BackDoor to get the key until a legit key is returned
/**
// Open Session
// Mcq Session
// This is the full HTML verification for Unregistered Student Feedback Results Page,
// the rest can all be verifyMainHtml
// This is the full HTML verification for Registered Student Feedback Results Page,
// the rest can all be verifyMainHtml
// clear the googleId
/**
// test data is refreshed before each test case
// This is the full HTML verification for Unregistered Student Feedback Submit Page,
// the rest can all be verifyMainHtml
// this session contains questions to instructors, and since instr3 is not displayed to students,
// student cannot submit to instr3
// This is the full HTML verification for Registered Student Feedback Submit Page, the rest can all be verifyMainHtml
// see comment for awaiting session
// Test partial response for question
// total sums up to expected value, verify empty entries are filled with 0
// delete an auto-filled 0, verify it's auto-filled again
// modify a non-zero value and remove a 0
// verify no longer auto-filled with 0
// clear both input box for successful form submission.
// Just check that some of the responses persisted.
// toggle 'Algo' radio option
// Test editing an existing response
// + fill up rest of responses at the same time
// Changed from "Algo" to "UI"
// Just check the edited responses, and two new response.
//check new response
//check edited
// Submit response with 1 option checked
// Submit response with 2 options checked
// Submit response with 3 options checked
// Submit response with 4 options checked
// Uncheck an option so that response is valid
// Submit response for 1st recipient with 2 options checked
// Submit response for 1st recipient with 3 options checked
// Submit response for 1st recipient with 4 options checked
// Test partial response for question
// this should not give any error since the value will be automatically adjusted before the form is submitted
// adjusted value should be 1
// this should not give any error since the value will be automatically adjusted before the form is submitted
// adjusted value should be 5
/* Attention: in safari or chrome, negative sign "-" can be input so the result will be adjusted to 1
// We need the final response value for this particular question to be "5"
// Select the first option for the first question for each student
// Switch to mobile view
// Test if changes on desktop view persisted to mobile view
// Clear option for the first question for each student
// Select the second option for the second question for each student
// Switch to desktop view
// Test if changes on mobile view persisted to desktop view
// Next, we edit some student data to cover editing of students
// after creating the responses.
// move one student out of Team 2 into a new team
// This should cause the page to render an extra response box for
// the team question.
// delete one student
// This should remove (hide on page render; not deleted) the response made to him,
// and change the number of options in the recipient dropdown list.
// move Benny out of Team >'"< 1 into team 2 and change her email
// This should cause the team mates question to disappear completely as
// no one else is in Team >'"< 1, but other responses to Benny should remain.
// verify submission with no-response questions are possible
// verify that existing responses with invalid recipients do not affect submission
/**
// no test data used in this test
// loginAdmin();
//check if the rows match the given order of values
//click the sort icon again and check for the reverse order
/**
//invalid name
/**
// nothing inside query
// course id with question id
// course id with response id
// session name without course id
// session name with question id
// session name with response id
// question id with response id
// build deletion of course
// build deletion of session
// build deletion of question
// build deletion of response
/**
/**
/**
//already tested in testValidate() above
//already tested in testValidate() above
/**
/**
/**
// getMcqWeight() returns empty list as there are no mcq choices set.
// As one weight can not be parsed, there will be only one weight in the list
// As one weight can not be parsed, there will be only one weight in the list
// As weights are disabled, getMcqWeights should return an empty list.
// As 'other' option is disabled, 'otherWeight' will have default value of 0.0
// As weights is disabled, even though other is enabled, otherWeight will have it's default value.
// Other weight value before editing the question
// As 'aa' is not valid double value, other weight will keep the previous value
// Removed to send null as otherWeight parameter
// requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQ_OTHER_WEIGHT, new String[] { "" });
// Remove this weight to make number of choices greater than number of weights
// requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQ_WEIGHT + "-1", new String[] { "1.55" });
// Pass negative weight for choice 1 to check that negative weights are not allowed.
// Pass negative weight for 'Other' option to check that negative weights are not allowed.
//duplicate cases that has trailing and leading spaces
// As, weights does not support other generateOptionsFor options then 'NONE',
// here in this case, even though we assigned weights for 'Generate Options for Student'
// the weights will remain disabled, and the weights list will remain empty.
/**
// getMsqWeight() returns empty list as there are no msq choices set.
// As one weight can not be parsed, there will be only one weight in the list
// As one weight can not be parsed, there will be only one weight in the list
// As weights are disabled, getMsqWeights should return an empty list.
// As 'other' option is disabled, 'otherWeight' will have default value of 0.0
// As weights is disabled, even though other is enabled, otherWeight will have it's default value.
// Other weight value before editing the question
// As 'aa' is not valid double value, other weight will keep the previous value
// The following line is commented out, so otherWeight parameter is missing from the requestParams.
// requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MSQ_OTHER_WEIGHT, new String[] { "" });
// The following msqWeight-1 is commented out, so the number of Weights can become 1 whereas numOfChoices is 2.
// requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MSQ_WEIGHT + "-1", new String[] { "1.55" });
// Pass negative weight for choice 1 to check that negative weights are not allowed.
// Pass negative weight for 'Other' option to check that negative weights are not allowed.
//duplicate cases that has trailing and leading spaces
// As, weights does not support other generateOptionsFor options then 'NONE',
// here in this case, even though we assigned weights for 'Generate Options for Student'
// the weights will remain disabled, and the weights list will remain empty.
// 'other' is NOT one of the choices
// 'other' is one of the choices
/**
// .build() will remove irrelevant visibilities options, so the lists showResponsesTo,
// showGiverNameTo, and showRecipientNameTo are not the same as the ones in qn
// check that other types are not removed
// RECEIVER_TEAM_MEMBERS is removed as it is irrelevant visibility
/**
/**
/**
// Default values for following fields
//test.com/test.png\"></image> hello";
//test.com/test.png \"", commentText);
//test.com/test.png\"></image> hello";
/**
/**
// getRubricWeightForEachCell() returns empty list as there are no choices set.
// getRubricWeightForEachCell() returns empty list as there are no sub questions set.
// As SubQn-0 is empty, no weights for SubQn-0 should be parsed,
// So, weight list will contain 1 value (weights for SubQn-1).
// Check weights for SubQn-1 (for cell-1-0, cell 1-1).
// As no weights have been passed, the weight list will be empty
// As invalid weight is passed for weight-0-0, there will be only one weight for SubQn-0.
// Check weights for SubQn-0 (for cell-0-1)
// Check weights for SubQn-1 (for cell-1-0, cell 1-1).
// As weights are disabled, weight list should be empty
// Check for the size of the weight list.
// Check weight list for correct values.
/**
/**
// Default values
// constructor update option based on existing update option
/**
/**
// invalid values
// valid values
/**
// Check default values for optional params
// key remains
// regKey should not carried
/**
// co-owner: all true
// manager: only one false
// observer: view only
// tutor
// helper
//TODO: more checking for this and the method follows
// restore courseLevel to pre-validate
/**
/**
// last name is specified in updateOptions, use the value.
// last name not specified in updateOptions, split the name.
// Id is not given yet
// Id empty
// Id given
/**
// the toString must be unique to the values in the object
// -------------------------------------------------------------------------------------------------------
// -------------------------------------- Helper Functions
// -----------------------------------------------
// -------------------------------------------------------------------------------------------------------
// tests both the constructor and the invalidity info
/**
// CHECKSTYLE.OFF:SingleSpaceSeparator vertical alignment of values for readability
//only one person submitted
//only one person, submitted for self only
//two-person team
//TODO: special treatment for two-person teams?
//one-person team
//anther interesting mix of values (used in Ui Tests)
// CHECKSTYLE.ON:SingleSpaceSeparator
//mix of special values in filter
// target array has special values
//--------------------------------------------------------------------
/**
// test data is refreshed before each test case
// Create correct student with original@email.com
// check that we have the corresponding new account created.
// promote account to instructor
// make the student 'unregistered' again
// rejoin
// check if still instructor
//Delete account to simulate Account object creation goes wrong
//Try to join course again, Account object should be recreated
// create a profile for the account
// verify the instructor is the last instructor of a course
// Make instructor account id a student too.
// course is deleted because it is the last instructor of the course
// verify the instructor is not the last instructor of a course
// course is not deleted
// verify the instructor is the last instructor of a course
// the archived instructor is also deleted
// the course is also deleted
// other irrelevant instructors remain
/**
/**
// test data is refreshed before each test case
// Student having zero courses is not applicable
// This student is in both course 1 and 2
// Get course details for student
// Verify number of courses received
// student with no courses is not applicable
// check if course belongs to this instructor
/* Explanation: SUT has 5 paths. They are,
//create a duplicate instructor
//remove the duplicate instructor object from the datastore.
// Ensure there are entities in the datastore under this course
// Ensure the course is not in Recycle Bin
// Ensure the course and related entities still exist in datastore
// Ensure the course is moved to Recycle Bin
// Ensure there are entities in the datastore under this course
// Ensure the course is currently in Recycle Bin
// Ensure the course and related entities still exist in datastore
// Ensure the course is restored from Recycle Bin
// Move the course back to Recycle Bin for further testing
// Ensure there are entities in the datastore under this course
// Ensure the course is currently in Recycle Bin
// Ensure the course and related entities still exist in datastore
// Ensure the courses are restored from Recycle Bin
// Move the course back to Recycle Bin for further testing
// Ensure there are entities in the datastore under this course
// Ensure the course and related entities are deleted
/**
// data bundle not persisted before test since the remove/restore data itself is being tested
// Not checking for invalid values in other entities because they
// should be checked at lower level methods
/**
// opened and unpublished.
// closed and unpublished
// opened and published.
// closed and published
// (5 instructors, 6 students reminded) and (1 instructor to be notified)
// Verify the student reminder email
// Verify the Student email copy send to the instructor
// Verify the instructor reminder email
// student1 has completed the feedback session and closing alert is only sent for those who are
// yet to complete, so we resort to student5
// InstructorAttributes sanitizes name before saving
// check recipient
// check subject
// check sender name
// check sender email
// check reply to address
// check email body for expected content
// check email body for no left placeholders
/**
// no test data used in this test
/**
// see beforeMethod()
// other sessions are not affected
// 5 students minus giver himself
// instructor is not student so he can respond to all 5.
// 3 - giver = 2
//Appends a question to the back of the current question list
//new question should not have an ID.
//Add a question to session1course1 and sets its number to 1
//new question should not have an ID.
//Add a question to session1course1 and place it between existing question 2 and 3
//new question should not have an ID.
// the question has some responses and comments
// the responses and comments should gone
// verify that questions are shifted
// other questions not get affected
// the student only gives this response for the session
// suppose he is in the respondents list
// after deletion the question
// instructor respondents will not change
// the student should not in the respondents
// test that questions in other courses are unaffected
// construct a typical question
// NONE
// STUDENTS
// STUDENTS_EXCLUDING_SELF
// TEAMS
// TEAMS_EXCLUDING_SELF
// INSTRUCTORS
// construct a typical question
// TEAMS_EXCLUDING_SELF
/**
// test data is refreshed before each test case
// reset email
/**
// test data is refreshed before each test case
// extra test data used on top of typical data bundle
// Alice will see 4 responses
// Benny will see 4 responses
// Charlie will see 3 responses
// Danny will see 3 responses
// Emily will see 1 response
// Cannot have invalid params as all possible invalid params
// are copied over from an existing response.
// Student 4 has 1 responses to him from team members,
// 1 response from him a team member, and
// 1 team response from him to another team.
// Add one more non-team response
// All these responses should be gone after he changes teams
// Non-team response should remain
// make sure it's the last response by the student
// the response is given by the student
// make sure it's not the last response by the student
// the response is given by the student
// Student 1 currently has 11 responses to him and 2 from himself.
// Student 1 currently has 1 response comment for responses from instructor to him
// and 1 response comment from responses from himself.
// student's comment
// instructor comment
// other more in-depth sectionDetail types are tested in FeedbackResponsesDbTest.java
//Create a "null" response to simulate trying to get a null student's response
// Only members of the recipient team should be able to see the recipient name
// suppose the student is in the respondents list of a session
// the responses also have some associated comments
// the student has some responses
// responses should be deleted
// comments should also be deleted
// the student is no longer in the respondents list
// should pass silently
// the response has comments
// associated comments are deleted
// test that responses are deleted
// test that responses from other courses are unaffected
// this is the only response the student has given for the session
// suppose the student is in the respondent list
// instructor respondents not change
// there is no student X in student respondents
// this is the only response the instructor has given for the session
// suppose the instructor is in the respondent list
// student respondents not change
// there is not instructor X in instructor respondents
// giver is student
// student is the recipient
// this is the only response the giver has given for the session
// suppose the student is in the respondent list
// after the recipient is moved from the course
// instructor respondents not change
// there is no student X in student respondents
// giver is instructor
// student is the recipient
// this is the only response the instructor has given for the session
// suppose the instructor is in the respondent list
// after the recipient is moved from the course
// student respondents not change
// there is not instructor X in instructor respondents
// both responses got some comments
// responses received by the team should be deleted
// their associated comments should be deleted
// the following two responses are given by student4InCourse1 as a representative of his team
// update the response's giver to the team name
// update the response's giver to the team name
// both responses got some comments
// responses received by the team should be deleted
// their associated comments should be deleted
// giver is instructor
// team is the recipient
// this is the only response the giver has given for the session
// suppose the instructor is in the respondent list
// after the team's responses are deleted
// student respondents not change
// there is no instructor1OfCourse2 in instructor respondents
// suppose the instructor is in the respondents list of a session
// the instructor has some responses
// the responses also have some associated comments
// responses should be deleted
// comments should be deleted
// it should no longer be in the session respondents list
/**
// see beforeMethod()
// delete existing feedback session directly
// delete feedback session in recycle bin
// they are in the same course
// delete all session under the course
// they should gone
// sessions in different courses should not be affected
// they are in the same course
// remove email from all respondents list
// the email should not appear
// they are in the same course
// remove email from all respondents list
// the email should not appear
// delete the instructor from the list
// delete the student from the list
// no need to removeAndRestoreTypicalDataInDatastore() as the previous test does not change the db
// restore the new course from Recycle Bin, and delete the newly added session as
// removeAndRestoreTypicalDataInDatastore() wont do it
// restore the new course from Recycle Bin, and delete the newly added session as
// removeAndRestoreTypicalDataInDatastore() wont do it
// restore the new course from Recycle Bin, and delete the newly added session as
// removeAndRestoreTypicalDataInDatastore() wont do it
// Create a question under the session to test for cascading during delete.
// This file contains a session with a standard
// session + a special session with all questions without recipients.
// 2 instructors, 6 students = 8
// 1 instructor, 1 student, did not respond => 8-2=6
// 2 instructors, 6 students = 8
// only 1 student responded
// 1 instructors, 1 students = 2
// no responses
// 2 valid sessions in course 1, 0 in course 2.
// Student can see sessions 1 and 2. Session 3 has no questions. Session 4 is not yet visible for students.
// Course 2 only has an instructor session.
// The instructor session has questions where responses are visible
// 3 valid sessions in course 1, 1 in course 2.
// Instructors should be able to see all sessions for the course
// We should only have one session here as there is only one session in the course.
// We just test this once.
// There should be 3 questions for students to do in session 1.
// Other questions are set for instructors.
// Question 1
// Comment on response 1 of question 1
// Question 2
// Comment on response 1 of question 2
// Question for students to instructors
// Check that instructors (except the one who is not displayed to student) appear as recipients
// Check that student3 get team member's (student4) feedback response as well (for team question).
// Question 1
// Question 2, no responses from this student yet
// We just test this once.
// There should be 2 question for students to do in session 1.
// The final question is set for SELF (creator) only.
// Question 1
// Comment on response 1 of question 1
// Question 2
// This file contains a session with a standard
// session which needs to have enough qn/response combinations to cover as much
// of the SUT as possible
/* Test result bundle for student1 */
// We just check for correct session once
// Student can see responses: q1r1, q2r1,3, q3r1, qr4r2-3, q5r1, q7r1-2, q8r1-2
// We don't check the actual IDs as this is also implicitly tested
// later when checking the visibility table.
// Test the user email-name maps used for display purposes
// Test the user email-teamName maps used for display purposes
// Test 'Append TeamName to Name' for display purposes with Typical Cases
// Test 'Append TeamName to Name' for display purposes with Special Cases
// case: Unknown User
// case: Nobody
// case: Anonymous User
// Test the generated response visibilityTable for userNames.
/* Test result bundle for instructor1 within a course */
// Instructor can see responses: q2r1-3, q3r1-2, q4r1-3, q5r1, q6r1
//Instructor should still see all questions
// Test the user email-name maps used for display purposes
// Test the user email-teamName maps used for display purposes
// Test the generated response visibilityTable for userNames.
/* Test result bundle for instructor1 within a section */
// Instructor can see responses: q2r1-3, q3r1-2, q4r1-3, q5r1, q6r1
// after filtering by section, the number of responses seen by instructor will differ.
// Responses viewed by instructor after filtering: q2r1-3, q3r1, q4r2-3, q5r1
//Instructor should still see all questions
// Test the user email-name maps used for display purposes
// Test the user email-teamName maps used for display purposes
// Test the generated response visibilityTable for userNames.
// TODO: test student2 too.
// Responses viewed by instructor after filtering: q1r1, q2r1, q4r3
// Responses viewed by instructor after filtering: q2r1-3, q3r1, q4r2-3, q5r1
// Responses viewed by instructor after filtering: q2r1, q2r3, q3r1, q4r3
//TODO: check for cases where a person is both a student and an instructor
// results for single question with sectionDetail is tested in InstructorFeedbackResultsDownloadActionTest.java
// instructor not allowed to see student
// instructor not allowed to view student responses in section
// updated session not open, status set to false
// updated session open, status set to true
// updated session closed, status set to true
//  updated session not closed, status set to false
// updated session not closed, status set to false
// closed in 10 minutes, should not send closing email anymore
// updated session published, status set to true
// updated session not published, status set to false
// set as manual publish
// Set real time of publishing
// Extract response id from datastore based on json key.
// Stringifies the visibility table for easy testing/comparison.
/**
//TODO: test isUserLoggedIn method
// also make this user a student of another course
// check for user not logged in
/**
// test data is refreshed before each test case
// responses are updated
// comment giver are updated
// last editor is updated
// respondents in session is updated
// the instructors has some responses in course
// there should be no response of the instructor
// the course is not empty at the beginning
// other course is not affected
// this is an archived instructor
// the instructor should be deleted also
// make instructor1OfCourse1 to have the same googleId with instructor1OfCourse2
// instructor1OfCourse1 has some responses in course
// the two instructors have the same googleId but in different courses
// delete instructors for google ID
// the two instructors should gone
// instructor1OfCourse1's responses should be deleted also
// Generate ArrayList<String> of emails of all coOwners in course from data bundle
// Generate ArrayList<String> of emails of all coOwners from instructorsLogic.getCoOwnersForCourse
/**
/**
// no test data used for this test
// 4 functions are tested together as:
//      => The functions are very simple (one-liners)
//      => They are fundamentally related and easily tested together
//      => It saves time during tests
// more tests in ProfilesDbTest
// make sure we create an profile with picture key
// check that profile get deleted and picture get deleted
/**
// test data is refreshed before each test case
// move to a different team
// response exist
// response should not exist
// this student is in two courses, course1 and course 2.
// get list using student data from course 1
// get list using student data from course 2
// check the content from first list (we assume the content of the
// second list is similar.
// First student received turned out to be the one from course 2
// then the second student received must be from course 1
// the typical case below seems unnecessary though--it is not useful for now
// as the method itself is too simple
// they are in the same team
// delete the second student
// there is only one student in the team
// get the response from DB
// the team is the recipient of the response
// this is the only response the instructor has given for the session
// suppose the instructor is in the respondent list
// after the student is moved from the course
// team response will also be removed
// this will delete the response to the team
// the instructor will be removed from the respondents list
// should fail silently.
// the student has response
// verify responses of the student are gone
// verify that other students in the course are intact
// the student has response
// verify that the student is deleted
// his responses should also be deleted
// other students are not affected
// there are students in the course
// some have give responses
// students are deleted
// but course exist
// their responses are gone
// the two are in different course
// there are students in the course
// students are deleted
// students in other courses are not affected
// other students are not affected
/**
/**
// search engine need time to persist changes
// perform normal search
// session soft-deleted
// session deleted completely
// get response1ForQ1S1C1 from the datastore
// create a new comment
// the newly created comment is searchable
// perform normal search
// delete comments inside the session
// document deleted, should have no search result
/**
// create a new instructor with unique displayed name to test that field
// current displayed names in data bundle are either helper or instructor, which matches on many other fields
// create a new instructor
// the newly created instructor is searchable
// there is search result before deletion
// delete a student
// the search result will change
// delete all instructors in course 2
// there should be no search result
/*
/*
/**
/**
// create a new student
// the newly created student is searchable
// there is search result before deletion
// delete a student
// the search result will change
// delete all students in course 2
// the search result will change
/**
// delete created account
// Should we not allow empty fields?
// please verify the log message manually to ensure that saving request is not issued
// please verify the log message manually to ensure that saving request is not issued
// the test is to ensure that optimized saving policy is implemented without false negative
/**
/*Explanation:
// please verify the log message manually to ensure that saving request is not issued
// please verify the log message manually to ensure that saving request is not issued
// the test is to ensure that optimized saving policy is implemented without false negative
// Should fail silently
/**
//We are using CoursesDb to test EntitiesDb here.
/*Explanation:
/**
// remove possibly conflicting entity from the database
// Assert dates are now.
// Assert lastUpdate has changed, and is now.
// should pass silently
// should pass silently
// create a new question in current session
// create another question under another session
// the question under current session is deleted
// the question under different session remain
// no accident deletion
// no accident deletion
// no accident deletion
// create a new question in current course
// create another question under another course
// the question under current course is deleted
// the question under different course remain
// no accident deletion
// remove possibly conflicting entity from the database
// remove possibly conflicting entity from the database
// remove possibly conflicting entity from the database
// invalid feedback path
// the test is to ensure that optimized saving policy is implemented without false negative
// remove possibly conflicting entity from the database
/**
// fill back the Ids
// please verify the log message manually to ensure that saving request is not issued
// please verify the log message manually to ensure that saving request is not issued
// the test is to ensure that optimized saving policy is implemented without false negative
// should pass silently
// get another frc from data bundle and use it to create another feedback response
// for some reason, the id is 0 instead of null. so we explicitly set it to be null
// set this comment to have the same responseId as frcaData
// two comments exist in the DB
// delete one
// other irrelevant comment remains
// should pass silently
// comment deleted
// other irrelevant comment remains
// should pass silently
// should pass silently
// should pass silently
// should pass silently
// the two existing comment are in the same course
// create another comments different course
// same course's comments are deleted
// other course's data is not affected
/**
// Add questions to DB
// Add responses for corresponding question to DB
// Update feedbackQuestionId for response
// remove possibly conflicting entity from the database
// Assert dates are now.
// Assert lastUpdate has changed, and is now.
// all response of questions are deleted
// responses of other questions remain
// should pass silently
// responses are not deleted accidentally
// response are belong to the same course
// but in different session
// other responses remains
// should pass silently
// other responses remain
// should pass silently
// other responses remain
// should pass silently
// other responses remain
// response are belong to different courses
// all response of courses are deleted
// responses of other course remain
// should pass silently
// responses are not deleted accidentally
// remove possibly conflicting entity from the database
// sets the id for fra
//Id from first success case
// the test is to ensure that optimized saving policy is implemented without false negative
/**
// soft delete a feedback session now
// soft delete a feedback session now
// soft delete a feedback session now
// soft delete a feedback session now
// please verify the log message manually to ensure that saving request is not issued
// please verify the log message manually to ensure that saving request is not issued
// the test is to ensure that optimized saving policy is implemented without false negative
/**
// Verifying less privileged 'Observer' role did not return false positive in case old 'Manager' role is unchanged.
// please verify that the log message manually to ensure that saving request is not issued
// please verify that the log message manually to ensure that saving request is not issued
// the test is to ensure that optimized saving policy is implemented without false negative
// please verify the log message manually to ensure that saving request is not issued
// please verify the log message manually to ensure that saving request is not issued
// the test is to ensure that optimized saving policy is implemented without false negative
// Verifying less privileged 'Observer' role did not return false positive in case old 'CoOwner' role is unchanged.
// other course is not affected
// other course is not affected
// other course is not affected
/**
/**
// typical picture
// typical profiles
// save entity and picture
// delete entity
// delete picture
// tear down
// create empty profile
// tear down
// the test is to ensure that optimized saving policy is implemented without false negative
// cannot access entity with empty googleId
// update same profile
// other fields remain
// picture remains
// modifiedDate remains
// update nothing
// other fields remain
// picture remains
// modifiedDate remains
// tear down
// check that profile get deleted and picture get deleted
//-------------------------------------------------------------------------------------------------------
//-------------------------------------- Helper Functions -----------------------------------------------
//-------------------------------------------------------------------------------------------------------
// we upload a small text file as the actual file does not matter here
/**
// Assert dates are now.
// Assert lastUpdate has changed, and is now.
// remove possibly conflicting entity from the database
// Create a new student with valid attributes
// Create a second student with different email address
// clean up
// the original student is deleted
// the test is to ensure that optimized saving policy is implemented without false negative
// delete student not exist
// delete by course and email
// delete again - should fail silently
// delete all students in non-existent course
// should pass, others students remain
// delete all students in a course
// create another student in different course
// there are students in the course
// other course should remain
// clean up
// null params check:
/**
/**
/**
/**
/**
// <class name, package name>
/**
// BaseComponentTestCase, BaseTestCase (files in current directory) excluded because
// base classes are extended by the actual tests
/**
// If the package name is in TestNG in the form of <package name="teammates.test.cases.package.name" />
// then files in the current directory are excluded because the whole package would be tested by TestNG.
/**
/**
/**
/**
/**
/**
// other situations are tested in generateLogMessage_normalPageAction()
// auth success : unregistered student will be passed
// --------------- Google login ---------------
// userInfo and account will be passed for logged-in user
// AssertHelper.assertLogMessageEquals(logMessage, generatedMessage);
// AssertHelper.assertLogMessageEquals(logMessage, generatedMessage);
// AssertHelper.assertLogMessageEquals(logMessage, generatedMessage);
// AssertHelper.assertLogMessageEquals(logMessage, generatedMessage);
// AssertHelper.assertLogMessageEquals(logMessage, generatedMessage);
// masquerade: userInfo and account don't have the same google id
/**
/**
/**
// Use RecaptchaVerifierStub to mimic success response
// Use RecaptchaVerifierStub to mimic error codes
// Use RecaptchaVerifierStub to mimic runtime exceptions
/**
//developers.google.com/recaptcha/docs/verify#error-code-reference">reCAPTCHA API error codes</a>
// deliberately done for testing
/**
// tested as name
// tested as email
// i.e., [\ " ' #]
// i.e., [\\ \&quot; \&#39; \#]
//\\ \" <The quick brown fox jumps over the lazy dog.>";
//teammatesv4.appspot.com\" onclick=\"alert('fail');\"></a>"
//teammatesv4.appspot.com/images/overview.png\" />"
//teammatesv4.appspot.com\"></a>"
//teammatesv4.appspot.com/images/overview.png\" />"
/**
//plaintext is less than 1 block long
//plaintext is equal to 1 block
//plaintext is more than 1 block long
/**
/**
// The decrypt function converts a hex string into an array of bytes before decryption.
// E.g AF is the byte 10101111
// Hence, non-hex strings should fail to decrypt.
// AES requires the length of data to be multiples of 128 bits.
// Hence, decryptionn should fail  for inputs of 120 and 136 bits.
// typical case
// input multiple square brackets, expected outermost brackets removed
// input nested square brackets, expected outermost brackets removed
// input no square brackets, expected same input string
// input unmatched brackets, expected same input string
// input empty string, expected empty string
// input null, expected null
/**
/**
///C:/path/to/file.ext");
///C:/path/to/file.ext", url.toAbsoluteString());
//www.google.com");
//www.google.com", url.toAbsoluteString());
//www.google.com/page?key1=value1");
//www.google.com/page?key1=value1", url.toAbsoluteString());
//www.google.com/page"));
//www.google.com/page?key1=value1&key2=value2&key1=newvalue1");
//www.google.com";
//www.google.com?key1=value1";
//www.google.com?key1=value1&key2=value2";
//www.google.com/page");
//www.google.com/page?key1=value1", newUrl.toAbsoluteString());
//www.google.com/page?key1=value1");
//www.google.com/page?key1=value1", url.toAbsoluteString());
//www.google.com");
//www.google.com", url.toAbsoluteString());
///C:/path/to/file.ext"));
//www.google.com";
//www.google.com/page?key1=value1";
/**
/**
/**
/**
/**
/**
/**
/**
/**
// The next few methods are for logging in as various user
/**
/**
/**
/**
/**
// The next few methods are for testing access control
// 'High-level' access-control tests: here it tests access control of an action for the full range of user types.
// 'Mid-level' access control tests: here it tests access control of an action for one user type.
//not checking for non-masquerade mode because admin may not be an instructor
// 'Low-level' access control tests: here it tests an action once with the given parameters.
// These methods are not aware of the user type.
/**
/**
/**
/**
// The next few methods are for parsing results
/**
/**
/**
// The next few methods are for verifying action results
/**
/**
// clean up
/**
/**
// verify 1 email sent
// verify update session's respondent list task added
// verify 1 email sent
// verify update session's respondent list task added
// verify update session's respondent list task added
// verify update session's respondent list task added
/**
// 9
/**
/**
// verify question is created
// verify question is created
// verify question is created
// contribution question cannot have students -> students feedback path
// verify question is created
/**
//show that this FeedbackResponse already exists
// create a question
// send create request
// create a question
// send create request
//verify not answerable to students
/**
/**
/**
/**
// remove the newly added instructor
/**
// should fail silently.
/**
/**
// question is deleted
/**
// response is deleted
// delete the response again, throw NullPointerException
// response is deleted
// delete the response again, throw NullPointerException
/**
// non-existent feedback response comment id
// See each independent test case
/**
// see test cases below
// Delete once
// Delete again
// Will fail silently and not throw any exception
// Will fail silently and not throw any exception
/**
//see test cases below
/**
/**
/**
/**
/**
// See test cases below.
// verify student in database
// verify response data is correct
// Ensure that student5InCourse1 has a unique team name in the course.
// Otherwise, it will give a duplicate team name error when changing section name.
// Enroll students up to but not exceeding limit.
// Enroll one more student to exceed limit.
/**
/**
/**
//See test cases below
//see test cases below
/**
//no parameters
/**
/**
// See separated test cases below.
/**
// See independent test cases
// Use typical bundle for testing access control because we want to make the login account consistent
// with "high-level" and "mid-level" access control tests, although accounts are same in two bundles
/**
/**
// See independent test cases
//see independent test cases
/**
/**
// Make student2InCourse2 and instructor1OfCourse1 belong to the same account.
// see individual tests
/**
/**
//set test cases below
//Different results for question and course
/**
/**
// update section privilege for testing purpose.
// course level privilege
// section level privilege
// session level privilege
// see individual tests.
// course id is used for instructor identify verification here.
// course id is used for instructor identify verification here.
// course id is used for instructor identify verification here.
// course id is used for instructor identify verification here.
// has privilege in any of the sections.
/**
// no parameters
// the #instructors is 5
// with information hiding, it is 4 instead
// information is hidden
// the #instructors is 5
// without information hiding, it is still 5
// try to access instructors in his own course
// try to access instructors in other course
/**
// After 2012-03-25 01:59:59, clocks sprang forward to 2012-03-25 03:00:00 in Europe/Andorra
// this time does't not exist in Europe/Andorra with DST
// After 2012-10-28 02:59:59, clocks fell back to 2012-10-28 02:00:00 in Europe/Andorra
// this time has two meanings in Europe/Andorra with DST
/**
/**
/**
/**
/**
// Note: this can happen only if the course was deleted after the student joined it.
// The 'welcome stranger' response is not really appropriate for this situation, but
// we keep it because the situation is rare and not worth extra coding.
// Create a student account without courses
// Access page in masquerade mode
// Delete additional sessions that were created
// check for persistence issue
/**
// See test cases below.
// Prepare an unregistered teammate
// See test cases below.
/**
// check image key is the same as well
//student from another team
//student from another course
/**
// no parameters
// information is hidden
// information is hidden
// try to access his own team
// try to access other team
/**
/**
// This test does not check the timezone database used is the latest
// Only check that the version number is returned, and some sample values for timezone offset
/*
/**
/**
/**
/**
//localhost:8080");
//localhost:9090");
//localhost:9090");
/**
/**
/**
// Attempt to publish the same session again.
/**
/**
/**
/**
/**
// TODO
// TODO
/**
/**
/**
/* Reassign the attributes to retrieve their keys */
// 2 unregistered students, thus 2 emails queued to be sent
// no unregistered students, thus no emails sent
/**
// no params
// see individual tests
/**
/**
// session is unpublished
// sent unpublish email task is added
/**
// verify time zone will be changed
// verify time zone did not change
/**
// There are already responses for this question
// All existing responses should remain
// question is not updated
// TODO: ADD this test case in FeedbackTextQuestionDetailsTest
// set recommended length as a negative integer
// question is not updated
// recommended length does not change
// question is not updated
// TODO first comment was there before, but the second one seems to be the one happening?
// Response rate should not change because other questions have the same respondents
// Response rate should decrease by 1 as response from student1 in qn1 is changed
// Response rate should decrease by 1 because the response of the unique instructor respondent is deleted
// Total possible respondents should decrease because instructors
// (except session creator) are no longer possible respondents
/**
// TODO
// create a question
// create a response
// create a question
// create a response
// send update request
// TODO
/**
// this person is not the giver. so not accessible
/**
/**
//remove the new instructor entity that was created
/**
// see individual tests
// verify the privilege has indeed been updated
/**
//no parameters
//null student email
//null course id
// after trim, this is equal to newStudentEmail
// deleting edited student
// verify student in database
/**
// simulate sanitization that occurs before persistence
/**
/**
// Nothing to test; just make sure that the response is 200
//localhost:4200");
/**
// utility class
/**
/**
/**
/**
/**
/**
/**
/**
// GoogleId is at position 6
/**
/**
/**
/**
/**
/**
//utility class
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// For authentication
// necessary for reading stream response
/**
/**
/**
// Utility class
/**
/**
/**
// anonymous participant names
/**
/**
/**
/**
/**
/**
/**
/**
// Utility class
/**
/**
/**
/**
// regkey in URLs
/**
/**
// utility class
/**
/**
/**
/**
/**
// This can be any valid URL; it is not used beyond validation
//localhost:8080";
/** This is used only to generate an HttpServletRequest for given parameters. */
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// HTTP method is not used here
/**
//TODO: eliminate this exception
// This is not testing servlet, so any HTTP method suffices
// TODO remove this portion once front-end migration is finished
// Reason: CSRF protection is not part of action tests
/**
/**
/**
// not used
/**
/**
/**
// not used
// not used
// not used
// not used
// not used
// not used
// not used
// not used
/**
// not used
/**
// not used
// not used
// not used
// not used
/**
// not used
// not used
// not used
// not used
// not used
// not used
// not used
// not used
// not used
// not used
// not used
// not used
// not used
// not used
// not used
// not used
// not used
/**
// not used
// not used
/**
// countdown time not tested, thus fallback to another method
/**
/**
// utility class
/**
/**
/** The directory where HTML files for testing pages are stored. */
/** The directory where HTML files for testing email contents are stored. */
/** The directory where CSV files for testing CSV contents are stored. */
/** The directory where JSON files used to create data bundles are stored. */
/** The value of "test.persistence.timeout" in test.properties file. */
/** Indicates whether auto-update snapshot mode is activated. */
// access static fields directly
/**
// utility class
/**
/**
//TODO: see if we can eliminate this method (i.e., merge with convertToDisplayValueInTimeDropDown)
/**
/**
/**
// utility class
/**
// ensure that the given URL is not malformed
//table[@id = 'search_table']/tbody/tr[@id='" + createId(student) + "']");
/**
/**
//table[@id = 'search_table_instructor']/tbody/tr[@id='"
/**
//code.google.com/p/selenium/wiki/PageObjects">https://code.google.com/p/selenium/wiki/PageObjects</a>
/** Browser instance the page is loaded into. */
/** Use for retrying due to persistence delays. */
/** Use for retrying due to transient UI issues. */
/** Firefox change handler for handling when `change` events are not fired in Firefox. */
/** Handler for tracking the state of a JQuery AJAX request. */
// These are elements common to most pages in our app
//*[@id=\"contentLinks\"]/ul[1]/li[1]/a")
/*[@id=\"contentLinks\"]/ul[1]/li[1]/a")
//*[@id=\"contentLinks\"]/ul[1]/li[2]/a")
/*[@id=\"contentLinks\"]/ul[1]/li[2]/a")
//*[@id=\"contentLinks\"]/ul[1]/li[4]/a")
/*[@id=\"contentLinks\"]/ul[1]/li[4]/a")
//*[@id=\"contentLinks\"]/ul[1]/li[6]/a")
/*[@id=\"contentLinks\"]/ul[1]/li[6]/a")
//*[@class=\"htCore\"]/tbody/tr/td[@class =\"enroll-handsontable\"])[1]")
/*[@class=\"htCore\"]/tbody/tr/td[@class =\"enroll-handsontable\"])[1]")
/**
// To minimize test failures due to eventual consistency, we try to
//  reload the page and compare once more.
/**
/**
/**
/**
/**
/**
/**
// due to MalformedURLException
/**
// Check https://developer.mozilla.org/en/docs/web/api/document/readystate
// to understand more on a web document's readyState
/**
/**
/**
/**
/**
/**
/**
/**
// Note: The implementation compares previous and current scroll positions so the polling interval should not be
// changed or set to too low a value or the comparisons may unexpectedly be equal.
// The first evaluation has no previous scrolling positions to compare to
// Because we are not truly detecting if the page has stopped scrolling,
// we make sure the scroll positions is the same for one more iteration
/**
/**
/**
/**
// Possible exploration: Change to listening to modal shown event as
// this is based on the implementation detail assumption that once modal-backdrop is added the modal is shown
// Possible exploration: Change to listening to modal hidden event as
// this is based on the implementation detail assumption that once modal-backdrop is removed the modal is hidden
/**
/**
/**
/**
/** Equivalent to pressing the 'back' button of the browser. <br>
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// This method is a close mirror of HtmlUnitWebElement#clear(), except that events are not handled. Note that
// HtmlUnitWebElement is mirrored as opposed to RemoteWebElement (which is used with actual browsers) for convenience
// and the implementation can differ.
// Adapted from ExpectedConditions#stalenessOf which forces a staleness check. This allows a meaningful
// StaleElementReferenceException to be thrown rather than just getting a boolean from ExpectedConditions.
// Fail safe in case the implementation of staleness checks is changed
// It is important that a text box element is clickable before we fill it but due to legacy reasons we continue
// attempting to fill the text box element even if it's not clickable (which may lead to an unexpected failure
// later on)
// If the intended value is empty `clear` works well enough for us
// Otherwise we need to do special handling of entering input because `clear` and `sendKeys` work differently.
// See documentation for `clearAndSendKeys` for more details.
// Add event hook before blurring the text box element so we can detect the event.
// blur the element to receive events
// Although events should not be manually fired, the `change` event does not fire when text input is changed if
// Firefox is not in focus. Setting profile option `focusmanager.testmode = true` does not help as well.
// A temporary solution is to fire the `change` event until the buggy behavior is fixed.
// More details can be found in the umbrella issue of related bugs in the following link:
// https://github.com/mozilla/geckodriver/issues/906
// The firing of `change` event is also imperfect because no check for the type of the elements is done before firing
// the event, for instance a `change` event will be wrongly fired on any content editable element. The firing time of
// `change` events is also incorrect for several `input` types such as `checkbox` and `date`.
// See: https://developer.mozilla.org/en-US/docs/Web/Events/change
/**
// clear content programmatically; one implication is that an undo level is not added to the TinyMCE editor
// insert like a user does (one implication is that an undo level is added);
// this may result in some events (e.g. `Change`) firing immediately
// for consistent HTML verification across browsers
/**
/**
/**
/**
/**
// No AJAX request will be made if the value did not change
/**
/**
// No AJAX request will be made if the value did not change
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// Scroll to status message because it must be visible in order to get its text
/**
//TODO: implement a better way to download a file and check content
// (may be using HtmlUnit as the Webdriver?)
/**
//img[@src='/images/ajax-loader.gif' or @src='/images/ajax-preload.gif']"));
// ok to ignore
/**
/**
/**
// Note: Should first check if the button can actually dismiss the modal otherwise the state will be consistent.
// However, it is too difficult to check.
/**
//github.com/w3c/webdriver/issues/1005">Missing "scroll into view" Actions primitive</a>.
// TODO: migrate to `scrollIntoView` when Geckodriver is adopted
/**
/**
// row expected to be missing
/**
/**
/**
/**
/**
/**
// `$.active` is a counter for holding the number of active AJAX requests
// but is not documented because it is used by JQuery internally.
// see https://stackoverflow.com/questions/3148225/jquery-active-function/3148506#3148506
/**
/**
/**
/**
// Make sure that only a single AJAX request has previously occurred, this will be false if an AJAX
// request was made while there are other outstanding AJAX requests.
// Any AJAX requests made while executing the following script will result in undefined behavior.
/**
/**
/**
/**
/**
/**
/**
/**
/**
// The `change` event is fired with bubbling enabled to simulate how browsers fire them.
// See: https://developer.mozilla.org/en-US/docs/Web/Events/change
//input[@name=" + name + " and @value=" + sanitizedChoiceName + "]"));
//input[@name=" + name + " and @value=" + sanitizedChoiceName + "]"));
//input[@name=" + name + " and @value=" + sanitizedChoiceName + "]"));
//select[@name=" + name + "]"));
// Waiting for modal visibility
// Verify modal header has success class
// Verify title content
//h4[@class='modal-title icon-success']"));
// Verify modal message content
//div[@class='bootbox-body']"));
/**
/**
/**
//div[@id='more-info-equal-share-modal']//button[@class='close']"));
/**
// the login panel will have attribute `aria-busy="true"` while in animation
//div[contains(text(), 'Use another account')]");
/**
//already logged in. We need to logout because the return type of
//  this method is a LoginPage
//already logged in. We need to logout because the return type of
//  this method is a LoginPage
/**
/**
/**
/**
/**
/**
/**
//form[@name='formAddInstructor']"
//input[@name='instructordisplayname']")
/**
// default values taken from courseEditAddInstructorPanel.tag
/**
/*
//*[starts-with(@id, 'instructorname')]"));
/*[starts-with(@id, 'instructorname')]"));
//a[contains(@class, 'view-role-details')][@data-role='" + role + "']"));
/**
/**
/**
/**
/**
// methods that return WebElements of the page go here
// Intentional check for opening h1 and not closing h1 because the following content is not static
// Intentional check for opening h1 and not closing h1 because the following content is not static
/** Represents the "Courses" page for Instructors. */
/* Explanation: This class follows the 'Page Objects Pattern' and as
/* Explanation: These are the elements in the page that we want to interact
//code.google.com/p/selenium/wiki/PageFactory) how to find
/** Used to check if the loaded page is indeed the 'Courses' page. */
/**
/**
/**
/**
// if team name is edited, the confirmation dialog will pop up
/**
//input[@name='numofrecipientstype' and @value='max']")
//input[@name='numofrecipientstype' and @value='custom']")
/**
// Backspace to clear the extra 100 when box is cleared.
// Backspace to clear the extra 100 when box is cleared.
// Backspace to clear the extra 100 when box is cleared.
/**
/**
/**
/**
// checking move buttons of leftmost column
// checking move buttons of last column
// checking move buttons of remaining columns
/**
// checking rubric column values - choice, description-0, weight-0, description-1, weight-1,....
/**
// If weights are assigned, then rubric description values are at the odd indexes (i.e. 1,3,5,..),
// and rubric weights are at the even indexes (i.e. 2,4,..).
// Otherwise rubric description starts with index 1.
/**
/**
/**
//a[contains(@class, 'btn-duplicate-qn')][@data-qnnumber='" + qnIndex + "']"));
//a[contains(@class, 'btn-duplicate-qn')][@data-qnnumber='" + qnIndex + "']"));
//a[contains(@class, 'btn-delete-qn')][@data-qnnumber='" + qnIndex + "']"));
//a[contains(@class, 'btn-discard-changes')][@data-qnnumber='" + qnIndex + "']"));
//a[contains(@class, 'btn-discard-changes')][@data-qnnumber='" + qnIndex + "']"));
/**
// If the other option is selected, no AJAX request is made
// once the dropdown is assigned the class "open", the options should be visible unless not in the viewport
// Scroll to the option because it may not be in the viewport
// If the other option is selected, no AJAX request is made
/**
// new question doesn't have static question part
// need to wait for the panel to be fully expanded before checking the class
//substring trims colon from the retrieved question number text
/**
// && "Session visible from" radio buttons
// && "Send emails for" checkboxes
// && Submission times inputs
// && "Responses visible from" radio buttons
// No contribForm to check for.
/*
//div[@id='questionTable-" + questionNo + "']//div[@class='visibility-checkbox-delegate panel-body']"
//b[@class='visibility-title']/../..";
/**
// Navigate to the previous month
// Check if the dates of previous, current and next month are enabled
//div[@id='ui-datepicker-div']/table/tbody/tr/td"));
// Navigate to the next month
/**
/**
// LEGACY IMPLEMENTATION: Coupled to the implementation instructorFeedbackEdit.js#showNewQuestionFrame
// Creating a new question will result in scrolling, so it is assumed that all initialization is completed after
// scrolling is complete.
/**
/**
/**
/**
/**
/**
/**
/**
// Select start date
// Select deadline date
// Fill in instructions
// Select grace period
/**
/**
//div[@id='" + qnType + "OptionRow-"
//span[@class='glyphicon glyphicon-resize-vertical']"));
//div[@id='" + qnType + "OptionRow-"
//span[@class='glyphicon glyphicon-resize-vertical']"));
// drag option to target, move 10 units above target and release
// multiple movements are used to slow down drag movement and provide
// enough time for the grid to create empty slots
/**
/**
//click(addRubricRowLink);
// For rank recipients
// For SELF, OWN_TEAM, NONE
//a[@data-option-name='" + optionValue + "']/.."))
/**
// LEGACY IMPLEMENTATION: Status Message is scrolled to when we try to add an invalid question
// so we wait for no scrolling before verifying status message. This allows verification of status message to be
// faster because the text should already be visible. Any tests that follows will then also not get affected by the
// scrolling behavior.
// PROBABLE BETTER IMPLEMENTATION: All AJAX Status messages (not just error status messages) always cause scrolling
// so waiting for the status messages will include waiting for no scrolling before verifying the status messages.
/**
// empty comment: wait until the textarea is clickable again
// non-empty comment: wait until the add comment form disappears
// empty comment: wait until the textarea is clickable again
/**
/**
/**
/**
// Case when element has been removed after JS processing
/**
/**
// Checks approximately that the added comment is constructed correctly
/**
/**
//div[contains(@class, 'panel-primary') or contains(@class, 'panel-default')]"
// Element changed (e.g. loading gif changed to actual image)
/**
/**
/**
// fill in time values
// Fill in instructions
// Select grace period
/**
//tbody/tr[" + (sessionRowId + 1)
//tbody/tr[" + (sessionRowId + 1)
//tbody/tr[" + (sessionRowId + 1) + "]/td[contains(@class,'session-response-for-test')]"),
//tbody/tr[" + (sessionRowId + 1)
//button[contains(@class,'session-results-options')]")).isEnabled();
//tbody/tr[" + (sessionRowId + 1)
//a[contains(@class,'" + className + "')]"),
//tbody/tr[" + (sessionRowId + 1)
//a[contains(@class,'" + className + "')]"),
//tbody/tr[" + (sessionRowId + 1)
//a[contains(@class,'" + className + "')]"),
//table[contains(@id,'table-sessions')]//tbody/tr["
//a[contains(@class,'" + className + "')]"));
// wait for the async fetch before counting the number of feedback session
// give it some time to load as it is loaded via AJAX
//TODO: rename course-add-eval-for-test
//tr[@id='session" + evaluationRowId + "']/td[contains(@class,'session-response-for-test')]/a";
//tbody/tr[" + (sessionRowId + 1)
//button[contains(@class,'session-results-options')]"));
//div[@id='course-%d']//tr[@id='session%d']";
//div[starts-with(@id, 'course-')]//tr")).size();
//td[1]", courseRowId,
//div[@id='course-" + id
//strong"))
// give it some time to load as it is loaded via AJAX
//tr[@id='student-c" + courseNumber + "." + rowId + "']"
//td[@id='" + Const.ParamsNames.STUDENT_NAME + "-c" + courseNumber + "." + rowId + "']";
// standardize line separator
//div[@id='panelHeading-" + id + "']//strong"))
//tr[@id='student-c" + courseNumber + "." + rowId + "']"
//td[@id='" + Const.ParamsNames.STUDENT_NAME + "-c" + courseNumber + "." + rowId + "']";
/**
/**
/**
/**
/**
/**
/**
/**
/**
