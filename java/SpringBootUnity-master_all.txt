- 2017-09-02 api模块: 添加swagger-bootstrap-ui,和原有ui并行存在。       
http://localhost:8080 默认UI           
http://localhost:808/doc.html bootstrap-ui   

```
1. spring boot版本从1.4.3更新到1.5.6   
2. 修复不配置数据库信息无法启动的bug   
3. 版本号更新到2017.1   
4. api模块(swagger)添加开源库swagger-bootstrap-ui，和swagger默认UI同时存在。  
5. web模块添加数据库sql文件,导入后一键启动可直接访问到web界面。  
```



![support](screenshot/support.png)

#### swagger            
![默认](screenshot/swagger-ui.png)


#### bootstrap-ui
![bootstrap](screenshot/bootstrap.png)

![bootstrap](screenshot/interface.png)

![bootstrap](screenshot/api.png)



- 2017-09-06 更新记录

```
1. mybatis模块:添加USER.sql,启动后访问:http://localhost:8080 即可看到接口数据
2. 所有模块： 添加 characterEncoding=utf8&useSSL=true 解决高版本mysql的sll警告
3. 添加代码贡献者列表和支持者，赞助商链接。
```

- 2017-09-08 更新记录

```
1. crawler模块(网络爬虫):修复本地文件目录不存在会报错的bug。处理方式为：不存在则自动创建
```

![crawler](screenshot/crawler.png)
![yys](screenshot/yys.png)MIT License

Copyright (c) 2017 Peng Hu

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
[![Build Status](https://travis-ci.org/houko/SpringBootUnity.svg?branch=master)](https://travis-ci.org/houko/SpringBootUnity)
[![Backers on Open Collective](https://opencollective.com/SpringBootUnity/backers/badge.svg)](#backers) [![Sponsors on Open Collective](https://opencollective.com/SpringBootUnity/sponsors/badge.svg)](#sponsors) [![GitHub issues](https://img.shields.io/github/issues/houko/SpringBootUnity.svg)](https://github.com/houko/SpringBootUnity/issues)
[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/houko/SpringBootUnity/master/LICENSE)
[![Maven Central](https://img.shields.io/maven-central/v/org.apache.maven/apache-maven.svg)]()

###  项目简介
![mark](screenshot/SpringBootUnity.png)

### 环境
- `maven` latest   
- `jdk1.8`   
- `spring boot 2.x release`
- 个人推荐`idea`来代替eclipse
- git: 版本管理
- nginx: 反向代理服务器


### 注意事项
- 本项目代码托管在[github](https://github.com/houko/SpringBootUnity)和[码云](http://git.oschina.net/hupeng_admin/SpringBootUnity)两个地方,最新代码会先推送在github上,码云上会在github上更新完之后进行同步。
- 本项目多数数据库都用到了`hibernate`，如果没有提供`sql`文件。则启动时会根据代码映射自动生成数据库表，请在启动前修改`application.properties`中的数据库连接信息


### 启动方式

- 本地运行
本repo是一个多模块组成，每一个模块都可以单独打包运行。如果想运行哪个模块可以找到对应的Main文件右键运行。
![run](screenshot/run.png)


- 在linux服务器运行
 `spring boot`内置了tomcat做为web容器，默认打成jar包直接放在服务器上执行就可以了
> `java -Xms64m -Xmx2048m -jar project.jar 5 >> ./project.log &`



### 打包
- 如果需要定制化打成war包，那么也很简单。在`maven`中做下设置就ok了,然后把war包扔到tomcat下面就可以运行了

```
    <modelVersion>4.0.0</modelVersion>
    <artifactId>api</artifactId>
    <packaging>war</packaging>
```


### 更新日志
- 2017-09-02 api模块: 添加swagger-bootstrap-ui,和原有ui并行存在。       
http://localhost:8080 默认UI           
http://localhost:808/doc.html bootstrap-ui  

- 2017-09-02 spring boot版本从1.4.3更新到1.5.8   
- 2017-09-02 修复不配置数据库信息无法启动的bug   
- 2017-09-02 版本号更新到2017.1   
- 2017-09-02 api模块(swagger)添加开源库swagger-bootstrap-ui，和swagger默认UI同时存在。  
- 2017-09-02 web模块添加数据库sql文件,导入后一键启动可直接访问到web界面。  
- 2017-09-06 mybatis模块:添加USER.sql,启动后访问:http://localhost:8080 即可看到接口数据
- 2017-09-06 所有模块： 添加 characterEncoding=utf8&useSSL=true 解决高版本mysql的sll警告
- 2017-09-06 添加代码贡献者列表和支持者，赞助商链接。
- 2017-09-08 crawler模块(网络爬虫):修复本地文件目录不存在会报错的bug。处理方式为：不存在则自动创建
- 2017-11-02 开源协议从apache更换到MIT
- 2017-11-02 添加本地运行方式的说明
- 2017-11-02 版本更新到2017.2
- 2017-11-02 spring boot版本更新到1.5.8
- 2017-11-03 添加kotlin环境配置
- 2017-11-03 按照阿里巴巴编程规范插件P3C优化代码
- 2017-11-03 合并`api`和`website`模块,访问`localhost:8080`会显示网站主页,访问`localhost:8080/api`会显示api管理界面
- 2018-04-09 将整个项目升级到spring boot2.0 release版本,api有较大变动
- 2019-08-06 travis-ci指定jdk版本



## 贡献者

感谢所有为本项目做出贡献的开发者们.
<a href="graphs/contributors"><img src="https://opencollective.com/SpringBootUnity/contributors.svg?width=890" /></a>


## 支持者

感谢您的支持! 🙏  [[成为支持者](https://opencollective.com/SpringBootUnity#backer)]

<a href="https://opencollective.com/SpringBootUnity#backers" target="_blank"><img src="https://opencollective.com/SpringBootUnity/backers.svg?width=890"></a>


## 赞助商

[[成为赞助商](https://opencollective.com/SpringBootUnity#sponsor)]支持本项目并成为赞助商. 您的LOGO和网站链接将会被展示在这里. 

<a href="https://opencollective.com/SpringBootUnity/sponsor/0/website" target="_blank"><img src="https://opencollective.com/SpringBootUnity/sponsor/0/avatar.svg"></a>
<a href="https://opencollective.com/SpringBootUnity/sponsor/1/website" target="_blank"><img src="https://opencollective.com/SpringBootUnity/sponsor/1/avatar.svg"></a>
<a href="https://opencollective.com/SpringBootUnity/sponsor/2/website" target="_blank"><img src="https://opencollective.com/SpringBootUnity/sponsor/2/avatar.svg"></a>
<a href="https://opencollective.com/SpringBootUnity/sponsor/3/website" target="_blank"><img src="https://opencollective.com/SpringBootUnity/sponsor/3/avatar.svg"></a>
<a href="https://opencollective.com/SpringBootUnity/sponsor/4/website" target="_blank"><img src="https://opencollective.com/SpringBootUnity/sponsor/4/avatar.svg"></a>
<a href="https://opencollective.com/SpringBootUnity/sponsor/5/website" target="_blank"><img src="https://opencollective.com/SpringBootUnity/sponsor/5/avatar.svg"></a>
<a href="https://opencollective.com/SpringBootUnity/sponsor/6/website" target="_blank"><img src="https://opencollective.com/SpringBootUnity/sponsor/6/avatar.svg"></a>
<a href="https://opencollective.com/SpringBootUnity/sponsor/7/website" target="_blank"><img src="https://opencollective.com/SpringBootUnity/sponsor/7/avatar.svg"></a>
<a href="https://opencollective.com/SpringBootUnity/sponsor/8/website" target="_blank"><img src="https://opencollective.com/SpringBootUnity/sponsor/8/avatar.svg"></a>
<a href="https://opencollective.com/SpringBootUnity/sponsor/9/website" target="_blank"><img src="https://opencollective.com/SpringBootUnity/sponsor/9/avatar.svg"></a>

###  项目说明
需求是多变的，本项目是以spring boot为基础，在使用spring boot的过程中对应不同的需求选用不同的技术和spring boot进行搭配，因此本项目是个偏于使用示例的定位。同时如果您在使用spring boot的过程中有什么好用的技术期待您对本项目的PR。

### 关于我
 @[小莫](https://xiaomo.info)：本人是一个热爱开源精神、追求新潮的开发者，技术过得去，还算勤勉！习惯以github的issue驱动方式来组织我的项目，也希望感兴趣的朋友和我联系，一起进步，共同开发感兴趣的开源项目。目前任rpg服务端主程，熟悉游戏开发和web开发。同时也是个喜欢二次元的死宅，爱动漫，略懂日语。

### 在线小工具

- [在线Cron表达式生成器](http://cron.qqe2.com/ "在线Cron表达式生成器")

- [在线工具 - 程序员的工具箱](http://tool.lu/ "在线工具 - 程序员的工具箱")
- [spring boot官方脚手架](https://start.spring.io/ "spring boot官方脚手架")


###  问题反馈
1. 欢迎提[issue](https://github.com/houko/SpringBootUnity/issues)一起完善这个项目。
2. QQ: 83387856
4. 个人主站: https://xiaomo.info


## [License](LICENSE "MIT")

    MIT License
    
    Copyright (c) 2019 Peng Hu
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

<!-- Love SpringBootUnity? Please consider supporting our collective:
👉  https://opencollective.com/SpringBootUnity/donate -->异步任务核心包网络爬虫freemarker                    .::::.
                  .::::::::.
                 :::::::::::
              ..:::::::::::'
           '::::::::::::'
             .::::::::::
        '::::::::::::::..
             ..::::::::::::.
           ``::::::::::::::::
            ::::``:::::::::'        .:::.
           ::::'   ':::::'       .::::::::.
         .::::'      ::::     .:::::::'::::.
        .:::'       :::::  .:::::::::' ':::::.
       .::'        :::::.:::::::::'      ':::::.
      .::'         ::::::::::::::'         ``::::.
  ...:::           ::::::::::::'              ``::.
 ```` ':.          ':::::::::'                  ::::..
                    '.:::::'                    ':'````..
:: Spring Boot ::        (v2.0.0.RELEASE)                    .::::.
                  .::::::::.
                 :::::::::::
              ..:::::::::::'
           '::::::::::::'
             .::::::::::
        '::::::::::::::..
            ..:::::::::::::.
             ..:::::::::::::::.
           ``:::::::::::::::::::
            ::::``::::::::::::'     .:::.
           ::::'   ':::::'       .::::::::.
         .::::'      ::::     .:::::::'::::.
        .:::'       :::::  .:::::::::' ':::::.
       .::'        :::::.:::::::::'      ':::::.
      .::'         ::::::::::::::'         ``::::.
  ...:::           ::::::::::::'              ``::.
 ```` ':.          ':::::::::'                  ::::..
                    '.:::::'                    ':'````..
:: Spring Boot ::        (v2.0.0.RELEASE)mongodb多数据源                    .::::.
                  .::::::::.
                 :::::::::::
              ..:::::::::::'
           '::::::::::::'
             .::::::::::
        '::::::::::::::..
             ..::::::::::::.
           ``::::::::::::::::
            ::::``:::::::::'        .:::.
           ::::'   ':::::'       .::::::::.
         .::::'      ::::     .:::::::'::::.
        .:::'       :::::  .:::::::::' ':::::.
       .::'        :::::.:::::::::'      ':::::.
      .::'         ::::::::::::::'         ``::::.
  ...:::           ::::::::::::'              ``::.
 ```` ':.          ':::::::::'                  ::::..
                    '.:::::'                    ':'````..
:: Spring Boot ::        (v2.0.0.RELEASE)mybatis                    .::::.
                  .::::::::.
                 :::::::::::
              ..:::::::::::'
           '::::::::::::'
             .::::::::::
        '::::::::::::::..
             ..::::::::::::.
           ``::::::::::::::::
            ::::``:::::::::'        .:::.
           ::::'   ':::::'       .::::::::.
         .::::'      ::::     .:::::::'::::.
        .:::'       :::::  .:::::::::' ':::::.
       .::'        :::::.:::::::::'      ':::::.
      .::'         ::::::::::::::'         ``::::.
  ...:::           ::::::::::::'              ``::.
 ```` ':.          ':::::::::'                  ::::..
                    '.:::::'                    ':'````..
:: Spring Boot ::        (v2.0.0.RELEASE)消息队列redis定时任务安全socketvelocity                    .::::.
                  .::::::::.
                 :::::::::::
              ..:::::::::::'
           '::::::::::::'
             .::::::::::
        '::::::::::::::..
             ..::::::::::::.
           ``::::::::::::::::
            ::::``:::::::::'        .:::.
           ::::'   ':::::'       .::::::::.
         .::::'      ::::     .:::::::'::::.
        .:::'       :::::  .:::::::::' ':::::.
       .::'        :::::.:::::::::'      ':::::.
      .::'         ::::::::::::::'         ``::::.
  ...:::           ::::::::::::'              ``::.
 ```` ':.          ':::::::::'                  ::::..
                    '.:::::'                    ':'````..
:: Spring Boot ::        (v2.0.0.RELEASE)我的网站                    .::::.
                  .::::::::.
                 :::::::::::
              ..:::::::::::'
           '::::::::::::'
             .::::::::::
        '::::::::::::::..
            ..:::::::::::::.
             ..:::::::::::::::.
           ``:::::::::::::::::::
            ::::``::::::::::::'     .:::.
           ::::'   ':::::'       .::::::::.
         .::::'      ::::     .:::::::'::::.
        .:::'       :::::  .:::::::::' ':::::.
       .::'        :::::.:::::::::'      ':::::.
      .::'         ::::::::::::::'         ``::::.
  ...:::           ::::::::::::'              ``::.
 ```` ':.          ':::::::::'                  ::::..
                    '.:::::'                    ':'````..
:: Spring Boot ::        (v2.0.0.RELEASE)/**
//github.com/houko
/**
//github.com/houko
// 三个任务都调用完成，退出循环等待
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
//github.com/houko
/**
//github.com/houko
/**
//github.com/houko
/**
/**
/**
/**
/**
//github.com/houko
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
/**
//www.google.com/search?hl=zh-CN&newwindow=1&q=%E4%B8%AD%E5%9B%BD%E5%A4%A7%E7%99%BE%E7%A7%91%E5%9C%A8%E7%BA%BF%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2&btnG=%E6%90%9C%E7%B4%A2&lr=";
//www.baidu.com/baidu?word=%D6%D0%B9%FA%B4%F3%B0%D9%BF%C6%D4%DA%CF%DF%C8%AB%CE%C4%BC%EC%CB%F7&tn=myie2dg";
/**
// 构造URL
// 打开连接
// 输入流
// 1K的数据缓冲
// 读取到的数据长度
// 输出的文件流
// 开始读取
// 完毕，关闭所有链接
/**
// 构造URL
// 打开连接
// 输入流
// 1K的数据缓冲
// 读取到的数据长度
// 输出的文件流
// 开始读取
// 完毕，关闭所有链接
/**
//
//    public static void main(String[] args) throws Exception {
//        List<List<String>> listData = getListData("E:\\thinkpage_cities.xls", 1);
//        List<CountryModel> list = new ArrayList<>();
//        for (List<String> listDatum : listData) {
//            CountryModel model = new CountryModel();
//            model.setCityName(listDatum.get(0));
//            model.setCityNameEN(listDatum.get(1));
//            list.add(model);
//        }
//        System.out.println(list);
//    }
/**
// 打开HSSFWorkbook
// 第一行为标题，不取
// 导入时如果为公式生成的数据则无值
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//检查Sub目录是否存在
/**
//建立FileWriter对象，并实例化fw
//将字符串写入文件
/**
//返回图片扩展名
/**
/**
/**
// 获取图片的文件名
// 重新定义图片名字
//上传服务器上 新文件路径
// 判断服务器上 文件夹是否存在
// 写入文件
/**
// result = result + line;
/**
/**
/**
//github.com/syoubaku
/**
/**
/**
/**
/**
//定义script的正则表达式
//定义style的正则表达式
//定义HTML标签的正则表达式
//过滤script标签
//过滤style标签
//过滤html标签
//返回文本字符串
/**
/**
// 连接超时
// 读取超时 --服务器响应比较慢，增大时间
/**
// 从上述SSLContext对象中得到SSLSocketFactory对象  
// 设置域名校验
// 连接超时
// 读取超时 --服务器响应比较慢，增大时间
/**
// 关闭连接
// 关闭连接
/**
/**
/**
/**
/**
/**
/**
/**
// 指定为httpOnly保证安全性
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*1901-1910*/
/*1911-1920*/
/*1921-1930*/
/*1931-1940*/
/*1941-1950*/
/*1951-1960*/
/*1961-1970*/
/*1971-1980*/
/*1981-1990*/
/*1991-2000*/
/*2001-2010*/
/*2011-2020*/
/*2021-2030*/
/*2031-2040*/
/*2041-2050*/
/*2051-2060*/
/*2061-2070*/
/*2071-2080*/
/*2081-2090*/
/*2091-2099*/
/**
// 这一年有闰月
/**
// 用offset减去每农历年的天数计算当天是农历第几天
// iYear最终结果是农历的年份, offset是当年的第几天
// 农历年份
// 闰哪个月,1-12
// 用当年的天数offset,逐个减去每月（农历）的天数，求出当天是本月的第几天
// 当前月超过闰月，要校正
// offset小于0时，也要校正
/**
/**
// 如果本年有闰月且month大于闰月时，需要校正
// 不考虑闰月
// 传入的闰月是正确的月份
/**
/**
/**
/**
//github.com/houko
/**
/**
//localhost:8080/user/validate?email=");
//localhost:8080/user/validate?email=");
/**
//github.com/houko
/**
//若使用本函数转换则可得到加密结果的16进制表示，即数字字母混合的形式
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// 总概率为0
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
//反序列化
/**
//github.com/syoubaku
/**
/**
// 标记本身等于分隔符的特殊情况
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//避免新旧字符一样产生死循环
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// 16进制parse整形字符串。
/** */
/**
/** */
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//传入的时间是以 / 分割
/**
//传入的时间是以 / 分割
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
// 剩余秒数
// 秒数
// 剩余分钟数
// 分钟数
// 剩余小时
// 剩余天数
// 获取剩余天数
// 1天及以上的显示剩余天
// 1小时及以上或者前面显示了天数则后面需要小时
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//文件是否存在
//解析
/**
/**
//指定输出文件
//输出文件为原文件
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
//uus-ng.img.d.cn/snapshot/201610/999/image/388/388/hd/20161012151646257.jpeg
/**
/**
/**
/**
/**
/**
// lomlok
/**
/**
/**
/**
/**
/**
/**
/**
/**
//每1分钟执行一次
/**
/**
/**
/**
/**
//package info.xiaomo.crawler.spider;
//
//import okhttp3.*;
//import org.jsoup.Jsoup;
//import org.jsoup.nodes.Document;
//import org.jsoup.nodes.Element;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//
//import java.io.File;
//import java.io.IOException;
//import java.util.*;
//import java.util.concurrent.*;
//import java.util.concurrent.atomic.AtomicInteger;
//
//public class Crawler {
//    private static final Logger LOGGER = LoggerFactory.getLogger(Crawler.class);
//    private final Set<HttpUrl> fetchedUrls = Collections.synchronizedSet(new LinkedHashSet<HttpUrl>());
//    private final BlockingQueue<HttpUrl> queue = new LinkedBlockingQueue<>();
//    private final ConcurrentMap<String, AtomicInteger> hostnames = new ConcurrentHashMap<>();
//    private OkHttpClient client = null;
//
//    private Crawler() {
//        init();
//    }
//
//    private static Crawler getInstance() {
//        return CrawlerHolder.INSTANCE;
//    }
//
//    public static void main(String[] args) throws ExecutionException, IntCodeuptedException {
//        String[] urls = {"https://www.baidu.com/"};
//        List<Future<String>> results = Crawler.getInstance().initUrl(urls).parallelDrainQueue(3);
//        for (Future<String> future : results) {
//            System.out.println(future.get());
//        }
//    }
//
//    private Crawler initUrl(String[] urls) {
//        for (String url : urls) {
//            queue.add(HttpUrl.parse(url));
//        }
//
//        return this;
//    }
//
//    private void init() {
//        long cacheByteCount = 1024 * 1024 * 100;
//        String dir = "C:\\test";
//        Cache cache = new Cache(new File(dir), cacheByteCount);
//        client = new OkHttpClient.Builder().cache(cache).build();
//    }
//
//    public List<Future<String>> parallelDrainQueue(int threadCount) {
//        ExecutorService executor = Executors.newFixedThreadPool(threadCount);
//        List<Future<String>> results = new ArrayList<>();
//        for (int i = 0; i < threadCount; i++) {
//            Future<String> future = executor.submit(new Callable<String>() {
//                @Override
//                public String call() throws Exception {
//                    try {
//                        drainQueue();
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                    }
//                    return null;
//                }
//            });
//
//            results.add(future);
//        }
//        return results;
//    }
//
//    private void drainQueue() throws Exception {
//        for (HttpUrl url; (url = queue.take()) != null; ) {
//            if (!fetchedUrls.add(url)) {
//                continue;
//            }
//
//            try {
//                fetch(url);
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//        }
//    }
//
//    private void fetch(HttpUrl url) throws IOException {
//        AtomicInteger hostnameCount = new AtomicInteger();
//        AtomicInteger previous = hostnames.putIfAbsent(url.host(), hostnameCount);
//        if (previous != null) {
//            hostnameCount = previous;
//        }
//
//        if (hostnameCount.incrementAndGet() > 100) {
//            return;
//        }
//
//        Request request = new Request.Builder().url(url).build();
//        Response response = client.newCall(request).execute();
//        String responseSource = response.networkResponse() != null
//                ? ("(network: " + response.networkResponse().code() + " over " + response.protocol() + ")") : "(cache)";
//        int responseCode = response.code();
//
//        // 打印log
//        LOGGER.info("ThreadName:【{}】,ResponseCode:【{}】,URL:【{}】,ResponseSource:【{}】", Thread.currentThread().getName(),
//                responseCode, url, responseSource);
//
//        String contentType = response.header("Content-Type");
//        if (responseCode != 200 || contentType == null) {
//            response.body().close();
//            return;
//        }
//
//        MediaType mediaType = MediaType.parse(contentType);
//        if (mediaType == null || !mediaType.subtype().equalsIgnoreCase("html")) {
//            response.body().close();
//            return;
//        }
//
//        // 获取页面的a[href], 加入LinkedBlockingQueue
//        Document document = Jsoup.parse(response.body().string(), url.toString());
//        for (Element element : document.select("a[href]")) {
//            String href = element.attr("href");
//            HttpUrl link = response.request().url().resolve(href);
//            if (link != null) {
//                queue.add(link);
//            }
//        }
//    }
//
//    private static class CrawlerHolder {
//        private static final Crawler INSTANCE = new Crawler();
//    }
//}
/**
//ng.d.cn/db/yinyangshi/index.html";
/**
/**
/**
/**
/**
//github.com/houko
/**
//github.com/houko
/**
//github.com/houko
/**
//question.xiaomo.info/")
/**
//github.com/houko
/**
/**
/**
//github.com/houko
/**
//github.com/houko
/**
//    /**
/**
//     */
//    private List<String> choice;
//    /**
/**
//     */
//    private List<Integer> answer;
/**
//github.com/houko
/**
/**
/**
//github.com/houko
/**
//github.com/houko
//xiaomo.info/")
/**
//github.com/houko
/**
//github.com/houko
/**
/**
//github.com/houko
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
//github.com/houko
/**
/**
/**
/**
/**
//github.com/houko
// 往第一个数据源中插入两条数据
/**
/**
//github.com/houko
/**
//github.com/houko
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
//github.com/houko
/**
/**
/**
//github.com/houko
/**
//github.com/houko
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
// 定义某个定时任务
/**
//每1分钟执行一次
/**
//github.com/houko
/**
/**
//github.com/houko
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
// 群发消息
/**
/**
//github.com/houko
/**
//github.com/houko
/**
//github.com/houko
/**
//api.xiaomo.info:8080/")
//xiaomo.info/")
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
//邮箱被占用
/**
//找不到用户
//密码不正确
/**
/**
/**
/**
/**
//数据访问层，通过email获取用户信息
//验证码是否过期
//激活
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
//github.com/houko
/**
/**
//github.com/houko
/**
/**
//github.com/houko
/**
/**
//github.com/houko
/**
/**
//github.com/houko
/**
/**
//github.com/houko
/**
//github.com/houko
//用户没有登录
//用户已经登录
/**
//github.com/houko
/**
//github.com/houko
/**
//github.com/houko
// lomlok
/**
//github.com/houko
// lomlok
/**
//github.com/houko
// lomlok
/**
//github.com/houko
// hibernate
// lomlok
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
/**
/**
/**
/**
/**
/**
/**
//github.com/houko
/**
//github.com/houko
/**
//github.com/houko
/**
//github.com/houko
/**
//github.com/houko
/**
//github.com/houko
/**
//github.com/houko
/**
/**
//localhost:8080/user/validate?email=");
/**
//github.com/houko
/**
/**
//github.com/houko
/**
/**
//github.com/houko
/**
/**
//github.com/houko
/**
/**
//github.com/houko
/**
/**
//github.com/houko
/**
