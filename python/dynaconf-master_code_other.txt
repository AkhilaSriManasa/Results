________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\setup.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\docs\conf.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# dynaconf documentation build configuration file, created by
# sphinx-quickstart on Sun Oct 15 16:27:42 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# noqa
# noqa
# noqa
# noqa
# -- General configuration ------------------------------------------------
# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'
# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
# Add any paths that contain templates here, relative to this directory.
# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = '.rst'
# The master toctree document.
# General information about the project.
# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
# The full version, including alpha/beta/rc tags.
# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
# The name of the Pygments (syntax highlighting) style to use.
# If true, `todo` and `todoList` produce output, else they produce nothing.
# -- Options for HTML output ----------------------------------------------
# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}
# 'travis_button': True,
# 'codecov_button': True,
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
# needs 'show_related': True theme option to display
# -- Options for HTMLHelp output ------------------------------------------
# Output file base name for HTML help builder.
# -- Options for LaTeX output ---------------------------------------------
# The paper size ('letterpaper' or 'a4paper').
#
# 'papersize': 'letterpaper',
# The font size ('10pt', '11pt' or '12pt').
#
# 'pointsize': '10pt',
# Additional stuff for the LaTeX preamble.
#
# 'preamble': '',
# Latex figure (float) alignment
#
# 'figure_align': 'htbp',
# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
# -- Options for manual page output ---------------------------------------
# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
# -- Options for Texinfo output -------------------------------------------
# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\docs\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\docs\customexts\aafig-pre-sphinx-trans.py
# -*- coding: utf-8 -*-
# merge default options
# TODO
#merge_defaults(options, self)
# XXX: this is an ugly hack to find out the writer being used
# HTML
# LaTeX
#TODO: options['format'] = self.builder.config.aafig_format['html']
#TODO: self.builder.warn('aafigure error: ' + str(exc))
# TODO: ascii art
# TODO: improve image_node['alt']
# convert flags to booleans
# convert percentage to float
#TODO: hasattr(self.builder, 'imgpath'):
# HTML
#TODO relfn = posixpath.join(self.builder.imgpath, fname)
#TODO: outfn = path.join(self.builder.outdir, '_images', fname)
# LaTeX
#print node.attributes
#merge_defaults(node['options'], self)
#render_html(self, node, node['text'], node['options'])
#return
#merge_defaults(options, self)
# FIXME: no lo está tomando =/
# TODO: improve image_node['alt']
#app.add_node(aafig, html=(html_visit, html_depart), latex=(latex_visit, None))
#app.add_transform(AafigTransform)
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\docs\customexts\aafig-pre-transform.py
# -*- coding: utf-8 -*-
# merge default options
# convert flags to booleans
# convert percentage to float
# TODO/FIXME: en realidad los atributos de la imagen tienen que estar
# en self.options, porque le estamos pasando self!
#fname = '%s.%s' % (get_basename(text, options), options['format'])
# HTML
# LaTeX
#print node.attributes
#merge_defaults(node['options'], self)
#render_html(self, node, node['text'], node['options'])
#return
#merge_defaults(options, self)
# FIXME: no lo está tomando =/
# TODO: improve image_node['alt']
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\docs\customexts\aafig.py
# -*- coding: utf-8 -*-
# from sphinx.util.compat import Directive
# convert flags to booleans
# convert percentage to float
# FIXME: find some way to avoid this hack in aafigure
# HTML
# Non-HTML
# vim: set expandtab shiftwidth=4 softtabstop=4 :
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\docs\customexts\__init__.py
# -*- coding: utf-8 -*-
# __import__('pkg_resources').declare_namespace(__name__)
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\base.py
# from proj.conf import config
# noqa
# pragma: no cover
# execute loaders only after setting defaults got from kwargs
# if not internal remove internal settings
# backwards compatibility
# If we've reached the end, or parent key not found, then return result
# If we've still got key elements to traverse, let's do that.
# pragma: no cover
# compat
# The existing settings object remains the same.
# keep existing values from current env
# compat
# will not be reloaded from env vars
# inside this context all is reloaded
# compat
# Backwards compatibility see #169
# compat
# pragma: no cover
# turn FOO__bar__ZAZ in `FOO.bar.ZAZ`
# just in case someone use a `@reset` in a first level var.
# just in case someone use a `@merge` in a first level var
# @merge 1, @merge 1.1, @merge False
# @merge foo=bar
# @merge foo,bar
# @merge foo
# `dynaconf_merge` used in file root `merge=True`
# `dynaconf_merge` may be used within the key structure
# set loader identifiers so cleaners know which keys to clean
# if .set is called without loader identifier it becomes
# a default value and goes away only when explicitly unset
# In case `dynaconf_merge:` holds value not boolean - ref #241
# EAFP
# pragma: no cover
# pragma: no cover
# DEPRECATED
# ensure env vars are the last thing loaded after all includes
# if it was possible to load from module name
# continue the loop.
# Handle possible *.globs sorted alphanumeric
# pragma: no cover
# called once
# premium user has access to dashboard?
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\cli.py
# pragma: no cover
# pragma: no cover
# Django extension v2
# Backwards compatible with old django extension (pre 2.0.0)
# noqa
# pragma: no cover
# Turn foo=bar=zaz in {'foo': 'bar=zaz'}
# create placeholder data for every env
# pragma: no cover  # noqa
# pragma: no cover
# pragma: no cover
# pragma: no cover
# for Python and .env files writes a single env
# pragma: no cover
# pragma: no cover
# write .env file
# if env not in ['default', 'development']:  # pragma: no cover
# pragma: no cover
# pragma: no cover
# write .gitignore
# Ignore dynaconf secret files\n"
# pragma: no cover
# pragma: no cover
# remove to avoid displaying twice
# Lets write to a file
# pragma: no cover
# pragma: no cover  # noqa
# pragma: no cover  # noqa
# pragma: no cover
# lets write to external source
# make sure we're in the correct environment
# pragma: no cover
# reads the 'dynaconf_validators.toml' from path
# for each section register the validator for specific env
# call validate
# pragma: no cover  # noqa
# pragma: no cover
# pragma: no cover
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\constants.py
# pragma: no cover
# noqa
# HERE STARTS DYNACONF EXTENSION LOAD (Keep at the very bottom of settings.py)
# Read more at https://dynaconf.readthedocs.io/en/latest/guides/django.html
# noqa
# noqa
# HERE ENDS DYNACONF EXTENSION LOAD (No more code below this line)
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\default_settings.py
# pragma: no cover
# noqa
# compatibility with renamed variables
# load_from_dotenv_if_installed
# default proj root
# pragma: no cover
# Default settings file
# # ENV SETTINGS
# # In dynaconf 1.0.0 `NAMESPACE` got renamed to `ENV`
# The environment variable to switch current env
# The current env by default is DEVELOPMENT
# to switch is needed to `export ENV_FOR_DYNACONF=PRODUCTION`
# or put that value in .env file
# this value is used only when reading files like .toml|yaml|ini|json
# This variable exists to support `from_env` method
# Default values is taken from DEFAULT pseudo env
# this value is used only when reading files like .toml|yaml|ini|json
# Global values are taken from DYNACONF env used for exported envvars
# Values here overwrites all other envs
# This namespace is used for files and also envvars
# The default encoding to open settings files
# Merge objects on load
# BY default `__` is the separator for nested env vars
# export `DYNACONF__DATABASE__server=server.com`
# export `DYNACONF__DATABASE__PORT=6666`
# Should result in settings.DATABASE == {'server': 'server.com', 'PORT': 6666}
# To disable it one can set `NESTED_SEPARATOR_FOR_DYNACONF=false`
# The env var specifying settings module
# Default values for redis configs
# Hashicorp Vault Project
# Only core loaders defined on this list will be invoked
# External Loaders to read vars from different data stores
# 'dynaconf.loaders.redis_loader'
# 'dynaconf.loaders.vault_loader'
# Errors in loaders should be silenced?
# always fresh variables
# debug
# Currently this is only used by cli. INSTANCE_FOR_DYNACONF specifies python
# dotted path to custom LazySettings instance. Last dotted path item should be
# instance of LazySettings.
# https://msg.pyyaml.org/load
# Use commentjson? https://commentjson.readthedocs.io/en/latest/
# Extra file, or list of files where to look for secrets
# useful for CI environment like jenkins
# where you can export this variable pointing to a local
# absolute path of the secrets file.
# To include extra paths based on envvar
# To pre-load extra paths based on envvar
# Files to skip if found on search tree
# Backwards compatibility with renamed variables
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\test_settings.py
# pragma: no cover
# 'dynaconf.loaders.redis_loader'
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\validator.py
# noqa
# NAME is required only if OTHER eq to 2
# When the very first thing to be performed when passed.
# if no env is passed to `when` it is inherited
# it is executed before operations.
# Copy immutable MappingProxyType as a mutable dict
# inherit env if not defined
# if when is invalid, return canceling validation flow
# If only using current_env, skip using_env decoration (reload)
# is name required but not exists?
# if not exists and not required cancel validation flow
# is there a callable condition?
# operations
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\validator_conditions.py
# pragma: no cover
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\contrib\django_dynaconf_v2.py
# HERE STARTS DYNACONF EXTENSION LOAD (Keep at the very bottom of settings.py)
# Read more at https://dynaconf.readthedocs.io/en/latest/guides/django.html
# noqa
# noqa
# HERE ENDS DYNACONF EXTENSION LOAD (No more code below this line)
# pragma: no cover
# pragma: no cover
# pragma: no cover
# 1) Create the lazy settings object reusing settings_module consts
# 2) Set all settings back to django_settings_module for 'django check'
# 3) Bind `settings` and `DYNACONF`
# 4) keep django original settings
# 5) Patch django.conf.settings
# lazy_settings = conf.settings.lazy_settings
# This implementation is recommended by Guido Van Rossum
# https://mail.python.org/pipermail/python-ideas/2012-May/014969.html
# 6) Enable standalone scripts to use Dynaconf
# This is for when `django.conf.settings` is imported directly
# on external `scripts` (out of Django's lifetime)
# syntax sugar
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\contrib\flask_dynaconf.py
# pragma: no cover
# get is case insensitive
# pragma: no cover
# FLASK_ENV
# pragma: no cover
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\contrib\__init__.py
# noqa
# noqa
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\contrib\django_dynaconf\dynaconf_django_conf.py
# WARNING: THIS EXTENSION IS DEPRECATED
# Read more on how to integrate with django on
# https://dynaconf.readthedocs.io/en/latest/guides/django.html
# DJANGO_ENV
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\contrib\django_dynaconf\__init__.py
# WARNING: THIS EXTENSION IS DEPRECATED
# Read more on how to integrate with django on
# https://dynaconf.readthedocs.io/en/latest/guides/django.html
# This implementation is recommended by Guido Van Rossum
# https://mail.python.org/pipermail/python-ideas/2012-May/014969.html
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\loaders\base.py
# pragma: no cover
# noqa
# it is a ['file.ext', ...]
# it is a single config as string
# it is already a list/tuple
# load all envs
# for tests it is possible to pass string
# env name is checked in lower
# is there a `dynaconf_merge` on top level of file?
# all lower case for comparison
# DYNACONF or MYPROGRAM
# DEFAULT
# default active env unless ENV_FOR_DYNACONF is changed
# backwards compatibility for global
# global that rules all
# lower for better comparison
# data 1st level keys should be transformed to upper case.
# is there a `dynaconf_merge` inside an `[env]`?
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\loaders\env_loader.py
# Load the global env if exists and overwrite everything
# pragma: no cover
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\loaders\ini_loader.py
# pragma: no cover
# pragma: no cover
# pragma: no cover
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\loaders\json_loader.py
# pragma: no cover
# pragma: no cover
# pragma: no cover  # noqa
# pragma: no cover
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\loaders\py_loader.py
# at least 3 first chars should be upper to be considered a setting var
# loaded ok!
# if it reaches this point that means exception occurred, module not found.
# it is important to return None in case of not loaded
# pragma: no cover
# pragma: no cover
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\loaders\redis_loader.py
# prefix is added to env_list to keep backwards compatibility
# add env to holder
# add env to holder
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\loaders\toml_loader.py
# pragma: no cover
# pragma: no cover
# pragma: no cover
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\loaders\vault_loader.py
# docker run -e 'VAULT_DEV_ROOT_TOKEN_ID=myroot' -p 8200:8200 vault
# pip install hvac
# backwards compatibility
# If the path doesn't exist, ignore it and set data to None
# There seems to be a data dict within a data dict,
# extract the inner data
# switch to the env
# do something with a key of that env
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\loaders\yaml_loader.py
# pragma: no cover
# pragma: no cover
# Resolve the loaders
# https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
# Possible values are `safe_load, full_load, unsafe_load, load`
# pragma: no cover
# pragma: no cover
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\loaders\__init__.py
# noqa
# start dotenv to get default env vars from there
# check overrides in env vars
# Deal with cases where a custom ENV_SWITCHER_IS_PROVIDED
# Example: Flask and Django Extensions
# pragma: no cover
# Ensure str in case of LocalPath/Path is passed.
# a bare python module name w/o extension
# add `.local.` to found_files list to search for local files.
# can be set to multiple files settings.py,settings.yaml,...
# Cascade all loaders
# pyloader is disabled
# must be Python file or module
# load from default defined module settings.py or .secrets.py if exists
# load from the current env e.g: development_settings.py
# load from global_settings.py
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\utils\boxing.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\utils\files.py
# pragma: no cover
# pragma: no cover
# noqa
# Path to invoked script and recursively to root with its ./config dirs
# Path to where Python interpreter was invoked and recursively to root
# Don't look the same place twice
# First found will return
# return empty string if not found so it can still be joined in os.path
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\utils\functional.py
# Avoid infinite recursion when tracing __init__.
# Note: if a subclass overrides __init__(), it will likely need to
# override __copy__() and __deepcopy__() as well.
# Assign to __dict__ to avoid infinite __setattr__ loops.
# Because we have messed with __class__ below, we confuse pickle as to what
# class we are pickling. We're going to have to initialize the wrapped
# object to successfully pickle it, so we might as well just pickle the
# wrapped object since they're supposed to act the same way.
#
# Unfortunately, if we try to simply act like the wrapped object, the ruse
# will break down when pickle gets our id(). Thus we end up with pickle
# thinking, in effect, that we are a distinct object from the wrapped
# object, but with the same __dict__. This can cause problems (see #25389).
#
# So instead, we define our own __reduce__ method and custom unpickler. We
# pickle the wrapped object as the unpickler's argument, so that pickle
# will pickle it normally, and then the unpickler simply returns its
# argument.
# If uninitialized, copy the wrapper. Use type(self), not
# self.__class__, because the latter is proxied.
# If initialized, return a copy of the wrapped object.
# We have to use type(self), not self.__class__, because the
# latter is proxied.
# Introspection support
# Need to pretend to be the wrapped class, for the sake of objects that
# care about this (especially in equality tests)
# List/Tuple/Dictionary methods support
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\utils\parse_conf.py
# Meta Values to trigger pre assignment actions
# Special markers to be used as placeholders e.g: in prefilled forms
# will always return None when evaluated
# recursively parse each sequence item
# recursively parse inner dict items
# return parsed string value
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\dynaconf\utils\__init__.py
# pragma: no cover
# windows can't handle the above charmap
# Nothing to merge
# Cleanup of MetaValues on New dict
# new Reset triggers cleanup of existing data
# new Del triggers deletion of existing data
# pragma: no cover
# old: new
# update cross references
# Ensure compatibility with Python 2.x
# raw un-splitted
# settings.toml,other.yaml
# add the [default] env
# compatibility with older versions that still uses [dynaconf] as
# [default] env
# add the current env
# add a manually set env
# add the [global] env
# loaders are responsible to change to lower/upper cases
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\compat.py
# 0 given a bare settings
# 1 Ensure all renamed vars exists in object
# 2 Ensure pairs has the same value
# 0 given a full old-style configured setting
# 1 Ensure all renamed vars exists in object
# 2 Ensure pairs has the same value
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\full_example.py
# Dynaconf read settings from ENV vars, redis server, conf files and more....
# this part should be done in O.S not in Python
# $export DYNACONF_HOSTNAME=host.com
# $export DYNACONF_PORT='@int 5000'
# or save to REDIS, yaml, json, ini etc...
# Now read dynamic settings in your Python code
# you import only the 'settings' object always from dynaconf module
# on, enabled, 1, active accepted as keyword here
# Now when reading settings they will be get from your sources dynamically
# defined data types are casted (but you can also do explicitly if want)
# read more in https://github.com/rochacbruno/dynaconf
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\app\app.py
# noqa
# noqa
# noqa
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\app\mysettings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\app\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\app_with_dotenv\app.py
# noqa
# noqa
# noqa  # noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
#FFFFFF", "name": "White"}},
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\app_with_dotenv\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\common\program.py
# Take as example a program which connects to a database
# imagine it connects here...
# The `connect` function needs to take the server, username and value
# and those values must be read from settings.toml config file
# The `password` is sensitive so it comes from .secrets.toml file
# or even better it may come from vaultproject.io
# Dynaconf takes care of it!
# noqa
#" * 79)
#" * 79)
#" * 79)
# this next line is not needed in your program, it is the same as
# `export ENV_FOR_DYNACONF..`
# noqa
#" * 79)
# this next line is not needed in your program, it is the same as
# `export ENV_FOR_DYNACONF..`
# noqa
# will use the [default]
#" * 79)
# this next line is not needed in your program, it is the same as
# `export ENV_FOR_DYNACONF..`
# noqa
# will use the [default]
#" * 79)
# this next line is not needed in your program, it is the same as
# `export DYNACONF_USERNAME..`
# noqa
# will use the [default]
#" * 79)
# this next line is not needed in your program, it is the same as
# `export DYNACONF_USERNAME..`
# noqa
# will use the [default]
#" * 79)
# this next line is not needed in your program, it is the same as
# `export DYNACONF_USERNAME..`
# noqa
# will use the [default]
#" * 79)
#" * 79)
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\common-encoding\program.py
# Take as example a program which connects to a database
# imagine it connects here...
# The `connect` function needs to take the server, username and value
# and those values must be read from settings.toml config file
# The `password` is sensitive so it comes from .secrets.toml file
# or even better it may come from vaultproject.io
# Dynaconf takes care of it!
# noqa
#" * 79)
#" * 79)
#" * 79)
# this next line is not needed in your program, it is the same as
# `export ENV_FOR_DYNACONF..`
# noqa
#" * 79)
# this next line is not needed in your program, it is the same as
# `export ENV_FOR_DYNACONF..`
# noqa
# will use the [default]
#" * 79)
# this next line is not needed in your program, it is the same as
# `export ENV_FOR_DYNACONF..`
# noqa
# will use the [default]
#" * 79)
# this next line is not needed in your program, it is the same as
# `export DYNACONF_USERNAME..`
# noqa
# will use the [default]
#" * 79)
# this next line is not needed in your program, it is the same as
# `export DYNACONF_USERNAME..`
# noqa
# will use the [default]
#" * 79)
# this next line is not needed in your program, it is the same as
# `export DYNACONF_USERNAME..`
# noqa
# will use the [default]
#" * 79)
#" * 79)
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\configure\app.py
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\custom_loader\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\custom_loader\my_custom_loader\sff_loader.py
# In order to have multiple envs support use BaseLoader
# Take a look in dynaconf/loaders/json_loader.py
# Load data from your custom data source (file, database, memory etc)
# use `obj.set(key, value)` or `obj.update(dict)` to load data
# use `obj.logger.debug` to log your loader activities
# use `obj.find_file('filename.ext')` to find the file in search tree
# Return nothing
# This loader reads the .sff file // Stupid File Format
#"):
# // PLEASE DON'T USE THIS SFF file format :)
# sff format have lower case keys
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\custom_loader\my_custom_loader\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\manage.py
#!/usr/bin/env python
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\standalone_script.py
# You should start your standalone scripts with this:
# This `DYNACONF.configure()` line may be useful in some cases
# It forces the load of settings
# settings.DYNACONF.configure()
# Now you have access to:
# Django normal settings
# Dynaconf methods
# App settings (defined in `settings.yaml`)
# App settings (exported as environment variables)
# `export DJANGO_USERNAME=`
# `export DJANGO_ENVVAR=`
# test case
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\foo\settings.py
# Where is all the Django's settings?
# Take a look at ../settings.yaml and ../.secrets.yaml
# Dynaconf supports multiple formats that files can be toml, ini, json, py
# Files are also optional, dynaconf can read from envvars, Redis or Vault.
# Build paths inside the project like this: os.path.join(settings.BASE_DIR, ..)
# Or use the dynaconf helper `settings.path_for('filename')`
# HERE STARTS DYNACONF EXTENSION LOAD (Keep at the very bottom of settings.py)
# Read more at https://dynaconf.readthedocs.io/en/latest/guides/django.html
# noqa
# noqa
# HERE ENDS DYNACONF EXTENSION LOAD (No more code below this line)
# test
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\foo\urls.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\foo\wsgi.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\foo\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\polls\admin.py
# Register your models here.
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\polls\apps.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\polls\models.py
# Create your models here.
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\polls\tests.py
# Create your tests here.
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\polls\urls.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\polls\views.py
# switch envs or omit to default to DYNACONF
#  in prod this value must come from .secrets.toml or vault
# settings.setenv('dev')
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\polls\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example\polls\migrations\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\manage.py
#!/usr/bin/env python
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\standalone_script.py
# You should start your standalone scripts with this:
# This `DYNACONF.configure()` line may be useful in some cases
# It forces the load of settings
# settings.DYNACONF.configure()
# Now you have access to:
# Django normal settings
# Dynaconf methods
# App settings (defined in `settings.yaml`)
# App settings (exported as environment variables)
# `export DJANGO_USERNAME=`
# `export DJANGO_ENVVAR=`
# test case
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\foo\settings.py
# Where is all the Django's settings?
# Take a look at ../settings.yaml and ../.secrets.yaml
# Dynaconf supports multiple formats that files can be toml, ini, json, py
# Files are also optional, dynaconf can read from envvars, Redis or Vault.
# Build paths inside the project like this: os.path.join(settings.BASE_DIR, ..)
# Or use the dynaconf helper `settings.path_for('filename')`
# HERE STARTS DYNACONF EXTENSION LOAD (Keep at the very bottom of settings.py)
# Read more at https://dynaconf.readthedocs.io/en/latest/guides/django.html
# noqa
# noqa
# HERE ENDS DYNACONF EXTENSION LOAD (No more code below this line)
# test
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\foo\urls.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\foo\wsgi.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\foo\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\includes\plugin_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\polls\admin.py
# Register your models here.
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\polls\apps.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\polls\models.py
# Create your models here.
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\polls\tests.py
# Create your tests here.
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\polls\urls.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\polls\views.py
# switch envs or omit to default to DYNACONF
#  in prod this value must come from .secrets.toml or vault
# settings.setenv('dev')
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\polls\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\django_example_compat\polls\migrations\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\dunder\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\dunder\other_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\dunder\settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\dynaconf_merge\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\envs\app.py
# 1 all values in {} + {}: env of yaml file:".format(
# 2 using {}: env values for context:".format(settings.current_env))
# 3 back to default {}: env:".format(settings.current_env))
# 4 Set to {}: env:".format(settings.current_env))
# 5 back to default {}: env:".format(settings.current_env))
# 6 using {}: env values for context:".format(settings.current_env))
# 7 back to default {}: env:".format(settings.current_env))
# 8 Set to {}: env:".format(settings.current_env))
# 9 back to default {}: env:".format(settings.current_env))
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\envvar_prefix\app.py
# test issue 166 (renamed GLOBAL_ENV_)
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\flask_with_commentjson\app.py
# create your app
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\flask_with_dotenv\app.py
# create your app
# will populate app.config from .env + environment variables
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\flask_with_dotenv\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\flask_with_ini\app.py
# create your app
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\flask_with_json\app.py
# create your app
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\flask_with_toml\app.py
# create your app
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\flask_with_yaml\app.py
# create your app
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\full_test\settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\full_test\staging_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\full_test\test.py
# test default loader never gets cleaned
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\get_fresh\app.py
# Get the potato
# str() to force a copy
# Change the Toml file
# Print the original
# Get it freshly
# Get it again
# Restore it
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\includes\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\includes\configs\plugin4.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\166_renamed_global_env\app.py
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\169_renamed_settings_module\app.py
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\182_multiple_locations\app.py
# This is the main settings file
# To make dynaconf read more file we need to include it
# To make dynaconf a diferent file we need to include it
# includes can be a toml-like list
# if it is done during a running process we need to reload to read the new
# envvar
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\184_ipython\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\184_ipython\subdir\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\194_flask_config\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\228_nested_toml_bool\django_app\manage.py
#!/usr/bin/env python
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\228_nested_toml_bool\django_app\django_app\settings.py
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
#!d2&_ow*l39-bi54(leh9r"
# SECURITY WARNING: don't run with debug turned on in production!
# Application definition
# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
# At the end of your settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\228_nested_toml_bool\django_app\django_app\urls.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\228_nested_toml_bool\django_app\django_app\wsgi.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\228_nested_toml_bool\django_app\django_app\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\228_nested_toml_bool\python_app\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\251_dotted_unexistent\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\251_dotted_unexistent\settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\issues\266_envvar_from_env_override\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\jenkins_secrets_file\app.py
# Assuming this app is running on CI the secret values would be read from
# jenkins_secrets.toml that was  defined by SECRETS_FOR_DYNACONF envvar
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\merge_enabled\app.py
# noqa
# BY DEFAULT 'development' is the current env
# noqa
# If ENV_FOR_DYNACONF=production is in envvars so
# print("Read from production_settings.py:", settings.PYTHON_PROD_VAR)  # noqa
# global_ overrides previous configs
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# MERGE TESTS
# noqa
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\merge_enabled\development_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\merge_enabled\global_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\merge_enabled\production_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\merge_enabled\settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\multiple_folders\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\multiple_folders\config_1\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\multiple_folders\config_2\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\multiple_sources\app.py
# noqa
# BY DEFAULT 'development' is the current env
# noqa
# If ENV_FOR_DYNACONF=production is in envvars so
# print("Read from production_settings.py:", settings.PYTHON_PROD_VAR)  # noqa
# global_ overrides previous configs
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\multiple_sources\development_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\multiple_sources\global_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\multiple_sources\production_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\multiple_sources\settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\new_merge\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\new_merge\settings.local.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\new_merge\settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\project_root\app.py
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\redis_example\redis_example.py
# noqa
# >>> 'foo_is_default'
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\redis_example\write.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\settings_file\app.py
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\simple\app.py
# Starting", __file__)
# On import level dynaconf will read .env and config envvars")
# It will also setup the initial search tree.")
# noqa
# ^ That means that no settings file was read yet! dynaconf is empty")
# Dynaconf is LAzy so it will load at the first access.")
# Lets make the first call to `settings.VALUE` watch the  logs...")
# Now a second call to `settings.VALUE` already loaded:")
# ^ That means that settings was read! dynaconf is loaded")
# Lets read a file using settings.find_file...")
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\simple\settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\specific_settings_files\app.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\specific_settings_files\extra_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\toml_example\app.py
# print all values in the file
# using [default] + [development] + [global] values
# using [production] env values for context
# back to default [development] env
# set env to [production]:
# back to [development] env again
# None
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\toml_with_secrets\program.py
# keep=True will keep it from [example] env
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\validators\with_python\app.py
# noqa
# noqa
# noqa
# noqa
# noqa
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\validators\with_python\conf.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\validators\with_python\development_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\validators\with_python\production_settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\validators\with_python\settings.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\validators\with_python\__init__.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\vault\vault_example.py
# noqa
# >>> 'foo_is_default'
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\vault\write.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\yaml_example\settings_file\app.py
# print all values in the file
# using [default] + [development] + [global] values
# using [production] env values for context
# back to default [development] env
# set env to [production]:
# back to [development] env again
# None
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\yaml_example\yaml_as_extra_config\app.py
# using production values for context
# back to development env
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\example\yaml_example\yaml_as_extra_config\settings.py
# DEPRECATED
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\conftest.py
# each test runs on cwd to its temp dir
# Get the fixture dynamically by its name.
# ensure local test created packages can be imported
# Chdir only for the duration of the test.
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_base.py
# access in lower case is not allowed
# ('t', 'true', 'enabled', '1', 'on', 'yes')
# anything else is a false value
# NOTE: it is recommended to call set(x, 1) or ['x'] = 1
# instead of settings.BAZ = 'bar'
# calling twice  does not change anything
# Dotted traversal should not work for dictionary-like key access.
# Disable dot-traversal on a per-call basis.
# First key is always transformed to upper()
# Change DB name
# Add new item to the list
# Add new item to the dict
# Replace the entire list
# Replace the entire dict
# clone the settings object pointing to a new env
# values set programatically are not cloned
# values set only in a specific env not cloned
# assert it is cached not created twice
# Now the same using keep=True
# assert it is created not cached
# settings remains the same
# additional kwargs
# production values
# keep=True values
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_basic.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_cli.py
# assert result.exit_code == 0
# run twice to force load of existing files
# invalid rule, must always be a dict
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_compat.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_dynabox.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_endtoend.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_envvar_prefix.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_env_loader.py
# noqa
# GLOBAL ENV VARS
# environ['FRESH_VARS_FOR_DYNACONF'] = '@json ["MUSTBEALWAYSFRESH"]'
# settings.configure()
# Numbers
# Text
# 'DYNACONF_STRING': Hello,
# Use extra quotes to force a string from other type
# Arrays must be homogeneous in toml syntax
# Dictionaries
# this key is written by the test itself; skip.
# hostname is reloaded
# fresh should now be second
# must tnot exist yet (not loaded)
# must exist because fresh will call loaders
# loaders run only once
# this should error because envvar got cleaned
# but it is not, so cleaners should be fixed
# assert environ['FRESH_VARS_FOR_DYNACONF'] == '@json ["MUSTBEALWAYSFRESH"]'  # noqa
# change engine
# change timeout directly
# add to ARGS
# Ensure dictionary keeps its format
# Clean args
# Make args empty
# Remove ARGS key
# add to existing PORTS
# reset PORTS
# delete PORTS
# reset default key
# remove default
# set value to databases
# reset databases
# also reset databases
# remove databases
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_feature_flag.py
# ensure data is fresh
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_flask.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_ini_loader.py
#FFFFFF'
#FFFFFF"
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_json_loader.py
# the @float is not needed in JSON but kept to ensure it works
#FFCC00",
#FFCC00"
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_nested_loading.py
# Ensure overrides not happened
# Ensure overrides that happen via TOML plugin config load.
# From the second TOML plugin
# merge asserts
# programmatically loaded file is not persisted
# once `env` is changed, or a `reload` it will be missed
# to persist it needs to go to `INCLUDES_FOR_DYNACONF` variable
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_py_loader.py
# will be ignored not found
#FFFFFF"')
# will be ignored not found
#FFFFFF"}}
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_redis.py
# This function should be check if the redis server is online and ready
# write(settings, {"SECRET": "redis_works"})
# return load(settings, key="SECRET")
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_toml_loader.py
#CCCCCC'
#CCCCCC"
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_utils.py
# now place a .env file a few levels up and make sure it's found
# skip the inner child4/.env and force the find of /tmp.../.env
# this casts for int
# now gives pure string
# The missing singleton should always compare truthfully to itself
# new instances of Missing should be equal to each other due to
# explicit __eq__ implmentation check for isinstance.
# The sentinel should not be equal to None, True, or False
# But the explict typecasting of missing to a bool should evaluate to False
# calling twice the same object does not duplicate
# calling with same data has no effect
# No sep
# a comma sep string
# spaces are trimmed
# a semicollon sep string
# semicollon are trimmed
# has comma and also semicollon (semicollon has precedence)
# has comma and also semicollon (changing precedence)
# using different separator
# No data is empty list
# Sequence types is only converted
# A string is trimmed_splitted
# other types get wrapped in a list
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_validators.py
#
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_validators_conditions.py
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_vault.py
# This function should be check if the redis server is online and ready
# write(settings, {"SECRET": "redis_works"})
# return load(settings, key="SECRET")
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\test_yaml_loader.py
# the bellow is just to ensure `,` will not break string YAML
# @float casting not needed, used only for testing
#000000'
#000000"
________________________________________________________________________________________
E:/AllLangDS/ds/python/dynaconf-master\dynaconf-master\tests\__init__.py
