# Contributing

Do you want to fix an issue yourself? Great! some house rules:

1. Provide a description of what problem you are solving, what case was not being taking into account
2. Provide unit tests for the case you have fixed. Pull request without unit test or PRs that decrease the coverage will not be approved until this changes.
3. Adhere to the coding style and conventions of the project, for instance, target_name is used to specify the target across all functions that use this parameter. Changes will be requested on PRs that don't follow this.
4. Write descriptive commit messages.
MIT License

Copyright (c) 2016 Ignacio Calderon aka kronenthaler

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.[![Build Status](https://travis-ci.org/kronenthaler/mod-pbxproj.svg?branch=master)](https://travis-ci.org/kronenthaler/mod-pbxproj) 
[![Coverage Status](https://coveralls.io/repos/github/kronenthaler/mod-pbxproj/badge.svg?branch=master&x=1)](https://coveralls.io/github/kronenthaler/mod-pbxproj?branch=master) 
[![Codacy Badge](https://api.codacy.com/project/badge/Grade/70c14211ba704d2893f7b0f54bb04da7)](https://www.codacy.com/app/kronenthaler/mod-pbxproj?utm_source=github.com&utm_medium=referral&utm_content=kronenthaler/mod-pbxproj&utm_campaign=badger)
[![PyPI](https://img.shields.io/pypi/v/pbxproj.svg)](https://pypi.python.org/pypi/pbxproj)
[![License](https://img.shields.io/badge/license-MIT-blue.svg?x=1)](license.txt)
 
# pbxproj 

This module can read, modify, and write a .pbxproj file from an Xcode 4+ projects. The file is usually called project.pbxproj and can be found inside the .xcodeproj bundle. Because some task cannot be done by clicking on an UI or opening Xcode to do it for you, this python module lets you automate the modification process.

## How to use it
The typical tasks with an Xcode project are adding files to the project and setting some standard compilation flags.
It can be achieved with a simple snippet like this:

```python
from pbxproj import XcodeProject
# open the project
project = XcodeProject.load('myapp.xcodeproj/project.pbxproj')

# add a file to it, force=false to not add it if it's already in the project
project.add_file('MyClass.swift', force=False)

# set a Other Linker Flags
project.add_other_ldflags('-ObjC')

# save the project, otherwise your changes won't be picked up by Xcode
project.save()
```

That's it. More details about available API's visit the [wiki](https://github.com/kronenthaler/mod-pbxproj/wiki/).

## Why refactor?
The project has being rewritten entirely from version 1.3.1 to 2.0.0. This refactor had some goals in mind:

1. Make the project more maintainable. By breaking the monolithic file into separated packages and classes.
2. Add unit tests. The old implementation was not particularly testable. Tests will allow to make future changes with confidence that they won't break existing functionality.
3. Improve the code quality. The code has being cleaned, responsibilities clearly separated and ambiguous APIs removed.
4. Introduce new functionality in a clearer way. There were some functionality missing or half working. Some of this features were addresses by this refactor.
5. Make the output as compatible as possible with Xcode's expectations. 
6. Improve the fault tolerance. Whenever Xcode introduces new sections into its format things would've broken. Now, unknown sections are read and written back even if the project doesn't know about them.

For more information about what API's were deprecated or completely removed check [wiki](https://github.com/kronenthaler/mod-pbxproj/wiki/Deprecations).

## Installation
For installation instructions visit the [wiki](https://github.com/kronenthaler/mod-pbxproj/wiki/Installation)

## CLI
For instructions and commands available visit the [wiki](https://github.com/kronenthaler/mod-pbxproj/wiki/CLI)

## Documentation
For general documentation, visit the [wiki](https://github.com/kronenthaler/mod-pbxproj/wiki/).
For technical documentation, the public functions are documented and contains details about what is expected.

## Reporting bugs
Did you find a bug? Too bad, but we want to help you, we need you to:

* Provide as many details about the error you are having.
* If possible provide a sample project.pbxproj to reproduce the steps 
* If possible, try the sequence of steps on Xcode and provide the project.pbxproj generated by Xcode.

We cannot help you if your issue is a title: "it does not work". Or if there is no sequence of steps to reproduce the error. Those kind of issues will be ignored or closed automatically.

## Contributing
Do you want to fix an issue yourself? Great! some house rules:

* Provide a description of what problem you are solving, what case was not being taking into account
* Provide unit tests for the case you have fixed. Pull request without unit test or PRs that decrease the coverage will not be approved until this changes.
* Adhere to the coding style and conventions of the project, for instance, target_name is used to specify the target across all functions that use this parameter. Changes will be requested on PRs that don't follow this.
* Write descriptive commit messages.

## License
This project is licensed using MIT license.
# MIT License
#
# Copyright (c) 2016 Ignacio Calderon aka kronenthaler
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# This is a backwards-compatibility file. For Unity developers this is the only file it needs to be added to the Unity
# project.
# This file will install the proper python package into the user's python's local space, if it's not present at run-time
# of this script. Afterwards, it will import all necessary modules to the developer to make his/her own script work as
# before.
# check if file exists
# install it if not present
# force the refresh of the packages
# import publicly
#!/usr/bin/env python
# Inspired by the example at https://pytest.org/latest/goodpractises.html
# Run nose ensuring that argv simulates running nosetests directly
# Run nose ensuring that argv simulates running nosetests directly
# all top level objects are added as variables to this object
# check if the key maps to a kind of object
# use key decorators, could simplify the generation of the comments.
# sections: dict<isa, [tuple(id, obj)]>
# sections get aggregated under the isa type. Each contains a list of tuples (id, obj) with every object defined
# iterate over the keys and fill the sections
# safe-guard: delegate to the parent how to deal with non-object values
# override to change the way the object is printed out
# Do a special behavior here while saving to avoid the linear lookup below and therefore
# be significantly faster.
# It's not safe to do the above optimization "normally" (outside of saving) since the objects
# may have been modified by the user, and the cache may therefore be invalid. So we fall back
# to a linear search.
# remove empty phases
# Used to speed up saving the project.
# initialize the structure using the given tree
# Initialize the save cache to indicate that we're in a save
# Clear the cache since future modifications may make it invalid (and we're no longer in a save).
# MIT License
#
# Copyright (c) 2016 Ignacio Calderon aka kronenthaler
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# make a decision of what function to call based on the -D flag
# print some information about the build files created.
# Future addition to the command line:
# pbxproj flag [options] (--delete | -D) (--all | -A) <project> [--] <flag_name>...
# make a decision of what function to call based on the -D flag
# make a decision of what function to call based on the -D flag
# print some information about the build files created.
# make a decision of what function to call based on the -D flag
# remove backup if everything was ok.
# if it's not forced to add the file stop if the file already exists.
# no need to create the build_files, done
# create build_files for the targets
# special case for the frameworks and libraries to update the search paths
# the path is absolute and it's outside the scope of the project for linking purposes
# if it's not forced to add the file stop if the file already exists.
# load project and add the things
# create an special group without parent (ref proxies)
# create the container proxies
# create the reference proxies
# add reference proxy to the product group
# append the result
# add new PBXFileReference and PBXGroup to the PBXProject object
# remove the build file from the phase
# if the build_phase is empty remove it too, unless it's a shell script.
# remove the build phase from the target
# remove it iff it's removed from all targets or no build file reference it
# remove the file from any groups if there is no reference from any target
# the file is not referenced in any build file, remove it
# add the top folder as a group, make it the new parent
# iterate over the objects in the directory
# exclude dirs or files matching any of the expressions
# check if the file exists already, if not add it
# if recursive is true, go deeper, otherwise create the group here.
# miscellaneous functions, candidates to be extracted and decouple implementation
# decide the proper tree and path to add
# create a PBXFileReference for the new file
# determine the type of the new file:
# set the file type on the file ref add the files
# determine the parent and add it to it
# determine if there is a suitable build phase created
# if it's a framework and it needs to be embedded
# add runpath search flag
# create the build file and add it to the phase
# returns the absolute path, the relative path and the tree
# iterate over the children and determine if they are file/group and call the right method.
# remove the reference from any other group object that could be containing it.
# search for the mainGroup of the project
# search for the group without name
# if there is no parent, create and empty parent group, add it to the objects
# it's not a group instance, assume it's an id
# Do a special behavior here while saving to avoid the linear lookup below and therefore
# be significantly faster.
# It's not safe to do the above optimization "normally" (outside of saving) since the objects
# may have been modified by the user, and the cache may therefore be invalid. So we fall back
# to a linear search.
# append, if it's assigned and the list only has 1 element it will turn it into a string
# nothing to remove
# nothing to remove
# no attributes remain, remove the element
# no flags remain, remove the element
# search on the BuildFiles if there is a build file to be removed, and remove it
# search for each phase that has a reference to the build file and remove it from it.
# remove the file reference from it's parent
# if it's not the right type of children for the group
# remove from the objects reference
# remove children if necessary
# nothing to remove
# build the recursive/escaped strings and add the flags accordingly
# groups
# create tmp directory for results
# remove tmp directory
# copy the project.pbxproj, into a file that can be used by the tests
# copy the project.pbxproj, into a file that can be used by the tests
# copy the project.pbxproj, into a file that can be used by the tests
# copy the project.pbxproj, into a file that can be used by the tests
# groups
# unknown files are added as resources
# no tree or no path cannot be added
# no create build file flag
# 2 source files are created 1 x target
# 2 source files are created 1 x target
# 2 source files are created 1 x target
# nothing to do if the file is absolute but doesn't exist
# 2 source files are created 1 x target
# should add test.framework and testLibrary.a and 2 groups, samples, dirA
# dirA, test.framework, testLibrary.a
# should add test.framework and testLibrary.a and 2 groups, samples, dirA
# dirA, test.framework, testLibrary.a
# dirB, fileA.m
# fileB.m
# should add test.framework and testLibrary.a and 2 groups, samples, dirA
# dirA, -test.framework, -testLibrary.a
# dirB, -fileA.m
# -fileB.m
# check that the buildFiles where added
# check that the buildFiles where added
# nothing to do if the file is absolute but doesn't exist
