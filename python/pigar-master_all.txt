Copyright (c) 2018, damnever<dxc.wolf@gmail.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# Requirements automatically generated by pigar.
# https://github.com/damnever/pigar

# pigar/utils.py: 11
colorama == 0.4.1

# pigar/pypi.py: 21
futures == 3.2.0

# pigar/pypi.py: 22
requests == 2.21.0
# Requirements automatically generated by pigar.
# https://github.com/damnever/pigar

# pigar/utils.py: 11
colorama == 0.4.1

# pigar/pypi.py: 22
requests == 2.21.0
.. image:: https://img.shields.io/travis/damnever/pigar.svg?style=flat-square
    :target: https://travis-ci.org/damnever/pigar

.. image:: https://img.shields.io/pypi/v/pigar.svg?style=flat-square
    :target: https://pypi.python.org/pypi/pigar


Features
--------

- Generate requirements for project, ``pigar`` can consider all kinds of complicated situations. In this project, `py2_requirements.txt <https://github.com/damnever/pigar/blob/master/py2_requirements.txt>`_ and `py3_requirements.txt <https://github.com/damnever/pigar/blob/master/py3_requirements.txt>`_ for different python versions ::

    # Generate requirements.txt for current directory.
    $ pigar

    # Generate requirements for given directory in given file.
    $ pigar -p ../dev-requirements.txt -P ../

  ``pigar`` will list all files which referenced the package, for example: ::

    # project/foo.py: 2,3
    # project/bar/baz.py: 2,7,8,9
    foobar == 3.3.3

  If requirements file is overwritten over, ``pigar`` will show difference between old and new.

- If you do not know the import name that belongs to a specific package (more generally, does ``Import Error: xxx`` drive you crazy?), such as ``bs4`` which may come from ``beautifulsoup4`` or ``MySQLdb`` which could come from ``MySQL_Python``, try searching for it: ::

    $ pigar -s bs4 MySQLdb

- To check requirements for the latest version, just do: ::

    # Specific a requirements file.
    $ pigar -c ./requirements.txt

    # Or, you can leave pigar search *requirements.txt in current directory
    # level by itself, if not found, pigar will generate requirements.txt
    # for current project then check latest version.
    $ pigar -c

More
----

You can find more information on `GitHub <https://github.com/damnever/pigar>`_ .


Python project requirements tool – pigar
========================================

.. image:: https://img.shields.io/travis/damnever/pigar.svg?style=flat-square
    :target: https://travis-ci.org/damnever/pigar

.. image:: https://img.shields.io/pypi/v/pigar.svg?style=flat-square
    :target: https://pypi.python.org/pypi/pigar


**NOTE**: `Pipenv <https://packaging.python.org/tutorials/managing-dependencies/#managing-dependencies>`_ or other tools is recommended for improving your development flow.


.. image:: https://raw.githubusercontent.com/damnever/pigar/master/short-guide.gif
    :target: https://raw.githubusercontent.com/damnever/pigar/master/short-guide.gif

(In the GIF, the module ``urlparse`` has been removed in Python3, ``requests`` has been installed in virtual environment ``pigar-2.7``, not in ``pigar-3.5``)


Features
--------

- When generating requirements for a project, ``pigar`` can consider all kinds of complicated situations. For example, this project has `py2_requirements.txt <https://github.com/damnever/pigar/blob/master/py2_requirements.txt>`_ and `py3_requirements.txt <https://github.com/damnever/pigar/blob/master/py3_requirements.txt>`_ for different Python versions. ::

    # Generate requirements.txt for current directory.
    $ pigar

    # Generate requirements for given directory in given file.
    $ pigar -p ../dev-requirements.txt -P ../

  ``pigar`` will list all files which referenced the package, for example: ::

    # project/foo.py: 2,3
    # project/bar/baz.py: 2,7,8,9
    foobar == 3.3.3

  If the requirements file is overwritten, ``pigar`` will show the difference between the old and the new.

- If you do not know the import name that belongs to a specific package (more generally, does ``Import Error: xxx`` drive you crazy?), such as ``bs4`` which may come from ``beautifulsoup4`` or ``MySQLdb`` which could come from ``MySQL_Python``, try searching for it: ::

    $ pigar -s bs4 MySQLdb

- To check requirements for the latest version, just do: ::

    # Specify a requirements file.
    $ pigar -c ./requirements.txt

    # Or, you can let pigar search for *requirements.txt in the current directory
    # level by itself. If not found, pigar will generate requirements.txt
    # for the current project, then check for the latest versions.
    $ pigar -c

Installation
------------

``pigar`` can run on Python 2.7.+ and 3.2+. 

To install it with ``pip``, use: ::

    [sudo] pip install pigar

To install it with ``conda``, use: ::

    conda install -c conda-forge pigar

To get the newest code from GitHub: ::

  pip install git+https://github.com/damnever/pigar.git@[master or other branch] --upgrade

Usage
-----

::

    usage: pigar [-h] [-v] [-u] [-s NAME [NAME ...]] [-c [PATH]] [-l LOG_LEVEL]
                 [-i DIR [DIR ...]] [-p SAVE_PATH] [-P PROJECT_PATH]
                 [-o COMPARISON_OPERATOR]

    Python requirements tool -- pigar, it will do only one thing at each time.
    Default action is generate requirements.txt in current directory.

    optional arguments:
      -h, --help          show this help message and exit
      -v, --version       show pigar version information and exit
      -u, --update        update database, use it when pigar failed you, exit when
                          action done
      -s NAME [NAME ...]  search package name by import name, use it if you do not
                          know import name come from which package, exit when
                          action done
      -c [PATH]           check requirements for the latest version. If file path
                          not given, search *requirements.txt in current
                          directory, if not found, generate file requirements.txt,
                          exit when action done
      -l LOG_LEVEL        show given level log messages, argument can be (ERROR,
                          WARNING, INFO), case-insensitive
      -i DIR [DIR ...]    given a list of directory to ignore, relative directory,
                          *used for* -c and default action
      -p SAVE_PATH        save requirements in given file path, *used for* default
                          action
      -P PROJECT_PATH     project path, which is directory, *used for* default
                          action
      -o COMPARISON_OPERATOR
                          The comparison operator for versions, alternatives:
                          [==, ~=, >=]


More
----

``pigar`` does not use regular expressions in such a violent way. Instead, it uses AST, which is a better method for extracting imported names from arguments of ``exec``/``eval``, doctest of docstring, etc.

Also, ``pigar`` can detect the difference between different Python versions. For example, you can find ``concurrent.futures`` from the Python 3.2 standard library, but you will need install ``futures`` in earlier versions of Python to get ``concurrent.futures``.

Finally, you already saw ``Features``. You can learn more from the source code.

If you have any issues or suggestions, `please submit an issue on GitHub <https://github.com/damnever/pigar/issues>`_.

LICENSE
-------

`The BSD 3-Clause License <https://github.com/damnever/pigar/blob/master/LICENSE>`_
a == 4.1.4
b == 2.3.0
c<html><head><title>Simple Index</title><meta name="api-version" value="2" /></head><body>
<a href='/simple/a/'>a</a><br/>
<a href='/simple/b/'>b</a><br/>
<a href='/simple/c/'>c</a><br/>
<a href='d'>d</a><br/>
<a href='e'>f</a><br/>
<a href='f'>f</a><br/>
<a href='g'>g</a><br/>
</body></html>
pigar.tests#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
#  usage='%(prog)s [options]',
# '--search',
# '--check',
# '--log_level'
# '--ignore'
# '--path',
# '--projectpath',
# '--comparison-operator',
# -*- coding: utf-8 -*-
# py2
# py3
# TODO(damnever): insert into db by default.
# (import_name, package_name)
# Avoid lock exception..
# empty top_level.txt
# Create table `table_packages`.
# Create `table_[a-z]`.
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# FIXME: Just a workaround, not a radical cure..
# Flask extension.
# Special cases..
# Other.
# -*- coding: utf-8 -*-
# py2
# py3
# If exists in local environment, do not check on the PyPI.
# Check information on the PyPI.
# FIXME(damnever): the fucking signal..
# C*2+1? The bandwidth matters..
# XXX(damnever): using the magic __new__???
# Incase of unexpected error happens.
# XXX(damnever): timeout?
# Not a gzip file
# Extracting names which can be imported.
# -*- coding: utf-8 -*-
# py2
# py3
# C extension.
# Normal Python file.
# Ignore SyntaxError in Python code.
# For Python 3.3+
# PR#13: https://github.com/damnever/pigar/pull/13
# Sometimes exec statement may be called with tuple in Py2.7.6
# Built-in functions
# **`exec` function in Python 3.**
# `__import__` function.
# `import_module` function.
# >>> 'abc'
# __import__(name)
# Testcase: ResourceWarning
# Install from PYPI.
# Issue for ubuntu: sudo pip install xxx
# Install from local and available in GitHub.
# Link path.
# Egg info path.
# Check whether it can be imported.
# Check .git dir.
#egg={2}'.format(url, branch, pkg_name)
# -*- coding: utf-8 -*-
# An .egg file is actually just a .zip file
# with a different extension, .whl too.
# tarfile has no read method
# -*- coding: utf-8 -*-
# Color functions, win8 ...
# noqa
# noqa
# noqa
# noqa
# noqa
# noqa
#'):
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# Parse command arguments.
# Enable logging.
# Just allow do one thing at each time.
# Lazy calculation.
# If no requirements file given, check in current directory.
# If not found in directory, generate requirements.
# If no version specifies in requirements,
# check in installed packages.
# Save old requirements file.
# Write requirements to file.
# If requirements has been covered, show difference.
# Filtering modules
# Requirements automatically generated by pigar.\n'
# https://github.com/damnever/pigar\n')
# {0}\n'.format(c)
# If imported name equals to package name.
# If not, return all possible packages.
# -*- coding: utf-8 -*-
# Reference:
# http://stackoverflow.com/questions/16571150/how-to-capture-stdout-output-from-a-python-function-call
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# Assume 'foobar' is Py3 builtin package, no need install.
# -*- coding: utf-8 -*-
# .whl and .egg both are .zip file.
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
# Py2
# Py3
# Py2
# Py3
# -*- coding: utf-8 -*-
